/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:06:34 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      BigInteger bigInteger0 = new BigInteger(8233, mockRandom0);
      mockRandom0.longs();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(4);
      base64_0.encode(byteArray0, 18, 1273);
      mockRandom0.doubles();
      bigInteger0.doubleValue();
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      base64_0.encode(byteArray0, 18, 1273);
      base64_0.decode(byteArray0, 8233, (-1347));
      base64_0.encode(byteArray0, 40, (-1209));
      base64_0.encode(byteArray1, (-1209), 4);
      Base64.encodeInteger(bigInteger0);
      base64_0.readResults(byteArray1, 4, 4);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8193, mockRandom0);
      mockRandom0.longs((long) 8193);
      Base64.encodeInteger(bigInteger0);
      Base64.isBase64("5h)=");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      BigInteger bigInteger0 = new BigInteger(8203, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(4);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      base64_0.decode(byteArray2);
      // Undeclared exception!
      Base64.encodeBase64(byteArray2, false, false, 8203);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      BigInteger bigInteger0 = new BigInteger(8193, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(4);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      base64_0.decode(byteArray2);
      // Undeclared exception!
      Base64.decodeInteger(byteArray2);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      BigInteger bigInteger0 = new BigInteger(8193, mockRandom0);
      bigInteger0.getLowestSetBit();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(4);
      bigInteger0.getLowestSetBit();
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      base64_0.decode(byteArray2);
      // Undeclared exception!
      base64_0.decode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      BigInteger bigInteger0 = new BigInteger(8184, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(4);
      base64_0.readResults(byteArray0, 8184, 76);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64 base64_1 = new Base64(8184);
      base64_1.encode(byteArray0, 4, 76);
      base64_1.readResults(byteArray1, 0, 10);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8185, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(9);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      base64_0.encode(byteArray0, 9, 6);
      base64_0.encode(byteArray0, 6, (-2299));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = Base64.decodeBase64("lineSepertor must not contin base6 charactrs: [");
      base64_0.encode(byteArray0, 11, 7);
      base64_0.encode(byteArray0, 11, (-2299));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = Base64.decodeBase64("lineSepertor mustZnot contin base6 charactrs: [");
      base64_0.encode(byteArray0, 11, 11);
      base64_0.encode(byteArray0, 11, (-2331));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte) (-51);
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)21;
      Base64 base64_0 = new Base64(22, byteArray0, false);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8193, mockRandom1);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(905);
      base64_0.encode(byteArray0, 11, 11);
      base64_0.encode(byteArray0, (-3505), (-3505));
      base64_0.readResults(byteArray0, 905, 1347);
      BigInteger bigInteger1 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigInteger0.divideAndRemainder(bigInteger1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger divide by zero
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      BigInteger bigInteger0 = new BigInteger(8193, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(4);
      Base64.encodeBase64String(byteArray0);
      base64_0.encode(byteArray0, 4, 1363);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      base64_0.encode(byteArray1, 4, (-240));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      BigInteger bigInteger0 = new BigInteger(8193, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(4);
      base64_0.readResults(byteArray0, 1363, 78);
      mockRandom0.nextGaussian();
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray2 = base64_0.encode(byteArray0);
      base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      // Undeclared exception!
      base64_0.encode(byteArray3);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = Base64.decodeBase64("lineSepertor must not contain base64 characters: [");
      base64_0.decode(byteArray0, 3, 3);
      base64_0.decode(byteArray0, 3, (-1268));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8193, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.isBase64("");
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0, 140, 8193);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      mockRandom1.nextFloat();
      BigInteger bigInteger0 = new BigInteger(8193, mockRandom1);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(905);
      base64_0.encode(byteArray0, 11, 11);
      base64_0.encode(byteArray0, 905, (-3505));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte) (-49);
      byteArray0[6] = (byte)30;
      byteArray0[7] = (byte)61;
      base64_0.decode(byteArray0, (int) (byte)2, 10);
      Base64.isBase64("lineSepertor must not contain base64 characters: [");
      byte[] byteArray1 = Base64.decodeBase64("lineSepertor must not contain base64 characters: [");
      base64_0.decode(byteArray1, 10, 10);
      Base64.discardWhitespace(byteArray1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = Base64.decodeBase64("lineSepertor must not contain base64 characters: [");
      byte[] byteArray1 = new byte[9];
      byteArray1[1] = (byte) (-16);
      byteArray1[2] = (byte)16;
      byteArray1[3] = (byte) (-21);
      Base64.encodeBase64String(byteArray0);
      base64_0.encode(byteArray0, 0, 6);
      byteArray1[3] = (byte)0;
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      Base64.encodeBase64URLSafe(byteArray2);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byte byte0 = (byte) (-16);
      byte byte1 = (byte) (-21);
      Base64.encodeBase64String(byteArray0);
      int int0 = 6;
      Base64 base64_0 = new Base64(6, byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 6, 1815);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = Base64.decodeBase64("lineSepertor must not contain base64 characters: [");
      base64_0.decode(byteArray0, 10, 10);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)14;
      Base64.isBase64("");
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      base64_0.decode(byteArray0, 15, (-1602));
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      BigInteger bigInteger0 = new BigInteger(1982292598, mockRandom0);
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)121;
      byteArray0[0] = byte0;
      byte byte1 = (byte)3;
      byteArray0[1] = byte1;
      byte byte2 = (byte)76;
      byteArray0[2] = byte2;
      byte byte3 = (byte)4;
      byteArray0[3] = byte3;
      byte byte4 = (byte)104;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-119);
      byteArray0[5] = byte5;
      byte byte6 = (byte)20;
      byteArray0[6] = byte6;
      byte byte7 = (byte)81;
      byteArray0[7] = byte7;
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = Base64.decodeBase64("lineSepertor must not contain base64 characters: [");
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)14;
      byteArray1[1] = (byte) (-16);
      byteArray1[2] = (byte)14;
      byteArray1[3] = (byte) (-21);
      byteArray1[4] = (byte) (-59);
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("lineSepertormustnotcontainbase64characterg==", string0);
      
      base64_0.encode(byteArray0, 0, 6);
      byteArray1[5] = (byte)36;
      byteArray1[6] = (byte) (-64);
      byteArray1[7] = (byte)123;
      byteArray1[8] = (byte) (-85);
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      assertEquals(12, byteArray2.length);
      
      base64_0.encode(byteArray0, (-4230), (int) (byte) (-64));
      assertEquals(31, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      BigInteger bigInteger0 = new BigInteger(3628, mockRandom0);
      Base64.encodeInteger(bigInteger0);
      int int0 = bigInteger0.bitLength();
      assertEquals(3625, int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64();
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(2227, mockRandom0);
      Base64.encodeInteger(bigInteger0);
      boolean boolean0 = Base64.isBase64((byte) (-13));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte) (-71);
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte)36;
      byteArray0[7] = (byte)103;
      byteArray0[8] = (byte)12;
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64(true);
      byte[] byteArray0 = new byte[0];
      base64_1.encode(byteArray0, 64, (-1));
      // Undeclared exception!
      try { 
        base64_1.readResults(byteArray0, 76, 121);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      Base64 base64_1 = new Base64();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)127;
      byte byte0 = (byte)0;
      // Undeclared exception!
      try { 
        base64_1.decode(byteArray0, (int) (byte)0, 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte)113;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte)76;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)1, (int) (byte)76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(1);
      String string0 = "q|5E[#wi2k0/N8";
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, 1, 229);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)32;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)50, (byte)16}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.isBase64((byte)123);
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray0);
      Random.setNextRandom((byte)123);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      boolean boolean0 = Base64.isBase64(byteArray1);
      //  // Unstable assertion: assertFalse(boolean0);
      
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, false, false, 6);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)116, (byte)100, (byte)119, (byte)61}, byteArray3);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64((-15));
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)0, 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)35;
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte)9;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(5, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)61, (byte)97, (byte)67, (byte)35, (byte)51}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte) (-42);
      byteArray0[5] = (byte)123;
      Base64 base64_1 = new Base64(64, byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-42);
      byteArray1[1] = (byte)6;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-123);
      byteArray1[4] = (byte)21;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte) (-123);
      byteArray1[7] = (byte)92;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (-2686), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2686
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      boolean boolean0 = Base64.isBase64(byteArray1);
      //  // Unstable assertion: assertFalse(boolean0);
      
      Base64 base64_0 = new Base64(1);
      base64_0.decode(byteArray1, 1, 1);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = "";
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64.decodeBase64("tdy;");
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)124;
      Base64 base64_0 = new Base64((byte)124, byteArray0, false);
      base64_0.decode((String) null);
      assertFalse(base64_0.isUrlSafe());
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)124;
      byteArray2[1] = (byte)124;
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      assertArrayEquals(new byte[] {(byte)124, (byte)124}, byteArray3);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.isBase64((byte)15);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.subtract(bigInteger1);
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64.isBase64(byteArray0);
      Base64.encodeInteger(bigInteger0);
      Base64.isBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64 base64_0 = new Base64(2465, byteArray0, false);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 2465, (int) (byte)15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2465
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-106);
      byteArray0[5] = (byte)116;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)116, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: []\uFFFD3\u0000\uFFFDt]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)124;
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, (int) (byte)124);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)28;
      Base64.encodeBase64(byteArray0, false, true);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)28);
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
      
      Base64.encodeBase64URLSafe(byteArray1);
      base64_0.encode(byteArray1, (int) (byte)28, (-4274));
      assertEquals(0, byteArray1.length);
      
      boolean boolean1 = Base64.isBase64((byte)120);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false);
      assertArrayEquals(new byte[] {(byte)65, (byte)66, (byte)119, (byte)61}, byteArray2);
      
      boolean boolean2 = base64_0.hasData();
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[2];
      Base64 base64_1 = new Base64(true);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64(byteArray2, false, false);
      Base64.decodeInteger(byteArray2);
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      byte byte0 = (byte)61;
      Base64.isBase64((byte)61);
      Base64.decodeBase64("?]bK%&yo");
      Base64 base64_2 = null;
      try {
        base64_2 = new Base64(2771, byteArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [AAA=\uFFFD\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)28;
      Base64.encodeBase64(byteArray0, false, true);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)28);
      Base64.isBase64(byteArray0);
      base64_0.encode(byteArray1, 4, (-4274));
      Base64.isBase64((byte)120);
      Base64.encodeBase64(byteArray0, false);
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, (byte)0, (byte)99);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, false);
      Base64 base64_0 = new Base64();
      byte[] byteArray3 = new byte[0];
      base64_0.encodeToString(byteArray3);
      Object object0 = new Object();
      Object object1 = new Object();
      int int0 = base64_0.readResults(byteArray3, (-4963), 34);
      assertEquals(0, int0);
      
      String string0 = Base64.encodeBase64String(byteArray2);
      assertEquals("", string0);
      
      byte[] byteArray4 = base64_0.encode(byteArray3);
      Base64.toIntegerBytes(bigInteger0);
      Base64.decodeInteger(byteArray4);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.isArrayByteBase64(byteArray0);
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 8);
      Base64 base64_0 = new Base64(8, byteArray0, true);
      Base64.encodeBase64URLSafeString(byteArray1);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (-1), (-103));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)28;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64Chunked(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64.encodeBase64(byteArray1, false, false);
      Base64 base64_0 = new Base64();
      base64_0.encodeToString(byteArray1);
      Object object0 = new Object();
      Object object1 = new Object();
      base64_0.readResults(byteArray2, 2579, 34);
      base64_0.encode(byteArray1);
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      Base64 base64_1 = new Base64(1);
      base64_1.encode(byteArray0, 2756, (int) (byte) (-98));
      Object object0 = new Object();
      try { 
        base64_1.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte) (-22);
      byteArray2[1] = (byte) (-121);
      Base64.decodeInteger(byteArray2);
      Base64 base64_0 = new Base64((byte) (-22), byteArray2);
      base64_0.encodeToString(byteArray0);
      base64_0.avail();
      Base64.decodeBase64("N~<aN>]/utk%nEvh&va");
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray1);
      Base64.decodeBase64("");
      Base64.encodeBase64(byteArray2);
      base64_0.decode(byteArray3, 0, 0);
      Object object0 = new Object();
      try { 
        base64_0.encode((Object) "5TH{h'q]nN&");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte)0;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      Base64.decodeBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64.decodeInteger(byteArray1);
      base64_0.avail();
      byte[] byteArray2 = Base64.decodeBase64("N~<aN>]/utk%nEvh&va");
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray2);
      Base64.decodeBase64("h`9U9H");
      byte[] byteArray4 = new byte[5];
      byteArray4[0] = (byte)0;
      byteArray4[1] = (byte)0;
      byteArray4[2] = (byte)0;
      byteArray4[3] = (byte) (-123);
      byteArray4[4] = (byte) (-123);
      Base64.encodeBase64(byteArray4);
      base64_0.decode(byteArray3, (int) (byte) (-123), (int) (byte)0);
      Object object0 = new Object();
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = null;
      Base64.encodeBase64((byte[]) null, true, true);
      Base64.encodeBase64((byte[]) null, false, true, 76);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)8;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte)23;
      byteArray1[3] = (byte)8;
      byteArray1[4] = (byte)8;
      String string0 = Base64.encodeBase64String(byteArray1);
      assertEquals("//8XCAg=", string0);
      
      Base64 base64_0 = new Base64((byte) (-1), byteArray0, false);
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte0 = (byte)124;
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte)10;
      Base64.encodeBase64(byteArray0, false, true);
      Base64 base64_0 = new Base64(true);
      base64_0.encode((byte[]) null);
      base64_0.encodeToString((byte[]) null);
      Object object0 = new Object();
      Base64 base64_1 = new Base64(2048);
      try { 
        base64_1.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-44);
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      Base64.decodeBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false, true);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64.decodeBase64("N~<aN>]/utk%nEvh&va");
      Base64.isBase64(byteArray1);
      Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray3 = Base64.decodeBase64("");
      Base64.encodeBase64(byteArray2);
      base64_0.decode(byteArray3, 37, (-1578));
      Object object0 = new Object();
      Base64.isBase64("$+lL!");
      try { 
        base64_0.encode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.not();
      bigInteger0.testBit(1779);
      BigInteger.valueOf(1779);
      bigInteger1.floatValue();
      bigInteger1.floatValue();
      bigInteger1.getLowestSetBit();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, false, false);
      Base64.decodeInteger(byteArray2);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(1779, byteArray3, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [Q2c9PQ==]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-44);
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64(byteArray0, false, true);
      Base64.decodeInteger(byteArray0);
      base64_0.avail();
      byte[] byteArray2 = Base64.decodeBase64("org.apache.commons.codec.EncoderException");
      Base64.isBase64(byteArray0);
      Base64.encodeBase64URLSafe(byteArray2);
      base64_0.decode("org.apache.commons.codec.EncoderException");
      Base64 base64_1 = new Base64();
      base64_1.decode(byteArray1);
      try { 
        base64_0.decode((Object) base64_1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-44);
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false, true);
      Base64.decodeInteger(byteArray0);
      Base64.discardWhitespace(byteArray1);
      Base64.isArrayByteBase64(byteArray1);
      Base64.decodeBase64(") than the specified maxium size of ");
      Base64 base64_1 = null;
      try {
        base64_1 = new Base64(2213, byteArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [gNQ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      Base64 base64_1 = new Base64(1);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 1, 12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte)31;
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
      
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, true);
      Base64.decodeInteger(byteArray3);
      base64_0.avail();
      base64_0.encode(byteArray1, (-703), (int) (byte) (-123));
      assertTrue(base64_0.isUrlSafe());
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)71);
      byte[] byteArray0 = new byte[6];
      byteArray0[5] = (byte)71;
      byteArray0[0] = (byte)71;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte)71;
      byteArray0[3] = (byte)71;
      Base64.isArrayByteBase64(byteArray0);
      boolean boolean1 = Base64.isBase64(byteArray0);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, (int) (byte)71);
      Base64 base64_0 = new Base64(77);
      base64_0.encode(byteArray1, 1, (int) (byte)0);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)82, (byte)119, (byte)66, (byte)72, (byte)82, (byte)48, (byte)100, (byte)72}, byteArray1);
      
      base64_0.decode((Object) "FoIt");
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Base64.isBase64((byte)12);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)12;
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64((-2859));
      byte[] byteArray1 = Base64.decodeBase64("DA==");
      byte[] byteArray2 = base64_0.decode(byteArray1);
      Base64.encodeBase64(byteArray0, false, false);
      byte[] byteArray3 = new byte[2];
      base64_0.encode((byte[]) null);
      base64_0.encodeToString(byteArray2);
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Base64.encodeBase64URLSafe((byte[]) null);
      byte[] byteArray0 = Base64.decodeBase64("tdy;");
      String string0 = Base64.encodeBase64String((byte[]) null);
      assertNull(string0);
      
      Base64 base64_0 = new Base64();
      String string1 = base64_0.encodeToString(byteArray0);
      assertEquals("tdw=", string1);
      
      int int0 = base64_0.readResults((byte[]) null, 6, 6);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte)0;
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
      
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, true);
      Base64.decodeInteger(byteArray3);
      base64_0.avail();
      byte[] byteArray4 = Base64.decodeBase64("N~<aN>]/utk%nEvh&va");
      Base64.isBase64(byteArray2);
      byte[] byteArray5 = Base64.encodeBase64URLSafe(byteArray4);
      assertEquals(12, byteArray5.length);
      
      byte[] byteArray6 = Base64.decodeBase64("s?l]AIfsc");
      byte[] byteArray7 = Base64.encodeBase64(byteArray6);
      assertArrayEquals(new byte[] {(byte)115, (byte)108, (byte)65, (byte)73, (byte)102, (byte)115, (byte)99, (byte)61}, byteArray7);
      
      base64_0.decode(byteArray1, (-3029), (-1547));
      Object object0 = new Object();
      base64_0.decode((Object) "org.apache.commons.codec.EncoderException");
      base64_0.hasData();
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      int int0 = 1021;
      boolean boolean0 = true;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 3587);
      Base64 base64_0 = new Base64(8, byteArray0);
      int int1 = 2518;
      base64_0.readResults(byteArray1, 2518, 1073741824);
      Base64.encodeBase64String(byteArray1);
      base64_0.encode(byteArray1);
      byte[] byteArray2 = new byte[0];
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray2);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-44);
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64(byteArray0, false, true);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      Base64.isArrayByteBase64(byteArray1);
      Base64.decodeBase64(") than the specified maxium size of ");
      Base64.isBase64("'@8>QHJlu.{Y%>");
      base64_0.readResults(byteArray1, 76, 76);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray2, false, false, 0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)42;
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)42;
      byte byte1 = (byte)21;
      Base64 base64_0 = new Base64((-1687), byteArray0, true);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)42, (int) (byte)42);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 42
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-59);
      byteArray0[0] = (byte) (-59);
      Base64 base64_0 = new Base64((-2095), byteArray0, true);
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.decode((Object) "R");
      String string0 = "S >ex4`H.P";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, true, (-2095));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of -2095
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-94);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)111, (byte)103, (byte)61, (byte)61}, byteArray1);
      assertEquals(8, byteArray1.length);
      
      Object object0 = base64_0.decode((Object) "<8I;");
      boolean boolean0 = Base64.isBase64("<8I;");
      assertFalse(boolean0);
      
      Object object1 = base64_0.encode(object0);
      Object object2 = base64_0.decode(object1);
      assertNotSame(object2, object1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = null;
      Base64.encodeBase64((byte[]) null, false, true, 76);
      int int0 = 78;
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 78, 78);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)13;
      Base64 base64_0 = new Base64((-629), byteArray0, false);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(1, byteArray1.length);
      
      boolean boolean0 = base64_0.hasData();
      byte[] byteArray2 = base64_0.decode("");
      boolean boolean1 = Base64.isBase64(byteArray2);
      assertFalse(boolean1 == boolean0);
      assertFalse(base64_0.isUrlSafe());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte) (-111);
      byteArray0[5] = (byte)122;
      base64_0.decode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = 73;
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64(73, (byte[]) null);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)12;
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64(0, byteArray0);
      Base64.encodeBase64(byteArray0, true, false);
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64(byteArray0, false, false, 116);
      base64_0.readResults(byteArray1, (byte)12, 0);
      base64_0.decode((Object) "hQAM");
      base64_0.readResults(byteArray0, 0, (-1046));
      base64_0.decode(byteArray0);
      Base64.decodeBase64("");
      Base64.discardWhitespace(byteArray0);
      base64_0.readResults(byteArray0, 0, 1501);
      Base64.decodeBase64("");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-102);
      byteArray0[0] = (byte) (-102);
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.isBase64((byte) (-102));
      Base64 base64_0 = new Base64((byte) (-102), byteArray1);
      boolean boolean0 = false;
      Base64.encodeBase64(byteArray1, false, false);
      int int0 = 0;
      int int1 = 0;
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte) (-102);
      byteArray2[1] = (byte) (-102);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Base64.isBase64("");
      Base64.isBase64("");
      int int0 = 30;
      Base64 base64_0 = new Base64(30);
      byte[] byteArray0 = null;
      Base64.encodeBase64((byte[]) null);
      Base64.isBase64("");
      byte[] byteArray1 = null;
      Base64.decodeBase64((byte[]) null);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.encodeBase64Chunked((byte[]) null);
      base64_0.decode((byte[]) null);
      Base64.encodeBase64((byte[]) null, true);
      String string0 = "N4kH,SA4l>bhV%!I";
      Base64.isBase64("N4kH,SA4l>bhV%!I");
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, 30, 30);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64((byte[]) null, true);
      Base64.decodeBase64("l-+c?Y%10\"I>");
      Base64.decodeBase64("l-+c?Y%10\"I>");
      Base64.encodeBase64URLSafeString((byte[]) null);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-95);
      Base64 base64_0 = new Base64(2185, byteArray1);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, false, false, (int) (byte) (-95));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of -95
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte byte0 = (byte)22;
      Base64.isBase64((byte)22);
      Base64.isBase64((byte)12);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)12;
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64(byteArray0, false, false);
      int int0 = (-2859);
      Base64 base64_0 = new Base64((-2859));
      Base64.decodeBase64("DA==");
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)22;
      byteArray1[1] = (byte)22;
      byteArray1[2] = (byte)12;
      byteArray1[3] = (byte)12;
      byteArray1[4] = (byte)12;
      byteArray1[5] = (byte) (-24);
      byteArray1[6] = (byte)12;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (-2859), (int) (byte)12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2859
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Base64 base64_0 = new Base64(190);
      byte[] byteArray0 = new byte[4];
      base64_0.encodeToString(byteArray0);
      byteArray0[0] = (byte)97;
      Base64.encodeBase64URLSafe(byteArray0);
      byteArray0[1] = (byte)116;
      base64_0.encodeToString(byteArray0);
      Base64.decodeBase64((String) null);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      Base64.encodeBase64String(byteArray0);
      base64_0.decode("encodeInteger called with null parameter");
      base64_0.isUrlSafe();
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.isBase64((byte)0);
      Base64.isBase64(byteArray1);
      base64_0.avail();
      try { 
        base64_0.encode((Object) "YXQBAA==");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Base64 base64_0 = new Base64((-1324), (byte[]) null);
      base64_0.decode("g{~:o");
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.modPow(bigInteger1, bigInteger1);
      bigInteger2.isProbablePrime((-1));
      bigInteger2.add(bigInteger0);
      bigInteger0.getLowestSetBit();
      bigInteger0.byteValueExact();
      int int0 = (-4008);
      Base64.encodeBase64String((byte[]) null);
      // Undeclared exception!
      try { 
        bigInteger0.modInverse(bigInteger2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[0];
      base64_0.encode(byteArray0);
      Base64.isArrayByteBase64(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-20);
      byteArray1[1] = (byte)19;
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte) (-13);
      byteArray1[5] = (byte)38;
      byteArray1[6] = (byte) (-93);
      base64_0.decode(byteArray1, (-1208), (int) (byte) (-93));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      Base64 base64_0 = new Base64(2466, byteArray0);
      base64_0.decode(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64(byteArray1, false, false, 255);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)24;
      boolean boolean0 = false;
      Base64 base64_0 = new Base64((-3787), byteArray0, false);
      String string0 = null;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (-3787), (int) (byte)24);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3787
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      Object object0 = new Object();
      bigInteger0.equals(object0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.decodeBase64(byteArray0);
      Base64.isBase64("8,{d6Om+YF$-vBTvM");
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("]cz'VTXv#ER3h1");
      Base64.decodeBase64(byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)62;
      Base64.encodeBase64(byteArray1);
      Base64.isArrayByteBase64(byteArray1);
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)62;
      byteArray2[1] = (byte)62;
      byteArray2[2] = (byte)62;
      byteArray2[3] = (byte)62;
      byteArray2[4] = (byte)120;
      byteArray2[5] = (byte)62;
      byteArray2[6] = (byte) (-40);
      byteArray2[7] = (byte)62;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(2846, byteArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [>>>>x>\uFFFD>]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[2];
      Base64.encodeBase64(byteArray0, true, true, 8);
      base64_0.readResults(byteArray0, 1021, 1021);
      Base64.encodeBase64String(byteArray0);
      byte byte0 = (byte) (-112);
      base64_0.encode(byteArray0);
      byteArray0[0] = (byte) (-112);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigInteger0.divide(bigInteger1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger divide by zero
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.not();
      bigInteger0.testBit(1779);
      BigInteger.valueOf(1779);
      bigInteger1.floatValue();
      bigInteger1.getLowestSetBit();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      bigInteger0.and(bigInteger1);
      Base64 base64_0 = new Base64();
      bigInteger0.testBit(0);
      Base64.decodeBase64("X(pbY");
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      base64_0.hasData();
      base64_0.readResults(byteArray0, 1779, 0);
      Base64.encodeBase64(byteArray1, false, false, 1515);
      Base64.encodeBase64String(byteArray1);
      Base64.isArrayByteBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Base64.isBase64((byte) (-55));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte) (-55);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)86;
      Base64.encodeBase64(byteArray0, false, false);
      Base64 base64_0 = new Base64(1283);
      base64_0.encode(byteArray0);
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)115;
      byteArray0[4] = (byte)92;
      base64_0.encodeToString(byteArray0);
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte byte0 = (byte)71;
      Base64.isBase64((byte)71);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)71;
      byte byte1 = (byte) (-128);
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte)71;
      Base64.isArrayByteBase64(byteArray0);
      Base64.isBase64(byteArray0);
      boolean boolean0 = false;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, (int) (byte)71);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-2172), byteArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [GGG\uFFFDGG]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-40);
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte)99;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      Base64.encodeBase64Chunked(byteArray0);
      base64_0.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Base64 base64_0 = new Base64(2641);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte)107;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.negate();
      Base64.encodeInteger(bigInteger0);
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte) (-49);
      byteArray0[7] = (byte) (-20);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      base64_0.decode("?He#@+}oK1L");
      Base64.isBase64(byteArray1);
      base64_0.encode(byteArray0, (int) (byte) (-82), (int) (byte)0);
      Base64.isBase64((byte)84);
      Base64.encodeBase64(byteArray1, true);
      base64_0.readResults(byteArray0, (-3833), (byte)84);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-14);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(7, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)98, (byte)84, (byte)57, (byte)61, (byte)0, (byte)0, (byte) (-14)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)31;
      byteArray0[6] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(14, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)97;
      byteArray0[0] = (byte)97;
      byte byte1 = (byte) (-70);
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte) (-113);
      byte byte2 = (byte)1;
      byteArray0[3] = (byte)1;
      boolean boolean0 = true;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-1112), byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [a\uFFFD\uFFFD\u0001]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      Base64 base64_0 = new Base64((-5211), byteArray1);
      base64_0.decode(byteArray2, (-5211), 0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, true, true, 76);
      base64_0.isUrlSafe();
      base64_0.decode(byteArray3, (-5211), 0);
      base64_0.readResults(byteArray0, (-5211), 1);
      Base64.isBase64((byte) (-1));
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)0);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)0;
      boolean boolean1 = Base64.isBase64(byteArray0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)5;
      Base64.decodeInteger(byteArray0);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.encodeToString(byteArray0);
      base64_0.decode(byteArray0, 0, (-895));
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)13;
      byteArray0[7] = (byte)1;
      base64_0.encode(byteArray0, (int) (byte)13, (-703));
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)0;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, true, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)0;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [6i\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }
}
