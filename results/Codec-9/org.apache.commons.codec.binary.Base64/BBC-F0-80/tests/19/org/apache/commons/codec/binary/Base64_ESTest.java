/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:07:27 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.flipBit(4166);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0, 667, 1);
      BigInteger bigInteger2 = BigInteger.ONE;
      base64_0.encode(byteArray0, (-234), (-234));
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.flipBit(4141);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 4141);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      byte[] byteArray4 = Base64.encodeBase64(byteArray3);
      Base64 base64_0 = new Base64(4141);
      String string0 = base64_0.encodeToString(byteArray4);
      Object object0 = base64_0.decode((Object) string0);
      // Undeclared exception!
      base64_0.encode(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.flipBit(4141);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 4141);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      byte[] byteArray4 = Base64.encodeBase64(byteArray3);
      Base64 base64_0 = new Base64(4141);
      base64_0.encodeToString(byteArray4);
      // Undeclared exception!
      base64_0.encodeToString(byteArray4);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)1;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)2, byteArray0);
      base64_0.encode(byteArray0, 1, (int) (byte)1);
      Base64.decodeInteger(byteArray0);
      Base64.encodeBase64(byteArray0, false);
      base64_0.encode(byteArray0, (int) (byte)1, (-234));
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 4141;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.flipBit(4141);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 4141);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      byte[] byteArray4 = Base64.encodeBase64(byteArray3);
      Base64 base64_0 = new Base64(true);
      String string0 = base64_0.encodeToString(byteArray4);
      base64_0.decode((Object) string0);
      Object object0 = base64_0.decode((Object) string0);
      Object object1 = base64_0.decode(object0);
      // Undeclared exception!
      base64_0.decode(object1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.flipBit(4120);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 4120);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64.encodeBase64Chunked(byteArray2);
      bigInteger0.remainder(bigInteger1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray0);
      bigInteger1.longValue();
      Base64.encodeBase64(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(4120, byteArray3, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 charactersg==]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.flipBit(4120);
      bigInteger1.not();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      bigInteger1.shiftRight(4120);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 4120);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      BigInteger bigInteger2 = BigInteger.TEN;
      byte[] byteArray3 = Base64.encodeBase64(byteArray2);
      Base64 base64_0 = new Base64(4120);
      bigInteger1.doubleValue();
      byte[] byteArray4 = Base64.encodeBase64URLSafe(byteArray3);
      base64_0.encode(byteArray4);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.flipBit(4120);
      BigInteger bigInteger2 = BigInteger.TEN;
      bigInteger0.multiply(bigInteger2);
      bigInteger1.not();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 2146234384);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      BigInteger.valueOf(522L);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2);
      Base64 base64_0 = new Base64(4120);
      Base64.encodeBase64String(byteArray3);
      byte[] byteArray4 = Base64.encodeBase64URLSafe(byteArray1);
      Base64.encodeBase64(byteArray4, true);
      byte[] byteArray5 = base64_0.encode(byteArray3);
      // Undeclared exception!
      base64_0.encode(byteArray5);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.flipBit(4093);
      BigInteger bigInteger2 = bigInteger1.gcd(bigInteger0);
      bigInteger2.not();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64();
      int int0 = base64_0.avail();
      assertEquals(0, int0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 2146234384);
      byte[] byteArray2 = base64_0.decode(byteArray1);
      assertEquals(684, byteArray2.length);
      assertEquals(936, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.flipBit(4098);
      bigInteger1.gcd(bigInteger0);
      bigInteger1.not();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64();
      base64_0.avail();
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 2146234384);
      base64_0.encodeToString(byteArray1);
      assertEquals(912, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)77;
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
      
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      int int0 = Base64.PEM_CHUNK_SIZE;
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false, false);
      assertArrayEquals(new byte[] {(byte)65, (byte)71, (byte)107, (byte)65, (byte)84, (byte)81, (byte)61, (byte)61}, byteArray2);
      
      Base64 base64_0 = new Base64((byte)0);
      byte[] byteArray3 = base64_0.decode("~1:M6h3i1jB4`");
      assertEquals(7, byteArray3.length);
      
      bigInteger0.signum();
      byte[] byteArray4 = base64_0.decode(byteArray1);
      assertArrayEquals(new byte[] {(byte)105, (byte)0, (byte)77}, byteArray4);
      
      BigInteger bigInteger1 = bigInteger0.flipBit(2185);
      int int1 = Base64.MIME_CHUNK_SIZE;
      base64_0.encode(byteArray1, (-1366), 1098);
      assertArrayEquals(new byte[] {(byte)97, (byte)81, (byte)66, (byte)78}, byteArray1);
      
      base64_0.avail();
      Base64.encodeBase64(byteArray0, false, true);
      byte[] byteArray5 = Base64.encodeInteger(bigInteger1);
      assertEquals(368, byteArray5.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)103;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 1, 149);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[1] = (byte)13;
      Base64 base64_0 = new Base64((byte)13, byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, (int) (byte)13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Base64.isBase64(byteArray0);
      boolean boolean1 = Base64.isBase64((byte)61);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false, (int) (byte)60);
      Base64 base64_0 = new Base64((byte)60);
      base64_0.decode(byteArray2, 1, (int) (byte)60);
      byte[] byteArray3 = Base64.CHUNK_SEPARATOR;
      assertNotSame(byteArray3, byteArray1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)9);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte)9;
      byteArray0[8] = (byte)9;
      boolean boolean1 = Base64.isBase64(byteArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte) (-20);
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte) (-31);
      byteArray0[5] = (byte)9;
      byteArray0[7] = (byte)19;
      byteArray0[8] = (byte)0;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-31), (byte) (-20), (byte)84, (byte) (-31), (byte)0, (byte)19, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(61, byteArray0, false);
      base64_0.decode((Object) "Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64.decodeBase64("Q3C.kG=YFh\"!pAuJehx");
      Object object0 = base64_0.decode((Object) "Parameter supplied to Base64 decode is not a byte[] or a String");
      // Undeclared exception!
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.encodeBase64(byteArray0, true, false, 64);
      base64_0.decode(byteArray1, 0, (int) (byte)103);
      Base64.decodeBase64(byteArray0);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64(false);
      Base64.isBase64((byte)126);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64(byteArray0, true, true, 6);
      Base64 base64_1 = new Base64();
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false, true, 110);
      base64_0.decode(byteArray2, 1, (int) (byte)103);
      Base64.decodeBase64(byteArray3);
      base64_0.readResults(byteArray2, 1, 1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64 base64_0 = new Base64(false);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.negate();
      base64_0.encode(byteArray0, (-286), (-286));
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[5];
      base64_0.readResults(byteArray0, 17, 64);
      Base64 base64_1 = new Base64();
      byte[] byteArray1 = new byte[10];
      byteArray1[2] = (byte) (-76);
      byteArray1[3] = (byte) (-4);
      byteArray1[4] = (byte)1;
      byteArray1[6] = (byte)12;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (int) (byte)1, 110);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64.isBase64("6||?:k\"=l4%+lW");
      Base64.encodeBase64(byteArray0, true, false, 0);
      Base64 base64_0 = new Base64();
      base64_0.hasData();
      Base64.encodeBase64(byteArray0, false, true, 76);
      Base64.encodeBase64URLSafe((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[2];
      Base64 base64_1 = new Base64();
      byte[] byteArray1 = new byte[7];
      byteArray1[1] = (byte) (-110);
      byteArray1[2] = (byte) (-110);
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte) (-110);
      byteArray2[1] = (byte)103;
      byteArray2[2] = (byte) (-110);
      byteArray2[3] = (byte) (-110);
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)0;
      byteArray2[6] = (byte)0;
      byteArray2[7] = (byte)0;
      byte[] byteArray3 = Base64.encodeBase64(byteArray2);
      Base64.encodeBase64((byte[]) null, true, false, (int) (byte) (-110));
      base64_1.decode(byteArray3, 5, 10);
      Base64.decodeBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte)107;
      byteArray0[4] = (byte) (-118);
      Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.avail();
      Base64.isBase64((byte)13);
      Base64.isBase64((byte) (-4));
      Base64.decodeBase64((byte[]) null);
      Base64 base64_1 = null;
      try {
        base64_1 = new Base64((byte) (-4), byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [o\uFFFD\uFFFDk\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)51;
      Base64.isBase64("encodeInteger called with null parameter");
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)37;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 0, (int) (byte)37);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(false);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.negate();
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)112;
      byte byte0 = (byte) (-87);
      byteArray1[1] = (byte) (-87);
      byteArray1[2] = (byte)91;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 0, (int) (byte)91);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      Base64 base64_1 = new Base64(false);
      int int0 = (-286);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.negate();
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, 76, 76);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(8180, byteArray0, false);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64(byteArray1, true, true);
      Base64 base64_1 = new Base64((-2378));
      Base64.encodeBase64(byteArray0, true);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)16;
      byteArray2[3] = (byte) (-9);
      byte byte0 = (byte)90;
      byteArray2[4] = (byte)90;
      byteArray2[5] = (byte) (-12);
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte) (-102);
      Base64 base64_0 = new Base64(2322, byteArray0, true);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.compareTo(bigInteger1);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      bigInteger0.bitLength();
      bigInteger0.toByteArray();
      bigInteger0.toString();
      base64_0.decode(byteArray0, (-1), (-200));
      base64_0.encode(byteArray0);
      BigInteger bigInteger2 = Base64.decodeInteger(byteArray0);
      Object object0 = base64_0.decode((Object) "");
      base64_0.decode(object0);
      bigInteger1.xor(bigInteger2);
      Base64.encodeBase64URLSafe(byteArray1);
      bigInteger1.modPow(bigInteger0, bigInteger0);
      Base64.decodeBase64(byteArray0);
      base64_0.avail();
      Base64.discardWhitespace(byteArray0);
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)38;
      byteArray2[1] = (byte)38;
      byteArray2[2] = (byte) (-102);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray2, 1, 14);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[2];
      base64_0.readResults(byteArray0, 17, 38);
      Base64 base64_1 = new Base64();
      Object object0 = base64_1.decode((Object) "encodeInteger called with null parameter");
      base64_0.decode(object0);
      Base64 base64_2 = new Base64(17);
      base64_2.encode(object0);
      try { 
        base64_2.encode((Object) base64_0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 8180;
      byte[] byteArray0 = new byte[0];
      Base64.isBase64("-38lj!jdIgU!#A_");
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(70, byteArray1, false);
      byte[] byteArray2 = null;
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 329, 8180);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Base64 base64_0 = new Base64(27);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)8;
      base64_0.encodeToString(byteArray0);
      byteArray0[2] = (byte)0;
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.isBase64("AAgA\r\n");
      byte[] byteArray3 = Base64.decodeBase64("UTF-16BE");
      Base64.encodeBase64Chunked(byteArray3);
      Base64 base64_1 = new Base64((-3100), byteArray1);
      Base64 base64_2 = null;
      try {
        base64_2 = new Base64(76, byteArray2, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [AAgA]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-1);
      byte byte1 = (byte)35;
      byte byte2 = (byte)127;
      byte byte3 = (byte)1;
      byte byte4 = (byte) (-88);
      byte[] byteArray1 = null;
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte)95;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 1, 9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-86);
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)0;
      byte byte1 = (byte)80;
      byte byte2 = (byte) (-100);
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)17;
      Base64.encodeBase64(byteArray0, true, true, 64);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-32);
      Base64 base64_0 = new Base64(2102, byteArray0, true);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      base64_0.encode(byteArray0, 26, 58);
      Base64.isBase64("");
      byte byte0 = (byte)41;
      Base64.isBase64((byte)41);
      base64_0.readResults(byteArray0, (byte) (-125), 2488);
      Base64.isBase64(byteArray1);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Base64 base64_0 = new Base64(27);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)8;
      base64_0.encodeToString(byteArray0);
      byteArray0[2] = (byte)0;
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64(byteArray1, true, false);
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)0;
      Base64 base64_1 = new Base64(27);
      byte[] byteArray3 = new byte[2];
      byteArray3[0] = (byte)61;
      byteArray3[1] = (byte)0;
      base64_1.decode(byteArray3, (int) (byte)0, (int) (byte)8);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      Base64.decodeInteger(byteArray0);
      Base64.isBase64((byte)0);
      Base64.isBase64((byte) (-1));
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.discardWhitespace(byteArray1);
      Base64.isArrayByteBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.max(bigInteger1);
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64((byte) (-1), byteArray0, false);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte) (-1);
      base64_0.readResults(byteArray1, (byte) (-1), (byte) (-1));
      base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      byte[] byteArray3 = new byte[0];
      Base64.encodeBase64(byteArray3, false, false, 76);
      String string0 = null;
      Base64.decodeBase64((String) null);
      Base64.isBase64(byteArray2);
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Base64.isBase64((byte)48);
      Base64 base64_0 = new Base64(true);
      base64_0.decode((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-88);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)14;
      byteArray1[1] = (byte)127;
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte) (-88);
      byteArray1[4] = (byte) (-1);
      byteArray1[5] = (byte) (-88);
      Base64.decodeBase64(byteArray1);
      Base64 base64_0 = new Base64((byte) (-1), byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      base64_0.avail();
      Base64.isBase64((byte) (-49));
      Base64.isBase64((byte)81);
      Base64.decodeBase64(byteArray2);
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      Base64.isArrayByteBase64(byteArray3);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("org.apache.comeons.codec.EncoderExcgption");
      Base64.isBase64("org.apache.comeons.codec.EncoderExcgption");
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD\uFFFD\u001A\uFFFD\uFFFD!y\uFFFD&z\uFFFD\uFFFDr\uFFFD^pI\u0721\u05EB\u0013\u0017 \uFFFD\u0628]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      Object object0 = base64_0.decode((Object) "an:gZT4/]7Dj<8W?lM ");
      base64_0.encode(object0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)103;
      Base64.encodeBase64(byteArray0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, 8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte) (-49);
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(false);
      base64_0.encodeToString((byte[]) null);
      Base64.isBase64(byteArray0);
      Base64.encodeBase64((byte[]) null);
      Base64.isBase64("");
      Base64.encodeBase64((byte[]) null, false, false);
      Base64 base64_1 = new Base64((byte)45, (byte[]) null, false);
      Base64 base64_2 = new Base64(true);
      Base64.decodeBase64((String) null);
      base64_2.encode((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_1 = new Base64(64, byteArray0, true);
      base64_1.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte) (-49);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(false);
      bigInteger0.negate();
      base64_0.encode(byteArray0, (int) (byte)112, (-286));
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64URLSafe(byteArray1);
      Base64.isBase64("4sxoFh[cvgf_K<O");
      Base64.decodeBase64("UTF-16BE");
      Base64 base64_1 = null;
      try {
        base64_1 = new Base64(223, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [p-\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte) (-49);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(false);
      bigInteger0.negate();
      base64_0.encode(byteArray0, 10, (-286));
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeInteger(bigInteger0);
      int int0 = 110;
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)112;
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte) (-49);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(false);
      bigInteger0.negate();
      base64_0.encode(byteArray0, 10, (-286));
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64URLSafe(byteArray1);
      int int0 = 110;
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 8180;
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(8180, byteArray0, false);
      base64_0.decode((Object) "-38lj!jdIgU!#A_");
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64("-38lj!jdIgU!#A_");
      base64_0.encodeToString(byteArray1);
      String string0 = "lineSeperator must not contain base64 characters: [";
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64(byteArray2, false);
      Base64.encodeBase64String(byteArray1);
      try { 
        base64_0.encode((Object) "lineSeperator must not contain base64 characters: [");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)105;
      byte byte0 = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)77;
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false);
      byte byte1 = (byte) (-40);
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)105;
      byteArray2[1] = (byte)77;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte) (-40);
      byteArray2[4] = (byte)84;
      byteArray2[5] = (byte)68;
      Base64.decodeInteger(byteArray2);
      byte[] byteArray3 = Base64.decodeBase64("QUdrQVRRPT0NCg==");
      Base64.encodeBase64(byteArray3, false);
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64.isBase64("AGkATQ==");
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte) (-40), byteArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [AGkATQ==\r
         // ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.isBase64("org.apache.commons.codec.EncoderException");
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64(0, byteArray1, true);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.max(bigInteger1);
      Base64.isBase64(byteArray0);
      Base64.encodeBase64(byteArray0);
      Base64.isBase64("KV8x/PLqH)*=fmV");
      byte[] byteArray1 = Base64.decodeBase64("");
      Base64 base64_0 = new Base64(0, byteArray1);
      base64_0.encode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-1);
      byteArray0[0] = (byte) (-1);
      byte byte1 = (byte) (-62);
      byteArray0[1] = (byte) (-62);
      byte byte2 = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      boolean boolean0 = false;
      Base64 base64_0 = new Base64((byte) (-1), byteArray0, false);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      base64_0.encode(byteArray1, (-2379), (int) (byte) (-1));
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, (byte) (-1), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte)21;
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte)102;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte)95;
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray1 = new byte[0];
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true, 64);
      Base64.isBase64(byteArray2);
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      Base64.encodeBase64(byteArray3, true);
      Base64.decodeBase64("oAvN5c3hQiQwx7x,(B`");
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64((byte) (-1), byteArray0, false);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      base64_0.encode(byteArray1, (-2379), (int) (byte) (-1));
      Base64.encodeBase64(byteArray1);
      Base64.isBase64("{");
      Base64.decodeBase64("KV8x/PLqH)*=fmV");
      Base64 base64_1 = new Base64((byte)0, byteArray0);
      try { 
        base64_1.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64((byte) (-1), byteArray0, false);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      base64_0.encode(byteArray1, (-2379), (int) (byte) (-1));
      base64_0.readResults(byteArray0, (byte)0, 64);
      bigInteger0.getLowestSetBit();
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false, false);
      Base64 base64_1 = new Base64((-2379));
      base64_0.decode((String) null);
      base64_1.decode(byteArray1);
      bigInteger0.flipBit((byte)0);
      bigInteger0.intValueExact();
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray2, (-1), 789);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.max(bigInteger1);
      Base64.isBase64(byteArray0);
      Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)1);
      base64_0.decode(byteArray0, (int) (byte)17, (-41));
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)77;
      Base64.isBase64(byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      bigInteger0.getLowestSetBit();
      Base64.encodeBase64(byteArray0, false, false);
      Base64 base64_0 = new Base64((byte)0);
      base64_0.decode("~1:M6h3i1jB4`");
      base64_0.decode(byteArray1);
      bigInteger0.flipBit(2185);
      bigInteger0.intValueExact();
      base64_0.encode(byteArray1, (-1366), 1098);
      base64_0.avail();
      Base64.encodeBase64(byteArray0, false, true);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte byte0 = (byte)48;
      Base64.isBase64((byte)48);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.max(bigInteger1);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64String((byte[]) null);
      int int0 = (-3068);
      Base64 base64_0 = new Base64((-3068));
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)77;
      Base64.isBase64(byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      bigInteger0.getLowestSetBit();
      Base64.encodeBase64(byteArray0, false, false);
      Base64 base64_0 = new Base64((byte)0);
      base64_0.decode("~1:M6h3i1jB4`");
      base64_0.decode(byteArray1);
      bigInteger0.flipBit(2185);
      bigInteger0.intValueExact();
      base64_0.encode(byteArray1, (-1366), 1098);
      base64_0.avail();
      Base64.encodeBase64(byteArray0, false, true);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Base64.encodeBase64((byte[]) null, true, false);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-28);
      byteArray0[5] = (byte) (-79);
      byteArray0[6] = (byte) (-123);
      base64_0.decode(byteArray0, (-691), (int) (byte) (-123));
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64((byte) (-1), byteArray0, false);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      base64_0.encode(byteArray1, (-2379), (int) (byte) (-1));
      base64_0.readResults(byteArray0, (byte)0, 0);
      byte[] byteArray2 = base64_0.encode(byteArray0);
      Base64.encodeBase64(byteArray0, false, false, 181);
      Base64.decodeBase64("lsev8o7'g@pQE>#%A");
      byte[] byteArray3 = new byte[9];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte)0;
      byteArray3[2] = (byte)0;
      byteArray3[3] = (byte) (-1);
      byteArray3[4] = (byte) (-62);
      byteArray3[5] = (byte)0;
      byteArray3[6] = (byte)0;
      byteArray3[7] = (byte) (-62);
      byteArray3[8] = (byte) (-89);
      Base64.isBase64(byteArray3);
      Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64(byteArray2, false);
      Base64.decodeBase64("oAvN5c3hQiQwx7x,(B`");
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-9);
      Base64 base64_0 = new Base64(813, byteArray0, false);
      Object object0 = new Object();
      base64_0.readResults(byteArray0, 99, (byte) (-9));
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.intValue();
      bigInteger0.toString(443);
      // Undeclared exception!
      try { 
        bigInteger0.testBit((byte) (-9));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Negative bit address
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.EncoderException");
      Base64.isBase64("org.apache.commons.codec.EncoderException");
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, false, false, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (38) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)81;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true);
      Base64 base64_0 = new Base64((-1));
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)81;
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)81;
      base64_0.encode(byteArray2);
      base64_0.decode(byteArray1, 0, 1843);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.decodeInteger(byteArray1);
      base64_0.decode(byteArray2, (-592), 0);
      Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      Object object0 = base64_0.decode((Object) "org.apache.commons.codec.DecoderException");
      Base64.encodeBase64Chunked(byteArray1);
      Base64.encodeBase64Chunked(byteArray2);
      base64_0.decode(object0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64(byteArray0, true, false);
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte) (-45);
      byteArray0[6] = (byte)114;
      byteArray0[7] = (byte) (-94);
      byteArray0[8] = (byte)0;
      Base64.encodeBase64URLSafe(byteArray0);
      base64_0.decode("MaT/");
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Base64 base64_0 = new Base64((-364));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte) (-99);
      byteArray0[6] = (byte) (-68);
      base64_0.encode(byteArray0, (int) (byte)67, 0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)0;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(48, byteArray0);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.intValue();
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.remainder(bigInteger0);
      bigInteger1.abs();
      bigInteger0.andNot(bigInteger1);
      bigInteger0.max(bigInteger1);
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)1, byteArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [QUFFQgDh]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)17;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-13);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 2, (int) (byte)17);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte)21;
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte)102;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte)95;
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray1 = new byte[0];
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true, 64);
      byte[] byteArray3 = new byte[2];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte)0;
      base64_0.decode(byteArray3, (int) (byte)0, (int) (byte)0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray2, 0, 48);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Base64 base64_0 = new Base64(27);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)8;
      base64_0.encodeToString(byteArray0);
      byteArray0[2] = (byte)0;
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, false);
      byte[] byteArray3 = new byte[2];
      byteArray3[0] = (byte)68;
      byteArray3[1] = (byte) (-40);
      Base64.encodeBase64String(byteArray3);
      Base64.decodeInteger(byteArray3);
      Base64.decodeBase64("!i< kX]lW5Ypm1[6");
      byte[] byteArray4 = Base64.encodeBase64(byteArray2, false);
      Base64.encodeBase64URLSafeString(byteArray4);
      Base64.isBase64("");
      base64_0.decode(byteArray4, (int) (byte)92, 1481);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.max(bigInteger1);
      Base64.isBase64(byteArray0);
      Base64.encodeBase64(byteArray0);
      Base64.isBase64("KV8x/PLqH)*=fmV");
      byte[] byteArray1 = Base64.decodeBase64("");
      Base64 base64_0 = new Base64(0, byteArray1);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-90);
      byteArray0[0] = (byte) (-90);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.compareTo(bigInteger0);
      bigInteger0.toByteArray();
      bigInteger0.and(bigInteger1);
      Base64 base64_0 = new Base64(false);
      base64_0.isUrlSafe();
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64(byteArray0, false);
      base64_0.hasData();
      base64_0.encode(byteArray1, 1, 0);
      Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte) (-90);
      byteArray2[1] = (byte) (-90);
      byteArray2[2] = (byte) (-90);
      byteArray2[3] = (byte) (-90);
      byteArray2[4] = (byte) (-78);
      byteArray2[5] = (byte) (-90);
      byteArray2[6] = (byte)36;
      byteArray2[7] = (byte) (-90);
      byte[] byteArray3 = new byte[0];
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray3, 73, (int) (byte)36);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 73
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte) (-27);
      byte byte0 = (byte)57;
      byteArray0[4] = (byte)57;
      byte byte1 = (byte)14;
      byteArray0[5] = (byte)14;
      byte byte2 = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)41;
      byteArray0[8] = (byte)94;
      Base64.decodeBase64(byteArray0);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)94, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [q\"o\uFFFD9\u000E\u0000)^]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-35);
      base64_0.decode(byteArray0, (int) (byte)0, (-1980));
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Base64.encodeBase64((byte[]) null);
      Base64.encodeBase64Chunked((byte[]) null);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)72;
      byteArray1[1] = (byte)61;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte) (-16);
      Base64.encodeBase64(byteArray1, true, false);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)27;
      base64_0.decode(byteArray0);
      Base64.isBase64("MR=r?@\"\"i4#dv");
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-125);
      Base64 base64_0 = new Base64(1, byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      Base64.isBase64("'Mu3-HB$2uu!G(S]C/3");
      bigInteger1.doubleValue();
      Base64.encodeInteger(bigInteger1);
      base64_0.encode(byteArray0, (int) (byte) (-125), (-963));
      byte[] byteArray1 = Base64.encodeBase64Chunked((byte[]) null);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      byte byte0 = (byte)48;
      Base64.isBase64((byte)48);
      Base64 base64_0 = new Base64(false);
      int int0 = 0;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)48;
      Base64 base64_1 = null;
      try {
        base64_1 = new Base64(0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [00000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.decode((Object) "P{M\"~nl");
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Base64 base64_0 = new Base64(2391);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.floatValue();
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64((byte[]) null, true, false);
      Base64.encodeBase64((byte[]) null, true);
      base64_0.avail();
      BigInteger bigInteger1 = null;
      // Undeclared exception!
      try { 
        bigInteger0.xor((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertArrayEquals(new byte[] {(byte)52, (byte)65, (byte)68, (byte)47, (byte)65, (byte)65, (byte)61, (byte)61}, byteArray1);
      
      Base64 base64_0 = new Base64(0, byteArray0, false);
      boolean boolean0 = base64_0.hasData();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)79;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      assertArrayEquals(new byte[] {(byte)77, (byte)110, (byte)79, (byte)86, (byte)74, (byte)48, (byte)56, (byte)13, (byte)10}, byteArray1);
      assertEquals(9, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Base64 base64_0 = new Base64(81);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)2;
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("LLx2Ag", string0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte) (-38);
      byte byte0 = (byte) (-97);
      byteArray0[4] = (byte) (-97);
      byteArray0[5] = (byte)69;
      boolean boolean0 = false;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      Base64 base64_0 = new Base64(false);
      base64_0.decode("");
      Base64.encodeBase64Chunked(byteArray1);
      base64_0.encodeToString(byteArray1);
      Base64.encodeBase64(byteArray1, false, false);
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        bigInteger0.subtract((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Base64 base64_0 = new Base64(5046);
      byte[] byteArray0 = new byte[4];
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte) (-126);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)1;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [Y)\u0000\u0001k\uFFFD\u0000\u0001]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }
}
