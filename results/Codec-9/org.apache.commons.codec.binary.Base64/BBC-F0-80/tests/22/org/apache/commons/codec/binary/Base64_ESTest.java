/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:08:01 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[139];
      Base64 base64_0 = new Base64((byte)7, byteArray0, true);
      base64_0.encode(byteArray0, (int) (byte)7, 47);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      base64_0.encode(byteArray0, 47, 47);
      base64_0.encode(byteArray0, (int) (byte)7, 76);
      base64_0.decode(byteArray1, (int) (byte)7, 85);
      base64_0.encode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[139];
      Base64 base64_0 = new Base64((byte)7, byteArray0, false);
      byte[] byteArray1 = Base64.decodeBase64("");
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      Base64.encodeBase64(byteArray1);
      base64_0.encode(byteArray0, (int) (byte)7, 45);
      Base64 base64_1 = new Base64(76);
      byte[] byteArray3 = new byte[9];
      byteArray3[0] = (byte)7;
      byteArray3[1] = (byte)7;
      byteArray3[2] = (byte) (-1);
      byteArray3[3] = (byte)7;
      byteArray3[4] = (byte)7;
      byteArray3[5] = (byte) (-107);
      byteArray3[6] = (byte) (-1);
      byteArray3[7] = (byte)7;
      byteArray3[8] = (byte)7;
      base64_1.encode(byteArray3, 2852, (-1));
      base64_0.encode(byteArray3, (int) (byte)7, (int) (byte) (-1));
      int int0 = Base64.PEM_CHUNK_SIZE;
      base64_0.decode(byteArray3, (int) (byte)7, 857);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[123];
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[99];
      Base64 base64_0 = new Base64((byte)7, byteArray0, true);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      base64_0.encode(byteArray1, (int) (byte)7, 99);
      base64_0.encode(byteArray1, (int) (byte)7, (int) (byte)7);
      base64_0.encode(byteArray1, (int) (byte)7, 76);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64.decodeInteger(byteArray1);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (int) (byte)7, 1766);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 132
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[70];
      Base64 base64_0 = new Base64(23, byteArray0, false);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      base64_0.decode(byteArray2, 23, 23);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      base64_0.decode(byteArray2);
      boolean boolean0 = false;
      // Undeclared exception!
      Base64.encodeBase64(byteArray3, false);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[61];
      Base64 base64_0 = new Base64((byte)8, byteArray0, false);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      Base64 base64_1 = new Base64();
      base64_0.encode(byteArray1);
      base64_0.encode(byteArray0);
      Base64 base64_2 = new Base64(true);
      // Undeclared exception!
      Base64.encodeBase64URLSafeString(byteArray2);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[30];
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray0, (int) (byte)7, (int) (byte)7);
      base64_0.encode(byteArray0, (int) (byte)7, (-1));
      base64_0.readResults(byteArray0, 2, 2);
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, 91, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      Base64 base64_0 = new Base64((byte)8, byteArray0, false);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      base64_0.encode(byteArray1, (int) (byte)8, (int) (byte)8);
      byte[] byteArray2 = Base64.decodeBase64("M&aw");
      base64_0.encode(byteArray2, (int) (byte)8, (-1));
      BigInteger bigInteger0 = BigInteger.ONE;
      Random.setNextRandom(1621);
      base64_0.decode((Object) "M&aw");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      Base64 base64_0 = new Base64((byte)8, byteArray0, true);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      base64_0.encode(byteArray1, (int) (byte)8, (int) (byte)8);
      byte[] byteArray2 = Base64.decodeBase64("M&aw");
      base64_0.encode(byteArray2, (int) (byte)8, (-1));
      Base64.decodeInteger(byteArray2);
      Base64.decodeInteger(byteArray1);
      base64_0.decode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[30];
      Base64 base64_0 = new Base64((byte)7, byteArray0, true);
      Base64.encodeBase64(byteArray0);
      base64_0.encode(byteArray0, (int) (byte)7, (int) (byte)7);
      Base64.decodeBase64(") than the specified maxium size of ");
      base64_0.encode(byteArray0, 1, (-3292));
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)7;
      byteArray1[1] = (byte)7;
      byteArray1[2] = (byte)7;
      byteArray1[3] = (byte)7;
      byteArray1[4] = (byte)7;
      byteArray1[5] = (byte)7;
      byteArray1[6] = (byte)7;
      byteArray1[7] = (byte)7;
      base64_0.decode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[30];
      Base64 base64_0 = new Base64((byte)7, byteArray0, false);
      Base64.encodeBase64(byteArray0);
      base64_0.encode(byteArray0, (int) (byte)7, (int) (byte)7);
      Base64.decodeBase64(") than the specified maxium size of ");
      base64_0.encode(byteArray0, 1, (-3292));
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)7;
      byteArray1[1] = (byte)7;
      byteArray1[2] = (byte)7;
      byteArray1[3] = (byte)7;
      byteArray1[4] = (byte)7;
      byteArray1[5] = (byte)7;
      byteArray1[6] = (byte)7;
      byteArray1[7] = (byte)7;
      base64_0.decode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      Base64 base64_0 = new Base64((byte)8, byteArray0, true);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray3 = base64_0.encode(byteArray1);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      byte[] byteArray5 = base64_0.encode(byteArray4);
      // Undeclared exception!
      Base64.encodeBase64(byteArray5);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      Base64 base64_0 = new Base64((byte)8, byteArray0, true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray3 = base64_0.encode(byteArray1);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      byte[] byteArray5 = base64_0.encode(byteArray4);
      // Undeclared exception!
      base64_0.encode(byteArray5);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      Base64 base64_0 = new Base64((byte)8, byteArray0, true);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray3 = base64_0.encode(byteArray1);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      byte[] byteArray5 = base64_0.encode(byteArray4);
      // Undeclared exception!
      Base64.decodeInteger(byteArray5);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      Base64 base64_0 = new Base64((byte)8, byteArray0, true);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray1 = base64_0.encode(byteArray0);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.longValue();
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray3 = base64_0.encode(byteArray1);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      byte[] byteArray5 = base64_0.encode(byteArray4);
      Base64.decodeInteger(byteArray5);
      byte[] byteArray6 = base64_0.encode(byteArray5);
      // Undeclared exception!
      base64_0.decode(byteArray6);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)90;
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      Base64 base64_0 = new Base64((byte)8, byteArray0, true);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray1 = base64_0.encode(byteArray0);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.nextProbablePrime();
      bigInteger1.longValue();
      Base64.toIntegerBytes(bigInteger1);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      Base64.decodeInteger(byteArray4);
      byte[] byteArray5 = base64_0.encode(byteArray4);
      // Undeclared exception!
      Base64.discardWhitespace(byteArray5);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1395);
      BigInteger bigInteger0 = new BigInteger(1395, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Random.setNextRandom((-1326));
      Base64 base64_0 = new Base64(2127, byteArray0, true);
      Object object0 = base64_0.decode((Object) "aFb7x|=(gD!G,");
      Object object1 = base64_0.decode(object0);
      // Undeclared exception!
      try { 
        base64_0.encode(object1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1908874361);
      BigInteger bigInteger0 = new BigInteger(1908874361, mockRandom0);
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte)71;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, (int) (byte)1, 12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64(1073741821);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      base64_0.decode(byteArray1, 0, 1073741821);
      base64_0.readResults(byteArray0, 0, 66);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64(1073741821);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      base64_0.decode(byteArray1, 2, 1073741821);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base64 base64_0 = new Base64((byte)8, byteArray0, false);
      MockRandom mockRandom0 = new MockRandom((-485L));
      BigInteger bigInteger0 = new BigInteger(1079, mockRandom0);
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Random.setNextRandom(2170);
      Base64 base64_0 = new Base64();
      base64_0.decode((byte[]) null);
      base64_0.decode((byte[]) null);
      base64_0.encode((byte[]) null, 8165, (-2328));
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.encodeBase64Chunked((byte[]) null);
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, 13, 13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64(1073741824);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      base64_0.decode(byteArray1, 0, 1073741824);
      base64_0.readResults(byteArray1, 0, 0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)61);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base64 base64_0 = new Base64((byte)8, byteArray0, true);
      base64_0.decode((String) null);
      Object object0 = new Object();
      base64_0.decode((String) null);
      base64_0.encode(byteArray0, 0, (int) (byte)8);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.encode(byteArray1);
      Base64.decodeInteger(byteArray1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64(1073741824);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      base64_0.decode(byteArray1, 0, 1073741824);
      Base64.isBase64(byteArray1);
      base64_0.avail();
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte) (-74);
      byte byte0 = (byte)22;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte) (-42);
      byteArray0[4] = (byte)74;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 0, (int) (byte)22);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)92;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray1, (int) (byte)7, (int) (byte)92);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, (-1842), (byte)92);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64(7, byteArray0, true);
      base64_0.encode(byteArray0);
      try { 
        base64_0.encode((Object) "R9t");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64.encodeBase64(byteArray0, true, false, (int) (byte)6);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.decodeBase64(byteArray0);
      Base64.isBase64((byte)123);
      Base64 base64_0 = new Base64((byte)123, byteArray0, false);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64String(byteArray0);
      Base64 base64_1 = new Base64(76, byteArray1, true);
      Base64 base64_2 = new Base64(64, byteArray0, true);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte) (-98);
      byteArray2[1] = (byte)2;
      byteArray2[2] = (byte)44;
      byteArray2[3] = (byte)22;
      byteArray2[4] = (byte) (-123);
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray2, 0, 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)62;
      byteArray1[1] = (byte)62;
      byteArray1[2] = (byte)62;
      byteArray1[3] = (byte)62;
      byteArray1[4] = (byte)62;
      byteArray1[5] = (byte)62;
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      Base64 base64_0 = new Base64(76, byteArray2, false);
      byte[] byteArray3 = Base64.encodeBase64(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      Base64 base64_0 = new Base64((byte)8, byteArray0, true);
      byte[] byteArray1 = base64_0.decode("Parameter supplied to Base64 encode is not a3byte[]");
      Object object0 = new Object();
      Base64 base64_1 = new Base64(true);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      Base64.discardWhitespace(byteArray1);
      Base64.isBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[1];
      int int0 = 1295;
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Base64.isBase64((byte)0);
      Base64.decodeBase64((String) null);
      Base64.isBase64((byte) (-121));
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(2639);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_1 = new Base64((-41), byteArray0, false);
      base64_0.encode(byteArray1);
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)123;
      byte byte0 = (byte)123;
      byteArray2[1] = (byte)123;
      Base64 base64_2 = new Base64((-41), byteArray2, false);
      try { 
        base64_2.decode((Object) base64_1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(41);
      base64_0.decode("Input array too big, the output array would be bigger (");
      Object object0 = new Object();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.pow(19);
      Base64.toIntegerBytes(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(41);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64 base64_1 = new Base64(106, byteArray1, true);
      base64_1.readResults(byteArray0, 23, 729);
      byte[] byteArray2 = base64_0.decode("Input array too big, the output array would be bigger (");
      Base64.isBase64("Input array too big, the output array would be bigger (");
      Object object0 = new Object();
      Base64 base64_2 = null;
      try {
        base64_2 = new Base64(76, byteArray2, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\"zn\uFFFD\uFFFD\uFFFDk+h\uFFFD\uFFFD\uFFFD\uFFFD\u0017\uFFFD\uFFFD\uFFFDn\uFFFD\uFFFD\uFFFDk,(\uFFFDW[y\uFFFD\uFFFD\uFFFD\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)20;
      Base64 base64_0 = new Base64((byte)1, byteArray0, true);
      Base64.isBase64("o};?");
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64(byteArray1);
      base64_0.decode(byteArray0, (-1150), (-1150));
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)0;
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64 base64_1 = new Base64((byte)63, byteArray0, false);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = Base64.decodeBase64("");
      byte[] byteArray1 = Base64.decodeBase64("encodeInteger called with null parameter");
      Base64 base64_1 = new Base64((-2630), byteArray0, false);
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)92;
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger1);
      Base64 base64_0 = new Base64(33, byteArray0, false);
      base64_0.decode(byteArray1, (int) (byte)0, (int) (byte)92);
      Base64 base64_1 = new Base64((byte)0);
      bigInteger1.pow(76);
      // Undeclared exception!
      try { 
        base64_1.decode(byteArray2, (-2348), 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2348
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.decodeBase64(byteArray0);
      Base64.encodeBase64String(byteArray0);
      Base64 base64_1 = new Base64(76, byteArray0, true);
      byte[] byteArray1 = Base64.decodeBase64("org.apache.commons.codec.binary.StringUtils");
      base64_1.encode(byteArray1, 0, 0);
      Base64.decodeInteger(byteArray1);
      Base64.decodeBase64(byteArray1);
      base64_0.encodeToString(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      Base64.discardWhitespace(byteArray1);
      base64_1.encode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Base64 base64_0 = new Base64(57, (byte[]) null, true);
      Base64.encodeBase64String((byte[]) null);
      Base64.encodeBase64String((byte[]) null);
      base64_0.decode((Object) "UTF-16");
      Base64.encodeBase64((byte[]) null, true, false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.getLowestSetBit();
      Base64.toIntegerBytes(bigInteger0);
      bigInteger0.pow(0);
      base64_0.readResults((byte[]) null, (-1), 1);
      base64_0.encode((byte[]) null);
      Base64.decodeBase64("MNfm");
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base64 base64_0 = new Base64(true);
      Base64.decodeBase64(byteArray0);
      Base64.encodeBase64String(byteArray0);
      Base64 base64_1 = new Base64(76, byteArray0, true);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-84);
      byteArray1[1] = (byte)114;
      byteArray1[2] = (byte)9;
      byteArray1[3] = (byte)5;
      byteArray1[4] = (byte)1;
      byteArray1[5] = (byte)21;
      Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)114;
      byteArray2[1] = (byte)9;
      Base64.discardWhitespace(byteArray2);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)92;
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64((-4756));
      base64_0.decode(byteArray2, (int) (byte)92, (-4756));
      base64_0.decode(byteArray1, 524, 524);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)38;
      Base64.encodeBase64((byte[]) null, false, false, (int) (byte)38);
      Base64 base64_0 = new Base64((byte)38, (byte[]) null, true);
      Base64.encodeBase64((byte[]) null, true);
      Object object0 = new Object();
      Base64 base64_1 = new Base64(64, (byte[]) null, false);
      base64_0.decode((Object) "");
      Base64 base64_2 = new Base64((-8));
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)92;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.isBase64((byte)57);
      Base64 base64_0 = new Base64((-1791));
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      Base64.encodeBase64(byteArray2);
      Base64.encodeBase64((byte[]) null, true);
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, (-1791), (int) (byte)92);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Base64.isBase64((byte)0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.shiftRight((-1939));
      bigInteger0.gcd(bigInteger1);
      bigInteger0.intValue();
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      bigInteger2.signum();
      byte[] byteArray3 = new byte[2];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte)0;
      base64_0.encode(byteArray3, (-1939), 0);
      Base64.decodeInteger(byteArray1);
      base64_0.encodeToString(byteArray0);
      byte[] byteArray4 = new byte[8];
      byteArray4[0] = (byte) (-4);
      byteArray4[1] = (byte)21;
      byteArray4[2] = (byte)0;
      byteArray4[3] = (byte)0;
      byteArray4[4] = (byte)0;
      byteArray4[5] = (byte)0;
      byteArray4[6] = (byte)103;
      byteArray4[7] = (byte)0;
      Base64.encodeBase64(byteArray4);
      byte[] byteArray5 = Base64.encodeBase64URLSafe(byteArray2);
      Base64.discardWhitespace(byteArray5);
      Base64.encodeBase64(byteArray1, false);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Base64.isBase64((byte)0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.shiftRight((-1939));
      bigInteger0.gcd(bigInteger1);
      bigInteger0.intValue();
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      bigInteger2.signum();
      Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)0;
      base64_0.encode(byteArray1);
      byte[] byteArray3 = Base64.discardWhitespace(byteArray1);
      base64_0.avail();
      base64_0.encode(byteArray3, (int) (byte)0, 0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Base64.decodeBase64((String) null);
      Base64.decodeBase64((String) null);
      Base64 base64_0 = new Base64(true);
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, 121, 121);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Base64.decodeBase64((String) null);
      Base64 base64_0 = new Base64(439);
      Base64.decodeBase64((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)1;
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)38);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64 base64_1 = new Base64(539, byteArray1, false);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 0, 56);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-9), byteArray0, false);
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64 base64_1 = new Base64();
      Base64 base64_2 = new Base64(825);
      base64_2.encode(byteArray0, 1541, (-9));
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Base64 base64_0 = new Base64(1829);
      byte[] byteArray0 = new byte[2];
      Base64.encodeBase64String(byteArray0);
      Base64 base64_1 = new Base64(1829, byteArray0, true);
      base64_1.isUrlSafe();
      Base64.isBase64((byte) (-10));
      base64_0.readResults(byteArray0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)38;
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)1;
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)38);
      Base64.decodeBase64(byteArray0);
      Base64.encodeBase64((byte[]) null);
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 0, 4377);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)77;
      Base64.decodeInteger(byteArray0);
      Base64.encodeBase64(byteArray0, true, true);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = base64_0.decode("");
      Object object0 = new Object();
      Base64 base64_1 = new Base64(76, byteArray0, true);
      base64_1.decode((Object) "koA@z(SH6N!");
      Base64 base64_2 = new Base64(122);
      base64_2.decode((Object) "");
      Base64.encodeBase64String(byteArray0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = base64_0.decode("y+Jo!m|a'J;6slid|I");
      byte[] byteArray3 = base64_0.decode("y+Jo!m|a'J;6slid|I");
      BigInteger bigInteger1 = BigInteger.ZERO;
      Base64.isArrayByteBase64(byteArray3);
      Base64.encodeBase64Chunked(byteArray3);
      Base64.isBase64(byteArray2);
      base64_0.readResults(byteArray1, (byte)0, (byte)63);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte) (-50);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.decodeBase64("");
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)32;
      byteArray1[2] = (byte)115;
      byteArray1[3] = (byte)5;
      byteArray1[4] = (byte)115;
      byteArray1[5] = (byte) (-96);
      Base64.discardWhitespace(byteArray1);
      Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)10;
      byteArray2[1] = (byte)10;
      Base64.encodeBase64URLSafeString(byteArray2);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Base64 base64_0 = new Base64(63, (byte[]) null);
      base64_0.encodeToString((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.decodeBase64("");
      base64_0.encode(byteArray0, 1295, (-2630));
      Base64.decodeInteger(byteArray0);
      base64_0.encodeToString(byteArray0);
      Base64.encodeBase64(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)36;
      Base64.discardWhitespace(byteArray1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-107);
      byteArray0[4] = (byte) (-1);
      Base64 base64_0 = new Base64((byte) (-107));
      base64_0.decode(byteArray0, 353, (-1080));
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Base64.isBase64((byte)0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.shiftRight((-1939));
      bigInteger0.gcd(bigInteger1);
      bigInteger0.intValue();
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      bigInteger2.signum();
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray4 = new byte[6];
      byteArray4[0] = (byte)0;
      byteArray4[1] = (byte)0;
      byteArray4[2] = (byte)0;
      byteArray4[3] = (byte)0;
      byteArray4[4] = (byte)0;
      byteArray4[5] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray4);
      Base64 base64_1 = new Base64((-2737), byteArray2, false);
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray3, (int) (byte)0, 56);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 18);
      Base64 base64_0 = new Base64((-153));
      Base64.encodeBase64(byteArray1);
      Base64.decodeBase64((String) null);
      base64_0.decode(byteArray1);
      base64_0.decode((String) null);
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)9;
      byteArray2[1] = (byte)104;
      byteArray2[2] = (byte)58;
      byteArray2[3] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray2);
      BigInteger bigInteger1 = bigInteger0.nextProbablePrime();
      bigInteger1.and(bigInteger0);
      bigInteger0.gcd(bigInteger1);
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      Base64.isArrayByteBase64(byteArray3);
      base64_0.isUrlSafe();
      byte[] byteArray4 = new byte[9];
      byteArray4[0] = (byte)0;
      byteArray4[1] = (byte)9;
      byteArray4[2] = (byte)0;
      byteArray4[3] = (byte)104;
      byteArray4[4] = (byte)104;
      byteArray4[5] = (byte)58;
      byteArray4[6] = (byte)0;
      byteArray4[7] = (byte)0;
      byteArray4[8] = (byte)40;
      Base64.isArrayByteBase64(byteArray4);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      Base64.encodeBase64(byteArray0, true, true, 76);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-50);
      byteArray0[7] = (byte)65;
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Base64.encodeBase64Chunked(byteArray1);
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.floatValue();
      bigInteger0.toString();
      bigInteger0.toString();
      bigInteger0.signum();
      BigInteger.valueOf(51L);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      bigInteger0.signum();
      Base64 base64_0 = new Base64(0, byteArray0, false);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-107);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte) (-9);
      byteArray0[7] = (byte) (-67);
      byteArray0[8] = (byte)123;
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = new byte[0];
      byte[] byteArray2 = base64_0.decode(byteArray1);
      Base64.encodeBase64Chunked(byteArray2);
      Object object0 = new Object();
      Base64 base64_1 = new Base64(false);
      Object object1 = base64_0.decode((Object) "");
      Object object2 = base64_1.encode(object1);
      Object object3 = base64_0.decode(object2);
      base64_0.encode(object3);
      Base64.decodeBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Base64 base64_0 = new Base64(1829);
      base64_0.decode((byte[]) null);
      byte[] byteArray0 = new byte[2];
      Base64.encodeBase64String(byteArray0);
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)53;
      Base64.isArrayByteBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte) (-35);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-68);
      byteArray1[1] = (byte)26;
      byteArray1[2] = (byte) (-88);
      byteArray1[3] = (byte) (-88);
      byteArray1[5] = (byte)0;
      base64_0.hasData();
      base64_0.decode(byteArray1);
      try { 
        base64_0.encode((Object) "ISO-8859-1");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte) (-35);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-68);
      byteArray1[1] = (byte)26;
      byteArray1[2] = (byte) (-88);
      byteArray1[3] = (byte) (-88);
      byteArray1[4] = (byte) (-35);
      byteArray1[5] = (byte)0;
      Base64.isBase64("q H`*e'D,sY");
      Base64.decodeBase64(byteArray1);
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Base64 base64_0 = new Base64((-1098), (byte[]) null, false);
      base64_0.encode((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Base64 base64_0 = new Base64(1829);
      byte[] byteArray0 = new byte[2];
      Base64.encodeBase64String(byteArray0);
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)53;
      Base64.isArrayByteBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte) (-35);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-68);
      byteArray1[1] = (byte)26;
      byteArray1[2] = (byte) (-88);
      byteArray1[3] = (byte) (-88);
      byteArray1[4] = (byte) (-35);
      byteArray1[5] = (byte)0;
      base64_0.encode(byteArray1, (-1820), (int) (byte) (-35));
      base64_0.hasData();
      try { 
        base64_0.encode((Object) "ISO-8859-1");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte byte0 = (byte) (-65);
      Base64.isBase64((byte) (-65));
      Base64 base64_0 = new Base64((byte) (-65));
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = null;
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-50);
      byteArray0[7] = (byte)65;
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Base64.encodeBase64Chunked(byteArray1);
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)92;
      Base64.discardWhitespace(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64((-4756));
      base64_0.decode(byteArray1, (int) (byte)92, (-4756));
      Base64.discardWhitespace(byteArray1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = 1829;
      Base64 base64_0 = new Base64(1829);
      base64_0.decode((Object) "");
      byte[] byteArray0 = new byte[2];
      Base64.encodeBase64String(byteArray0);
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)53;
      Base64.encodeBase64URLSafeString(byteArray0);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[4];
      Base64 base64_1 = new Base64(3667, byteArray0, false);
      Base64 base64_2 = new Base64((byte)0, byteArray0);
      base64_2.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Base64.isBase64((byte)0);
      Base64 base64_0 = new Base64(475);
      byte[] byteArray0 = new byte[2];
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger0);
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-88);
      Base64.encodeBase64(byteArray0, true);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-68);
      byteArray1[1] = (byte) (-35);
      base64_0.readResults(byteArray1, (byte) (-88), (byte) (-35));
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = Base64.decodeBase64("AA==");
      Base64.encodeBase64Chunked(byteArray0);
      base64_0.decode(byteArray0);
      Base64.isBase64("AA==");
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray0);
      base64_0.encode(byteArray0, 34, 1792);
      boolean boolean0 = true;
      Base64.encodeBase64(byteArray1, false, true, 24);
      Base64 base64_1 = new Base64();
      Base64.decodeBase64(byteArray2);
      base64_1.decode("AA==");
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)91;
      Base64.encodeBase64URLSafeString(byteArray0);
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte)0;
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = base64_0.decode("");
      Base64.encodeBase64(byteArray1, true, true);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(false);
      byte byte0 = (byte)83;
      Base64.isBase64((byte)83);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)83;
      BigInteger bigInteger1 = null;
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Base64.isBase64((byte)0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      Base64 base64_0 = new Base64((byte)0, byteArray0, false);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertEquals(12, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[0];
      Base64.decodeBase64("");
      base64_0.encode(byteArray0, 1295, (-2630));
      Base64.decodeInteger(byteArray0);
      base64_0.encodeToString(byteArray0);
      Base64.encodeBase64(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)36;
      byteArray1[1] = (byte)69;
      byteArray1[2] = (byte) (-13);
      byteArray1[3] = (byte)1;
      byteArray1[4] = (byte) (-96);
      byteArray1[5] = (byte) (-128);
      byteArray1[6] = (byte)77;
      Base64.discardWhitespace(byteArray1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte)10;
      Base64.isArrayByteBase64(byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)17;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)71;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)1;
      byteArray1[5] = (byte)74;
      byteArray1[6] = (byte)71;
      byteArray1[7] = (byte)74;
      byteArray1[8] = (byte)10;
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.floatValue();
      bigInteger0.toString();
      bigInteger0.toString();
      bigInteger0.signum();
      BigInteger.valueOf(51L);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      bigInteger0.signum();
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64(0, byteArray1, true);
      base64_0.encode(byteArray2, 0, 1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)1;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [GnkPAQ==]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.bitLength();
      Base64.toIntegerBytes(bigInteger0);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)0, (int) (byte)63);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64((byte[]) null);
      Base64 base64_0 = new Base64(42);
      int int0 = 14;
      Base64.encodeBase64Chunked((byte[]) null);
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-1);
      byteArray0[0] = (byte) (-1);
      byte byte1 = (byte) (-10);
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)92;
      Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64((-4756));
      base64_0.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-98);
      byteArray0[7] = (byte) (-110);
      Base64.encodeBase64(byteArray0, true, true);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte) (-80);
      byteArray0[5] = (byte) (-90);
      base64_0.encodeToString(byteArray0);
      byte[] byteArray1 = new byte[3];
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      base64_0.encode(byteArray2, (-401), 0);
      byteArray1[0] = (byte)21;
      base64_0.encodeToString(byteArray2);
      byteArray1[1] = (byte)112;
      byteArray1[2] = (byte)0;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, 53, (int) (byte)21);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 53
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Base64.isBase64((byte)0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.shiftRight((-1939));
      bigInteger0.gcd(bigInteger1);
      bigInteger0.intValue();
      Base64.encodeInteger(bigInteger0);
      String string0 = "y+Jo!m|a'J;6slid|I";
      Base64.encodeBase64(byteArray0);
      base64_0.decode("y+Jo!m|a'J;6slid|I");
      base64_0.decode("y+Jo!m|a'J;6slid|I");
      // Undeclared exception!
      try { 
        bigInteger1.divideAndRemainder(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger divide by zero
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte)0;
      Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64((-2009));
      String string0 = "";
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)58;
      Base64.encodeBase64String(byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64(false);
      Base64.decodeBase64("AA==");
      Base64.encodeBase64Chunked(byteArray0);
      base64_0.decode(byteArray0);
      Base64.isBase64("AA==");
      Base64.encodeBase64URLSafe(byteArray0);
      base64_0.encode(byteArray0, 34, 1792);
      Base64.encodeBase64Chunked(byteArray0);
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-47);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger0);
      byteArray0[2] = (byte) (-126);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 2194, 68);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2194
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      Object object0 = new Object();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-5);
      byteArray0[4] = (byte) (-109);
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte)4;
      base64_0.encodeToString(byteArray0);
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Base64.decodeBase64((String) null);
      Base64 base64_0 = new Base64(121);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray0);
      
      base64_0.encode((byte[]) null);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)85;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertArrayEquals(new byte[] {(byte)86, (byte)81, (byte)61, (byte)61, (byte)13, (byte)10}, byteArray1);
      assertEquals(6, byteArray1.length);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.shiftRight(0);
      bigInteger0.gcd(bigInteger1);
      bigInteger0.not();
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray2);
      
      byte[] byteArray3 = base64_0.decode("LnkDZ <");
      assertEquals(3, byteArray3.length);
      assertArrayEquals(new byte[] {(byte)46, (byte)121, (byte)3}, byteArray3);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64(0, byteArray0, false);
      base64_0.decode(byteArray0, (int) (byte) (-1), 0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)38;
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)38);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, 0, 4377);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Base64 base64_0 = new Base64(4069);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)11;
      Base64.encodeBase64String(byteArray0);
      try { 
        base64_0.encode((Object) "R|k");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)22;
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)0;
      byte byte1 = (byte) (-22);
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)0;
      byte byte2 = (byte)109;
      byteArray0[6] = (byte)109;
      byteArray0[7] = (byte) (-9);
      Base64.encodeBase64(byteArray0, true, false);
      boolean boolean0 = false;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte) (-22), byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0016\uFFFD\u0000\uFFFD\u000E\u0000m\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      try { 
        base64_0.encode((Object) "{'w:loY8lb");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Base64 base64_0 = new Base64((-1));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte) (-21);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-68);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)120;
      byte[] byteArray1 = base64_0.decode(byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {(byte) (-79), (byte) (-116)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte) (-45);
      byteArray0[6] = (byte)30;
      byteArray0[7] = (byte)101;
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = new byte[0];
      base64_0.decode(byteArray1);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte) (-98);
      byteArray2[1] = (byte) (-60);
      byteArray2[2] = (byte)69;
      byteArray2[3] = (byte)25;
      byteArray2[4] = (byte) (-7);
      Base64.encodeBase64Chunked(byteArray2);
      Base64.encodeBase64URLSafe((byte[]) null);
      String string0 = Base64.encodeBase64String((byte[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte)5;
      Base64.decodeInteger(byteArray0);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Base64.isBase64((byte) (-65));
      Base64 base64_0 = new Base64((byte) (-65));
      String string0 = "uAz";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte) (-65);
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte) (-65);
      byteArray0[6] = (byte) (-65);
      byteArray0[7] = (byte) (-65);
      byteArray0[8] = (byte) (-65);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Base64 base64_0 = new Base64(249);
      boolean boolean0 = Base64.isBase64((byte)0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte) (-35);
      int int0 = base64_0.readResults(byteArray0, (-2030), (byte) (-35));
      int int1 = base64_0.avail();
      assertFalse(base64_0.isUrlSafe());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }
}
