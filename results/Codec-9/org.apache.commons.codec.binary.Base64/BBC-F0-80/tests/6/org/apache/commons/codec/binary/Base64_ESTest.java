/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:05:38 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      BigInteger bigInteger0 = new BigInteger(8188, mockRandom0);
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = bigInteger0.abs();
      assertNotNull(bigInteger1);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertNotNull(byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertSame(bigInteger0, bigInteger1);
      assertEquals(1368, byteArray0.length);
      
      Base64 base64_0 = new Base64(8188);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1368, byteArray0.length);
      assertEquals(1826, byteArray1.length);
      
      byte[] byteArray2 = base64_0.encode(byteArray1);
      assertNotNull(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(1368, byteArray0.length);
      assertEquals(1826, byteArray1.length);
      assertEquals(2438, byteArray2.length);
      
      String string0 = "*)}~WF3A:@6^L~j;";
      BigInteger bigInteger2 = BigInteger.TEN;
      assertNotNull(bigInteger2);
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertEquals((short)10, bigInteger2.shortValue());
      assertEquals((byte)10, bigInteger2.byteValue());
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger0);
      
      boolean boolean0 = Base64.isBase64("*)}~WF3A:@6^L~j;");
      assertFalse(boolean0);
      
      byte[] byteArray3 = base64_0.encode(byteArray2);
      assertNotNull(byteArray3);
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(bigInteger0, bigInteger2);
      assertSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertEquals(1368, byteArray0.length);
      assertEquals(1826, byteArray1.length);
      assertEquals(2438, byteArray2.length);
      assertEquals(3254, byteArray3.length);
      
      byte[] byteArray4 = base64_0.encode(byteArray3);
      assertNotNull(byteArray4);
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(bigInteger0, bigInteger2);
      assertSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray2);
      assertEquals(1368, byteArray0.length);
      assertEquals(1826, byteArray1.length);
      assertEquals(2438, byteArray2.length);
      assertEquals(3254, byteArray3.length);
      assertEquals(4342, byteArray4.length);
      
      byte[] byteArray5 = base64_0.decode(byteArray4);
      assertNotNull(byteArray5);
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray4));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray4));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertFalse(byteArray5.equals((Object)byteArray0));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(bigInteger0, bigInteger2);
      assertSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray5);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray5);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray5);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray4, byteArray5);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray5, byteArray1);
      assertNotSame(byteArray5, byteArray0);
      assertNotSame(byteArray5, byteArray4);
      assertNotSame(byteArray5, byteArray3);
      assertNotSame(byteArray5, byteArray2);
      assertEquals(1368, byteArray0.length);
      assertEquals(1826, byteArray1.length);
      assertEquals(2438, byteArray2.length);
      assertEquals(3254, byteArray3.length);
      assertEquals(4342, byteArray4.length);
      assertEquals(3254, byteArray5.length);
      
      base64_0.encode(byteArray4, 8188, 522);
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray5));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray5));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray4));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray5));
      assertFalse(byteArray3.equals((Object)byteArray4));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray5));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(bigInteger0, bigInteger2);
      assertSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray5);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray5);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray5);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray4, byteArray5);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray2);
      assertEquals(1368, byteArray0.length);
      assertEquals(1826, byteArray1.length);
      assertEquals(2438, byteArray2.length);
      assertEquals(3254, byteArray3.length);
      assertEquals(4342, byteArray4.length);
      
      // Undeclared exception!
      base64_0.encodeToString(byteArray2);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      BigInteger bigInteger0 = new BigInteger(8188, mockRandom0);
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = bigInteger0.abs();
      assertNotNull(bigInteger1);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertNotNull(byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertSame(bigInteger0, bigInteger1);
      assertEquals(1368, byteArray0.length);
      
      Base64 base64_0 = new Base64(8188);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1368, byteArray0.length);
      assertEquals(1826, byteArray1.length);
      
      byte[] byteArray2 = base64_0.encode(byteArray1);
      assertNotNull(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(1368, byteArray0.length);
      assertEquals(1826, byteArray1.length);
      assertEquals(2438, byteArray2.length);
      
      BigInteger bigInteger2 = BigInteger.TEN;
      assertNotNull(bigInteger2);
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertEquals((short)10, bigInteger2.shortValue());
      assertEquals((byte)10, bigInteger2.byteValue());
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      
      boolean boolean0 = Base64.isBase64("*)}~WF3A:@6^L~j;");
      assertFalse(boolean0);
      
      byte[] byteArray3 = base64_0.encode(byteArray2);
      assertNotNull(byteArray3);
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertEquals(1368, byteArray0.length);
      assertEquals(1826, byteArray1.length);
      assertEquals(2438, byteArray2.length);
      assertEquals(3254, byteArray3.length);
      
      byte[] byteArray4 = base64_0.encode(byteArray3);
      assertNotNull(byteArray4);
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray1);
      assertEquals(1368, byteArray0.length);
      assertEquals(1826, byteArray1.length);
      assertEquals(2438, byteArray2.length);
      assertEquals(3254, byteArray3.length);
      assertEquals(4342, byteArray4.length);
      
      byte[] byteArray5 = base64_0.decode(byteArray4);
      assertNotNull(byteArray5);
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray4));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray4));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray5.equals((Object)byteArray0));
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray5);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray5);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray5);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray5);
      assertNotSame(byteArray5, byteArray0);
      assertNotSame(byteArray5, byteArray3);
      assertNotSame(byteArray5, byteArray4);
      assertNotSame(byteArray5, byteArray2);
      assertNotSame(byteArray5, byteArray1);
      assertEquals(1368, byteArray0.length);
      assertEquals(1826, byteArray1.length);
      assertEquals(2438, byteArray2.length);
      assertEquals(3254, byteArray3.length);
      assertEquals(4342, byteArray4.length);
      assertEquals(3254, byteArray5.length);
      
      base64_0.encode(byteArray4, 8188, 522);
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray5));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray5));
      assertFalse(byteArray2.equals((Object)byteArray4));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray5));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray4));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray5));
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray5);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray5);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray5);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray5);
      assertEquals(1368, byteArray0.length);
      assertEquals(1826, byteArray1.length);
      assertEquals(2438, byteArray2.length);
      assertEquals(3254, byteArray3.length);
      assertEquals(4342, byteArray4.length);
      
      int int0 = base64_0.avail();
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, int0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      Object object0 = base64_0.decode((Object) "*)}~WF3A:@6^L~j;");
      assertNotNull(object0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      BigInteger bigInteger3 = Base64.decodeInteger(byteArray5);
      assertNotNull(bigInteger3);
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)object0));
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray5));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(byteArray1.equals((Object)object0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray5));
      assertFalse(byteArray2.equals((Object)byteArray4));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)object0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray5));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)object0));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray4));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)object0));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray5));
      assertFalse(byteArray5.equals((Object)byteArray0));
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)object0));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertEquals((byte) (-36), bigInteger3.byteValue());
      assertEquals((short)11996, bigInteger3.shortValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(bigInteger3, bigInteger1);
      assertNotSame(bigInteger3, bigInteger2);
      assertNotSame(bigInteger3, bigInteger0);
      assertSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, object0);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray5);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, object0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray5);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, object0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray5);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, object0);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, object0);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray5);
      assertNotSame(byteArray5, byteArray0);
      assertNotSame(byteArray5, byteArray3);
      assertNotSame(byteArray5, byteArray4);
      assertNotSame(byteArray5, object0);
      assertNotSame(byteArray5, byteArray2);
      assertNotSame(byteArray5, byteArray1);
      assertEquals(1368, byteArray0.length);
      assertEquals(1826, byteArray1.length);
      assertEquals(2438, byteArray2.length);
      assertEquals(3254, byteArray3.length);
      assertEquals(4342, byteArray4.length);
      assertEquals(3254, byteArray5.length);
      
      base64_0.decode(byteArray2, (-41), 522);
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)object0));
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray5));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(byteArray1.equals((Object)object0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray5));
      assertFalse(byteArray2.equals((Object)byteArray4));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)object0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, object0);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray5);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, object0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray5);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, object0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray3);
      assertEquals(1368, byteArray0.length);
      assertEquals(1826, byteArray1.length);
      assertEquals(2438, byteArray2.length);
      
      // Undeclared exception!
      base64_0.decode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      BigInteger bigInteger0 = new BigInteger(8197, mockRandom0);
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = bigInteger0.abs();
      assertNotNull(bigInteger1);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertNotNull(byteArray0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertSame(bigInteger0, bigInteger1);
      assertEquals(1368, byteArray0.length);
      
      Base64 base64_0 = new Base64(8197);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1368, byteArray0.length);
      assertEquals(1826, byteArray1.length);
      
      BigInteger bigInteger2 = bigInteger0.setBit(76);
      assertNotNull(bigInteger2);
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)1, bigInteger2.byteValue());
      assertEquals((short)1, bigInteger2.shortValue());
      assertSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      
      byte[] byteArray2 = base64_0.encode(byteArray1);
      assertNotNull(byteArray2);
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(1368, byteArray0.length);
      assertEquals(1826, byteArray1.length);
      assertEquals(2438, byteArray2.length);
      
      BigInteger bigInteger3 = bigInteger0.andNot(bigInteger1);
      assertNotNull(bigInteger3);
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger3.shortValue());
      assertEquals((byte)0, bigInteger3.byteValue());
      assertSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger3);
      assertSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger3, bigInteger0);
      assertNotSame(bigInteger3, bigInteger2);
      assertNotSame(bigInteger3, bigInteger1);
      
      boolean boolean0 = Base64.isBase64("");
      assertTrue(boolean0);
      
      byte[] byteArray3 = base64_0.encode(byteArray2);
      assertNotNull(byteArray3);
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertEquals(1368, byteArray0.length);
      assertEquals(1826, byteArray1.length);
      assertEquals(2438, byteArray2.length);
      assertEquals(3254, byteArray3.length);
      
      byte[] byteArray4 = base64_0.encode(byteArray3);
      assertNotNull(byteArray4);
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray3);
      assertEquals(1368, byteArray0.length);
      assertEquals(1826, byteArray1.length);
      assertEquals(2438, byteArray2.length);
      assertEquals(3254, byteArray3.length);
      assertEquals(4342, byteArray4.length);
      
      int int0 = base64_0.avail();
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, int0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      Object object0 = base64_0.decode((Object) "");
      assertNotNull(object0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray5 = Base64.discardWhitespace(byteArray1);
      assertNotNull(byteArray5);
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertFalse(byteArray0.equals((Object)object0));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)object0));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray0));
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertFalse(byteArray5.equals((Object)object0));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(byteArray0, object0);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, object0);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray5);
      assertNotSame(byteArray5, byteArray2);
      assertNotSame(byteArray5, byteArray3);
      assertNotSame(byteArray5, byteArray0);
      assertNotSame(byteArray5, byteArray1);
      assertNotSame(byteArray5, object0);
      assertNotSame(byteArray5, byteArray4);
      assertEquals(1368, byteArray0.length);
      assertEquals(1826, byteArray1.length);
      assertEquals(1826, byteArray5.length);
      
      int int1 = 883;
      // Undeclared exception!
      Base64.encodeBase64URLSafe(byteArray4);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter suppliedto Base6H decode is not a byte[] or a String");
      assertNotNull(byteArray0);
      assertEquals(37, byteArray0.length);
      
      boolean boolean0 = Base64.isBase64("Parameter suppliedto Base6H decode is not a byte[] or a String");
      assertFalse(boolean0);
      
      Base64 base64_0 = new Base64(true);
      assertNotNull(base64_0);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      base64_0.decode(byteArray0, 11, 1);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(37, byteArray0.length);
      
      base64_0.encode(byteArray0, 1, 1);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(37, byteArray0.length);
      
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(37, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      base64_0.encode(byteArray0, (-385), (-2052));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(37, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      BigInteger bigInteger0 = new BigInteger(8193, mockRandom0);
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertNotNull(byteArray0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals(1368, byteArray0.length);
      
      Base64 base64_0 = new Base64(8193);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1368, byteArray0.length);
      assertEquals(1826, byteArray1.length);
      
      int int0 = base64_0.readResults(byteArray1, 24, 423);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals((-1), int0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1368, byteArray0.length);
      assertEquals(1826, byteArray1.length);
      
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      assertNotNull(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(1025, byteArray2.length);
      
      byte[] byteArray3 = base64_0.encode(byteArray1);
      assertNotNull(byteArray3);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertEquals(1368, byteArray0.length);
      assertEquals(1826, byteArray1.length);
      assertEquals(2438, byteArray3.length);
      
      byte[] byteArray4 = base64_0.encode(byteArray3);
      assertNotNull(byteArray4);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray0);
      assertEquals(1368, byteArray0.length);
      assertEquals(1826, byteArray1.length);
      assertEquals(2438, byteArray3.length);
      assertEquals(3254, byteArray4.length);
      
      int int1 = base64_0.readResults(byteArray0, 8193, (-1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertTrue(int1 == int0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals((-1), int1);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertEquals(1368, byteArray0.length);
      
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray4);
      assertNotNull(bigInteger1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray4));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals((byte) (-36), bigInteger1.byteValue());
      assertEquals((short)11996, bigInteger1.shortValue());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals(1368, byteArray0.length);
      assertEquals(1826, byteArray1.length);
      assertEquals(2438, byteArray3.length);
      assertEquals(3254, byteArray4.length);
      
      byte[] byteArray5 = base64_0.encode(byteArray4);
      assertNotNull(byteArray5);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray4));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray0));
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray5);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray5);
      assertNotSame(byteArray4, byteArray5);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray5, byteArray1);
      assertNotSame(byteArray5, byteArray4);
      assertNotSame(byteArray5, byteArray3);
      assertNotSame(byteArray5, byteArray2);
      assertNotSame(byteArray5, byteArray0);
      assertEquals(1368, byteArray0.length);
      assertEquals(1826, byteArray1.length);
      assertEquals(2438, byteArray3.length);
      assertEquals(3254, byteArray4.length);
      assertEquals(4342, byteArray5.length);
      
      byte[] byteArray6 = base64_0.decode(byteArray5);
      assertNotNull(byteArray6);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray5));
      assertFalse(byteArray3.equals((Object)byteArray4));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray5));
      assertFalse(byteArray4.equals((Object)byteArray5));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray0));
      assertFalse(byteArray6.equals((Object)byteArray0));
      assertFalse(byteArray6.equals((Object)byteArray3));
      assertFalse(byteArray6.equals((Object)byteArray4));
      assertFalse(byteArray6.equals((Object)byteArray2));
      assertFalse(byteArray6.equals((Object)byteArray5));
      assertFalse(byteArray6.equals((Object)byteArray1));
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray6);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray6);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray5);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray5);
      assertNotSame(byteArray3, byteArray6);
      assertNotSame(byteArray4, byteArray5);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray6);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray5, byteArray1);
      assertNotSame(byteArray5, byteArray4);
      assertNotSame(byteArray5, byteArray6);
      assertNotSame(byteArray5, byteArray3);
      assertNotSame(byteArray5, byteArray2);
      assertNotSame(byteArray5, byteArray0);
      assertNotSame(byteArray6, byteArray0);
      assertNotSame(byteArray6, byteArray3);
      assertNotSame(byteArray6, byteArray4);
      assertNotSame(byteArray6, byteArray2);
      assertNotSame(byteArray6, byteArray5);
      assertNotSame(byteArray6, byteArray1);
      assertEquals(1368, byteArray0.length);
      assertEquals(1826, byteArray1.length);
      assertEquals(2438, byteArray3.length);
      assertEquals(3254, byteArray4.length);
      assertEquals(4342, byteArray5.length);
      assertEquals(3254, byteArray6.length);
      
      boolean boolean0 = Base64.isBase64("US-ASCII");
      assertTrue(boolean0);
      
      Base64 base64_1 = new Base64(true);
      assertNotNull(base64_1);
      assertFalse(base64_1.equals((Object)base64_0));
      assertTrue(base64_1.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      // Undeclared exception!
      base64_1.encode(byteArray4, 45, 423);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = 1908874353;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      BigInteger bigInteger0 = new BigInteger(1908874353, mockRandom0);
      assertNotNull(bigInteger0);
      assertEquals((short)14478, bigInteger0.shortValue());
      assertEquals((byte) (-114), bigInteger0.byteValue());
      
      // Undeclared exception!
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter suppliedto Base6H decode is not a byte[] or a String");
      assertNotNull(byteArray0);
      assertEquals(37, byteArray0.length);
      
      boolean boolean0 = Base64.isBase64("Parameter suppliedto Base6H decode is not a byte[] or a String");
      assertFalse(boolean0);
      
      Base64 base64_0 = new Base64(false);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      base64_0.decode(byteArray0, 11, 11);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(37, byteArray0.length);
      
      base64_0.encode(byteArray0, (-27), (-27));
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(37, byteArray0.length);
      
      int int0 = base64_0.readResults(byteArray0, 11, 2);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(2, int0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(37, byteArray0.length);
      
      int int1 = base64_0.avail();
      assertFalse(int1 == int0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(4, int1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      BigInteger bigInteger0 = new BigInteger(8193, mockRandom0);
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertNotNull(byteArray0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals(1368, byteArray0.length);
      
      Base64 base64_0 = new Base64(8193);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1368, byteArray0.length);
      assertEquals(1826, byteArray1.length);
      
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      assertNotNull(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(1025, byteArray2.length);
      
      byte[] byteArray3 = base64_0.encode(byteArray1);
      assertNotNull(byteArray3);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertEquals(1368, byteArray0.length);
      assertEquals(1826, byteArray1.length);
      assertEquals(2438, byteArray3.length);
      
      byte[] byteArray4 = base64_0.encode(byteArray3);
      assertNotNull(byteArray4);
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray3);
      assertEquals(1368, byteArray0.length);
      assertEquals(1826, byteArray1.length);
      assertEquals(2438, byteArray3.length);
      assertEquals(3254, byteArray4.length);
      
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray4);
      assertNotNull(bigInteger1);
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray4));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals((short)11996, bigInteger1.shortValue());
      assertEquals((byte) (-36), bigInteger1.byteValue());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals(1368, byteArray0.length);
      assertEquals(1826, byteArray1.length);
      assertEquals(2438, byteArray3.length);
      assertEquals(3254, byteArray4.length);
      
      byte[] byteArray5 = base64_0.encode(byteArray4);
      assertNotNull(byteArray5);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray4));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray0));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray5);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray5);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray5);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray5, byteArray0);
      assertNotSame(byteArray5, byteArray4);
      assertNotSame(byteArray5, byteArray2);
      assertNotSame(byteArray5, byteArray1);
      assertNotSame(byteArray5, byteArray3);
      assertEquals(1368, byteArray0.length);
      assertEquals(1826, byteArray1.length);
      assertEquals(2438, byteArray3.length);
      assertEquals(3254, byteArray4.length);
      assertEquals(4342, byteArray5.length);
      
      byte[] byteArray6 = base64_0.decode(byteArray5);
      assertNotNull(byteArray6);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray5));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray5));
      assertFalse(byteArray3.equals((Object)byteArray4));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray5));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray0));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(byteArray6.equals((Object)byteArray1));
      assertFalse(byteArray6.equals((Object)byteArray4));
      assertFalse(byteArray6.equals((Object)byteArray2));
      assertFalse(byteArray6.equals((Object)byteArray5));
      assertFalse(byteArray6.equals((Object)byteArray3));
      assertFalse(byteArray6.equals((Object)byteArray0));
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray0, byteArray6);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray6);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray5);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray6);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray5);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray5);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray6);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray5, byteArray6);
      assertNotSame(byteArray5, byteArray0);
      assertNotSame(byteArray5, byteArray4);
      assertNotSame(byteArray5, byteArray2);
      assertNotSame(byteArray5, byteArray1);
      assertNotSame(byteArray5, byteArray3);
      assertNotSame(byteArray6, byteArray1);
      assertNotSame(byteArray6, byteArray4);
      assertNotSame(byteArray6, byteArray2);
      assertNotSame(byteArray6, byteArray5);
      assertNotSame(byteArray6, byteArray3);
      assertNotSame(byteArray6, byteArray0);
      assertEquals(1368, byteArray0.length);
      assertEquals(1826, byteArray1.length);
      assertEquals(2438, byteArray3.length);
      assertEquals(3254, byteArray4.length);
      assertEquals(4342, byteArray5.length);
      assertEquals(3254, byteArray6.length);
      
      int int0 = (-1);
      // Undeclared exception!
      Base64.encodeBase64URLSafeString(byteArray1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      BigInteger bigInteger0 = new BigInteger(8193, mockRandom0);
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertNotNull(byteArray0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals(1368, byteArray0.length);
      
      Base64 base64_0 = new Base64(8193);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray0);
      assertNotNull(bigInteger1);
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals(1368, byteArray0.length);
      
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertNotNull(byteArray1);
      assertTrue(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1368, byteArray0.length);
      assertEquals(1826, byteArray1.length);
      
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      assertNotNull(byteArray2);
      assertTrue(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(1368, byteArray2.length);
      
      byte[] byteArray3 = base64_0.encode(byteArray1);
      assertNotNull(byteArray3);
      assertTrue(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertEquals(1368, byteArray0.length);
      assertEquals(1826, byteArray1.length);
      assertEquals(2438, byteArray3.length);
      
      byte[] byteArray4 = base64_0.encode(byteArray3);
      assertNotNull(byteArray4);
      assertTrue(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray1);
      assertEquals(1368, byteArray0.length);
      assertEquals(1826, byteArray1.length);
      assertEquals(2438, byteArray3.length);
      assertEquals(3254, byteArray4.length);
      
      mockRandom0.nextBytes(byteArray1);
      assertTrue(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertEquals(1368, byteArray0.length);
      assertEquals(1826, byteArray1.length);
      
      BigInteger bigInteger2 = Base64.decodeInteger(byteArray4);
      assertNotNull(bigInteger2);
      assertTrue(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray4));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals((byte) (-36), bigInteger2.byteValue());
      assertEquals((short)11996, bigInteger2.shortValue());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      assertEquals(1368, byteArray0.length);
      assertEquals(1826, byteArray1.length);
      assertEquals(2438, byteArray3.length);
      assertEquals(3254, byteArray4.length);
      
      // Undeclared exception!
      Base64.encodeBase64Chunked(byteArray3);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = new BigInteger(8193, mockRandom0);
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      long long0 = bigInteger0.longValue();
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(1095216660480L, long0);
      
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      assertNotNull(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)46, (byte) (-36)}, byteArray0);
      
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1364, byteArray1.length);
      
      Base64 base64_0 = new Base64(8193);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      byte[] byteArray2 = base64_0.encode(byteArray1);
      assertNotNull(byteArray2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(1364, byteArray1.length);
      assertEquals(1822, byteArray2.length);
      
      byte[] byteArray3 = base64_0.encode(byteArray2);
      assertNotNull(byteArray3);
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertEquals(1364, byteArray1.length);
      assertEquals(1822, byteArray2.length);
      assertEquals(2434, byteArray3.length);
      
      byte[] byteArray4 = base64_0.encode(byteArray3);
      assertNotNull(byteArray4);
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray3);
      assertEquals(1364, byteArray1.length);
      assertEquals(1822, byteArray2.length);
      assertEquals(2434, byteArray3.length);
      assertEquals(3250, byteArray4.length);
      
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray4);
      assertNotNull(bigInteger1);
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(byteArray2.equals((Object)byteArray4));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray4));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals((byte) (-36), bigInteger1.byteValue());
      assertEquals((short)11996, bigInteger1.shortValue());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals(1364, byteArray1.length);
      assertEquals(1822, byteArray2.length);
      assertEquals(2434, byteArray3.length);
      assertEquals(3250, byteArray4.length);
      
      byte[] byteArray5 = base64_0.encode(byteArray4);
      assertNotNull(byteArray5);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(byteArray2.equals((Object)byteArray4));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray4));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertFalse(byteArray5.equals((Object)byteArray0));
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray5);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray2, byteArray5);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray5);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray5);
      assertNotSame(byteArray5, byteArray2);
      assertNotSame(byteArray5, byteArray4);
      assertNotSame(byteArray5, byteArray3);
      assertNotSame(byteArray5, byteArray1);
      assertNotSame(byteArray5, byteArray0);
      assertEquals(1364, byteArray1.length);
      assertEquals(1822, byteArray2.length);
      assertEquals(2434, byteArray3.length);
      assertEquals(3250, byteArray4.length);
      assertEquals(4338, byteArray5.length);
      
      byte[] byteArray6 = base64_0.decode(byteArray5);
      assertNotNull(byteArray6);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray5));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(byteArray2.equals((Object)byteArray5));
      assertFalse(byteArray2.equals((Object)byteArray4));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray4));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray5));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray5));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertFalse(byteArray5.equals((Object)byteArray0));
      assertFalse(byteArray6.equals((Object)byteArray4));
      assertFalse(byteArray6.equals((Object)byteArray3));
      assertFalse(byteArray6.equals((Object)byteArray0));
      assertFalse(byteArray6.equals((Object)byteArray1));
      assertFalse(byteArray6.equals((Object)byteArray5));
      assertFalse(byteArray6.equals((Object)byteArray2));
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray5);
      assertNotSame(byteArray1, byteArray6);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray2, byteArray6);
      assertNotSame(byteArray2, byteArray5);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray6);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray5);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray6);
      assertNotSame(byteArray4, byteArray5);
      assertNotSame(byteArray5, byteArray2);
      assertNotSame(byteArray5, byteArray4);
      assertNotSame(byteArray5, byteArray3);
      assertNotSame(byteArray5, byteArray1);
      assertNotSame(byteArray5, byteArray0);
      assertNotSame(byteArray5, byteArray6);
      assertNotSame(byteArray6, byteArray4);
      assertNotSame(byteArray6, byteArray3);
      assertNotSame(byteArray6, byteArray0);
      assertNotSame(byteArray6, byteArray1);
      assertNotSame(byteArray6, byteArray5);
      assertNotSame(byteArray6, byteArray2);
      assertEquals(1364, byteArray1.length);
      assertEquals(1822, byteArray2.length);
      assertEquals(2434, byteArray3.length);
      assertEquals(3250, byteArray4.length);
      assertEquals(4338, byteArray5.length);
      assertEquals(3250, byteArray6.length);
      
      // Undeclared exception!
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      //  // Unstable assertion: assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextDouble();
      //  // Unstable assertion: assertEquals(0.0, double0, 0.01);
      
      BigInteger bigInteger0 = new BigInteger(8193, mockRandom0);
      //  // Unstable assertion: assertNotNull(bigInteger0);
      //  // Unstable assertion: assertEquals((short)1, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)1, bigInteger0.byteValue());
      
      long long0 = bigInteger0.longValue();
      //  // Unstable assertion: assertEquals((short)1, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)1, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals(16777217L, long0);
      
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertNotNull(byteArray0);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)46, (byte) (-36)}, byteArray0);
      
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals((short)1, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)1, bigInteger0.byteValue());
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertEquals(1368, byteArray1.length);
      
      Base64 base64_0 = new Base64(8193);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray2 = base64_0.encode(byteArray1);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals((short)1, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)1, bigInteger0.byteValue());
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertEquals(1368, byteArray1.length);
      //  // Unstable assertion: assertEquals(1826, byteArray2.length);
      
      byte[] byteArray3 = base64_0.encode(byteArray2);
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertEquals((short)1, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)1, bigInteger0.byteValue());
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertEquals(1368, byteArray1.length);
      //  // Unstable assertion: assertEquals(1826, byteArray2.length);
      //  // Unstable assertion: assertEquals(2438, byteArray3.length);
      
      byte[] byteArray4 = base64_0.encode(byteArray3);
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertEquals((short)1, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)1, bigInteger0.byteValue());
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertEquals(1368, byteArray1.length);
      //  // Unstable assertion: assertEquals(1826, byteArray2.length);
      //  // Unstable assertion: assertEquals(2438, byteArray3.length);
      //  // Unstable assertion: assertEquals(3254, byteArray4.length);
      
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray4);
      //  // Unstable assertion: assertNotNull(bigInteger1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger0));
      //  // Unstable assertion: assertEquals((short)1, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)1, bigInteger0.byteValue());
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals((byte) (-36), bigInteger1.byteValue());
      //  // Unstable assertion: assertEquals((short)11996, bigInteger1.shortValue());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger0);
      //  // Unstable assertion: assertEquals(1368, byteArray1.length);
      //  // Unstable assertion: assertEquals(1826, byteArray2.length);
      //  // Unstable assertion: assertEquals(2438, byteArray3.length);
      //  // Unstable assertion: assertEquals(3254, byteArray4.length);
      
      byte[] byteArray5 = base64_0.encode(byteArray4);
      //  // Unstable assertion: assertNotNull(byteArray5);
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray3));
      //  // Unstable assertion: assertEquals((short)1, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)1, bigInteger0.byteValue());
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray3);
      //  // Unstable assertion: assertEquals(1368, byteArray1.length);
      //  // Unstable assertion: assertEquals(1826, byteArray2.length);
      //  // Unstable assertion: assertEquals(2438, byteArray3.length);
      //  // Unstable assertion: assertEquals(3254, byteArray4.length);
      //  // Unstable assertion: assertEquals(4342, byteArray5.length);
      
      byte[] byteArray6 = base64_0.decode(byteArray5);
      //  // Unstable assertion: assertNotNull(byteArray6);
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals((short)1, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)1, bigInteger0.byteValue());
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray0);
      //  // Unstable assertion: assertEquals(1368, byteArray1.length);
      //  // Unstable assertion: assertEquals(1826, byteArray2.length);
      //  // Unstable assertion: assertEquals(2438, byteArray3.length);
      //  // Unstable assertion: assertEquals(3254, byteArray4.length);
      //  // Unstable assertion: assertEquals(4342, byteArray5.length);
      //  // Unstable assertion: assertEquals(3254, byteArray6.length);
      
      // Undeclared exception!
      Base64.encodeBase64(byteArray3, false);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          MockRandom mockRandom0 = new MockRandom();
          //  // Unstable assertion: assertNotNull(mockRandom0);
          
          BigInteger bigInteger0 = new BigInteger(8193, mockRandom0);
          //  // Unstable assertion: assertNotNull(bigInteger0);
          //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
          //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
          
          long long0 = bigInteger0.longValue();
          //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
          //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
          //  // Unstable assertion: assertEquals(1095216660480L, long0);
          
          byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
          //  // Unstable assertion: assertNotNull(byteArray0);
          //  // Unstable assertion: assertEquals(2, byteArray0.length);
          //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)46, (byte) (-36)}, byteArray0);
          
          byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
          //  // Unstable assertion: assertNotNull(byteArray1);
          //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
          //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
          //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
          //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
          //  // Unstable assertion: assertEquals(1364, byteArray1.length);
          
          Base64 base64_0 = new Base64(8193, byteArray0);
          //  // Unstable assertion: assertNotNull(base64_0);
          //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
          //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
          //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
          //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
          //  // Unstable assertion: assertEquals(2, byteArray0.length);
          //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)46, (byte) (-36)}, byteArray0);
          
          byte[] byteArray2 = base64_0.encode(byteArray1);
          //  // Unstable assertion: assertNotNull(byteArray2);
          //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
          //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
          //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
          //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
          //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
          //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
          //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
          //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
          //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
          //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
          //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
          //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
          //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
          //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
          //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
          //  // Unstable assertion: assertEquals(2, byteArray0.length);
          //  // Unstable assertion: assertEquals(1364, byteArray1.length);
          //  // Unstable assertion: assertEquals(1822, byteArray2.length);
          //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)46, (byte) (-36)}, byteArray0);
          
          byte[] byteArray3 = base64_0.encode(byteArray2);
          //  // Unstable assertion: assertNotNull(byteArray3);
          //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
          //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
          //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
          //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
          //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
          //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
          //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
          //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
          //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
          //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
          //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
          //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
          //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
          //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
          //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
          //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
          //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
          //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
          //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
          //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
          //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
          //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
          //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
          //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
          //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
          //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
          //  // Unstable assertion: assertEquals(2, byteArray0.length);
          //  // Unstable assertion: assertEquals(1364, byteArray1.length);
          //  // Unstable assertion: assertEquals(1822, byteArray2.length);
          //  // Unstable assertion: assertEquals(2434, byteArray3.length);
          //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)46, (byte) (-36)}, byteArray0);
          
          byte[] byteArray4 = base64_0.encode(byteArray3);
          //  // Unstable assertion: assertNotNull(byteArray4);
          //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
          //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
          //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
          //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
          //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
          //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
          //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
          //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
          //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
          //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
          //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
          //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
          //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
          //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
          //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
          //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
          //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
          //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
          //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
          //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
          //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
          //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
          //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
          //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
          //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
          //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
          //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
          //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
          //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
          //  // Unstable assertion: assertNotSame(byteArray2, byteArray4);
          //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
          //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
          //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
          //  // Unstable assertion: assertNotSame(byteArray3, byteArray4);
          //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
          //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
          //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
          //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
          //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
          //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
          //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
          //  // Unstable assertion: assertEquals(2, byteArray0.length);
          //  // Unstable assertion: assertEquals(1364, byteArray1.length);
          //  // Unstable assertion: assertEquals(1822, byteArray2.length);
          //  // Unstable assertion: assertEquals(2434, byteArray3.length);
          //  // Unstable assertion: assertEquals(3250, byteArray4.length);
          //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)46, (byte) (-36)}, byteArray0);
          
          BigInteger bigInteger1 = Base64.decodeInteger(byteArray4);
          //  // Unstable assertion: assertNotNull(bigInteger1);
          //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
          //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
          //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
          //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
          //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
          //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
          //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray4));
          //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
          //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray4));
          //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
          //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
          //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
          //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray4));
          //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
          //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
          //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
          //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
          //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
          //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
          //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
          //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger0));
          //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
          //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
          //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
          //  // Unstable assertion: assertEquals((byte) (-36), bigInteger1.byteValue());
          //  // Unstable assertion: assertEquals((short)11996, bigInteger1.shortValue());
          //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
          //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
          //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger1);
          //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
          //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
          //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
          //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
          //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
          //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
          //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
          //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
          //  // Unstable assertion: assertNotSame(byteArray2, byteArray4);
          //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
          //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
          //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
          //  // Unstable assertion: assertNotSame(byteArray3, byteArray4);
          //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
          //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
          //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
          //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
          //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
          //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
          //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
          //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger0);
          //  // Unstable assertion: assertEquals(2, byteArray0.length);
          //  // Unstable assertion: assertEquals(1364, byteArray1.length);
          //  // Unstable assertion: assertEquals(1822, byteArray2.length);
          //  // Unstable assertion: assertEquals(2434, byteArray3.length);
          //  // Unstable assertion: assertEquals(3250, byteArray4.length);
          //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)46, (byte) (-36)}, byteArray0);
          
          byte[] byteArray5 = base64_0.encode(byteArray4);
          //  // Unstable assertion: assertNotNull(byteArray5);
          //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger1));
          //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
          //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
          //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
          //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
          //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
          //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
          //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray4));
          //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
          //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray4));
          //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
          //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
          //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
          //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray4));
          //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
          //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
          //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
          //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
          //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
          //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
          //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
          //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray1));
          //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray3));
          //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray0));
          //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray2));
          //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray4));
          //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
          //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
          //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
          //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
          //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
          //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger1);
          //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
          //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
          //  // Unstable assertion: assertNotSame(byteArray0, byteArray5);
          //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
          //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
          //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
          //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
          //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
          //  // Unstable assertion: assertNotSame(byteArray1, byteArray5);
          //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
          //  // Unstable assertion: assertNotSame(byteArray2, byteArray4);
          //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
          //  // Unstable assertion: assertNotSame(byteArray2, byteArray5);
          //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
          //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
          //  // Unstable assertion: assertNotSame(byteArray3, byteArray4);
          //  // Unstable assertion: assertNotSame(byteArray3, byteArray5);
          //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
          //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
          //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
          //  // Unstable assertion: assertNotSame(byteArray4, byteArray5);
          //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
          //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
          //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
          //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
          //  // Unstable assertion: assertNotSame(byteArray5, byteArray1);
          //  // Unstable assertion: assertNotSame(byteArray5, byteArray3);
          //  // Unstable assertion: assertNotSame(byteArray5, byteArray0);
          //  // Unstable assertion: assertNotSame(byteArray5, byteArray2);
          //  // Unstable assertion: assertNotSame(byteArray5, byteArray4);
          //  // Unstable assertion: assertEquals(2, byteArray0.length);
          //  // Unstable assertion: assertEquals(1364, byteArray1.length);
          //  // Unstable assertion: assertEquals(1822, byteArray2.length);
          //  // Unstable assertion: assertEquals(2434, byteArray3.length);
          //  // Unstable assertion: assertEquals(3250, byteArray4.length);
          //  // Unstable assertion: assertEquals(4338, byteArray5.length);
          //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)46, (byte) (-36)}, byteArray0);
          
          // Undeclared exception!
          base64_0.encode(byteArray5);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte) (-113));
      assertFalse(boolean0);
      
      Base64 base64_0 = new Base64();
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      base64_0.encode((byte[]) null, 9, (-1583));
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      assertNotNull(byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, 3315, (byte) (-113));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      //  // Unstable assertion: assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = new BigInteger(8193, mockRandom0);
      //  // Unstable assertion: assertNotNull(bigInteger0);
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      
      long long0 = bigInteger0.longValue();
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals(1095216660480L, long0);
      
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertNotNull(byteArray0);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)46, (byte) (-36)}, byteArray0);
      
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertEquals(1364, byteArray1.length);
      
      Base64 base64_0 = new Base64(8193, byteArray0);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)46, (byte) (-36)}, byteArray0);
      
      byte[] byteArray2 = base64_0.encode(byteArray1);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals(1364, byteArray1.length);
      //  // Unstable assertion: assertEquals(1822, byteArray2.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)46, (byte) (-36)}, byteArray0);
      
      byte[] byteArray3 = base64_0.encode(byteArray2);
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals(1364, byteArray1.length);
      //  // Unstable assertion: assertEquals(1822, byteArray2.length);
      //  // Unstable assertion: assertEquals(2434, byteArray3.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)46, (byte) (-36)}, byteArray0);
      
      byte[] byteArray4 = base64_0.encode(byteArray3);
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals(1364, byteArray1.length);
      //  // Unstable assertion: assertEquals(1822, byteArray2.length);
      //  // Unstable assertion: assertEquals(2434, byteArray3.length);
      //  // Unstable assertion: assertEquals(3250, byteArray4.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)46, (byte) (-36)}, byteArray0);
      
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray4);
      //  // Unstable assertion: assertNotNull(bigInteger1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger0));
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals((short)11996, bigInteger1.shortValue());
      //  // Unstable assertion: assertEquals((byte) (-36), bigInteger1.byteValue());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger0);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals(1364, byteArray1.length);
      //  // Unstable assertion: assertEquals(1822, byteArray2.length);
      //  // Unstable assertion: assertEquals(2434, byteArray3.length);
      //  // Unstable assertion: assertEquals(3250, byteArray4.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)46, (byte) (-36)}, byteArray0);
      
      byte[] byteArray5 = base64_0.encode(byteArray4);
      //  // Unstable assertion: assertNotNull(byteArray5);
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray3));
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray3);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals(1364, byteArray1.length);
      //  // Unstable assertion: assertEquals(1822, byteArray2.length);
      //  // Unstable assertion: assertEquals(2434, byteArray3.length);
      //  // Unstable assertion: assertEquals(3250, byteArray4.length);
      //  // Unstable assertion: assertEquals(4338, byteArray5.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)46, (byte) (-36)}, byteArray0);
      
      byte[] byteArray6 = base64_0.decode(byteArray5);
      //  // Unstable assertion: assertNotNull(byteArray6);
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray0);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals(1364, byteArray1.length);
      //  // Unstable assertion: assertEquals(1822, byteArray2.length);
      //  // Unstable assertion: assertEquals(2434, byteArray3.length);
      //  // Unstable assertion: assertEquals(3250, byteArray4.length);
      //  // Unstable assertion: assertEquals(4338, byteArray5.length);
      //  // Unstable assertion: assertEquals(3250, byteArray6.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)46, (byte) (-36)}, byteArray0);
      
      // Undeclared exception!
      Base64.decodeInteger(byteArray4);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      //  // Unstable assertion: assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = new BigInteger(8193, mockRandom0);
      //  // Unstable assertion: assertNotNull(bigInteger0);
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      
      long long0 = bigInteger0.longValue();
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals(1095216660480L, long0);
      
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertNotNull(byteArray0);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)46, (byte) (-36)}, byteArray0);
      
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertEquals(1364, byteArray1.length);
      
      Base64 base64_0 = new Base64(8193, byteArray0);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)46, (byte) (-36)}, byteArray0);
      
      byte[] byteArray2 = base64_0.encode(byteArray1);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals(1364, byteArray1.length);
      //  // Unstable assertion: assertEquals(1822, byteArray2.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)46, (byte) (-36)}, byteArray0);
      
      byte[] byteArray3 = base64_0.encode(byteArray2);
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals(1364, byteArray1.length);
      //  // Unstable assertion: assertEquals(1822, byteArray2.length);
      //  // Unstable assertion: assertEquals(2434, byteArray3.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)46, (byte) (-36)}, byteArray0);
      
      byte[] byteArray4 = base64_0.encode(byteArray3);
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals(1364, byteArray1.length);
      //  // Unstable assertion: assertEquals(1822, byteArray2.length);
      //  // Unstable assertion: assertEquals(2434, byteArray3.length);
      //  // Unstable assertion: assertEquals(3250, byteArray4.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)46, (byte) (-36)}, byteArray0);
      
      byte[] byteArray5 = Base64.encodeInteger(bigInteger0);
      //  // Unstable assertion: assertNotNull(byteArray5);
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray3));
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray3);
      //  // Unstable assertion: assertEquals(1364, byteArray5.length);
      
      String string0 = "Input array too big, the output array would be bigger (";
      // Undeclared exception!
      Base64.encodeBase64(byteArray4);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter suppliedto Base6H decode is not a byte[] or a String");
      //  // Unstable assertion: assertNotNull(byteArray0);
      //  // Unstable assertion: assertEquals(37, byteArray0.length);
      
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertEquals(37, byteArray0.length);
      //  // Unstable assertion: assertEquals(54, byteArray1.length);
      
      boolean boolean0 = Base64.isArrayByteBase64(byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertEquals(37, byteArray0.length);
      //  // Unstable assertion: assertEquals(54, byteArray1.length);
      
      Base64 base64_0 = new Base64();
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      base64_0.decode(byteArray1, 6, 6);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertEquals(37, byteArray0.length);
      //  // Unstable assertion: assertEquals(54, byteArray1.length);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      //  // Unstable assertion: assertNotNull(bigInteger0);
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)10, bigInteger0.shortValue());
      
      int int0 = base64_0.readResults(byteArray1, 6, 6);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(3, int0);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertEquals(37, byteArray0.length);
      //  // Unstable assertion: assertEquals(54, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter suppliedto Base6H decode is not a byte[] or a String");
      //  // Unstable assertion: assertNotNull(byteArray0);
      //  // Unstable assertion: assertEquals(37, byteArray0.length);
      
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertEquals(37, byteArray0.length);
      //  // Unstable assertion: assertEquals(54, byteArray1.length);
      
      boolean boolean0 = Base64.isArrayByteBase64(byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertEquals(37, byteArray0.length);
      //  // Unstable assertion: assertEquals(54, byteArray1.length);
      
      Base64 base64_0 = new Base64(false);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      base64_0.decode(byteArray1, 6, 6);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertEquals(37, byteArray0.length);
      //  // Unstable assertion: assertEquals(54, byteArray1.length);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      //  // Unstable assertion: assertNotNull(bigInteger0);
      //  // Unstable assertion: assertEquals((short)1, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)1, bigInteger0.byteValue());
      
      base64_0.encode(byteArray0, 6, (-1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertEquals(37, byteArray0.length);
      
      byte[] byteArray2 = new byte[1];
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = (byte)88;
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertEquals(1, byteArray2.length);
      //  // Unstable assertion: assertEquals(1, byteArray3.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)88}, byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)88}, byteArray3);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      //  // Unstable assertion: assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      //  // Unstable assertion: assertNotNull(mockRandom1);
      //  // Unstable assertion: assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      BigInteger bigInteger0 = new BigInteger(8230, mockRandom1);
      //  // Unstable assertion: assertNotNull(bigInteger0);
      //  // Unstable assertion: assertFalse(mockRandom1.equals((Object)mockRandom0));
      //  // Unstable assertion: assertEquals((short)1, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)1, bigInteger0.byteValue());
      
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertNotNull(byteArray0);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)46, (byte) (-36)}, byteArray0);
      
      boolean boolean0 = Base64.isBase64(byteArray0);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)46, (byte) (-36)}, byteArray0);
      
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertFalse(mockRandom1.equals((Object)mockRandom0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals((short)1, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)1, bigInteger0.byteValue());
      //  // Unstable assertion: assertNotSame(mockRandom1, mockRandom0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertEquals(1368, byteArray1.length);
      
      LongStream longStream0 = mockRandom1.longs();
      //  // Unstable assertion: assertNotNull(longStream0);
      //  // Unstable assertion: assertFalse(mockRandom1.equals((Object)mockRandom0));
      //  // Unstable assertion: assertNotSame(mockRandom1, mockRandom0);
      
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertFalse(mockRandom1.equals((Object)mockRandom0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals((short)1, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)1, bigInteger0.byteValue());
      //  // Unstable assertion: assertNotSame(mockRandom1, mockRandom0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertEquals(1368, byteArray2.length);
      
      Base64 base64_0 = new Base64(55, byteArray0);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)46, (byte) (-36)}, byteArray0);
      
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertFalse(mockRandom1.equals((Object)mockRandom0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertEquals((short)1, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)1, bigInteger0.byteValue());
      //  // Unstable assertion: assertNotSame(mockRandom1, mockRandom0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertEquals(1368, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      //  // Unstable assertion: assertNotNull(byteArray0);
      //  // Unstable assertion: assertEquals(37, byteArray0.length);
      
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertEquals(37, byteArray0.length);
      //  // Unstable assertion: assertEquals(54, byteArray1.length);
      
      boolean boolean0 = Base64.isArrayByteBase64(byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertEquals(37, byteArray0.length);
      //  // Unstable assertion: assertEquals(54, byteArray1.length);
      
      byte[] byteArray2 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertEquals(37, byteArray2.length);
      
      Base64 base64_0 = new Base64(false);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      base64_0.decode(byteArray1, 21, 21);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertEquals(37, byteArray0.length);
      //  // Unstable assertion: assertEquals(54, byteArray1.length);
      
      base64_0.encode(byteArray0, 21, (-1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertEquals(37, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      int int0 = (-462);
      byte[] byteArray1 = Base64.decodeBase64("ISO-8859-1");
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertEquals(7, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)33, (byte)35, (byte) (-66), (byte) (-13), (byte) (-50), (byte)125, (byte) (-5)}, byteArray1);
      
      Base64 base64_0 = new Base64();
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, 0, 3808);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(26, byteArray0.length);
      assertEquals(36, byteArray1.length);
      
      Base64 base64_0 = new Base64(8141, byteArray0, false);
      assertNotNull(base64_0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(26, byteArray0.length);
      
      base64_0.decode(byteArray1, 1, 8141);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(26, byteArray0.length);
      assertEquals(36, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      assertNotNull(byteArray0);
      assertEquals(37, byteArray0.length);
      
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(37, byteArray0.length);
      assertEquals(54, byteArray1.length);
      
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(37, byteArray0.length);
      
      byte[] byteArray2 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      assertNotNull(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(37, byteArray2.length);
      
      Base64 base64_0 = new Base64();
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      base64_0.decode(byteArray1, 25, 25);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertEquals(37, byteArray0.length);
      assertEquals(54, byteArray1.length);
      
      base64_0.encode(byteArray0, 1170, (-4544));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertEquals(37, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      BigInteger bigInteger0 = new BigInteger(8157, mockRandom1);
      assertNotNull(bigInteger0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      Base64 base64_0 = new Base64();
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte) (-42);
      byteArray0[5] = (byte)80;
      byteArray0[6] = (byte) (-1);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)32, (byte)85, (byte)115, (byte)46, (byte) (-42), (byte)80, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)85, (byte)115, (byte)46, (byte) (-42), (byte)80, (byte) (-1)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      //  // Unstable assertion: assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      //  // Unstable assertion: assertNotNull(mockRandom1);
      //  // Unstable assertion: assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      BigInteger bigInteger0 = new BigInteger(8157, mockRandom1);
      //  // Unstable assertion: assertNotNull(bigInteger0);
      //  // Unstable assertion: assertFalse(mockRandom1.equals((Object)mockRandom0));
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertNotNull(byteArray0);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)46, (byte) (-36)}, byteArray0);
      
      mockRandom0.setSeed(8140);
      //  // Unstable assertion: assertFalse(mockRandom0.equals((Object)mockRandom1));
      //  // Unstable assertion: assertNotSame(mockRandom0, mockRandom1);
      
      boolean boolean0 = Base64.isBase64(byteArray0);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)46, (byte) (-36)}, byteArray0);
      
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertFalse(mockRandom1.equals((Object)mockRandom0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertNotSame(mockRandom1, mockRandom0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertEquals(1356, byteArray1.length);
      
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertFalse(mockRandom1.equals((Object)mockRandom0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertNotSame(mockRandom1, mockRandom0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertEquals(1356, byteArray2.length);
      
      Random.setNextRandom(8157);
      byte[] byteArray3 = Base64.discardWhitespace(byteArray0);
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals(2, byteArray3.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)46, (byte) (-36)}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)46, (byte) (-36)}, byteArray3);
      
      Base64 base64_0 = new Base64(8140);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      base64_0.decode(byteArray1, 112, 2768);
      //  // Unstable assertion: assertFalse(mockRandom1.equals((Object)mockRandom0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(mockRandom1, mockRandom0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertEquals(1356, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      assertNotNull(byteArray0);
      assertEquals(37, byteArray0.length);
      
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(37, byteArray0.length);
      assertEquals(54, byteArray1.length);
      
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(37, byteArray0.length);
      
      byte[] byteArray2 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      assertNotNull(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(37, byteArray2.length);
      
      Base64 base64_0 = new Base64();
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      boolean boolean1 = Base64.isBase64((byte)61);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = base64_0.avail();
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, int0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      //  // Unstable assertion: assertNotNull(byteArray0);
      //  // Unstable assertion: assertEquals(37, byteArray0.length);
      
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertEquals(37, byteArray0.length);
      //  // Unstable assertion: assertEquals(54, byteArray1.length);
      
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertEquals(37, byteArray0.length);
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray1);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals("UGFyYW1ldGVyc3VwcGxpZWR0b0Jhc2U2NGRlY29kZWlzbm90YWJ5dGVvcmFTdHJpbmc9PS7c", string0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertEquals(37, byteArray0.length);
      //  // Unstable assertion: assertEquals(54, byteArray1.length);
      
      byte[] byteArray2 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertEquals(37, byteArray2.length);
      
      Base64 base64_0 = new Base64();
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      base64_0.decode(byteArray1, 25, 25);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertEquals(37, byteArray0.length);
      //  // Unstable assertion: assertEquals(54, byteArray1.length);
      
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertEquals(37, byteArray2.length);
      //  // Unstable assertion: assertEquals(37, byteArray3.length);
      
      int int0 = base64_0.avail();
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(18, int0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)126);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      //  // Unstable assertion: assertNotNull(byteArray0);
      //  // Unstable assertion: assertEquals(37, byteArray0.length);
      
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertEquals(37, byteArray0.length);
      //  // Unstable assertion: assertEquals(54, byteArray1.length);
      
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertEquals(37, byteArray0.length);
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray1);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals("UGFyYW1ldGVyc3VwcGxpZWR0b0Jhc2U2NGRlY29kZWlzbm90YWJ5dGVvcmFTdHJpbmc9PS7c", string0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertEquals(37, byteArray0.length);
      //  // Unstable assertion: assertEquals(54, byteArray1.length);
      
      Base64 base64_0 = new Base64(false);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertEquals(37, byteArray0.length);
      //  // Unstable assertion: assertEquals(54, byteArray1.length);
      //  // Unstable assertion: assertEquals(72, byteArray2.length);
      
      byte[] byteArray3 = Base64.decodeBase64("ulO>6TQ7Xu_WN");
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertEquals(9, byteArray3.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-70), (byte)83, (byte) (-70), (byte)77, (byte)14, (byte) (-41), (byte) (-69), (byte) (-11), (byte) (-115)}, byteArray3);
      
      base64_0.decode(byteArray1, 9, 9);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertEquals(37, byteArray0.length);
      //  // Unstable assertion: assertEquals(54, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Base64 base64_0 = new Base64(12);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray0 = new byte[15];
      boolean boolean0 = Base64.isBase64("ISO-859-1");
      assertTrue(boolean0);
      
      byteArray0[0] = (byte)66;
      byte byte0 = (byte)1;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(15, byteArray0.length);
      assertEquals(22, byteArray1.length);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true);
      assertNotNull(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(15, byteArray0.length);
      assertEquals(22, byteArray2.length);
      
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)1, 91);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 15
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = Base64.isBase64("org.apache.commons.codec.binary.Base64");
      assertFalse(boolean0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true, 6);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65}, byteArray1);
      
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      assertNotNull(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray2);
      
      Base64 base64_0 = new Base64(6);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      int int0 = base64_0.readResults(byteArray1, 6, 8189);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, int0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61}, byteArray1);
      
      Base64 base64_0 = new Base64(8144, byteArray0, false);
      assertNotNull(base64_0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray0);
      assertNotNull(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65}, byteArray2);
      
      base64_0.decode(byteArray1, 1, 8144);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      //  // Unstable assertion: assertNotNull(bigInteger0);
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      
      MockRandom mockRandom0 = new MockRandom();
      //  // Unstable assertion: assertNotNull(mockRandom0);
      
      BigInteger bigInteger1 = new BigInteger(8140, mockRandom0);
      //  // Unstable assertion: assertNotNull(bigInteger1);
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger0));
      //  // Unstable assertion: assertEquals((byte)0, bigInteger1.byteValue());
      //  // Unstable assertion: assertEquals((short) (-512), bigInteger1.shortValue());
      
      BigInteger bigInteger2 = bigInteger0.subtract(bigInteger1);
      //  // Unstable assertion: assertNotNull(bigInteger2);
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger1));
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger0));
      //  // Unstable assertion: assertFalse(bigInteger2.equals((Object)bigInteger1));
      //  // Unstable assertion: assertFalse(bigInteger2.equals((Object)bigInteger0));
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger1.byteValue());
      //  // Unstable assertion: assertEquals((short) (-512), bigInteger1.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger2.byteValue());
      //  // Unstable assertion: assertEquals((short)512, bigInteger2.shortValue());
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger2);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger0);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger2);
      //  // Unstable assertion: assertNotSame(bigInteger2, bigInteger1);
      //  // Unstable assertion: assertNotSame(bigInteger2, bigInteger0);
      
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertNotNull(byteArray0);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)46, (byte) (-36)}, byteArray0);
      
      mockRandom0.setSeed(481L);
      byte[] byteArray1 = new byte[4];
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)9;
      byteArray1[1] = (byte)17;
      byteArray1[2] = (byte) (-28);
      byteArray1[3] = (byte) (-1);
      boolean boolean0 = Base64.isBase64(byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertEquals(4, byteArray1.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)9, (byte)17, (byte) (-28), (byte) (-1)}, byteArray1);
      
      byte[] byteArray2 = Base64.encodeInteger(bigInteger1);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger0));
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger2));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals((byte)0, bigInteger1.byteValue());
      //  // Unstable assertion: assertEquals((short) (-512), bigInteger1.shortValue());
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger0);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertEquals(1352, byteArray2.length);
      
      Random.setNextRandom(39);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Base64 base64_0 = new Base64(12);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray0 = new byte[9];
      boolean boolean0 = Base64.isBase64("IsSO-8859-1");
      assertTrue(boolean0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false, 5066);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(14, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean1 = Base64.isBase64(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byte[] byteArray2 = base64_0.encode(byteArray0);
      assertNotNull(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(14, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertNotNull(byteArray0);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)46, (byte) (-36)}, byteArray0);
      
      Base64 base64_0 = new Base64();
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      base64_0.encode(byteArray0, (-2013), (-159));
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)46, (byte) (-36)}, byteArray0);
      
      base64_0.decode(byteArray0, (-3080), (-10));
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)46, (byte) (-36)}, byteArray0);
      
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, 18, (-159));
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Base64 base64_0 = new Base64(12);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(14, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      assertNotNull(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray0);
      assertNotNull(byteArray3);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(12, byteArray3.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      Base64 base64_1 = new Base64();
      assertNotNull(base64_1);
      assertFalse(base64_1.equals((Object)base64_0));
      assertFalse(base64_1.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray4 = base64_0.encode(byteArray1);
      assertNotNull(byteArray4);
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(base64_0, base64_1);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray2);
      assertEquals(9, byteArray0.length);
      assertEquals(14, byteArray1.length);
      assertEquals(24, byteArray4.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      try { 
        base64_0.decode((Object) base64_1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertNotNull(byteArray0);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)46, (byte) (-36)}, byteArray0);
      
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)46, (byte) (-36)}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)46, (byte) (-36)}, byteArray1);
      
      boolean boolean0 = Base64.isBase64((byte)58);
      //  // Unstable assertion: assertFalse(boolean0);
      
      Random.setNextRandom((-1106));
      Base64 base64_0 = new Base64((-1106), byteArray1);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)46, (byte) (-36)}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)46, (byte) (-36)}, byteArray1);
      
      byte[] byteArray2 = base64_0.encode(byteArray1);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      //  // Unstable assertion: assertEquals(4, byteArray2.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)46, (byte) (-36)}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)46, (byte) (-36)}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)76, (byte)116, (byte)119, (byte)61}, byteArray2);
      
      Object object0 = base64_0.decode((Object) "Parameter supplied to Base64 decode is not a byte[] or a String");
      //  // Unstable assertion: assertNotNull(object0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, object0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, object0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)46, (byte) (-36)}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)46, (byte) (-36)}, byteArray1);
      
      Object object1 = base64_0.encode(object0);
      //  // Unstable assertion: assertNotNull(object1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)object0));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)object0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(object1.equals((Object)object0));
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, object1);
      //  // Unstable assertion: assertNotSame(byteArray0, object0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, object1);
      //  // Unstable assertion: assertNotSame(byteArray1, object0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(object0, object1);
      //  // Unstable assertion: assertNotSame(object1, object0);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)46, (byte) (-36)}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)46, (byte) (-36)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)26;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)26;
      Base64 base64_0 = new Base64(102, byteArray0);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-85), (byte) (-85), (byte)26}, byteArray0);
      
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, (int) (byte)26);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null, false, false, (-23));
      assertNull(byteArray0);
      
      Base64 base64_0 = new Base64(false);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray1 = base64_0.decode((byte[]) null);
      assertNull(byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray2 = base64_0.encode((byte[]) null);
      assertNull(byteArray2);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      boolean boolean0 = Base64.isBase64((byte)119);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      BigInteger bigInteger1 = new BigInteger(8140, mockRandom0);
      assertNotNull(bigInteger1);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((short) (-512), bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      
      BigInteger bigInteger2 = bigInteger0.subtract(bigInteger1);
      assertNotNull(bigInteger2);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short) (-512), bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((byte)0, bigInteger2.byteValue());
      assertEquals((short)512, bigInteger2.shortValue());
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      
      BigInteger bigInteger3 = bigInteger2.or(bigInteger1);
      assertNotNull(bigInteger3);
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short) (-512), bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((byte)0, bigInteger2.byteValue());
      assertEquals((short)512, bigInteger2.shortValue());
      assertEquals((byte)0, bigInteger3.byteValue());
      assertEquals((short) (-512), bigInteger3.shortValue());
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger3);
      assertNotSame(bigInteger3, bigInteger2);
      assertNotSame(bigInteger3, bigInteger0);
      assertNotSame(bigInteger3, bigInteger1);
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertNotNull(byteArray0);
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger3);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      mockRandom0.setSeed(8L);
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertTrue(boolean0);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger3);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      byte[] byteArray1 = Base64.encodeInteger(bigInteger2);
      assertNotNull(byteArray1);
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertFalse(bigInteger1.equals((Object)bigInteger3));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short) (-512), bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((byte)0, bigInteger2.byteValue());
      assertEquals((short)512, bigInteger2.shortValue());
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger3);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1352, byteArray1.length);
      
      boolean boolean1 = Base64.isBase64(byteArray0);
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(boolean1 == boolean0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertTrue(boolean1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Random.setNextRandom(8140);
      Base64 base64_0 = new Base64(true);
      assertNotNull(base64_0);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      base64_0.decode(byteArray1, 8140, (-1189));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertFalse(bigInteger1.equals((Object)bigInteger3));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short) (-512), bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((byte)0, bigInteger2.byteValue());
      assertEquals((short)512, bigInteger2.shortValue());
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger3);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1352, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray0 = new byte[9];
      boolean boolean0 = Base64.isBase64("ISO-8859-1");
      assertTrue(boolean0);
      
      byteArray0[0] = (byte)66;
      byte byte0 = (byte)1;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(14, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)66, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)1, 91);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-101);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(13, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-101), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      assertNotNull(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray2.length);
      assertArrayEquals(new byte[] {(byte) (-101), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-101), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray1);
      assertNotNull(byteArray3);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(13, byteArray1.length);
      assertEquals(20, byteArray3.length);
      assertArrayEquals(new byte[] {(byte) (-101), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      byte[] byteArray4 = Base64.encodeInteger(bigInteger0);
      assertNotNull(byteArray4);
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray3);
      assertEquals(0, byteArray4.length);
      assertArrayEquals(new byte[] {}, byteArray4);
      
      Base64 base64_0 = new Base64();
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray5 = base64_0.encode(byteArray2);
      assertNotNull(byteArray5);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray4));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray0));
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray5);
      assertNotSame(byteArray5, byteArray0);
      assertNotSame(byteArray5, byteArray3);
      assertNotSame(byteArray5, byteArray1);
      assertNotSame(byteArray5, byteArray4);
      assertNotSame(byteArray5, byteArray2);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray2.length);
      assertEquals(12, byteArray5.length);
      assertArrayEquals(new byte[] {(byte) (-101), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-101), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      
      int int0 = base64_0.readResults(byteArray3, (byte) (-101), (-1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray1.equals((Object)byteArray5));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray4));
      assertFalse(byteArray3.equals((Object)byteArray5));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(base64_0.isUrlSafe());
      assertEquals((-1), int0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray1, byteArray5);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray3, byteArray5);
      assertNotSame(byteArray3, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(13, byteArray1.length);
      assertEquals(20, byteArray3.length);
      assertArrayEquals(new byte[] {(byte) (-101), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = null;
      byte[] byteArray1 = Base64.encodeBase64((byte[]) null, false, false);
      assertNull(byteArray1);
      
      byte byte0 = (byte)123;
      byte[] byteArray2 = Base64.encodeBase64((byte[]) null);
      assertNull(byteArray2);
      
      Base64 base64_0 = new Base64(false);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      Base64 base64_1 = new Base64(76);
      assertNotNull(base64_1);
      assertFalse(base64_1.equals((Object)base64_0));
      assertFalse(base64_1.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      // Undeclared exception!
      try { 
        base64_1.encode((byte[]) null, (int) (byte)123, (int) (byte)123);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null, false, false, (-23));
      assertNull(byteArray0);
      
      Base64 base64_0 = new Base64((-23));
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      String string0 = "=Jx";
      byte[] byteArray1 = base64_0.decode((byte[]) null);
      assertNull(byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray2 = base64_0.encode((byte[]) null);
      assertNull(byteArray2);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      Object object0 = base64_0.decode((Object) "=Jx");
      assertNotNull(object0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      Object object1 = base64_0.decode(object0);
      assertNotNull(object1);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertSame(object0, object1);
      assertSame(object1, object0);
      
      byte[] byteArray3 = Base64.encodeBase64((byte[]) null, false);
      assertNull(byteArray3);
      
      String string1 = Base64.encodeBase64String((byte[]) null);
      assertNull(string1);
      
      byte[] byteArray4 = Base64.encodeBase64((byte[]) null, false, false, 34);
      assertNull(byteArray4);
      
      boolean boolean0 = Base64.isBase64((byte)119);
      assertTrue(boolean0);
      
      byte[] byteArray5 = base64_0.decode((byte[]) null);
      assertNull(byteArray5);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-126);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-126), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)73, (byte)73, (byte)65}, byteArray1);
      
      Base64 base64_0 = new Base64(5, byteArray0, false);
      assertNotNull(base64_0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-126), (byte)0}, byteArray0);
      
      boolean boolean0 = base64_0.hasData();
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(base64_0.isUrlSafe());
      assertFalse(boolean0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-126), (byte)0}, byteArray0);
      
      base64_0.encode(byteArray1, 99, (int) (byte) (-126));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-126), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)73, (byte)73, (byte)65}, byteArray1);
      
      base64_0.decode(byteArray1, 8184, 3463);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-126), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)73, (byte)73, (byte)65}, byteArray1);
      
      byte[] byteArray2 = new byte[3];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = (byte) (-126);
      byteArray2[1] = (byte) (-126);
      byteArray2[2] = (byte) (-126);
      boolean boolean1 = Base64.isBase64(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(3, byteArray2.length);
      assertArrayEquals(new byte[] {(byte) (-126), (byte) (-126), (byte) (-126)}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      Base64 base64_0 = new Base64(1431655765, byteArray1, false);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      assertNotNull(byteArray2);
      assertSame(byteArray0, byteArray2);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray2);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray2, byteArray1);
      assertSame(byteArray2, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      
      byte[] byteArray3 = new byte[2];
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      
      byteArray3[0] = (byte)0;
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Base64 base64_0 = new Base64();
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)14;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertEquals(3, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArray1.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)91, (byte) (-1), (byte)14}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)87, (byte)95, (byte)56, (byte)79, (byte)46, (byte) (-36)}, byteArray1);
      
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertEquals(3, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArray1.length);
      //  // Unstable assertion: assertEquals(6, byteArray2.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)91, (byte) (-1), (byte)14}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)87, (byte)95, (byte)56, (byte)79, (byte)46, (byte) (-36)}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)87, (byte)95, (byte)56, (byte)79, (byte)46, (byte) (-36)}, byteArray2);
      
      boolean boolean0 = Base64.isBase64((byte) (-85));
      //  // Unstable assertion: assertFalse(boolean0);
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray2);
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertEquals(3, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArray1.length);
      //  // Unstable assertion: assertEquals(6, byteArray2.length);
      //  // Unstable assertion: assertEquals(8, byteArray3.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)91, (byte) (-1), (byte)14}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)87, (byte)95, (byte)56, (byte)79, (byte)46, (byte) (-36)}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)87, (byte)95, (byte)56, (byte)79, (byte)46, (byte) (-36)}, byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)86, (byte)49, (byte)56, (byte)52, (byte)84, (byte)121, (byte)55, (byte)99}, byteArray3);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      //  // Unstable assertion: assertNotNull(bigInteger0);
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      
      byte[] byteArray4 = Base64.encodeInteger(bigInteger0);
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertEquals(0, byteArray4.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray4);
      
      Base64 base64_1 = new Base64();
      //  // Unstable assertion: assertNotNull(base64_1);
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray5 = base64_1.encode(byteArray4);
      //  // Unstable assertion: assertNotNull(byteArray5);
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray1));
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertSame(byteArray4, byteArray5);
      //  // Unstable assertion: assertNotSame(base64_1, base64_0);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray0);
      //  // Unstable assertion: assertSame(byteArray5, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray1);
      //  // Unstable assertion: assertEquals(0, byteArray4.length);
      //  // Unstable assertion: assertEquals(0, byteArray5.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray4);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray5);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      assertNotNull(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray2);
      assertSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      
      boolean boolean0 = Base64.isBase64((byte) (-26));
      assertFalse(boolean0);
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray2);
      assertNotNull(byteArray3);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray2);
      assertSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertSame(byteArray3, byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray3.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertArrayEquals(new byte[] {}, byteArray3);
      
      byte[] byteArray4 = Base64.discardWhitespace(byteArray1);
      assertNotNull(byteArray4);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray2);
      assertSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertSame(byteArray1, byteArray0);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray4.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray4);
      
      Base64 base64_0 = new Base64((byte) (-26), byteArray3);
      assertNotNull(base64_0);
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray4));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray4));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray3.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertArrayEquals(new byte[] {}, byteArray3);
      
      base64_0.encode(byteArray1, 482, 0);
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray4));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray4));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray2);
      assertSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray2, byteArray1);
      assertSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertSame(byteArray3, byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray3.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertArrayEquals(new byte[] {}, byteArray3);
      
      Base64 base64_1 = new Base64(0);
      assertNotNull(base64_1);
      assertFalse(base64_1.equals((Object)base64_0));
      assertFalse(base64_1.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray5 = new byte[1];
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray0));
      assertFalse(byteArray5.equals((Object)byteArray3));
      
      byteArray5[0] = (byte)39;
      base64_1.decode(byteArray5, 2911, (int) (byte) (-26));
      assertFalse(base64_1.equals((Object)base64_0));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray0));
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(base64_1.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(base64_1, base64_0);
      assertNotSame(byteArray5, byteArray2);
      assertNotSame(byteArray5, byteArray1);
      assertNotSame(byteArray5, byteArray4);
      assertNotSame(byteArray5, byteArray0);
      assertNotSame(byteArray5, byteArray3);
      assertEquals(1, byteArray5.length);
      assertArrayEquals(new byte[] {(byte)39}, byteArray5);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      //  // Unstable assertion: assertNotNull(bigInteger0);
      //  // Unstable assertion: assertEquals((byte)1, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)1, bigInteger0.shortValue());
      
      int int0 = bigInteger0.signum();
      //  // Unstable assertion: assertEquals((byte)1, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)1, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals(1, int0);
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      //  // Unstable assertion: assertNotNull(byteArray0);
      //  // Unstable assertion: assertEquals((byte)1, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)1, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray0);
      
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray0);
      //  // Unstable assertion: assertNotNull(bigInteger1);
      //  // Unstable assertion: assertTrue(bigInteger1.equals((Object)bigInteger0));
      //  // Unstable assertion: assertEquals((byte)1, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)1, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)1, bigInteger1.byteValue());
      //  // Unstable assertion: assertEquals((short)1, bigInteger1.shortValue());
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger0);
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray0);
      
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)46, (byte) (-36)}, byteArray1);
      
      Object object0 = new Object();
      //  // Unstable assertion: assertNotNull(object0);
      
      Base64 base64_0 = new Base64();
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      String string0 = base64_0.encodeToString(byteArray1);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals("Ltw=", string0);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)46, (byte) (-36)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65}, byteArray1);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      assertNotNull(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertEquals(8, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65}, byteArray1);
      assertArrayEquals(new byte[] {(byte)81, (byte)85, (byte)70, (byte)66, (byte)81, (byte)85, (byte)70, (byte)66}, byteArray2);
      
      Base64 base64_0 = new Base64(false);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray3 = new byte[8];
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      
      byteArray3[0] = (byte)108;
      byteArray3[1] = (byte)1;
      byteArray3[2] = (byte)1;
      byteArray3[3] = (byte)123;
      byteArray3[4] = (byte)123;
      byteArray3[5] = (byte)1;
      byteArray3[6] = (byte)55;
      byteArray3[7] = (byte)123;
      base64_0.encode(byteArray3, (int) (byte)1, (int) (byte)1);
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertEquals(8, byteArray3.length);
      assertArrayEquals(new byte[] {(byte)108, (byte)1, (byte)1, (byte)123, (byte)123, (byte)1, (byte)55, (byte)123}, byteArray3);
      
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray3, (int) (byte)55, 659);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 55
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      float float0 = bigInteger0.floatValue();
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(0.0F, float0, 0.01F);
      
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      byte[] byteArray2 = Base64.decodeBase64("");
      assertNotNull(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {}, byteArray2);
      
      Base64 base64_0 = new Base64(0, byteArray2);
      assertNotNull(base64_0);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {}, byteArray2);
      
      Object object0 = base64_0.decode((Object) "");
      assertNotNull(object0);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, object0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {}, byteArray2);
      
      byte[] byteArray3 = new byte[8];
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)object0));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray2, false, true, (-2159));
      assertNotNull(byteArray4);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)object0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)object0));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, object0);
      assertSame(byteArray2, byteArray4);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, object0);
      assertNotSame(byteArray4, byteArray1);
      assertSame(byteArray4, byteArray2);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray4.length);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertArrayEquals(new byte[] {}, byteArray4);
      
      byteArray3[0] = (byte)9;
      byteArray3[1] = (byte)22;
      byteArray3[2] = (byte)88;
      byteArray3[3] = (byte)30;
      byteArray3[4] = (byte)39;
      byte[] byteArray5 = Base64.discardWhitespace(byteArray3);
      assertNotNull(byteArray5);
      assertFalse(byteArray3.equals((Object)byteArray4));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)object0));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray0));
      assertFalse(byteArray5.equals((Object)object0));
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, object0);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray5);
      assertNotSame(byteArray5, byteArray1);
      assertNotSame(byteArray5, byteArray2);
      assertNotSame(byteArray5, byteArray3);
      assertNotSame(byteArray5, byteArray4);
      assertNotSame(byteArray5, byteArray0);
      assertNotSame(byteArray5, object0);
      assertEquals(8, byteArray3.length);
      assertEquals(7, byteArray5.length);
      assertArrayEquals(new byte[] {(byte)9, (byte)22, (byte)88, (byte)30, (byte)39, (byte)0, (byte)0, (byte)0}, byteArray3);
      assertArrayEquals(new byte[] {(byte)22, (byte)88, (byte)30, (byte)39, (byte)0, (byte)0, (byte)0}, byteArray5);
      
      byteArray3[5] = (byte) (-107);
      byteArray3[6] = (byte)0;
      byteArray3[7] = (byte) (-126);
      byte[] byteArray6 = Base64.encodeBase64(byteArray3);
      assertNotNull(byteArray6);
      assertFalse(byteArray6.equals((Object)byteArray3));
      assertFalse(byteArray6.equals((Object)byteArray5));
      assertFalse(byteArray6.equals((Object)byteArray4));
      assertFalse(byteArray6.equals((Object)byteArray1));
      assertFalse(byteArray6.equals((Object)byteArray0));
      assertFalse(byteArray6.equals((Object)object0));
      assertFalse(byteArray6.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray4));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)object0));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray5));
      assertNotSame(byteArray6, byteArray3);
      assertNotSame(byteArray6, byteArray5);
      assertNotSame(byteArray6, byteArray4);
      assertNotSame(byteArray6, byteArray1);
      assertNotSame(byteArray6, byteArray0);
      assertNotSame(byteArray6, object0);
      assertNotSame(byteArray6, byteArray2);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray6);
      assertNotSame(byteArray3, object0);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray5);
      assertEquals(12, byteArray6.length);
      assertEquals(8, byteArray3.length);
      assertArrayEquals(new byte[] {(byte)9, (byte)22, (byte)88, (byte)30, (byte)39, (byte) (-107), (byte)0, (byte) (-126)}, byteArray3);
      
      Object object1 = base64_0.decode(object0);
      assertNotNull(object1);
      assertFalse(byteArray2.equals((Object)byteArray5));
      assertFalse(byteArray2.equals((Object)byteArray6));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)object0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertSame(object1, object0);
      assertNotSame(byteArray2, object1);
      assertNotSame(byteArray2, byteArray5);
      assertNotSame(byteArray2, byteArray6);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, object0);
      assertSame(byteArray2, byteArray4);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray3);
      assertSame(object0, object1);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {}, byteArray2);
      
      Object object2 = base64_0.encode(object1);
      assertNotNull(object2);
      assertFalse(byteArray2.equals((Object)object1));
      assertFalse(byteArray2.equals((Object)byteArray5));
      assertFalse(byteArray2.equals((Object)byteArray6));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)object0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertSame(object1, object2);
      assertSame(object1, object0);
      assertSame(object2, object1);
      assertSame(object2, object0);
      assertNotSame(byteArray2, object1);
      assertNotSame(byteArray2, byteArray5);
      assertNotSame(byteArray2, byteArray6);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, object0);
      assertSame(byteArray2, byteArray4);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, object2);
      assertNotSame(byteArray2, byteArray3);
      assertSame(object0, object1);
      assertSame(object0, object2);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {}, byteArray2);
      
      byte[] byteArray7 = Base64.encodeBase64(byteArray1);
      assertNotNull(byteArray7);
      assertFalse(byteArray0.equals((Object)object1));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)object0));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)object2));
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray0.equals((Object)byteArray6));
      assertFalse(byteArray1.equals((Object)object2));
      assertFalse(byteArray1.equals((Object)byteArray5));
      assertFalse(byteArray1.equals((Object)byteArray6));
      assertFalse(byteArray1.equals((Object)object1));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)object0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(byteArray7.equals((Object)byteArray6));
      assertFalse(byteArray7.equals((Object)object0));
      assertFalse(byteArray7.equals((Object)byteArray2));
      assertFalse(byteArray7.equals((Object)object1));
      assertFalse(byteArray7.equals((Object)byteArray5));
      assertFalse(byteArray7.equals((Object)object2));
      assertFalse(byteArray7.equals((Object)byteArray3));
      assertFalse(byteArray7.equals((Object)byteArray4));
      assertNotSame(byteArray0, object1);
      assertNotSame(byteArray0, byteArray4);
      assertSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, object0);
      assertNotSame(byteArray0, byteArray2);
      assertSame(byteArray0, byteArray7);
      assertNotSame(byteArray0, object2);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray6);
      assertSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, object2);
      assertNotSame(byteArray1, byteArray5);
      assertNotSame(byteArray1, byteArray6);
      assertNotSame(byteArray1, object1);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, object0);
      assertNotSame(byteArray1, byteArray2);
      assertSame(byteArray1, byteArray7);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray7, byteArray6);
      assertNotSame(byteArray7, object0);
      assertNotSame(byteArray7, byteArray2);
      assertNotSame(byteArray7, object1);
      assertNotSame(byteArray7, byteArray5);
      assertNotSame(byteArray7, object2);
      assertSame(byteArray7, byteArray0);
      assertNotSame(byteArray7, byteArray3);
      assertSame(byteArray7, byteArray1);
      assertNotSame(byteArray7, byteArray4);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray7.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray7);
      
      boolean boolean0 = Base64.isArrayByteBase64(byteArray1);
      assertFalse(byteArray0.equals((Object)object1));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)object0));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)object2));
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray0.equals((Object)byteArray6));
      assertFalse(byteArray1.equals((Object)object2));
      assertFalse(byteArray1.equals((Object)byteArray5));
      assertFalse(byteArray1.equals((Object)byteArray6));
      assertFalse(byteArray1.equals((Object)object1));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)object0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertTrue(boolean0);
      assertNotSame(byteArray0, object1);
      assertNotSame(byteArray0, byteArray4);
      assertSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, object0);
      assertNotSame(byteArray0, byteArray2);
      assertSame(byteArray0, byteArray7);
      assertNotSame(byteArray0, object2);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray6);
      assertSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, object2);
      assertNotSame(byteArray1, byteArray5);
      assertNotSame(byteArray1, byteArray6);
      assertNotSame(byteArray1, object1);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, object0);
      assertNotSame(byteArray1, byteArray2);
      assertSame(byteArray1, byteArray7);
      assertNotSame(byteArray1, byteArray4);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray2);
      assertNotNull(string0);
      assertFalse(byteArray2.equals((Object)object1));
      assertFalse(byteArray2.equals((Object)byteArray5));
      assertFalse(byteArray2.equals((Object)byteArray6));
      assertFalse(byteArray2.equals((Object)byteArray7));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)object0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)object2));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertEquals("", string0);
      assertNotSame(byteArray2, object1);
      assertNotSame(byteArray2, byteArray5);
      assertNotSame(byteArray2, byteArray6);
      assertNotSame(byteArray2, byteArray7);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, object0);
      assertSame(byteArray2, byteArray4);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, object2);
      assertNotSame(byteArray2, byteArray3);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Base64 base64_0 = new Base64();
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertNotNull(byteArray0);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)46, (byte) (-36)}, byteArray0);
      
      int int0 = base64_0.avail();
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(0, int0);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      boolean boolean0 = Base64.isBase64("encodeInteger called with null parameter");
      //  // Unstable assertion: assertTrue(boolean0);
      
      int int1 = base64_0.avail();
      //  // Unstable assertion: assertTrue(int1 == int0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(0, int1);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      String string0 = "e ,0>a";
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((byte[]) null);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61}, byteArray1);
      
      byte byte0 = (byte)1;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      assertNotNull(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertEquals(12, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61}, byteArray1);
      
      Base64 base64_0 = new Base64(true);
      assertNotNull(base64_0);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray2, 7, 1252);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("AAAAAAA", string0);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, (int) (byte)20);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertEquals(9, byteArray1.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)46, (byte) (-36)}, byteArray1);
      
      Base64 base64_0 = new Base64(true);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray2 = base64_0.encode((byte[]) null);
      //  // Unstable assertion: assertNull(byteArray2);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      Object object0 = base64_0.decode((Object) "");
      //  // Unstable assertion: assertNotNull(object0);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      boolean boolean0 = Base64.isBase64(byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)object0));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertNotSame(byteArray0, object0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-94);
      BigInteger bigInteger0 = BigInteger.ONE;
      //  // Unstable assertion: assertNotNull(bigInteger0);
      //  // Unstable assertion: assertEquals((short)1, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)1, bigInteger0.byteValue());
      
      byte[] byteArray1 = Base64.decodeBase64("f2G0L");
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertEquals(3, byteArray1.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)127, (byte)97, (byte) (-76)}, byteArray1);
      
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertEquals(3, byteArray1.length);
      //  // Unstable assertion: assertEquals(6, byteArray2.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)127, (byte)97, (byte) (-76)}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)102, (byte)50, (byte)71, (byte)48, (byte)46, (byte) (-36)}, byteArray2);
      
      boolean boolean0 = Base64.isArrayByteBase64(byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertEquals(3, byteArray1.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)127, (byte)97, (byte) (-76)}, byteArray1);
      
      byte[] byteArray3 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertEquals(2, byteArray3.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)46, (byte) (-36)}, byteArray3);
      
      byte[] byteArray4 = new byte[5];
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      
      byteArray4[0] = (byte) (-94);
      byteArray4[1] = (byte) (-94);
      byteArray4[2] = (byte) (-94);
      byteArray4[3] = (byte) (-94);
      byteArray4[4] = (byte) (-94);
      byte[] byteArray5 = Base64.encodeBase64(byteArray4, true, false);
      //  // Unstable assertion: assertNotNull(byteArray5);
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray2));
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray2);
      //  // Unstable assertion: assertEquals(5, byteArray4.length);
      //  // Unstable assertion: assertEquals(10, byteArray5.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-94), (byte) (-94), (byte) (-94), (byte) (-94), (byte) (-94)}, byteArray4);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)111, (byte)113, (byte)75, (byte)105, (byte)111, (byte)113, (byte)73, (byte)61, (byte)46, (byte) (-36)}, byteArray5);
      
      Base64 base64_0 = new Base64((byte) (-94), byteArray4, false);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(5, byteArray4.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-94), (byte) (-94), (byte) (-94), (byte) (-94), (byte) (-94)}, byteArray4);
      
      int int0 = base64_0.readResults(byteArray1, (byte) (-94), (byte) (-94));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(0, int0);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray5);
      //  // Unstable assertion: assertEquals(3, byteArray1.length);
      //  // Unstable assertion: assertEquals(5, byteArray4.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)127, (byte)97, (byte) (-76)}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-94), (byte) (-94), (byte) (-94), (byte) (-94), (byte) (-94)}, byteArray4);
      
      byte[] byteArray6 = Base64.encodeBase64(byteArray0);
      //  // Unstable assertion: assertNotNull(byteArray6);
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertEquals(8, byteArray6.length);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)111, (byte)103, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61}, byteArray6);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-94), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byte[] byteArray7 = base64_0.decode((String) null);
      //  // Unstable assertion: assertNull(byteArray7);
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray5);
      //  // Unstable assertion: assertEquals(5, byteArray4.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-94), (byte) (-94), (byte) (-94), (byte) (-94), (byte) (-94)}, byteArray4);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      boolean boolean0 = Base64.isBase64("org.apache.commons.codec.DecoderException");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)34;
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray0);
      assertNotNull(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray1);
      assertSame(byteArray2, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      
      Base64 base64_0 = new Base64(2137, byteArray2);
      assertNotNull(base64_0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      
      boolean boolean1 = base64_0.hasData();
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertTrue(boolean1 == boolean0);
      assertFalse(base64_0.isUrlSafe());
      assertFalse(boolean1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray1);
      assertSame(byteArray2, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      
      boolean boolean2 = Base64.isBase64((byte)7);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)26;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-47);
      Base64 base64_1 = new Base64((-1), byteArray1, false);
      assertNotNull(base64_1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(base64_1.equals((Object)base64_0));
      assertFalse(base64_1.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(3, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)26, (byte)0, (byte) (-47)}, byteArray1);
      
      byte[] byteArray2 = new byte[4];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[1] = (byte)42;
      byteArray2[2] = (byte) (-83);
      byteArray2[3] = (byte)0;
      boolean boolean0 = Base64.isBase64(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(boolean0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(4, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)42, (byte) (-83), (byte)0}, byteArray2);
      
      base64_1.encode(byteArray1, (int) (byte)0, (-855));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(base64_1.equals((Object)base64_0));
      assertFalse(base64_1.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(base64_1, base64_0);
      assertEquals(3, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)26, (byte)0, (byte) (-47)}, byteArray1);
      
      boolean boolean1 = base64_1.hasData();
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(base64_1.equals((Object)base64_0));
      assertFalse(boolean1 == boolean0);
      assertFalse(base64_1.isUrlSafe());
      assertTrue(boolean1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(base64_1, base64_0);
      assertEquals(3, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)26, (byte)0, (byte) (-47)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64(3711, (byte[]) null, false);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 3711, 3711);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-57);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertEquals(8, byteArray1.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-94), (byte)123, (byte)0, (byte)1, (byte) (-57)}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)111, (byte)110, (byte)115, (byte)65, (byte)65, (byte)99, (byte)99, (byte)61}, byteArray1);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false, true);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertEquals(7, byteArray2.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-94), (byte)123, (byte)0, (byte)1, (byte) (-57)}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)111, (byte)110, (byte)115, (byte)65, (byte)65, (byte)99, (byte)99}, byteArray2);
      
      Base64 base64_0 = new Base64(false);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      base64_0.decode(byteArray2, 0, (int) (byte) (-94));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertEquals(7, byteArray2.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-94), (byte)123, (byte)0, (byte)1, (byte) (-57)}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)111, (byte)110, (byte)115, (byte)65, (byte)65, (byte)99, (byte)99}, byteArray2);
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray2);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals("b25zQUFjYw", string0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertEquals(7, byteArray2.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-94), (byte)123, (byte)0, (byte)1, (byte) (-57)}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)111, (byte)110, (byte)115, (byte)65, (byte)65, (byte)99, (byte)99}, byteArray2);
      
      byte[] byteArray3 = base64_0.encode(byteArray0);
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertEquals(10, byteArray3.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-94), (byte)123, (byte)0, (byte)1, (byte) (-57)}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)111, (byte)110, (byte)115, (byte)65, (byte)65, (byte)99, (byte)99, (byte)61, (byte)46, (byte) (-36)}, byteArray3);
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray1, true);
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertEquals(8, byteArray1.length);
      //  // Unstable assertion: assertEquals(14, byteArray4.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-94), (byte)123, (byte)0, (byte)1, (byte) (-57)}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)111, (byte)110, (byte)115, (byte)65, (byte)65, (byte)99, (byte)99, (byte)61}, byteArray1);
      
      boolean boolean0 = Base64.isBase64(byteArray3);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray4);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertEquals(10, byteArray3.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-94), (byte)123, (byte)0, (byte)1, (byte) (-57)}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)111, (byte)110, (byte)115, (byte)65, (byte)65, (byte)99, (byte)99, (byte)61, (byte)46, (byte) (-36)}, byteArray3);
      
      byte[] byteArray5 = Base64.decodeBase64("org.apache.commons.codec.EncoderException");
      //  // Unstable assertion: assertNotNull(byteArray5);
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray1);
      //  // Unstable assertion: assertEquals(27, byteArray5.length);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)46;
      boolean boolean0 = Base64.isBase64((byte) (-36));
      assertFalse(boolean0);
      
      boolean boolean1 = Base64.isBase64((byte)27);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)46, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Base64 base64_0 = new Base64((byte) (-34));
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray1 = base64_0.decode((byte[]) null);
      assertNull(byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      //  // Unstable assertion: assertNotNull(bigInteger0);
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      
      float float0 = bigInteger0.floatValue();
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals(0.0F, float0, 0.01F);
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      //  // Unstable assertion: assertNotNull(byteArray0);
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals(0, byteArray0.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray0);
      
      Base64 base64_0 = new Base64(96, byteArray0, false);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(0, byteArray0.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray0);
      
      byte[] byteArray1 = new byte[2];
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      
      String string0 = Base64.encodeBase64String(byteArray1);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals("AAA=", string0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      
      int int0 = bigInteger0.intValueExact();
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals(0, int0);
      
      byteArray1[0] = (byte) (-49);
      BigInteger bigInteger1 = bigInteger0.abs();
      //  // Unstable assertion: assertNotNull(bigInteger1);
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger1.byteValue());
      //  // Unstable assertion: assertEquals((short)0, bigInteger1.shortValue());
      //  // Unstable assertion: assertSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertSame(bigInteger1, bigInteger0);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false, true);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertEquals(0, byteArray0.length);
      //  // Unstable assertion: assertEquals(0, byteArray2.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray2);
      
      BigInteger bigInteger2 = bigInteger0.clearBit(0);
      //  // Unstable assertion: assertNotNull(bigInteger2);
      //  // Unstable assertion: assertTrue(bigInteger2.equals((Object)bigInteger1));
      //  // Unstable assertion: assertTrue(bigInteger2.equals((Object)bigInteger0));
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger2.byteValue());
      //  // Unstable assertion: assertEquals((short)0, bigInteger2.shortValue());
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger2);
      //  // Unstable assertion: assertSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertNotSame(bigInteger2, bigInteger0);
      //  // Unstable assertion: assertNotSame(bigInteger2, bigInteger1);
      
      String string1 = base64_0.encodeToString(byteArray0);
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertTrue(bigInteger0.equals((Object)bigInteger2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals("", string1);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger2);
      //  // Unstable assertion: assertSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertEquals(0, byteArray0.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray0);
      
      byteArray1[1] = (byte)48;
      byte[] byteArray3 = base64_0.decode(byteArray1);
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertTrue(bigInteger0.equals((Object)bigInteger2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger2);
      //  // Unstable assertion: assertSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertEquals(0, byteArray0.length);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      //  // Unstable assertion: assertEquals(0, byteArray3.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-49), (byte)48}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray3);
      
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray1);
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      //  // Unstable assertion: assertEquals(6, byteArray4.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-49), (byte)48}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)122, (byte)122, (byte)65, (byte)61, (byte)46, (byte) (-36)}, byteArray4);
      
      byte[] byteArray5 = new byte[4];
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray2));
      
      byteArray5[0] = (byte)48;
      byteArray5[1] = (byte)48;
      byte[] byteArray6 = Base64.encodeBase64(byteArray1);
      //  // Unstable assertion: assertNotNull(byteArray6);
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertEquals(4, byteArray6.length);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)122, (byte)122, (byte)65, (byte)61}, byteArray6);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-49), (byte)48}, byteArray1);
      
      byte[] byteArray7 = Base64.encodeBase64(byteArray1, true, true);
      //  // Unstable assertion: assertNotNull(byteArray7);
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray7);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertEquals(5, byteArray7.length);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)122, (byte)122, (byte)65, (byte)46, (byte) (-36)}, byteArray7);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-49), (byte)48}, byteArray1);
      
      byteArray5[2] = (byte) (-49);
      byteArray5[3] = (byte) (-49);
      base64_0.decode(byteArray5, 0, 220);
      //  // Unstable assertion: assertTrue(bigInteger0.equals((Object)bigInteger2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray7));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray7));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray2));
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger2);
      //  // Unstable assertion: assertSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray7);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray7);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray2);
      //  // Unstable assertion: assertEquals(0, byteArray0.length);
      //  // Unstable assertion: assertEquals(4, byteArray5.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)48, (byte)48, (byte) (-49), (byte) (-49)}, byteArray5);
      
      String string2 = Base64.encodeBase64URLSafeString(byteArray2);
      //  // Unstable assertion: assertNotNull(string2);
      //  // Unstable assertion: assertTrue(bigInteger0.equals((Object)bigInteger2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray7));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray5));
      //  // Unstable assertion: assertTrue(string2.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray7));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray4));
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals("", string2);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger2);
      //  // Unstable assertion: assertSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray7);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray5);
      //  // Unstable assertion: assertSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray7);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray4);
      //  // Unstable assertion: assertEquals(0, byteArray0.length);
      //  // Unstable assertion: assertEquals(0, byteArray2.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray2);
      
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      float float0 = bigInteger0.floatValue();
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(0.0F, float0, 0.01F);
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertNotNull(byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Base64 base64_0 = new Base64(96, byteArray0, false);
      assertNotNull(base64_0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      String string0 = Base64.encodeBase64String(byteArray1);
      assertNotNull(string0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals("AAA=", string0);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      
      byteArray1[0] = (byte) (-49);
      BigInteger bigInteger1 = bigInteger0.abs();
      assertNotNull(bigInteger1);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false, true);
      assertNotNull(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertSame(bigInteger0, bigInteger1);
      assertSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      
      boolean boolean0 = Base64.isBase64(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertTrue(boolean0);
      assertSame(bigInteger0, bigInteger1);
      assertSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      
      Base64 base64_1 = new Base64(386, byteArray2);
      assertNotNull(base64_1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(base64_1.equals((Object)base64_0));
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_1.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      
      byte[] byteArray3 = base64_0.decode(byteArray2);
      assertNotNull(byteArray3);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertSame(bigInteger0, bigInteger1);
      assertSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertSame(byteArray0, byteArray3);
      assertNotSame(base64_0, base64_1);
      assertSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray1);
      assertSame(byteArray3, byteArray0);
      assertSame(byteArray3, byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray3.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertArrayEquals(new byte[] {}, byteArray3);
      
      BigInteger bigInteger2 = BigInteger.TEN;
      assertNotNull(bigInteger2);
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertEquals((byte)10, bigInteger2.byteValue());
      assertEquals((short)10, bigInteger2.shortValue());
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      
      BigInteger bigInteger3 = BigInteger.TEN;
      assertNotNull(bigInteger3);
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertEquals((short)10, bigInteger3.shortValue());
      assertEquals((byte)10, bigInteger3.byteValue());
      assertSame(bigInteger3, bigInteger2);
      assertNotSame(bigInteger3, bigInteger1);
      assertNotSame(bigInteger3, bigInteger0);
      
      BigInteger bigInteger4 = new BigInteger(byteArray1);
      assertNotNull(bigInteger4);
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(bigInteger4.equals((Object)bigInteger1));
      assertFalse(bigInteger4.equals((Object)bigInteger0));
      assertFalse(bigInteger4.equals((Object)bigInteger2));
      assertFalse(bigInteger4.equals((Object)bigInteger3));
      assertEquals((byte)0, bigInteger4.byteValue());
      assertEquals((short) (-12544), bigInteger4.shortValue());
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-49), (byte)0}, byteArray1);
      
      int int0 = bigInteger0.compareTo(bigInteger4);
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger4));
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(bigInteger4.equals((Object)bigInteger1));
      assertFalse(bigInteger4.equals((Object)bigInteger0));
      assertFalse(bigInteger4.equals((Object)bigInteger2));
      assertFalse(bigInteger4.equals((Object)bigInteger3));
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)0, bigInteger4.byteValue());
      assertEquals((short) (-12544), bigInteger4.shortValue());
      assertEquals(1, int0);
      assertNotSame(bigInteger0, bigInteger2);
      assertSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(bigInteger4, bigInteger1);
      assertNotSame(bigInteger4, bigInteger0);
      assertNotSame(bigInteger4, bigInteger2);
      assertNotSame(bigInteger4, bigInteger3);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-49), (byte)0}, byteArray1);
      
      boolean boolean1 = Base64.isArrayByteBase64(byteArray2);
      assertTrue(boolean1 == boolean0);
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger4));
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertTrue(boolean1);
      assertNotSame(bigInteger0, bigInteger2);
      assertSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger0, bigInteger3);
      assertSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertSame(byteArray0, byteArray3);
      assertSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertSame(byteArray2, byteArray3);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray2, false);
      assertNotNull(byteArray4);
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger4));
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotSame(bigInteger0, bigInteger2);
      assertSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(byteArray4, byteArray1);
      assertSame(byteArray4, byteArray0);
      assertSame(byteArray4, byteArray2);
      assertSame(byteArray4, byteArray3);
      assertSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertSame(byteArray0, byteArray3);
      assertSame(byteArray0, byteArray4);
      assertSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertSame(byteArray2, byteArray4);
      assertSame(byteArray2, byteArray3);
      assertEquals(0, byteArray4.length);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {}, byteArray4);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      
      boolean boolean2 = base64_0.hasData();
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger4));
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(base64_0.equals((Object)base64_1));
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertFalse(boolean2);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(bigInteger0, bigInteger2);
      assertSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger0, bigInteger3);
      assertSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertSame(byteArray0, byteArray3);
      assertSame(byteArray0, byteArray4);
      assertNotSame(base64_0, base64_1);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)0;
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = bigInteger0.clearBit((byte)1);
      assertNotNull(bigInteger1);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((byte)8, bigInteger1.byteValue());
      assertEquals((short)8, bigInteger1.shortValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      
      Base64 base64_0 = new Base64((byte)123);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray1 = base64_0.decode(byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-94), (byte)123, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      byte[] byteArray2 = new byte[2];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false, false);
      assertNotNull(byteArray3);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertEquals(2, byteArray2.length);
      assertEquals(4, byteArray3.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray2);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)61}, byteArray3);
      
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray1);
      assertNotNull(byteArray4);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray4, byteArray2);
      assertSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray3);
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray4.length);
      assertArrayEquals(new byte[] {(byte) (-94), (byte)123, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray4);
      
      byte[] byteArray5 = Base64.encodeBase64(byteArray1);
      assertNotNull(byteArray5);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray0));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray5);
      assertSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertSame(byteArray1, byteArray5);
      assertNotSame(byteArray1, byteArray3);
      assertSame(byteArray5, byteArray1);
      assertNotSame(byteArray5, byteArray0);
      assertNotSame(byteArray5, byteArray2);
      assertSame(byteArray5, byteArray4);
      assertNotSame(byteArray5, byteArray3);
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray5.length);
      assertArrayEquals(new byte[] {(byte) (-94), (byte)123, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray5);
      
      byte[] byteArray6 = Base64.encodeBase64(byteArray1, true, true);
      assertNotNull(byteArray6);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray6.equals((Object)byteArray2));
      assertFalse(byteArray6.equals((Object)byteArray0));
      assertFalse(byteArray6.equals((Object)byteArray3));
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray6);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray5);
      assertSame(byteArray1, byteArray4);
      assertSame(byteArray1, byteArray6);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray3);
      assertSame(byteArray1, byteArray5);
      assertSame(byteArray6, byteArray1);
      assertNotSame(byteArray6, byteArray2);
      assertNotSame(byteArray6, byteArray0);
      assertSame(byteArray6, byteArray4);
      assertNotSame(byteArray6, byteArray3);
      assertSame(byteArray6, byteArray5);
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray6.length);
      assertArrayEquals(new byte[] {(byte) (-94), (byte)123, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray6);
      
      base64_0.decode(byteArray1, 0, 0);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray6));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray6);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray5);
      assertSame(byteArray1, byteArray4);
      assertSame(byteArray1, byteArray6);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray3);
      assertSame(byteArray1, byteArray5);
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-94), (byte)123, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray4);
      assertNotNull(string0);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray6));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(base64_0.isUrlSafe());
      assertEquals("", string0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray6);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray5);
      assertSame(byteArray1, byteArray4);
      assertSame(byteArray1, byteArray6);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray3);
      assertSame(byteArray1, byteArray5);
      assertNotSame(byteArray4, byteArray2);
      assertSame(byteArray4, byteArray6);
      assertSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray3);
      assertSame(byteArray4, byteArray5);
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray4.length);
      assertArrayEquals(new byte[] {(byte) (-94), (byte)123, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray4);
      
      byte[] byteArray7 = new byte[0];
      assertFalse(byteArray7.equals((Object)byteArray0));
      assertFalse(byteArray7.equals((Object)byteArray2));
      assertFalse(byteArray7.equals((Object)byteArray5));
      assertFalse(byteArray7.equals((Object)byteArray6));
      assertFalse(byteArray7.equals((Object)byteArray4));
      assertFalse(byteArray7.equals((Object)byteArray1));
      assertFalse(byteArray7.equals((Object)byteArray3));
      
      byte[] byteArray8 = base64_0.encode(byteArray7);
      assertNotNull(byteArray8);
      assertFalse(byteArray7.equals((Object)byteArray0));
      assertFalse(byteArray7.equals((Object)byteArray2));
      assertFalse(byteArray7.equals((Object)byteArray5));
      assertFalse(byteArray7.equals((Object)byteArray6));
      assertFalse(byteArray7.equals((Object)byteArray4));
      assertFalse(byteArray7.equals((Object)byteArray1));
      assertFalse(byteArray7.equals((Object)byteArray3));
      assertFalse(byteArray8.equals((Object)byteArray1));
      assertFalse(byteArray8.equals((Object)byteArray5));
      assertFalse(byteArray8.equals((Object)byteArray6));
      assertFalse(byteArray8.equals((Object)byteArray3));
      assertFalse(byteArray8.equals((Object)byteArray4));
      assertFalse(byteArray8.equals((Object)byteArray2));
      assertFalse(byteArray8.equals((Object)byteArray0));
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray7, byteArray0);
      assertNotSame(byteArray7, byteArray2);
      assertNotSame(byteArray7, byteArray5);
      assertNotSame(byteArray7, byteArray6);
      assertSame(byteArray7, byteArray8);
      assertNotSame(byteArray7, byteArray4);
      assertNotSame(byteArray7, byteArray1);
      assertNotSame(byteArray7, byteArray3);
      assertNotSame(byteArray8, byteArray1);
      assertNotSame(byteArray8, byteArray5);
      assertNotSame(byteArray8, byteArray6);
      assertNotSame(byteArray8, byteArray3);
      assertSame(byteArray8, byteArray7);
      assertNotSame(byteArray8, byteArray4);
      assertNotSame(byteArray8, byteArray2);
      assertNotSame(byteArray8, byteArray0);
      assertEquals(0, byteArray7.length);
      assertEquals(0, byteArray8.length);
      assertArrayEquals(new byte[] {}, byteArray7);
      assertArrayEquals(new byte[] {}, byteArray8);
      
      byte[] byteArray9 = Base64.encodeBase64(byteArray1, false);
      assertNotNull(byteArray9);
      assertFalse(byteArray0.equals((Object)byteArray7));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray8));
      assertFalse(byteArray0.equals((Object)byteArray6));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray9.equals((Object)byteArray3));
      assertFalse(byteArray9.equals((Object)byteArray8));
      assertFalse(byteArray9.equals((Object)byteArray7));
      assertFalse(byteArray9.equals((Object)byteArray0));
      assertFalse(byteArray9.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray7));
      assertFalse(byteArray1.equals((Object)byteArray8));
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray7);
      assertNotSame(byteArray0, byteArray9);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray8);
      assertNotSame(byteArray0, byteArray6);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray5);
      assertSame(byteArray9, byteArray4);
      assertNotSame(byteArray9, byteArray3);
      assertNotSame(byteArray9, byteArray8);
      assertSame(byteArray9, byteArray5);
      assertSame(byteArray9, byteArray6);
      assertSame(byteArray9, byteArray1);
      assertNotSame(byteArray9, byteArray7);
      assertNotSame(byteArray9, byteArray0);
      assertNotSame(byteArray9, byteArray2);
      assertSame(byteArray1, byteArray9);
      assertSame(byteArray1, byteArray4);
      assertSame(byteArray1, byteArray6);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray3);
      assertSame(byteArray1, byteArray5);
      assertNotSame(byteArray1, byteArray7);
      assertNotSame(byteArray1, byteArray8);
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray9.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-94), (byte)123, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray9);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      boolean boolean0 = Base64.isBase64(byteArray7);
      assertFalse(byteArray7.equals((Object)byteArray9));
      assertFalse(byteArray7.equals((Object)byteArray0));
      assertFalse(byteArray7.equals((Object)byteArray2));
      assertFalse(byteArray7.equals((Object)byteArray5));
      assertFalse(byteArray7.equals((Object)byteArray6));
      assertFalse(byteArray7.equals((Object)byteArray4));
      assertFalse(byteArray7.equals((Object)byteArray1));
      assertFalse(byteArray7.equals((Object)byteArray3));
      assertTrue(boolean0);
      assertNotSame(byteArray7, byteArray9);
      assertNotSame(byteArray7, byteArray0);
      assertNotSame(byteArray7, byteArray2);
      assertNotSame(byteArray7, byteArray5);
      assertNotSame(byteArray7, byteArray6);
      assertSame(byteArray7, byteArray8);
      assertNotSame(byteArray7, byteArray4);
      assertNotSame(byteArray7, byteArray1);
      assertNotSame(byteArray7, byteArray3);
      assertEquals(0, byteArray7.length);
      assertArrayEquals(new byte[] {}, byteArray7);
      
      byte[] byteArray10 = Base64.decodeBase64("org.apache.commons.codec.EncoderException");
      assertNotNull(byteArray10);
      assertFalse(byteArray10.equals((Object)byteArray5));
      assertFalse(byteArray10.equals((Object)byteArray6));
      assertFalse(byteArray10.equals((Object)byteArray1));
      assertFalse(byteArray10.equals((Object)byteArray4));
      assertFalse(byteArray10.equals((Object)byteArray9));
      assertFalse(byteArray10.equals((Object)byteArray3));
      assertFalse(byteArray10.equals((Object)byteArray2));
      assertFalse(byteArray10.equals((Object)byteArray8));
      assertFalse(byteArray10.equals((Object)byteArray7));
      assertFalse(byteArray10.equals((Object)byteArray0));
      assertNotSame(byteArray10, byteArray5);
      assertNotSame(byteArray10, byteArray6);
      assertNotSame(byteArray10, byteArray1);
      assertNotSame(byteArray10, byteArray4);
      assertNotSame(byteArray10, byteArray9);
      assertNotSame(byteArray10, byteArray3);
      assertNotSame(byteArray10, byteArray2);
      assertNotSame(byteArray10, byteArray8);
      assertNotSame(byteArray10, byteArray7);
      assertNotSame(byteArray10, byteArray0);
      assertEquals(27, byteArray10.length);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte) (-83);
      byteArray0[6] = (byte)26;
      byteArray0[7] = (byte) (-47);
      Base64 base64_0 = new Base64((byte) (-87), byteArray0);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-101), (byte)46, (byte)0, (byte)12, (byte) (-87), (byte) (-83), (byte)26, (byte) (-47)}, byteArray0);
      
      base64_0.encode(byteArray0, 0, (int) (byte) (-87));
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-101), (byte)46, (byte)0, (byte)12, (byte) (-87), (byte) (-83), (byte)26, (byte) (-47)}, byteArray0);
      
      base64_0.decode(byteArray0, (-712), (int) (byte)12);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-101), (byte)46, (byte)0, (byte)12, (byte) (-87), (byte) (-83), (byte)26, (byte) (-47)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)73;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte)50, (byte)97, (byte)73, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-39), (byte) (-94)}, byteArray1);
      
      Base64 base64_0 = new Base64();
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      Object object0 = base64_0.decode((Object) "");
      assertNotNull(object0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      assertNotNull(bigInteger0);
      assertFalse(byteArray0.equals((Object)object0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)object0));
      assertEquals((byte) (-94), bigInteger0.byteValue());
      assertEquals((short) (-9822), bigInteger0.shortValue());
      assertEquals(7, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte)50, (byte)97, (byte)73, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-39), (byte) (-94)}, byteArray1);
      
      BigInteger bigInteger1 = BigInteger.ONE;
      assertNotNull(bigInteger1);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertNotSame(bigInteger1, bigInteger0);
      
      BigInteger bigInteger2 = bigInteger0.mod(bigInteger1);
      assertNotNull(bigInteger2);
      assertFalse(byteArray0.equals((Object)object0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)object0));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertEquals((byte) (-94), bigInteger0.byteValue());
      assertEquals((short) (-9822), bigInteger0.shortValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((byte)0, bigInteger2.byteValue());
      assertEquals((short)0, bigInteger2.shortValue());
      assertNotSame(byteArray0, object0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, object0);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger0);
      assertEquals(7, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte)50, (byte)97, (byte)73, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-39), (byte) (-94)}, byteArray1);
      
      BigInteger bigInteger3 = BigInteger.TEN;
      assertNotNull(bigInteger3);
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertEquals((short)10, bigInteger3.shortValue());
      assertEquals((byte)10, bigInteger3.byteValue());
      assertNotSame(bigInteger3, bigInteger1);
      assertNotSame(bigInteger3, bigInteger2);
      assertNotSame(bigInteger3, bigInteger0);
      
      int int0 = bigInteger3.getLowestSetBit();
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertEquals((short)10, bigInteger3.shortValue());
      assertEquals((byte)10, bigInteger3.byteValue());
      assertEquals(1, int0);
      assertNotSame(bigInteger3, bigInteger1);
      assertNotSame(bigInteger3, bigInteger2);
      assertNotSame(bigInteger3, bigInteger0);
      
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte)98;
      byteArray0[5] = (byte) (-75);
      byteArray0[6] = (byte) (-76);
      byteArray0[7] = (byte)0;
      boolean boolean0 = Base64.isBase64(byteArray0);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertEquals(8, byteArray0.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0, (byte) (-11), (byte)98, (byte) (-75), (byte) (-76), (byte)0}, byteArray0);
      
      Base64 base64_0 = new Base64(true);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      String string0 = base64_0.encodeToString(byteArray0);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals("AQAA9WK1tAA.\uFFFD", string0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(8, byteArray0.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0, (byte) (-11), (byte)98, (byte) (-75), (byte) (-76), (byte)0}, byteArray0);
      
      base64_0.encode(byteArray0, (-995), (int) (byte)0);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(8, byteArray0.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0, (byte) (-11), (byte)98, (byte) (-75), (byte) (-76), (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte) (-81);
      byteArray0[6] = (byte)108;
      byteArray0[7] = (byte)66;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 1, (int) (byte)66);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-57);
      boolean boolean0 = Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64((-1280), byteArray0);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.compareTo(bigInteger1);
      boolean boolean1 = Base64.isArrayByteBase64(byteArray1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      assertEquals(0, byteArray2.length);
      
      boolean boolean2 = base64_0.hasData();
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte) (-81);
      byteArray0[6] = (byte)108;
      byteArray0[7] = (byte)66;
      base64_0.decode(byteArray0, 0, 0);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-108)}, byteArray1);
      
      byte[] byteArray2 = Base64.decodeBase64("lineSeperator must not contain base64 characters: [");
      assertEquals(32, byteArray2.length);
      
      byte[] byteArray3 = base64_0.decode("l");
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray3);
      byte[] byteArray5 = new byte[3];
      byteArray5[0] = (byte) (-1);
      byteArray5[1] = (byte)0;
      byteArray5[2] = (byte)8;
      boolean boolean0 = Base64.isArrayByteBase64(byteArray5);
      assertFalse(boolean0);
      
      Base64.decodeBase64(byteArray5);
      Base64.discardWhitespace(byteArray3);
      assertSame(byteArray3, byteArray4);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Base64.isBase64("org.apache.commons.codec.DecoderException");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)34;
      byteArray1[1] = (byte)68;
      byteArray1[2] = (byte) (-68);
      byte[] byteArray2 = Base64.decodeBase64("f2G0L");
      Base64.encodeBase64Chunked(byteArray2);
      boolean boolean0 = Base64.isArrayByteBase64(byteArray2);
      //  // Unstable assertion: assertFalse(boolean0);
      
      Base64.decodeBase64(byteArray2);
      Base64.encodeBase64(byteArray0, true);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, false);
      //  // Unstable assertion: assertEquals(6, byteArray3.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)102, (byte)50, (byte)71, (byte)48, (byte)46, (byte) (-36)}, byteArray3);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)36;
      Base64 base64_0 = new Base64(42);
      Base64.decodeBase64(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 473, (int) (byte)53);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 473
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)36;
      byte byte0 = (byte) (-11);
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte)28;
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.decodeBase64((byte[]) null);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-66);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)119;
      byteArray1[4] = (byte)12;
      byteArray1[5] = (byte)0;
      byte byte0 = (byte) (-80);
      byteArray1[6] = (byte) (-80);
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      bigInteger0.isProbablePrime((byte) (-80));
      bigInteger0.shiftLeft((-1640));
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      bigInteger0.floatValue();
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [vgB3DACw]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Base64 base64_0 = new Base64((-509));
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(10, byteArray1.length);
      
      base64_0.decode("");
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte) (-63);
      base64_0.encode(byteArray0);
      Base64.isBase64("");
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray0);
      int int0 = base64_0.avail();
      assertEquals(0, int0);
      
      Base64.isBase64((byte) (-116));
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      String string0 = Base64.encodeBase64String(byteArray2);
      assertEquals("", string0);
      
      boolean boolean0 = base64_0.isUrlSafe();
      assertFalse(boolean0);
      
      byte[] byteArray3 = new byte[6];
      byteArray3[0] = (byte) (-56);
      byteArray3[1] = (byte)0;
      byteArray3[2] = (byte) (-56);
      byteArray3[3] = (byte) (-116);
      byteArray3[4] = (byte) (-56);
      byteArray3[5] = (byte) (-63);
      Base64.decodeBase64(byteArray3);
      byte[] byteArray4 = Base64.encodeBase64(byteArray3);
      assertEquals(8, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Base64.isBase64("org.apache.commons.codec.DecoderException");
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-609), byteArray0, false);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)34;
      byteArray1[1] = (byte)68;
      byteArray1[2] = (byte) (-68);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)26;
      byteArray1[6] = (byte) (-59);
      Base64.decodeBase64(byteArray1);
      base64_0.decode((Object) "org.apache.commons.codec.DecoderException");
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      byte[] byteArray2 = Base64.decodeBase64("");
      Base64 base64_0 = new Base64(0, byteArray2);
      Object object0 = base64_0.decode((Object) "");
      byte[] byteArray3 = new byte[8];
      Base64.encodeBase64(byteArray2, true, true, (-2159));
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte)22;
      byteArray3[2] = (byte)88;
      byteArray3[3] = (byte)30;
      byteArray3[4] = (byte)39;
      Base64.encodeBase64((byte[]) null);
      byteArray3[5] = (byte) (-107);
      byteArray3[6] = (byte)0;
      byteArray3[7] = (byte) (-126);
      Base64.encodeBase64(byteArray3);
      Object object1 = base64_0.decode(object0);
      base64_0.encode(object1);
      Base64.encodeBase64(byteArray1);
      Base64.isArrayByteBase64(byteArray1);
      String string0 = Base64.encodeBase64URLSafeString(byteArray2);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-57);
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64((-1280), byteArray0);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.compareTo(bigInteger1);
      bigInteger0.clearBit(0);
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.decodeBase64((String) null);
      Base64.encodeBase64(byteArray1);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-48);
      byteArray0[6] = (byte)57;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      String string0 = Base64.encodeBase64URLSafeString(byteArray1);
      assertEquals("QU1Ja193RFFPUQ", string0);
      
      Base64.encodeBase64(byteArray0, true, true, 19);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray2 = base64_0.encode(byteArray0);
      assertEquals(14, byteArray2.length);
      
      base64_0.decode((Object) "QU1Ja193RFFPUQ");
      boolean boolean0 = Base64.isBase64(byteArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)0;
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.readResults(byteArray0, (-2220), (-883));
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (-3236), (int) (byte)52);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3236
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = null;
      int int0 = 1117;
      base64_0.encodeToString((byte[]) null);
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, (-218), 1117);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64((byte) (-1), byteArray1, false);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      Base64.decodeBase64(byteArray0);
      String string0 = Base64.encodeBase64URLSafeString(byteArray2);
      assertEquals("LzNjQQ", string0);
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, false, false, 1124);
      byte[] byteArray4 = Base64.encodeBase64(byteArray0, true, true);
      assertEquals(6, byteArray4.length);
      
      base64_0.readResults(byteArray1, 0, (byte)0);
      Base64.encodeBase64(byteArray3, true, false);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray5 = Base64.encodeBase64(byteArray0, false, false, 1124);
      assertArrayEquals(new byte[] {(byte)47, (byte)51, (byte)99, (byte)65}, byteArray5);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)46;
      byte byte0 = (byte) (-36);
      byteArray0[1] = (byte) (-36);
      byte byte1 = (byte) (-106);
      byteArray0[2] = (byte) (-106);
      byte byte2 = (byte)77;
      byteArray0[3] = (byte)77;
      byte byte3 = (byte) (-34);
      byteArray0[4] = (byte) (-34);
      Base64.discardWhitespace(byteArray0);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(true);
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte byte0 = (byte)47;
      Base64.isBase64((byte)47);
      String string0 = null;
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte) (-81);
      byteArray0[6] = (byte)108;
      byteArray0[7] = (byte)66;
      base64_0.decode(byteArray0, 0, 0);
      byte[] byteArray1 = Base64.decodeBase64("lineSeperator must not contain base64 characters: [");
      assertEquals(32, byteArray1.length);
      
      byte[] byteArray2 = base64_0.decode("l");
      Base64.encodeBase64Chunked(byteArray2);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray3 = new byte[3];
      byteArray3[0] = (byte) (-1);
      byteArray3[1] = (byte)0;
      byteArray3[2] = (byte)8;
      boolean boolean0 = Base64.isArrayByteBase64(byteArray3);
      assertFalse(boolean0);
      
      byte[] byteArray4 = Base64.decodeBase64(byteArray3);
      assertEquals(0, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      Base64.encodeBase64(byteArray2);
      Base64 base64_0 = new Base64((byte)0, byteArray0);
      base64_0.decode(byteArray2);
      Base64.decodeBase64((String) null);
      byte[] byteArray3 = Base64.decodeBase64((String) null);
      assertNull(byteArray3);
      
      byte[] byteArray4 = base64_0.encode(byteArray1);
      Base64.encodeBase64((byte[]) null, false, false, (int) (byte)0);
      String string0 = Base64.encodeBase64String((byte[]) null);
      assertNull(string0);
      
      byte[] byteArray5 = base64_0.decode(byteArray2);
      Base64.isBase64((byte)0);
      BigInteger bigInteger0 = new BigInteger(byteArray5);
      bigInteger0.not();
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray6 = Base64.encodeBase64(byteArray4);
      assertArrayEquals(new byte[] {(byte)85, (byte)86, (byte)86, (byte)70, (byte)80, (byte)81, (byte)61, (byte)61}, byteArray6);
      
      byte[] byteArray7 = Base64.toIntegerBytes(bigInteger0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65}, byteArray5);
      assertEquals(2, byteArray7.length);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Base64 base64_0 = new Base64((-1882));
      boolean boolean0 = base64_0.isUrlSafe();
      assertFalse(boolean0);
      
      Base64.decodeBase64("}Mi;\"2!sJiIRt");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte) (-126);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertEquals(10, byteArray1.length);
      
      byteArray0[5] = (byte)0;
      base64_0.readResults(byteArray0, (byte)50, (byte)50);
      byteArray0[6] = (byte)113;
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false);
      assertEquals(12, byteArray2.length);
      
      base64_0.decode((Object) "}Mi;\"2!sJiIRt");
      byte[] byteArray3 = Base64.decodeBase64("}Mi;\"2!sJiIRt");
      assertArrayEquals(new byte[] {(byte)50, (byte)45, (byte) (-84), (byte)38, (byte)34, (byte)17}, byteArray3);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray4 = Base64.encodeInteger(bigInteger0);
      assertEquals(4, byteArray4.length);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray4);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Base64 base64_0 = new Base64((-987), (byte[]) null, false);
      byte[] byteArray0 = new byte[0];
      Base64.decodeInteger(byteArray0);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte) (-95);
      byteArray0[6] = (byte)108;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      Base64.decodeInteger(byteArray0);
      Base64.decodeBase64("7");
      Base64 base64_0 = new Base64(false);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte)18;
      byteArray0[6] = (byte) (-89);
      byteArray0[7] = (byte) (-40);
      byteArray0[8] = (byte)46;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      assertEquals(14, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Base64 base64_0 = new Base64((-1));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)20;
      base64_0.decode(byteArray0, (int) (byte)20, (int) (byte) (-47));
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64.decodeBase64((byte[]) null);
      base64_0.encodeToString((byte[]) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        mockRandom0.ints((-1487L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size must be non-negative
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Base64 base64_0 = new Base64(1233);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)4;
      base64_0.decode(byteArray0, 39, (int) (byte)0);
      base64_0.decode("");
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-119);
      byteArray1[1] = (byte)15;
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.intValue();
      bigInteger0.longValueExact();
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray2);
      
      Base64.encodeBase64(byteArray1);
      Base64.isBase64("");
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)22;
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, true, true);
      base64_0.decode("org.apache.commons.codec.binary.Base64");
      byte[] byteArray4 = base64_0.decode(byteArray3);
      assertArrayEquals(new byte[] {(byte) (-119), (byte)15, (byte)0, (byte)22}, byteArray4);
      assertEquals(8, byteArray3.length);
      assertEquals(4, byteArray4.length);
      
      base64_0.encode(byteArray0);
      byte[] byteArray5 = Base64.encodeInteger(bigInteger0);
      boolean boolean0 = Base64.isBase64(byteArray5);
      assertTrue(boolean0);
      
      base64_0.decode(byteArray0, 1233, 39);
      byte[] byteArray6 = Base64.encodeInteger(bigInteger0);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray6);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte)77;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertArrayEquals(new byte[] {(byte)81, (byte)85, (byte)106, (byte)68, (byte)117, (byte)107, (byte)48, (byte)61, (byte)13, (byte)10}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte byte0 = (byte) (-17);
      Base64.isBase64((byte) (-17));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte) (-17);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, true, (int) (byte) (-17));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of -17
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)28;
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-37);
      byte byte1 = (byte)25;
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte)113;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-2979), byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u001C\u0000\uFFFD\u0019q]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte) (-83);
      byteArray0[6] = (byte)26;
      byteArray0[7] = (byte) (-47);
      Base64 base64_0 = new Base64(0, byteArray0, true);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)26;
      byteArray1[1] = (byte)46;
      Base64.encodeBase64(byteArray1, true, true);
      boolean boolean0 = base64_0.isUrlSafe();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.floatValue();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(96, byteArray0, false);
      byte[] byteArray1 = new byte[2];
      Base64.encodeBase64String(byteArray1);
      byteArray1[0] = (byte) (-49);
      bigInteger0.abs();
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false, true);
      bigInteger0.clearBit(0);
      byteArray1[1] = (byte)48;
      base64_0.decode(byteArray1);
      Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray3 = new byte[4];
      byteArray3[0] = (byte)48;
      byteArray3[1] = (byte)48;
      Base64.encodeBase64(byteArray1);
      Base64.encodeBase64(byteArray1, true, true);
      byteArray3[2] = (byte) (-49);
      byteArray3[3] = (byte) (-49);
      base64_0.decode(byteArray3, 0, 220);
      Base64.encodeBase64URLSafeString(byteArray2);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)82;
      byte byte0 = (byte)74;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)1;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(122, byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [<\uFFFDRJi\u0000\u0001]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-66);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger.valueOf(160L);
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray3 = base64_0.decode(byteArray1);
      base64_0.decode(byteArray0);
      Base64.decodeBase64(byteArray2);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray3, true, false, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      try { 
        base64_0.encode((Object) "org.apache.commons.codec.DecoderException");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte)26;
      byteArray0[5] = (byte)26;
      byteArray0[6] = (byte)0;
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64String(byteArray0);
      String string0 = "]";
      Base64.decodeBase64("]");
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0001\u0000\u0000B\u001A\u001A\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = "org.apache.commons.codec.binary.Base64";
      byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.binary.Base64");
      Base64 base64_0 = new Base64();
      int int0 = (-2206);
      Base64.decodeBase64("org.apache.commons.codec.binary.Base64");
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        bigInteger0.shortValueExact();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger out of short range
         //
         verifyException("java.math.BigInteger", e);
      }
  }
}
