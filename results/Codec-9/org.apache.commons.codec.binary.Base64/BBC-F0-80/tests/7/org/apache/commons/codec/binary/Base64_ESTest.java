/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:06:00 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(2572);
      String string0 = bigInteger1.toString(4211);
      Base64.encodeInteger(bigInteger1);
      BigInteger bigInteger2 = BigInteger.TEN;
      Base64 base64_0 = new Base64(2361);
      String string1 = "";
      // Undeclared exception!
      base64_0.decode((Object) string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(2368);
      String string0 = bigInteger1.toString(2368);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray1, 2368, 92);
      Base64.isBase64(string0);
      Base64.decodeInteger(byteArray1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(2326);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      bigInteger0.xor(bigInteger1);
      int int0 = Base64.MIME_CHUNK_SIZE;
      Base64 base64_0 = new Base64(2326);
      base64_0.encode(byteArray1, 3, 2326);
      base64_0.encode(byteArray1, 76, 1278);
      base64_0.readResults(byteArray1, 76, 115);
      // Undeclared exception!
      base64_0.encode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(2361);
      bigInteger1.toString(2361);
      bigInteger1.compareTo(bigInteger0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(2361);
      base64_0.decode(",g;cK6b");
      // Undeclared exception!
      Base64.encodeBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(2361);
      bigInteger1.toString(2361);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      BigInteger bigInteger2 = BigInteger.TEN;
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray1, 2361, 92);
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)107;
      byteArray2[1] = (byte)64;
      base64_0.encode(byteArray2, 2549, (-867));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)0;
      Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64(byteArray0, true);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)9;
      byteArray2[1] = (byte)9;
      Base64.encodeBase64String(byteArray2);
      Base64.discardWhitespace(byteArray2);
      byte[] byteArray3 = new byte[0];
      Base64.decodeBase64("CQk=");
      Base64 base64_0 = new Base64();
      Base64.isArrayByteBase64(byteArray2);
      base64_0.isUrlSafe();
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, (int) (byte)9, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(2361);
      bigInteger1.toString(2361);
      bigInteger0.pow(2854);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64();
      base64_0.encodeToString(byteArray1);
      // Undeclared exception!
      base64_0.encodeToString(byteArray1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(1572);
      BigInteger bigInteger2 = bigInteger0.negate();
      bigInteger1.max(bigInteger2);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(736);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      Base64 base64_1 = new Base64(956);
      Base64.encodeBase64URLSafe(byteArray1);
      Base64.toIntegerBytes(bigInteger1);
      // Undeclared exception!
      base64_0.encode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(2326);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      bigInteger0.signum();
      Base64 base64_0 = new Base64(2326);
      base64_0.encode(byteArray1, 3, 2326);
      // Undeclared exception!
      Base64.encodeBase64Chunked(byteArray1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      int int0 = 2361;
      BigInteger bigInteger1 = bigInteger0.pow(2361);
      String string0 = bigInteger1.toString(2361);
      Base64.encodeInteger(bigInteger1);
      BigInteger bigInteger2 = BigInteger.TEN;
      bigInteger2.clearBit(2361);
      Base64 base64_0 = new Base64(2361);
      base64_0.decode(string0);
      // Undeclared exception!
      Base64.decodeBase64(string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      int int0 = 2361;
      BigInteger bigInteger1 = bigInteger0.pow(2361);
      String string0 = bigInteger1.toString(2361);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      BigInteger bigInteger2 = BigInteger.TEN;
      Base64 base64_0 = new Base64(2361);
      Base64.decodeBase64(string0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      Base64.isBase64(byteArray2);
      int int1 = 2325;
      base64_0.encode(byteArray1, int0, int1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.pow(2326);
      BigInteger bigInteger1 = bigInteger0.pow(4509);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      bigInteger1.signum();
      Base64 base64_0 = new Base64(4524);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (-1), 4509);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(2326);
      String string0 = bigInteger1.toString(2326);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      bigInteger0.signum();
      Base64 base64_0 = new Base64(2326);
      bigInteger0.bitLength();
      Base64 base64_1 = new Base64(4551);
      bigInteger0.mod(bigInteger1);
      Base64.decodeBase64(string0);
      // Undeclared exception!
      Base64.decodeInteger(byteArray1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(2326);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      bigInteger0.signum();
      Base64 base64_0 = new Base64(2326);
      base64_0.encode(byteArray1, 3, 2326);
      base64_0.encode(byteArray1, (-1), (-853));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(1572);
      BigInteger bigInteger2 = bigInteger0.negate();
      BigInteger bigInteger3 = bigInteger1.max(bigInteger2);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(false);
      base64_0.decode(byteArray1, 1572, 1572);
      Base64 base64_1 = new Base64(736);
      byte[] byteArray2 = base64_1.encode(byteArray1);
      Base64.decodeInteger(byteArray0);
      Base64 base64_2 = new Base64(64, byteArray0, true);
      Base64 base64_3 = new Base64(true);
      base64_3.decode(byteArray2, 963, 963);
      Base64.encodeInteger(bigInteger3);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(1572);
      BigInteger bigInteger2 = bigInteger0.negate();
      BigInteger bigInteger3 = bigInteger1.max(bigInteger2);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(736);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      Base64.decodeInteger(byteArray0);
      Base64 base64_1 = new Base64(64, byteArray0, true);
      Base64 base64_2 = new Base64(true);
      base64_2.decode(byteArray2, 963, 963);
      byte[] byteArray3 = Base64.encodeInteger(bigInteger3);
      Base64.toIntegerBytes(bigInteger1);
      // Undeclared exception!
      Base64.encodeBase64(byteArray3, true, true, 5140);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-75);
      byteArray1[1] = (byte)76;
      byteArray1[2] = (byte)20;
      byteArray1[3] = (byte)36;
      byteArray1[4] = (byte)123;
      byteArray1[5] = (byte) (-60);
      byteArray1[6] = (byte)37;
      byteArray1[7] = (byte) (-1);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, 0, 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(8184);
      bigInteger1.max(bigInteger0);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(1572);
      BigInteger bigInteger2 = bigInteger0.negate();
      bigInteger1.max(bigInteger2);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(736);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      Base64 base64_1 = new Base64(956);
      Base64.toIntegerBytes(bigInteger1);
      // Undeclared exception!
      base64_0.encode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(1572);
      bigInteger0.negate();
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(755);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray1);
      byte[] byteArray4 = new byte[1];
      Base64.decodeBase64(byteArray3);
      byte byte0 = (byte)20;
      byteArray4[0] = byte0;
      Base64.decodeInteger(byteArray4);
      boolean boolean0 = true;
      int int0 = 115;
      Base64 base64_1 = new Base64(int0, byteArray4, boolean0);
      // Undeclared exception!
      base64_0.encode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(1596);
      bigInteger1.max(bigInteger0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      bigInteger0.isProbablePrime(1596);
      Base64 base64_0 = new Base64(748, byteArray0, true);
      bigInteger1.pow(64);
      base64_0.encode(byteArray1, 1596, 748);
      Random.setNextRandom((-206));
      Base64.isArrayByteBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(4944);
      BigInteger bigInteger2 = BigInteger.TEN;
      bigInteger1.max(bigInteger2);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      // Undeclared exception!
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(1596);
      BigInteger bigInteger2 = BigInteger.TEN;
      bigInteger1.max(bigInteger2);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(736, byteArray0, true);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      Base64.decodeInteger(byteArray0);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray2, true, true, 1596);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6714) than the specified maxium size of 1596
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(1572);
      BigInteger bigInteger2 = bigInteger0.negate();
      bigInteger1.max(bigInteger2);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(736, byteArray0, false);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      Base64.decodeInteger(byteArray0);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray2, true, true, 1572);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6622) than the specified maxium size of 1572
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)102;
      byteArray1[1] = (byte)62;
      byteArray1[2] = (byte)1;
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false, true, (int) (byte)62);
      assertEquals(7, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65}, byteArray2);
      
      byteArray1[3] = (byte) (-105);
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte) (-1);
      byteArray1[6] = (byte)36;
      byteArray1[7] = (byte) (-1);
      byteArray1[8] = (byte) (-118);
      base64_0.encode(byteArray1, (int) (byte)0, 3);
      base64_0.encode(byteArray0, (-5092), (-5092));
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.pow(1572);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      bigInteger0.intValue();
      Random.setNextRandom(0);
      Base64 base64_0 = new Base64(1572, byteArray0, true);
      Base64.encodeInteger(bigInteger1);
      byte[] byteArray1 = new byte[0];
      Base64.encodeBase64String(byteArray1);
      base64_0.decode(byteArray0);
      byte[] byteArray2 = base64_0.decode(byteArray0);
      base64_0.avail();
      base64_0.encode(byteArray2, (-1), 74);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(45);
      bigInteger0.bitCount();
      base64_0.decode(byteArray0, 0, 2258);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray0);
      
      int int0 = base64_0.avail();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(0);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.clearBit(0);
      bigInteger0.bitCount();
      base64_0.decode(byteArray0, 1, 1795);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertArrayEquals(new byte[] {(byte)81, (byte)86, (byte)69, (byte)57, (byte)80, (byte)81, (byte)61, (byte)61}, byteArray1);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base64.isBase64((byte) (-67));
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64((byte) (-67));
      BigInteger bigInteger1 = BigInteger.ZERO;
      base64_0.decode(byteArray1, 0, 98);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray1);
      
      int int0 = base64_0.readResults(byteArray0, 6, 98);
      assertEquals(1, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)1, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = 795;
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(795, byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)16;
      byteArray1[1] = (byte)6;
      byteArray1[2] = (byte) (-86);
      byteArray1[3] = (byte)11;
      byteArray1[4] = (byte)76;
      byteArray1[5] = (byte)13;
      byteArray1[6] = (byte)91;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64((byte) (-67));
      BigInteger bigInteger1 = BigInteger.ZERO;
      base64_0.decode(byteArray1, 0, 98);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray1);
      assertEquals(4, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Random.setNextRandom(59);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)114;
      byte byte0 = (byte)93;
      byteArray0[2] = (byte)93;
      byte byte1 = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)10;
      byte byte2 = (byte)1;
      byteArray0[5] = (byte)1;
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, (int) (byte)10);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(57, byteArray1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [I3JdAQoB\uFFFD\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0, 1717986918, (-5079));
      base64_0.hasData();
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Base64 base64_0 = new Base64();
      boolean boolean0 = base64_0.hasData();
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte) (-33);
      byteArray0[7] = (byte)71;
      byteArray0[8] = (byte) (-87);
      boolean boolean1 = Base64.isBase64(byteArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64.isBase64((byte)126);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      assertEquals(0, byteArray2.length);
      assertSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte) (-51);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.subtract(bigInteger1);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(3, byteArray1.length);
      
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)9;
      byteArray2[1] = (byte) (-51);
      byteArray2[2] = (byte) (-51);
      byteArray2[3] = (byte) (-51);
      byteArray2[4] = (byte) (-51);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false);
      assertArrayEquals(new byte[] {(byte)67, (byte)99, (byte)51, (byte)78, (byte)122, (byte)99, (byte)48, (byte)61}, byteArray3);
      assertEquals(8, byteArray3.length);
      
      Base64.isBase64((byte)0);
      byte[] byteArray4 = new byte[9];
      byteArray4[0] = (byte) (-38);
      byteArray4[1] = (byte)0;
      byteArray4[2] = (byte) (-106);
      byteArray4[3] = (byte)121;
      byteArray4[4] = (byte)32;
      byteArray4[5] = (byte)0;
      byteArray4[6] = (byte)9;
      byteArray4[7] = (byte)0;
      byteArray4[8] = (byte)9;
      byte[] byteArray5 = Base64.discardWhitespace(byteArray4);
      assertArrayEquals(new byte[] {(byte) (-38), (byte)0, (byte) (-106), (byte)121, (byte)0, (byte)0}, byteArray5);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0, 1717986918, (-5079));
      boolean boolean0 = Base64.isBase64((byte)61);
      assertTrue(boolean0);
      
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)61;
      byteArray1[1] = (byte)61;
      byteArray1[2] = (byte)61;
      byteArray1[3] = (byte)61;
      byteArray1[4] = (byte) (-16);
      byteArray1[5] = (byte)61;
      base64_0.encode(byteArray1, (-3499), (int) (byte) (-16));
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      base64_0.encodeToString((byte[]) null);
      Base64.encodeBase64((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Base64.isBase64((byte) (-70));
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Base64 base64_0 = new Base64((-1));
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64(byteArray1, false, true, 76);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      Base64 base64_1 = new Base64(612);
      Base64.decodeInteger(byteArray2);
      // Undeclared exception!
      try { 
        base64_1.decode((byte[]) null, 1017, 1017);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Base64 base64_0 = new Base64((-1));
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64(byteArray1, false, true, 76);
      base64_0.decode(byteArray0, 739, (-1));
      base64_0.encode(byteArray0, (-1), 739);
      String string0 = Base64.encodeBase64URLSafeString((byte[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base64.discardWhitespace(byteArray0);
      Base64.isBase64((byte)1);
      Base64 base64_0 = new Base64((-773), byteArray0, false);
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, 40, 76);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)12;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)0;
      Base64 base64_0 = new Base64((byte)12);
      base64_0.encodeToString(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.decodeInteger(byteArray1);
      try { 
        base64_0.encode((Object) "Parameter supplied to Base64 decode is not a byte[] or a String");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte) (-67);
      byteArray0[7] = (byte)26;
      byteArray0[8] = (byte) (-67);
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean0);
      
      Base64 base64_0 = new Base64(true);
      base64_0.decode("yDxnZD^{OH");
      Base64.decodeBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(14, byteArray1.length);
      
      base64_0.decode(byteArray0);
      Base64.decodeBase64("Bt]BE-f*");
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte) (-67);
      byte[] byteArray3 = Base64.decodeBase64("Bt]BE-f*");
      assertArrayEquals(new byte[] {(byte)6, (byte) (-48), (byte)68, (byte) (-7)}, byteArray3);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64(true);
      String string0 = base64_0.encodeToString(byteArray2);
      //  // Unstable assertion: assertEquals("zMw\uFFFD\uFFFD", string0);
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray1);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray3);
      //  // Unstable assertion: assertEquals((short)16705, bigInteger0.shortValue());
      
      Base64.isBase64(byteArray3);
      Base64.isBase64((byte)85);
      int int0 = base64_0.readResults(byteArray3, 2870, 2870);
      //  // Unstable assertion: assertEquals((-1), int0);
      
      boolean boolean0 = Base64.isArrayByteBase64(byteArray1);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Base64 base64_0 = new Base64((-1));
      byte[] byteArray0 = new byte[0];
      base64_0.encode(byteArray0, 409, (-4349));
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, 8, 73);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte) (-53);
      byteArray0[4] = (byte) (-15);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)84;
      byteArray1[1] = (byte)84;
      byteArray1[2] = (byte) (-15);
      byteArray1[3] = (byte) (-15);
      byteArray1[4] = (byte)1;
      byteArray1[5] = (byte)84;
      byteArray1[6] = (byte) (-53);
      Base64.encodeBase64Chunked(byteArray1);
      String string0 = "Parameter supplied to Base64 decode is not a byte[] or a String";
      Base64 base64_0 = new Base64(255, (byte[]) null, false);
      try { 
        base64_0.encode((Object) "Parameter supplied to Base64 decode is not a byte[] or a String");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64(false);
      base64_0.encodeToString(byteArray1);
      Base64.decodeBase64(byteArray0);
      Base64.encodeBase64Chunked(byteArray1);
      Object object0 = base64_0.decode((Object) "Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64 base64_1 = new Base64(4, byteArray0);
      // Undeclared exception!
      try { 
        base64_1.encode(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      Base64.discardWhitespace(byteArray2);
      Base64.decodeBase64("");
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64(byteArray1);
      Base64 base64_1 = new Base64((-1250), byteArray2, false);
      byte[] byteArray3 = new byte[1];
      byteArray3[0] = (byte) (-1);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray3, true, true, (int) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-109);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0, (-1), (int) (byte) (-109));
      int int0 = Base64.MIME_CHUNK_SIZE;
      assertEquals(76, int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64((-2226), byteArray0, true);
      base64_0.encode((byte[]) null);
      Base64 base64_1 = new Base64(64, byteArray0, true);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-109);
      byteArray1[1] = (byte) (-109);
      byteArray1[2] = (byte) (-109);
      byteArray1[3] = (byte)13;
      byteArray1[4] = (byte) (-109);
      byteArray1[5] = (byte)117;
      byteArray1[7] = (byte) (-109);
      Base64.encodeBase64(byteArray1, false, false, 34);
      Base64.isBase64(byteArray1);
      Base64.discardWhitespace(byteArray0);
      String string0 = Base64.encodeBase64String((byte[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte) (-67);
      byteArray0[7] = (byte)26;
      byteArray0[8] = (byte) (-67);
      Base64.isArrayByteBase64(byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64((byte) (-86));
      base64_0.isUrlSafe();
      Base64 base64_1 = new Base64((byte) (-67));
      // Undeclared exception!
      try { 
        base64_1.decode(byteArray0, 0, (int) (byte)97);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)78;
      byteArray0[6] = (byte) (-34);
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte) (-1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      assertEquals((short)222, bigInteger0.shortValue());
      
      boolean boolean0 = Base64.isBase64(byteArray1);
      assertTrue(boolean0);
      assertEquals(12, byteArray1.length);
      
      boolean boolean1 = Base64.isBase64((byte) (-105));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)46;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-45)}, byteArray1);
      
      byte[] byteArray2 = new byte[6];
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      //  // Unstable assertion: assertEquals(10, byteArray3.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte) (-52), (byte) (-52)}, byteArray3);
      
      Object object0 = base64_0.decode((Object) "Parameter supplied to Base64 decode is not a byte[] or a String");
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      
      Object object1 = base64_0.encode(object0);
      //  // Unstable assertion: assertNotSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)78;
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean0);
      
      Base64 base64_1 = new Base64(true);
      assertTrue(base64_1.isUrlSafe());
      
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      base64_0.decode(byteArray0);
      byte[] byteArray3 = Base64.decodeBase64("ErZPn");
      assertArrayEquals(new byte[] {(byte)18, (byte) (-74), (byte)79}, byteArray3);
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray2, false, true);
      assertEquals(0, byteArray4.length);
      
      byte[] byteArray5 = new byte[4];
      byteArray5[0] = (byte)78;
      byteArray5[1] = (byte)91;
      byteArray5[2] = (byte) (-67);
      byteArray5[3] = (byte) (-67);
      byte[] byteArray6 = Base64.discardWhitespace(byteArray5);
      assertArrayEquals(new byte[] {(byte)78, (byte)91, (byte) (-67), (byte) (-67)}, byteArray6);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Base64 base64_0 = new Base64((-955));
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64(byteArray0, true, true, 9);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 1487);
      assertEquals(0, byteArray1.length);
      
      base64_0.decode((byte[]) null);
      base64_0.decode((byte[]) null);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray2 = Base64.decodeBase64((byte[]) null);
      assertNull(byteArray2);
      
      Base64.isBase64((byte) (-52));
      byte[] byteArray3 = new byte[1];
      byteArray3[0] = (byte) (-52);
      byte[] byteArray4 = Base64.discardWhitespace(byteArray3);
      assertArrayEquals(new byte[] {(byte) (-52)}, byteArray4);
      
      byte[] byteArray5 = new byte[6];
      byteArray5[0] = (byte) (-52);
      byteArray5[1] = (byte) (-52);
      byteArray5[2] = (byte) (-52);
      byteArray5[3] = (byte) (-52);
      byteArray5[4] = (byte) (-52);
      byteArray5[5] = (byte) (-5);
      byte[] byteArray6 = Base64.discardWhitespace(byteArray5);
      assertEquals(6, byteArray6.length);
      assertNotSame(byteArray5, byteArray6);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Base64.isBase64((byte)0);
      Base64.encodeBase64((byte[]) null, false, false);
      Base64.encodeBase64Chunked((byte[]) null);
      boolean boolean0 = false;
      Base64.encodeBase64((byte[]) null, false, true);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)78;
      byteArray0[2] = (byte)74;
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      String string0 = base64_0.encodeToString(byteArray0);
      //  // Unstable assertion: assertEquals("TgBKAAAAAA==\n\uFFFD", string0);
      
      base64_0.decode(byteArray1, 736, (-1925));
      boolean boolean0 = Base64.isBase64((byte)90);
      //  // Unstable assertion: assertTrue(boolean0);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, true, (int) (byte)90);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)67, (byte)117, (byte)103}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte) (-3);
      Base64.decodeBase64("Xl~8%9&`59OG~");
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      base64_0.decode(byteArray0, (int) (byte)0, (-1224));
      Base64.isBase64(byteArray1);
      try { 
        base64_0.encode((Object) "Xl~8%9&`59OG~");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte)74;
      String string0 = base64_0.encodeToString(byteArray0);
      //  // Unstable assertion: assertEquals("Tt5KAAAAAA==\n\uFFFD", string0);
      
      base64_0.decode(byteArray0, 62, 0);
      Base64.isBase64((byte) (-34));
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, (int) (byte)78);
      //  // Unstable assertion: assertEquals(12, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte byte0 = (byte)35;
      byte byte1 = (byte)112;
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64(66);
      base64_0.encodeToString(byteArray0);
      Base64 base64_1 = new Base64(64, byteArray1);
      // Undeclared exception!
      try { 
        base64_1.decode(byteArray2, 0, 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Base64 base64_0 = new Base64(2700);
      Object object0 = base64_0.decode((Object) "");
      base64_0.decode(object0);
      BigInteger bigInteger0 = BigInteger.TEN;
      base64_0.encode((byte[]) null);
      base64_0.readResults((byte[]) null, 2700, 2700);
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Base64.encodeBase64((byte[]) null, true, false, 48);
      Base64.encodeBase64((byte[]) null, false, true, (-1820));
      Base64 base64_0 = new Base64((-1820), (byte[]) null, false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = null;
      try {
        bigInteger1 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)0;
      Base64 base64_0 = new Base64(2344, byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64(byteArray0, true);
      Base64.discardWhitespace(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)9;
      byteArray1[1] = (byte)9;
      Base64.encodeBase64String(byteArray1);
      Base64.discardWhitespace(byteArray1);
      byte[] byteArray2 = new byte[0];
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray2);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte byte0 = (byte)0;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)9;
      Base64 base64_0 = new Base64((byte)0, byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)127;
      Base64.encodeBase64Chunked(byteArray1);
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      BigInteger bigInteger0 = new BigInteger(byteArray2);
      bigInteger0.bitCount();
      Base64.decodeBase64("fwkJCQ==");
      // Undeclared exception!
      try { 
        bigInteger0.mod((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = Base64.encodeBase64URLSafe((byte[]) null);
      assertNull(byteArray0);
      
      boolean boolean0 = Base64.isBase64("?TD!kf");
      assertFalse(boolean0);
      
      byte[] byteArray1 = base64_0.decode("org.apache.commons.codec.EncoderException");
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false);
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      assertEquals(36, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte) (-3);
      byte[] byteArray1 = Base64.decodeBase64("0#L|U.NU");
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, true, 64);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray2, (int) (byte)0, 3064);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.decode((String) null);
      byte[] byteArray0 = new byte[3];
      base64_0.decode(byteArray0, (-1394), (-1394));
      base64_0.encode(byteArray0);
      byte byte0 = (byte) (-70);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((String) null, 64);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[6];
      Base64.encodeBase64URLSafeString(byteArray0);
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte)85;
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)0;
      byte byte0 = (byte)1;
      byteArray0[5] = (byte)1;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 0, (int) (byte)85);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte) (-67);
      byteArray0[7] = (byte)26;
      byteArray0[8] = (byte) (-67);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      base64_0.hasData();
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(1, byteArray3.length);
      
      bigInteger0.clearBit((byte)0);
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("YzMAAACqvRq9", string0);
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray2);
      base64_0.encodeToString(byteArray2);
      BigInteger.valueOf((byte)51);
      boolean boolean0 = base64_0.isUrlSafe();
      base64_0.readResults(byteArray4, (-3086), 830);
      Base64.decodeBase64("");
      boolean boolean1 = base64_0.hasData();
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray5 = Base64.encodeBase64URLSafe(byteArray2);
      assertArrayEquals(new byte[] {(byte)115}, byteArray1);
      assertNotSame(byteArray5, byteArray1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[6];
      Base64.encodeBase64URLSafeString(byteArray0);
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte)85;
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)1;
      Base64 base64_1 = new Base64(false);
      base64_1.encode(byteArray1, (int) (byte) (-112), 0);
      base64_1.encode(byteArray0, 76, (int) (byte)0);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      Base64.decodeBase64(byteArray2);
      Base64.encodeInteger(bigInteger0);
      bigInteger0.toString((int) (byte)75);
      try { 
        base64_0.decode((Object) base64_1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Base64.isBase64((byte) (-111));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte) (-111);
      byteArray0[5] = (byte) (-111);
      byteArray0[6] = (byte) (-111);
      byteArray0[7] = (byte) (-111);
      byteArray0[8] = (byte) (-111);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64(1908874353, byteArray0);
      base64_0.readResults(byteArray0, 919, (byte)0);
      base64_0.hasData();
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64URLSafe(byteArray0);
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)31;
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byte byte1 = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)97;
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.bitCount();
      Base64.decodeBase64("");
      BigInteger bigInteger1 = null;
      // Undeclared exception!
      try { 
        bigInteger0.mod((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64((-2074), byteArray1);
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("", string0);
      
      base64_0.encode(byteArray1);
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)25;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte) (-105);
      byteArray2[4] = (byte)121;
      byteArray2[5] = (byte)10;
      byteArray2[6] = (byte) (-74);
      int int0 = base64_0.readResults(byteArray0, (byte)0, 1690);
      int int1 = base64_0.avail();
      assertEquals(0, byteArray1.length);
      assertTrue(int1 == int0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)112;
      byte byte1 = (byte) (-3);
      byteArray0[3] = (byte) (-3);
      byte[] byteArray1 = Base64.decodeBase64("0#L|U.NU");
      byte byte2 = (byte)1;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)51;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, (int) (byte)112, (int) (byte)1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 112
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte) (-3);
      Base64.decodeBase64("0#L|U.NU");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 61);
      base64_0.decode(byteArray1, (-1224), (-1972));
      Base64.isBase64(byteArray1);
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Base64 base64_0 = new Base64((-1));
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, true, 76);
      base64_0.decode(byteArray0, 739, (-1));
      assertFalse(base64_0.isUrlSafe());
      
      String string0 = Base64.encodeBase64String(byteArray0);
      String string1 = Base64.encodeBase64URLSafeString(byteArray0);
      assertSame(byteArray0, byteArray2);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = Base64.isBase64((byte)0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-109);
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean0);
      
      Base64 base64_0 = new Base64(0, byteArray0, false);
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("kw==", string0);
      
      base64_0.encode(byteArray0);
      int int0 = base64_0.readResults(byteArray0, 0, 0);
      assertEquals((-1), int0);
      
      base64_0.hasData();
      byte[] byteArray1 = Base64.decodeBase64("kw==");
      Base64.decodeInteger(byteArray0);
      String string1 = Base64.encodeBase64String(byteArray0);
      assertEquals("kw==", string1);
      
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray0);
      boolean boolean1 = Base64.isBase64("kw==");
      boolean boolean2 = base64_0.hasData();
      assertFalse(boolean2 == boolean1);
      
      base64_0.decode(byteArray2, (-1), 1479);
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, false);
      assertArrayEquals(new byte[] {(byte)107, (byte)119, (byte)61, (byte)61}, byteArray3);
      
      base64_0.encode(byteArray1, (int) (byte) (-109), (int) (byte) (-109));
      assertEquals(1, byteArray1.length);
      
      base64_0.decode((Object) "kw==");
      assertNotSame(byteArray0, byteArray2);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[6];
      Base64.encodeBase64URLSafeString(byteArray0);
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte)85;
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)0;
      byte byte0 = (byte)1;
      byteArray0[5] = (byte)1;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 0, (int) (byte)85);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte) (-67);
      byteArray0[7] = (byte)26;
      byteArray0[8] = (byte) (-67);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      Base64.decodeBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertEquals(14, byteArray1.length);
      
      byte[] byteArray2 = base64_0.decode(byteArray0);
      byte[] byteArray3 = Base64.decodeBase64("Bt]BE-f*");
      //  // Unstable assertion: assertEquals(4, byteArray3.length);
      
      byte[] byteArray4 = new byte[6];
      byteArray4[0] = (byte) (-67);
      byteArray4[1] = (byte)51;
      byteArray4[2] = (byte)0;
      byteArray4[3] = (byte) (-67);
      byteArray4[4] = (byte)99;
      byteArray4[5] = (byte)0;
      Base64.encodeBase64(byteArray4, false);
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64.isBase64("Bt]BE-f*");
      byte[] byteArray5 = Base64.encodeBase64(byteArray0, false, false);
      base64_0.hasData();
      byte[] byteArray6 = Base64.encodeBase64Chunked(byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)99, (byte)119, (byte)61, (byte)61, (byte)10, (byte) (-24)}, byteArray6);
      //  // Unstable assertion: assertEquals(6, byteArray6.length);
      
      byte[] byteArray7 = new byte[0];
      Base64.encodeBase64Chunked(byteArray7);
      byte[] byteArray8 = Base64.encodeBase64(byteArray5, false);
      //  // Unstable assertion: assertEquals(16, byteArray8.length);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      int int0 = 112;
      Base64 base64_0 = new Base64(112);
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64URLSafe(byteArray0);
      try { 
        base64_0.decode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte)113;
      byteArray0[5] = (byte)1;
      base64_0.encodeToString(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.signum();
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      boolean boolean0 = base64_0.hasData();
      Base64.decodeBase64(byteArray1);
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)50;
      byteArray2[1] = (byte)113;
      byteArray2[2] = (byte)25;
      bigInteger0.clearBit((byte)1);
      byteArray2[3] = (byte)41;
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64.encodeBase64(byteArray1);
      base64_0.encodeToString(byteArray2);
      BigInteger.valueOf(1);
      base64_0.isUrlSafe();
      base64_0.readResults(byteArray2, 1, (-3334));
      Base64.decodeBase64("MnEZKQ");
      boolean boolean1 = base64_0.hasData();
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64(byteArray0, false);
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("", string0);
      
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(1, byteArray1.length);
      
      boolean boolean1 = base64_0.hasData();
      assertFalse(boolean1 == boolean0);
      
      base64_0.decode("");
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte) (-1);
      byteArray2[1] = (byte) (-4);
      byteArray2[2] = (byte)58;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte) (-92);
      byteArray2[5] = (byte)1;
      byteArray2[6] = (byte)64;
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray2);
      assertArrayEquals(new byte[] {(byte)95, (byte)95, (byte)119, (byte)54, (byte)65, (byte)75, (byte)81, (byte)66, (byte)81, (byte)65}, byteArray3);
      assertEquals(10, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte) (-34);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.max(bigInteger0);
      bigInteger0.intValueExact();
      bigInteger1.toString();
      bigInteger0.compareTo(bigInteger1);
      Base64 base64_0 = new Base64((byte)49);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)24;
      byteArray2[1] = (byte)24;
      byteArray2[2] = (byte)43;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)43;
      byteArray2[5] = (byte)43;
      byteArray2[6] = (byte)105;
      byteArray2[7] = (byte) (-34);
      byteArray2[8] = (byte)0;
      String string0 = Base64.encodeBase64URLSafeString(byteArray2);
      assertEquals("GBgrACsrad4A", string0);
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, false, false);
      assertArrayEquals(new byte[] {(byte)77, (byte)83, (byte)116, (byte)110, (byte)80, (byte)81, (byte)61, (byte)61}, byteArray3);
      assertEquals(8, byteArray3.length);
      assertEquals((short) (-10264), bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte) (-3);
      byte[] byteArray1 = Base64.decodeBase64("0#L|U.NU");
      assertArrayEquals(new byte[] {(byte) (-48), (byte) (-75), (byte)13}, byteArray1);
      assertEquals(3, byteArray1.length);
      
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)51;
      base64_0.readResults(byteArray0, (byte)35, (byte)35);
      int int0 = base64_0.avail();
      assertEquals(0, int0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64((byte[]) null, true);
      Base64.encodeBase64((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte)0;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 2326, 2028);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2326
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Base64 base64_0 = new Base64((-10));
      base64_0.isUrlSafe();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)29;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true, (int) (byte)41);
      assertArrayEquals(new byte[] {(byte)70, (byte)105, (byte)108, (byte)106, (byte)72, (byte)81}, byteArray1);
      assertEquals(6, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-22);
      byteArray0[6] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertArrayEquals(new byte[] {(byte)84, (byte)116, (byte)53, (byte)75, (byte)87, (byte)118, (byte)95, (byte)113, (byte)65, (byte)65}, byteArray1);
      
      boolean boolean0 = Base64.isBase64("Parameter supplied to Base64 encode is not a byte[]");
      assertFalse(boolean0);
      
      byte[] byteArray2 = base64_0.decode("(%5*70}I4XZPAi7");
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false, true);
      assertEquals(11, byteArray3.length);
      
      byte[] byteArray4 = Base64.discardWhitespace(byteArray2);
      assertArrayEquals(new byte[] {(byte) (-25), (byte) (-67), (byte)8, (byte) (-31), (byte)118, (byte)79, (byte)2, (byte)46}, byteArray4);
      assertEquals(8, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(2404, byteArray0, true);
      byte[] byteArray1 = new byte[2];
      byte byte0 = (byte)0;
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)92;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)0;
      byteArray2[6] = (byte)34;
      byteArray2[7] = (byte)0;
      byteArray2[8] = (byte)0;
      Base64.encodeBase64(byteArray2);
      Base64.encodeBase64Chunked(byteArray1);
      byteArray1[0] = (byte)0;
      Base64.encodeBase64(byteArray0);
      Base64.encodeInteger(bigInteger0);
      byteArray1[1] = (byte) (-14);
      // Undeclared exception!
      try { 
        bigInteger0.multiply((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.byteValueExact();
      bigInteger0.bitCount();
      int int0 = 114;
      bigInteger0.testBit(114);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64(byteArray0);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.max(bigInteger1);
      Base64 base64_0 = new Base64(false);
      int int1 = 803;
      bigInteger0.mod(bigInteger1);
      base64_0.decode(byteArray0, 803, 0);
      BigInteger bigInteger2 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigInteger0.modInverse(bigInteger2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)68;
      byteArray0[6] = (byte) (-49);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      String string0 = "uDWV_S%E9\\9\"U>/B";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte) (-112);
      base64_0.encodeToString(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64("uDWV_S%E99\"U>/B");
      Base64.encodeBase64(byteArray1);
      try { 
        base64_0.encode((Object) "uDWV_S%E99\"U>/B");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, false, true, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = Base64.isBase64(";ubp]oJ!]vswJ:nq");
      assertFalse(boolean0);
      
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)0;
      int int0 = base64_0.readResults(byteArray0, 0, (byte)0);
      assertEquals(0, int0);
      
      boolean boolean1 = base64_0.hasData();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)97;
      byteArray0[7] = (byte)110;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      String string0 = "org.apache.commons.codec.EncoderException";
      byte[] byteArray2 = Base64.decodeBase64("org.apache.commons.codec.EncoderException");
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(false);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.encodeBase64String(byteArray3);
      base64_0.decode((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(true);
      String string0 = "eP\\/8@";
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte)83;
      byteArray0[7] = (byte)0;
      Base64.encodeBase64(byteArray0, true, true, 43);
      try { 
        base64_0.encode((Object) "eP/8@");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)103;
      byteArray0[0] = (byte)103;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(3547, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [g]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      assertTrue(base64_0.isUrlSafe());
      
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = 2344;
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)9;
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)0;
      Base64 base64_0 = new Base64(2344, byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64String(byteArray0);
      Base64.discardWhitespace(byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.bitCount();
      Base64.decodeBase64((String) null);
      // Undeclared exception!
      try { 
        bigInteger0.mod((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(1, byteArray1.length);
      
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte)0;
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte) (-113);
      byteArray2[2] = (byte)112;
      byteArray2[3] = (byte) (-10);
      byteArray2[4] = (byte) (-10);
      byteArray2[5] = (byte)122;
      byteArray2[6] = (byte) (-113);
      byteArray2[7] = (byte)0;
      String string0 = Base64.encodeBase64String(byteArray2);
      assertEquals("AI9w9vZ6jwA=", string0);
      
      byteArray0[5] = (byte) (-10);
      byteArray0[6] = (byte)67;
      byteArray0[7] = (byte)69;
      byteArray0[8] = (byte)51;
      base64_0.decode(byteArray0, (int) (byte) (-10), (-976));
      byte[] byteArray3 = new byte[0];
      base64_0.decode(byteArray3);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)89;
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      Base64.encodeBase64Chunked(byteArray0);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte byte0 = (byte) (-111);
      Base64.isBase64((byte) (-111));
      byte[] byteArray0 = new byte[9];
      byte byte1 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte) (-111);
      byteArray0[5] = (byte) (-111);
      byteArray0[6] = (byte) (-111);
      byteArray0[7] = (byte) (-111);
      byteArray0[8] = (byte) (-111);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte) (-111), byteArray1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [AJGRkZGRkZGR\uFFFD\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = 2700;
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64(2700, (byte[]) null);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-74);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-99);
      byteArray0[8] = (byte)7;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertEquals(12, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      int int0 = (-2074);
      Base64 base64_0 = new Base64((-2074), byteArray1);
      base64_0.encodeToString(byteArray0);
      base64_0.encode(byteArray1);
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)25;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte) (-105);
      byteArray2[4] = (byte)121;
      byteArray2[5] = (byte)10;
      byteArray2[6] = (byte) (-74);
      byteArray2[7] = (byte)0;
      byteArray2[8] = (byte) (-18);
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte)49;
      base64_0.decode(byteArray0, (int) (byte) (-126), 0);
      assertFalse(base64_0.isUrlSafe());
  }
}
