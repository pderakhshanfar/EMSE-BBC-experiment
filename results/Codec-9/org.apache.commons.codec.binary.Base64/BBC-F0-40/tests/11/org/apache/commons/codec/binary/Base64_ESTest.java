/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:07:25 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = BigInteger.probablePrime(323, mockRandom0);
      mockRandom0.longs((long) 323, (-3441L), 805L);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      int int0 = Base64.MIME_CHUNK_SIZE;
      Base64 base64_0 = new Base64((-1));
      Base64.encodeBase64URLSafeString(byteArray0);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.compareTo(bigInteger1);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 76, 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 76
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Base64.encodeBase64Chunked((byte[]) null);
      int int0 = 113;
      Base64 base64_0 = new Base64(113, (byte[]) null, false);
      Base64.decodeBase64("");
      Base64.encodeBase64((byte[]) null, true, false, 113);
      Base64.decodeBase64((byte[]) null);
      base64_0.decode((byte[]) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      int int1 = 0;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      base64_0.decode("");
      byteArray0[1] = (byte) (-14);
      MockRandom mockRandom0 = new MockRandom((byte) (-14));
      // Undeclared exception!
      try { 
        BigInteger.probablePrime((byte) (-1), mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // bitLength < 2
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      Base64 base64_1 = new Base64(false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64.isBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64 base64_2 = new Base64();
      base64_2.encodeToString(byteArray2);
      Base64.isBase64((byte)0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = BigInteger.probablePrime(323, mockRandom0);
      mockRandom0.longs((long) 323, 4L, 461L);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      int int0 = Base64.MIME_CHUNK_SIZE;
      Base64 base64_0 = new Base64(323);
      base64_0.decode(byteArray0, 5, 323);
      base64_0.encode(byteArray0);
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte)3;
      base64_0.encode(byteArray0, 1, (int) (byte)1);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64.isBase64(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64 base64_1 = new Base64();
      base64_1.encodeToString(byteArray1);
      Base64.isBase64((byte)0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(3506);
      BigInteger bigInteger0 = BigInteger.probablePrime(3506, mockRandom0);
      long long0 = 1121L;
      long long1 = (-968L);
      mockRandom0.longs(long0, long1, long0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      int int0 = Base64.MIME_CHUNK_SIZE;
      int int1 = 5;
      int int2 = 41;
      int int3 = 377;
      Base64 base64_0 = new Base64(int3);
      base64_0.decode(byteArray0, int1, int2);
      int int4 = 1048;
      base64_0.readResults(byteArray0, int3, int4);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      base64_0.encodeToString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      int int0 = 48;
      Base64 base64_0 = new Base64(48, byteArray0, false);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)41;
      Base64.toIntegerBytes(bigInteger0);
      byteArray1[1] = (byte)1;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false, (int) (byte)41);
      base64_0.decode("^7i9&R");
      Base64.encodeBase64Chunked(byteArray2);
      byteArray1[2] = (byte) (-16);
      byteArray1[3] = (byte) (-86);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.encodeBase64(byteArray0);
      base64_0.decode(byteArray0);
      Base64.isBase64((byte)127);
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(3506);
      BigInteger bigInteger0 = BigInteger.probablePrime(3506, mockRandom0);
      mockRandom0.longs(868L, (-1783L), 461L);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(true);
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray3 = Base64.CHUNK_SEPARATOR;
      Base64.isBase64(byteArray1);
      BigInteger bigInteger1 = new BigInteger(byteArray2);
      byte[] byteArray4 = Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64(byteArray4);
      base64_0.avail();
      Base64.discardWhitespace(byteArray4);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64((-635), (byte[]) null, true);
      base64_0.encode((byte[]) null);
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, (int) (byte)0, 377);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(0, byteArray0);
      Base64.isBase64((byte)63);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)44;
      byteArray1[1] = (byte) (-106);
      byteArray1[2] = (byte)63;
      byteArray1[3] = (byte) (-106);
      Base64 base64_1 = new Base64(41);
      Base64.decodeInteger(byteArray0);
      Base64.encodeBase64(byteArray1, true);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, 1, 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)58;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, 377);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte)8;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      bigInteger0.abs();
      Base64 base64_0 = new Base64(87);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      base64_0.avail();
      base64_0.encodeToString(byteArray1);
      try { 
        base64_0.decode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Base64 base64_0 = new Base64(3705);
      String string0 = null;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byte byte0 = (byte)71;
      byteArray0[2] = (byte)71;
      byte byte1 = (byte) (-123);
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 5;
      Base64 base64_0 = new Base64(5, (byte[]) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      base64_0.encodeToString((byte[]) null);
      Base64.encodeBase64((byte[]) null, true, true);
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger0.xor(bigInteger1);
      Base64.toIntegerBytes(bigInteger2);
      Base64.isBase64("]");
      Base64 base64_1 = new Base64(false);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger2);
      Base64.encodeBase64(byteArray0, true, true);
      Base64.isBase64(byteArray0);
      base64_1.decode(byteArray0);
      Base64.isBase64((byte)9);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Base64 base64_0 = new Base64();
      int int0 = Base64.PEM_CHUNK_SIZE;
      Base64 base64_1 = new Base64(64);
      base64_1.hasData();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte) (-22);
      byteArray0[5] = (byte)37;
      base64_0.encode(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.decodeBase64(byteArray1);
      Base64.decodeInteger(byteArray1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)14;
      base64_0.encode(byteArray0, 750, (-2147483643));
      base64_0.avail();
      base64_0.decode(byteArray0, 26, (-1134));
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.xor(bigInteger0);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64("]");
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64.isBase64(byteArray1);
      Base64 base64_1 = new Base64();
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte) (-100);
      Base64.encodeBase64(byteArray0, false, false, 0);
      byteArray2[1] = (byte)4;
      // Undeclared exception!
      try { 
        base64_1.decode(byteArray2, 1, 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      base64_0.decode(byteArray0, (int) (byte)0, (-635));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Base64 base64_0 = new Base64(3705);
      base64_0.decode((String) null);
      Base64.encodeBase64String((byte[]) null);
      Base64.isBase64("DT8pVvy");
      byte[] byteArray0 = new byte[1];
      Base64.encodeBase64String(byteArray0);
      base64_0.encode((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Base64 base64_0 = new Base64(377);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-72);
      Base64.isBase64((byte) (-10));
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-10);
      byteArray1[1] = (byte) (-72);
      byteArray1[2] = (byte)17;
      byteArray1[4] = (byte)17;
      byteArray1[5] = (byte) (-10);
      byteArray1[6] = (byte) (-10);
      byteArray1[7] = (byte) (-72);
      byte[] byteArray2 = base64_0.decode(byteArray1);
      base64_0.decode((Object) "1(?5Z7H{E+9p}>");
      Random.setNextRandom(60);
      Base64.isBase64(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      Base64.isBase64(byteArray3);
      base64_0.decode(byteArray2);
      Random.setNextRandom(137);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)7;
      Base64 base64_0 = new Base64((byte)7);
      Object object0 = base64_0.decode((Object) "");
      Base64.isBase64((byte)7);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      base64_0.encode(object0);
      Random.setNextRandom((-493));
      Base64.isBase64(byteArray0);
      base64_0.encode(byteArray1);
      Base64.isBase64(byteArray1);
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)19;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)7;
      byteArray2[3] = (byte) (-1);
      byteArray2[4] = (byte) (-1);
      byteArray2[5] = (byte)7;
      byte[] byteArray3 = new byte[8];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte) (-1);
      byteArray3[2] = (byte)7;
      byteArray3[3] = (byte)0;
      byteArray3[4] = (byte) (-1);
      byteArray3[5] = (byte)19;
      byteArray3[6] = (byte)7;
      byteArray3[7] = (byte)0;
      Base64.discardWhitespace(byteArray3);
      byte[] byteArray4 = Base64.decodeBase64(byteArray2);
      Base64.isBase64(byteArray4);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray4);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)15;
      byteArray1[6] = (byte)61;
      byteArray1[2] = (byte)15;
      byteArray1[3] = (byte)32;
      byteArray1[4] = (byte)15;
      byteArray1[5] = (byte)15;
      byteArray1[6] = (byte)15;
      byteArray1[7] = (byte)15;
      byteArray1[8] = (byte)15;
      Base64.discardWhitespace(byteArray1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.xor(bigInteger0);
      Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64("]");
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.isBase64(byteArray0);
      base64_0.decode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Base64 base64_0 = new Base64(3705);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)71;
      Base64.isBase64((byte)69);
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte)44;
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.decode((String) null);
      Base64.encodeBase64String((byte[]) null);
      Base64.isBase64("DT8pVvy");
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)88;
      Base64.discardWhitespace(byteArray1);
      Base64.decodeBase64(byteArray1);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)7;
      Base64 base64_0 = new Base64((byte)7);
      base64_0.decode((Object) "");
      Base64.isBase64((byte)7);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      base64_0.decode((Object) "");
      Random.setNextRandom((-493));
      Base64.isBase64(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      Base64.isBase64(byteArray1);
      byte[] byteArray3 = new byte[8];
      byteArray3[0] = (byte)19;
      byteArray3[1] = (byte)0;
      byteArray3[2] = (byte)7;
      byteArray3[3] = (byte)17;
      byteArray3[4] = (byte)17;
      byteArray3[5] = (byte)7;
      byteArray3[6] = (byte)17;
      byteArray3[7] = (byte)7;
      Base64 base64_1 = new Base64(7, byteArray3, true);
      Base64.encodeBase64(byteArray2);
      base64_1.decode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Base64 base64_0 = new Base64(377);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)17;
      MockRandom mockRandom0 = new MockRandom(3506);
      BigInteger bigInteger0 = BigInteger.probablePrime(3506, mockRandom0);
      base64_0.decode(byteArray0);
      String string0 = "org.apache.commons.codec.binary.Base64";
      Base64.decodeBase64(string0);
      String string1 = "esY(";
      base64_0.decode((Object) string1);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      String string2 = "cp_@--X\"|A=@1^C@M)";
      byte[] byteArray2 = base64_0.decode(string2);
      Base64.decodeBase64(byteArray2);
      byte[] byteArray3 = new byte[6];
      byteArray3[0] = byte0;
      byteArray3[1] = byte0;
      byte byte1 = (byte)109;
      byteArray3[2] = byte1;
      byteArray3[3] = byte0;
      byte byte2 = (byte)95;
      byteArray3[4] = byte2;
      byteArray3[5] = byte0;
      Base64.decodeBase64(string0);
      base64_0.encode(byteArray3);
      BigInteger bigInteger1 = new BigInteger(byteArray1);
      byte[] byteArray4 = Base64.toIntegerBytes(bigInteger1);
      Object object0 = new Object();
      Object object1 = null;
      base64_0.encode(byteArray4);
      // Undeclared exception!
      try { 
        bigInteger1.intValueExact();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger out of int range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)23;
      Base64.encodeBase64String(byteArray0);
      base64_0.encode(byteArray0, 76, (-1));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 3705;
      Base64 base64_0 = new Base64(3705);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)71;
      Base64.isBase64((byte)69);
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte)44;
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.decode((String) null);
      Base64.encodeBase64String((byte[]) null);
      Base64.isBase64("DT8pVvy");
      byte[] byteArray1 = new byte[1];
      byte byte0 = (byte)88;
      byteArray1[0] = (byte)88;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (int) (byte)88, (int) (byte)88);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 88
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(0, byteArray0, false);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte byte0 = (byte)15;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)15;
      byteArray1[1] = (byte)15;
      byteArray1[2] = (byte)15;
      byteArray1[3] = (byte)15;
      byteArray1[4] = (byte)15;
      byteArray1[5] = (byte)15;
      byteArray1[6] = (byte)15;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[5];
      base64_0.encode(byteArray0);
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)23;
      Base64.encodeBase64String(byteArray0);
      base64_0.encode(byteArray0, (int) (byte)21, 121);
      Base64.decodeInteger(byteArray0);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64.decodeInteger(byteArray1);
      base64_0.encode(byteArray1, (int) (byte)0, (-539));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)7;
      Base64 base64_0 = new Base64((byte)17);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 0, (int) (byte)7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-83);
      Base64.isBase64(byteArray0);
      Base64.encodeBase64String(byteArray0);
      Base64.decodeBase64("d6OQ_x,Yl@THb<{E2");
      Base64 base64_1 = new Base64(64, byteArray0);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      byte[] byteArray2 = base64_1.decode(byteArray1);
      Base64.decodeInteger(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray1);
      Base64.encodeBase64Chunked(byteArray2);
      Base64.encodeBase64Chunked(byteArray3);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.xor(bigInteger1);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64("]");
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray0, 2, (-4131));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)0;
      base64_0.decode(byteArray0, (int) (byte)0, (int) (byte)1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-83);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)10;
      byteArray1[3] = (byte)92;
      byteArray1[2] = (byte) (-83);
      byteArray1[3] = (byte)10;
      byteArray1[4] = (byte)10;
      byteArray1[5] = (byte) (-83);
      byteArray1[6] = (byte)41;
      Base64.encodeBase64String(byteArray1);
      base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      Base64.decodeBase64(byteArray2);
      Base64.isBase64(byteArray1);
      BigInteger bigInteger0 = new BigInteger(byteArray2);
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Base64 base64_0 = new Base64(3509);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)6;
      Base64.encodeBase64(byteArray0);
      base64_0.decode((Object) "");
      byte[] byteArray1 = new byte[1];
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      byteArray1[0] = (byte)99;
      base64_0.encodeToString(byteArray1);
      base64_0.readResults(byteArray1, (byte)99, (byte)99);
      Base64.isBase64(byteArray1);
      base64_0.decode(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      base64_0.readResults(byteArray2, (byte)99, 3509);
      Base64.discardWhitespace(byteArray2);
      byte[] byteArray4 = base64_0.decode(byteArray3);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = BigInteger.probablePrime(64, mockRandom0);
      Base64.encodeInteger(bigInteger0);
      Base64.decodeInteger(byteArray4);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(0, byteArray0, false);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-123);
      byteArray1[4] = (byte) (-123);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      base64_0.avail();
      base64_0.hasData();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)80;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false, (int) (byte)80);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger0);
      base64_0.decode((String) null);
      Base64.decodeInteger(byteArray1);
      Base64.isBase64("9HQ[c_QY/n-M@JMl!xt");
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      base64_0.avail();
      base64_0.hasData();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)80;
      boolean boolean0 = true;
      Base64.encodeBase64(byteArray0, false, false, (int) (byte)80);
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64(1083, byteArray0, true);
      Object object0 = base64_0.decode((Object) "");
      base64_0.decode((Object) "");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      base64_0.encode(object0);
      Base64 base64_1 = new Base64(548, byteArray0);
      base64_1.decode((Object) "RKq8j");
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.isProbablePrime(59);
      bigInteger0.testBit(548);
      Base64.toIntegerBytes(bigInteger0);
      Base64.decodeBase64((byte[]) null);
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.decode(byteArray2);
      Base64.decodeBase64((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Base64 base64_0 = new Base64(377);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)17;
      MockRandom mockRandom0 = new MockRandom(3506);
      BigInteger bigInteger0 = BigInteger.probablePrime(3506, mockRandom0);
      base64_0.decode(byteArray0);
      String string0 = "org.apache.commons.codec.binary.Base64";
      Base64.decodeBase64(string0);
      String string1 = "esY(";
      base64_0.decode((Object) string1);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      String string2 = "cp_@--X\"|A=@1^C@M)";
      byte[] byteArray2 = base64_0.decode(string2);
      Base64.decodeBase64(byteArray2);
      byte[] byteArray3 = new byte[6];
      byteArray3[0] = byte0;
      byteArray3[1] = byte0;
      byte byte1 = (byte)109;
      byteArray3[2] = byte1;
      byteArray3[3] = byte0;
      byte byte2 = (byte)95;
      byteArray3[4] = byte2;
      byteArray3[5] = byte0;
      base64_0.encode(byteArray3);
      BigInteger bigInteger1 = new BigInteger(byteArray1);
      Base64.toIntegerBytes(bigInteger1);
      Object object0 = new Object();
      Object object1 = null;
      bigInteger1.intValueExact();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Base64 base64_0 = new Base64(377);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-72);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)69, (byte)81, (byte)67, (byte)52, (byte) (-102), (byte)10}, byteArray1);
      //  // Unstable assertion: assertEquals(6, byteArray1.length);
      
      Base64 base64_1 = new Base64((byte)0, byteArray0, true);
      byte[] byteArray2 = base64_1.decode(byteArray0);
      //  // Unstable assertion: assertEquals(0, byteArray2.length);
      
      boolean boolean0 = base64_1.isUrlSafe();
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 1;
      Base64 base64_0 = new Base64(1);
      base64_0.decode("");
      int int1 = Base64.MIME_CHUNK_SIZE;
      base64_0.avail();
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-11);
      byteArray1[1] = (byte)79;
      byteArray1[2] = (byte)62;
      Base64.decodeBase64((String) null);
      byteArray1[3] = (byte) (-28);
      byteArray1[4] = (byte)96;
      byteArray1[5] = (byte)58;
      byteArray1[6] = (byte)8;
      byteArray1[7] = (byte)0;
      byteArray1[8] = (byte)72;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, (int) (byte) (-11), (int) (byte)8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -11
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)56;
      Object object0 = base64_0.decode((Object) "US-ASCII");
      Object object1 = base64_0.encode(object0);
      Object object2 = base64_0.decode(object1);
      base64_0.decode(object2);
      byteArray0[6] = (byte)39;
      byteArray0[7] = (byte) (-106);
      byteArray0[8] = (byte) (-88);
      base64_0.decode(byteArray0, (int) (byte)39, (int) (byte)56);
      assertNotSame(byteArray0, object0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Base64 base64_0 = new Base64(1);
      byte[] byteArray0 = base64_0.decode("");
      base64_0.avail();
      base64_0.avail();
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64Chunked(byteArray1);
      Base64.encodeBase64(byteArray1, false);
      Base64 base64_1 = new Base64(757);
      base64_1.decode((Object) "");
      base64_1.readResults(byteArray1, 0, (-82));
      base64_1.encode(byteArray0);
      try { 
        base64_1.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(0, byteArray0, false);
      Base64.encodeBase64URLSafeString(byteArray0);
      int int0 = (-539);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (-539), (-539));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)23;
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("ERUAFwA=", string0);
      
      byteArray0[4] = (byte)15;
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      assertArrayEquals(new byte[] {(byte)17, (byte)21, (byte)0, (byte)23, (byte)15}, byteArray2);
      
      byte[] byteArray3 = Base64.decodeBase64(byteArray1);
      assertArrayEquals(new byte[] {(byte)17, (byte)21, (byte)0, (byte)23, (byte)15}, byteArray3);
      assertEquals(5, byteArray3.length);
      
      byte[] byteArray4 = new byte[9];
      byteArray4[0] = (byte)17;
      byteArray4[1] = (byte)23;
      byteArray4[2] = (byte)17;
      byteArray4[3] = (byte)118;
      byteArray4[4] = (byte)23;
      byteArray4[5] = (byte)23;
      byteArray4[6] = (byte)23;
      byteArray4[7] = (byte) (-123);
      byteArray4[8] = (byte)0;
      boolean boolean0 = Base64.isBase64(byteArray4);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Base64 base64_0 = new Base64((-1));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte) (-112);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(14, byteArray1.length);
      
      byte[] byteArray2 = base64_0.decode("-5~fE R!=@Rz");
      assertArrayEquals(new byte[] {(byte) (-5), (byte) (-105), (byte) (-60)}, byteArray2);
      assertEquals(3, byteArray2.length);
      
      boolean boolean0 = base64_0.isUrlSafe();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Base64 base64_0 = new Base64((-3744));
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      int int0 = 2055;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (-3744), 2055);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3744
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Base64.encodeBase64((byte[]) null);
      Base64 base64_0 = new Base64(0, (byte[]) null, true);
      Base64.encodeBase64((byte[]) null, true, true);
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, 115, 55);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(0, byteArray1);
      base64_0.readResults(byteArray0, (-1), 815);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.toString((-2371));
      bigInteger0.flipBit(3523);
      // Undeclared exception!
      try { 
        bigInteger0.divide(bigInteger1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger divide by zero
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)63;
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
      
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)63;
      byteArray1[1] = (byte)113;
      byteArray1[2] = (byte)102;
      byteArray1[3] = (byte)102;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      assertArrayEquals(new byte[] {(byte)80, (byte)51, (byte)70, (byte)109, (byte)90, (byte)103, (byte)65, (byte)65}, byteArray2);
      assertEquals(8, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Base64 base64_0 = new Base64(3705);
      String string0 = null;
      base64_0.decode((String) null);
      String string1 = "DT8pVvy";
      Base64.encodeBase64String((byte[]) null);
      Base64.isBase64("DT8pVvy");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)88;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)88, (int) (byte)88);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 88
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, 1288);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("(xU4)/`BR6l?qM+:z");
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-59), (byte)78, (byte)63, (byte)5, (byte)30, (byte) (-91), (byte) (-88), (byte) (-49), (byte) (-77)}, byteArray0);
      
      Base64 base64_0 = new Base64();
      boolean boolean0 = base64_0.isUrlSafe();
      assertFalse(boolean0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)5;
      boolean boolean0 = Base64.isBase64("MS 1");
      //  // Unstable assertion: assertTrue(boolean0);
      
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte) (-112);
      byte[] byteArray2 = base64_0.decode("]");
      Base64.decodeBase64(byteArray1);
      //  // Unstable assertion: assertEquals(10, byteArray1.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte) (-102), (byte)10}, byteArray1);
      
      base64_0.encodeToString(byteArray0);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)27;
      byte[] byteArray3 = base64_0.encode(byteArray0);
      int int0 = base64_0.avail();
      //  // Unstable assertion: assertEquals(0, int0);
      
      base64_0.encode(byteArray2, (int) (byte) (-84), (int) (byte) (-84));
      Base64.encodeBase64URLSafeString(byteArray3);
      String string0 = Base64.encodeBase64URLSafeString(byteArray2);
      //  // Unstable assertion: assertEquals("", string0);
      
      byte[] byteArray4 = Base64.decodeBase64(byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-84), (byte)5, (byte) (-64), (byte) (-112), (byte)0, (byte)27}, byteArray4);
      //  // Unstable assertion: assertEquals(6, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Base64.encodeBase64((byte[]) null, true);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      base64_0.avail();
      base64_0.hasData();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)94;
      byteArray0[5] = (byte)49;
      byteArray0[6] = (byte) (-28);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-1);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, true, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of 1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)73;
      boolean boolean0 = false;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-827), byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [CI]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)1;
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)68, (byte)65, (byte)66}, byteArray1);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Base64 base64_0 = new Base64(1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-115);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.abs();
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)0;
      base64_0.decode(byteArray1, (int) (byte) (-115), 0);
      Base64.decodeBase64(byteArray0);
      byteArray0[3] = (byte)0;
      Base64.isArrayByteBase64(byteArray0);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64.encodeBase64((byte[]) null, false);
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(true);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      Base64.encodeBase64((byte[]) null, false, false, 64);
      bigInteger0.max(bigInteger1);
      BigInteger bigInteger2 = BigInteger.TEN;
      bigInteger2.shiftRight((-906));
      bigInteger2.longValue();
      BigInteger bigInteger3 = bigInteger0.xor(bigInteger2);
      Base64.decodeBase64("mjaQz/c");
      byte[] byteArray0 = bigInteger2.toByteArray();
      Base64.toIntegerBytes(bigInteger0);
      base64_0.encode((byte[]) null, 0, 0);
      base64_0.decode("");
      base64_0.decode((byte[]) null);
      Base64.encodeBase64((byte[]) null, false, true, (-906));
      bigInteger3.longValueExact();
      Base64.toIntegerBytes(bigInteger2);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 247, 2138);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 247
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)17;
      Base64.isBase64(byteArray0);
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64((byte)17, byteArray0);
      base64_0.decode(byteArray0);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      byte[] byteArray4 = Base64.encodeBase64(byteArray0, false);
      Base64.decodeInteger(byteArray2);
      Base64.encodeBase64(byteArray0);
      Base64.decodeInteger(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
      base64_0.decode(byteArray0, (int) (byte)17, 0);
      base64_0.encode(byteArray4);
      Base64.encodeBase64String(byteArray3);
      byte[] byteArray5 = Base64.decodeBase64("BxE=");
      Base64.encodeBase64URLSafe(byteArray5);
      Object object0 = new Object();
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)12;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true);
      assertArrayEquals(new byte[] {(byte)65, (byte)80, (byte)69, (byte)65, (byte)68, (byte)65}, byteArray1);
      assertEquals(6, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-100);
      byteArray0[0] = (byte) (-100);
      Base64 base64_0 = new Base64(548, byteArray0);
      byte[] byteArray1 = base64_0.decode("");
      Base64.encodeBase64(byteArray1, false, false);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger0);
      bigInteger0.getLowestSetBit();
      base64_0.avail();
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.and(bigInteger1);
      Base64.toIntegerBytes(bigInteger0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-48);
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      Base64 base64_0 = new Base64(1770, byteArray0);
      byte[] byteArray1 = base64_0.decode("");
      assertEquals(0, byteArray1.length);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte) (-56);
      byteArray0[7] = (byte)0;
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)0, byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000\u0000\u00002\u0000\f\uFFFD\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      int int0 = 1;
      Base64 base64_0 = new Base64(1);
      byte[] byteArray0 = base64_0.decode("");
      base64_0.avail();
      base64_0.avail();
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, false);
      byte[] byteArray4 = Base64.decodeBase64("");
      Base64.isArrayByteBase64(byteArray2);
      Base64.encodeBase64URLSafeString(byteArray3);
      base64_0.decode(byteArray4);
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Base64 base64_0 = new Base64(377);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-72);
      int int0 = base64_0.readResults(byteArray0, 377, (byte)0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)56;
      byteArray0[6] = (byte)39;
      byteArray0[7] = (byte) (-106);
      byteArray0[8] = (byte) (-88);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)39, (int) (byte)56);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 39
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)44;
      byteArray0[8] = (byte)0;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(1175, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD\u0000\uFFFDd\u0001\u0001\u0000,\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      int int0 = 0;
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(0, byteArray0, true);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("/wA=\r\n", string0);
      
      byteArray0[1] = (byte)67;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      String string1 = Base64.encodeBase64String(byteArray1);
      assertEquals("LzBNPQ==", string1);
      
      base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64("/wA=\r\n");
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-24);
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte) (-1);
      base64_0.decode(byteArray0, (int) (byte) (-83), (int) (byte)0);
      assertFalse(base64_0.isUrlSafe());
  }
}
