/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:08:10 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = 8234;
      MockRandom mockRandom0 = new MockRandom(8234);
      mockRandom0.nextGaussian();
      BigInteger bigInteger0 = new BigInteger(8234, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false);
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      Base64 base64_0 = new Base64(8234);
      BigInteger bigInteger1 = BigInteger.valueOf(64);
      bigInteger0.remainder(bigInteger1);
      int int1 = 140;
      // Undeclared exception!
      Base64.encodeBase64(byteArray3, false, false, 8234);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8154, mockRandom0);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(8154);
      int int0 = Base64.PEM_CHUNK_SIZE;
      base64_0.encode(byteArray0, 110, 110);
      base64_0.encode(byteArray0, 110, (-511));
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, 110, (-511));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(8245);
      mockRandom0.nextGaussian();
      BigInteger bigInteger0 = new BigInteger(8245, mockRandom0);
      byte[] byteArray0 = new byte[39];
      BigInteger bigInteger1 = new BigInteger(11, mockRandom0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(false);
      Base64 base64_1 = new Base64(11, byteArray0);
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)111;
      byte[] byteArray3 = new byte[9];
      byteArray3[0] = (byte)111;
      byteArray3[1] = (byte)111;
      byteArray3[2] = (byte)111;
      byteArray3[3] = (byte)111;
      byteArray3[4] = (byte)111;
      byteArray3[5] = (byte)111;
      byteArray3[6] = (byte)111;
      byteArray3[7] = (byte)111;
      byteArray3[8] = (byte)23;
      Base64.decodeBase64(byteArray3);
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte) (-32);
      byteArray2[3] = (byte)19;
      byteArray2[4] = (byte) (-18);
      byteArray2[5] = (byte)55;
      byteArray2[6] = (byte)12;
      byteArray2[7] = (byte) (-43);
      Base64.decodeBase64(byteArray2);
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray1, 76, 8245);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1376
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(8234);
      mockRandom0.nextGaussian();
      BigInteger bigInteger0 = new BigInteger(8234, mockRandom0);
      byte[] byteArray0 = new byte[23];
      byteArray0[4] = (byte)0;
      byteArray0[7] = (byte)0;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64((byte)0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, false);
      Base64.encodeBase64URLSafe(byteArray2);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      base64_0.readResults(byteArray0, 64, 64);
      base64_0.decode(byteArray4);
      // Undeclared exception!
      base64_0.encode(byteArray3);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(8234);
      mockRandom0.nextGaussian();
      BigInteger bigInteger0 = new BigInteger(8234, mockRandom0);
      byte[] byteArray0 = new byte[23];
      byteArray0[4] = (byte)0;
      byteArray0[7] = (byte)0;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64((byte)0);
      mockRandom0.ints((long) (byte)0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, false);
      Base64.encodeBase64URLSafe(byteArray2);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      base64_0.encode(byteArray3);
      base64_0.readResults(byteArray0, 64, 64);
      // Undeclared exception!
      Base64.encodeBase64Chunked(byteArray3);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints((long) 8176);
      mockRandom0.nextBoolean();
      BigInteger bigInteger0 = new BigInteger(8176, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(false);
      int int0 = Base64.MIME_CHUNK_SIZE;
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.decode(byteArray1);
      Base64 base64_1 = new Base64(false);
      base64_1.readResults(byteArray1, (-511), (-511));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(8234);
      BigInteger bigInteger0 = new BigInteger(8234, mockRandom0);
      byte[] byteArray0 = new byte[23];
      byteArray0[4] = (byte)0;
      byte byte0 = (byte)45;
      byteArray0[7] = (byte)45;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64((byte)0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, false);
      byte[] byteArray3 = Base64.decodeBase64("");
      Base64.encodeBase64URLSafe(byteArray2);
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray2);
      base64_0.encode(byteArray4);
      base64_0.readResults(byteArray3, 1354, 1354);
      byte[] byteArray5 = new byte[9];
      byteArray5[0] = (byte)45;
      byteArray5[1] = (byte)45;
      // Undeclared exception!
      Base64.encodeBase64URLSafe(byteArray2);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints((long) 8176);
      mockRandom0.nextBoolean();
      BigInteger bigInteger0 = new BigInteger(8176, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(false);
      int int0 = Base64.MIME_CHUNK_SIZE;
      base64_0.encode(byteArray0, 110, 1);
      Base64.decodeInteger(byteArray0);
      base64_0.encode(byteArray0, 8106, (-1970));
      Base64 base64_1 = null;
      try {
        base64_1 = new Base64(76, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [AQAAAAIAAAADAAAABAAAAAUAAAAGAAAABwAAAAgAAAAJAAAACgAAAAsAAAAMAAAADQAAAA4AAAAPAAAAEAAAABEAAAASAAAAEwAAABQAAAAVAAAAFgAAABcAAAAYAAAAGQAAABoAAAAbAAAAHAAAAB0AAAAeAAAAHwAAACAAAAAhAAAAIgAAACMAAAAkAAAAJQAAACYAAAAnAAAAKAAAACkAAAAqAAAAKwAAACwAAAAtAAAALgAAAC8AAAAwAAAAMQAAADIAAAAzAAAANAAAADUAAAA2AAAANwAAADgAAAA5AAAAOgAAADsAAAA8AAAAPQAAAD4AAAA/AAAAQAAAAEEAAABCAAAAQwAAAEQAAABFAAAARgAAAEcAAABIAAAASQAAAEoAAABLAAAATAAAAE0AAABOAAAATwAAAFAAAABRAAAAUgAAAFMAAABUAAAAVQAAAFYAAABXAAAAWAAAAFkAAABaAAAAWwAAAFwAAABdAAAAXgAAAF8AAABgAAAAYQAAAGIAAABjAAAAZAAAAGUAAABmAAAAZwAAAGgAAABpAAAAagAAAGsAAABsAAAAbQAAAG4AAABvAAAAcAAAAHEAAAByAAAAcwAAAHQAAAB1AAAAdgAAAHcAAAB4AAAAeQAAAHoAAAB7AAAAfAAAAH0AAAB+AAAAfwAAAIAAAACBAAAAggAAAIMAAACEAAAAhQAAAIYAAACHAAAAiAAAAIkAAACKAAAAiwAAAIwAAACNAAAAjgAAAI8AAACQAAAAkQAAAJIAAACTAAAAlAAAAJUAAACWAAAAlwAAAJgAAACZAAAAmgAAAJsAAACcAAAAnQAAAJ4AAACfAAAAoAAAAKEAAACiAAAAowAAAKQAAAClAAAApgAAAKcAAACoAAAAqQAAAKoAAACrAAAArAAAAK0AAACuAAAArwAAALAAAACxAAAAsgAAALMAAAC0AAAAtQAAALYAAAC3AAAAuAAAALkAAAC6AAAAuwAAALwAAAC9AAAAvgAAAL8AAADAAAAAwQAAAMIAAADDAAAAxAAAAMUAAADGAAAAxwAAAMgAAADJAAAAygAAAMsAAADMAAAAzQAAAM4AAADPAAAA0AAAANEAAADSAAAA0wAAANQAAADVAAAA1gAAANcAAADYAAAA2QAAANoAAADbAAAA3AAAAN0AAADeAAAA3wAAAOAAAADhAAAA4gAAAOMAAADkAAAA5QAAAOYAAADnAAAA6AAAAOkAAADqAAAA6wAAAOwAAADtAAAA7gAAAO8AAADwAAAA8QAAAPIAAADzAAAA9AAAAPUAAAD2AAAA9wAAAPgAAAD5AAAA+gAAAPsAAAD8AAAA/QAAAP4AAAD/AA==]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints((long) 8176);
      mockRandom0.nextBoolean();
      BigInteger bigInteger0 = new BigInteger(8176, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(true);
      int int0 = Base64.MIME_CHUNK_SIZE;
      base64_0.encode(byteArray0, 110, 1);
      Base64.decodeInteger(byteArray0);
      base64_0.encode(byteArray0, 8106, (-1970));
      Base64 base64_1 = null;
      try {
        base64_1 = new Base64(76, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [AQAAAAIAAAADAAAABAAAAAUAAAAGAAAABwAAAAgAAAAJAAAACgAAAAsAAAAMAAAADQAAAA4AAAAPAAAAEAAAABEAAAASAAAAEwAAABQAAAAVAAAAFgAAABcAAAAYAAAAGQAAABoAAAAbAAAAHAAAAB0AAAAeAAAAHwAAACAAAAAhAAAAIgAAACMAAAAkAAAAJQAAACYAAAAnAAAAKAAAACkAAAAqAAAAKwAAACwAAAAtAAAALgAAAC8AAAAwAAAAMQAAADIAAAAzAAAANAAAADUAAAA2AAAANwAAADgAAAA5AAAAOgAAADsAAAA8AAAAPQAAAD4AAAA/AAAAQAAAAEEAAABCAAAAQwAAAEQAAABFAAAARgAAAEcAAABIAAAASQAAAEoAAABLAAAATAAAAE0AAABOAAAATwAAAFAAAABRAAAAUgAAAFMAAABUAAAAVQAAAFYAAABXAAAAWAAAAFkAAABaAAAAWwAAAFwAAABdAAAAXgAAAF8AAABgAAAAYQAAAGIAAABjAAAAZAAAAGUAAABmAAAAZwAAAGgAAABpAAAAagAAAGsAAABsAAAAbQAAAG4AAABvAAAAcAAAAHEAAAByAAAAcwAAAHQAAAB1AAAAdgAAAHcAAAB4AAAAeQAAAHoAAAB7AAAAfAAAAH0AAAB+AAAAfwAAAIAAAACBAAAAggAAAIMAAACEAAAAhQAAAIYAAACHAAAAiAAAAIkAAACKAAAAiwAAAIwAAACNAAAAjgAAAI8AAACQAAAAkQAAAJIAAACTAAAAlAAAAJUAAACWAAAAlwAAAJgAAACZAAAAmgAAAJsAAACcAAAAnQAAAJ4AAACfAAAAoAAAAKEAAACiAAAAowAAAKQAAAClAAAApgAAAKcAAACoAAAAqQAAAKoAAACrAAAArAAAAK0AAACuAAAArwAAALAAAACxAAAAsgAAALMAAAC0AAAAtQAAALYAAAC3AAAAuAAAALkAAAC6AAAAuwAAALwAAAC9AAAAvgAAAL8AAADAAAAAwQAAAMIAAADDAAAAxAAAAMUAAADGAAAAxwAAAMgAAADJAAAAygAAAMsAAADMAAAAzQAAAM4AAADPAAAA0AAAANEAAADSAAAA0wAAANQAAADVAAAA1gAAANcAAADYAAAA2QAAANoAAADbAAAA3AAAAN0AAADeAAAA3wAAAOAAAADhAAAA4gAAAOMAAADkAAAA5QAAAOYAAADnAAAA6AAAAOkAAADqAAAA6wAAAOwAAADtAAAA7gAAAO8AAADwAAAA8QAAAPIAAADzAAAA9AAAAPUAAAD2AAAA9wAAAPgAAAD5AAAA+gAAAPsAAAD8AAAA/QAAAP4AAAD/AA==]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      BigInteger bigInteger0 = new BigInteger(8196, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      mockRandom0.setSeed((-1L));
      Base64 base64_0 = new Base64(31);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      base64_0.decode(byteArray1, 235, 235);
      base64_0.decode(byteArray0, 1024, 1);
      base64_0.decode(byteArray0, 82, 1024);
      base64_0.readResults(byteArray0, 1, 31);
      base64_0.decode(byteArray0);
      try { 
        base64_0.encode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      mockRandom1.ints((long) 8176);
      mockRandom1.nextBoolean();
      BigInteger bigInteger0 = new BigInteger(8176, mockRandom1);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64URLSafeString(byteArray0);
      mockRandom1.nextInt(101);
      base64_0.encode(byteArray1, 101, 101);
      Base64.decodeInteger(byteArray1);
      byte[] byteArray2 = new byte[0];
      base64_0.encode(byteArray2, 101, (-511));
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8176, mockRandom1);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(94);
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.encode(byteArray1, 94, 94);
      base64_0.decode(byteArray0, 94, (-1857));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      BigInteger bigInteger0 = new BigInteger(8196, mockRandom0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64Chunked(byteArray1);
      Base64.decodeInteger(byteArray1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      BigInteger bigInteger0 = new BigInteger(8176, mockRandom0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      Base64.decodeBase64(byteArray0);
      Base64.encodeBase64Chunked(byteArray1);
      base64_0.decode(byteArray1, 76, 8176);
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)47;
      byteArray2[1] = (byte) (-52);
      byteArray2[2] = (byte)40;
      Base64.isBase64(byteArray2);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      BigInteger bigInteger1 = new BigInteger(8176, mockRandom0);
      Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte)113;
      byteArray0[4] = (byte) (-103);
      byteArray0[5] = (byte)72;
      byteArray0[6] = (byte) (-8);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      base64_0.decode(byteArray1, 0, (int) (byte)113);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      BigInteger bigInteger0 = new BigInteger(8176, mockRandom0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(94);
      base64_0.encode(byteArray1, 56, 80);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      MockRandom mockRandom0 = new MockRandom();
      int int0 = 8176;
      mockRandom0.nextGaussian();
      BigInteger bigInteger0 = new BigInteger(1717986918, mockRandom0);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      BigInteger bigInteger0 = new BigInteger(8176, mockRandom0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(8176);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      assertEquals(1868, byteArray2.length);
      
      base64_0.decode(byteArray1, 76, 8176);
      assertEquals(1364, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)9;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 345);
      assertEquals(12, byteArray1.length);
      
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-60);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(14, byteArray2.length);
      
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-50);
      base64_0.decode(byteArray0, 0, (-102));
      byteArray0[5] = (byte) (-119);
      byteArray0[6] = (byte)0;
      base64_0.encode(byteArray0, 559, (-729));
      byte[] byteArray3 = Base64.discardWhitespace(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-60), (byte)0, (byte) (-50), (byte) (-119), (byte)0}, byteArray3);
      
      byte[] byteArray4 = new byte[9];
      byteArray4[0] = (byte) (-50);
      byteArray4[1] = (byte)0;
      byteArray4[2] = (byte)0;
      byteArray4[3] = (byte)0;
      byteArray4[4] = (byte) (-50);
      byteArray4[5] = (byte) (-119);
      byteArray4[6] = (byte) (-119);
      byteArray4[7] = (byte)10;
      byteArray4[8] = (byte) (-119);
      base64_0.encode(byteArray4, (int) (byte) (-119), (int) (byte)10);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)6;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, (int) (byte)6);
      assertEquals(5, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Base64 base64_0 = new Base64((byte)0);
      byte[] byteArray0 = new byte[18];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, (int) (byte)0, (int) (byte)104);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 26
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(61, byteArray0);
      Object object0 = base64_0.decode((Object) "Parameter supplied to Base64 encode is not a byte[]");
      // Undeclared exception!
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)59;
      byteArray0[8] = (byte)26;
      base64_0.decode(byteArray0, 0, 4);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.decodeInteger(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      base64_0.decode((Object) "");
      base64_0.encode(byteArray0, (-2135684286), (-2135684286));
      boolean boolean1 = base64_0.hasData();
      assertTrue(boolean1 == boolean0);
      assertTrue(base64_0.isUrlSafe());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Base64 base64_0 = new Base64(388);
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte)0;
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-88);
      byteArray1[1] = (byte)120;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, (int) (byte)1, (int) (byte)28);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = BigInteger.TEN;
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(8, byteArray0, true);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)55;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)1;
      byteArray1[3] = (byte)1;
      byteArray1[4] = (byte)118;
      byteArray1[5] = (byte)62;
      byteArray1[6] = (byte)92;
      byteArray1[7] = (byte)108;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = Base64.decodeBase64("ISO-8859-1");
      assertArrayEquals(new byte[] {(byte)33, (byte)35, (byte) (-66), (byte) (-13), (byte) (-50), (byte)125, (byte) (-5)}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      Base64 base64_1 = new Base64(false);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)32;
      byteArray1[1] = (byte)65;
      byteArray1[2] = (byte)2;
      byteArray1[3] = (byte)48;
      byteArray1[4] = (byte) (-86);
      byteArray1[5] = (byte)58;
      byteArray1[6] = (byte) (-97);
      byteArray1[7] = (byte) (-81);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      assertArrayEquals(new byte[] {(byte)65, (byte)2, (byte)48, (byte) (-86), (byte)58, (byte) (-97), (byte) (-81)}, byteArray2);
      
      boolean boolean0 = base64_0.hasData();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)9;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)100;
      byteArray1[3] = (byte)61;
      byteArray1[4] = (byte)102;
      Base64.isArrayByteBase64(byteArray1);
      Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64(byteArray1, false, true, (int) (byte)102);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(65, byteArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\t\u0000d=f]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte) (-37);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)127;
      byteArray0[6] = (byte) (-4);
      byteArray0[7] = (byte) (-1);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)0, 1050);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.shortValueExact();
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(false);
      Base64 base64_1 = new Base64(64, byteArray0, false);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)81;
      byteArray1[1] = (byte)4;
      byteArray1[2] = (byte)4;
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      assertEquals(11, byteArray2.length);
      
      byteArray1[3] = (byte) (-124);
      byteArray1[4] = (byte)10;
      byteArray1[5] = (byte) (-27);
      byteArray1[6] = (byte) (-72);
      byteArray1[7] = (byte) (-104);
      base64_1.decode(byteArray1, (int) (byte)4, 3);
      assertFalse(base64_1.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = Base64.decodeBase64("ISO-8859-1");
      Base64 base64_1 = new Base64(false);
      Object object0 = base64_0.decode((Object) "ISO-8859-1");
      Object object1 = base64_1.encode(object0);
      assertNotSame(object1, object0);
      
      Object object2 = new Object();
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)33, (byte)35, (byte) (-66), (byte) (-13), (byte) (-50), (byte)125, (byte) (-5)}, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64.encodeBase64URLSafeString((byte[]) null);
      try { 
        base64_0.encode((Object) base64_0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Input array too big, the output array would be bigger (");
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64(byteArray2);
      Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(2);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 2, 441);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(3, byteArray0, true);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)0, 996);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Base64 base64_0 = new Base64(2681);
      Base64 base64_1 = new Base64(false);
      Base64 base64_2 = new Base64(true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, 419);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Object object0 = base64_0.decode((Object) "");
      Object object1 = base64_0.decode(object0);
      assertSame(object1, object0);
      
      String string0 = Base64.encodeBase64String((byte[]) null);
      assertNull(string0);
      
      byte[] byteArray0 = new byte[0];
      Base64 base64_1 = new Base64((-2738), byteArray0, false);
      assertFalse(base64_1.isUrlSafe());
      
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Input array too big, the output array would be bigger (");
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64(byteArray2);
      Base64 base64_0 = new Base64(1);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 1, 1192);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 46
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64 base64_0 = new Base64(true);
      boolean boolean0 = base64_0.isUrlSafe();
      //  // Unstable assertion: assertTrue(boolean0);
      
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = BigInteger.TEN;
      bigInteger0.shiftRight(76);
      Base64.isArrayByteBase64(byteArray0);
      String string0 = base64_0.encodeToString(byteArray0);
      //  // Unstable assertion: assertEquals("", string0);
      
      String string1 = Base64.encodeBase64URLSafeString(byteArray1);
      //  // Unstable assertion: assertEquals("Pz8", string1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte) (-107);
      byteArray0[6] = (byte)107;
      byteArray0[7] = (byte)31;
      byteArray0[8] = (byte)10;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger0.or(bigInteger1);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray1);
      assertEquals(4, byteArray1.length);
      
      Base64 base64_0 = new Base64();
      base64_0.decode((String) null);
      byte[] byteArray2 = base64_0.decode("~7y");
      assertArrayEquals(new byte[] {(byte) (-17)}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Base64 base64_0 = new Base64(2681);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64((-4299), (byte[]) null);
      Base64.encodeBase64URLSafe((byte[]) null);
      base64_0.encodeToString((byte[]) null);
      base64_0.encodeToString((byte[]) null);
      base64_0.hasData();
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, (-3890), 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0, (int) (byte)0, 1);
      BigInteger bigInteger0 = BigInteger.TEN;
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("AAAA", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64(38, byteArray1, false);
      Base64.decodeBase64(byteArray0);
      base64_0.isUrlSafe();
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.shiftRight(108);
      Base64.isArrayByteBase64(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Input array too big, the output array would be bigger (");
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      bigInteger0.toString();
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64(byteArray2);
      bigInteger0.intValue();
      Base64.decodeInteger(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, false, true, 68);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray3, true, false, (-127));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (62) than the specified maxium size of -127
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte)63;
      byteArray0[6] = (byte)63;
      byteArray0[7] = (byte)63;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.isBase64((byte)61);
      Base64.decodeBase64(byteArray1);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)63;
      byteArray2[1] = (byte) (-81);
      Base64.decodeInteger(byteArray2);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte) (-28);
      byteArray0[5] = (byte) (-28);
      byteArray0[6] = (byte) (-28);
      byteArray0[7] = (byte) (-28);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte) (-28);
      Base64 base64_0 = new Base64();
      base64_0.isUrlSafe();
      byte[] byteArray3 = Base64.CHUNK_SEPARATOR;
      Base64.isArrayByteBase64(byteArray1);
      base64_0.encodeToString(byteArray2);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)115;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)63;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)75;
      Base64.encodeBase64URLSafe(byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.intValue();
      BigInteger bigInteger1 = BigInteger.TEN;
      Base64.encodeBase64((byte[]) null, false, false, (-2494));
      Base64.encodeBase64((byte[]) null, false, true, 40);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = null;
      Base64.decodeBase64((byte[]) null);
      Base64 base64_0 = new Base64(true);
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, 57, 144);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-1);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray0, (int) (byte) (-1), (int) (byte) (-1));
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64(byteArray1, false);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      Base64.isArrayByteBase64(byteArray1);
      base64_0.encodeToString(byteArray1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)2;
      Base64.isBase64(byteArray0);
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.isUrlSafe();
      base64_0.decode((byte[]) null);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.or(bigInteger1);
      bigInteger1.getLowestSetBit();
      bigInteger0.shiftRight((-2727));
      Base64.encodeInteger(bigInteger1);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Input array too big, the output array would be bigger (");
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.subtract(bigInteger0);
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger1);
      Base64.isBase64(byteArray1);
      Base64 base64_0 = new Base64(1994, byteArray2);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray2, 13, 13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Base64 base64_0 = new Base64(2681);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte) (-28);
      byteArray0[5] = (byte)19;
      byteArray0[6] = (byte) (-28);
      Base64.decodeBase64(byteArray0);
      base64_0.isUrlSafe();
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-28);
      byteArray1[1] = (byte)19;
      byteArray1[2] = (byte)63;
      byteArray1[3] = (byte) (-28);
      byteArray1[4] = (byte)19;
      byteArray1[5] = (byte) (-28);
      byteArray1[6] = (byte) (-93);
      byteArray1[7] = (byte) (-28);
      byteArray1[8] = (byte) (-28);
      base64_0.decode(byteArray1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.shiftRight((-113));
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Base64 base64_0 = new Base64((-113));
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      base64_0.hasData();
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.multiply(bigInteger1);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_1 = new Base64((-545), byteArray0);
      Base64.encodeBase64Chunked(byteArray1);
      Base64.isBase64(".: Yw(d");
      base64_0.decode(".: Yw(d");
      Base64.isBase64("~)-?xC");
      Base64.isBase64((byte) (-19));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Base64.isBase64("encodeInteger called with null parameter");
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.longValueExact();
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.add(bigInteger0);
      bigInteger0.subtract(bigInteger1);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64(byteArray1);
      Base64.encodeBase64(byteArray0, false, false);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte) (-37);
      byteArray2[1] = (byte) (-71);
      byteArray2[2] = (byte) (-1);
      byteArray2[3] = (byte)1;
      byteArray2[4] = (byte) (-85);
      Base64.encodeBase64Chunked(byteArray2);
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-40);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)44;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64((-2440), byteArray1);
      Base64.encodeBase64((byte[]) null);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, true);
      Base64.discardWhitespace(byteArray2);
      Base64.isBase64("~)-?xC");
      Base64 base64_1 = new Base64((-3969));
      base64_0.encodeToString((byte[]) null);
      byte[] byteArray3 = new byte[0];
      base64_1.readResults(byteArray3, (byte)0, (-2220));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)75;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray0);
      base64_0.decode(byteArray0, 3614, (-2967));
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      Base64.decodeBase64((String) null);
      Base64.encodeBase64URLSafeString(byteArray2);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Base64 base64_0 = new Base64((-113));
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      base64_0.hasData();
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = BigInteger.ONE;
      bigInteger0.multiply(bigInteger2);
      boolean boolean0 = false;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64.discardWhitespace(byteArray1);
      int int0 = (-545);
      Base64 base64_1 = null;
      try {
        base64_1 = new Base64(1905, byteArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [AAAAAAAA!?]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(6);
      base64_0.encode(byteArray0, 650, (-5558));
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_1 = new Base64((-3027), byteArray0);
      base64_1.readResults(byteArray1, (-1), 1594);
      byte[] byteArray2 = base64_1.encode(byteArray0);
      Base64 base64_2 = new Base64(650);
      base64_2.decode("]");
      Base64.decodeBase64(byteArray0);
      base64_0.encodeToString(byteArray2);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)8;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(276);
      base64_0.encode(byteArray0, (int) (byte)63, (-1));
      Base64.decodeBase64(byteArray0);
      byte[] byteArray1 = new byte[0];
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray1, 27, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)32;
      byteArray0[0] = (byte)32;
      byte byte1 = (byte)75;
      byteArray0[1] = (byte)75;
      Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0, 62, (-1));
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)46;
      byteArray1[2] = (byte)32;
      BigInteger bigInteger1 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigInteger0.modInverse(bigInteger1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)20;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)20);
      base64_0.readResults(byteArray0, 661, 1074);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)2;
      byteArray1[1] = (byte)2;
      byteArray1[2] = (byte)2;
      Base64.encodeBase64String(byteArray1);
      Base64.encodeBase64(byteArray1, false);
      Base64.encodeBase64Chunked(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 0, 2944);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)2;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)20);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.isBase64((byte)125);
      int int0 = (-1711);
      Base64 base64_1 = new Base64((-1002));
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray0, (-1002), 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1002
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)45;
      byte byte0 = (byte)67;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte) (-30);
      byte byte1 = (byte)36;
      byteArray0[5] = (byte)36;
      byteArray0[6] = (byte) (-77);
      byteArray0[7] = (byte) (-106);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      Base64 base64_0 = new Base64(0, (byte[]) null);
      Base64.encodeBase64(byteArray2);
      base64_0.decode("KQ%s|RH)F];;f{?");
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, false, false);
      Base64.encodeBase64Chunked(byteArray3);
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Input array too big, the output array would be bigger (");
      Base64 base64_0 = new Base64((-113));
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      base64_0.hasData();
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.multiply(bigInteger1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false, false);
      byte[] byteArray3 = Base64.discardWhitespace(byteArray1);
      Base64 base64_1 = new Base64((-545), byteArray1);
      Base64.encodeBase64(byteArray2, true, false);
      Base64.encodeBase64Chunked(byteArray3);
      Base64.isBase64(".: Yw(d");
      base64_0.decode(".: Yw(d");
      Base64.isBase64("~)-?xC");
      base64_1.readResults(byteArray0, 1, 76);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte) (-30);
      byteArray0[5] = (byte)36;
      byteArray0[6] = (byte) (-77);
      byteArray0[7] = (byte) (-106);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      Base64 base64_0 = new Base64(0, (byte[]) null);
      Base64.encodeBase64(byteArray1);
      Base64.encodeBase64((byte[]) null, false, false);
      Base64.encodeBase64Chunked(byteArray2);
      String string0 = null;
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)2;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)20);
      base64_0.readResults(byteArray0, 0, (byte)2);
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray2 = base64_0.encode(byteArray0);
      base64_0.avail();
      Base64.isBase64(byteArray0);
      base64_0.decode(byteArray2, 0, 0);
      Base64.encodeInteger(bigInteger0);
      Base64.encodeInteger(bigInteger0);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, false, false, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)81;
      byteArray0[0] = (byte)124;
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64((byte)124, byteArray0);
      boolean boolean0 = true;
      Base64.encodeBase64(byteArray0, true, true);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.isBase64((byte)81);
      Base64 base64_1 = new Base64(1091);
      Object object0 = new Object();
      base64_1.encode(byteArray1, 459, (int) (byte)0);
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)124, 301);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 124
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)67;
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)67, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [CC]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)2;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)20);
      Base64.encodeBase64(byteArray0, true);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      base64_0.encodeToString(byteArray1);
      base64_0.isUrlSafe();
      base64_0.decode(byteArray1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.shiftRight(0);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      Base64.decodeInteger(byteArray2);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte) (-114);
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte)83;
      byteArray0[6] = (byte) (-51);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)78;
      Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)54;
      byteArray1[1] = (byte)114;
      Base64.encodeBase64(byteArray1, false);
      byteArray1[2] = (byte)0;
      Base64.decodeBase64(byteArray1);
      base64_0.isUrlSafe();
      base64_0.decode(byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.shiftRight((byte)78);
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)114;
      byteArray2[1] = (byte)111;
      byteArray2[2] = (byte)83;
      Base64.decodeInteger(byteArray2);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte) (-30);
      byteArray0[5] = (byte)36;
      byteArray0[6] = (byte) (-77);
      byteArray0[7] = (byte) (-106);
      boolean boolean0 = false;
      Base64.decodeInteger(byteArray0);
      Base64.encodeBase64(byteArray0, true, false, (int) (byte)45);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)36, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000-C\r\uFFFD$\uFFFD\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)2;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)20);
      base64_0.readResults(byteArray0, 0, (byte)2);
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray3 = base64_0.encode(byteArray0);
      base64_0.avail();
      Base64.isBase64(byteArray0);
      base64_0.decode(byteArray3, 0, 0);
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray4 = Base64.encodeInteger(bigInteger0);
      Base64.decodeBase64(byteArray3);
      base64_0.encode(byteArray3, (int) (byte)20, 8);
      Base64.decodeBase64(byteArray4);
      base64_0.hasData();
      base64_0.encodeToString(byteArray4);
      base64_0.hasData();
      Base64.encodeBase64(byteArray2);
      base64_0.decode("Lh*LO'mA}+");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)2;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)20);
      base64_0.readResults(byteArray0, 0, 0);
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64(byteArray0, false);
      Base64.encodeBase64Chunked(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)91, 6403);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 91
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      Base64 base64_0 = new Base64(47);
      base64_0.readResults(byteArray0, 590, (byte)0);
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      bigInteger0.intValue();
      Base64.decodeInteger(byteArray1);
      Base64.encodeBase64(byteArray3, false, false, 1431655765);
      byte[] byteArray4 = new byte[4];
      byteArray4[0] = (byte)0;
      byteArray4[1] = (byte) (-79);
      byteArray4[2] = (byte)0;
      byteArray4[3] = (byte) (-40);
      base64_0.decode(byteArray4, 0, 590);
      base64_0.encodeToString(byteArray4);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray3, true, true, (-4587));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (50) than the specified maxium size of -4587
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Base64.isBase64((byte)0);
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, (-1));
      base64_0.decode(byteArray0, (-1), (-1557));
      Base64 base64_1 = new Base64(false);
      base64_1.encodeToString(byteArray1);
      Base64.encodeBase64(byteArray1, false, false, 1175);
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)5;
      byteArray2[3] = (byte)88;
      byteArray2[4] = (byte)0;
      base64_0.encode(byteArray0, (int) (byte)0, (int) (byte)0);
      byteArray2[5] = (byte)12;
      byteArray2[6] = (byte)67;
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      Base64.isArrayByteBase64(byteArray2);
      base64_0.encodeToString(byteArray1);
      Base64.encodeBase64(byteArray0, true, true, (-653));
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)0;
      Base64.encodeBase64(byteArray0);
      byteArray0[5] = (byte) (-107);
      base64_0.decode((Object) "UTF-16LE");
      base64_0.encode(byteArray0, (int) (byte) (-107), 2117);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte) (-15);
      Base64 base64_0 = new Base64((byte)93, byteArray0);
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64(byteArray0);
      base64_0.decode("");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)67;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64.encodeBase64(byteArray1, false, false);
      Base64 base64_0 = new Base64(true);
      base64_0.encodeToString(byteArray2);
      base64_0.decode(byteArray0);
      base64_0.readResults(byteArray0, 0, 0);
      Base64.isArrayByteBase64(byteArray0);
      String string0 = "";
      Base64.decodeBase64("-A\u0000\u0000");
      try { 
        base64_0.decode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.decodeBase64("buc@Ifk~0");
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.negate();
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      Base64.isBase64(byteArray1);
      Base64.encodeInteger(bigInteger0);
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray3 = Base64.decodeBase64(byteArray2);
      Base64.decodeBase64(byteArray3);
      Base64 base64_0 = new Base64();
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = Base64.isBase64("encodeInteger called with null parameter");
      assertTrue(boolean0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.longValueExact();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64(byteArray1);
      Base64 base64_0 = new Base64(9, byteArray1);
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = base64_0.decode("UTF-8");
      assertArrayEquals(new byte[] {(byte)81, (byte)49, (byte)126}, byteArray2);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(3, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      int int0 = 2681;
      Base64 base64_0 = new Base64(2681);
      byte[] byteArray0 = null;
      boolean boolean0 = false;
      Base64.encodeBase64((byte[]) null, false);
      Object object0 = new Object();
      try { 
        base64_0.encode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-73);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64((byte)0, byteArray0, false);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-73);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-73);
      byteArray1[3] = (byte) (-73);
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)0;
      base64_0.encodeToString(byteArray1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)66;
      Base64.encodeBase64URLSafe(byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.shiftRight(0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = bigInteger0.negate();
      base64_0.decode(byteArray0, (-3000), 0);
      Base64.encodeBase64(byteArray0, true, true);
      base64_0.encode(byteArray1);
      try { 
        base64_0.encode((Object) bigInteger1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)20;
      byte byte0 = (byte)2;
      byteArray0[1] = (byte)2;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)20);
      base64_0.readResults(byteArray0, 0, 0);
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64(byteArray0);
      base64_0.encode(byteArray0);
      bigInteger0.intValue();
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)2;
      byteArray2[1] = (byte)2;
      byteArray2[2] = (byte)20;
      byteArray2[3] = (byte)20;
      byteArray2[4] = (byte)20;
      byteArray2[5] = (byte)2;
      byteArray2[6] = (byte)20;
      Base64.decodeInteger(byteArray2);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, false, true, (int) (byte)2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of 2
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      Base64 base64_0 = new Base64(true);
      base64_0.readResults(byteArray2, (byte)0, 0);
      Base64.decodeInteger(byteArray1);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (-1517), 1706);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1517
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = "Input array too big, the output array would be bigger (";
      byte[] byteArray0 = Base64.decodeBase64("Input array too big, the output array would be bigger (");
      int int0 = (-113);
      Base64 base64_0 = new Base64((-113));
      Base64.encodeBase64(byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      base64_0.hasData();
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.multiply(bigInteger1);
      Object object0 = null;
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64(0, (byte[]) null);
      Base64.isBase64("");
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.encodeBase64Chunked((byte[]) null);
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)44;
      byteArray0[7] = (byte)124;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.isBase64((byte)0);
      Base64 base64_0 = new Base64((-1711));
      Object object0 = new Object();
      base64_0.encode(byteArray2, 0, (-1711));
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Base64.isBase64((byte)0);
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger0);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)115;
      byteArray0[0] = (byte)115;
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      boolean boolean0 = true;
      Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)0, byteArray1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [cwA]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte) (-52);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte) (-41);
      Base64.encodeBase64(byteArray0, false, false);
      Base64.decodeBase64("");
      byte[] byteArray1 = Base64.decodeBase64("");
      base64_0.encode((byte[]) null);
      base64_0.decode((byte[]) null, 0, 0);
      Base64.isArrayByteBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte) (-61);
      Base64.decodeBase64(byteArray0);
      byteArray0[1] = (byte) (-61);
      byte byte2 = (byte)0;
      byteArray0[2] = (byte)0;
      int int0 = 168;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 717, 168);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 717
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)0;
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Base64 base64_0 = new Base64(1224);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-24);
      base64_0.decode(byteArray0, 1224, (int) (byte) (-24));
      Base64.isBase64("Gkpm |I'B,sz");
      Base64.encodeBase64String(byteArray0);
      base64_0.decode(byteArray0, (-2527), (-2527));
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      base64_0.readResults(byteArray0, 0, 0);
      base64_0.decode(byteArray0, 0, (-285));
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = new BigInteger(byteArray1);
      bigInteger1.modPow(bigInteger0, bigInteger0);
      bigInteger0.xor(bigInteger1);
      Base64.encodeInteger(bigInteger0);
      Base64.toIntegerBytes(bigInteger0);
      Base64.decodeBase64("yip7ZI]u2hao)gvo");
      Base64.isBase64("]");
      Base64.encodeBase64URLSafe(byteArray2);
      Base64.encodeBase64Chunked(byteArray1);
      Base64.isBase64(byteArray0);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.longValueExact();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64(byteArray1);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [Cg==]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)62;
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)54;
      Base64.encodeBase64(byteArray0, false, true);
      Base64 base64_0 = new Base64((byte)54);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte)105;
      byteArray0[6] = (byte) (-75);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      Base64.decodeBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)47;
      byte byte0 = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-126);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [=/\u0000\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.intValueExact();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(false);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.min(bigInteger1);
      String string0 = "&m";
      BigInteger bigInteger2 = BigInteger.ONE;
      bigInteger0.divideAndRemainder(bigInteger2);
      int int0 = 1;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, true, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of 1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000}\u00000\u0001\u0000\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)72;
      byteArray0[5] = (byte) (-83);
      byteArray0[6] = (byte) (-31);
      byteArray0[7] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.decodeInteger(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte) (-97);
      byteArray2[1] = (byte)72;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)18;
      base64_0.encodeToString(byteArray2);
      base64_0.decode(byteArray0, (int) (byte)72, 2075);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64();
      int int0 = 680;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, 680, 680);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 680
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Base64.encodeBase64String((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Base64 base64_0 = new Base64(2453);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-37);
      byteArray0[7] = (byte) (-87);
      base64_0.encodeToString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte) (-14);
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte) (-126);
      byteArray0[7] = (byte)0;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-1890), byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000\u0000{\uFFFD\uFFFDp\uFFFD\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-107);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte) (-107), 2117);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -107
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = "encodeInteger called with null parameter";
      Base64.isBase64("encodeInteger called with null parameter");
      Base64 base64_0 = new Base64(9);
      byte[] byteArray0 = new byte[3];
      Base64.encodeBase64(byteArray0, true);
      byte byte0 = (byte)0;
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)103;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, (-2400));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of -2400
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)45;
      byte byte0 = (byte)67;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte) (-30);
      byte byte1 = (byte)36;
      byteArray0[5] = (byte)36;
      byteArray0[6] = (byte) (-77);
      byteArray0[7] = (byte) (-106);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      Base64 base64_0 = new Base64(0, (byte[]) null);
      Base64.encodeBase64(byteArray2);
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, false, false);
      Base64.encodeBase64Chunked(byteArray3);
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Base64.isBase64("bBZ2N>q[1-9");
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)103;
      byteArray0[0] = (byte)103;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      // Undeclared exception!
      try { 
        bigInteger0.testBit((-3208));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Negative bit address
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte) (-15);
      byteArray0[5] = (byte)55;
      Base64.discardWhitespace(byteArray0);
      MockRandom mockRandom0 = new MockRandom((-3480L));
      // Undeclared exception!
      try { 
        BigInteger.probablePrime((byte)0, mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // bitLength < 2
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte) (-35);
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("AM3d", string0);
  }
}
