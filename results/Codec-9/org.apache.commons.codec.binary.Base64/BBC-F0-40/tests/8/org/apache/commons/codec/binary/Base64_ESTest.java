/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:06:34 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64((-1113));
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 122, 1311);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 122
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1273);
      BigInteger bigInteger0 = new BigInteger(8004, mockRandom0);
      Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = bigInteger0.shiftLeft(8004);
      BigInteger bigInteger2 = BigInteger.ONE;
      bigInteger1.or(bigInteger2);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_1 = new Base64(false);
      Base64.encodeInteger(bigInteger1);
      base64_1.encode(byteArray0, 64, (-718));
      BigInteger bigInteger3 = Base64.decodeInteger(byteArray0);
      Base64.toIntegerBytes(bigInteger3);
      // Undeclared exception!
      base64_0.encode(byteArray1, 672, 8004);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1273);
      BigInteger bigInteger0 = new BigInteger(4032, mockRandom0);
      Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = bigInteger0.shiftLeft(4032);
      bigInteger0.abs();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray1, 68, 1273);
      base64_0.readResults(byteArray2, 45, 291);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1296);
      int int0 = 8004;
      BigInteger bigInteger0 = new BigInteger(8004, mockRandom0);
      BigInteger bigInteger1 = bigInteger0.pow(1296);
      BigInteger bigInteger2 = bigInteger0.shiftLeft(int0);
      int int1 = 0;
      bigInteger2.clearBit(int1);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger2);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      Base64.encodeBase64(byteArray0);
      Base64.encodeBase64Chunked(byteArray1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1273);
      BigInteger bigInteger0 = new BigInteger(8004, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = bigInteger0.shiftLeft(8004);
      bigInteger0.abs();
      BigInteger bigInteger2 = BigInteger.ZERO;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      Base64.encodeBase64Chunked(byteArray2);
      Base64.encodeBase64(byteArray1);
      // Undeclared exception!
      Base64.encodeBase64Chunked(byteArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-20);
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)86;
      Base64.isBase64(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1273);
      BigInteger bigInteger0 = new BigInteger(4032, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = bigInteger0.shiftLeft(4032);
      bigInteger0.abs();
      BigInteger bigInteger2 = BigInteger.ZERO;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      Base64.encodeBase64(byteArray2);
      Base64.encodeBase64Chunked(byteArray3);
      Base64 base64_0 = new Base64(1273);
      base64_0.encode(byteArray0);
      // Undeclared exception!
      base64_0.encode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1273);
      BigInteger bigInteger0 = new BigInteger(4032, mockRandom0);
      Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = bigInteger0.shiftLeft(4032);
      bigInteger0.abs();
      BigInteger bigInteger2 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64.encodeInteger(bigInteger1);
      Base64.encodeBase64(byteArray2);
      Base64.encodeBase64Chunked(byteArray0);
      // Undeclared exception!
      Base64.encodeBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1273);
      BigInteger bigInteger0 = new BigInteger(4032, mockRandom0);
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      base64_0.readResults(byteArray0, 4032, 120);
      base64_0.decode(byteArray1, 486, 5046);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      assertEquals(916, byteArray2.length);
      assertEquals(668, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-24);
      byte byte0 = (byte)23;
      byteArray0[1] = (byte)23;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64((byte) (-24), byteArray1, false);
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte) (-24);
      byteArray2[1] = (byte)23;
      byteArray2[2] = (byte)23;
      byteArray2[3] = (byte)23;
      Object object0 = base64_0.decode((Object) "PU`JnB7hs9 .`v?");
      // Undeclared exception!
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(1284, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_0 = new Base64(true);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray2, 205, 1512);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 390
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1273);
      BigInteger bigInteger0 = new BigInteger(4032, mockRandom0);
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)2, (byte)88}, byteArray0);
      
      MockRandom mockRandom1 = new MockRandom();
      byte[] byteArray1 = bigInteger0.toByteArray();
      bigInteger0.shiftLeft(67);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      //  // Unstable assertion: assertEquals(496, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)61);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(1284, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.isBase64(byteArray1);
      Base64.encodeBase64Chunked(byteArray1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)29;
      Base64 base64_0 = new Base64(6, byteArray0, false);
      Base64.encodeBase64(byteArray0, false, false);
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = new BigInteger(1, byteArray0);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      base64_0.readResults(byteArray0, 1951, 76);
      base64_0.decode(byteArray1, 0, 1951);
      bigInteger0.equals("6!kWf15<)TqC,:yLd");
      Random.setNextRandom(64);
      base64_0.readResults(byteArray2, 1, 1951);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "sXVt}f5qddc";
      byte[] byteArray0 = Base64.decodeBase64("sXVt}f5qddc");
      byte[] byteArray1 = Base64.decodeBase64("sXVt}f5qddc");
      Base64.encodeBase64(byteArray1);
      Base64 base64_0 = new Base64();
      base64_0.readResults(byteArray1, 64, 3259);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 0, 3259);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Base64.isBase64((byte)60);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)60;
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64.encodeBase64(byteArray0);
      int int0 = 1073741824;
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(1073741824, mockRandom0);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64(byteArray1);
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)31;
      byteArray2[1] = (byte)39;
      byte byte0 = (byte) (-92);
      byteArray2[2] = (byte) (-92);
      byteArray2[3] = (byte)1;
      byteArray2[4] = (byte)2;
      byteArray2[5] = (byte)75;
      byteArray2[6] = (byte)56;
      byteArray2[7] = (byte) (-9);
      byteArray2[8] = (byte)32;
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      byte[] byteArray4 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)32, byteArray3, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u001F'\uFFFD\u0001\u0002K8\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64(byteArray0);
      byte[] byteArray2 = new byte[0];
      byte[] byteArray3 = Base64.encodeBase64(byteArray2);
      Base64 base64_0 = new Base64();
      base64_0.readResults(byteArray3, 1951, 1242);
      base64_0.decode(byteArray1, 0, 1951);
      base64_0.encode(byteArray3);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = Base64.decodeBase64("lineSeperator must not contain base64 characters: [");
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray1);
      byte[] byteArray4 = Base64.discardWhitespace(byteArray3);
      byte[] byteArray5 = Base64.encodeBase64(byteArray4);
      Base64 base64_0 = new Base64((-1048), byteArray2);
      byte[] byteArray6 = base64_0.encode(byteArray5);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray6);
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      Base64 base64_1 = new Base64();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte) (-43);
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)2;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      base64_0.readResults(byteArray1, (byte)25, (byte) (-32));
      base64_0.decode(byteArray1, (int) (byte)0, 1354);
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.decodeBase64("UTF-16");
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = Base64.decodeBase64("{m28V&`z`2f|')'Zqd");
      byte[] byteArray3 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray4 = new byte[3];
      byteArray4[0] = (byte)0;
      byteArray4[1] = (byte)0;
      byteArray4[2] = (byte)0;
      Base64.encodeBase64(byteArray4);
      Base64 base64_0 = new Base64(55, byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      base64_0.decode(byteArray2, 1, (int) (byte)0);
      Base64.encodeBase64String(byteArray3);
      byte[] byteArray5 = new byte[4];
      byteArray5[0] = (byte)113;
      byteArray5[1] = (byte)0;
      byteArray5[2] = (byte)0;
      byteArray5[3] = (byte)0;
      Base64.encodeBase64(byteArray5, false, false, 10);
      Base64.decodeInteger(byteArray3);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-86);
      byteArray0[4] = (byte) (-95);
      byteArray0[5] = (byte) (-12);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.or(bigInteger1);
      Base64.toIntegerBytes(bigInteger0);
      bigInteger0.min(bigInteger1);
      Base64 base64_0 = new Base64(430);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.encodeToString(byteArray1);
      Base64.encodeBase64String(byteArray1);
      Base64.isBase64(byteArray1);
      Base64.decodeInteger(byteArray1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Base64.decodeBase64((String) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(65, (byte[]) null);
      Base64.encodeBase64(byteArray0, true, true, 65);
      base64_0.readResults((byte[]) null, (-1620), (-1620));
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 0, 16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Base64.isBase64((byte)57);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte)57;
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.toString(1);
      bigInteger0.doubleValue();
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(6);
      base64_0.decode(byteArray1, (int) (byte)0, 110);
      Base64.isBase64((byte) (-39));
      Base64.discardWhitespace(byteArray1);
      base64_0.avail();
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-95);
      Base64 base64_0 = new Base64();
      base64_0.readResults(byteArray0, (byte)123, (-1));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.valueOf((byte)123);
      bigInteger0.toString(76);
      bigInteger1.doubleValue();
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      base64_0.decode(byteArray1, (int) (byte)0, (-1502));
      Base64.isBase64((byte)123);
      Base64.discardWhitespace(byteArray1);
      base64_0.avail();
      base64_0.decode((Object) "");
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.decode(" wDsi_vQLYBS,");
      base64_0.encode(byteArray0, 137, 137);
      Base64 base64_1 = new Base64(76, byteArray2, true);
      Base64.isBase64(" wDsi_vQLYBS,");
      base64_0.decode((Object) " wDsi_vQLYBS,");
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, false, true);
      base64_0.encodeToString(byteArray1);
      Base64.encodeBase64(byteArray1, false, true);
      base64_0.encode(byteArray3);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[6] = (byte)0;
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.decode("Parameter supplied to Base64 encode is not a byte[]");
      byte[] byteArray3 = new byte[2];
      byteArray3[0] = (byte)123;
      byteArray3[1] = (byte)0;
      Base64 base64_1 = new Base64(110, byteArray3);
      base64_0.decode(byteArray2, (int) (byte)123, (int) (byte)123);
      base64_1.decode(byteArray1, 1096, (int) (byte)0);
      Base64.discardWhitespace(byteArray3);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      Base64 base64_0 = new Base64(5, byteArray0, false);
      byte[] byteArray1 = Base64.decodeBase64("wW{'Xw`{!Rxbm*U;^%r");
      Base64.encodeBase64URLSafe(byteArray0);
      base64_0.hasData();
      base64_0.decode(",<I0|JmvTDr6{N^j");
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      base64_0.isUrlSafe();
      Base64.decodeBase64("Yz0Q70");
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.isBase64((byte)114);
      Base64.encodeBase64(byteArray1, false, false);
      base64_0.encode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      base64_0.readResults(byteArray1, (byte)0, 109);
      base64_0.decode(byteArray1, 0, (int) (byte)1);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray2, 3131, 13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Base64 base64_0 = new Base64(61);
      Base64.decodeBase64((String) null);
      base64_0.encodeToString((byte[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)13;
      Base64.decodeBase64(byteArray0);
      base64_0.decode((byte[]) null);
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, 99, 29);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte) (-112);
      Base64.encodeBase64(byteArray0, false, false);
      Base64.isBase64("!n)");
      int int0 = 13;
      Base64 base64_0 = new Base64(false);
      base64_0.readResults(byteArray0, (byte) (-108), 0);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 1, 1131);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[6] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true);
      Base64.isBase64("`k-Gomh2JCsEu");
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger1.shiftLeft(76);
      bigInteger1.mod(bigInteger2);
      base64_0.decode("org.apache.commons.codec.binary.Base64");
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger1);
      base64_0.decode((Object) "org.apache.commons.codec.binary.Base64");
      base64_0.encode(byteArray2);
      BigInteger bigInteger3 = BigInteger.valueOf(4L);
      bigInteger0.xor(bigInteger3);
      bigInteger1.max(bigInteger2);
      base64_0.hasData();
      byte[] byteArray3 = new byte[8];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte)64;
      byteArray3[2] = (byte)64;
      byteArray3[3] = (byte)64;
      byteArray3[4] = (byte)64;
      byteArray3[5] = (byte)0;
      byteArray3[6] = (byte)0;
      byteArray3[7] = (byte) (-15);
      Base64.encodeBase64(byteArray3);
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64("");
      byte[] byteArray3 = Base64.discardWhitespace(byteArray1);
      Base64.encodeBase64(byteArray3);
      Base64 base64_0 = new Base64((-1), byteArray2);
      Base64.isBase64(": ");
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64((byte)0, byteArray0, false);
      Base64.decodeBase64((String) null);
      base64_0.hasData();
      base64_0.decode((String) null);
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      base64_0.encode(byteArray2, 885, (int) (byte)0);
      Base64 base64_1 = new Base64(76, (byte[]) null, false);
      base64_0.encodeToString(byteArray1);
      Base64.encodeBase64(byteArray0, false, false);
      base64_1.encode((byte[]) null);
      base64_1.avail();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64((byte)0, byteArray0, false);
      Base64.decodeBase64((String) null);
      base64_0.hasData();
      base64_0.decode("hmIq>X");
      Base64.encodeBase64URLSafeString((byte[]) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true, false, 64);
      Base64.decodeBase64(byteArray0);
      Base64.encodeBase64Chunked(byteArray2);
      Base64 base64_1 = new Base64(64);
      base64_1.encode(byteArray1, 1914, (int) (byte)0);
      base64_1.readResults(byteArray0, 1838, 1838);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)91;
      Base64 base64_0 = new Base64(3614, byteArray0);
      Base64.decodeBase64(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      base64_0.avail();
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      bigInteger0.intValue();
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray4 = base64_0.decode("");
      Base64.encodeBase64Chunked(byteArray2);
      Base64.isBase64((byte)8);
      Base64.decodeInteger(byteArray4);
      Base64.encodeBase64String(byteArray1);
      base64_0.encode(byteArray3, (int) (byte)91, 0);
      base64_0.decode((Object) "");
      base64_0.encodeToString(byteArray1);
      Base64.encodeBase64(byteArray3, true, true);
      Base64.decodeInteger(byteArray3);
      Base64.isBase64("");
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.decodeBase64("r:&,Pi+IJ:<^6Mz%}");
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[6] = (byte)0;
      byteArray0[9] = (byte)64;
      byte[] byteArray1 = Base64.decodeBase64("");
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = Base64.decodeBase64("Input array too big, the output array would be bigger (");
      Base64.discardWhitespace(byteArray1);
      Base64.encodeBase64(byteArray2);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(7, byteArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\"zn\uFFFD\uFFFD\uFFFDk+h\uFFFD\uFFFD\uFFFD\uFFFD\u0017\uFFFD\uFFFD\uFFFDn\uFFFD\uFFFD\uFFFDk,(\uFFFDW[y\uFFFD\uFFFD\uFFFD\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Base64.isBase64((byte)0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      Base64 base64_0 = new Base64(110, byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, 4337);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      base64_0.readResults(byteArray1, (byte)0, 109);
      base64_0.decode(byteArray1, 0, (int) (byte)1);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)2;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)0;
      base64_0.decode(byteArray2, (int) (byte)0, (int) (byte)1);
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)91;
      Base64 base64_0 = new Base64(3614, byteArray0);
      Base64.decodeBase64(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      base64_0.avail();
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      bigInteger0.intValue();
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray0);
      base64_0.decode("");
      Base64.isBase64((byte)8);
      Base64.isBase64(byteArray3);
      byte[] byteArray4 = new byte[1];
      byteArray4[0] = (byte)91;
      Base64.decodeInteger(byteArray4);
      byte[] byteArray5 = new byte[3];
      byteArray5[0] = (byte)91;
      byteArray5[1] = (byte)8;
      byteArray5[2] = (byte)8;
      base64_0.encodeToString(byteArray2);
      base64_0.readResults(byteArray5, (-1446), (-1446));
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray3);
      // Undeclared exception!
      try { 
        bigInteger1.pow((-1446));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Negative exponent
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)2;
      Base64 base64_1 = new Base64(76, byteArray0, false);
      byte[] byteArray1 = Base64.decodeBase64("wW{'Xw`{!Rxbm*U;^%r");
      base64_1.hasData();
      base64_0.decode(",<I0|JmvTDr6{N^j");
      Base64.encodeBase64URLSafeString(byteArray1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      base64_0.isUrlSafe();
      Base64.decodeBase64("Yz0Q70");
      Base64.encodeBase64URLSafe(byteArray2);
      Base64.isBase64((byte)114);
      Base64 base64_2 = new Base64(false);
      base64_2.avail();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[8];
      Base64.encodeBase64String(byteArray0);
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-27);
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)114;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)29;
      base64_0.encode(byteArray0, (int) (byte)2, (int) (byte) (-27));
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-27);
      Base64 base64_1 = new Base64(false);
      base64_1.encode(byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-27);
      base64_1.encode(byteArray1, (int) (byte) (-27), 4);
      base64_1.isUrlSafe();
      Base64.decodeBase64("");
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64.isBase64((byte)0);
      Base64 base64_2 = new Base64();
      Base64.encodeBase64String((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64.encodeBase64(byteArray0, true, false);
      Base64.isBase64("6uO?g%r\"4EslXq/gi");
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger1.shiftLeft(251);
      bigInteger1.mod(bigInteger2);
      Base64 base64_1 = new Base64();
      base64_1.decode("!n)");
      BigInteger bigInteger3 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger3);
      Base64 base64_2 = new Base64(64);
      try { 
        base64_2.decode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Base64 base64_0 = new Base64((-31));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte) (-52);
      byteArray0[5] = (byte)46;
      Base64.decodeInteger(byteArray0);
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-27);
      Base64 base64_1 = new Base64(false);
      base64_1.encode(byteArray0);
      byte[] byteArray1 = base64_0.decode("Parameter supplied to Base64 encode is not a byte[]");
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte) (-27);
      base64_1.encode(byteArray2, 1, 4);
      Base64 base64_2 = new Base64(1714, byteArray2, true);
      base64_2.decode((Object) "");
      byte[] byteArray3 = new byte[5];
      byteArray3[0] = (byte)10;
      byteArray3[1] = (byte)0;
      byteArray3[2] = (byte)0;
      byteArray3[3] = (byte) (-27);
      byteArray3[4] = (byte)0;
      base64_1.encodeToString(byteArray3);
      byte[] byteArray4 = Base64.encodeBase64(byteArray3, false, false);
      base64_1.encode(byteArray4);
      Base64.encodeBase64(byteArray1, false, false, 64);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte) (-112);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      Base64.isBase64("!n)");
      Base64 base64_0 = new Base64();
      byte[] byteArray2 = new byte[2];
      byteArray2[1] = (byte) (-112);
      BigInteger bigInteger0 = new BigInteger(byteArray2);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.shiftLeft(1280);
      BigInteger bigInteger3 = bigInteger0.mod(bigInteger1);
      base64_0.decode("P(6V");
      Base64.encodeInteger(bigInteger0);
      base64_0.decode((Object) "!n)");
      byte[] byteArray3 = base64_0.encode(byteArray1);
      bigInteger0.xor(bigInteger3);
      bigInteger3.max(bigInteger2);
      base64_0.decode(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray3);
      Base64.isArrayByteBase64(byteArray3);
      Base64.toIntegerBytes(bigInteger3);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)64;
      Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64((byte)64, byteArray0, true);
      Object object0 = base64_0.decode((Object) "");
      Object object1 = base64_0.encode(object0);
      Object object2 = base64_0.decode(object1);
      Object object3 = base64_0.decode((Object) "");
      Object object4 = base64_0.decode(object3);
      base64_0.decode(object4);
      Object object5 = base64_0.encode(object2);
      Object object6 = base64_0.decode(object5);
      base64_0.decode(object6);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-120);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger0.xor(bigInteger1);
      bigInteger2.max(bigInteger0);
      base64_0.hasData();
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.isArrayByteBase64(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(false);
      base64_0.readResults(byteArray0, 2516, 822);
      base64_0.decode(byteArray0, (-37), (-1384));
      base64_0.encodeToString(byteArray0);
      base64_0.decode(byteArray0, 2853, 0);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Base64.encodeBase64(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = base64_0.decode("F@0i.>^o/s.>~");
      base64_0.hasData();
      byte[] byteArray3 = new byte[2];
      byteArray3[0] = (byte)1;
      byteArray3[1] = (byte)104;
      Base64.encodeBase64Chunked(byteArray3);
      Base64.encodeBase64URLSafe(byteArray2);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64((byte)0, byteArray0, false);
      Base64.decodeBase64((String) null);
      base64_0.hasData();
      base64_0.decode("hmIq>X");
      Base64.encodeBase64URLSafeString((byte[]) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      base64_0.isUrlSafe();
      Base64.decodeBase64("rYZNl]$4,E5!");
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.isBase64((byte)83);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("M");
      boolean boolean0 = false;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, (int) (byte) (-1));
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_0 = new Base64(true);
      boolean boolean1 = true;
      base64_0.encode(byteArray2);
      String string0 = "qutdq:[4M2w*)J";
      byte[] byteArray3 = new byte[0];
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray3);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-27);
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)114;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      base64_0.encode(byteArray0, (int) (byte)2, (int) (byte) (-27));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      Base64 base64_0 = new Base64(0, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      base64_0.decode(byteArray1, (int) (byte) (-1), (-1151));
      Base64.encodeBase64(byteArray2, true, true);
      BigInteger bigInteger1 = BigInteger.ZERO;
      base64_0.readResults(byteArray0, (byte) (-1), (byte) (-1));
      BigInteger bigInteger2 = BigInteger.TEN;
      bigInteger1.xor(bigInteger2);
      bigInteger1.max(bigInteger2);
      bigInteger1.nextProbablePrime();
      Base64.encodeInteger(bigInteger1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray0);
      Base64.decodeBase64(byteArray0);
      base64_0.avail();
      base64_0.encode(byteArray3);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64String(byteArray0);
      Base64.isBase64(byteArray3);
      Base64.decodeBase64(byteArray3);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64(byteArray0, false);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.longValue();
      Base64.toIntegerBytes(bigInteger0);
      boolean boolean0 = true;
      Base64.encodeBase64(byteArray0, false, true);
      Base64.encodeInteger(bigInteger0);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 0, 743);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-1306), byteArray0, false);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      boolean boolean0 = false;
      Base64.encodeBase64(byteArray1, false, false, 85);
      Base64.encodeBase64(byteArray0, true);
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = new byte[0];
      Base64.encodeBase64(byteArray2, true, false, 0);
      Base64.decodeInteger(byteArray0);
      try { 
        base64_0.encode((Object) "UK8(GM");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Base64.isBase64("oOC]WaIEBhk;!");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)98;
      byteArray0[5] = (byte)0;
      Base64.encodeBase64(byteArray0, false, false);
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64(false);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      Object object0 = base64_0.decode((Object) "BxcAkGIA");
      base64_0.encode(object0);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.getLowestSetBit();
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte) (-1);
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte) (-112);
      byteArray2[4] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray2);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)122;
      byteArray2[2] = (byte) (-1);
      byteArray2[3] = (byte) (-1);
      byteArray2[4] = (byte)1;
      Base64.decodeInteger(byteArray2);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64 base64_0 = new Base64();
      byte[] byteArray3 = new byte[2];
      byteArray3[0] = (byte) (-1);
      byteArray3[1] = (byte)122;
      base64_0.encodeToString(byteArray3);
      Base64.decodeInteger(byteArray1);
      Base64.encodeBase64(byteArray1);
      base64_0.encode(byteArray1, 268, (int) (byte)122);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-67);
      byteArray0[8] = (byte) (-120);
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byte byte0 = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)15;
      byte byte1 = (byte)0;
      byteArray0[3] = (byte)0;
      byte byte2 = (byte)7;
      byteArray0[4] = (byte)7;
      byte byte3 = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-1);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, true, (int) (byte)7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of 7
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[1];
      Base64.encodeBase64String(byteArray0);
      byteArray0[0] = (byte) (-122);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.remainder(bigInteger1);
      Base64.encodeBase64(byteArray0, false, false);
      Base64.decodeBase64(byteArray0);
      bigInteger0.getLowestSetBit();
      Object object0 = new Object();
      BigInteger bigInteger2 = BigInteger.ONE;
      BigInteger bigInteger3 = bigInteger0.max(bigInteger2);
      bigInteger3.equals(bigInteger1);
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[] byteArray0 = null;
      int int0 = 3941;
      Base64.encodeBase64((byte[]) null, true, true, 3941);
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-1384), byteArray0, true);
      Base64.decodeBase64((String) null);
      base64_0.hasData();
      base64_0.decode("");
      Base64.encodeBase64URLSafeString(byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      base64_0.isUrlSafe();
      Base64.decodeBase64("");
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64.isBase64((byte)0);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-57);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-57);
      byteArray1[1] = (byte) (-57);
      byteArray1[2] = (byte) (-57);
      byteArray1[3] = (byte)104;
      byteArray1[4] = (byte) (-57);
      byteArray1[5] = (byte) (-57);
      base64_0.readResults(byteArray1, 0, 2262);
      base64_0.decode(byteArray0, (-997), (-567));
      base64_0.encodeToString(byteArray0);
      byteArray0[1] = (byte)0;
      base64_0.decode(byteArray0, 3967, (-2749));
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-110);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      byte[] byteArray2 = base64_0.decode(byteArray0);
      Base64.encodeBase64(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray2);
      byte[] byteArray3 = base64_0.decode("q%2]~UbrZN\"7B");
      base64_0.hasData();
      Base64.encodeBase64Chunked(byteArray2);
      Base64.encodeBase64URLSafe(byteArray3);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)30;
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Base64.encodeBase64(byteArray0, false);
      base64_0.readResults(byteArray1, (byte)30, 110);
      Base64.encodeBase64(byteArray1, false, false);
      base64_0.hasData();
      Base64.decodeBase64("1Tu*A(3`Ys");
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-62);
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byte byte1 = (byte)0;
      byteArray0[4] = (byte)0;
      Base64 base64_0 = new Base64((-1840), byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, 4337);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Base64.decodeBase64("qd<y(R|F4$(7o]C");
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.avail();
      byte[] byteArray0 = new byte[4];
      Base64.decodeBase64((byte[]) null);
      base64_0.decode((byte[]) null);
      Base64.encodeBase64((byte[]) null, true);
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)91;
      base64_0.encodeToString(byteArray0);
      byteArray0[3] = (byte)0;
      base64_0.decode(byteArray0);
      Base64.encodeBase64URLSafe((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byte byte0 = (byte)32;
      byteArray0[4] = (byte)32;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.isProbablePrime((byte)0);
      Base64.toIntegerBytes(bigInteger0);
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(false);
      base64_0.encodeToString(byteArray0);
      try { 
        base64_0.encode((Object) "AAAAACA=@\u0000");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Base64.decodeBase64((String) null);
      Base64.encodeBase64((byte[]) null);
      byte byte0 = (byte) (-96);
      Base64.isBase64((byte) (-96));
      Base64.decodeBase64((byte[]) null);
      Base64.decodeBase64((byte[]) null);
      Base64 base64_0 = new Base64(0);
      Base64.encodeBase64((byte[]) null, true, true);
      Base64.encodeBase64((byte[]) null, true, true);
      Base64.isBase64("");
      base64_0.isUrlSafe();
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Base64.isBase64((byte) (-91));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-91);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64((byte) (-91), byteArray0, false);
      Base64.decodeBase64("pQ");
      Base64.discardWhitespace(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-91);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-2);
      byteArray1[3] = (byte) (-91);
      byteArray1[4] = (byte) (-91);
      byteArray1[5] = (byte) (-91);
      Base64.encodeBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64(byteArray0, false, true);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)4;
      Base64.encodeBase64String(byteArray0);
      byteArray0[0] = (byte)4;
      base64_0.readResults(byteArray0, (byte)4, 49);
      try { 
        base64_0.encode((Object) "\"]s9`oD8");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)15;
      byteArray0[6] = (byte)103;
      byteArray0[7] = (byte)57;
      byteArray0[8] = (byte)98;
      Base64.encodeBase64Chunked(byteArray0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Base64 base64_0 = new Base64(1754);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Base64 base64_0 = new Base64(85);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte)0;
      base64_0.encode(byteArray0, (int) (byte)0, 0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte)89;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD\u0000}yY]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)88;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-703), byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000X]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)50;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(12, byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000\uFFFD\u0000e\uFFFD\u00002]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      try { 
        base64_0.encode((Object) "/Nj");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("M");
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true, 76);
      int int0 = base64_0.avail();
      assertEquals(0, int0);
      assertTrue(base64_0.isUrlSafe());
      
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte) (-48);
      byteArray2[3] = (byte)88;
      byteArray2[4] = (byte)9;
      byteArray2[5] = (byte)107;
      byteArray2[6] = (byte)0;
      byte[] byteArray3 = Base64.decodeBase64(byteArray2);
      assertArrayEquals(new byte[] {(byte)94}, byteArray3);
      
      Base64.isArrayByteBase64(byteArray0);
      byte[] byteArray4 = Base64.decodeBase64(byteArray1);
      byte[] byteArray5 = Base64.encodeBase64URLSafe(byteArray1);
      assertSame(byteArray5, byteArray4);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Base64 base64_0 = new Base64(1717);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)101;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 1717, 2122);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1717
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Base64 base64_0 = new Base64((-814), (byte[]) null);
      base64_0.encode((byte[]) null, 1, (-814));
      base64_0.encodeToString((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Base64 base64_0 = new Base64();
      boolean boolean0 = base64_0.hasData();
      base64_0.isUrlSafe();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte)121;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)115, (byte) (-20)}, byteArray1);
      
      byte[] byteArray2 = new byte[0];
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray2);
      assertEquals((byte)0, bigInteger0.byteValue());
      
      boolean boolean1 = base64_0.isUrlSafe();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte)23;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64((byte) (-24), byteArray1, false);
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte) (-24);
      byteArray2[1] = (byte)23;
      byteArray2[2] = (byte)23;
      byteArray2[3] = (byte)23;
      byteArray2[4] = (byte)23;
      byteArray2[5] = (byte)23;
      byteArray2[6] = (byte)23;
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte) (-112);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      boolean boolean0 = Base64.isBase64("!n)");
      assertFalse(boolean0);
      
      Base64 base64_0 = new Base64();
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte) (-112);
      byteArray2[1] = (byte) (-112);
      BigInteger bigInteger0 = new BigInteger(byteArray2);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.shiftLeft(1280);
      BigInteger bigInteger3 = bigInteger0.mod(bigInteger1);
      byte[] byteArray3 = base64_0.decode("P(6V");
      assertArrayEquals(new byte[] {(byte)63, (byte) (-91)}, byteArray3);
      
      byte[] byteArray4 = Base64.encodeInteger(bigInteger0);
      assertArrayEquals(new byte[] {(byte)107, (byte)74, (byte)65, (byte)61}, byteArray4);
      
      base64_0.decode((Object) "!n)");
      byte[] byteArray5 = base64_0.encode(byteArray1);
      bigInteger0.xor(bigInteger3);
      bigInteger3.max(bigInteger2);
      boolean boolean1 = base64_0.hasData();
      base64_0.decode(byteArray0);
      String string0 = Base64.encodeBase64URLSafeString(byteArray5);
      assertEquals("Y2xwVFVRPT0", string0);
      
      boolean boolean2 = Base64.isArrayByteBase64(byteArray5);
      assertFalse(boolean2 == boolean1);
      
      Base64.toIntegerBytes(bigInteger3);
      String string1 = Base64.encodeBase64URLSafeString(byteArray2);
      assertEquals("kJA", string1);
  }
}
