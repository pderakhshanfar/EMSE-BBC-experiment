/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:07:22 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8160, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 8160);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, false);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false, false);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      // Undeclared exception!
      Base64.encodeBase64URLSafeString(byteArray4);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8160, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 8160);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, false);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false, false);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      Base64.decodeInteger(byteArray4);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)64;
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte)1;
      base64_0.encode(byteArray0, (int) (byte)1, (int) (byte)1);
      base64_0.encode(byteArray0, (int) (byte)1, (-4341));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(0, byteArray0, true);
      Base64 base64_1 = new Base64(0);
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.decode("sb5g8t7p=bb");
      Object object0 = base64_1.decode((Object) "\"[JauA,/>&X$?<Fk");
      // Undeclared exception!
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8160, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 8160);
      mockRandom0.nextDouble();
      Base64 base64_0 = new Base64(false);
      base64_0.decode(byteArray1, 8160, (-1));
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, false);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false, false);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      Base64.decodeInteger(byteArray4);
      // Undeclared exception!
      Base64.encodeBase64String(byteArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints((long) 8162);
      byte[] byteArray0 = new byte[9];
      mockRandom0.nextBytes(byteArray0);
      BigInteger bigInteger0 = new BigInteger(8162, mockRandom0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true, 8162);
      Base64 base64_0 = new Base64(true);
      bigInteger0.negate();
      mockRandom0.ints((long) 64);
      base64_0.decode(byteArray2, 255, 76);
      base64_0.decode(byteArray2, 255, 76);
      base64_0.decode(byteArray2, 0, 76);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 18, 8162);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1364
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Base64 base64_0 = new Base64((-565));
      byte[] byteArray0 = new byte[3];
      Base64.encodeBase64(byteArray0);
      base64_0.encode(byteArray0, (int) (byte)1, (int) (byte)1);
      base64_0.encode((byte[]) null, (-565), (-565));
      Base64 base64_1 = new Base64();
      Random.setNextRandom((-978));
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, 76, 64);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8160, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 8160);
      mockRandom0.nextDouble();
      Base64 base64_0 = new Base64(false);
      base64_0.decode(byteArray1, 8160, (-1));
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, false);
      Base64.encodeBase64(byteArray0);
      Base64.encodeBase64(byteArray2, false, false);
      // Undeclared exception!
      base64_0.encodeToString(byteArray2);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Base64 base64_0 = new Base64((-565));
      byte[] byteArray0 = new byte[3];
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger0);
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)1;
      Base64.encodeBase64(byteArray0);
      base64_0.encode(byteArray0, (int) (byte)1, (int) (byte)1);
      base64_0.encode((byte[]) null, (-565), (-565));
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      Base64.toIntegerBytes(bigInteger1);
      Base64.encodeInteger(bigInteger1);
      base64_0.encode((byte[]) null, 25, 42);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8160, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 8160);
      mockRandom0.nextDouble();
      Base64 base64_0 = new Base64(false);
      base64_0.decode(byteArray1, 8160, 0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, false);
      boolean boolean0 = false;
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false, false);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      Base64.decodeInteger(byteArray4);
      Base64.decodeInteger(byteArray0);
      // Undeclared exception!
      Base64.encodeBase64(byteArray2, false, false, 8160);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      BigInteger bigInteger0 = new BigInteger(8160, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 8160);
      mockRandom0.nextDouble();
      Base64 base64_0 = new Base64(false);
      base64_0.decode(byteArray1, 8160, 0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, false);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false, true);
      Base64.discardWhitespace(byteArray3);
      byte[] byteArray4 = Base64.encodeBase64(byteArray1, true, false);
      // Undeclared exception!
      base64_0.encode(byteArray4, 0, 8160);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8160, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 8160);
      mockRandom0.nextDouble();
      Base64 base64_0 = new Base64(false);
      base64_0.decode(byteArray1, 8160, 0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, false);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false, false);
      base64_0.encode(byteArray3);
      // Undeclared exception!
      Base64.encodeBase64Chunked(byteArray1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints((long) 8162);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)57;
      mockRandom0.nextBytes(byteArray0);
      BigInteger bigInteger0 = new BigInteger(8162, mockRandom0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true, 8162);
      Base64 base64_0 = new Base64(false);
      mockRandom0.longs(842L, (long) (byte)0, (long) 8162);
      mockRandom0.ints((long) 64);
      base64_0.decode(byteArray2, 255, 76);
      base64_0.decode(byteArray2, 9, 212);
      Base64.encodeBase64(byteArray2, false, false);
      base64_0.encode(byteArray0, 212, (-722));
      base64_0.encode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints((long) 8162);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)57;
      mockRandom0.nextBytes(byteArray0);
      BigInteger bigInteger0 = new BigInteger(8162, mockRandom0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(true);
      mockRandom0.longs(842L, (long) (byte)0, (long) 8162);
      mockRandom0.ints((long) 64);
      base64_0.decode(byteArray1, 255, 76);
      base64_0.decode(byteArray1, 0, 212);
      Base64.encodeBase64(byteArray1, false, false);
      base64_0.encode(byteArray0, 212, (-722));
      base64_0.encode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints((long) 8162);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)57;
      mockRandom0.nextBytes(byteArray0);
      BigInteger bigInteger0 = new BigInteger(8162, mockRandom0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true, 8162);
      Base64 base64_0 = new Base64(true);
      mockRandom0.longs(842L, (long) (byte)0, (long) 8162);
      mockRandom0.ints((long) 64);
      base64_0.decode(byteArray2, 255, 76);
      base64_0.decode(byteArray2, 0, 212);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false, false);
      base64_0.encode(byteArray0, 212, (-722));
      base64_0.encode(byteArray3, 18, 8162);
      base64_0.encode(byteArray1, 255, 255);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8160, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 8160);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray1, 76, 76);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, false);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false, false);
      base64_0.encode(byteArray3);
      // Undeclared exception!
      Base64.encodeBase64(byteArray3, false, false);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8160, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 8160);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray1, 76, 76);
      base64_0.readResults(byteArray0, 1, 1);
      base64_0.encode(byteArray0, 8160, (-3280));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8160, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 8160);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64(byteArray0, true);
      base64_0.decode(byteArray1, 76, 76);
      BigInteger bigInteger1 = new BigInteger(byteArray1);
      bigInteger0.or(bigInteger1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false, true);
      // Undeclared exception!
      base64_0.encode(byteArray3);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8160, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 8160);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray1, 76, 76);
      Base64.encodeBase64(byteArray1, true, true);
      base64_0.encode(byteArray0, 8160, (-421));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(1851, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (420) than the specified maxium size of 6
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      BigInteger bigInteger0 = new BigInteger(1982292598, mockRandom0);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-7L));
      mockRandom0.nextDouble();
      BigInteger bigInteger0 = new BigInteger(8160, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false, false, 8160);
      bigInteger0.floatValue();
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray2, 5, 8189);
      assertEquals(1816, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = base64_0.decode("org.apache.commons.codec.DecoderException");
      base64_0.decode(byteArray0, 76, (-3189));
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_1 = new Base64(64);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, true, false, (int) (byte)97);
      base64_1.decode(byteArray3, 1, 76);
      assertEquals(54, byteArray3.length);
      assertEquals(38, byteArray1.length);
      
      Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      int int0 = base64_1.avail();
      assertEquals(37, int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte)115;
      byteArray0[4] = (byte) (-23);
      Base64.isBase64(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger0);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, (-310));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of -310
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = base64_0.decode("org.apache.commons.codec.DecoderException");
      base64_0.decode(byteArray0, 76, (-3153));
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_1 = new Base64(2395);
      String string0 = base64_1.encodeToString(byteArray0);
      //  // Unstable assertion: assertEquals("orgapachecommonscodecDecoderExceptio\uFFFD\u001E", string0);
      
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, true, 2395);
      boolean boolean0 = Base64.isBase64(byteArray0);
      //  // Unstable assertion: assertFalse(boolean0);
      
      Base64.decodeInteger(byteArray3);
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray3);
      //  // Unstable assertion: assertEquals(100, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Base64 base64_0 = new Base64(false);
      boolean boolean0 = Base64.isBase64("encodeInteger called with null parameter");
      assertTrue(boolean0);
      
      base64_0.encode(byteArray0, (int) (byte)33, (-2147483646));
      int int0 = base64_0.avail();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = base64_0.decode("org.apache.commons.codec.DecoderException");
      assertEquals(27, byteArray0.length);
      
      BigInteger bigInteger0 = BigInteger.valueOf((-3199L));
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(2, byteArray1.length);
      
      byte[] byteArray2 = new byte[24];
      byteArray2[0] = (byte)19;
      byteArray2[1] = (byte) (-97);
      byteArray2[2] = (byte) (-1);
      byteArray2[3] = (byte)1;
      byteArray2[4] = (byte) (-53);
      byteArray2[5] = (byte) (-16);
      byteArray2[6] = (byte) (-10);
      byteArray2[7] = (byte) (-67);
      byteArray2[8] = (byte)9;
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      assertEquals(23, byteArray3.length);
      
      boolean boolean0 = Base64.isBase64(byteArray2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = base64_0.decode("org.apache.commons.codec.DecoderException");
      base64_0.decode(byteArray0, (-689), (-3199));
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(38, byteArray1.length);
      
      Base64 base64_1 = new Base64(2395);
      Base64 base64_2 = new Base64();
      String string0 = base64_2.encodeToString(byteArray0);
      assertEquals("orgapachecommonscodecDecoderExceptio", string0);
      
      Base64 base64_3 = new Base64((-689));
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false, false, 2395);
      base64_3.decode(byteArray3, 0, 64);
      assertEquals(4, byteArray3.length);
      
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("org.<pache.commons.codecwbinary.Base64");
      byte[] byteArray1 = new byte[0];
      Base64 base64_0 = new Base64(12, byteArray1, false);
      base64_0.decode(byteArray0, 3, 12);
      assertEquals(24, byteArray0.length);
      
      byte[] byteArray2 = Base64.decodeBase64("org.<pache.commons.codecwbinary.Base64");
      assertEquals(24, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte byte0 = (byte)30;
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)30;
      byte byte1 = (byte)43;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte)30;
      boolean boolean0 = false;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, (int) (byte)30);
      Base64 base64_0 = new Base64((byte)30);
      Base64.decodeInteger(byteArray1);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 1, (int) (byte)43);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 28
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(8217);
      base64_0.encode(byteArray1, 8217, (-2139));
      Base64.encodeBase64String(byteArray1);
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, 8217, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = base64_0.decode("org.apache.commons.codec.DecoderException");
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(38, byteArray1.length);
      
      String string0 = Base64.encodeBase64String(byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals("orgapachecommonscodecDecoderExceptio", string0);
      
      boolean boolean0 = Base64.isBase64((byte)61);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray0 = base64_0.decode("org.apache.commons.codec.DecoderException");
      base64_0.decode(byteArray0, (-698), (-3199));
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64.encodeBase64String(byteArray0);
      Base64 base64_1 = new Base64(64);
      Base64 base64_2 = new Base64(4);
      base64_2.encodeToString(byteArray2);
      Base64 base64_3 = new Base64();
      BigInteger bigInteger1 = new BigInteger(byteArray1);
      Base64.encodeInteger(bigInteger1);
      byte[] byteArray3 = Base64.CHUNK_SEPARATOR;
      base64_1.decode(byteArray1, (-110), (-61));
      Base64.encodeBase64String(byteArray1);
      int int0 = base64_1.avail();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64 base64_0 = new Base64((-1846), byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-12);
      byteArray1[1] = (byte)114;
      byteArray1[2] = (byte) (-27);
      byteArray1[3] = (byte) (-120);
      byteArray1[4] = (byte) (-69);
      byteArray1[5] = (byte)49;
      byteArray1[6] = (byte) (-120);
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)62);
      assertFalse(boolean0);
      
      String string0 = Base64.encodeBase64URLSafeString((byte[]) null);
      assertNull(string0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, (-3496));
      assertSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = base64_0.decode("org.apache.commons.codec.DecoderException");
      base64_0.decode(byteArray0, (-689), (-3199));
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_1 = new Base64(2395);
      Base64.encodeBase64String(byteArray0);
      Base64 base64_2 = new Base64(2395);
      String string0 = base64_2.encodeToString(byteArray0);
      //  // Unstable assertion: assertEquals("orgapachecommonscodecDecoderExceptio\uFFFD\u001E", string0);
      
      Base64 base64_3 = new Base64((-689));
      Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, false, (int) (byte)97);
      base64_3.decode(byteArray2, 1, 76);
      //  // Unstable assertion: assertEquals(54, byteArray2.length);
      //  // Unstable assertion: assertEquals(27, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte) (-57);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertArrayEquals(new byte[] {(byte)71, (byte)57, (byte)68, (byte)72}, byteArray1);
      assertEquals(4, byteArray1.length);
      
      Object object0 = base64_0.decode((Object) "`mS)mFKlH&");
      Object object1 = base64_0.decode(object0);
      assertNotSame(object1, object0);
      
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte) (-57);
      byteArray2[1] = (byte) (-1);
      byteArray2[2] = (byte) (-48);
      String string0 = Base64.encodeBase64URLSafeString(byteArray2);
      assertEquals("x__Q", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64 base64_0 = new Base64();
      base64_0.decode((byte[]) null);
      base64_0.encodeToString((byte[]) null);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = base64_0.decode("org.apache.commons.codec.DecoderException");
      base64_0.decode(byteArray0, (-689), (-3199));
      Base64 base64_1 = new Base64(2395);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)123;
      byteArray1[2] = (byte)123;
      byteArray1[3] = (byte)123;
      Base64 base64_2 = new Base64(64, byteArray1);
      Base64.isBase64("org.apache.commons.codec.DecoderException");
      // Undeclared exception!
      try { 
        base64_2.encode(byteArray0, (int) (byte)0, 8192);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 27
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Base64 base64_0 = new Base64(826);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte)26;
      byteArray0[5] = (byte) (-111);
      byteArray0[6] = (byte) (-77);
      byteArray0[7] = (byte) (-71);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 0, (int) (byte)104);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      boolean boolean0 = Base64.isArrayByteBase64(byteArray1);
      //  // Unstable assertion: assertFalse(boolean0);
      
      Base64.encodeBase64String((byte[]) null);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      bigInteger0.shortValueExact();
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      //  // Unstable assertion: assertEquals(38, byteArray1.length);
      //  // Unstable assertion: assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 1, 35);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)32;
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)32;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)11;
      byteArray1[3] = (byte)32;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)11;
      byteArray1[7] = (byte)32;
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)11, (byte)0, (byte)0, (byte)11}, byteArray2);
      assertEquals(5, byteArray2.length);
      
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("AAsg", string0);
      
      Base64 base64_0 = new Base64((byte)11);
      Base64 base64_1 = new Base64(13);
      base64_1.encode(byteArray0, 117, (int) (byte)0);
      byte[] byteArray3 = base64_1.encode(byteArray0);
      assertEquals(6, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[4] = (byte)92;
      Base64 base64_0 = new Base64((byte)92, byteArray0);
      boolean boolean0 = base64_0.hasData();
      base64_0.encode(byteArray0, (int) (byte)92, (-2557));
      boolean boolean1 = base64_0.hasData();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[4] = (byte)92;
      Base64 base64_0 = new Base64((byte)92, byteArray0);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)0, (int) (byte)92);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte byte0 = (byte)62;
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64((byte)62, (byte[]) null);
      base64_0.encode((byte[]) null);
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, (int) (byte)62, (int) (byte)62);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64.decodeBase64(": ");
      Base64.encodeBase64((byte[]) null, true, false);
      byte[] byteArray0 = Base64.encodeBase64URLSafe((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.encodeInteger(bigInteger0);
      Base64 base64_1 = new Base64(64);
      Base64.decodeBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked((byte[]) null);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      byte[] byteArray3 = Base64.discardWhitespace(byteArray1);
      //  // Unstable assertion: assertEquals(6, byteArray3.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61, (byte) (-45), (byte)30}, byteArray3);
      
      boolean boolean0 = Base64.isBase64(byteArray2);
      boolean boolean1 = Base64.isBase64((byte)123);
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      
      Base64.encodeBase64(byteArray1, false, true);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61, (byte) (-45), (byte)30}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)0;
      String string0 = Base64.encodeBase64String(byteArray1);
      assertEquals("AA==", string0);
      
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray3 = Base64.decodeBase64("]qfK#TWM|/_");
      assertEquals(6, byteArray3.length);
      assertArrayEquals(new byte[] {(byte) (-87), (byte) (-14), (byte) (-109), (byte)88, (byte) (-49), (byte) (-1)}, byteArray3);
      
      Base64 base64_1 = new Base64(64, byteArray2, false);
      Base64.encodeBase64Chunked(byteArray2);
      Base64.encodeBase64String(byteArray2);
      byte[] byteArray4 = base64_1.encode(byteArray2);
      String string1 = base64_1.encodeToString(byteArray4);
      assertEquals(0, byteArray2.length);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)48;
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)47, (byte)120, (byte)69, (byte)119, (byte) (-94), (byte)30}, byteArray1);
      
      base64_0.decode((Object) ",,](=}7UiyA9i");
      Base64.encodeBase64(byteArray0, true);
      byte[] byteArray2 = base64_0.decode(",,](=}7UiyA9i");
      //  // Unstable assertion: assertEquals(0, byteArray2.length);
      
      byte[] byteArray3 = new byte[4];
      byte[] byteArray4 = base64_0.decode(byteArray3);
      byte[] byteArray5 = new byte[5];
      byteArray5[0] = (byte)48;
      byteArray5[1] = (byte) (-2);
      byteArray5[2] = (byte)48;
      byteArray5[3] = (byte) (-1);
      byteArray5[4] = (byte)5;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray5);
      //  // Unstable assertion: assertEquals((byte) (-45), bigInteger0.byteValue());
      
      byteArray3[0] = (byte) (-1);
      byteArray3[1] = (byte) (-1);
      byteArray3[2] = (byte)17;
      byteArray3[3] = (byte)48;
      byte[] byteArray6 = Base64.encodeBase64URLSafe(byteArray3);
      BigInteger bigInteger1 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger1);
      base64_0.encode(byteArray0);
      int int0 = base64_0.avail();
      //  // Unstable assertion: assertEquals(0, int0);
      
      byte[] byteArray7 = base64_0.decode("");
      //  // Unstable assertion: assertEquals(0, byteArray7.length);
      
      Base64.isBase64(byteArray6);
      //  // Unstable assertion: assertEquals(6, byteArray6.length);
      
      bigInteger1.toString();
      Base64.encodeBase64(byteArray4);
      byte[] byteArray8 = Base64.encodeInteger(bigInteger1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray8);
      
      byte[] byteArray9 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertEquals(6, byteArray9.length);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)92;
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[1] = (byte)97;
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("AGEAAAAAAAAAAAAAAAAAAA==", string0);
      
      Base64 base64_0 = new Base64(16);
      boolean boolean0 = Base64.isBase64("AGEAAAAAAAAAAAAAAAAAAA==");
      assertTrue(boolean0);
      
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(26, byteArray1.length);
      
      byte[] byteArray2 = base64_0.encode(byteArray0);
      assertEquals(28, byteArray2.length);
      
      boolean boolean1 = Base64.isBase64((byte)97);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-51);
      Base64 base64_0 = new Base64(0, byteArray0, true);
      base64_0.decode((String) null);
      Base64.isBase64((byte)79);
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.encodeToString((byte[]) null);
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 76, 1431655765);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64 base64_0 = new Base64(true);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 1, 36);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte byte0 = (byte)30;
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)30;
      byte byte1 = (byte)43;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte)30;
      boolean boolean0 = false;
      Base64.encodeBase64(byteArray0, false, false, (int) (byte)30);
      Base64 base64_0 = new Base64((byte)30);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)30, (int) (byte)30);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 30
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)0;
      base64_0.encode(byteArray0, (int) (byte)76, (int) (byte) (-1));
      Object object0 = base64_0.decode((Object) "encodeInteger called with null parameter");
      Object object1 = base64_0.encode(object0);
      assertNotSame(object1, object0);
      
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)118;
      byte[] byteArray2 = base64_0.decode(byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)10;
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = base64_0.decode("org.apache.commons.codec.DecoderException");
      base64_0.decode(byteArray1, (-689), (-3199));
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray3 = new byte[8];
      byteArray3[0] = (byte)123;
      byteArray1[17] = (byte)0;
      byteArray3[2] = (byte)111;
      byteArray3[3] = (byte)123;
      byteArray3[4] = (byte)67;
      Base64.encodeBase64(byteArray2);
      byteArray3[5] = (byte) (-119);
      byteArray1[11] = (byte)7;
      base64_0.decode("");
      byteArray3[7] = (byte)71;
      byte[] byteArray4 = Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      Base64.decodeInteger(byteArray4);
      byte[] byteArray5 = new byte[1];
      byteArray5[0] = (byte)7;
      base64_0.encode(byteArray5, 1638, (-1265));
      base64_0.encode(byteArray5, (int) (byte)123, (-1490));
      assertFalse(byteArray5.equals((Object)byteArray3));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte)0;
      Base64 base64_0 = new Base64((byte) (-51));
      base64_0.encodeToString(byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64 base64_1 = new Base64(104);
      base64_1.decode((String) null);
      Base64.encodeBase64((byte[]) null, true);
      Base64.isBase64((byte) (-51));
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64((byte[]) null);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 1, 1741);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64((-490), byteArray0);
      Base64.encodeBase64((byte[]) null);
      Base64.encodeBase64(byteArray0);
      base64_0.decode(byteArray0, (int) (byte)92, (-490));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64((-2697), byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, true, 798);
      base64_0.encode(byteArray2, 123, 0);
      assertArrayEquals(new byte[] {(byte)81, (byte)85, (byte)69, (byte)57, (byte)80, (byte)81}, byteArray2);
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("AA", string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)92;
      Base64 base64_0 = new Base64(44);
      Base64 base64_1 = new Base64(68, byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)92;
      byteArray1[1] = (byte)92;
      byteArray1[2] = (byte)92;
      byteArray1[3] = (byte)92;
      byteArray1[4] = (byte)92;
      byteArray1[5] = (byte)92;
      byteArray1[6] = (byte)92;
      byteArray1[7] = (byte)92;
      base64_1.encodeToString(byteArray1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray2 = null;
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      base64_0.decode("org.apache.commons.codec.DecoderException");
      Base64 base64_1 = new Base64(5, (byte[]) null, false);
      base64_0.encode((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)59;
      byteArray1[1] = (byte)92;
      byteArray1[2] = (byte)92;
      byteArray1[3] = (byte)92;
      byteArray1[4] = (byte)92;
      byteArray1[5] = (byte)92;
      byteArray1[6] = (byte)92;
      byteArray1[7] = (byte)92;
      byteArray1[8] = (byte)92;
      Base64 base64_0 = new Base64(9, byteArray1);
      base64_0.decode(byteArray0, (-844), (-2211));
      byte[] byteArray2 = Base64.decodeBase64("");
      assertFalse(byteArray2.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      Base64 base64_0 = new Base64(0, byteArray0);
      base64_0.readResults(byteArray0, 0, 0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger1);
      Base64 base64_1 = new Base64(406, byteArray1);
      base64_1.decode(byteArray1);
      Base64.encodeBase64(byteArray0, false, false);
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = base64_0.decode("org.apache.commons.codec.DecoderException");
      base64_0.decode(byteArray0, (-689), (-3199));
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)123;
      byteArray0[17] = (byte)0;
      byteArray2[2] = (byte)111;
      byteArray2[3] = (byte)22;
      byteArray2[4] = (byte)67;
      Base64.encodeBase64(byteArray1);
      byteArray2[5] = (byte) (-119);
      byteArray2[6] = (byte)7;
      byteArray2[7] = (byte)71;
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, true, 1059);
      Base64.decodeInteger(byteArray3);
      byte[] byteArray4 = new byte[1];
      byteArray4[0] = (byte)7;
      int int0 = base64_0.readResults(byteArray4, (-1772), 1065);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte)30;
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(3543);
      base64_0.encode(byteArray0, (int) (byte)30, (-1099));
      Base64 base64_1 = new Base64();
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64.decodeBase64("]qfK#TWM|/_");
      Base64 base64_1 = new Base64(64, byteArray1, false);
      Base64.encodeBase64Chunked(byteArray1);
      Base64.encodeBase64String(byteArray1);
      base64_1.encode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.discardWhitespace(byteArray1);
      Base64 base64_0 = new Base64((byte)40);
      byte[] byteArray2 = new byte[1];
      Base64 base64_1 = new Base64(97, byteArray2);
      byte[] byteArray3 = new byte[7];
      byteArray3[0] = (byte) (-97);
      byteArray3[1] = (byte)51;
      byteArray3[2] = (byte)76;
      byteArray3[3] = (byte)40;
      byteArray3[4] = (byte)76;
      byteArray3[5] = (byte)40;
      base64_1.encodeToString(byteArray3);
      Base64 base64_2 = new Base64((byte)40);
      Base64.isBase64(byteArray1);
      Base64.isBase64((byte)18);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Base64.isBase64((byte)30);
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte)30;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64(0, byteArray1);
      byte[] byteArray2 = base64_0.decode(byteArray1);
      Base64.encodeBase64(byteArray2, false, false, 0);
      byte[] byteArray3 = new byte[2];
      byteArray3[0] = (byte)43;
      byteArray3[1] = (byte)30;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray3, 11, (int) (byte)30);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = new byte[9];
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, false, false);
      Base64 base64_1 = new Base64();
      BigInteger bigInteger0 = BigInteger.ZERO;
      base64_0.readResults(byteArray3, (-2147483646), (byte)0);
      byte[] byteArray4 = Base64.toIntegerBytes(bigInteger0);
      base64_1.decode(byteArray2);
      byte[] byteArray5 = Base64.encodeBase64(byteArray2, false, false);
      Base64.discardWhitespace(byteArray5);
      base64_1.hasData();
      Base64.encodeBase64URLSafe(byteArray4);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)92;
      Base64 base64_0 = new Base64(1638, byteArray0);
      base64_0.decode(byteArray0);
      base64_0.decode(byteArray0, (int) (byte)92, (int) (byte)92);
      Base64.decodeBase64((String) null);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.discardWhitespace(byteArray1);
      Base64 base64_0 = new Base64((byte)40);
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)18;
      Base64 base64_1 = new Base64(97, byteArray2);
      byte[] byteArray3 = new byte[7];
      byteArray3[0] = (byte) (-97);
      byteArray3[1] = (byte)51;
      byteArray3[2] = (byte)76;
      byteArray3[3] = (byte)40;
      byteArray3[4] = (byte)76;
      byteArray3[5] = (byte)40;
      byteArray3[6] = (byte)51;
      base64_1.encodeToString(byteArray3);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger1);
      Base64.isBase64(byteArray0);
      Base64.isBase64((byte) (-5));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-21);
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte) (-59);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ZERO;
      base64_0.readResults(byteArray0, 1, (byte) (-21));
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray2 = base64_0.decode(byteArray0);
      Base64.encodeBase64(byteArray2, false, false);
      Base64.discardWhitespace(byteArray1);
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      base64_0.encode(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)0;
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)21;
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      base64_0.encode(byteArray3, 210, (int) (byte)53);
      byte[] byteArray4 = new byte[3];
      byteArray4[0] = (byte)53;
      byteArray4[1] = (byte)123;
      byteArray4[2] = (byte)21;
      Base64.decodeBase64(byteArray4);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.abs();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64((-1), byteArray0, true);
      byte[] byteArray1 = new byte[4];
      BigInteger bigInteger2 = BigInteger.TEN;
      bigInteger0.modPow(bigInteger1, bigInteger2);
      byteArray1[0] = (byte) (-3);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-66);
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte) (-66);
      Base64.encodeBase64String(byteArray2);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64((byte[]) null, true, true, 3190);
      Base64.encodeBase64((byte[]) null, false);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte) (-21);
      byteArray0[4] = (byte)76;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64((byte)40);
      base64_0.encodeToString(byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.pow(2116);
      Base64.toIntegerBytes(bigInteger0);
      Base64.decodeBase64(byteArray1);
      base64_0.isUrlSafe();
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)20;
      byteArray0[6] = (byte)62;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger0.divide(bigInteger1);
      BigInteger bigInteger2 = BigInteger.ZERO;
      bigInteger2.toByteArray();
      Base64.toIntegerBytes(bigInteger1);
      byte[] byteArray1 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray1);
      base64_0.isUrlSafe();
      Base64.discardWhitespace(byteArray1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.divide(bigInteger1);
      bigInteger2.toByteArray();
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte) (-21);
      byteArray0[4] = (byte)76;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64((byte)40);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      Base64.encodeBase64(byteArray2, false, false, (int) (byte)40);
      Base64.encodeBase64(byteArray2, true, true, 1216);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64URLSafe(byteArray0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)42;
      Base64.isBase64((byte)57);
      Base64 base64_1 = new Base64((-1), byteArray0, true);
      base64_1.encodeToString(byteArray0);
      base64_1.readResults(byteArray0, (byte)57, (byte)42);
      base64_0.decode(byteArray0);
      base64_1.decode(byteArray0);
      Base64 base64_2 = new Base64();
      base64_2.isUrlSafe();
      base64_1.isUrlSafe();
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.decode("");
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-107);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte) (-107), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -107
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.abs();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64((-1), byteArray0, true);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-3);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-66);
      byteArray1[3] = (byte)0;
      Base64.encodeBase64String(byteArray1);
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)51;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.isBase64("J<^Q");
      Base64 base64_0 = new Base64(1);
      Base64.encodeBase64(byteArray1, false, true);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false, false);
      Base64.decodeBase64("J<^Q");
      byte[] byteArray3 = base64_0.decode("THhJev8A");
      Object object0 = base64_0.decode((Object) "");
      base64_0.decode(object0);
      base64_0.decode(byteArray0);
      Base64.encodeBase64(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray2);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.xor(bigInteger1);
      bigInteger0.isProbablePrime((-2212));
      byte[] byteArray4 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray5 = Base64.decodeBase64(byteArray3);
      Base64.isBase64(byteArray5);
      Base64.encodeBase64(byteArray0, false, false, 76);
      Base64.encodeBase64(byteArray4, true);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte2 = (byte)0;
      byteArray0[2] = (byte)0;
      Base64.isBase64(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.isBase64("AAAA");
      byte[] byteArray1 = base64_0.decode(byteArray0);
      base64_0.encodeToString(byteArray0);
      byte[] byteArray2 = new byte[5];
      base64_0.decode(byteArray1, (int) (byte)0, (int) (byte)0);
      Base64.decodeBase64(byteArray0);
      byteArray2[0] = (byte)0;
      try { 
        base64_0.encode((Object) "AAAA");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-54);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isArrayByteBase64(byteArray1);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-1014), byteArray1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [yg==\uFFFD\u001E]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)0;
      Base64.encodeBase64(byteArray0);
      Base64.decodeBase64("org.apache.commons.codec.EncoderException");
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Base64.isBase64((byte)30);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte)30;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64(0, byteArray1);
      byte[] byteArray2 = base64_0.decode(byteArray1);
      Base64.encodeBase64(byteArray2, false, false, 0);
      Base64.encodeBase64String(byteArray2);
      base64_0.decode(byteArray1, (int) (byte)30, (-192));
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null, false, true, 1478);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Base64.isBase64((byte) (-26));
      BigInteger bigInteger0 = BigInteger.ONE;
      MockRandom mockRandom0 = new MockRandom((byte) (-26));
      BigInteger bigInteger1 = null;
      try {
        bigInteger1 = new BigInteger((byte) (-26), mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numBits must be non-negative
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Base64 base64_0 = new Base64(1064);
      base64_0.avail();
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray0);
      
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)123;
      byteArray1[1] = (byte)67;
      byteArray1[2] = (byte) (-98);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte) (-93);
      byteArray1[5] = (byte)7;
      byteArray1[6] = (byte)28;
      byteArray1[7] = (byte) (-1);
      byteArray1[8] = (byte) (-79);
      Base64.isArrayByteBase64(byteArray1);
      boolean boolean0 = Base64.isArrayByteBase64(byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-2);
      byte byte0 = (byte) (-71);
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-62);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-15);
      byteArray0[6] = (byte)84;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64URLSafe(byteArray0);
      base64_0.readResults(byteArray0, 138, (byte) (-71));
      try { 
        base64_0.decode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte) (-21);
      byteArray0[4] = (byte)76;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64((byte)40);
      String string0 = base64_0.encodeToString(byteArray0);
      //  // Unstable assertion: assertEquals("eWEo60w=\uFFFD\n", string0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      boolean boolean0 = Base64.isBase64(byteArray2);
      //  // Unstable assertion: assertTrue(boolean0);
      
      boolean boolean1 = Base64.isBase64((byte)40);
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte byte0 = (byte)0;
      Base64.isBase64((byte)0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      Base64.encodeBase64(byteArray0, true);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)0;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, false, true, (-557));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of -557
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Base64.isBase64("");
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      base64_0.readResults(byteArray0, 0, (-915));
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)91;
      base64_0.readResults(byteArray0, 47, (byte)0);
      byteArray0[2] = (byte)65;
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.shortValueExact();
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      base64_0.decode(byteArray1);
      int int0 = base64_0.readResults(byteArray0, 0, 0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray3 = base64_0.decode("q#");
      int int1 = base64_0.avail();
      //  // Unstable assertion: assertTrue(int1 == int0);
      
      Base64.encodeBase64(byteArray3, true, true, (int) (byte)65);
      Base64.encodeBase64(byteArray2, false, true);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)70, (byte)116, (byte)66, (byte) (-98), (byte)10}, byteArray2);
      
      byte[] byteArray4 = Base64.decodeBase64(byteArray3);
      byte[] byteArray5 = Base64.decodeBase64(byteArray4);
      //  // Unstable assertion: assertSame(byteArray3, byteArray5);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-88);
      Base64 base64_0 = new Base64(1542, byteArray0);
      int int0 = base64_0.readResults(byteArray0, (byte) (-22), (byte) (-22));
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)20;
      byteArray0[6] = (byte)62;
      byteArray0[7] = (byte) (-24);
      byteArray0[8] = (byte) (-100);
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("ACoAAAEUPuic", string0);
      
      byte[] byteArray1 = base64_0.decode("");
      boolean boolean0 = Base64.isBase64((byte)62);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      assertSame(byteArray2, byteArray1);
      
      boolean boolean1 = base64_0.isUrlSafe();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Base64 base64_0 = new Base64((-1278));
      byte[] byteArray0 = new byte[5];
      Base64.decodeBase64(byteArray0);
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-49);
      Base64.decodeBase64(byteArray0);
      byteArray0[4] = (byte)25;
      Base64.encodeBase64String(byteArray0);
      base64_0.decode((Object) "ngAAzxk=");
      String string0 = "dk";
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-7);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)25;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte) (-98);
      Base64.encodeBase64(byteArray1, false);
      Base64.encodeBase64(byteArray0, false, false);
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte)70;
      byteArray0[1] = (byte)70;
      byte byte2 = (byte) (-43);
      byteArray0[2] = (byte) (-43);
      int int0 = 3821;
      Base64.encodeBase64(byteArray0, true, false, 3821);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000F\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte)0;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-373), byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [q\uFFFD\uFFFD\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertArrayEquals(new byte[] {(byte)69, (byte)117, (byte)113, (byte)118, (byte)65, (byte)65, (byte)65, (byte)61}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte)53;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)1;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-43);
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean0);
      
      Base64 base64_0 = new Base64((byte) (-43));
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("1Q==", string0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true);
      Base64.decodeInteger(byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = base64_0.decode("org.apache.commons.codec.DecoderException");
      base64_0.decode(byteArray0, (-689), (-3199));
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.isBase64((byte)71);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)71;
      byteArray2[1] = (byte)16;
      base64_0.encodeToString(byteArray2);
      base64_0.readResults(byteArray1, 0, (byte)16);
      byteArray2[2] = (byte)71;
      byteArray2[3] = (byte)71;
      byteArray2[4] = (byte)71;
      base64_0.decode(byteArray2);
      base64_0.decode(byteArray0);
      base64_0.isUrlSafe();
      base64_0.isUrlSafe();
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte) (-1);
      byteArray1[4] = (byte) (-1);
      Base64.decodeInteger(byteArray1);
      base64_0.encode(byteArray0);
      byteArray0[1] = (byte)0;
      Base64.encodeBase64URLSafe(byteArray0);
      base64_0.avail();
      int int0 = base64_0.avail();
      assertEquals(0, int0);
      
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray0);
      assertArrayEquals(new byte[] {(byte)95, (byte)119, (byte)65}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte) (-21);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64(byteArray1, true, true, 2019);
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte) (-78);
      Base64.isArrayByteBase64(byteArray2);
      Base64.decodeInteger(byteArray1);
      Base64.discardWhitespace(byteArray1);
      Base64.isBase64((byte)70);
      base64_0.decode(byteArray2, 866, 0);
      assertArrayEquals(new byte[] {(byte) (-78)}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte) (-17);
      byteArray0[4] = (byte) (-63);
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("Fd9W78E", string0);
  }
}
