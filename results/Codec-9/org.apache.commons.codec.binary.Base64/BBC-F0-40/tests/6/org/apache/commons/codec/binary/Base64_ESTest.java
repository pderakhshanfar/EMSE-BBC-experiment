/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:05:46 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[33];
      Base64 base64_0 = new Base64(13, byteArray0, true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      Base64 base64_1 = new Base64(true);
      base64_1.decode(byteArray3);
      String string0 = Base64.encodeBase64String(byteArray3);
      Base64.decodeInteger(byteArray0);
      // Undeclared exception!
      Base64.decodeBase64(string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[28];
      Base64 base64_0 = new Base64(9, byteArray0, false);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      Base64 base64_1 = new Base64(9);
      Base64.encodeBase64URLSafeString(byteArray0);
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray3, 9, 8129);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6480
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[31];
      Base64 base64_0 = new Base64(13, byteArray0, false);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      Base64 base64_1 = new Base64(64);
      Base64.encodeBase64URLSafeString(byteArray3);
      // Undeclared exception!
      base64_1.encode(byteArray4, 8164, 8164);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[42];
      Base64 base64_0 = new Base64(13, byteArray0, true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      Base64 base64_1 = new Base64(true);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      base64_0.decode(byteArray2, 76, 64);
      base64_1.encode(byteArray0);
      Base64 base64_2 = new Base64(76);
      // Undeclared exception!
      Base64.encodeBase64Chunked(byteArray3);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[49];
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0, 15, 7);
      base64_0.encode(byteArray0, 15, 7);
      Base64.encodeBase64(byteArray0, true, true);
      base64_0.readResults(byteArray0, 42, 0);
      base64_0.encode(byteArray0, (-2852), (-2852));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[33];
      int int0 = 13;
      Base64 base64_0 = new Base64(13, byteArray0, true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      int int1 = 1964;
      Base64 base64_1 = new Base64(true);
      Base64.encodeBase64String(byteArray3);
      // Undeclared exception!
      Base64.encodeBase64URLSafe(byteArray3);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[39];
      Base64 base64_0 = new Base64(6);
      base64_0.encode(byteArray0, 6, 6);
      Base64.encodeBase64(byteArray0, false);
      base64_0.encode(byteArray0, 3094, (-1817));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[49];
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0, 15, 7);
      base64_0.encode(byteArray0, (-2843), (-2843));
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)4;
      byteArray1[1] = (byte)16;
      byteArray1[2] = (byte)113;
      byteArray1[3] = (byte)110;
      byteArray1[4] = (byte)77;
      byteArray1[5] = (byte)43;
      byteArray1[6] = (byte)21;
      byteArray1[7] = (byte) (-1);
      byteArray1[8] = (byte)92;
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      base64_0.readResults(byteArray0, (byte)16, 59);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[27];
      Base64 base64_0 = new Base64(15, byteArray0, true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      Base64.isBase64(byteArray2);
      base64_0.decode(byteArray4);
      // Undeclared exception!
      Base64.encodeBase64(byteArray4);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[27];
      int int0 = 13;
      Base64 base64_0 = new Base64(13, byteArray0, false);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      Base64.isBase64(byteArray1);
      base64_0.decode(byteArray4);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = new BigInteger(byteArray4);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[49];
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0, 15, 7);
      base64_0.encode(byteArray0, 15, 7);
      base64_0.encode(byteArray0, (-2852), (-2852));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[49];
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0, 15, 7);
      base64_0.encode(byteArray0, 15, 7);
      base64_0.encode(byteArray0, (-2852), (-2852));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[49];
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0, 15, 7);
      base64_0.encode(byteArray0, (-2843), (-2843));
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)4;
      byteArray1[1] = (byte)4;
      byteArray1[2] = (byte)113;
      byteArray1[3] = (byte)110;
      byteArray1[4] = (byte)77;
      byteArray1[5] = (byte)43;
      byteArray1[6] = (byte)21;
      byteArray1[7] = (byte) (-1);
      byteArray1[8] = (byte)92;
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[27];
      Base64 base64_0 = new Base64(15, byteArray0, true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      Base64.isBase64(byteArray2);
      Base64.encodeBase64(byteArray3);
      base64_0.decode(byteArray4);
      // Undeclared exception!
      Base64.decodeInteger(byteArray4);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[27];
      int int0 = 15;
      Base64 base64_0 = new Base64(15, byteArray0, true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      Base64.isBase64(byteArray2);
      // Undeclared exception!
      Base64.encodeBase64URLSafeString(byteArray4);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[27];
      Base64 base64_0 = new Base64(15, byteArray0, true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      // Undeclared exception!
      Base64.encodeBase64(byteArray4, true);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[55];
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64.encodeBase64(byteArray0, false, false, 1895);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[49];
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0, 15, 7);
      Base64.encodeBase64(byteArray0, true);
      base64_0.encode(byteArray0, (-2852), (-2852));
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[49];
      Base64 base64_0 = new Base64(5, byteArray0, false);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = new byte[7];
      byteArray3[0] = (byte)9;
      byteArray3[1] = (byte)1;
      byteArray3[2] = (byte)17;
      byteArray3[3] = (byte)7;
      byteArray3[4] = (byte)6;
      byteArray3[5] = (byte)9;
      byteArray3[6] = (byte) (-9);
      Base64.isBase64(byteArray3);
      // Undeclared exception!
      base64_0.decode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[27];
      Base64 base64_0 = new Base64(5, byteArray0, true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      // Undeclared exception!
      Base64.encodeBase64String(byteArray3);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[27];
      Base64 base64_0 = new Base64(5, byteArray0, false);
      Base64 base64_1 = new Base64(false);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      // Undeclared exception!
      Base64.discardWhitespace(byteArray3);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[27];
      Base64 base64_0 = new Base64(5, byteArray0, true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      // Undeclared exception!
      base64_0.encode(byteArray3);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[27];
      Base64 base64_0 = new Base64(5, byteArray0, true);
      Base64 base64_1 = new Base64(true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      base64_1.decode(byteArray2);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      // Undeclared exception!
      base64_1.decode(byteArray3);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[27];
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", string0);
      
      Base64 base64_0 = new Base64(46, byteArray0, false);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = new byte[0];
      byte[] byteArray3 = base64_0.encode(byteArray2);
      byte[] byteArray4 = base64_0.decode(byteArray0);
      assertEquals(0, byteArray4.length);
      
      base64_0.encode(byteArray3);
      byte[] byteArray5 = base64_0.decode(byteArray2);
      assertSame(byteArray5, byteArray2);
      
      Object object0 = new Object();
      base64_0.encode(byteArray1, 1, 46);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(63, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = base64_0.decode("Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64 base64_1 = new Base64();
      boolean boolean0 = Base64.isBase64("0Kg-r-U&2X#CX<4X");
      //  // Unstable assertion: assertFalse(boolean0);
      
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64 base64_2 = new Base64(64);
      byte[] byteArray2 = base64_2.encode(byteArray1);
      BigInteger bigInteger0 = new BigInteger(byteArray2);
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      //  // Unstable assertion: assertEquals((short) (-3014), bigInteger0.shortValue());
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertEquals(104, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte)124;
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)0, (int) (byte)124);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 10);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte) (-12), (byte)58}, byteArray1);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray2);
      //  // Unstable assertion: assertEquals(4, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Base64 base64_0 = new Base64(292);
      Base64 base64_1 = new Base64(true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte)24;
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-85);
      byteArray1[1] = (byte)15;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)24;
      byteArray1[6] = (byte)15;
      byteArray1[7] = (byte)0;
      byteArray1[8] = (byte)24;
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray1, 0, (int) (byte)24);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64String(byteArray0);
      assertEquals(0, byteArray0.length);
      
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)32;
      byteArray1[1] = (byte) (-12);
      byteArray1[2] = (byte)58;
      byteArray1[3] = (byte) (-46);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      assertEquals(3, byteArray2.length);
      assertArrayEquals(new byte[] {(byte) (-12), (byte)58, (byte) (-46)}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)8;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      Base64 base64_0 = new Base64(false);
      base64_0.decode(byteArray2, 1, 2368);
      Base64.decodeInteger(byteArray1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)8;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(false);
      base64_0.decode(byteArray1, (int) (byte)8, (int) (byte)8);
      base64_0.avail();
      base64_0.decode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[1];
      base64_0.decode(byteArray0);
      byteArray0[0] = (byte)20;
      base64_0.encode(byteArray0);
      Base64.decodeBase64((String) null);
      Base64.isBase64((byte) (-87));
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)8;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(false);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, 0, (int) (byte)8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64.encodeBase64(byteArray1);
      Base64 base64_0 = new Base64(51, byteArray0);
      base64_0.decode("");
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeBase64((byte[]) null);
      Base64 base64_1 = new Base64(false);
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 76, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)8;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.clearBit((byte)8);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      BigInteger bigInteger2 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger2);
      Base64 base64_0 = new Base64((byte)8, byteArray0);
      Base64.toIntegerBytes(bigInteger1);
      base64_0.encode(byteArray1);
      Base64.decodeInteger(byteArray1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)126;
      byteArray0[5] = (byte) (-12);
      byteArray0[6] = (byte) (-19);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 80);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray2 = base64_0.decode(byteArray0);
      Base64.decodeInteger(byteArray1);
      Base64 base64_1 = new Base64(true);
      base64_1.encode(byteArray2);
      base64_1.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Base64 base64_0 = new Base64(653);
      byte[] byteArray0 = new byte[0];
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      BigInteger bigInteger0 = new BigInteger(1, mockRandom0);
      Base64.encodeInteger(bigInteger0);
      base64_0.readResults(byteArray0, (-2287), 1);
      Base64.decodeInteger(byteArray0);
      base64_0.encodeToString(byteArray0);
      base64_0.encode(byteArray0, (-1857), (-1857));
      byte[] byteArray1 = Base64.decodeBase64("yxgR(HS");
      base64_0.encode(byteArray0, 2, 653);
      base64_0.encode((byte[]) null);
      Random.setNextRandom((-1778));
      byte[] byteArray2 = Base64.decodeBase64("yxgR(HS");
      base64_0.encode((byte[]) null);
      byte[] byteArray3 = new byte[1];
      byteArray3[0] = (byte)81;
      Base64.discardWhitespace(byteArray3);
      base64_0.encode(byteArray2);
      base64_0.encode(byteArray1, 0, (-273));
      base64_0.decode(byteArray2, (-3968), (-273));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Base64 base64_0 = new Base64(2275);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      base64_0.encode(byteArray0, (-2147483639), (-2147483639));
      base64_0.hasData();
      Base64.decodeInteger(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, (-2147483639), 12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte)112;
      Base64.encodeBase64String(byteArray0);
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.decode(byteArray1, 477, (int) (byte) (-1));
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte) (-72);
      byte[] byteArray3 = new byte[2];
      byteArray3[0] = (byte) (-1);
      BigInteger bigInteger0 = BigInteger.ONE;
      base64_0.decode((byte[]) null);
      Base64.encodeBase64((byte[]) null);
      base64_0.hasData();
      Base64 base64_1 = new Base64((byte) (-72), (byte[]) null);
      base64_0.decode((String) null);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte)33;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, (int) (byte)33);
      Base64 base64_0 = new Base64();
      Base64.decodeInteger(byteArray1);
      String string0 = "org.apache.commons.codec.DecoderException";
      base64_0.decode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      base64_0.hasData();
      Base64 base64_1 = null;
      try {
        base64_1 = new Base64((-4209), byteArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [ISEhISE=]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Base64 base64_0 = new Base64(2275);
      BigInteger bigInteger0 = BigInteger.TEN;
      Random.setNextRandom(24);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte)68;
      byteArray0[6] = (byte)68;
      Base64.decodeInteger(byteArray0);
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64.encodeBase64String((byte[]) null);
      base64_0.hasData();
      base64_0.decode((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Base64 base64_0 = new Base64(2275);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)19;
      Base64.encodeBase64String(byteArray0);
      Base64.isBase64(byteArray0);
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(2275);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 36);
      Base64.isBase64((byte)15);
      Base64 base64_1 = new Base64(true);
      Base64.encodeBase64Chunked(byteArray0);
      base64_1.decode(byteArray1, 8, 329);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-1652), byteArray0, false);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      boolean boolean0 = base64_0.isUrlSafe();
      assertFalse(boolean0);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false);
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("", string0);
      
      Base64.encodeBase64(byteArray1);
      String string1 = base64_0.encodeToString(byteArray2);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)30;
      byteArray1[1] = (byte)21;
      byteArray1[2] = (byte)21;
      byteArray1[3] = (byte)30;
      byteArray1[4] = (byte) (-87);
      byteArray1[5] = (byte)12;
      byteArray1[6] = (byte) (-22);
      byteArray1[7] = (byte) (-107);
      byteArray1[8] = (byte) (-108);
      Base64 base64_0 = new Base64(1274, byteArray1, true);
      base64_0.isUrlSafe();
      Base64.encodeBase64(byteArray0, false);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte) (-87);
      byteArray2[1] = (byte)21;
      byteArray2[2] = (byte) (-102);
      byteArray2[3] = (byte)12;
      byteArray2[4] = (byte) (-4);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = 19;
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64(19, (byte[]) null, false);
      Base64.encodeBase64((byte[]) null, false, false);
      Base64.isBase64("");
      Base64.encodeBase64String((byte[]) null);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.decodeBase64((byte[]) null);
      base64_0.encodeToString((byte[]) null);
      int int1 = 8;
      base64_0.readResults((byte[]) null, (-2679), 8);
      byte byte0 = (byte)21;
      Base64.isBase64((byte)21);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-41);
      byteArray0[2] = (byte)64;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false, 1480);
      Base64.isBase64(byteArray1);
      Base64.discardWhitespace(byteArray1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-726));
      byte[] byteArray1 = new byte[5];
      byte[] byteArray2 = base64_0.decode(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2);
      base64_0.decode(byteArray3);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-3136), byteArray0, false);
      boolean boolean0 = base64_0.isUrlSafe();
      assertFalse(boolean0);
      
      Base64.encodeBase64(byteArray0, true, false, (int) (byte) (-98));
      Base64.isBase64((byte) (-98));
      Base64.encodeBase64(byteArray0, true);
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)118;
      byte[] byteArray1 = null;
      Base64.encodeBase64String((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte)0;
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0, 570, (int) (byte) (-72));
      Base64 base64_1 = new Base64((byte)0, byteArray1);
      byte[] byteArray2 = new byte[4];
      byte[] byteArray3 = new byte[6];
      byteArray3[0] = (byte) (-1);
      byteArray3[1] = (byte)0;
      byteArray3[2] = (byte) (-72);
      byteArray3[3] = (byte)1;
      byteArray3[4] = (byte) (-72);
      byteArray3[5] = (byte)0;
      Base64.decodeInteger(byteArray3);
      byteArray2[0] = (byte) (-72);
      byteArray2[1] = (byte) (-72);
      byteArray2[2] = (byte) (-1);
      byteArray2[3] = (byte)0;
      base64_1.decode(byteArray2);
      Base64.encodeBase64(byteArray0);
      base64_0.hasData();
      base64_0.decode("DO]{Rd,4=");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(2275);
      byte[] byteArray1 = new byte[0];
      Base64.encodeBase64URLSafe(byteArray1);
      Base64 base64_1 = new Base64(0, byteArray0);
      base64_1.encode(byteArray1, 76, 0);
      Base64.encodeBase64(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger1);
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray0, 0, 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false, (-726));
      Base64 base64_0 = new Base64((-726));
      Base64.decodeInteger(byteArray1);
      Base64.encodeBase64String(byteArray1);
      Base64.isBase64(byteArray0);
      Base64.discardWhitespace(byteArray1);
      Base64 base64_1 = new Base64(true);
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)42;
      byteArray2[1] = (byte)124;
      byteArray2[2] = (byte)123;
      byteArray2[3] = (byte)114;
      Base64.isArrayByteBase64(byteArray2);
      Base64.isBase64((byte)1);
      Base64.isBase64((byte)123);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte)0;
      Base64.encodeBase64String(byteArray0);
      Base64.isBase64(byteArray0);
      Base64.encodeBase64String(byteArray0);
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(false);
      Base64.isArrayByteBase64(byteArray1);
      Base64.isBase64((byte)79);
      Base64.isBase64((byte)61);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-50);
      byteArray0[2] = (byte)64;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 1480);
      Base64.isBase64((byte) (-108));
      Base64 base64_0 = new Base64(true);
      base64_0.decode(byteArray1, 9, (int) (byte)64);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(123, byteArray1);
      base64_0.avail();
      Base64.isBase64("");
      Base64.encodeBase64Chunked(byteArray0);
      Base64.decodeBase64("ISO-8859-1");
      base64_0.hasData();
      BigInteger bigInteger1 = BigInteger.TEN;
      byte[] byteArray2 = Base64.encodeInteger(bigInteger1);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray2, true, true, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(2275);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 0, 795);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Base64 base64_0 = new Base64(1717986918);
      byte[] byteArray0 = null;
      base64_0.readResults((byte[]) null, 65, 1131);
      base64_0.readResults((byte[]) null, 1717986918, 1131);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-1);
      Base64.encodeBase64String(byteArray0);
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(false);
      base64_0.decode((Object) "dv8AAP///w==");
      base64_0.readResults(byteArray0, 118, 0);
      Base64.isArrayByteBase64(byteArray1);
      Base64.isBase64((byte)114);
      Base64.isBase64((byte)0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-50);
      byte byte0 = (byte) (-108);
      byteArray0[1] = (byte) (-108);
      byte byte1 = (byte)64;
      byteArray0[2] = (byte)64;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = new byte[0];
      Base64.isArrayByteBase64(byteArray2);
      Base64.discardWhitespace(byteArray1);
      Base64.discardWhitespace(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, true);
      Base64 base64_0 = new Base64((-1941), byteArray3, true);
      int int0 = 5;
      byte[] byteArray4 = new byte[5];
      byteArray4[0] = (byte)64;
      byteArray4[1] = (byte) (-1);
      byte byte2 = (byte) (-34);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Base64 base64_0 = new Base64(1288);
      Base64.encodeBase64((byte[]) null, true, true, 1288);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte) (-124);
      Base64.isBase64((byte)115);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64(byteArray1);
      Base64 base64_0 = new Base64(14);
      base64_0.encode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte) (-42);
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte) (-58);
      byteArray0[5] = (byte)1;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64(byteArray1);
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)104;
      Base64 base64_0 = new Base64();
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-50);
      byteArray0[2] = (byte)64;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 1480);
      Base64.isBase64((byte) (-108));
      Base64.encodeBase64(byteArray1, true);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)0;
      byte byte0 = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)13;
      Base64 base64_0 = new Base64(374, byteArray0, true);
      base64_0.decode(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      Object object0 = new Object();
      Base64.encodeBase64(byteArray0, false, false);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, true, (int) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64String(byteArray0);
      int int0 = (-1);
      Base64 base64_0 = new Base64((-1));
      base64_0.encode(byteArray0, (-1), (-1));
      Base64.encodeBase64URLSafeString(byteArray0);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger("", 76);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Radix out of range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(false);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.nextProbablePrime();
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64((byte[]) null, true);
      byte[] byteArray0 = new byte[1];
      Base64.encodeBase64URLSafeString(byteArray0);
      byteArray0[0] = (byte)119;
      base64_0.encode(byteArray0, (-1), (-1));
      Random.setNextRandom(1);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)118;
      Base64.encodeBase64String(byteArray0);
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(false);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, (int) (byte)1, 477);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-94);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)127;
      Base64 base64_0 = new Base64(0, byteArray0);
      base64_0.decode((Object) "#8Qb{ONoH6");
      Object object0 = base64_0.decode((Object) "#8Qb{ONoH6");
      Object object1 = base64_0.decode(object0);
      Object object2 = base64_0.decode(object1);
      base64_0.encode(object2);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64.encodeBase64(byteArray0);
      Base64.isArrayByteBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)88;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = BigInteger.ONE;
      bigInteger0.andNot(bigInteger2);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(4);
      base64_0.decode(byteArray1, 8188, 0);
      byte[] byteArray2 = base64_0.decode("");
      base64_0.decode(byteArray2, (int) (byte)120, (-50));
      base64_0.isUrlSafe();
      Base64.isBase64("");
      base64_0.decode(byteArray0, (-2442), (-957));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)64;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = new byte[0];
      Base64.isArrayByteBase64(byteArray2);
      Base64.discardWhitespace(byteArray1);
      byte[] byteArray3 = Base64.discardWhitespace(byteArray1);
      byte[] byteArray4 = Base64.encodeBase64(byteArray2, true, true);
      Base64 base64_0 = new Base64((-1941), byteArray4, true);
      byte[] byteArray5 = new byte[5];
      byteArray5[0] = (byte)64;
      byteArray5[1] = (byte) (-1);
      byteArray5[2] = (byte) (-34);
      byteArray5[3] = (byte)64;
      byteArray5[4] = (byte) (-108);
      Base64.decodeInteger(byteArray5);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray3, 5, 43);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = 2829;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64 base64_0 = new Base64(2829, byteArray0, false);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (int) (byte)0, 2829);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64 base64_0 = new Base64(2829, byteArray0, false);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      base64_0.encode(byteArray0, (int) (byte)0, (int) (byte)0);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      BigInteger bigInteger1 = BigInteger.ONE;
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger1);
      base64_0.encode(byteArray3, (-1050), (-1944));
      byte[] byteArray4 = base64_0.decode(byteArray1);
      Base64.encodeBase64(byteArray2);
      base64_0.hasData();
      base64_0.decode((String) null);
      base64_0.decode(byteArray4, (int) (byte)0, (-1218));
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-50);
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)12;
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0, (int) (byte)0, (-1));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte)118;
      Base64.encodeBase64String(byteArray0);
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(true);
      Base64.isArrayByteBase64(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-72);
      Base64.isBase64((byte)1);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray1);
      base64_0.encode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Base64 base64_0 = new Base64(1288);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte) (-124);
      Base64.isBase64((byte)115);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte) (-51));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.decodeBase64(byteArray0);
      int int0 = 0;
      Base64 base64_0 = new Base64(0);
      Base64.encodeBase64Chunked(byteArray1);
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.nextProbablePrime();
      Base64.encodeInteger(bigInteger0);
      Base64.isBase64("Input array too big, the output array would be bigger (");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      base64_0.encodeToString(byteArray0);
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      Base64.encodeBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Base64 base64_0 = new Base64(53);
      byte[] byteArray0 = new byte[6];
      base64_0.decode(byteArray0, 3776, 0);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-66);
      Base64.decodeBase64(byteArray0);
      Base64.decodeBase64(byteArray0);
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte)69;
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64Chunked((byte[]) null);
      base64_0.readResults((byte[]) null, 53, 53);
      Object object0 = base64_0.decode((Object) "");
      base64_0.decode(object0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-66);
      byteArray1[1] = (byte)62;
      Base64.decodeBase64(byteArray1);
      Base64.decodeBase64((byte[]) null);
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64.isBase64((byte)0);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = "5~pe/UQEh+P";
      byte[] byteArray0 = Base64.decodeBase64("5~pe/UQEh+P");
      Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64();
      try { 
        base64_0.encode((Object) "5~pe/UQEh+P");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64(5686, (byte[]) null);
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, 5686, 5686);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-18);
      byteArray0[0] = (byte) (-18);
      Base64 base64_0 = new Base64(105, byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.decodeBase64("7g");
      base64_0.encodeToString(byteArray1);
      Base64.decodeBase64(byteArray1);
      Base64.encodeBase64(byteArray1, true);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.longValue();
      bigInteger0.min(bigInteger1);
      Base64.toIntegerBytes(bigInteger0);
      try { 
        base64_0.encode((Object) "#");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64 base64_0 = new Base64(2829, byteArray0, false);
      Base64.encodeBase64URLSafe(byteArray0);
      base64_0.encode(byteArray0, (-840), (-840));
      Base64.encodeBase64(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      base64_0.encode(byteArray0, (-1050), 1);
      base64_0.decode(byteArray0);
      Base64.encodeBase64(byteArray1);
      base64_0.hasData();
      base64_0.decode("2WCrL8f==Y");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte)0;
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64((byte[]) null, true, true);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)80;
      byteArray1[1] = (byte) (-114);
      byteArray1[2] = (byte)0;
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      Base64.discardWhitespace(byteArray2);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte) (-17);
      byteArray0[4] = (byte)0;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(663, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000b\uFFFD\uFFFD\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-64);
      byteArray0[7] = (byte)0;
      Base64 base64_0 = new Base64(0, byteArray0, false);
      int int0 = base64_0.readResults(byteArray0, 0, (byte)0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64.isBase64("k%=3");
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64String(byteArray0);
      base64_0.readResults(byteArray0, 1712, 1712);
      byte[] byteArray1 = new byte[1];
      byte byte0 = (byte) (-32);
      try { 
        base64_0.encode((Object) "k%=3");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)104;
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, (int) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false, (-726));
      Base64 base64_0 = new Base64((-726));
      Base64.decodeInteger(byteArray1);
      try { 
        base64_0.encode((Object) "org.apache.commons.codec.DecoderException");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      Object object0 = new Object();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)36;
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.isBase64("org.apache.commons.codec.EncoderException");
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)88;
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)18;
      byteArray0[7] = (byte) (-38);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.isArrayByteBase64(byteArray1);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      Base64.discardWhitespace(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, true);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray3, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [WDdaygAAEto\uFFFD:]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Base64 base64_0 = new Base64(66);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-2);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false);
      base64_0.encode(byteArray0, (int) (byte) (-2), (int) (byte) (-2));
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)63;
      byteArray0[7] = (byte) (-124);
      byteArray0[8] = (byte)120;
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray0);
      base64_0.avail();
      base64_0.encode(byteArray1, (int) (byte) (-124), (-80));
      Base64.encodeBase64(byteArray2, false);
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Base64 base64_0 = new Base64(5444);
      byte[] byteArray0 = new byte[4];
      String string0 = "";
      Base64.isBase64("");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.encodeBase64(byteArray1, true);
      byteArray0[0] = (byte) (-64);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger0);
      byteArray0[1] = (byte)0;
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray0);
      byte byte0 = (byte) (-105);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray2, 5444, 2331);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5444
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Base64 base64_0 = new Base64(1288);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte) (-106);
      byteArray0[5] = (byte) (-108);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.andNot(bigInteger1);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      byteArray0[6] = (byte) (-15);
      byteArray0[7] = (byte)120;
      base64_0.decode(byteArray0, Integer.MAX_VALUE, 0);
      base64_0.decode("org.apache.commons.codec.binary.Base64");
      byteArray0[8] = (byte)0;
      base64_0.decode(byteArray0, (-2442), 5);
      base64_0.isUrlSafe();
      Base64.isBase64("");
      base64_0.decode(byteArray1, (int) (byte) (-108), (-2553));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-43);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      base64_0.decode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Base64 base64_0 = new Base64(645);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-76);
      byteArray0[6] = (byte)0;
      Base64.encodeBase64(byteArray0, false, true);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-7);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      base64_0.encode(byteArray1, (-4333), (int) (byte)0);
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte) (-7);
      Base64.encodeBase64URLSafeString(byteArray2);
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)44;
      base64_0.decode(byteArray1);
      base64_0.encodeToString(byteArray0);
      byteArray0[4] = (byte) (-67);
      byteArray0[5] = (byte)0;
      base64_0.encode(byteArray0, (int) (byte)0, 2661);
      base64_0.encode(byteArray2, (int) (byte) (-67), (int) (byte)44);
      byte[] byteArray3 = base64_0.decode(byteArray1);
      Base64.decodeInteger(byteArray3);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.isUrlSafe();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-47);
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte) (-20);
      byteArray0[6] = (byte) (-47);
      byteArray0[7] = (byte)0;
      Base64.decodeBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-1);
      byteArray0[0] = (byte) (-1);
      base64_0.readResults(byteArray0, 67, (byte) (-1));
      Base64.encodeBase64(byteArray0, false, false);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      base64_0.readResults(byteArray0, 1, 0);
      byte byte1 = (byte)0;
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-94);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)127;
      Base64 base64_0 = new Base64(0, byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64(byteArray0, true);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true, 1516);
      assertEquals(8, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray1);
      assertArrayEquals(new byte[] {(byte)81, (byte)50, (byte)99, (byte)57, (byte)80, (byte)81, (byte)13, (byte)10}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertTrue(boolean0);
      
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte) (-42);
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)1;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Base64 base64_0 = new Base64(2576);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-8);
      byteArray0[5] = (byte)35;
      byteArray0[6] = (byte)0;
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray1 = new byte[8];
      byte byte0 = (byte)88;
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)118;
      Base64.encodeBase64String(byteArray0);
      boolean boolean0 = Base64.isBase64(byteArray0);
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(false);
      boolean boolean1 = Base64.isArrayByteBase64(byteArray0);
      assertTrue(boolean1 == boolean0);
  }
}
