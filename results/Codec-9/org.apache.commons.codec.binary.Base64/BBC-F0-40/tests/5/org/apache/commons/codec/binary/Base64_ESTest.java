/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:03:27 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      base64_0.decode((Object) "");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64(true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-84);
      byteArray0[7] = (byte) (-123);
      base64_0.encodeToString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = ") than the specified maxium size of ";
      byte[] byteArray0 = Base64.decodeBase64(") than the specified maxium size of ");
      Base64 base64_0 = new Base64(8124);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 71, 8124);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 71
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[52];
      Base64.decodeBase64((String) null);
      base64_0.encode(byteArray0, (int) (byte)10, (int) (byte)10);
      base64_0.decode((byte[]) null, (-539), (-3859));
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, (-424), (-424));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[52];
      byte[] byteArray1 = Base64.decodeBase64((String) null);
      byte byte0 = (byte)20;
      base64_0.encode(byteArray0, (int) byte0, (int) byte0);
      int int0 = (-424);
      base64_0.encode(byteArray1, (int) byte0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      MockRandom mockRandom0 = new MockRandom(68L);
      mockRandom0.doubles();
      BigInteger bigInteger0 = BigInteger.probablePrime(450, mockRandom0);
      Base64.encodeBase64(byteArray0, false, true);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(true);
      base64_0.decode(byteArray1, (-845), (-845));
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte) (-117);
      byteArray0[6] = (byte)88;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 0, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte)0;
      Base64.encodeBase64(byteArray0, true, true);
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.encodeBase64Chunked((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      Base64 base64_0 = new Base64(10);
      base64_0.decode((Object) "?&XotnvC_K%0!`+M");
      Base64.encodeBase64(byteArray0, false, true, 10);
      base64_0.decode(byteArray2, 10, 10);
      Base64.isBase64((byte)102);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Base64.isBase64((byte)0);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      Base64 base64_0 = new Base64((byte)0, byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false);
      base64_0.decode(byteArray2, (int) (byte)0, 10);
      Base64.decodeInteger(byteArray0);
      Base64.isBase64((byte)0);
      base64_0.readResults(byteArray1, (byte)0, (byte)0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[41];
      Base64.decodeBase64((String) null);
      base64_0.encode(byteArray0, (int) (byte)10, (int) (byte)10);
      base64_0.encode((byte[]) null, (-369), (-369));
      Base64.isBase64("US-ASCII");
      Base64.isBase64("US-ASCII");
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte) (-5);
      byteArray0[5] = (byte)91;
      byte byte0 = (byte)0;
      byteArray0[6] = (byte)0;
      Base64.isBase64(byteArray0);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, true, (-4462));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of -4462
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Base64.isBase64((byte)61);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Base64.isBase64((byte)0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-1);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, (int) (byte)59);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(13);
      base64_0.encodeToString(byteArray0);
      Base64 base64_1 = new Base64(76);
      Object object0 = new Object();
      try { 
        base64_1.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Base64.isBase64((byte)0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      base64_0.decode(byteArray1, 10, 0);
      Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)123;
      byteArray2[1] = (byte)71;
      byteArray2[2] = (byte)71;
      byteArray2[3] = (byte)55;
      byteArray2[4] = (byte)71;
      byteArray2[5] = (byte)55;
      Base64 base64_1 = null;
      try {
        base64_1 = new Base64((-1964), byteArray2, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [{GG7G7]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Base64.isBase64((byte)0);
      byte[] byteArray0 = new byte[2];
      Base64 base64_0 = new Base64((byte)0, byteArray0);
      Base64.encodeBase64(byteArray0);
      boolean boolean0 = false;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)59;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)0;
      byteArray2[6] = (byte)0;
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray2);
      base64_0.decode(byteArray1, (int) (byte)0, 384);
      Base64.decodeBase64(byteArray3);
      base64_0.encodeToString(byteArray3);
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Base64.isBase64((byte)0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)14;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, (int) (byte)59);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Base64.isBase64((byte)0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-20);
      byteArray0[6] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64("G2ky");
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64 base64_0 = new Base64(false);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray2, false, false, (int) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      MockRandom mockRandom0 = new MockRandom(4296L);
      BigInteger bigInteger0 = BigInteger.probablePrime((byte)63, mockRandom0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      String string0 = "";
      String string1 = "org.apache.commons.codec.DecoderException";
      Base64.isBase64("org.apache.commons.codec.DecoderException");
      Base64 base64_0 = new Base64((byte)63, byteArray0);
      base64_0.decode(byteArray0);
      Base64 base64_1 = new Base64((byte)63, byteArray1);
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)63;
      byteArray2[1] = (byte)63;
      byteArray2[2] = (byte)63;
      base64_1.decode(byteArray2);
      Base64 base64_2 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)17;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64("");
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true, false, 7);
      Base64.isBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[24];
      base64_0.encode(byteArray0, (int) (byte)10, (int) (byte)10);
      Base64.encodeBase64(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger0);
      base64_0.avail();
      byte[] byteArray1 = new byte[0];
      Base64.decodeInteger(byteArray1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)17;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64 base64_0 = new Base64((byte)23);
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      MockRandom mockRandom0 = new MockRandom((byte)23);
      BigInteger.probablePrime((byte)17, mockRandom0);
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64("");
      base64_0.decode(byteArray0);
      base64_0.decode(byteArray1);
      byte[] byteArray3 = Base64.discardWhitespace(byteArray1);
      Base64.decodeBase64("[V_Y;_");
      base64_0.hasData();
      byte[] byteArray4 = base64_0.encode(byteArray3);
      base64_0.hasData();
      Base64.decodeInteger(byteArray2);
      base64_0.encode(byteArray4);
      Base64.isArrayByteBase64(byteArray4);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)23;
      byteArray0[0] = (byte)23;
      byte byte1 = (byte)17;
      byteArray0[1] = (byte)17;
      Base64 base64_0 = new Base64((byte)23, byteArray0);
      Base64.isBase64("z'~T@#y0$ZlcXr GxP");
      byte[] byteArray1 = Base64.decodeBase64("");
      Base64 base64_1 = new Base64(229, byteArray1, false);
      base64_1.hasData();
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Base64.isBase64((byte)0);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      Base64 base64_0 = new Base64((byte)0, byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false);
      base64_0.decode(byteArray2, (int) (byte)0, 10);
      byte[] byteArray3 = Base64.decodeBase64(byteArray1);
      base64_0.decode(byteArray3, 1930, (-3691));
      byte[] byteArray4 = Base64.encodeBase64(byteArray2);
      Base64.isArrayByteBase64(byteArray4);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64(261, byteArray0);
      Base64.isBase64("z'~T@#y0$ZlcXr GxP");
      Base64.isBase64((byte)0);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64(byteArray0);
      Base64.encodeBase64(byteArray0);
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64(false);
      base64_0.encode((byte[]) null, 0, (-2063));
      Base64.isBase64("%2");
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, 2196, 2196);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Base64.isBase64((byte)0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      Base64 base64_0 = new Base64(390, byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, false);
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray2);
      base64_0.decode(byteArray3, (int) (byte)0, 10);
      Base64.isBase64((byte) (-24));
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.doubleValue();
      bigInteger0.bitCount();
      byte[] byteArray4 = Base64.toIntegerBytes(bigInteger0);
      base64_0.decode(byteArray4, (int) (byte)0, 1);
      base64_0.readResults(byteArray1, 1, 1);
      Base64.encodeBase64(byteArray2);
      Base64.isArrayByteBase64(byteArray4);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Base64.isBase64((byte)125);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Base64.isBase64((byte)0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      Base64 base64_0 = new Base64(390, byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, false);
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray2);
      base64_0.decode(byteArray3, (int) (byte)0, 10);
      byte[] byteArray4 = Base64.decodeBase64(byteArray3);
      base64_0.decode(byteArray4, 1930, (-3691));
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray4, 86, 390);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[24];
      base64_0.encode(byteArray0, (int) (byte)10, (int) (byte)10);
      Base64.isArrayByteBase64(byteArray0);
      Base64.discardWhitespace(byteArray0);
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Base64.isBase64((byte)0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      int int0 = 390;
      Base64 base64_0 = new Base64(390, byteArray0);
      MockRandom mockRandom0 = new MockRandom((-1332L));
      BigInteger bigInteger0 = BigInteger.probablePrime(1935, mockRandom0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      String string0 = "UJb4p7qqN}E<u5.a~";
      Base64.isBase64("UJb4p7qqN}E<u5.a~");
      base64_0.decode(byteArray1);
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)29;
      Base64 base64_0 = new Base64(261, byteArray0);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false, false);
      Base64.isBase64("D_@#z\"kl6Qu15");
      byte[] byteArray3 = new byte[4];
      byteArray3[0] = (byte)29;
      byteArray3[1] = (byte)29;
      byteArray3[2] = (byte)29;
      base64_0.readResults(byteArray1, 62, (byte)29);
      byteArray3[3] = (byte)17;
      base64_0.encodeToString(byteArray3);
      base64_0.encode(byteArray2, (int) (byte)29, (-2254));
      byte[] byteArray4 = Base64.decodeBase64("D_@#z\"kl6Qu15");
      Base64.encodeBase64(byteArray4);
      base64_0.isUrlSafe();
      Base64.decodeInteger(byteArray3);
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64((-2706), (byte[]) null, true);
      Base64.encodeBase64((byte[]) null);
      Base64.encodeBase64((byte[]) null, false, true);
      Base64.encodeBase64URLSafe((byte[]) null);
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, (-2706), 104);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte byte0 = (byte)119;
      Base64.isBase64((byte)119);
      byte[] byteArray0 = null;
      boolean boolean0 = false;
      Base64.encodeBase64((byte[]) null, false, false);
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)23;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64(114);
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      MockRandom mockRandom0 = new MockRandom((-1245L));
      BigInteger bigInteger1 = BigInteger.probablePrime(1935, mockRandom0);
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger1);
      Base64.isBase64("cal");
      byte[] byteArray3 = base64_0.decode(byteArray1);
      byte[] byteArray4 = Base64.discardWhitespace(byteArray2);
      byte[] byteArray5 = Base64.encodeBase64(byteArray3, true, false);
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray6 = Base64.encodeBase64(byteArray5);
      byte[] byteArray7 = new byte[2];
      byteArray7[0] = (byte)23;
      byteArray7[1] = (byte)91;
      base64_0.encode(byteArray7, (int) (byte)17, 114);
      base64_0.encode(byteArray4);
      Base64.decodeBase64(byteArray6);
      Base64.encodeBase64Chunked(byteArray2);
      Base64.decodeBase64(byteArray6);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64 base64_0 = new Base64(0, byteArray0);
      boolean boolean0 = Base64.isBase64("encodeInteger called with null parameter");
      assertTrue(boolean0);
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      assertEquals(0, byteArray1.length);
      
      Base64.isBase64((byte)7);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      assertEquals(0, byteArray2.length);
      
      Base64 base64_1 = new Base64(false);
      Base64 base64_2 = new Base64(false);
      Object object0 = base64_2.decode((Object) "encodeInteger called with null parameter");
      Object object1 = base64_0.decode(object0);
      Object object2 = base64_0.encode(object1);
      assertNotSame(object2, object1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Base64.isBase64((byte)63);
      assertFalse(boolean0);
      
      Base64 base64_0 = new Base64(true);
      int int0 = base64_0.readResults(byteArray0, (-1110), 8184);
      assertEquals(0, int0);
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      bigInteger0.toString();
      byte[] byteArray1 = new byte[0];
      Base64.discardWhitespace(byteArray0);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte) (-1);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)21;
      String string0 = "GHa4HRh*B~4.";
      Base64 base64_0 = new Base64(13);
      byte[] byteArray1 = base64_0.decode("GHa4HRh*B~4.");
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true, true, 64);
      base64_0.encodeToString(byteArray1);
      byte[] byteArray3 = new byte[9];
      byteArray3[0] = (byte)21;
      byteArray3[1] = (byte)21;
      byteArray3[2] = (byte)21;
      byteArray3[3] = (byte)21;
      byteArray3[4] = (byte)21;
      byteArray3[5] = (byte)21;
      byteArray3[6] = (byte)21;
      byteArray3[7] = (byte)21;
      byteArray3[8] = (byte)21;
      Base64.encodeBase64URLSafeString(byteArray3);
      base64_0.decode(byteArray2, 13, 13);
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray1);
      Base64.discardWhitespace(byteArray4);
      try { 
        base64_0.encode((Object) "FRUVFRUVFRUV");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)23;
      byte byte0 = (byte)17;
      boolean boolean0 = false;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64 base64_0 = new Base64((-1));
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      MockRandom mockRandom0 = new MockRandom(64);
      BigInteger.probablePrime((byte)17, mockRandom0);
      BigInteger bigInteger1 = BigInteger.TEN;
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger1);
      Base64.isBase64("");
      byte[] byteArray3 = base64_0.decode(byteArray2);
      base64_0.decode(byteArray3);
      Base64.discardWhitespace(byteArray3);
      Base64 base64_1 = new Base64();
      base64_0.encodeToString(byteArray3);
      Base64.decodeBase64("");
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (-1), 45);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte)80;
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte)39;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((byte) (-14), bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64 base64_0 = new Base64(0, byteArray0);
      boolean boolean0 = Base64.isBase64("encodeInteger called with null parameter");
      //  // Unstable assertion: assertTrue(boolean0);
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Base64.encodeBase64URLSafe(byteArray1);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      BigInteger.valueOf(52L);
      base64_0.encode(byteArray0);
      bigInteger0.setBit((byte)0);
      bigInteger0.toString();
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray4 = Base64.discardWhitespace(byteArray3);
      //  // Unstable assertion: assertEquals(0, byteArray4.length);
      
      byte[] byteArray5 = Base64.encodeBase64Chunked(byteArray0);
      base64_0.encode(byteArray2, 105, (-2846));
      //  // Unstable assertion: assertEquals(0, byteArray2.length);
      
      byte[] byteArray6 = Base64.encodeBase64(byteArray5);
      //  // Unstable assertion: assertEquals(8, byteArray6.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61, (byte) (-94), (byte) (-72)}, byteArray5);
      
      byte[] byteArray7 = new byte[5];
      byteArray7[0] = (byte)0;
      byteArray7[1] = (byte)0;
      byteArray7[2] = (byte)0;
      byteArray7[3] = (byte)0;
      byteArray7[4] = (byte)0;
      int int0 = base64_0.readResults(byteArray7, 0, (byte)0);
      //  // Unstable assertion: assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.decodeBase64(byteArray0);
      byte[] byteArray1 = null;
      Base64 base64_0 = new Base64((-2683), (byte[]) null, true);
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64URLSafe((byte[]) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger0);
      Base64 base64_1 = new Base64(64);
      Base64 base64_2 = new Base64();
      base64_0.encodeToString((byte[]) null);
      Base64.decodeBase64((String) null);
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, (-2247), 64);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[38];
      byteArray0[0] = (byte)0;
      byteArray0[25] = (byte) (-35);
      byteArray0[2] = (byte)0;
      base64_0.encode(byteArray0, 86, (int) (byte)0);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray2 = Base64.decodeBase64("{Ci");
      Base64.decodeBase64(byteArray2);
      base64_0.readResults(byteArray2, (byte) (-35), (byte)0);
      assertArrayEquals(new byte[] {(byte)10}, byteArray2);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64 base64_0 = new Base64(false);
      base64_0.encode((byte[]) null);
      int int0 = 0;
      int int1 = (-2057);
      base64_0.encode((byte[]) null, 0, (-2057));
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.isBase64("nz");
      base64_0.decode((byte[]) null, 0, 1);
      Base64.isBase64((byte) (-90));
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)17;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64 base64_0 = new Base64(false);
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      MockRandom mockRandom0 = new MockRandom((byte)23);
      base64_0.decode((String) null);
      try { 
        base64_0.decode((Object) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[24];
      base64_0.encode(byteArray0, (int) (byte)0, (-503));
      Base64.decodeBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true);
      Base64.decodeBase64("{Ci");
      Base64.decodeBase64(byteArray1);
      try { 
        base64_0.encode((Object) "Y=6q4&");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[24];
      base64_0.encode(byteArray0, (int) (byte)10, (int) (byte)10);
      Base64.encodeBase64(byteArray0, false, true);
      Base64.decodeBase64((String) null);
      Base64.decodeBase64((byte[]) null);
      Base64 base64_1 = new Base64(false);
      try { 
        base64_1.encode((Object) base64_0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      base64_0.decode((byte[]) null);
      assertFalse(base64_0.isUrlSafe());
      
      boolean boolean0 = Base64.isBase64((byte)118);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte)1;
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte)0;
      Base64.encodeBase64URLSafe(byteArray1);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64((byte)0);
      Base64 base64_1 = new Base64();
      base64_1.encodeToString(byteArray1);
      Base64.decodeBase64("TP&Zmw|$<!t1OE`?");
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (int) (byte)0, 8160);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte)107;
      byteArray0[6] = (byte) (-84);
      byteArray0[7] = (byte) (-84);
      byteArray0[8] = (byte)0;
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean0);
      
      Base64.encodeBase64String((byte[]) null);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((byte)100, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(466, byteArray0);
      byte[] byteArray1 = base64_0.decode("org.apache.commons.codec.DecoderException");
      Base64.isBase64("org.apache.commons.codec.DecoderException");
      base64_0.decode(byteArray1);
      Base64.discardWhitespace(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, false);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray0);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      Base64.decodeBase64(byteArray1);
      Base64.encodeBase64Chunked(byteArray2);
      Base64.decodeBase64(byteArray1);
      base64_0.decode((Object) "org.apache.commons.codec.DecoderException");
      Base64.encodeBase64URLSafe(byteArray4);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      Base64.isArrayByteBase64(byteArray0);
      Base64.decodeInteger(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray2, (int) (byte)0, 62);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Base64.isBase64((byte)0);
      byte[] byteArray0 = new byte[7];
      Base64 base64_0 = new Base64(true);
      int int0 = (-2057);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (-1839), 2162);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1839
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-23);
      byteArray0[4] = (byte) (-118);
      byteArray0[5] = (byte)0;
      Base64 base64_0 = new Base64(37, byteArray0, true);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.shortValueExact();
      bigInteger0.floatValue();
      Base64.encodeInteger(bigInteger0);
      bigInteger0.isProbablePrime(76);
      base64_0.avail();
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte) (-118);
      byteArray2[2] = (byte) (-118);
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte) (-1);
      Base64.decodeInteger(byteArray2);
      Base64.decodeBase64("");
      base64_0.decode(byteArray0);
      Base64.isArrayByteBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Base64.isBase64((byte)0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64(390, byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false, false);
      Base64.isBase64("AA==");
      Base64.encodeBase64URLSafe(byteArray1);
      base64_0.decode(byteArray2, 390, (int) (byte)0);
      Base64.decodeBase64(byteArray0);
      base64_0.decode(byteArray0, (-3691), (-4391));
      base64_0.readResults(byteArray0, (-3691), (-2641));
      Base64.encodeBase64(byteArray0);
      Base64.isBase64("AA==");
      base64_0.decode("GHa4HRh*B~4.");
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, false, true, 390);
      base64_0.encodeToString(byteArray3);
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.decode(byteArray3, (-1077), (int) (byte)0);
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray3);
      Base64.discardWhitespace(byteArray4);
      try { 
        base64_0.encode((Object) "QUE=\u0000");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)104;
      Base64.encodeBase64URLSafe(byteArray0);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)98;
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      base64_0.encodeToString(byteArray0);
      byteArray0[3] = (byte)0;
      byte[] byteArray2 = Base64.decodeBase64("aAFiAAAA\r\n");
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)82;
      base64_0.encode(byteArray0, (int) (byte)104, (-472));
      base64_0.decode(" A\"K=2y\"2lq1T:");
      Base64.decodeInteger(byteArray1);
      Base64.decodeBase64(" A\"K=2y\"2lq1T:");
      Base64.encodeBase64(byteArray2, false);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte)78;
      Base64.encodeBase64(byteArray0, false, false);
      byte[] byteArray1 = Base64.decodeBase64(") than the specified maxium size of ");
      Base64.decodeBase64(byteArray1);
      try { 
        base64_0.encode((Object) ") than the specified maxium size of ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64 base64_0 = new Base64(false);
      int int0 = 0;
      int int1 = (-2057);
      base64_0.encode((byte[]) null, 0, (-2057));
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.isBase64("");
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-22);
      Base64 base64_0 = new Base64(0, byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)0;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false, 1214);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61}, byteArray2);
      assertEquals(4, byteArray2.length);
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, false, false);
      assertEquals(4, byteArray3.length);
      
      base64_0.hasData();
      int int0 = base64_0.readResults(byteArray0, (byte)0, (byte)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      base64_0.readResults(byteArray0, 118, 118);
      byte[] byteArray1 = base64_0.decode("hf\"J`N/eFYk");
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte)119;
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)73;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)119;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)0;
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray2);
      assertEquals(7, byteArray3.length);
      
      byteArray0[5] = (byte)73;
      base64_0.encodeToString(byteArray0);
      byte[] byteArray4 = Base64.encodeBase64(byteArray1, false);
      Base64.encodeBase64(byteArray4);
      byte[] byteArray5 = base64_0.encode(byteArray4);
      assertEquals(13, byteArray5.length);
      assertArrayEquals(new byte[] {(byte)104, (byte)102, (byte)74, (byte)78, (byte)47, (byte)101, (byte)70, (byte)89}, byteArray4);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isArrayByteBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      Base64.isBase64((byte) (-118));
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.and(bigInteger1);
      BigInteger bigInteger2 = bigInteger0.negate();
      bigInteger2.byteValueExact();
      Base64 base64_0 = new Base64(false);
      Base64.toIntegerBytes(bigInteger0);
      base64_0.encodeToString(byteArray1);
      bigInteger0.toString(0);
      Base64.encodeBase64Chunked(byteArray0);
      bigInteger0.shiftLeft(76);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      Base64.isArrayByteBase64(byteArray2);
      base64_0.hasData();
      byte[] byteArray3 = base64_0.decode("");
      String string0 = base64_0.encodeToString(byteArray2);
      assertEquals("", string0);
      
      base64_0.isUrlSafe();
      Base64.toIntegerBytes(bigInteger2);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      Base64.encodeBase64(byteArray4, true);
      assertSame(byteArray3, byteArray4);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      base64_0.encode(byteArray0, 2718, (-3507));
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, true, 100);
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      boolean boolean0 = Base64.isBase64("p^NT");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)96;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)1;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(673, byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD\u0000\u0000a`\u0001\u0001]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64.decodeBase64((String) null);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64(274, (byte[]) null, true);
      Base64.encodeBase64((byte[]) null, true);
      base64_0.decode((byte[]) null, (-1001), 0);
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-126);
      byteArray0[0] = (byte) (-126);
      byte byte1 = (byte)53;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)0;
      byte byte2 = (byte)1;
      byteArray0[3] = (byte)1;
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64();
      Object object0 = base64_0.decode((Object) "gjUAAQ==");
      base64_0.decode(byteArray0);
      base64_0.decode(object0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        bigInteger0.byteValueExact();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger out of byte range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Base64 base64_0 = new Base64();
      boolean boolean0 = base64_0.hasData();
      assertFalse(base64_0.isUrlSafe());
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte)0;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
      
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)90;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      assertArrayEquals(new byte[] {(byte)65, (byte)70, (byte)111, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-78);
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)80;
      byte byte1 = (byte) (-81);
      byteArray0[3] = (byte) (-81);
      byte byte2 = (byte)98;
      byteArray0[4] = (byte)98;
      byte byte3 = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)46;
      byte byte4 = (byte)0;
      byteArray0[8] = (byte)0;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, (-529));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of -529
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null, false, true, 1);
      assertNull(byteArray0);
      
      byte[] byteArray1 = Base64.decodeBase64("");
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Base64 base64_0 = new Base64(0, (byte[]) null);
      Base64.isBase64("");
      byte[] byteArray0 = base64_0.decode("");
      base64_0.decode(byteArray0, 0, (-1));
      assertEquals(0, byteArray0.length);
      
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)80;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)15;
      byteArray1[3] = (byte)78;
      byteArray1[4] = (byte) (-80);
      byteArray1[5] = (byte)1;
      byteArray1[6] = (byte) (-1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      assertEquals(12, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64((-2706), (byte[]) null, true);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      bigInteger0.toString();
      Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64("");
      base64_0.encodeToString(byteArray1);
      byte[] byteArray3 = Base64.discardWhitespace(byteArray1);
      Base64.decodeBase64("");
      Base64.encodeBase64(byteArray2);
      boolean boolean0 = base64_0.isUrlSafe();
      Base64.decodeInteger(byteArray0);
      String string0 = base64_0.encodeToString(byteArray3);
      assertEquals("", string0);
      
      boolean boolean1 = Base64.isBase64(byteArray2);
      assertTrue(boolean1 == boolean0);
      assertSame(byteArray0, byteArray1);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)86;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte byte0 = (byte)56;
      Base64.isBase64((byte)56);
      Base64.isArrayByteBase64(byteArray1);
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte) (-91);
      byteArray2[1] = (byte)86;
      byteArray2[2] = (byte)36;
      byteArray2[3] = (byte)74;
      byteArray2[4] = (byte)56;
      byteArray2[5] = (byte)36;
      byteArray2[6] = (byte)36;
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray2);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64(true);
      Object object0 = new Object();
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.readResults(byteArray3, 0, (byte)36);
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-80);
      Base64.encodeBase64(byteArray0, true, true);
      base64_0.isUrlSafe();
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger0);
      try { 
        base64_0.encode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-10);
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("LgD/APY=", string0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Base64 base64_0 = new Base64(2745);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)53;
      base64_0.encode(byteArray0);
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte) (-97);
      byteArray0[5] = (byte)0;
      Base64.isArrayByteBase64(byteArray0);
      Base64.decodeInteger(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = new byte[1];
      Base64.encodeBase64URLSafeString(byteArray0);
      byteArray1[0] = (byte)0;
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte) (-99);
      byteArray2[5] = (byte)55;
      Base64.decodeBase64(byteArray2);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, 1883, 1110);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1883
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)78;
      byteArray1[1] = (byte) (-113);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)64;
      byteArray1[4] = (byte) (-109);
      byteArray1[5] = (byte)1;
      byteArray1[6] = (byte) (-1);
      byteArray1[7] = (byte)0;
      byteArray1[8] = (byte)0;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(260, byteArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [N\uFFFD\u0000@\uFFFD\u0001\uFFFD\u0000\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte)125;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertEquals(12, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)17;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64 base64_0 = new Base64((byte)23);
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      MockRandom mockRandom0 = new MockRandom((byte)23);
      BigInteger.probablePrime((byte)17, mockRandom0);
      Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64("");
      byte[] byteArray2 = base64_0.decode(byteArray0);
      byte[] byteArray3 = base64_0.decode(byteArray1);
      byte[] byteArray4 = Base64.discardWhitespace(byteArray1);
      Base64.encodeBase64(byteArray2, false, true);
      Base64.encodeBase64URLSafeString(byteArray3);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray5 = new byte[2];
      byteArray5[0] = (byte)17;
      byteArray5[1] = (byte)23;
      base64_0.encode(byteArray5, (int) (byte)23, (int) (byte)17);
      base64_0.encode(byteArray3);
      byte[] byteArray6 = Base64.decodeBase64(byteArray1);
      Base64.encodeBase64Chunked(byteArray4);
      Base64.decodeBase64(byteArray6);
      base64_0.readResults(byteArray4, 2563, 0);
      byte[] byteArray7 = new byte[0];
      base64_0.decode(byteArray7, (int) (byte)17, (int) (byte)23);
      assertNotSame(byteArray7, byteArray0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)25;
      byteArray0[5] = (byte)102;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-761), byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000\u001A\u0000o\u0019f]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-37);
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }
}
