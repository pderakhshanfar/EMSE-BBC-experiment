* EvoSuite 1.1.1-SNAPSHOT
* Configuration: default
* Going to generate test cases for class: org.apache.commons.codec.binary.Base64
* Starting Client-0
* Connecting to master process on port 21774
* Analyzing classpath: 
  - subjects/buggy-versions/Codec-9/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.codec.binary.Base64
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1539
* Using seed 1199369137
* Starting evolution
* Initial Number of Goals in DynaMOSA = 419 / 1539
* Search finished after 301s and 171 generations, 85182 statements, best individual has fitness: 87.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 98%
* Total number of goals: 216
* Number of covered goals: 212
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 95%
* Total number of goals: 193
* Number of covered goals: 184
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 91%
* Total number of goals: 23
* Number of covered goals: 21
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 95%
* Total number of goals: 787
* Number of covered goals: 750
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 91%
* Total number of goals: 80
* Number of covered goals: 73
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 35
* Number of covered goals: 35
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 35
* Number of covered goals: 35
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 94%
* Total number of goals: 193
* Number of covered goals: 181
* Generated 105 tests with total length 272
* Resulting test suite's coverage: 91% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 03:42:08.176 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6677333333333333% of time used, but only 34/105 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 35%
* Compiling and checking tests
[MASTER] 03:42:37.705 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 03:42:37.706 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
boolean boolean0 = Base64.isBase64(byteArray0);
assertFalse(boolean0);


[MASTER] 03:42:40.836 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [4]; expected:<1> but was:<13>
[MASTER] 03:42:40.836 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[3];
byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
assertNotNull(byteArray1);
assertFalse(byteArray1.equals((Object)byteArray0));
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertEquals(3, byteArray0.length);
assertEquals(6, byteArray1.length);
assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)1, (byte)0}, byteArray1);


[MASTER] 03:42:47.453 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [0]; expected:<1> but was:<13>
[MASTER] 03:42:47.453 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[0];
Base64 base64_0 = new Base64(1615, byteArray0);
assertNotNull(base64_0);
assertFalse(base64_0.isUrlSafe());
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(0, byteArray0.length);
assertArrayEquals(new byte[] {}, byteArray0);

byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
assertNotNull(byteArray1);
assertFalse(byteArray1.equals((Object)byteArray0));
assertNotSame(byteArray1, byteArray0);
assertEquals(2, byteArray1.length);
assertArrayEquals(new byte[] {(byte)1, (byte)0}, byteArray1);

base64_0.encodeToString(byteArray1);

[MASTER] 03:42:48.645 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [4]; expected:<1> but was:<13>
[MASTER] 03:42:48.646 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BigInteger bigInteger0 = BigInteger.ONE;
assertNotNull(bigInteger0);
assertEquals((short)1, bigInteger0.shortValue());
assertEquals((byte)1, bigInteger0.byteValue());

byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
assertNotNull(byteArray0);
assertEquals((short)1, bigInteger0.shortValue());
assertEquals((byte)1, bigInteger0.byteValue());
assertEquals(1, byteArray0.length);
assertArrayEquals(new byte[] {(byte)1}, byteArray0);

Base64 base64_0 = new Base64(false);
assertNotNull(base64_0);
assertFalse(base64_0.isUrlSafe());
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);

byte[] byteArray1 = base64_0.encode(byteArray0);
assertNotNull(byteArray1);
assertFalse(byteArray1.equals((Object)byteArray0));
assertEquals((short)1, bigInteger0.shortValue());
assertEquals((byte)1, bigInteger0.byteValue());
assertFalse(base64_0.isUrlSafe());
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertEquals(1, byteArray0.length);
assertEquals(6, byteArray1.length);
assertArrayEquals(new byte[] {(byte)1}, byteArray0);
assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61, (byte)1, (byte)0}, byteArray1);

byte[] byteArray2 = base64_0.decode(byteArray1);
assertNotNull(byteArray2);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertEquals((short)1, bigInteger0.shortValue());
assertEquals((byte)1, bigInteger0.byteValue());
assertFalse(base64_0.isUrlSafe());
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray1);
assertEquals(1, byteArray0.length);
assertEquals(6, byteArray1.length);
assertEquals(1, byteArray2.length);
assertArrayEquals(new byte[] {(byte)1}, byteArray0);
assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61, (byte)1, (byte)0}, byteArray1);
assertArrayEquals(new byte[] {(byte)1}, byteArray2);


[MASTER] 03:42:50.194 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [0]; expected:<1> but was:<13>
[MASTER] 03:42:50.194 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
assertNotNull(byteArray0);
assertEquals(2, byteArray0.length);
assertArrayEquals(new byte[] {(byte)1, (byte)0}, byteArray0);

byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
assertNotNull(byteArray1);
assertFalse(byteArray1.equals((Object)byteArray0));
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertEquals(2, byteArray0.length);
assertEquals(2, byteArray1.length);
assertArrayEquals(new byte[] {(byte)1, (byte)0}, byteArray0);
assertArrayEquals(new byte[] {(byte)1, (byte)0}, byteArray1);


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 7
* Writing tests to file
* Writing JUnit test case 'Base64_ESTest' to results/Codec-9/org.apache.commons.codec.binary.Base64/default/tests/9
* Done!

* Computation finished
