* EvoSuite 1.1.1-SNAPSHOT
* Configuration: default
* Going to generate test cases for class: org.apache.commons.codec.binary.Base64
* Starting Client-0
* Connecting to master process on port 5543
* Analyzing classpath: 
  - subjects/buggy-versions/Codec-9/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.codec.binary.Base64
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1539
* Using seed 675447060
* Starting evolution
* Initial Number of Goals in DynaMOSA = 419 / 1539
* Search finished after 302s and 399 generations, 183896 statements, best individual has fitness: 68.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 100%
* Total number of goals: 216
* Number of covered goals: 215
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 97%
* Total number of goals: 193
* Number of covered goals: 187
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 96%
* Total number of goals: 28
* Number of covered goals: 27
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 97%
* Total number of goals: 787
* Number of covered goals: 763
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 91%
* Total number of goals: 80
* Number of covered goals: 73
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 35
* Number of covered goals: 35
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 35
* Number of covered goals: 35
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 96%
* Total number of goals: 193
* Number of covered goals: 185
* Generated 106 tests with total length 295
* Resulting test suite's coverage: 92% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 03:42:47.288 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6798% of time used, but only 52/106 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 34%
* Compiling and checking tests
[MASTER] 03:43:25.555 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: array lengths differed, expected.length=1 actual.length=0; arrays first differed at element [0]; expected:<0> but was:<end of array>
[MASTER] 03:43:25.555 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
assertArrayEquals(new byte[] {(byte)0}, byteArray1);
assertEquals(1, byteArray1.length);


[MASTER] 03:43:31.787 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [4]; expected:<0> but was:<13>
[MASTER] 03:43:31.787 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[3];
byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, (int) (byte)118);
assertNotNull(byteArray1);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)0, (byte)0}, byteArray1);
assertEquals(3, byteArray0.length);
assertEquals(6, byteArray1.length);
assertFalse(byteArray1.equals((Object)byteArray0));


[MASTER] 03:43:33.604 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<6484> but was:<6316>
[MASTER] 03:43:33.608 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[88];
Base64 base64_0 = new Base64(20, byteArray0);
assertNotNull(base64_0);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertFalse(base64_0.isUrlSafe());
assertEquals(88, byteArray0.length);

byte[] byteArray1 = base64_0.encode(byteArray0);
assertNotNull(byteArray1);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertFalse(base64_0.isUrlSafe());
assertEquals(88, byteArray0.length);
assertEquals(648, byteArray1.length);
assertFalse(byteArray1.equals((Object)byteArray0));

byte[] byteArray2 = base64_0.encode(byteArray1);
assertNotNull(byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray0);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertFalse(base64_0.isUrlSafe());
assertEquals(88, byteArray0.length);
assertEquals(648, byteArray1.length);
assertEquals(4736, byteArray2.length);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));

byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
assertNotNull(byteArray3);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray3);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray2);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertFalse(base64_0.isUrlSafe());
assertEquals(88, byteArray0.length);
assertEquals(648, byteArray1.length);
assertEquals(4736, byteArray2.length);
assertEquals(6484, byteArray3.length);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray2));

byte[] byteArray4 = Base64.discardWhitespace(byteArray3);
assertNotNull(byteArray4);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray3);
assertNotSame(byteArray2, byteArray4);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray4);
assertNotSame(byteArray4, byteArray0);
assertNotSame(byteArray4, byteArray2);
assertNotSame(byteArray4, byteArray1);
assertNotSame(byteArray4, byteArray3);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertFalse(base64_0.isUrlSafe());
assertEquals(88, byteArray0.length);
assertEquals(648, byteArray1.length);
assertEquals(4736, byteArray2.length);
assertEquals(6484, byteArray3.length);
assertEquals(6484, byteArray4.length);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray4.equals((Object)byteArray0));
assertFalse(byteArray4.equals((Object)byteArray2));
assertFalse(byteArray4.equals((Object)byteArray1));
assertFalse(byteArray4.equals((Object)byteArray3));

Base64.discardWhitespace(byteArray3);

[MASTER] 03:43:39.906 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 03:43:39.910 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[88];
Base64 base64_0 = new Base64(20, byteArray0);
assertNotNull(base64_0);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(base64_0.isUrlSafe());
assertEquals(88, byteArray0.length);

byte[] byteArray1 = base64_0.encode(byteArray0);
assertNotNull(byteArray1);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(base64_0.isUrlSafe());
assertEquals(88, byteArray0.length);
assertEquals(648, byteArray1.length);
assertFalse(byteArray1.equals((Object)byteArray0));

byte[] byteArray2 = base64_0.encode(byteArray1);
assertNotNull(byteArray2);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray0);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(base64_0.isUrlSafe());
assertEquals(88, byteArray0.length);
assertEquals(648, byteArray1.length);
assertEquals(4736, byteArray2.length);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));

byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
assertNotNull(byteArray3);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray2, byteArray3);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray0);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(base64_0.isUrlSafe());
assertEquals(88, byteArray0.length);
assertEquals(648, byteArray1.length);
assertEquals(4736, byteArray2.length);
assertEquals(6484, byteArray3.length);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray0));

boolean boolean0 = Base64.isBase64(byteArray3);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray2, byteArray3);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray0);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(base64_0.isUrlSafe());
assertEquals(88, byteArray0.length);
assertEquals(648, byteArray1.length);
assertEquals(4736, byteArray2.length);
assertEquals(6484, byteArray3.length);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(boolean0);

boolean boolean1 = Base64.isBase64(byteArray3);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray2, byteArray3);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray0);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(base64_0.isUrlSafe());
assertEquals(88, byteArray0.length);
assertEquals(648, byteArray1.length);
assertEquals(4736, byteArray2.length);
assertEquals(6484, byteArray3.length);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray0));
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);


[MASTER] 03:43:41.791 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [4]; expected:<0> but was:<13>
[MASTER] 03:43:41.793 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[1];
byteArray0[0] = (byte) (-1);
byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
assertNotNull(byteArray1);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
assertArrayEquals(new byte[] {(byte)47, (byte)119, (byte)61, (byte)61, (byte)0, (byte)0}, byteArray1);
assertEquals(1, byteArray0.length);
assertEquals(6, byteArray1.length);
assertFalse(byteArray1.equals((Object)byteArray0));

BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
assertNotNull(bigInteger0);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
assertArrayEquals(new byte[] {(byte)47, (byte)119, (byte)61, (byte)61, (byte)0, (byte)0}, byteArray1);
assertEquals((short)255, bigInteger0.shortValue());
assertEquals((byte) (-1), bigInteger0.byteValue());
assertEquals(1, byteArray0.length);
assertEquals(6, byteArray1.length);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));


[MASTER] 03:43:41.982 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [0]; expected:<0> but was:<13>
[MASTER] 03:43:41.982 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
assertNotNull(byteArray0);
assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
assertEquals(2, byteArray0.length);

BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
assertNotNull(bigInteger0);
assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
assertEquals((byte)0, bigInteger0.byteValue());
assertEquals((short)0, bigInteger0.shortValue());
assertEquals(2, byteArray0.length);


[MASTER] 03:43:44.409 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [4]; expected:<0> but was:<13>
[MASTER] 03:43:44.409 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[2];
byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
assertNotNull(byteArray1);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)61, (byte)0, (byte)0}, byteArray1);
assertEquals(2, byteArray0.length);
assertEquals(6, byteArray1.length);
assertFalse(byteArray1.equals((Object)byteArray0));

boolean boolean0 = Base64.isArrayByteBase64(byteArray1);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)61, (byte)0, (byte)0}, byteArray1);
assertEquals(2, byteArray0.length);
assertEquals(6, byteArray1.length);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(boolean0);


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 6
* Writing tests to file
* Writing JUnit test case 'Base64_ESTest' to results/Codec-9/org.apache.commons.codec.binary.Base64/default/tests/12
* Done!

* Computation finished
