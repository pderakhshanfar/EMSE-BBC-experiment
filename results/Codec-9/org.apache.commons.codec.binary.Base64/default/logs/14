* EvoSuite 1.1.1-SNAPSHOT
* Configuration: default
* Going to generate test cases for class: org.apache.commons.codec.binary.Base64
* Starting Client-0
* Connecting to master process on port 8379
* Analyzing classpath: 
  - subjects/buggy-versions/Codec-9/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.codec.binary.Base64
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1539
* Using seed 3893869957
* Starting evolution
* Initial Number of Goals in DynaMOSA = 419 / 1539
* Search finished after 303s and 68 generations, 36431 statements, best individual has fitness: 96.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 98%
* Total number of goals: 216
* Number of covered goals: 212
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 95%
* Total number of goals: 193
* Number of covered goals: 183
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 95%
* Total number of goals: 19
* Number of covered goals: 18
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 95%
* Total number of goals: 787
* Number of covered goals: 749
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 90%
* Total number of goals: 80
* Number of covered goals: 72
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 35
* Number of covered goals: 35
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 35
* Number of covered goals: 35
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 88%
* Total number of goals: 193
* Number of covered goals: 170
* Generated 98 tests with total length 225
* Resulting test suite's coverage: 91% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 03:42:55.688 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.9438% of time used, but only 31/98 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 34%
* Compiling and checking tests
[MASTER] 03:43:25.626 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: array lengths differed, expected.length=1 actual.length=0; arrays first differed at element [0]; expected:<-88> but was:<end of array>
[MASTER] 03:43:25.627 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
assertArrayEquals(new byte[] {(byte) (-88)}, byteArray1);
assertEquals(1, byteArray1.length);


[MASTER] 03:43:27.783 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [0]; expected:<-88> but was:<13>
[MASTER] 03:43:27.788 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
assertArrayEquals(new byte[] {(byte) (-88), (byte)10}, byteArray0);
assertEquals(2, byteArray0.length);
assertNotNull(byteArray0);

Base64 base64_0 = new Base64((-5794), byteArray0, true);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertArrayEquals(new byte[] {(byte) (-88), (byte)10}, byteArray0);
assertEquals(2, byteArray0.length);
assertNotNull(base64_0);
assertTrue(base64_0.isUrlSafe());

Object object0 = base64_0.decode((Object) "[I{{%EQkYR4!5ju;Kc(");
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertArrayEquals(new byte[] {(byte) (-88), (byte)10}, byteArray0);
assertNotSame(byteArray0, object0);
assertEquals(2, byteArray0.length);
assertNotNull(object0);
assertTrue(base64_0.isUrlSafe());

Object object1 = base64_0.encode(object0);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertArrayEquals(new byte[] {(byte) (-88), (byte)10}, byteArray0);
assertFalse(byteArray0.equals((Object)object0));
assertFalse(object1.equals((Object)object0));
assertNotSame(byteArray0, object1);
assertNotSame(byteArray0, object0);
assertNotSame(object0, object1);
assertNotSame(object1, object0);
assertEquals(2, byteArray0.length);
assertNotNull(object1);
assertTrue(base64_0.isUrlSafe());


[MASTER] 03:43:30.686 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [8]; expected:<-88> but was:<13>
[MASTER] 03:43:30.687 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64 base64_0 = new Base64(30);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertNotNull(base64_0);
assertFalse(base64_0.isUrlSafe());

byte[] byteArray0 = new byte[5];
byte[] byteArray1 = base64_0.encode(byteArray0);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61, (byte) (-88), (byte)10}, byteArray1);
assertFalse(byteArray1.equals((Object)byteArray0));
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertEquals(5, byteArray0.length);
assertEquals(10, byteArray1.length);
assertNotNull(byteArray1);
assertFalse(base64_0.isUrlSafe());

base64_0.decode(byteArray1, 2687, 2687);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61, (byte) (-88), (byte)10}, byteArray1);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertEquals(5, byteArray0.length);
assertEquals(10, byteArray1.length);
assertFalse(base64_0.isUrlSafe());


[MASTER] 03:43:36.489 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [0]; expected:<-88> but was:<13>
[MASTER] 03:43:36.489 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
assertArrayEquals(new byte[] {(byte) (-88), (byte)10}, byteArray0);
assertEquals(2, byteArray0.length);
assertNotNull(byteArray0);

byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true, 1767);
assertArrayEquals(new byte[] {(byte) (-88), (byte)10}, byteArray0);
assertArrayEquals(new byte[] {(byte)113, (byte)65, (byte)111}, byteArray1);
assertFalse(byteArray1.equals((Object)byteArray0));
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertEquals(2, byteArray0.length);
assertEquals(3, byteArray1.length);
assertNotNull(byteArray1);


[MASTER] 03:43:36.596 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [7]; expected:<-88> but was:<13>
[MASTER] 03:43:36.597 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[5];
byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, (int) (byte)10);
assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte) (-88), (byte)10}, byteArray1);
assertFalse(byteArray1.equals((Object)byteArray0));
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertEquals(5, byteArray0.length);
assertEquals(9, byteArray1.length);
assertNotNull(byteArray1);


[MASTER] 03:43:42.562 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [0]; expected:<-88> but was:<13>
[MASTER] 03:43:42.563 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
assertArrayEquals(new byte[] {(byte) (-88), (byte)10}, byteArray0);
assertEquals(2, byteArray0.length);
assertNotNull(byteArray0);

Base64 base64_0 = new Base64(1852, byteArray0);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertArrayEquals(new byte[] {(byte) (-88), (byte)10}, byteArray0);
assertEquals(2, byteArray0.length);
assertNotNull(base64_0);
assertFalse(base64_0.isUrlSafe());


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 9
* Writing tests to file
* Writing JUnit test case 'Base64_ESTest' to results/Codec-9/org.apache.commons.codec.binary.Base64/default/tests/14
* Done!

* Computation finished
