* EvoSuite 1.1.1-SNAPSHOT
* Configuration: default
* Going to generate test cases for class: org.apache.commons.codec.binary.Base64
* Starting Client-0
* Connecting to master process on port 11252
* Analyzing classpath: 
  - subjects/buggy-versions/Codec-9/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.codec.binary.Base64
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1539
* Using seed 3739355126
* Starting evolution
* Initial Number of Goals in DynaMOSA = 419 / 1539
Number of times BBC is called in total: 0
* Search finished after 604s and 204 generations, 109538 statements, best individual has fitness: 85.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
[MASTER] 21:15:25.658 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Coverage of criterion LINE: 100%
* Total number of goals: 216
* Number of covered goals: 215
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 95%
* Total number of goals: 193
* Number of covered goals: 184
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 34
* Number of covered goals: 34
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 96%
* Total number of goals: 787
* Number of covered goals: 759
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 90%
* Total number of goals: 80
* Number of covered goals: 72
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 35
* Number of covered goals: 35
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 35
* Number of covered goals: 35
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 94%
* Total number of goals: 193
* Number of covered goals: 181
* Generated 174 tests with total length 1550
* Resulting test suite's coverage: 92% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 21:16:28.477 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 60%
* Compiling and checking tests
[MASTER] 21:17:07.764 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [0]; expected:<111> but was:<68>
[MASTER] 21:17:07.764 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
Base64 base64_0 = new Base64();
byte[] byteArray1 = base64_0.encode(byteArray0);
assertArrayEquals(new byte[] {(byte)111, (byte)103, (byte)111, (byte)61}, byteArray1);

int int0 = base64_0.readResults(byteArray0, 25, 25);
assertEquals((-1), int0);


[MASTER] 21:17:08.119 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 21:17:08.119 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
boolean boolean0 = Base64.isBase64(byteArray0);
assertFalse(boolean0);


[MASTER] 21:17:08.991 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 21:17:08.991 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
assertFalse(boolean0);


[MASTER] 21:17:09.413 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 21:17:09.413 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[3];
byteArray0[0] = (byte)0;
byteArray0[1] = (byte) (-1);
byteArray0[2] = (byte)0;
Base64 base64_0 = new Base64(5582, byteArray0);
Base64.encodeBase64(byteArray0, false);
byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
base64_0.isUrlSafe();
byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
Base64.encodeBase64(byteArray0);
boolean boolean0 = Base64.isArrayByteBase64(byteArray2);
boolean boolean1 = Base64.isBase64(byteArray2);
assertFalse(boolean1);
assertEquals(10, byteArray2.length);
assertArrayEquals(new byte[] {(byte)81, (byte)86, (byte)65, (byte)52, (byte)81, (byte)81, (byte)61, (byte)61, (byte) (-94), (byte)10}, byteArray2);

Base64 base64_1 = new Base64((byte) (-1));
base64_0.decode((Object) "");
boolean boolean2 = Base64.isBase64((byte)1);
assertTrue(boolean2 == boolean0);


[MASTER] 21:17:15.020 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: array lengths differed, expected.length=2 actual.length=0; arrays first differed at element [0]; expected:<65> but was:<end of array>
[MASTER] 21:17:15.020 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
assertArrayEquals(new byte[] {(byte)65, (byte) (-20)}, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertEquals(2, byteArray1.length);


[MASTER] 21:17:15.462 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [8]; expected:<0> but was:<13>
[MASTER] 21:17:15.462 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64 base64_0 = new Base64(119);
BigInteger bigInteger0 = BigInteger.TEN;
byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
Base64 base64_1 = new Base64(false);
byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
assertArrayEquals(new byte[] {(byte)81, (byte)50, (byte)99, (byte)57, (byte)80, (byte)81, (byte)61, (byte)61, (byte)0, (byte)0}, byteArray1);

base64_1.decode(byteArray0);
byte[] byteArray2 = base64_1.decode(byteArray0);
assertArrayEquals(new byte[] {(byte)10}, byteArray2);

byte[] byteArray3 = new byte[6];
byteArray3[0] = (byte) (-89);
byteArray3[1] = (byte)87;
byteArray3[2] = (byte)32;
byteArray3[3] = (byte)123;
byteArray3[5] = (byte)40;
Base64.discardWhitespace(byteArray3);
byte[] byteArray4 = Base64.discardWhitespace(byteArray0);
assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray0);
assertEquals(4, byteArray4.length);


[MASTER] 21:17:15.530 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 21:17:15.531 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
Base64.encodeBase64String(byteArray0);
boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
Base64.isBase64(byteArray0);
Base64 base64_0 = new Base64((-1587));
boolean boolean1 = Base64.isBase64("JL0=");
assertFalse(boolean1 == boolean0);

Object object0 = base64_0.decode((Object) "org.apache.commons.codec.binary.Base64");
base64_0.hasData();
BigInteger bigInteger0 = BigInteger.ONE;
byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray1);
assertEquals(4, byteArray1.length);

byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
assertNotSame(byteArray0, object0);
assertEquals(2, byteArray2.length);


[MASTER] 21:17:17.206 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [4]; expected:<0> but was:<13>
[MASTER] 21:17:17.207 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[0];
byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
byte[] byteArray2 = new byte[1];
byteArray2[0] = (byte) (-124);
Base64 base64_0 = new Base64((-1997), byteArray2, true);
boolean boolean0 = base64_0.isUrlSafe();
assertTrue(boolean0);

Base64.encodeBase64Chunked(byteArray0);
Base64.encodeBase64(byteArray1);
Base64.isBase64((byte) (-124));
byte[] byteArray3 = Base64.discardWhitespace(byteArray1);
byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray2);
assertArrayEquals(new byte[] {(byte)104, (byte)65, (byte)61, (byte)61, (byte)0, (byte)0}, byteArray4);

Base64.encodeBase64String(byteArray1);
byte[] byteArray5 = new byte[7];
byteArray5[0] = (byte)0;
byteArray5[2] = (byte)0;
byteArray5[3] = (byte) (-124);
byteArray5[4] = (byte)0;
byteArray5[5] = (byte) (-40);
byteArray5[6] = (byte) (-124);
byte[] byteArray6 = base64_0.encode(byteArray5);
assertEquals(10, byteArray6.length);

base64_0.avail();
Base64.encodeBase64(byteArray3);
base64_0.decode((Object) "org.apache.commons.codec.DecoderException");
assertTrue(base64_0.isUrlSafe());


[MASTER] 21:17:18.061 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [8]; expected:<0> but was:<13>
[MASTER] 21:17:18.062 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[3];
byteArray0[0] = (byte)0;
byteArray0[1] = (byte) (-1);
byteArray0[2] = (byte)0;
Base64 base64_0 = new Base64(5582, byteArray0);
Base64.encodeBase64String(byteArray0);
Base64.encodeBase64(byteArray0, false);
byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
boolean boolean0 = base64_0.isUrlSafe();
assertFalse(boolean0);

byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
byte[] byteArray3 = Base64.encodeBase64(byteArray0);
Base64.isBase64((byte)0);
byte[] byteArray4 = Base64.discardWhitespace(byteArray3);
assertEquals(4, byteArray4.length);
assertArrayEquals(new byte[] {(byte)65, (byte)80, (byte)56, (byte)65}, byteArray4);

Base64.isBase64(byteArray2);
assertArrayEquals(new byte[] {(byte)81, (byte)86, (byte)65, (byte)52, (byte)81, (byte)81, (byte)61, (byte)61, (byte)0, (byte)0}, byteArray2);
assertEquals(10, byteArray2.length);

Base64 base64_1 = new Base64((byte)0);
Base64.isBase64((byte)0);
base64_1.decode((Object) "org.apache.commons.codec.DecoderException");
base64_0.hasData();
BigInteger bigInteger0 = Base64.decodeInteger(byteArray3);
assertEquals((short) (-256), bigInteger0.shortValue());


[MASTER] 21:17:18.770 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [8]; expected:<0> but was:<13>
[MASTER] 21:17:18.770 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64 base64_0 = new Base64(17);
byte[] byteArray0 = new byte[6];
byteArray0[0] = (byte) (-49);
Base64.encodeBase64URLSafeString(byteArray0);
byteArray0[1] = (byte)0;
String string0 = Base64.encodeBase64URLSafeString(byteArray0);
assertEquals("zwAAAAAA", string0);

Base64.decodeInteger(byteArray0);
byteArray0[2] = (byte) (-98);
byte[] byteArray1 = Base64.decodeBase64(byteArray0);
byteArray0[3] = (byte)93;
byteArray0[4] = (byte)13;
byte[] byteArray2 = base64_0.decode("9}_'");
assertArrayEquals(new byte[] {(byte) (-9)}, byteArray2);

byteArray0[5] = (byte)32;
byte[] byteArray3 = base64_0.encode(byteArray0);
assertArrayEquals(new byte[] {(byte)122, (byte)119, (byte)67, (byte)101, (byte)88, (byte)81, (byte)48, (byte)103, (byte)0, (byte)0}, byteArray3);

base64_0.decode(byteArray0, 69, 8186);
byte[] byteArray4 = base64_0.decode(byteArray1);
assertEquals(0, byteArray4.length);


[MASTER] 21:17:19.542 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [4]; expected:<105> but was:<68>
[MASTER] 21:17:19.542 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[2];
byteArray0[0] = (byte) (-118);
byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 13);
Base64 base64_0 = new Base64(false);
boolean boolean0 = Base64.isBase64("D>t@pBvB~");
assertFalse(boolean0);

BigInteger bigInteger0 = new BigInteger(byteArray0);
Base64.toIntegerBytes(bigInteger0);
Base64.decodeInteger(byteArray0);
byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
assertEquals(10, byteArray2.length);
assertArrayEquals(new byte[] {(byte)97, (byte)87, (byte)100, (byte)66, (byte)105, (byte)119, (byte)65, (byte)61, (byte) (-117), (byte)0}, byteArray2);


[MASTER] 21:17:20.251 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [4]; expected:<-117> but was:<13>
[MASTER] 21:17:20.251 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[3];
Base64 base64_0 = new Base64(false);
base64_0.decode(byteArray0, 1, (int) (byte)1);
assertFalse(base64_0.isUrlSafe());

byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte) (-117), (byte)0}, byteArray1);


[MASTER] 21:17:22.171 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [4]; expected:<-117> but was:<13>
[MASTER] 21:17:22.171 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64 base64_0 = new Base64(17);
byte[] byteArray0 = new byte[6];
byteArray0[0] = (byte) (-49);
Base64.encodeBase64URLSafeString(byteArray0);
byteArray0[1] = (byte)0;
String string0 = Base64.encodeBase64URLSafeString(byteArray0);
assertEquals("zwAAAAAA", string0);

Base64.decodeInteger(byteArray0);
byte[] byteArray1 = Base64.decodeBase64(byteArray0);
byte[] byteArray2 = base64_0.decode("9}_'");
byte[] byteArray3 = base64_0.encode(byteArray2);
base64_0.decode(byteArray1, 7, (int) (byte)0);
byte[] byteArray4 = base64_0.decode(byteArray3);
assertArrayEquals(new byte[] {(byte)57, (byte)119, (byte)61, (byte)61, (byte) (-117), (byte)0}, byteArray3);
assertEquals(1, byteArray4.length);

byte[] byteArray5 = base64_0.encode(byteArray2);
assertEquals(6, byteArray5.length);

byte[] byteArray6 = Base64.encodeBase64(byteArray1, false, false);
assertSame(byteArray1, byteArray6);


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 7
* Writing tests to file
[MASTER] 21:17:25.982 [logback-2] ERROR JUnitAnalyzer - Ran out of time while checking tests
* Writing JUnit test case 'Base64_ESTest' to results/Codec-9/org.apache.commons.codec.binary.Base64/default/tests/6
* Done!

* Computation finished
