* EvoSuite 1.1.1-SNAPSHOT
* Configuration: default
* Going to generate test cases for class: org.apache.commons.codec.binary.Base64
* Starting Client-0
* Connecting to master process on port 15062
* Analyzing classpath: 
  - subjects/buggy-versions/Codec-9/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.codec.binary.Base64
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1539
* Using seed 711847772
* Starting evolution
* Initial Number of Goals in DynaMOSA = 419 / 1539
* Search finished after 302s and 86 generations, 51536 statements, best individual has fitness: 104.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 98%
* Total number of goals: 216
* Number of covered goals: 212
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 94%
* Total number of goals: 193
* Number of covered goals: 182
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 95%
* Total number of goals: 21
* Number of covered goals: 20
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 95%
* Total number of goals: 787
* Number of covered goals: 748
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 91%
* Total number of goals: 80
* Number of covered goals: 73
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 35
* Number of covered goals: 35
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 35
* Number of covered goals: 35
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 88%
* Total number of goals: 193
* Number of covered goals: 169
* Generated 98 tests with total length 249
* Resulting test suite's coverage: 90% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 03:38:55.092 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.7822% of time used, but only 40/98 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 33%
* Compiling and checking tests
[MASTER] 03:39:09.991 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.ArrayIndexOutOfBoundsException: -1
[MASTER] 03:39:09.991 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
Base64 base64_0 = new Base64(34, byteArray1, false);
Object object0 = base64_0.decode((Object) "Jho9vFRga");
base64_0.encode(object0);

[MASTER] 03:39:14.208 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [0]; expected:<-89> but was:<13>
[MASTER] 03:39:14.208 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
assertNotNull(byteArray0);
assertEquals(2, byteArray0.length);
assertArrayEquals(new byte[] {(byte) (-89), (byte)0}, byteArray0);

byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, (int) (byte)124);
assertFalse(byteArray1.equals((Object)byteArray0));
assertNotNull(byteArray1);
assertEquals(2, byteArray0.length);
assertEquals(4, byteArray1.length);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertArrayEquals(new byte[] {(byte) (-89), (byte)0}, byteArray0);
assertArrayEquals(new byte[] {(byte)112, (byte)119, (byte)65, (byte)61}, byteArray1);


[MASTER] 03:39:14.605 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [0]; expected:<-89> but was:<13>
[MASTER] 03:39:14.605 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
assertNotNull(byteArray0);
assertEquals(2, byteArray0.length);
assertArrayEquals(new byte[] {(byte) (-89), (byte)0}, byteArray0);

byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
assertFalse(byteArray1.equals((Object)byteArray0));
assertNotNull(byteArray1);
assertEquals(2, byteArray0.length);
assertEquals(2, byteArray1.length);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertArrayEquals(new byte[] {(byte) (-89), (byte)0}, byteArray0);
assertArrayEquals(new byte[] {(byte) (-89), (byte)0}, byteArray1);

Base64 base64_0 = new Base64(837, byteArray1, false);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(base64_0.isUrlSafe());
assertNotNull(base64_0);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(2, byteArray0.length);
assertEquals(2, byteArray1.length);
assertArrayEquals(new byte[] {(byte) (-89), (byte)0}, byteArray0);
assertArrayEquals(new byte[] {(byte) (-89), (byte)0}, byteArray1);

byte[] byteArray2 = base64_0.encode(byteArray0);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(base64_0.isUrlSafe());
assertNotNull(byteArray2);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(2, byteArray0.length);
assertEquals(2, byteArray1.length);
assertEquals(6, byteArray2.length);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray1);
assertArrayEquals(new byte[] {(byte) (-89), (byte)0}, byteArray0);
assertArrayEquals(new byte[] {(byte) (-89), (byte)0}, byteArray1);
assertArrayEquals(new byte[] {(byte)112, (byte)119, (byte)65, (byte)61, (byte) (-89), (byte)0}, byteArray2);


[MASTER] 03:39:16.585 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [8]; expected:<-89> but was:<13>
[MASTER] 03:39:16.585 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[5];
byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
assertFalse(byteArray1.equals((Object)byteArray0));
assertNotNull(byteArray1);
assertEquals(5, byteArray0.length);
assertEquals(10, byteArray1.length);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61, (byte) (-89), (byte)0}, byteArray1);


[MASTER] 03:39:21.682 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test61 -> class java.lang.ArrayIndexOutOfBoundsException: -1
[MASTER] 03:39:21.684 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
//  // Unstable assertion: assertNotNull(byteArray0);
//  // Unstable assertion: assertEquals(2, byteArray0.length);
//  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-89), (byte)0}, byteArray0);

byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
//  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
//  // Unstable assertion: assertNotNull(byteArray1);
//  // Unstable assertion: assertEquals(2, byteArray0.length);
//  // Unstable assertion: assertEquals(2, byteArray1.length);
//  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
//  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
//  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-89), (byte)0}, byteArray0);
//  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-89), (byte)0}, byteArray1);

Base64 base64_0 = new Base64(837, byteArray1, false);
//  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
//  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
//  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
//  // Unstable assertion: assertNotNull(base64_0);
//  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
//  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
//  // Unstable assertion: assertEquals(2, byteArray0.length);
//  // Unstable assertion: assertEquals(2, byteArray1.length);
//  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-89), (byte)0}, byteArray0);
//  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-89), (byte)0}, byteArray1);

byte[] byteArray2 = base64_0.encode(byteArray0);
//  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
//  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
//  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
//  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
//  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
//  // Unstable assertion: assertNotNull(byteArray2);
//  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
//  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
//  // Unstable assertion: assertEquals(2, byteArray0.length);
//  // Unstable assertion: assertEquals(2, byteArray1.length);
//  // Unstable assertion: assertEquals(6, byteArray2.length);
//  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
//  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
//  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
//  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
//  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
//  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
//  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-89), (byte)0}, byteArray0);
//  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-89), (byte)0}, byteArray1);
//  // Unstable assertion: assertArrayEquals(new byte[] {(byte)112, (byte)119, (byte)65, (byte)61, (byte) (-89), (byte)0}, byteArray2);


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 6
* Writing tests to file
* Writing JUnit test case 'Base64_ESTest' to results/Codec-9/org.apache.commons.codec.binary.Base64/default/tests/1
* Done!

* Computation finished
