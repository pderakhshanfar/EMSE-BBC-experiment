* EvoSuite 1.1.1-SNAPSHOT
* Configuration: default
* Going to generate test cases for class: org.apache.commons.codec.binary.Base64
* Starting Client-0
* Connecting to master process on port 6282
* Analyzing classpath: 
  - subjects/buggy-versions/Codec-9/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.codec.binary.Base64
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1539
* Using seed 2431041134
* Starting evolution
* Initial Number of Goals in DynaMOSA = 419 / 1539
* Search finished after 302s and 192 generations, 96328 statements, best individual has fitness: 91.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 98%
* Total number of goals: 216
* Number of covered goals: 212
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 94%
* Total number of goals: 193
* Number of covered goals: 181
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 19
* Number of covered goals: 19
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 95%
* Total number of goals: 787
* Number of covered goals: 748
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 91%
* Total number of goals: 80
* Number of covered goals: 73
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 35
* Number of covered goals: 35
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 35
* Number of covered goals: 35
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 91%
* Total number of goals: 193
* Number of covered goals: 176
* Generated 94 tests with total length 235
* Resulting test suite's coverage: 91% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 03:43:22.401 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6993833333333334% of time used, but only 26/94 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 26%
* Compiling and checking tests
[MASTER] 03:43:57.255 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [4]; expected:<-106> but was:<13>
[MASTER] 03:43:57.260 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[3];
byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte) (-106), (byte)10}, byteArray1);
assertEquals(3, byteArray0.length);
assertEquals(6, byteArray1.length);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertFalse(byteArray1.equals((Object)byteArray0));
assertNotNull(byteArray1);

boolean boolean0 = Base64.isArrayByteBase64(byteArray1);
assertFalse(boolean0);
assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte) (-106), (byte)10}, byteArray1);
assertEquals(3, byteArray0.length);
assertEquals(6, byteArray1.length);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));


[MASTER] 03:44:02.913 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [4]; expected:<-106> but was:<13>
[MASTER] 03:44:02.913 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[2];
byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false);
assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)61, (byte) (-106), (byte)10}, byteArray1);
assertEquals(2, byteArray0.length);
assertEquals(6, byteArray1.length);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertFalse(byteArray1.equals((Object)byteArray0));
assertNotNull(byteArray1);


[MASTER] 03:44:04.030 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<AAAA[?]
> but was:<AAAA[]
>
[MASTER] 03:44:04.031 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64 base64_0 = new Base64(true);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertTrue(base64_0.isUrlSafe());
assertNotNull(base64_0);

byte[] byteArray0 = new byte[3];
String string0 = base64_0.encodeToString(byteArray0);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals("AAAA\uFFFD\n", string0);
assertTrue(base64_0.isUrlSafe());
assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
assertEquals(3, byteArray0.length);
assertNotNull(string0);


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 9
* Writing tests to file
* Writing JUnit test case 'Base64_ESTest' to results/Codec-9/org.apache.commons.codec.binary.Base64/default/tests/16
* Done!

* Computation finished
