* EvoSuite 1.1.1-SNAPSHOT
* Configuration: default
* Going to generate test cases for class: org.apache.commons.codec.binary.Base64
* Starting Client-0
* Connecting to master process on port 11020
* Analyzing classpath: 
  - subjects/buggy-versions/Codec-9/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.codec.binary.Base64
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1539
* Using seed 1101238040
* Starting evolution
* Initial Number of Goals in DynaMOSA = 419 / 1539
Number of times BBC is called in total: 0
* Search finished after 605s and 691 generations, 295954 statements, best individual has fitness: 77.0
* Minimizing test suite
[MASTER] 21:15:15.666 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 100%
* Total number of goals: 216
* Number of covered goals: 215
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 96%
* Total number of goals: 193
* Number of covered goals: 186
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 32
* Number of covered goals: 32
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 97%
* Total number of goals: 787
* Number of covered goals: 760
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 91%
* Total number of goals: 80
* Number of covered goals: 73
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 35
* Number of covered goals: 35
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 35
* Number of covered goals: 35
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 96%
* Total number of goals: 193
* Number of covered goals: 185
* Generated 180 tests with total length 1728
* Resulting test suite's coverage: 92% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 21:15:59.326 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6808833333333333% of time used, but only 89/180 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 46%
* Compiling and checking tests
[MASTER] 21:17:04.146 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [1]; expected:<103> but was:<10>
[MASTER] 21:17:04.146 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
Base64.discardWhitespace(byteArray0);
assertArrayEquals(new byte[] {(byte)13, (byte)103}, byteArray0);


[MASTER] 21:17:07.244 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [8]; expected:<-94> but was:<13>
[MASTER] 21:17:07.246 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[4];
byteArray0[1] = (byte)73;
byteArray0[2] = (byte)0;
byteArray0[3] = (byte)0;
byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
assertEquals(4, byteArray0.length);
assertEquals(10, byteArray1.length);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertNotNull(byteArray1);
assertArrayEquals(new byte[] {(byte)0, (byte)73, (byte)0, (byte)0}, byteArray0);
assertArrayEquals(new byte[] {(byte)65, (byte)69, (byte)107, (byte)65, (byte)65, (byte)65, (byte)61, (byte)61, (byte) (-94), (byte)0}, byteArray1);
assertFalse(byteArray1.equals((Object)byteArray0));

Base64 base64_0 = new Base64(true);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertNotNull(base64_0);
assertTrue(base64_0.isUrlSafe());

byte[] byteArray2 = Base64.encodeBase64(byteArray1);
assertEquals(4, byteArray0.length);
assertEquals(10, byteArray1.length);
assertEquals(16, byteArray2.length);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray1);
assertNotNull(byteArray2);
assertArrayEquals(new byte[] {(byte)0, (byte)73, (byte)0, (byte)0}, byteArray0);
assertArrayEquals(new byte[] {(byte)65, (byte)69, (byte)107, (byte)65, (byte)65, (byte)65, (byte)61, (byte)61, (byte) (-94), (byte)0}, byteArray1);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));

byte[] byteArray3 = Base64.encodeBase64(byteArray0, true);
assertEquals(4, byteArray0.length);
assertEquals(10, byteArray3.length);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray2);
assertNotNull(byteArray3);
assertArrayEquals(new byte[] {(byte)0, (byte)73, (byte)0, (byte)0}, byteArray0);
assertArrayEquals(new byte[] {(byte)65, (byte)69, (byte)107, (byte)65, (byte)65, (byte)65, (byte)61, (byte)61, (byte) (-94), (byte)0}, byteArray3);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray2));

byte[] byteArray4 = Base64.encodeBase64(byteArray3);
assertEquals(4, byteArray0.length);
assertEquals(10, byteArray3.length);
assertEquals(16, byteArray4.length);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray4);
assertNotSame(byteArray4, byteArray0);
assertNotSame(byteArray4, byteArray1);
assertNotSame(byteArray4, byteArray2);
assertNotSame(byteArray4, byteArray3);
assertNotNull(byteArray4);
assertArrayEquals(new byte[] {(byte)0, (byte)73, (byte)0, (byte)0}, byteArray0);
assertArrayEquals(new byte[] {(byte)65, (byte)69, (byte)107, (byte)65, (byte)65, (byte)65, (byte)61, (byte)61, (byte) (-94), (byte)0}, byteArray3);
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray4.equals((Object)byteArray0));
assertFalse(byteArray4.equals((Object)byteArray1));
assertFalse(byteArray4.equals((Object)byteArray2));
assertFalse(byteArray4.equals((Object)byteArray3));

boolean boolean0 = Base64.isBase64(byteArray1);
assertEquals(4, byteArray0.length);
assertEquals(10, byteArray1.length);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertArrayEquals(new byte[] {(byte)0, (byte)73, (byte)0, (byte)0}, byteArray0);
assertArrayEquals(new byte[] {(byte)65, (byte)69, (byte)107, (byte)65, (byte)65, (byte)65, (byte)61, (byte)61, (byte) (-94), (byte)0}, byteArray1);
assertFalse(boolean0);
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray4));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));

boolean boolean1 = base64_0.isUrlSafe();
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertTrue(boolean1);
assertTrue(base64_0.isUrlSafe());
assertFalse(boolean1 == boolean0);


[MASTER] 21:17:09.211 [logback-2] ERROR JUnitAnalyzer - Ran out of time while checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 9
* Writing tests to file
* Writing JUnit test case 'Base64_ESTest' to results/Codec-9/org.apache.commons.codec.binary.Base64/default/tests/3
* Done!

* Computation finished
