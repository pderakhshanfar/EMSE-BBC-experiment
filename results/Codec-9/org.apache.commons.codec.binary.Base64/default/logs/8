* EvoSuite 1.1.1-SNAPSHOT
* Configuration: default
* Going to generate test cases for class: org.apache.commons.codec.binary.Base64
* Starting Client-0
* Connecting to master process on port 15412
* Analyzing classpath: 
  - subjects/buggy-versions/Codec-9/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.codec.binary.Base64
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1539
* Using seed 1851538608
* Starting evolution
* Initial Number of Goals in DynaMOSA = 419 / 1539
* Search finished after 304s and 95 generations, 52120 statements, best individual has fitness: 98.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 98%
* Total number of goals: 216
* Number of covered goals: 212
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 94%
* Total number of goals: 193
* Number of covered goals: 181
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 95%
* Total number of goals: 21
* Number of covered goals: 20
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 95%
* Total number of goals: 787
* Number of covered goals: 749
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 89%
* Total number of goals: 80
* Number of covered goals: 71
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 35
* Number of covered goals: 35
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 35
* Number of covered goals: 35
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 90%
* Total number of goals: 193
* Number of covered goals: 173
* Generated 103 tests with total length 261
* Resulting test suite's coverage: 90% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 03:41:40.832 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.7181% of time used, but only 48/103 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 33%
* Compiling and checking tests
[MASTER] 03:42:07.518 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 03:42:07.519 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
boolean boolean0 = Base64.isBase64(byteArray0);
assertFalse(boolean0);


[MASTER] 03:42:11.710 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [0]; expected:<0> but was:<13>
[MASTER] 03:42:11.712 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[3];
byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
assertFalse(byteArray1.equals((Object)byteArray0));
assertEquals(2, byteArray1.length);
assertNotNull(byteArray1);
assertNotSame(byteArray1, byteArray0);

Base64 base64_0 = new Base64((byte)62, byteArray0);
assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
assertFalse(byteArray0.equals((Object)byteArray1));
assertEquals(3, byteArray0.length);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(base64_0.isUrlSafe());
assertNotNull(base64_0);

byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)61, (byte)0, (byte)0}, byteArray2);
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertEquals(2, byteArray1.length);
assertEquals(6, byteArray2.length);
assertNotNull(byteArray2);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray0);

base64_0.decode(byteArray2, 1, 76);
assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)61, (byte)0, (byte)0}, byteArray2);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertEquals(3, byteArray0.length);
assertEquals(2, byteArray1.length);
assertEquals(6, byteArray2.length);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(base64_0.isUrlSafe());
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray0);


[MASTER] 03:42:12.045 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [4]; expected:<0> but was:<13>
[MASTER] 03:42:12.048 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[3];
byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, (int) (byte)62);
assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)0, (byte)0}, byteArray1);
assertFalse(byteArray1.equals((Object)byteArray0));
assertEquals(3, byteArray0.length);
assertEquals(6, byteArray1.length);
assertNotNull(byteArray1);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);

byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, false);
assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)0, (byte)0}, byteArray1);
assertArrayEquals(new byte[] {(byte)81, (byte)85, (byte)70, (byte)66, (byte)81, (byte)81, (byte)65, (byte)65, (byte)0, (byte)0}, byteArray2);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertEquals(3, byteArray0.length);
assertEquals(6, byteArray1.length);
assertEquals(10, byteArray2.length);
assertNotNull(byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray0);

Base64 base64_0 = new Base64((byte)62, byteArray0);
assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertEquals(3, byteArray0.length);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertFalse(base64_0.isUrlSafe());
assertNotNull(base64_0);

byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)0, (byte)0}, byteArray1);
assertArrayEquals(new byte[] {(byte)81, (byte)85, (byte)70, (byte)66, (byte)81, (byte)81, (byte)65, (byte)65, (byte)0, (byte)0}, byteArray2);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray0));
assertEquals(3, byteArray0.length);
assertEquals(6, byteArray1.length);
assertEquals(10, byteArray2.length);
assertEquals(18, byteArray3.length);
assertNotNull(byteArray3);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray2, byteArray3);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray0);

base64_0.decode(byteArray3, 1, 76);
assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)0, (byte)0}, byteArray1);
assertArrayEquals(new byte[] {(byte)81, (byte)85, (byte)70, (byte)66, (byte)81, (byte)81, (byte)65, (byte)65, (byte)0, (byte)0}, byteArray2);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray0));
assertEquals(3, byteArray0.length);
assertEquals(6, byteArray1.length);
assertEquals(10, byteArray2.length);
assertEquals(18, byteArray3.length);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertFalse(base64_0.isUrlSafe());
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray2, byteArray3);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray0);

int int0 = base64_0.avail();
assertEquals(9, int0);
assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray2));
assertEquals(3, byteArray0.length);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertFalse(base64_0.isUrlSafe());
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray2);


[MASTER] 03:42:14.072 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [0]; expected:<0> but was:<13>
[MASTER] 03:42:14.073 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
assertEquals(2, byteArray0.length);
assertNotNull(byteArray0);

byte[] byteArray1 = new byte[0];
assertFalse(byteArray1.equals((Object)byteArray0));

Base64 base64_0 = new Base64(0, byteArray1);
assertArrayEquals(new byte[] {}, byteArray1);
assertFalse(byteArray1.equals((Object)byteArray0));
assertEquals(0, byteArray1.length);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(base64_0.isUrlSafe());
assertNotNull(base64_0);

base64_0.encode(byteArray0);

[MASTER] 03:42:14.695 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [0]; expected:<0> but was:<13>
[MASTER] 03:42:14.696 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
assertEquals(2, byteArray0.length);
assertNotNull(byteArray0);

Base64 base64_0 = new Base64(true);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertTrue(base64_0.isUrlSafe());
assertNotNull(base64_0);

base64_0.encode(byteArray0, (-185), (-185));
assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
assertEquals(2, byteArray0.length);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertTrue(base64_0.isUrlSafe());

base64_0.readResults(byteArray0, (-185), (-185));

[MASTER] 03:42:15.756 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [4]; expected:<0> but was:<13>
[MASTER] 03:42:15.756 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[3];
byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, (int) (byte)62);
assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)0, (byte)0}, byteArray1);
assertFalse(byteArray1.equals((Object)byteArray0));
assertEquals(3, byteArray0.length);
assertEquals(6, byteArray1.length);
assertNotNull(byteArray1);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);

byte[] byteArray2 = Base64.decodeBase64(byteArray1);
assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)0, (byte)0}, byteArray1);
assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray2);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertEquals(3, byteArray0.length);
assertEquals(6, byteArray1.length);
assertEquals(3, byteArray2.length);
assertNotNull(byteArray2);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray1);


[MASTER] 03:42:15.986 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [4]; expected:<0> but was:<13>
[MASTER] 03:42:15.989 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[3];
byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, (int) (byte)62);
assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)0, (byte)0}, byteArray1);
assertFalse(byteArray1.equals((Object)byteArray0));
assertEquals(3, byteArray0.length);
assertEquals(6, byteArray1.length);
assertNotNull(byteArray1);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);

byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)0, (byte)0}, byteArray1);
assertArrayEquals(new byte[] {(byte)81, (byte)85, (byte)70, (byte)66, (byte)81, (byte)81, (byte)65, (byte)65, (byte)0, (byte)0}, byteArray2);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertEquals(3, byteArray0.length);
assertEquals(6, byteArray1.length);
assertEquals(10, byteArray2.length);
assertNotNull(byteArray2);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray1);

Base64 base64_0 = new Base64((byte)62, byteArray0);
assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertEquals(3, byteArray0.length);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(base64_0.isUrlSafe());
assertNotNull(base64_0);

byteArray2[2] = (byte)62;
byte[] byteArray3 = base64_0.decode(byteArray2);
assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)0, (byte)0}, byteArray1);
assertArrayEquals(new byte[] {(byte)81, (byte)85, (byte)62, (byte)66, (byte)81, (byte)81, (byte)65, (byte)65, (byte)0, (byte)0}, byteArray2);
assertArrayEquals(new byte[] {(byte)65, (byte)64, (byte)80, (byte)64, (byte)0}, byteArray3);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray2));
assertEquals(3, byteArray0.length);
assertEquals(6, byteArray1.length);
assertEquals(10, byteArray2.length);
assertEquals(5, byteArray3.length);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(base64_0.isUrlSafe());
assertNotNull(byteArray3);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray3);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray2);

BigInteger bigInteger0 = Base64.decodeInteger(byteArray3);
assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)0, (byte)0}, byteArray1);
assertArrayEquals(new byte[] {(byte)81, (byte)85, (byte)62, (byte)66, (byte)81, (byte)81, (byte)65, (byte)65, (byte)0, (byte)0}, byteArray2);
assertArrayEquals(new byte[] {(byte)65, (byte)64, (byte)80, (byte)64, (byte)0}, byteArray3);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray3));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray2));
assertEquals(3, byteArray0.length);
assertEquals(6, byteArray1.length);
assertEquals(10, byteArray2.length);
assertEquals(5, byteArray3.length);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(base64_0.isUrlSafe());
assertEquals((byte)0, bigInteger0.byteValue());
assertEquals((short)0, bigInteger0.shortValue());
assertNotNull(bigInteger0);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray3);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray2);


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 4
* Writing tests to file
* Writing JUnit test case 'Base64_ESTest' to results/Codec-9/org.apache.commons.codec.binary.Base64/default/tests/8
* Done!

* Computation finished
