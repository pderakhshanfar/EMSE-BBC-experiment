* EvoSuite 1.1.1-SNAPSHOT
* Configuration: default
* Going to generate test cases for class: org.apache.commons.codec.binary.Base64
* Starting Client-0
* Connecting to master process on port 7305
* Analyzing classpath: 
  - subjects/buggy-versions/Codec-9/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.codec.binary.Base64
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1539
* Using seed 1680672745
* Starting evolution
* Initial Number of Goals in DynaMOSA = 419 / 1539
Number of times BBC is called in total: 0
* Search finished after 601s and 108 generations, 57109 statements, best individual has fitness: 101.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 98%
* Total number of goals: 216
* Number of covered goals: 212
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 95%
* Total number of goals: 193
* Number of covered goals: 183
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 20
* Number of covered goals: 20
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 95%
* Total number of goals: 787
* Number of covered goals: 749
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 90%
* Total number of goals: 80
* Number of covered goals: 72
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 35
* Number of covered goals: 35
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 35
* Number of covered goals: 35
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 88%
* Total number of goals: 193
* Number of covered goals: 170
* Generated 97 tests with total length 237
* Resulting test suite's coverage: 90% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 21:16:00.353 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.8688% of time used, but only 30/97 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 27%
* Compiling and checking tests
[MASTER] 21:16:22.956 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 21:16:22.956 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[1];
byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
boolean boolean0 = Base64.isArrayByteBase64(byteArray1);
assertFalse(boolean0);
assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61, (byte) (-106), (byte)10}, byteArray1);
assertEquals(6, byteArray1.length);


[MASTER] 21:16:23.643 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.ArrayIndexOutOfBoundsException: -1
[MASTER] 21:16:23.643 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
Base64 base64_0 = new Base64(1812, byteArray1);
Object object0 = base64_0.decode((Object) "fe9>>");
Object object1 = base64_0.encode(object0);
assertNotSame(object1, object0);
assertArrayEquals(new byte[] {(byte) (-106)}, byteArray1);
assertNotSame(byteArray0, object1);


[MASTER] 21:16:28.443 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [0]; expected:<-106> but was:<13>
[MASTER] 21:16:28.443 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
assertNotNull(byteArray0);
assertArrayEquals(new byte[] {(byte) (-106), (byte)10}, byteArray0);
assertEquals(2, byteArray0.length);

Base64 base64_0 = new Base64();
assertNotNull(base64_0);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(base64_0.isUrlSafe());

byte[] byteArray1 = base64_0.decode(byteArray0);
assertFalse(byteArray1.equals((Object)byteArray0));
assertNotNull(byteArray1);
assertArrayEquals(new byte[] {(byte) (-106), (byte)10}, byteArray0);
assertArrayEquals(new byte[] {}, byteArray1);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertFalse(base64_0.isUrlSafe());
assertEquals(2, byteArray0.length);
assertEquals(0, byteArray1.length);

base64_0.decode(byteArray0, 3242, 3242);
assertFalse(byteArray0.equals((Object)byteArray1));
assertArrayEquals(new byte[] {(byte) (-106), (byte)10}, byteArray0);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertNotSame(byteArray0, byteArray1);
assertFalse(base64_0.isUrlSafe());
assertEquals(2, byteArray0.length);


[MASTER] 21:16:29.562 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [0]; expected:<-106> but was:<13>
[MASTER] 21:16:29.562 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
assertNotNull(byteArray0);
assertArrayEquals(new byte[] {(byte) (-106), (byte)10}, byteArray0);
assertEquals(2, byteArray0.length);

boolean boolean0 = Base64.isBase64(byteArray0);
assertFalse(boolean0);
assertArrayEquals(new byte[] {(byte) (-106), (byte)10}, byteArray0);
assertEquals(2, byteArray0.length);


[MASTER] 21:16:30.411 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [2]; expected:<-106> but was:<13>
[MASTER] 21:16:30.411 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[1];
byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, (int) (byte)6);
assertFalse(byteArray1.equals((Object)byteArray0));
assertNotNull(byteArray1);
assertArrayEquals(new byte[] {(byte)0}, byteArray0);
assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte) (-106), (byte)10}, byteArray1);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertEquals(1, byteArray0.length);
assertEquals(4, byteArray1.length);


[MASTER] 21:16:31.802 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [0]; expected:<-106> but was:<13>
[MASTER] 21:16:31.810 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
assertNotNull(byteArray0);
assertArrayEquals(new byte[] {(byte) (-106), (byte)10}, byteArray0);
assertEquals(2, byteArray0.length);

byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
assertFalse(byteArray1.equals((Object)byteArray0));
assertNotNull(byteArray1);
assertArrayEquals(new byte[] {(byte) (-106), (byte)10}, byteArray0);
assertArrayEquals(new byte[] {(byte)108, (byte)103, (byte)111, (byte)61, (byte) (-106), (byte)10}, byteArray1);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertEquals(2, byteArray0.length);
assertEquals(6, byteArray1.length);

Base64 base64_0 = new Base64();
assertNotNull(base64_0);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(base64_0.isUrlSafe());

base64_0.decode(byteArray1, 1, 25);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertArrayEquals(new byte[] {(byte) (-106), (byte)10}, byteArray0);
assertArrayEquals(new byte[] {(byte)108, (byte)103, (byte)111, (byte)61, (byte) (-106), (byte)10}, byteArray1);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertFalse(base64_0.isUrlSafe());
assertEquals(2, byteArray0.length);
assertEquals(6, byteArray1.length);

int int0 = base64_0.avail();
assertEquals(1, int0);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(base64_0.isUrlSafe());


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 10
* Writing tests to file
* Writing JUnit test case 'Base64_ESTest' to results/Codec-9/org.apache.commons.codec.binary.Base64/default/tests/19
* Done!

* Computation finished
