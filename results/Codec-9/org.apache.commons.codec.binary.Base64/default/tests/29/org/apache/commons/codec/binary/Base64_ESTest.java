/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 03:51:37 GMT 2020
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)19;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(1356);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64((-870), byteArray0, true);
      bigInteger1.negate();
      base64_0.encode(byteArray1, (int) (byte)19, (int) (byte)19);
      base64_0.encode(byteArray1, (int) (byte)19, (-870));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)19;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(1356);
      Base64.toIntegerBytes(bigInteger1);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      // Undeclared exception!
      base64_0.encodeToString(byteArray1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 14);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray1, 0, 14);
      Base64.isBase64((byte) (-1));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)19;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(1356);
      Base64.toIntegerBytes(bigInteger1);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      // Undeclared exception!
      base64_0.encode(byteArray1, 4053, 4053);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(9, byteArray0, true);
      byte[] byteArray1 = new byte[8];
      byte byte0 = (byte)4;
      byteArray1[0] = (byte)4;
      byteArray1[1] = (byte) (-1);
      base64_0.encode(byteArray0);
      byteArray1[2] = (byte) (-87);
      byteArray1[3] = (byte)102;
      byte byte1 = (byte)0;
      Object object0 = base64_0.decode((Object) "Kevhl\" wH1/Oe3U");
      // Undeclared exception!
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Base64 base64_0 = new Base64(8);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)114;
      Base64.encodeBase64(byteArray0, false, true, 11);
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte) (-90);
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)19;
      byteArray1[2] = (byte)36;
      byteArray1[4] = (byte)36;
      byteArray1[6] = (byte)19;
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      BigInteger bigInteger1 = bigInteger0.pow(1335);
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger1);
      BigInteger bigInteger2 = new BigInteger(byteArray1);
      Base64.encodeInteger(bigInteger2);
      base64_0.encode(byteArray2, 8, (int) (byte)36);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte) (-124);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(801);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      Base64.decodeInteger(byteArray0);
      Base64.decodeInteger(byteArray1);
      Base64 base64_0 = new Base64(1);
      // Undeclared exception!
      base64_0.decode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 14);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray1, 1, 14);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Base64 base64_0 = new Base64(8);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)36;
      byteArray0[4] = (byte)36;
      byteArray0[6] = (byte)19;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.isProbablePrime((byte)36);
      BigInteger bigInteger1 = bigInteger0.pow(1335);
      Base64.toIntegerBytes(bigInteger1);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      // Undeclared exception!
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64(76, byteArray0, false);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-73);
      // Undeclared exception!
      try { 
        base64_1.encodeToString(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = new byte[2];
      byteArray1[1] = (byte)9;
      Base64.discardWhitespace(byteArray1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Base64 base64_0 = new Base64(8);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte)19;
      byteArray0[6] = (byte)19;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(1335);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger1);
      Base64.encodeInteger(bigInteger1);
      // Undeclared exception!
      base64_0.encode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertArrayEquals(new byte[] {(byte)103}, byteArray1);
      assertArrayEquals(new byte[] {(byte)13, (byte)103}, byteArray0);
      
      Base64.isBase64((byte)61);
      Random.setNextRandom((-3228));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Base64 base64_0 = new Base64(8);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte)19;
      byteArray0[6] = (byte)19;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(1335);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger1);
      Base64.encodeInteger(bigInteger1);
      base64_0.decode(byteArray1, (int) (byte)76, 8);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[9];
      Base64 base64_0 = new Base64((-2038), byteArray0);
      Base64.decodeBase64("!fm");
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)49;
      byteArray1[1] = (byte)105;
      byteArray1[2] = (byte)121;
      byteArray1[3] = (byte)68;
      Base64.toIntegerBytes(bigInteger0);
      byteArray1[4] = (byte)10;
      Base64.encodeBase64(byteArray1, false, false, (int) (byte)10);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)121, (int) (byte)105);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 121
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)61;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(76);
      Base64.encodeInteger(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(8177);
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeInteger(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base64 base64_0 = new Base64(2525, byteArray0);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(425, mockRandom0);
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64((byte[]) null, true);
      Base64.encodeBase64URLSafe((byte[]) null);
      base64_0.hasData();
      Base64.encodeBase64URLSafe(byteArray0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)19;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(801);
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeInteger(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Base64 base64_0 = new Base64(29, byteArray0);
      base64_0.readResults(byteArray0, 29, 29);
      Base64.decodeBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 64);
      Base64.decodeInteger(byteArray0);
      Base64.isBase64("encodeInteger called with null parameter");
      base64_0.decode(byteArray1, 1, 3065);
      base64_0.avail();
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, false, false, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of 1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Base64 base64_0 = new Base64(27);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray0 = new byte[5];
      Base64.encodeBase64URLSafe(byteArray0);
      base64_0.encode(byteArray0, (-1), (-1));
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, (-1), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, (-36), 99);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 28, 28);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[9];
      bigInteger0.nextProbablePrime();
      bigInteger0.bitCount();
      Base64 base64_0 = new Base64((byte)7, byteArray0);
      base64_0.encode(byteArray0);
      Object object0 = new Object();
      Base64.isArrayByteBase64(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64("h5a;dO&xDv(");
      Base64 base64_1 = new Base64(false);
      Base64.discardWhitespace(byteArray1);
      Base64.encodeBase64Chunked((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte)119;
      byteArray0[6] = (byte)113;
      byteArray0[7] = (byte)82;
      Base64.isBase64(byteArray0);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, (int) (byte)9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64(29, byteArray0);
      byte[] byteArray1 = Base64.decodeBase64("encodeInteger called with null parameter");
      Base64.encodeBase64(byteArray1, false, false, 64);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      Base64.encodeBase64(byteArray1, false, false);
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0, (int) (byte)0, (-760));
      base64_0.encodeToString(byteArray0);
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64(29, byteArray0);
      byte[] byteArray1 = Base64.decodeBase64("encodeInteger called with null parameter");
      Base64.decodeBase64((String) null);
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)127;
      byte[] byteArray3 = Base64.decodeBase64(byteArray2);
      base64_0.decode((Object) "encodeInteger called with null parameter");
      byte[] byteArray4 = base64_0.decode(byteArray3);
      Base64.decodeInteger(byteArray1);
      Base64 base64_1 = new Base64(302);
      base64_1.encodeToString(byteArray4);
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Base64 base64_0 = new Base64(27);
      byte[] byteArray0 = new byte[4];
      base64_0.readResults(byteArray0, 1, 1);
      byteArray0[0] = (byte)34;
      byte[] byteArray1 = Base64.decodeBase64("");
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false, false, 21);
      Base64.decodeInteger(byteArray2);
      Base64.isBase64("");
      base64_0.decode(byteArray2, 1, 13);
      Base64.decodeBase64(byteArray1);
      byte[] byteArray3 = new byte[5];
      byteArray3[0] = (byte)34;
      byteArray3[1] = (byte)11;
      byteArray3[2] = (byte)34;
      byteArray3[3] = (byte)34;
      byteArray3[4] = (byte)34;
      base64_0.decode(byteArray3);
      Base64.isBase64((byte)46);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[2];
      Base64.isBase64("org.apache.commons.codec.EncoderException");
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)72;
      base64_0.decode((Object) "org.apache.commons.codec.EncoderException");
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Base64.decodeInteger(byteArray1);
      Base64 base64_1 = new Base64(0, byteArray1, true);
      Base64 base64_2 = new Base64(1889, byteArray1);
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)72;
      byteArray2[1] = (byte)72;
      byteArray2[2] = (byte)72;
      byteArray2[3] = (byte) (-103);
      byteArray2[4] = (byte)72;
      byteArray2[5] = (byte) (-103);
      byteArray2[6] = (byte)72;
      byteArray2[7] = (byte)72;
      // Undeclared exception!
      try { 
        base64_2.decode(byteArray2, 0, (int) (byte)72);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Base64 base64_0 = new Base64(27);
      byte[] byteArray0 = new byte[4];
      base64_0.readResults(byteArray0, 1, 1);
      byteArray0[0] = (byte)34;
      byte[] byteArray1 = Base64.decodeBase64("");
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false, false, 21);
      Base64.decodeInteger(byteArray2);
      Base64.isBase64("");
      base64_0.decode(byteArray2, 1, 13);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, true);
      Base64.encodeBase64(byteArray3, false, false);
      base64_0.encode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 encode is not a byte[]");
      Base64 base64_0 = new Base64();
      Base64.isBase64("Parameter supplied to Base64 encode is not a byte[]");
      Base64.isArrayByteBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64.encodeBase64(byteArray0, false);
      Base64.encodeBase64String(byteArray0);
      Base64.isBase64(byteArray1);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)34;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)0;
      Base64 base64_0 = new Base64(566);
      byte[] byteArray3 = new byte[1];
      byteArray3[0] = (byte)0;
      base64_0.encode(byteArray3);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64(29, byteArray0);
      Object object0 = new Object();
      Base64.isArrayByteBase64(byteArray0);
      Base64.decodeBase64("$n{TXa_8_fP0Ht0");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64(1, byteArray1);
      Base64.encodeBase64String(byteArray0);
      base64_0.decode("/w>GqnR");
      Base64.isBase64(byteArray1);
      Base64.isBase64("");
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_1 = new Base64();
      Base64.decodeInteger(byteArray0);
      byte[] byteArray3 = Base64.decodeBase64(byteArray2);
      base64_0.decode(byteArray3);
      Base64.isBase64((byte) (-15));
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[9];
      bigInteger0.nextProbablePrime();
      byte byte0 = (byte)7;
      bigInteger0.bitCount();
      Base64 base64_0 = new Base64((byte)7, byteArray0);
      base64_0.encode(byteArray0);
      Object object0 = new Object();
      Base64 base64_1 = new Base64();
      // Undeclared exception!
      try { 
        base64_1.decode(byteArray0, (int) (byte)7, 895);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64(29, byteArray0);
      base64_0.encode(byteArray0, (int) (byte)0, 0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)0;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      byte[] byteArray3 = null;
      Base64.encodeBase64((byte[]) null, true);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray2, 4522, 2868);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4522
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64(1, byteArray0);
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = base64_0.decode("DQo=");
      Base64.isBase64(byteArray0);
      Base64.isBase64(") than the specified maxium size of ");
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)70;
      byteArray2[1] = (byte) (-1);
      Base64.encodeBase64Chunked(byteArray2);
      Base64 base64_1 = new Base64();
      Base64.decodeBase64(byteArray1);
      base64_1.decode(byteArray2);
      Base64.isBase64((byte)70);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      byte[] byteArray1 = null;
      Base64 base64_0 = new Base64((byte) (-1));
      byte[] byteArray2 = base64_0.encode(byteArray0);
      String string0 = "Cs'[v\\";
      String string1 = "org.apache.commons.codec.binary.StringUtils";
      Base64.isBase64((byte) (-1));
      byte[] byteArray3 = base64_0.decode("");
      Base64.encodeBase64URLSafeString(byteArray3);
      base64_0.decode(byteArray2);
      Base64.decodeInteger(byteArray2);
      Base64.encodeBase64((byte[]) null, false);
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.decode(byteArray0, (-1661), (int) (byte) (-1));
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[0];
      Base64 base64_1 = new Base64();
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      Base64 base64_0 = new Base64((byte) (-1));
      base64_0.encode(byteArray0);
      Base64.isBase64("org.apache.commons.codec.binary.StringUtils");
      base64_0.decode((byte[]) null);
      Object object0 = base64_0.decode((Object) "Cs'[v");
      base64_0.encode(object0);
      base64_0.decode((byte[]) null, (int) (byte) (-1), 8170);
      Base64.encodeBase64String((byte[]) null);
      String string0 = "";
      Base64.encodeBase64(byteArray0);
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertTrue(boolean0);
      
      byte[] byteArray1 = Base64.decodeBase64("h5a;dO&xDv(");
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0, 0, 0);
      Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64(byteArray1, false);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.intValue();
      bigInteger0.byteValueExact();
      bigInteger0.shortValueExact();
      bigInteger0.bitCount();
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64(byteArray1, false, false, 4121);
      Base64 base64_0 = new Base64((short)10, byteArray1);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)100;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.testBit((byte)100);
      bigInteger0.modPow(bigInteger1, bigInteger1);
      BigInteger bigInteger2 = bigInteger0.shiftLeft((byte)100);
      bigInteger0.intValue();
      bigInteger0.longValueExact();
      bigInteger0.floatValue();
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      bigInteger1.isProbablePrime(100);
      bigInteger2.add(bigInteger0);
      Base64.encodeBase64Chunked(byteArray2);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false, false);
      Base64 base64_0 = new Base64((-2249));
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray3, (-3157), 1431655765);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3157
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64(1, byteArray0);
      base64_0.encode(byteArray0);
      Base64 base64_1 = new Base64();
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)75;
      byteArray2[1] = (byte)88;
      byteArray2[2] = (byte)81;
      Base64.encodeBase64(byteArray2, false, false);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.isArrayByteBase64(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64("h5a;dO&xDv(");
      Base64 base64_0 = new Base64(1, byteArray0);
      base64_0.decode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64(29, byteArray0);
      byte[] byteArray1 = Base64.decodeBase64("encodeInteger called with null parameter");
      boolean boolean0 = false;
      boolean boolean1 = false;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false, 64);
      Base64.decodeInteger(byteArray1);
      Base64.isBase64("encodeInteger called with null parameter");
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray2, 1, 3025);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 36
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 5152, 5152);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5152
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-1);
      byteArray0[0] = (byte) (-1);
      Base64 base64_0 = new Base64((byte) (-1));
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.isBase64("org.apache.commons.codec.binary.StringUtils");
      byte[] byteArray2 = base64_0.decode("");
      Base64.encodeBase64URLSafeString(byteArray2);
      base64_0.decode(byteArray2);
      Base64.decodeInteger(byteArray2);
      Base64.encodeBase64(byteArray0, false);
      Base64.encodeBase64URLSafeString(byteArray1);
      int int0 = (-1661);
      int int1 = 50;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, 50, 206);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 50
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Base64.isBase64("WNJ^/");
      int int0 = (-1);
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-79);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64.isBase64("yap{T&g3P");
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger1.nextProbablePrime();
      bigInteger2.max(bigInteger1);
      Base64.isBase64("");
      Base64.decodeInteger(byteArray1);
      Base64 base64_0 = new Base64(false);
      base64_0.encodeToString(byteArray1);
      Base64.isBase64("GFb qyC>b$-#[o=xV");
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64String(byteArray1);
      base64_0.isUrlSafe();
      base64_0.decode("&`*by3");
      bigInteger1.shiftLeft(64);
      Base64.decodeInteger(byteArray1);
      // Undeclared exception!
      try { 
        bigInteger0.clearBit((-1539));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Negative bit address
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64(1, byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-69);
      byteArray1[1] = (byte)24;
      byteArray1[2] = (byte)32;
      byteArray1[3] = (byte)62;
      Base64 base64_1 = new Base64((byte) (-69));
      Base64.discardWhitespace(byteArray1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)19;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(1356);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger1);
      assertEquals(6145, byteArray1.length);
      
      Base64.discardWhitespace(byteArray1);
      BigInteger bigInteger2 = Base64.decodeInteger(byteArray0);
      assertEquals((byte)0, bigInteger2.byteValue());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(6, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true, 660);
      Base64.isArrayByteBase64(byteArray1);
      Base64 base64_0 = new Base64((-3465));
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        BigInteger.probablePrime((-1906), mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // bitLength < 2
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[2];
      Base64.isBase64("org.apache.commons.codec.EncoderException");
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)72;
      Object object0 = base64_0.decode((Object) "org.apache.commons.codec.EncoderException");
      byte[] byteArray1 = base64_0.decode(byteArray0);
      base64_0.encode(object0);
      base64_0.decode(byteArray1, 377, 377);
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray2 = base64_0.decode("^");
      byte[] byteArray3 = new byte[3];
      byteArray3[0] = (byte) (-103);
      byteArray3[1] = (byte) (-103);
      byteArray3[2] = (byte)72;
      Base64.isBase64(byteArray3);
      Base64.isBase64("-`e{aT+ts@m_x");
      Base64.decodeBase64(byteArray2);
      Base64.encodeBase64Chunked(byteArray3);
      byte[] byteArray4 = new byte[8];
      byteArray4[0] = (byte)72;
      byteArray4[1] = (byte) (-103);
      byteArray4[2] = (byte) (-103);
      byteArray4[3] = (byte)72;
      byteArray4[4] = (byte)72;
      byteArray4[5] = (byte) (-15);
      byteArray4[6] = (byte)72;
      byteArray4[7] = (byte) (-103);
      base64_0.decode(byteArray4);
      base64_0.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertEquals(0, byteArray0.length);
      
      Base64 base64_0 = new Base64(67, byteArray0);
      byte[] byteArray1 = new byte[2];
      byte byte0 = (byte)15;
      byteArray1[0] = (byte)15;
      Base64.decodeBase64("");
      MockRandom mockRandom0 = new MockRandom(2581L);
      byte[] byteArray2 = new byte[7];
      mockRandom0.nextGaussian();
      byteArray2[0] = (byte)15;
      byteArray2[1] = (byte)15;
      byteArray2[2] = (byte)15;
      byteArray2[3] = (byte)15;
      byteArray2[4] = (byte)15;
      byteArray2[5] = (byte) (-121);
      byteArray2[6] = (byte)15;
      base64_0.decode(byteArray2, (-1), (-335));
      // Undeclared exception!
      try { 
        mockRandom0.doubles(0L, (double) 76, (-3135.694095));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      boolean boolean0 = Base64.isBase64((byte)124);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64(43);
      base64_0.encode(byteArray0, (-1), (-1));
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      boolean boolean0 = Base64.isBase64("WNJ^/");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)0;
      Base64 base64_0 = new Base64((byte)0, byteArray0);
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("sQAAAA==", string0);
      
      boolean boolean1 = base64_0.hasData();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-1);
      Base64 base64_0 = new Base64((byte)7, byteArray0);
      base64_0.encode(byteArray0);
      Object object0 = new Object();
      try { 
        base64_0.encode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base64 base64_0 = new Base64((byte)7, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.decodeInteger(byteArray1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      byte[] byteArray1 = null;
      Base64 base64_0 = new Base64((byte) (-1));
      byte[] byteArray2 = base64_0.encode(byteArray0);
      String string0 = "Cs'[v\\";
      String string1 = "org.apache.commons.codec.binary.StringUtils";
      Base64.isBase64("org.apache.commons.codec.binary.StringUtils");
      byte[] byteArray3 = base64_0.decode("");
      Base64.encodeBase64URLSafeString(byteArray3);
      base64_0.decode(byteArray2);
      Base64.decodeInteger(byteArray2);
      Base64.encodeBase64((byte[]) null, false);
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.decode(byteArray0, (-1661), (int) (byte) (-1));
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Base64.encodeBase64((byte[]) null, true);
      Base64.encodeBase64((byte[]) null, true, false);
      Base64 base64_0 = new Base64(5148);
      base64_0.readResults((byte[]) null, 5148, 5148);
      Base64.decodeBase64((byte[]) null);
      base64_0.encodeToString((byte[]) null);
      base64_0.encodeToString((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64((-1), byteArray0);
      base64_0.encode(byteArray0, (-1), (-1));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Base64 base64_0 = new Base64(27);
      byte[] byteArray0 = new byte[5];
      base64_0.encode(byteArray0, (-1), (-1));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Base64 base64_0 = new Base64(3143);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte) (-87);
      base64_0.encode(byteArray0);
      byte[] byteArray1 = null;
      Base64.encodeBase64URLSafeString((byte[]) null);
      base64_0.isUrlSafe();
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[0];
      base64_0.encodeToString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)0;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, (int) (byte)78);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(67, byteArray0);
      byte[] byteArray1 = new byte[2];
      byte byte0 = (byte)15;
      byteArray1[0] = (byte)15;
      Base64.decodeBase64("");
      MockRandom mockRandom0 = new MockRandom(2581L);
      // Undeclared exception!
      try { 
        mockRandom0.doubles(0L, (double) 76, (-3135.694095));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Object object0 = base64_0.decode((Object) "");
      base64_0.decode(object0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64.encodeBase64(byteArray1, true);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)90;
      byteArray2[1] = (byte) (-98);
      byteArray2[2] = (byte)60;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte) (-28);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray2, 0, 3071);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = BigInteger.ZERO;
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger1 = BigInteger.probablePrime(64, mockRandom0);
      bigInteger0.andNot(bigInteger1);
      base64_0.readResults(byteArray0, (-1406), (-1406));
      BigInteger bigInteger2 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger0);
      bigInteger2.doubleValue();
      bigInteger0.compareTo(bigInteger2);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      base64_0.encodeToString(byteArray0);
      Base64.encodeBase64(byteArray1, false, false, 12);
      byteArray0[0] = (byte) (-96);
      base64_0.encodeToString(byteArray0);
      Base64.encodeBase64(byteArray1, false);
      base64_0.readResults(byteArray0, 0, (-1431));
      base64_0.readResults(byteArray0, 81, 31);
      Base64.encodeBase64(byteArray0);
      MockRandom mockRandom1 = new MockRandom();
      mockRandom1.nextInt((-1));
      BigInteger.probablePrime(1090, mockRandom1);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.decodeInteger(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      base64_0.encode(byteArray0, (-1431), (-2465));
      base64_0.decode((Object) "oA==");
      Base64.isBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Base64 base64_0 = new Base64(27);
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 27, 27);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 27
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Base64 base64_0 = new Base64(27);
      byte[] byteArray0 = new byte[4];
      base64_0.readResults(byteArray0, 1, 1);
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)0;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, 23);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64();
      try { 
        base64_0.encode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte) (-20);
      byteArray0[4] = (byte) (-103);
      byteArray0[5] = (byte)113;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-29);
      Base64.encodeBase64Chunked(byteArray0);
      base64_0.avail();
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)106;
      byteArray1[3] = (byte) (-92);
      byteArray1[4] = (byte) (-97);
      byteArray1[5] = (byte)30;
      byteArray1[6] = (byte)80;
      Base64.encodeBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null, false, false, 519);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64(29, byteArray0);
      byte[] byteArray1 = Base64.decodeBase64("encodeInteger called with null parameter");
      Base64.encodeBase64(byteArray1, true, false, 64);
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte) (-83);
      byteArray0[1] = (byte) (-83);
      Base64 base64_0 = new Base64(1245, byteArray0);
      Base64.decodeBase64("encodeInteger called with null parameter");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, false, (int) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, false, false, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)70;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64(false);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      base64_0.isUrlSafe();
      base64_0.decode(byteArray1);
      base64_0.avail();
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64(byteArray0, false);
      int int0 = 122;
      int int1 = 0;
      // Undeclared exception!
      try { 
        bigInteger0.modInverse((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64((-1430), byteArray0, true);
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray2 = base64_0.decode(byteArray1);
      base64_0.encode(byteArray2);
      base64_0.decode((Object) "5izI");
      base64_0.encode(byteArray1);
      Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray2);
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64();
      try { 
        base64_0.decode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)100;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.testBit((byte)100);
      bigInteger0.modPow(bigInteger1, bigInteger1);
      BigInteger bigInteger2 = bigInteger0.shiftLeft((byte)100);
      bigInteger0.intValue();
      bigInteger0.longValueExact();
      bigInteger0.floatValue();
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      int int0 = 28;
      Base64 base64_0 = new Base64(28);
      Base64.decodeBase64(byteArray0);
      base64_0.encodeToString(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      boolean boolean0 = true;
      bigInteger2.add(bigInteger0);
      Base64.encodeBase64(byteArray3, true, true, 64);
      base64_0.isUrlSafe();
      try { 
        base64_0.decode((Object) bigInteger2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)103, (byte)103}, byteArray0);
      
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)28;
      byteArray1[1] = (byte)9;
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      //  // Unstable assertion: assertEquals(1, byteArray2.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)28}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64(byteArray0, false, true, 660);
      Base64 base64_0 = new Base64((-382));
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      Base64 base64_0 = new Base64(29, byteArray0, true);
      byte[] byteArray1 = new byte[0];
      String string0 = base64_0.encodeToString(byteArray1);
      assertEquals("", string0);
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.encodeToString((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(1, byteArray0.length);
      
      Base64.encodeBase64Chunked(byteArray0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0);
      base64_0.encode(byteArray0, (-1), (-1));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Base64.isBase64("");
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64Chunked(byteArray0);
      base64_0.encodeToString((byte[]) null);
      base64_0.decode((String) null);
      base64_0.encode((byte[]) null, 2872, (-2565));
      Base64.encodeBase64String((byte[]) null);
      base64_0.decode((byte[]) null, (-2565), 2841);
      Base64.encodeBase64((byte[]) null);
      base64_0.decode((String) null);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger0);
      base64_0.avail();
      Base64.isBase64("");
      base64_0.encode((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64((byte[]) null, true, true, 92);
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)50;
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(true);
      base64_0.decode("ADI=");
      base64_0.encode(byteArray0, (int) (byte)0, 862);
      try { 
        base64_0.encode((Object) "ADI=");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(false);
      String string0 = "org.apache.commons.codec.EncoderException";
      base64_0.decode((Object) "org.apache.commons.codec.EncoderException");
      byte[] byteArray0 = new byte[1];
      Base64 base64_1 = new Base64(76);
      Object object0 = base64_0.decode((Object) "org.apache.commons.codec.EncoderException");
      Object object1 = base64_1.decode(object0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.bitLength();
      Base64.encodeInteger(bigInteger0);
      Object object2 = base64_1.encode(object1);
      base64_0.encode(object2);
      byteArray0[0] = (byte) (-114);
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.decode("");
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte) (-114), 86);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -114
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64();
      Base64.encodeBase64String(byteArray0);
      base64_0.encodeToString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Base64 base64_0 = new Base64((-1807));
      Object object0 = base64_0.decode((Object) "");
      base64_0.encode(object0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 encode is not a byte[]");
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Base64 base64_0 = new Base64(708, (byte[]) null);
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      Base64.encodeBase64(byteArray0, false, false);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64();
      Base64.encodeBase64(byteArray0);
      base64_0.encodeToString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      base64_0.readResults((byte[]) null, 0, 0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0, (-18), (-18));
      Base64.decodeInteger(byteArray0);
      base64_0.readResults(byteArray0, (-18), (-18));
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[1];
      base64_0.encodeToString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 encode is not a byte[]");
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Base64 base64_0 = new Base64(27);
      byte[] byteArray0 = new byte[5];
      base64_0.encodeToString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64 base64_0 = new Base64(28);
      base64_0.isUrlSafe();
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64.encodeBase64URLSafeString((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64();
      base64_0.encodeToString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base64 base64_0 = new Base64();
      base64_0.encodeToString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte)97;
      byteArray0[7] = (byte) (-102);
      Base64.isArrayByteBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Base64.decodeBase64("STk6~kfX;_S--Fo");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-36);
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Base64.decodeBase64("h5a;d&xDv(");
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("+tg!Ud:Fz@It7<H&");
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(1, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD\uFFFD\u0014t\\\u0237\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)90;
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte) (-122), byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFDDCZ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Base64 base64_0 = new Base64(65);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64.isBase64("m 0%z@H$*-U[<ZcQ");
      base64_0.isUrlSafe();
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.encodeBase64(byteArray1, false);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[2];
      Base64.isBase64("org.apache.commons.codec.EncoderException");
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)72;
      Object object0 = base64_0.decode((Object) "org.apache.commons.codec.EncoderException");
      byte[] byteArray1 = base64_0.decode(byteArray0);
      base64_0.encode(object0);
      base64_0.decode(byteArray1, 377, 377);
      Base64.encodeBase64String(byteArray1);
      base64_0.decode("^");
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte) (-103);
      byteArray2[1] = (byte) (-103);
      byteArray2[2] = (byte)72;
      Base64.isBase64(byteArray2);
      Base64.isBase64("-`e{aT+ts@m_x");
      Base64.encodeBase64Chunked(byteArray2);
      byte[] byteArray3 = new byte[8];
      byteArray3[0] = (byte)72;
      byteArray3[1] = (byte) (-103);
      byteArray3[2] = (byte) (-103);
      byteArray3[3] = (byte)72;
      byteArray3[4] = (byte)72;
      byteArray3[5] = (byte) (-15);
      byteArray3[6] = (byte)72;
      byteArray3[7] = (byte) (-103);
      base64_0.decode(byteArray3);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)52;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.shiftRight(64);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)0;
      Base64.encodeBase64String(byteArray0);
      byteArray0[7] = (byte)85;
      base64_0.encode(byteArray0);
      base64_0.encode(byteArray0, 1393, 1393);
      Base64.isBase64(byteArray1);
      Base64.isBase64("");
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.decodeBase64(byteArray0);
      base64_0.decode("");
      base64_0.encodeToString(byteArray1);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)118;
      byteArray2[1] = (byte) (-1);
      byteArray2[2] = (byte)118;
      byteArray2[3] = (byte) (-1);
      byteArray2[4] = (byte)118;
      base64_0.readResults(byteArray2, 830, 707);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64(0, (byte[]) null);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Base64.decodeBase64("h5a;dO&xDv(");
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)101;
      byteArray0[0] = (byte)101;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)101, byteArray1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [ZQ==\u0000\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = "Parameter supplied to Base64 encode is not a byte[]";
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 encode is not a byte[]");
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-1), byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [=\uFFFD\u0699\uFFFD^\uFFFD\u02E9\uFFFDX\uFFFDv\uFFFD\u0001j\u01FA\uFFFD\uFFFD\u0721\u05E2\uFFFDz-i\uFFFD\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-23);
      byteArray0[5] = (byte)0;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [`O\u0001\uFFFD\uFFFD\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      boolean boolean0 = Base64.isBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      assertFalse(boolean0);
      
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)116);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean boolean0 = Base64.isBase64("{");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)0;
      Base64 base64_0 = new Base64(1, byteArray0);
      boolean boolean1 = base64_0.hasData();
      assertFalse(base64_0.isUrlSafe());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte) (-108));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Base64.isBase64("WNJ^/");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)0;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-1), byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD\u0000y\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 encode is not a byte[]");
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(504, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [=\uFFFD\u0699\uFFFD^\uFFFD\u02E9\uFFFDX\uFFFDv\uFFFD\u0001j\u01FA\uFFFD\uFFFD\u0721\u05E2\uFFFDz-i\uFFFD\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte) (-94);
      byte byte0 = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte) (-97);
      byteArray0[5] = (byte) (-10);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(4890, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u07E2\u0001b\uFFFD\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }
}
