/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 03:44:15 GMT 2020
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = 843;
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(843, 843, mockRandom0);
      bigInteger0.toByteArray();
      bigInteger0.negate();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      int int1 = 8;
      bigInteger0.isProbablePrime(8);
      Base64 base64_0 = new Base64(true);
      int int2 = 90;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 0, 843);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 144
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)123;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 0, 1995);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, true, true, (-497));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of -497
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.isProbablePrime(0);
      BigInteger bigInteger1 = BigInteger.TEN;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      base64_0.decode(byteArray0, 0, 800);
      Base64 base64_1 = new Base64(1979);
      // Undeclared exception!
      try { 
        base64_1.decode(byteArray1, 1091, 1979);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1091
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte) (-117);
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)21;
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)66;
      MockRandom mockRandom0 = new MockRandom((-2016L));
      BigInteger bigInteger0 = new BigInteger(620, (-1869), mockRandom0);
      byte[] byteArray1 = new byte[26];
      byteArray1[0] = (byte)66;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)66;
      byteArray1[4] = (byte) (-2);
      byteArray1[5] = (byte) (-2);
      byteArray1[7] = (byte) (-2);
      mockRandom0.nextInt();
      byteArray1[8] = (byte)0;
      BigInteger bigInteger1 = bigInteger0.modPow(bigInteger0, bigInteger0);
      BigInteger bigInteger2 = bigInteger0.add(bigInteger1);
      bigInteger2.isProbablePrime(65);
      BigInteger bigInteger3 = BigInteger.TEN;
      byte[] byteArray2 = Base64.encodeInteger(bigInteger2);
      Base64 base64_0 = new Base64(4532);
      byte[] byteArray3 = Base64.encodeInteger(bigInteger3);
      base64_0.decode(byteArray2, (int) (byte)66, 5);
      base64_0.decode(byteArray3, (int) (byte)0, (-1));
      try { 
        base64_0.decode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = Base64.decodeBase64("");
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray2, (-4), (-526));
      Base64.discardWhitespace(byteArray2);
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray1, (-4), (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)66;
      MockRandom mockRandom0 = new MockRandom((-2016L));
      BigInteger bigInteger0 = new BigInteger(620, (-1869), mockRandom0);
      byte[] byteArray1 = new byte[26];
      byteArray1[0] = (byte)66;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)66;
      byteArray1[4] = (byte) (-2);
      byteArray1[5] = (byte) (-2);
      byteArray1[7] = (byte) (-2);
      byteArray1[8] = (byte)0;
      BigInteger bigInteger1 = bigInteger0.modPow(bigInteger0, bigInteger0);
      BigInteger bigInteger2 = bigInteger0.add(bigInteger1);
      bigInteger2.isProbablePrime(65);
      BigInteger bigInteger3 = BigInteger.TEN;
      byte[] byteArray2 = Base64.encodeInteger(bigInteger2);
      Base64 base64_0 = new Base64(4532);
      Base64.encodeInteger(bigInteger3);
      base64_0.decode(byteArray2, (int) (byte)66, 5);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, (int) (byte)62, 2147483639);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Base64.encodeBase64((byte[]) null);
      Base64 base64_0 = new Base64();
      Base64.decodeBase64((byte[]) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.modPow(bigInteger1, bigInteger1);
      bigInteger1.add(bigInteger2);
      Base64 base64_1 = new Base64();
      Base64.encodeBase64String((byte[]) null);
      base64_1.decode((byte[]) null, (-124), (-124));
      base64_0.readResults((byte[]) null, 76, 1693);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Base64.encodeBase64((byte[]) null);
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)111;
      base64_0.decode(byteArray0, (int) (byte)1, (int) (byte)1);
      Base64.encodeBase64Chunked((byte[]) null);
      base64_0.hasData();
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, (-932), (-932));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.decodeBase64("e\"");
      Base64.isBase64(byteArray0);
      Base64.encodeBase64(byteArray0, true, true, 3836);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte) (-4);
      byteArray0[5] = (byte)88;
      byteArray0[6] = (byte) (-107);
      byteArray0[7] = (byte)87;
      byteArray0[8] = (byte) (-116);
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(843, 843, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(33);
      Base64.encodeInteger(bigInteger2);
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Base64.encodeBase64((byte[]) null);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64Chunked((byte[]) null);
      base64_0.decode((byte[]) null, (-1339), (-1339));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      assertTrue(base64_0.isUrlSafe());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      base64_0.encode(byteArray0, (int) (byte)0, (int) (byte)0);
      byte[] byteArray1 = Base64.decodeBase64("IAy`");
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.isBase64(byteArray1);
      Base64.isBase64((byte)48);
      Base64 base64_1 = new Base64();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base64 base64_0 = new Base64(26, byteArray0, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.modPow(bigInteger1, bigInteger1);
      bigInteger1.add(bigInteger0);
      BigInteger bigInteger2 = BigInteger.TEN;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      Base64 base64_1 = new Base64(true);
      Base64.isBase64("lineSeperator must not contain base64 characters: [");
      base64_0.encode(byteArray1);
      Base64.toIntegerBytes(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)13;
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0);
      Base64.isBase64((byte)123);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Base64.encodeBase64((byte[]) null, true);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)64;
      byteArray0[0] = (byte)64;
      base64_0.decode(byteArray0);
      base64_0.decode(byteArray0, 561, (-1073));
      Random.setNextRandom(0);
      Random.setNextRandom(940);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Base64 base64_0 = new Base64(1, byteArray0, false);
      byte[] byteArray1 = new byte[5];
      byte byte0 = (byte) (-1);
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte) (-1);
      byteArray2[1] = (byte) (-1);
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)66;
      MockRandom mockRandom0 = new MockRandom((-2016L));
      BigInteger bigInteger0 = new BigInteger(620, (-1869), mockRandom0);
      byte[] byteArray1 = new byte[26];
      byteArray1[0] = (byte)66;
      byteArray1[1] = (byte)66;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)66;
      byteArray1[4] = (byte) (-2);
      byteArray1[5] = (byte) (-2);
      byteArray1[6] = (byte) (-2);
      byteArray1[7] = (byte) (-2);
      byteArray1[8] = (byte)0;
      BigInteger bigInteger1 = bigInteger0.modPow(bigInteger0, bigInteger0);
      BigInteger bigInteger2 = bigInteger0.add(bigInteger1);
      BigInteger bigInteger3 = BigInteger.TEN;
      byte[] byteArray2 = Base64.encodeInteger(bigInteger2);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      Base64.isBase64(byteArray3);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Base64 base64_0 = new Base64(8);
      byte[] byteArray0 = base64_0.decode("5^PHp9y|el$ED]({");
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte) (-24);
      byteArray0[4] = (byte) (-24);
      Base64 base64_0 = new Base64(620, byteArray0, true);
      base64_0.encode(byteArray0, (int) (byte)13, (int) (byte) (-24));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64();
      Object object0 = base64_0.decode((Object) "");
      base64_0.decode(object0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(8, byteArray0, false);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-51);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)12;
      Base64 base64_0 = new Base64((-1836), byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64("!7/}:GU}T$");
      base64_0.readResults(byteArray2, (byte)12, (byte)0);
      base64_0.decode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)66;
      MockRandom mockRandom0 = new MockRandom((-2016L));
      BigInteger bigInteger0 = new BigInteger(620, (-1869), mockRandom0);
      byte[] byteArray1 = new byte[26];
      byteArray1[0] = (byte)66;
      byteArray1[1] = (byte)66;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)66;
      byteArray1[4] = (byte) (-2);
      byteArray1[5] = (byte) (-2);
      byteArray1[6] = (byte) (-2);
      byteArray1[7] = (byte) (-2);
      byteArray1[8] = (byte)0;
      BigInteger bigInteger1 = new BigInteger(byteArray1);
      BigInteger bigInteger2 = bigInteger0.modPow(bigInteger1, bigInteger1);
      BigInteger bigInteger3 = bigInteger0.add(bigInteger2);
      BigInteger bigInteger4 = BigInteger.TEN;
      byte[] byteArray2 = Base64.encodeInteger(bigInteger3);
      bigInteger2.divideAndRemainder(bigInteger0);
      bigInteger4.doubleValue();
      byte[] byteArray3 = Base64.CHUNK_SEPARATOR;
      Base64.isBase64(byteArray2);
      Base64.isBase64((byte)0);
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, (int) (byte)0, 1982292598);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 26
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)66;
      MockRandom mockRandom0 = new MockRandom((-2016L));
      BigInteger bigInteger0 = new BigInteger(620, (byte)66, mockRandom0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)66;
      byteArray1[1] = (byte)66;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)66;
      byteArray1[4] = (byte) (-2);
      byteArray1[5] = (byte) (-2);
      byteArray1[6] = (byte) (-2);
      byteArray1[7] = (byte) (-2);
      byteArray1[8] = (byte)0;
      BigInteger bigInteger1 = new BigInteger(byteArray1);
      Base64.encodeBase64((byte[]) null, true, true);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte) (-2), byteArray1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [BB\u0000B\uFFFD\uFFFD\uFFFD\uFFFD\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64(69);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.encode(byteArray1, 69, 56);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-76);
      Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64((byte) (-76));
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, 2480);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray2 = base64_0.encode(byteArray0);
      Base64.isBase64(byteArray2);
      base64_0.decode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte)15;
      Base64 base64_0 = new Base64((-1836), byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-76);
      byteArray1[1] = (byte) (-76);
      byteArray1[2] = (byte)15;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      BigInteger bigInteger1 = new BigInteger(byteArray1);
      bigInteger1.pow(64);
      BigInteger bigInteger2 = bigInteger1.modPow(bigInteger0, bigInteger0);
      BigInteger bigInteger3 = BigInteger.TEN;
      bigInteger2.add(bigInteger3);
      BigInteger bigInteger4 = BigInteger.TEN;
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.isBase64(byteArray2);
      Base64.isBase64((byte)121);
      Base64 base64_1 = new Base64();
      base64_1.encode(byteArray3);
      base64_0.encode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Base64.encodeBase64((byte[]) null);
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 7, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-50);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeBase64String((byte[]) null);
      Base64.encodeBase64String(byteArray0);
      Base64.isBase64((byte)109);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      base64_0.encodeToString((byte[]) null);
      Base64.encodeBase64((byte[]) null, false, false, 2021161080);
      Base64.encodeBase64URLSafeString(byteArray1);
      base64_0.encode((byte[]) null);
      base64_0.readResults(byteArray1, 648, (-1343));
      int int0 = 3379;
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 25, 25);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64 base64_0 = new Base64(1, byteArray0, false);
      base64_0.decode(byteArray0, 8189, (-68));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64(69);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Base64.isBase64((byte)0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      Base64 base64_0 = new Base64((byte)0, byteArray0, false);
      base64_0.encode(byteArray0, (int) (byte)0, (int) (byte)0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      base64_0.avail();
      Base64.isBase64((byte)10);
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)16;
      byteArray2[2] = (byte)10;
      byteArray2[3] = (byte) (-97);
      Base64.encodeBase64URLSafe(byteArray2);
      Base64 base64_1 = new Base64();
      base64_1.encodeToString(byteArray0);
      Base64 base64_2 = new Base64();
      Base64.encodeBase64(byteArray1);
      try { 
        base64_2.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)66;
      MockRandom mockRandom0 = new MockRandom((-2016L));
      BigInteger bigInteger0 = new BigInteger(620, (-1869), mockRandom0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)66;
      byteArray1[1] = (byte)66;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)66;
      byteArray1[4] = (byte) (-2);
      byteArray1[5] = (byte) (-2);
      byteArray1[6] = (byte) (-2);
      byteArray1[7] = (byte) (-2);
      byteArray1[8] = (byte)0;
      BigInteger bigInteger1 = new BigInteger(byteArray1);
      BigInteger bigInteger2 = bigInteger0.modPow(bigInteger1, bigInteger1);
      bigInteger0.add(bigInteger2);
      BigInteger bigInteger3 = BigInteger.TEN;
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger3);
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray1);
      Base64.isBase64(byteArray2);
      Base64.isBase64((byte)2);
      Base64 base64_0 = new Base64();
      byte[] byteArray4 = base64_0.encode(byteArray2);
      assertFalse(byteArray4.equals((Object)byteArray3));
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte)15;
      Base64 base64_0 = new Base64((-1836), byteArray0);
      base64_0.encodeToString(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 1329);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      Base64.decodeInteger(byteArray1);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, true, (int) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[0];
      base64_0.encode(byteArray0);
      boolean boolean0 = Base64.isBase64("");
      Base64 base64_1 = new Base64();
      boolean boolean1 = base64_1.isUrlSafe();
      assertFalse(boolean1);
      
      boolean boolean2 = base64_0.isUrlSafe();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray0 = base64_0.encode((byte[]) null);
      assertNull(byteArray0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64 base64_0 = new Base64(1, byteArray0, false);
      byte[] byteArray1 = new byte[5];
      Base64.encodeBase64(byteArray0, true);
      byteArray1[0] = (byte) (-1);
      Base64.decodeInteger(byteArray0);
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte)1;
      byteArray1[3] = (byte) (-9);
      byteArray1[4] = (byte)73;
      Base64.discardWhitespace(byteArray1);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, 0, (int) (byte)73);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(true);
      byte byte0 = (byte)104;
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64.encodeBase64URLSafe((byte[]) null);
      bigInteger0.doubleValue();
      BigInteger bigInteger1 = null;
      try {
        bigInteger1 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Base64.decodeBase64((String) null);
      Base64 base64_0 = new Base64(1, (byte[]) null, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte) (-9);
      byteArray0[3] = (byte) (-9);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-1);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte) (-9), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Base64.isBase64((byte)0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, 905);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-5);
      Base64 base64_0 = new Base64(0, byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      int int0 = base64_0.readResults(byteArray2, 8192, (byte)0);
      //  // Unstable assertion: assertEquals(0, int0);
      
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray4 = Base64.encodeBase64(byteArray3, true, false);
      byte[] byteArray5 = Base64.discardWhitespace(byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)75, (byte)48, (byte)70, (byte)69, (byte)78, (byte)119, (byte)61, (byte)61, (byte)0, (byte)0}, byteArray5);
      
      byte[] byteArray6 = Base64.toIntegerBytes(bigInteger0);
      //  // Unstable assertion: assertEquals(0, byteArray6.length);
      
      Base64.encodeBase64(byteArray4, true, true);
      //  // Unstable assertion: assertEquals(10, byteArray3.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)75, (byte)48, (byte)70, (byte)69, (byte)78, (byte)119, (byte)61, (byte)61, (byte)0, (byte)0}, byteArray3);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)3;
      Base64 base64_0 = new Base64((-48), byteArray0);
      Object object0 = base64_0.decode((Object) "`N&8 M");
      Object object1 = base64_0.encode(object0);
      assertNotSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 0, 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte) (-30);
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte) (-108);
      byteArray0[5] = (byte) (-30);
      byteArray0[6] = (byte) (-30);
      byteArray0[7] = (byte) (-30);
      Base64 base64_0 = new Base64(2603, byteArray0, false);
      base64_0.encode(byteArray0, (int) (byte) (-30), (int) (byte) (-108));
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-108);
      byteArray1[1] = (byte) (-30);
      byteArray1[2] = (byte) (-30);
      byteArray1[3] = (byte) (-108);
      Base64.encodeBase64URLSafe(byteArray1);
      base64_0.avail();
      Base64.isBase64((byte)16);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_1 = new Base64();
      base64_1.encodeToString(byteArray0);
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-20);
      byteArray0[5] = (byte)79;
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      assertEquals(12, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Base64 base64_0 = new Base64(1971);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 76, 1971);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 76
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64 base64_0 = new Base64((-3493), byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, 8189);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(0, byteArray0);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      assertEquals(0, byteArray2.length);
      assertSame(byteArray0, byteArray1);
      
      Base64 base64_1 = new Base64((byte)109, byteArray1, true);
      byte[] byteArray3 = base64_1.decode("");
      assertEquals(0, byteArray3.length);
      assertTrue(base64_1.isUrlSafe());
      assertNotSame(byteArray1, byteArray2);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.max(bigInteger1);
      bigInteger0.testBit(0);
      bigInteger0.setBit(0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64Chunked(byteArray0);
      String string0 = "fp";
      Base64.isBase64("fp");
      bigInteger0.floatValue();
      String string1 = "org.apache.commons.codec.EncoderException";
      Base64.isBase64("org.apache.commons.codec.EncoderException");
      Base64 base64_0 = new Base64(false);
      String string2 = "sy2!fCD\"mUd1[M";
      // Undeclared exception!
      try { 
        bigInteger0.modInverse(bigInteger1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger not invertible.
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)56;
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      Base64.isBase64("");
      base64_0.isUrlSafe();
      base64_0.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)67, (byte)0}, byteArray1);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)0;
      Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = new byte[6];
      Base64.encodeBase64(byteArray1, true, true);
      byteArray1[0] = (byte)98;
      byteArray1[1] = (byte) (-127);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)98;
      byteArray1[4] = (byte)98;
      byteArray1[5] = (byte)49;
      Base64.decodeBase64(byteArray1);
      base64_0.decode(">t>Q3;%!ne!");
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64(byteArray0);
      base64_0.decode(byteArray0);
      Base64.encodeBase64((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Base64 base64_0 = new Base64((-1), (byte[]) null, false);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64 base64_0 = new Base64((byte)62, byteArray0, false);
      Base64.encodeBase64String(byteArray0);
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64 base64_0 = new Base64(1, byteArray0, false);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte)1;
      byteArray1[3] = (byte) (-9);
      byteArray1[4] = (byte)73;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, 0, (int) (byte)73);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = "a1;H%NLnf*'N*gh+L9";
      byte[] byteArray0 = Base64.decodeBase64("a1;H%NLnf*'N*gh+L9");
      byte byte0 = (byte)33;
      Base64.isBase64((byte)33);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64URLSafeString(byteArray0);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)65;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 1357);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      bigInteger0.pow((byte)65);
      bigInteger0.nextProbablePrime();
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(1357, byteArray2, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [MUE=]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray0, (-1), (-1));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      base64_0.encode(byteArray0, 0, (-1560));
      byteArray0[1] = (byte)25;
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64("UmWf-P[_&D*h<7!icB");
      byteArray0[2] = (byte)2;
      byte[] byteArray2 = base64_0.decode(byteArray0);
      Base64.encodeBase64(byteArray2);
      Base64.encodeBase64(byteArray1, true, true);
      BigInteger bigInteger0 = BigInteger.ONE;
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger1 = new BigInteger((byte)2, (-1538), mockRandom0);
      bigInteger1.modPow(bigInteger0, bigInteger0);
      bigInteger0.add(bigInteger1);
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64URLSafe(byteArray2);
      byte[] byteArray4 = new byte[7];
      byteArray4[0] = (byte)25;
      byteArray4[1] = (byte)2;
      byteArray4[2] = (byte)0;
      byteArray4[3] = (byte)2;
      byteArray4[4] = (byte)25;
      byteArray4[5] = (byte)25;
      byteArray4[6] = (byte)2;
      Base64.isBase64(byteArray4);
      Base64.isBase64((byte)0);
      base64_0.encode(byteArray3);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)72;
      byteArray0[0] = (byte)72;
      Base64.isArrayByteBase64(byteArray0);
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte) (-28);
      byteArray0[5] = (byte)53;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64URLSafeString((byte[]) null);
      byte[] byteArray1 = new byte[0];
      Base64.encodeBase64Chunked(byteArray1);
      Object object0 = new Object();
      byte[] byteArray2 = new byte[0];
      Base64.encodeBase64String(byteArray2);
      base64_0.encodeToString(byteArray2);
      Base64.encodeBase64((byte[]) null);
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Base64.encodeBase64((byte[]) null);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64Chunked((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Base64.isBase64((byte)0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = base64_0.decode("xq+#PY%@/@o3m3mNFeG");
      Base64.encodeBase64String(byteArray0);
      try { 
        base64_0.encode((Object) "zw#)hbADmS");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-85);
      byteArray0[7] = (byte) (-119);
      byteArray0[8] = (byte) (-104);
      base64_0.decode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Base64.decodeBase64("DCx=d");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = Base64.decodeBase64("Input array too big, the output array would be bigger (");
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(3897, byteArray1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\"zn\uFFFD\uFFFD\uFFFDk+h\uFFFD\uFFFD\uFFFD\uFFFD\u0017\uFFFD\uFFFD\uFFFDn\uFFFD\uFFFD\uFFFDk,(\uFFFDW[y\uFFFD\uFFFD\uFFFD\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-5);
      Base64 base64_0 = new Base64(0, byteArray0);
      Base64.encodeBase64(byteArray0, false);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.shiftLeft((-1));
      Base64.encodeInteger(bigInteger0);
      base64_0.decode(byteArray0, 0, (int) (byte)0);
      byte[] byteArray1 = new byte[0];
      base64_0.encode(byteArray1);
      Base64.decodeBase64("");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base64 base64_0 = new Base64(26, byteArray0, false);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 26, 26);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 26
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(0, byteArray0);
      Base64.encodeBase64String(byteArray1);
      Base64.encodeBase64String(byteArray1);
      Base64.isBase64((byte)109);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, true, true, (int) (byte)109);
      Base64.encodeBase64URLSafeString(byteArray2);
      base64_0.encode(byteArray0);
      base64_0.readResults(byteArray3, (-348), 0);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 21, 3379);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 21
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64();
      Base64.encodeBase64String(byteArray0);
      base64_0.decode(byteArray0, 76, (-650));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64(true);
      base64_1.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte)0;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      bigInteger0.bitCount();
      BigInteger bigInteger1 = bigInteger0.nextProbablePrime();
      BigInteger bigInteger2 = bigInteger1.shiftRight((byte)55);
      bigInteger0.subtract(bigInteger1);
      BigInteger bigInteger3 = BigInteger.ZERO;
      bigInteger3.max(bigInteger2);
      bigInteger3.mod(bigInteger1);
      bigInteger0.add(bigInteger3);
      bigInteger0.toString();
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64(byteArray1, true, true);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)7);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)80;
      byteArray0[6] = (byte)47;
      byteArray0[7] = (byte) (-35);
      byteArray0[8] = (byte)1;
      Base64.encodeBase64URLSafeString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray0);
      
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(13, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [Cg==]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64();
      base64_0.decode((Object) "4?Sz]i;u3x@hKq-NL");
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)4;
      base64_0.encode(byteArray0);
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("AgQ=", string0);
      
      Object object0 = base64_0.decode((Object) "AgQ=");
      base64_0.decode(object0);
      base64_0.readResults((byte[]) null, 1414, 1414);
      int int0 = base64_0.readResults((byte[]) null, 3188, (byte)2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base64 base64_0 = new Base64((-746));
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("AAAA", string0);
      
      Base64 base64_1 = new Base64(64);
      byte[] byteArray1 = base64_1.decode(byteArray0);
      assertEquals(0, byteArray1.length);
      assertFalse(base64_1.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(69);
      boolean boolean0 = base64_0.hasData();
      assertFalse(base64_0.isUrlSafe());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64(254, byteArray0, true);
      Base64.encodeBase64URLSafe(byteArray1);
      base64_0.hasData();
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, true, true);
      base64_0.decode((Object) "\"");
      String string0 = Base64.encodeBase64URLSafeString(byteArray1);
      assertEquals("", string0);
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray3);
      assertSame(byteArray4, byteArray2);
      
      base64_0.decode("");
      Base64.decodeBase64("");
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)57);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)84;
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)19;
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte) (-5));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("-.v@%gK3");
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-6), (byte) (-8)}, byteArray1);
      
      Base64 base64_0 = new Base64(103, byteArray0, true);
      byte[] byteArray2 = base64_0.decode("Gn[N;bd=p Bt]F");
      assertEquals(3, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Base64.isBase64((byte)0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, true);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)0, (byte)0}, byteArray3);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger1 = new BigInteger(53, 884, mockRandom0);
      bigInteger1.modPow(bigInteger0, bigInteger0);
      BigInteger bigInteger2 = BigInteger.TEN;
      bigInteger2.floatValue();
      bigInteger0.add(bigInteger2);
      byte[] byteArray4 = Base64.toIntegerBytes(bigInteger1);
      Base64.encodeBase64URLSafe(byteArray1);
      boolean boolean0 = Base64.isBase64(byteArray4);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertEquals(7, byteArray4.length);
      
      Base64.isBase64((byte)0);
      base64_0.encode(byteArray0);
      base64_0.encode((byte[]) null);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte) (-110);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = new byte[13];
      byteArray1[6] = (byte)0;
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte) (-11);
      byteArray2[2] = (byte)101;
      byteArray2[3] = (byte)56;
      byteArray2[4] = (byte) (-11);
      byteArray2[5] = (byte)4;
      byteArray2[6] = (byte)52;
      byteArray2[7] = (byte)26;
      byteArray2[8] = (byte)9;
      Base64.discardWhitespace(byteArray2);
      boolean boolean0 = Base64.isBase64((byte)26);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Base64 base64_0 = new Base64(106);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)96;
      byteArray1[1] = (byte)1;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)47;
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte)0;
      base64_0.encodeToString(byteArray1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-77);
      byteArray0[6] = (byte)118;
      byteArray0[7] = (byte) (-14);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = new byte[0];
      base64_0.encodeToString(byteArray2);
      byte[] byteArray3 = new byte[6];
      byteArray3[0] = (byte) (-77);
      byteArray3[1] = (byte)0;
      byteArray3[2] = (byte)118;
      byteArray3[3] = (byte)0;
      byteArray3[4] = (byte)0;
      byteArray3[5] = (byte)96;
      Base64.discardWhitespace(byteArray3);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Base64.decodeBase64("X");
      Base64.encodeBase64URLSafe((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Base64.decodeBase64("W2=P+0");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("-.v@%gK3");
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(false);
      base64_0.decode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, false, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of 3
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertTrue(boolean0);
      
      Base64 base64_0 = new Base64();
      base64_0.readResults(byteArray0, (-1), (-466));
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.decode((String) null);
      Base64.isBase64("");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Base64.decodeBase64("");
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Base64 base64_0 = new Base64((-223));
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)123;
      Base64 base64_0 = new Base64((byte)123, byteArray0, true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertEquals(10, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)101, (byte)119, (byte)65, (byte)65, (byte)65, (byte)65, (byte)123, (byte)0, (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("0");
      Base64.encodeBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-50);
      byteArray0[0] = (byte) (-50);
      byte byte1 = (byte)104;
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      bigInteger0.doubleValue();
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger1.abs();
      bigInteger0.multiply(bigInteger1);
      Base64.encodeInteger(bigInteger0);
      byteArray0[1] = (byte)104;
      Base64.encodeBase64Chunked(byteArray0);
      byteArray0[2] = (byte)0;
      BigInteger bigInteger2 = null;
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Base64.decodeBase64("s_|dg|");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-109);
      byte byte1 = (byte)69;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)91;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.decodeInteger(byteArray0);
      Base64.encodeBase64(byteArray1, true, false, 5452);
      boolean boolean0 = true;
      bigInteger0.toString(4566);
      base64_0.decode(byteArray1);
      bigInteger0.abs();
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, true, true, (int) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-76);
      Base64 base64_0 = new Base64(56, byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.shiftLeft(56);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      base64_0.decode("/C[O]!U(e");
      base64_0.decode(byteArray1, 10, 1072);
      base64_0.encode(byteArray2);
      Base64.decodeBase64("A.SQ)@,{13H-Q");
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64 base64_0 = new Base64((byte)62, byteArray0, false);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertEquals(13, byteArray1.length);
      
      int int0 = base64_0.readResults(byteArray0, (byte)62, (byte)62);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64(72, (byte[]) null);
      Base64 base64_1 = new Base64();
      base64_1.readResults((byte[]) null, 76, 64);
      base64_1.decode((byte[]) null);
      base64_0.decode((byte[]) null);
      Base64.decodeBase64("");
      try { 
        base64_1.decode((Object) base64_0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)126;
      Base64 base64_0 = new Base64(2701, byteArray0);
      base64_0.encode(byteArray0);
      Base64.encodeBase64(byteArray0, false);
      byte[] byteArray1 = new byte[0];
      base64_0.readResults(byteArray0, (byte)0, 1);
      Base64.decodeInteger(byteArray1);
      String string0 = "";
      base64_0.decode("");
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)25;
      byteArray0[0] = (byte)25;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      bigInteger0.negate();
      bigInteger0.shiftRight((-1));
      Base64 base64_0 = new Base64((byte)25);
      Base64.decodeBase64(byteArray0);
      base64_0.readResults(byteArray0, (byte)25, (-534));
      Object object0 = null;
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(843, 843, mockRandom0);
      bigInteger0.negate();
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.encodeBase64(byteArray0, true, false, 3077);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Base64 base64_0 = new Base64(95);
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)0;
      byteArray0[1] = (byte)56;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray1);
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-1);
      byteArray1[3] = (byte) (-9);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, false, 1073741824);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray3 = base64_0.decode(byteArray2);
      base64_0.encode(byteArray3, (-3187), 1158);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      base64_0.encode(byteArray0, 0, (-1560));
      byteArray0[1] = (byte)25;
      Base64.encodeBase64String(byteArray0);
      Base64.decodeBase64("UmWf-P[_&D*h<7!icB");
      byteArray0[2] = (byte)2;
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      base64_0.decode("ABkA");
      Base64.encodeBase64String(byteArray1);
      Object object0 = base64_0.decode((Object) "UmWf-P[_&D*h<7!icB");
      base64_0.encode(object0);
      try { 
        base64_0.encode((Object) "NG~_2gy#e6-hS8");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)107;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [k]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.encodeToString(byteArray0);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Base64.decodeBase64("");
      Base64 base64_0 = new Base64((-834));
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte[] byteArray0 = Base64.encodeBase64Chunked((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.encodeBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Base64.decodeBase64("*zdB00Zux ~eLmYU]D");
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)0;
      Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.isProbablePrime((byte)7);
      bigInteger0.doubleValue();
      bigInteger0.negate();
      Base64.toIntegerBytes(bigInteger0);
      base64_0.encodeToString(byteArray0);
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }
}
