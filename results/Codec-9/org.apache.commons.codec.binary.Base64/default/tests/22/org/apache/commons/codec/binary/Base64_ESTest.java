/*
 * This file was automatically generated by EvoSuite
 * Fri Feb 26 00:00:16 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(7632);
      mockRandom0.nextGaussian();
      BigInteger bigInteger0 = new BigInteger(7632, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      mockRandom0.nextGaussian();
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      bigInteger2.testBit(7632);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger2);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true, 7632);
      Base64.encodeBase64(byteArray2, true, false, 7632);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray3 = new byte[9];
      byteArray3[0] = (byte) (-1);
      byteArray3[1] = (byte) (-51);
      byteArray3[2] = (byte)60;
      byteArray3[3] = (byte)68;
      byteArray3[4] = (byte)28;
      byteArray3[5] = (byte)1;
      byteArray3[6] = (byte) (-31);
      byteArray3[7] = (byte)101;
      byteArray3[8] = (byte)60;
      base64_0.decode(byteArray3);
      Base64.discardWhitespace(byteArray1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(7632);
      mockRandom0.nextGaussian();
      BigInteger bigInteger0 = new BigInteger(7632, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger1.testBit(7632);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true, 7632);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, true, 7632);
      Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(true);
      // Undeclared exception!
      base64_0.encode(byteArray3, 147, 7632);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      BigInteger bigInteger0 = new BigInteger(7646, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      mockRandom0.nextGaussian();
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger1.testBit(7646);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      mockRandom0.setSeed(1L);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true, 7646);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, true, 7646);
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray3);
      // Undeclared exception!
      Base64.encodeBase64(byteArray3, true);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.decodeInteger(byteArray0);
      int int0 = 0;
      Base64 base64_0 = new Base64(0, byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-127);
      byteArray1[1] = (byte)17;
      byteArray1[2] = (byte)21;
      byteArray1[3] = (byte)27;
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = 7621;
      MockRandom mockRandom0 = new MockRandom(7621);
      mockRandom0.nextGaussian();
      BigInteger bigInteger0 = new BigInteger(7621, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      mockRandom0.nextGaussian();
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      bigInteger2.testBit(7621);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger2);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false, 7621);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false, false, 7621);
      Base64.encodeInteger(bigInteger1);
      Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(false);
      // Undeclared exception!
      Base64.encodeBase64String(byteArray3);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      BigInteger bigInteger0 = new BigInteger(7646, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      mockRandom0.nextGaussian();
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      bigInteger2.testBit(7646);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger2);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true, 7646);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, true, 7646);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      // Undeclared exception!
      base64_0.encode(byteArray4);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter suppli to Base64 decode is not a byte[] or a String");
      Base64 base64_0 = new Base64(true);
      base64_0.decode(byteArray0, 13, 13);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = 7621;
      MockRandom mockRandom0 = new MockRandom(7621);
      mockRandom0.nextGaussian();
      BigInteger bigInteger0 = new BigInteger(7621, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      bigInteger0.toString();
      mockRandom0.nextGaussian();
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      bigInteger2.testBit(7621);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger2);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false, 7621);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false, false, 7621);
      Base64.encodeBase64String(byteArray2);
      Base64.isBase64(byteArray2);
      Base64.encodeInteger(bigInteger2);
      Base64 base64_0 = new Base64(true);
      // Undeclared exception!
      base64_0.encodeToString(byteArray3);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0, 1, 1);
      base64_0.encode(byteArray0, (-2953), (-2953));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isBase64(byteArray0);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(474, mockRandom0);
      Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64((-4652));
      base64_0.encodeToString(byteArray0);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(474, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64Chunked(byteArray0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Input aaraS too big, the output array would be bigger (");
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64("Input aaraS too big, the output array would be bigger (");
      Base64 base64_0 = new Base64(true);
      base64_0.decode(byteArray1, 14, 14);
      base64_0.avail();
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)82;
      byteArray2[1] = (byte)33;
      byteArray2[2] = (byte)120;
      byteArray2[3] = (byte)0;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray2, (int) (byte)33, 724);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 33
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Input aaraS too big, the output array would be bigger (");
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64(byteArray2, true, true);
      Base64 base64_1 = new Base64(true);
      base64_1.encode(byteArray2);
      base64_0.decode(byteArray1, 4, 76);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Input aaraS too big, the output array would be bigger (");
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_0 = new Base64(17);
      Base64.encodeBase64(byteArray2, true, true);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray2, 42, 77);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 66
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Input aaraS too big, the output array would be bigger (");
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_0 = new Base64(4);
      Base64.decodeBase64("Input aaraS too big, the output array would be bigger (");
      base64_0.encodeToString(byteArray2);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Input aaraS too big, the output array would be bigger (");
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64Chunked(byteArray1);
      Base64.encodeBase64(byteArray1, false, false, 66);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Input aaraS too big, the output array would be bigger (");
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64.encodeBase64Chunked(byteArray2);
      Base64.isBase64("lineSeperator must not contain base64 characters: [");
      Base64 base64_0 = new Base64(29);
      base64_0.decode(byteArray1, 29, 29);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Input aaraS too big, the output array would be bigger (");
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64.decodeInteger(byteArray2);
      Base64.encodeBase64Chunked(byteArray2);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-180), byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\"zn\uFFFD\uFFFD\uFFFDi+h\uFFFD\uFFFD\uFFFD\uFFFD\u0017\uFFFD\uFFFD\uFFFDn\uFFFD\uFFFD\uFFFDk,(\uFFFDW[y\uFFFD\uFFFD\uFFFD\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Input aaraS too big, the output array would be bigger (");
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64.isArrayByteBase64(byteArray2);
      Base64 base64_0 = new Base64(true);
      Base64.isBase64("g");
      base64_0.decode(byteArray2, 61, 61);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-1164), byteArray0);
      byte[] byteArray1 = new byte[1];
      Base64.encodeBase64(byteArray1);
      byteArray1[0] = (byte) (-6);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = "Input array too big, the output array would be bigger (";
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.isBase64((byte)61);
      Base64 base64_0 = new Base64(false);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 1246, (int) (byte)61);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1246
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Random.setNextRandom(109);
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte) (-109);
      byteArray0[4] = (byte) (-67);
      byteArray0[5] = (byte) (-100);
      byteArray0[6] = (byte)9;
      Base64.encodeBase64(byteArray0);
      base64_0.avail();
      Base64.discardWhitespace(byteArray0);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(7598);
      mockRandom0.nextGaussian();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)9;
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Base64.isBase64((byte)62);
      Base64 base64_0 = new Base64(32);
      byte[] byteArray0 = new byte[8];
      Base64.isBase64((byte)7);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_1 = new Base64(false);
      Base64.isBase64("");
      base64_0.decode(byteArray1, (int) (byte)7, (int) (byte)62);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Base64.isBase64((byte)68);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64(byteArray0, true, true, (int) (byte)68);
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0, 3156, (-53));
      Base64.encodeBase64((byte[]) null, true, false, 1);
      Base64.isBase64((byte)68);
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, 2289, (byte)68);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Base64.decodeBase64("Input array too big, the output array would be bigger (");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      Base64.isBase64("Input array too big, the output array would be bigger (");
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)16;
      Base64.encodeBase64(byteArray2, false, true);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, 10, (int) (byte)55);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Input aaraS too big, the output array would be bigger (");
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64Chunked(byteArray1);
      Base64.isBase64("Input aaraS too big, the output array would be bigger (");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte) (-1);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64("");
      Base64 base64_0 = new Base64((byte) (-1), byteArray0, false);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 0, 2128);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.subtract(bigInteger1);
      BigInteger bigInteger2 = BigInteger.TEN;
      bigInteger0.subtract(bigInteger2);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64 base64_0 = new Base64((-2155), byteArray0, false);
      Base64.decodeBase64("");
      Base64 base64_1 = new Base64(200, byteArray0);
      int int0 = Base64.MIME_CHUNK_SIZE;
      base64_1.encode(byteArray0, 36, (-2935));
      Base64.isBase64("gx9nE+)suxOS@#m");
      base64_1.hasData();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte) (-11);
      byteArray0[7] = (byte) (-22);
      byteArray0[8] = (byte)111;
      Base64.discardWhitespace(byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.pow(0);
      // Undeclared exception!
      try { 
        bigInteger0.clearBit((byte) (-22));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Negative bit address
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Input arra too big, the output array would be bigger (");
      Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0);
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeBase64((byte[]) null);
      Base64 base64_0 = new Base64((-1252));
      base64_0.encode((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (int) (byte)0, 37);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64(byteArray0, true);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-117);
      byteArray1[1] = (byte)65;
      byteArray1[2] = (byte)8;
      byteArray1[3] = (byte)23;
      byteArray1[4] = (byte) (-43);
      byteArray1[5] = (byte) (-1);
      Base64.encodeBase64Chunked(byteArray1);
      BigInteger bigInteger0 = BigInteger.ONE;
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Base64 base64_0 = new Base64((-2859));
      byte[] byteArray0 = new byte[3];
      Base64 base64_1 = new Base64();
      base64_0.decode(byteArray0, 76, (-2859));
      base64_0.isUrlSafe();
      base64_1.readResults(byteArray0, 64, (-2859));
      Base64.encodeBase64(byteArray0, false, true);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)47;
      byteArray1[1] = (byte)9;
      byteArray1[2] = (byte)13;
      byteArray1[3] = (byte)29;
      byteArray1[4] = (byte)76;
      byteArray1[5] = (byte) (-95);
      byteArray1[6] = (byte)1;
      byteArray1[7] = (byte)45;
      byteArray1[8] = (byte) (-44);
      Base64.isArrayByteBase64(byteArray1);
      Base64.decodeBase64(byteArray0);
      Base64 base64_2 = new Base64(52);
      base64_0.decode(byteArray0, (int) (byte)29, 50);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)9;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte) (-88);
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64.isBase64("");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64.isArrayByteBase64(byteArray0);
      Base64.decodeBase64(byteArray1);
      Base64 base64_0 = new Base64((-235));
      Base64.encodeBase64String(byteArray0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Object object0 = base64_0.decode((Object) "");
      base64_0.encode(object0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.valueOf(1597L);
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(9);
      try { 
        base64_0.decode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Input array too big, the output array would be bigger (");
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(false);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      BigInteger.valueOf(64);
      Base64.isBase64(byteArray0);
      Object object0 = new Object();
      Object object1 = new Object();
      base64_0.decode((Object) "Input array too big, the output array would be bigger (");
      base64_0.hasData();
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      Base64.encodeBase64((byte[]) null, false, true);
      Base64.isArrayByteBase64(byteArray0);
      Base64.decodeBase64((byte[]) null);
      Base64 base64_1 = new Base64((byte)0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)55;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)0;
      base64_0.readResults(byteArray0, (-805), 118);
      byteArray1[7] = (byte)0;
      byteArray1[8] = (byte)55;
      base64_0.decode(byteArray1, 1073741824, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)123;
      boolean boolean0 = true;
      Base64.encodeBase64(byteArray0, true, true);
      Base64.isArrayByteBase64(byteArray0);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64((byte)123);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)123, (int) (byte)123);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 123
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      Base64.isArrayByteBase64(byteArray0);
      Base64.isBase64((byte)31);
      Base64.discardWhitespace(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-1);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64(byteArray0);
      base64_0.decode(byteArray0);
      Base64.decodeBase64((String) null);
      Base64.discardWhitespace(byteArray0);
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      assertTrue(base64_0.isUrlSafe());
      
      byte[] byteArray0 = new byte[4];
      Base64 base64_1 = new Base64();
      Base64 base64_2 = new Base64(76, byteArray0, true);
      base64_2.isUrlSafe();
      base64_2.decode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[22];
      byte byte0 = (byte) (-23);
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)86;
      byte byte1 = (byte)92;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte) (-15);
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte) (-55);
      byteArray0[7] = (byte)86;
      Base64.encodeBase64URLSafe(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 1, (int) (byte)92);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 22
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte) (-83);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(16);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeBase64(byteArray2, false, true, 906);
      Base64.isBase64((byte)20);
      base64_0.encode(byteArray1, (-199), 17);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.discardWhitespace(byteArray1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte byte0 = (byte)88;
      byte byte1 = (byte)0;
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)88;
      byteArray0[5] = (byte)0;
      Base64.encodeBase64URLSafe(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, (int) (byte)88);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Base64.encodeBase64((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = (-2116);
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-2116), byteArray0);
      Base64.encodeBase64(byteArray0);
      base64_0.decode(byteArray0, (-2116), (-2116));
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Base64 base64_0 = new Base64((-2859));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte) (-1);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64String((byte[]) null);
      byte byte0 = (byte)0;
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, 3725, 68);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Base64.isBase64("]l`# /;:Su9Kz@q*");
      byte[] byteArray0 = new byte[2];
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.decodeBase64("89ZWy D\"T!bMI8&+ _");
      base64_0.decode((Object) "]l`# /;:Su9Kz@q*");
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      base64_0.encode((byte[]) null, (int) (byte) (-105), 0);
      base64_0.encode((byte[]) null);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.isArrayByteBase64(byteArray1);
      Base64.isBase64((byte)5);
      Base64.discardWhitespace(byteArray2);
      Base64.isBase64(byteArray1);
      byte[] byteArray3 = new byte[5];
      byteArray3[0] = (byte) (-105);
      byteArray3[1] = (byte)5;
      byteArray3[2] = (byte) (-105);
      byteArray3[3] = (byte) (-105);
      byteArray3[4] = (byte) (-16);
      base64_0.decode(byteArray3, (int) (byte) (-105), (int) (byte) (-105));
      Base64.encodeBase64URLSafeString(byteArray1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64.isArrayByteBase64(byteArray0);
      Base64.isBase64("");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 20);
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)1;
      byteArray2[2] = (byte)1;
      byteArray2[3] = (byte)24;
      Base64 base64_0 = new Base64(1541, byteArray2);
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)114;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false, false);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray3);
      Base64.encodeBase64URLSafe(byteArray2);
      base64_0.encode(byteArray0, (int) (byte)0, (-821));
      Base64 base64_1 = new Base64((byte)0);
      base64_1.encode(byteArray2);
      Base64.encodeBase64URLSafeString(byteArray4);
      Base64.isArrayByteBase64(byteArray4);
      Base64.isBase64((byte)108);
      Base64.discardWhitespace(byteArray0);
      Base64.isBase64(byteArray1);
      Base64 base64_2 = null;
      try {
        base64_2 = new Base64((-226), byteArray1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000\u0000\u0000\u0000\u0000\u0000\u0000r]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64.isArrayByteBase64(byteArray0);
      int int0 = 1737;
      Base64 base64_0 = new Base64(true);
      base64_0.encodeToString(byteArray0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      BigInteger.valueOf(67L);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64(byteArray1);
      Object object0 = new Object();
      Object object1 = new Object();
      try { 
        base64_0.decode(object1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte) (-15);
      byteArray0[5] = (byte)111;
      byteArray0[6] = (byte) (-55);
      byteArray0[7] = (byte)122;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-112);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-14);
      Base64.encodeBase64(byteArray1, true, true, 36);
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)1;
      byteArray2[1] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray2);
      try { 
        base64_0.encode((Object) "AQAAAAAAAAAA");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64.isBase64((byte)125);
      Base64 base64_0 = new Base64((byte)125, byteArray0, true);
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)44;
      Base64 base64_0 = new Base64((-1), byteArray0);
      byte[] byteArray1 = Base64.decodeBase64("g`FHK!");
      base64_0.encodeToString(byteArray0);
      base64_0.hasData();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.intValue();
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64(byteArray0, false, false, 67);
      base64_0.decode(byteArray0);
      Base64.encodeBase64URLSafe(byteArray1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, 64, 64);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      Base64.encodeBase64URLSafe((byte[]) null);
      byte[] byteArray0 = Base64.decodeBase64("^Nl?=\".kbBq56'");
      base64_0.encodeToString((byte[]) null);
      Base64.encodeBase64((byte[]) null, true, false, (-283));
      Base64.encodeBase64((byte[]) null, true, true);
      Base64.encodeBase64(byteArray0, true, true);
      base64_0.avail();
      base64_0.readResults((byte[]) null, 4065, (-136));
      base64_0.encodeToString(byteArray0);
      byte[] byteArray1 = new byte[1];
      byte byte0 = (byte)0;
      byteArray1[0] = (byte)0;
      Base64.isBase64(byteArray1);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.encode((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64.decodeBase64("^Nl?=\".kbBq56'");
      Base64.encodeBase64((byte[]) null, true, false, (-283));
      Base64.encodeBase64((byte[]) null, true, true);
      base64_0.avail();
      base64_0.encode((byte[]) null, 67, 0);
      base64_0.decode("");
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte)70;
      Base64.encodeBase64Chunked(byteArray0);
      base64_0.encode(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.compareTo(bigInteger1);
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = new byte[5];
      byteArray1[1] = (byte)34;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)70;
      byteArray1[4] = (byte)70;
      base64_0.decode(byteArray1);
      Base64.decodeBase64((String) null);
      base64_0.readResults((byte[]) null, (-1900), 0);
      Base64.isBase64((byte) (-1));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Base64.isBase64("]l`# /;:Su9Kz@q*");
      byte[] byteArray0 = new byte[2];
      Base64 base64_0 = new Base64();
      base64_0.readResults(byteArray0, (byte)31, 123);
      base64_0.encodeToString(byteArray0);
      Base64.decodeInteger(byteArray0);
      BigInteger bigInteger0 = BigInteger.valueOf(4L);
      Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64(byteArray0);
      Object object0 = new Object();
      Object object1 = base64_0.decode((Object) "]l`# /;:Su9Kz@q*");
      base64_0.decode(object1);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)26;
      byteArray1[1] = (byte)26;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)26;
      byteArray1[4] = (byte)17;
      byteArray1[5] = (byte)26;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, false, true, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.hasData();
      Object object0 = base64_0.decode((Object) "Input array too big, the output array would be bigger (");
      base64_0.decode(object0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[4];
      Base64.encodeBase64(byteArray0, false);
      Base64.decodeBase64(byteArray0);
      byteArray0[0] = (byte) (-1);
      Base64.decodeBase64((String) null);
      Base64 base64_1 = new Base64(3283);
      base64_1.decode("|+i\"]gp8p$`d");
      base64_1.encode((byte[]) null, 72, (int) (byte)0);
      base64_0.decode((String) null);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-1);
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-99);
      byteArray0[7] = (byte) (-105);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      base64_0.encode(byteArray1, 0, (int) (byte) (-51));
      base64_0.encode(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.isArrayByteBase64(byteArray0);
      Base64.isBase64((byte)0);
      Base64.discardWhitespace(byteArray0);
      Base64.isBase64(byteArray1);
      base64_0.decode(byteArray1, (int) (byte)66, 1673);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte)69;
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)69;
      byte[] byteArray2 = Base64.decodeBase64("89ZlyCDvT!#MI8&+ _");
      byteArray1[1] = (byte) (-75);
      base64_0.decode((Object) "RaQAtUU");
      byteArray1[2] = (byte) (-75);
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.encodeToString(byteArray0);
      base64_0.readResults(byteArray1, (byte) (-75), 78);
      base64_0.encode(byteArray2, 53, (int) (byte) (-92));
      Base64.isBase64("");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0);
      base64_0.readResults(byteArray0, 1, 48);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0, (-2953), (-2953));
      base64_0.encode(byteArray0, (-2953), (-2953));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte byte0 = (byte) (-65);
      Base64.isBase64((byte) (-65));
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte) (-65);
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte) (-65);
      byteArray0[6] = (byte) (-65);
      byteArray0[7] = (byte) (-65);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 67, 113);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 67
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      Base64.encodeBase64URLSafe((byte[]) null);
      byte[] byteArray0 = Base64.decodeBase64("^Nl?=\".kbBq56'");
      Base64.encodeBase64((byte[]) null, true, false, (-283));
      Base64.encodeBase64((byte[]) null, true, true);
      base64_0.avail();
      base64_0.readResults((byte[]) null, 4065, (-136));
      base64_0.encodeToString(byteArray0);
      byte[] byteArray1 = new byte[1];
      byte byte0 = (byte)0;
      byteArray1[0] = (byte)0;
      Base64.isBase64(byteArray1);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Base64 base64_0 = new Base64((-2859));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte) (-1);
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-1);
      base64_0.encode(byteArray1);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.compareTo(bigInteger1);
      Base64.toIntegerBytes(bigInteger0);
      byteArray1[2] = (byte)0;
      base64_0.decode(byteArray1);
      Base64.decodeBase64((String) null);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)33;
      byteArray0[6] = (byte)65;
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      base64_0.avail();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte)0;
      byte byte0 = (byte)0;
      byteArray0[2] = (byte)0;
      base64_0.decode("I$sJU$$");
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, (int) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-99);
      byteArray0[7] = (byte) (-105);
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-1);
      String string0 = "~Ys1_B2Q<gG<)";
      byte[] byteArray2 = Base64.decodeBase64("~Ys1_B2Q<gG<)");
      base64_0.encode(byteArray2, 0, (int) (byte) (-1));
      byteArray1[1] = (byte)116;
      byte byte0 = (byte) (-123);
      try { 
        base64_0.encode((Object) "~Ys1_B2Q<gG<)");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray0, (int) (byte) (-1), (int) (byte) (-1));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64Chunked((byte[]) null);
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(0, (byte[]) null, false);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.andNot(bigInteger0);
      bigInteger1.not();
      // Undeclared exception!
      try { 
        bigInteger0.divideAndRemainder(bigInteger1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger divide by zero
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, true, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of 5
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)75;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, true, (int) (byte) (-108));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of -108
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray0, (-365), (-365));
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, (-365), (-365));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Base64 base64_0 = new Base64((-3112), byteArray0);
      base64_0.encode(byteArray0, (-3112), (-3112));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray2);
      base64_0.readResults(byteArray0, 115, 115);
      Base64.decodeBase64(byteArray1);
      Base64.toIntegerBytes(bigInteger0);
      base64_0.readResults(byteArray2, 115, (-1));
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray0);
      base64_0.encode(byteArray0);
      Base64.encodeBase64Chunked(byteArray3);
      Base64.encodeInteger(bigInteger0);
      Base64.isArrayByteBase64(byteArray0);
      byte[] byteArray4 = new byte[0];
      Base64.discardWhitespace(byteArray4);
      Base64.isBase64((byte)1);
      Base64.decodeBase64("!Ia;$%\"V,");
      Base64.isBase64((byte)1);
      try { 
        base64_0.encode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      Object object0 = new Object();
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-29);
      byteArray1[1] = (byte) (-29);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-29);
      byteArray1[4] = (byte) (-29);
      byteArray1[5] = (byte) (-29);
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte) (-29);
      Base64.encodeBase64String(byteArray1);
      base64_0.decode(byteArray0, 111, 0);
      byteArray0[0] = (byte) (-29);
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte) (-29);
      byteArray2[1] = (byte) (-29);
      Base64.decodeBase64(byteArray2);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base64 base64_0 = new Base64(true);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 76, 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 76
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)55;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64.isArrayByteBase64(byteArray0);
      Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)0);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, 0, (int) (byte)67);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)113;
      byte byte0 = (byte) (-111);
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      boolean boolean0 = false;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)73, byteArray1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [cZHZSf__AA]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Base64 base64_0 = new Base64(3020);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)33;
      byteArray0[5] = (byte)109;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)0;
      Base64.encodeBase64(byteArray0, true);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64();
      try { 
        base64_1.decode((Object) base64_0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-647), byteArray1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [AAAA\r
         // ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Base64.isBase64((byte)126);
      Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte^] or a String");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)101;
      byte byte0 = (byte) (-76);
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-83);
      byteArray0[6] = (byte)123;
      byteArray0[7] = (byte)65;
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-2238), byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFDe\uFFFD\u0000\u0000\uFFFD{A]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)27;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      Base64 base64_0 = new Base64(59, byteArray0);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Base64 base64_0 = new Base64((-2859));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-92);
      byteArray0[0] = (byte)119;
      byteArray0[2] = (byte) (-1);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_1 = new Base64((byte) (-1));
      base64_1.decode(byteArray1, (int) (byte) (-1), (-5256));
      Base64 base64_2 = new Base64(true);
      base64_2.isUrlSafe();
      base64_0.readResults(byteArray1, 893, (byte)119);
      base64_1.readResults(byteArray0, 59, (-5256));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[0];
      base64_0.isUrlSafe();
      base64_0.decode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-85);
      base64_0.decode(byteArray0, 0, (int) (byte) (-1));
      base64_0.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Base64.isBase64((byte) (-6));
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-1150), byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [Cg==]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 76, 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 76
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      Base64.decodeBase64("n}");
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      base64_0.encode(byteArray1);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.discardWhitespace(byteArray1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64String(byteArray0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-62);
      Base64 base64_0 = new Base64((-862), byteArray0, false);
      base64_0.encode(byteArray0, (-862), (int) (byte) (-62));
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, 312, (byte) (-62));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Base64.isBase64((byte)88);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Base64 base64_0 = new Base64((-1966), byteArray0);
      base64_0.encodeToString(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte) (-88);
      Base64.encodeBase64(byteArray0, false, false);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      Base64.isBase64("l,1]-5lgI]R");
      Base64.isBase64("l,1]-5lgI]R");
      byteArray1[2] = (byte)31;
      base64_0.readResults(byteArray1, (byte)31, (-1));
      base64_0.hasData();
      base64_0.encodeToString(byteArray1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64(0, (byte[]) null, false);
      Base64.encodeBase64((byte[]) null, false);
      try { 
        base64_0.encode((Object) "-M*8HO");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Base64.encodeBase64URLSafe((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 92, 92);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Base64 base64_0 = new Base64((-3632), (byte[]) null);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.subtract(bigInteger1);
      BigInteger bigInteger2 = BigInteger.TEN;
      bigInteger0.subtract(bigInteger2);
      bigInteger0.intValue();
      bigInteger0.longValueExact();
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-83);
      Base64.decodeInteger(byteArray0);
      Base64.decodeBase64("");
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64(byteArray0, false);
      Base64 base64_0 = new Base64((-2370));
      base64_0.decode((Object) "");
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (-1), 2162);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64.encodeBase64URLSafeString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Base64.decodeBase64((String) null);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)20;
      Base64 base64_0 = new Base64((byte)20, byteArray0, false);
      base64_0.encode((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Base64 base64_0 = new Base64((-2531));
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Base64.decodeBase64("][}U <");
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Input aaraS too big, the output array would be bigger (");
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte)115;
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)69;
      Base64.decodeBase64("89ZlyCDvT!#MI8&+ _");
      byteArray1[1] = (byte) (-75);
      base64_0.decode((Object) "RaQAtXM");
      byteArray1[2] = (byte)115;
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.decode(byteArray1, 3539, 3397);
      Base64.decodeBase64("RaQAtXM");
      Base64.encodeBase64String(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = "]l`#\\ /;:Su9Kz@q*";
      Base64.isBase64("]l`# /;:Su9Kz@q*");
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)20;
      byteArray0[0] = (byte)20;
      Base64 base64_0 = new Base64(1182, byteArray0);
      Object object0 = base64_0.decode((Object) "]l`# /;:Su9Kz@q*");
      Object object1 = base64_0.decode(object0);
      base64_0.encode(object1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      byteArray0[0] = (byte) (-1);
      Base64.decodeBase64((String) null);
      base64_0.readResults(byteArray1, 2792, 14);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)116;
      Base64.encodeBase64(byteArray0, false);
      byteArray0[3] = (byte)118;
      base64_0.encode(byteArray2);
      byte[] byteArray3 = base64_0.encode(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray3);
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte^] or a String");
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Base64.decodeBase64("8B_Y?zlQ=");
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-60);
      byteArray0[0] = (byte) (-60);
      byte byte1 = (byte)52;
      byteArray0[1] = (byte)52;
      byte byte2 = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)61;
      Base64.decodeBase64(byteArray0);
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64.encodeBase64Chunked(byteArray0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64 base64_0 = new Base64((-2953));
      base64_0.readResults(byteArray0, (-2953), (-2953));
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Base64.encodeBase64URLSafeString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Base64.isBase64("]l`# /;:Su9Kz@q*");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)53;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-595), byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u001F5]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Input array too big, the output array would be bigger (");
      Base64.encodeBase64Chunked(byteArray0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(1717986918, mockRandom1);
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Base64.isBase64("=ua;evXC576OZj~b/");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-106);
      byteArray0[5] = (byte) (-7);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)66;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-4110), byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000C\u0000\u0000\uFFFD\uFFFD\u0000B]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte) (-39);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)30;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)105;
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("W-9z2QAeAGk", string0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(false);
      int int0 = base64_0.readResults(byteArray0, (-1), (byte)91);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte) (-77);
      byteArray0[6] = (byte)0;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(1, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD\u0000W\u0000\uFFFD\uFFFD\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int int0 = (-460);
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64((-460), (byte[]) null);
      base64_0.decode((byte[]) null);
      int int1 = 1452;
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, (-460), 1452);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(14, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64(byteArray0, true, false);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)82;
      byteArray1[3] = (byte) (-97);
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte) (-118);
      byteArray1[6] = (byte)1;
      byteArray1[7] = (byte)0;
      byteArray1[8] = (byte) (-1);
      String string0 = Base64.encodeBase64URLSafeString(byteArray1);
      assertEquals("_wBSnwCKAQD_", string0);
  }
}
