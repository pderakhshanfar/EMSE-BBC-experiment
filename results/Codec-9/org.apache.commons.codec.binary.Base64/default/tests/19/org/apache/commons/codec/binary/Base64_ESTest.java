/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 03:45:42 GMT 2020
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("org.apache.cmmonscdec.DecoderException");
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(true);
      Base64.decodeInteger(byteArray0);
      Base64.encodeBase64(byteArray1);
      base64_0.decode(byteArray1, 13, 13);
      base64_0.decode(byteArray1, 13, 72);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("org.apache.cmmonscodec.DecoderException");
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(false);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 13, 223);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 38
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      
      Base64 base64_0 = new Base64((-1), byteArray1);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)46;
      byteArray2[1] = (byte) (-36);
      Object object0 = base64_0.decode((Object) "");
      Object object1 = base64_0.encode(object0);
      base64_0.decode(object1);
      byteArray2[2] = (byte)1;
      byteArray2[3] = (byte)4;
      byteArray2[4] = (byte)61;
      byteArray2[5] = (byte)111;
      base64_0.decode(byteArray2, 4, (int) (byte)4);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      Base64 base64_0 = new Base64();
      base64_0.isUrlSafe();
      base64_0.encodeToString(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, false, 76);
      Base64.decodeInteger(byteArray3);
      Base64.encodeBase64(byteArray3, false, false);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte byte0 = (byte)60;
      byte byte1 = (byte) (-45);
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64((byte) (-45), (byte[]) null, true);
      base64_0.encode((byte[]) null, (int) (byte)60, (int) (byte) (-105));
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, 1444, (byte) (-105));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      Base64 base64_0 = new Base64();
      base64_0.isUrlSafe();
      base64_0.encodeToString(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, false, 76);
      Base64.decodeInteger(byteArray3);
      Base64 base64_1 = new Base64(61);
      Base64.isBase64((byte)125);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Base64 base64_0 = new Base64((byte)60);
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 79, 76);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      Base64 base64_0 = new Base64((-76));
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      Base64 base64_1 = new Base64();
      base64_1.isUrlSafe();
      Base64 base64_2 = new Base64();
      base64_1.encodeToString(byteArray0);
      Base64 base64_3 = new Base64();
      base64_3.decode(byteArray0, 1, 19);
      Base64.isBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Base64 base64_0 = new Base64(8);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)44;
      Base64.encodeBase64Chunked((byte[]) null);
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)34;
      Base64.decodeBase64(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.byteValueExact();
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_1 = new Base64((byte)26, byteArray1);
      Base64 base64_2 = new Base64((byte)40, byteArray0);
      base64_2.encode(byteArray1);
      Base64 base64_3 = new Base64((-3943), byteArray1, true);
      Base64.toIntegerBytes(bigInteger0);
      base64_3.decode("org.apache.commons.codec.binary.Base64");
      Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      Base64.encodeBase64(byteArray1);
      base64_0.avail();
      byte[] byteArray2 = new byte[0];
      Base64.encodeBase64(byteArray2);
      Base64.encodeBase64(byteArray2);
      byte[] byteArray3 = new byte[4];
      byteArray3[0] = (byte)1;
      byteArray3[1] = (byte)26;
      byteArray3[2] = (byte)1;
      byteArray3[3] = (byte)26;
      Base64.isBase64(byteArray3);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(13);
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      Base64 base64_0 = new Base64(19);
      base64_0.encode(byteArray0);
      base64_0.decode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      Base64 base64_0 = new Base64((-76));
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, true);
      Base64 base64_1 = new Base64();
      base64_1.isUrlSafe();
      Base64.encodeBase64String(byteArray0);
      base64_1.encodeToString(byteArray2);
      Base64.encodeBase64String(byteArray1);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      byte byte0 = (byte)96;
      byte byte1 = (byte)1;
      Base64 base64_2 = new Base64();
      base64_2.encodeToString(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, (int) (byte)1, 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 38
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Base64.isBase64((byte)60);
      Base64.isBase64("~OeN3Ars");
      byte[] byteArray0 = new byte[4];
      Base64 base64_0 = new Base64((byte)60);
      byte[] byteArray1 = base64_0.decode("~OeN3Ars");
      Base64.decodeBase64("~OeN3Ars");
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.isBase64("Parameter supplied to Base64 encode is not a byte[]");
      Base64.decodeBase64("=3DGFzm-cP]YMhB=s");
      base64_0.decode(byteArray0, (int) (byte)60, 1908874353);
      byte[] byteArray3 = new byte[2];
      byteArray3[0] = (byte)60;
      byteArray3[1] = (byte)60;
      base64_0.decode(byteArray3);
      base64_0.encode(byteArray1, (int) (byte)60, (int) (byte)60);
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64.encodeBase64(byteArray1, false, false, 1908874353);
      base64_0.avail();
      base64_0.avail();
      Base64.isBase64(byteArray1);
      base64_0.hasData();
      Base64.encodeBase64URLSafeString(byteArray2);
      base64_0.encode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      
      base64_0.hasData();
      Base64 base64_1 = new Base64(64);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte) (-21);
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)101;
      byteArray0[6] = (byte) (-45);
      byteArray0[7] = (byte) (-105);
      byteArray0[8] = (byte)99;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, 2938);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.hasData();
      Base64 base64_1 = new Base64(64);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)63;
      byte byte0 = (byte)4;
      byteArray0[1] = (byte)4;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 1, 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Base64 base64_0 = new Base64((byte)104);
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, 2650, 2650);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.decodeBase64(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      Base64 base64_0 = new Base64();
      base64_0.isUrlSafe();
      Base64.encodeBase64String(byteArray1);
      base64_0.encodeToString(byteArray2);
      Base64.encodeBase64String(byteArray2);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      base64_0.encodeToString(byteArray1);
      byte[] byteArray3 = new byte[6];
      byteArray3[0] = (byte)96;
      byteArray3[1] = (byte)96;
      byteArray3[2] = (byte)96;
      byteArray3[3] = (byte)1;
      byteArray3[4] = (byte)1;
      byteArray3[5] = (byte)96;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray3, (int) (byte)1, (int) (byte)96);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-1810));
      base64_0.decode(byteArray0, (-59), (-1810));
      Object object0 = base64_0.decode((Object) "gDXhXJbU");
      base64_0.decode(object0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64 base64_0 = new Base64((-76));
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      base64_0.encodeToString(byteArray0);
      base64_0.decode((Object) "");
      base64_0.readResults(byteArray0, 83, (-2512));
      base64_0.encode(byteArray0, (-76), (-76));
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray3 = base64_0.decode("");
      Base64.encodeBase64String(byteArray1);
      base64_0.encode(byteArray2);
      Base64 base64_1 = new Base64(76, byteArray3, false);
      base64_1.encode(byteArray1);
      base64_1.encode(byteArray3);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray3, 3201, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3201
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-18);
      Base64 base64_0 = new Base64((-723), byteArray0, false);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      base64_0.decode((Object) "JW0?a74X>pSHC2%J\"");
      Random.setNextRandom(49);
      base64_0.avail();
      Base64.discardWhitespace(byteArray1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Base64 base64_0 = new Base64(3458);
      byte[] byteArray0 = new byte[1];
      base64_0.encode(byteArray0, 3458, (-90));
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      int int0 = (-76);
      Base64 base64_0 = new Base64((-76));
      Base64.decodeInteger(byteArray0);
      base64_0.encodeToString(byteArray0);
      Base64.encodeBase64String(byteArray0);
      Base64 base64_1 = new Base64(59, byteArray0, true);
      base64_0.encode(byteArray0);
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray0, 64, 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 64
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)99, 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 99
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-1605), byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (-1605), (-1605));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, false, false);
      Base64 base64_0 = new Base64();
      base64_0.isUrlSafe();
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64String(byteArray0);
      base64_0.encode(byteArray2);
      base64_0.encodeToString(byteArray1);
      base64_0.avail();
      base64_0.encode(byteArray3, (-392), 0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64(byteArray1, true, false);
      Base64 base64_0 = new Base64();
      base64_0.isUrlSafe();
      base64_0.decode((String) null);
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray2 = Base64.decodeBase64("AAAAAAAAAAAA");
      base64_0.encodeToString(byteArray2);
      Base64.encodeBase64((byte[]) null, false, false, 64);
      base64_0.readResults(byteArray1, 2234, 47);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64((-76));
      base64_0.encodeToString(byteArray0);
      base64_0.decode((Object) "org.apache.commons.codec.DecoderException");
      base64_0.readResults(byteArray0, 83, (-2512));
      Base64.isBase64("org.apache.commons.codec.DecoderException");
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64.encodeBase64String(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeInteger(bigInteger0);
      Base64 base64_1 = new Base64((-1));
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      Base64 base64_0 = new Base64((-76));
      base64_0.encodeToString(byteArray0);
      base64_0.decode((Object) "org.apache.commons.codec.DecoderException");
      base64_0.readResults(byteArray0, 83, (-2512));
      Base64.isBase64("org.apache.commons.codec.DecoderException");
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte)32;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      Base64.encodeBase64String(byteArray1);
      Base64.decodeBase64(" T?w~\u00DC}dJB ");
      Base64.decodeBase64("= n");
      Base64 base64_1 = new Base64(4);
      Base64.toIntegerBytes(bigInteger0);
      Base64.discardWhitespace(byteArray1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      BigInteger bigInteger0 = BigInteger.probablePrime(2421, mockRandom0);
      bigInteger0.divide(bigInteger0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      mockRandom0.nextBytes(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      int int0 = 20;
      Base64 base64_0 = new Base64(int0);
      int int1 = 782;
      base64_0.encode(byteArray1, int1, int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64(0, byteArray0, true);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64(byteArray1, true);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false, true);
      Base64 base64_1 = new Base64();
      base64_1.isUrlSafe();
      Base64.encodeBase64String(byteArray1);
      Base64.encodeBase64String(byteArray1);
      base64_0.encode(byteArray1);
      base64_1.encodeToString(byteArray2);
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64(0, byteArray0, true);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.byteValueExact();
      bigInteger0.byteValueExact();
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      base64_0.encode(byteArray0);
      Base64.encodeBase64(byteArray2, true);
      BigInteger bigInteger1 = BigInteger.ZERO;
      Base64.isBase64("Input array too big, the output array would be bigger (");
      Base64.encodeInteger(bigInteger1);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, (-1), (int) (byte)1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Base64 base64_0 = new Base64(3458);
      byte[] byteArray0 = new byte[1];
      Base64.isBase64("encodeInteger called with null parameter");
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 3458, 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3458
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      Base64 base64_0 = new Base64(0, byteArray0, false);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.isBase64("");
      Base64.encodeBase64String(byteArray1);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray1);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, 0, 2274);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64((-76));
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.byteValueExact();
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_1 = new Base64(0, byteArray1);
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      Base64 base64_0 = new Base64(14, byteArray0, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.byteValueExact();
      bigInteger0.byteValueExact();
      Base64.toIntegerBytes(bigInteger0);
      Base64 base64_1 = new Base64((byte)1, byteArray0);
      base64_1.encode(byteArray0);
      Base64.decodeInteger(byteArray0);
      Base64.encodeBase64String(byteArray0);
      Base64.decodeBase64((String) null);
      Base64.decodeBase64("UTF-16");
      Base64 base64_2 = new Base64((byte)0);
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("", string0);
      
      Base64.isBase64((byte) (-1));
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte) (-1);
      byteArray2[1] = (byte)85;
      byteArray2[2] = (byte)67;
      base64_0.encodeToString(byteArray2);
      Base64.isBase64("/1VD\u0000\u0000");
      Base64.decodeBase64(byteArray2);
      Base64.encodeBase64(byteArray0, false, false, 1829);
      Base64.isBase64((byte) (-1));
      byte[] byteArray3 = new byte[5];
      byteArray3[0] = (byte)85;
      byteArray3[1] = (byte)67;
      byteArray3[2] = (byte)85;
      byteArray3[3] = (byte)67;
      byteArray3[4] = (byte)85;
      Base64.encodeBase64URLSafe(byteArray3);
      Base64.encodeBase64(byteArray1, false, false);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte)1;
      Base64 base64_0 = new Base64((-1728), byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ONE;
      byte[] byteArray1 = bigInteger0.toByteArray();
      base64_0.encode(byteArray1);
      bigInteger0.modInverse(bigInteger1);
      Base64.encodeInteger(bigInteger0);
      base64_0.avail();
      BigInteger bigInteger2 = BigInteger.ONE;
      int int0 = 2159;
      // Undeclared exception!
      try { 
        bigInteger2.flipBit((-3305));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Negative bit address
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      Base64.encodeBase64String(byteArray0);
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)53;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64Chunked(byteArray1);
      Base64.isBase64(byteArray0);
      Base64.encodeBase64(byteArray0, false, false, 76);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64(0, byteArray0, true);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.byteValueExact();
      bigInteger0.byteValueExact();
      Base64.toIntegerBytes(bigInteger0);
      base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.decode("org.apache.commons.codec.DecoderException");
      Base64.encodeBase64(byteArray2);
      Base64.isBase64("org.apache.commons.codec.DecoderException");
      byte[] byteArray3 = new byte[3];
      byteArray3[0] = (byte)1;
      byteArray3[1] = (byte)12;
      byteArray3[2] = (byte)0;
      Base64 base64_1 = new Base64();
      base64_1.decode(byteArray1, 1361, (-1030));
      Base64.encodeBase64(byteArray3, true, false);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      Base64 base64_0 = new Base64((-76));
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      base64_0.encodeToString(byteArray0);
      base64_0.decode((Object) "org.apache.commons.codec.DecoderException");
      base64_0.readResults(byteArray0, 83, (-2512));
      Base64.isBase64("org.apache.commons.codec.DecoderException");
      Base64.decodeInteger(byteArray0);
      Base64.encodeBase64String(byteArray1);
      Base64.decodeBase64("UTF-16");
      Base64.decodeBase64("BfJ}hv9$%\";w+7@");
      Base64 base64_1 = new Base64((-1));
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, false);
      Base64 base64_0 = new Base64();
      base64_0.isUrlSafe();
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      base64_0.encodeToString(byteArray3);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Base64 base64_0 = new Base64(29);
      Base64.decodeBase64((byte[]) null);
      base64_0.encodeToString((byte[]) null);
      Base64.encodeBase64((byte[]) null, false);
      Base64.encodeBase64((byte[]) null, false, false);
      base64_0.decode("");
      Base64.encodeBase64((byte[]) null, false);
      base64_0.isUrlSafe();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)91;
      base64_0.decode((byte[]) null);
      byteArray0[1] = (byte)43;
      Base64.encodeBase64((byte[]) null);
      Base64.encodeBase64((byte[]) null, false, false, 574);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)91;
      byteArray1[1] = (byte)91;
      base64_0.encodeToString(byteArray1);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte)98;
      base64_0.readResults(byteArray0, 40, (byte)105);
      Base64.isBase64((byte)60);
      byte[] byteArray1 = new byte[0];
      Base64.encodeBase64(byteArray1, false, true);
      Base64.encodeBase64Chunked(byteArray1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64((-1533));
      base64_0.decode((Object) "Parameter supplied to Base64 encode is not a byte[]");
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      Base64 base64_0 = new Base64((-76));
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      base64_0.encodeToString(byteArray0);
      base64_0.decode((Object) "org.apache.commons.codec.DecoderException");
      base64_0.readResults(byteArray0, 83, (-2512));
      base64_0.encode(byteArray0, (-76), (-76));
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      base64_0.decode("orgapachecommonscodecDecoderExceptio");
      byte[] byteArray3 = Base64.decodeBase64("orgapachecommonscodecDecoderExceptio");
      Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64(byteArray0, false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.isBase64("orgapachecommonscodecDecoderExceptio");
      Base64.encodeInteger(bigInteger0);
      base64_0.decode(byteArray2, (-76), (-76));
      base64_0.decode(byteArray0);
      base64_0.encode(byteArray1, (-1), 83);
      byte[] byteArray4 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray5 = Base64.encodeBase64(byteArray4, true, true, 76);
      base64_0.avail();
      base64_0.avail();
      Base64.isBase64(byteArray4);
      base64_0.hasData();
      Base64.encodeBase64URLSafeString(byteArray3);
      Base64.isBase64(byteArray5);
      base64_0.encode(byteArray5);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Base64 base64_0 = new Base64(94);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 94, 94);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 94
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      Base64 base64_1 = new Base64(false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)60;
      // Undeclared exception!
      try { 
        base64_1.decode(byteArray0, (int) (byte)53, 71);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 53
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      Base64 base64_0 = new Base64(14, byteArray0, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.byteValueExact();
      bigInteger0.byteValueExact();
      Base64.toIntegerBytes(bigInteger0);
      Base64 base64_1 = new Base64((byte)1, byteArray0);
      base64_1.encode(byteArray0);
      byte[] byteArray1 = base64_0.decode("org.apache.commons.codec.DecoderException");
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      Base64.isBase64("UTF-16LE");
      Base64.decodeBase64(byteArray1);
      Base64.encodeBase64Chunked(byteArray1);
      Base64.isBase64(byteArray2);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, false, true, (-73));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (38) than the specified maxium size of -73
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.isBase64(byteArray0);
      Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)14);
      base64_0.readResults(byteArray1, (-2233), (byte) (-122));
      Base64 base64_1 = new Base64((byte) (-122));
      byte[] byteArray2 = new byte[0];
      base64_1.encode(byteArray2);
      byte[] byteArray3 = Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      base64_0.decode("");
      byte[] byteArray4 = new byte[3];
      byteArray4[0] = (byte) (-121);
      byteArray4[1] = (byte)14;
      byteArray4[2] = (byte) (-122);
      Base64.encodeBase64(byteArray4, false, true);
      Base64.isArrayByteBase64(byteArray3);
      Object object0 = base64_1.decode((Object) "org.apache.commons.codec.DecoderException");
      base64_1.encode(object0);
      base64_0.decode(byteArray3);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[4];
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = new byte[5];
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte) (-37);
      byteArray2[1] = (byte) (-37);
      Base64.encodeBase64URLSafe(byteArray2);
      byteArray1[0] = (byte) (-37);
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte) (-37);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte) (-37);
      Base64.encodeBase64URLSafe(byteArray1);
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte)41;
      Base64.encodeBase64URLSafeString(byteArray0);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte) (-1);
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(0, byteArray2, false);
      Base64.encodeBase64URLSafeString(byteArray2);
      base64_0.avail();
      Base64.isBase64("org.apache.commons.codec.DecoderException");
      Base64.discardWhitespace(byteArray1);
      byte[] byteArray3 = new byte[5];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte) (-15);
      byteArray3[2] = (byte) (-1);
      byteArray3[3] = (byte) (-1);
      byteArray3[4] = (byte)0;
      Base64.encodeBase64Chunked(byteArray3);
      Base64.encodeBase64((byte[]) null);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.decodeInteger(byteArray0);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte) (-121);
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte) (-122);
      byteArray0[7] = (byte) (-58);
      byteArray0[8] = (byte)0;
      Base64.isBase64(byteArray0);
      Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64((-2553));
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-121);
      byteArray1[1] = (byte)0;
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte) (-58);
      byteArray2[1] = (byte) (-122);
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)89;
      byteArray2[4] = (byte) (-122);
      byteArray2[5] = (byte)0;
      byteArray2[6] = (byte)28;
      byteArray2[7] = (byte)0;
      byteArray2[8] = (byte)28;
      base64_0.readResults(byteArray2, 0, (byte) (-121));
      byteArray1[2] = (byte) (-58);
      byteArray1[3] = (byte)28;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)28;
      byteArray1[6] = (byte) (-58);
      base64_0.encode(byteArray1);
      base64_0.decode("org.apache.commons.codec.DecoderException");
      base64_0.decode("org.apache.commons.codec.DecoderException");
      Base64.encodeBase64(byteArray1, false, true);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Base64 base64_0 = new Base64(2249);
      byte[] byteArray0 = new byte[3];
      Base64.encodeBase64URLSafe(byteArray0);
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte)0;
      boolean boolean0 = true;
      Base64.encodeBase64(byteArray0, true);
      byteArray0[2] = (byte)0;
      Base64.decodeBase64("EV9");
      Base64.encodeBase64(byteArray0);
      String string0 = "org.apache.commons.codec.binary.Base64";
      base64_0.decode((Object) "org.apache.commons.codec.binary.Base64");
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64(0, byteArray0, true);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.byteValueExact();
      bigInteger0.byteValueExact();
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray2 = base64_0.encode(byteArray0);
      byte[] byteArray3 = base64_0.decode("org.apache.commons.codec.DecoderException");
      Base64.encodeBase64(byteArray3);
      Base64.isBase64("c\"Zl$ZhHI");
      byte[] byteArray4 = new byte[3];
      byteArray4[0] = (byte)38;
      byteArray4[1] = (byte)12;
      byteArray4[2] = (byte)0;
      Base64.decodeBase64(byteArray4);
      Base64.encodeBase64Chunked(byteArray4);
      Base64.isBase64(byteArray0);
      byte[] byteArray5 = Base64.encodeBase64(byteArray1, true, true, 0);
      assertSame(byteArray5, byteArray2);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.hasData();
      Base64 base64_1 = new Base64(64);
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64String((byte[]) null);
      int int0 = 0;
      Base64 base64_0 = new Base64(0);
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)22;
      base64_0.encodeToString(byteArray0);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-101);
      Base64.isBase64("FgAAAAAAAA==");
      base64_0.readResults(byteArray0, 0, (-1569));
      byteArray0[3] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.not();
      bigInteger0.toString();
      Base64.encodeInteger(bigInteger0);
      base64_0.readResults(byteArray0, (byte)1, (-3084));
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-64);
      base64_0.decode(byteArray0);
      Base64.isBase64((byte) (-87));
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("", string0);
      
      Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(true);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(1, byteArray2.length);
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray0);
      base64_0.avail();
      assertTrue(base64_0.isUrlSafe());
      
      Base64.encodeBase64(byteArray1);
      assertSame(byteArray0, byteArray3);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Base64 base64_0 = new Base64((-3580));
      byte[] byteArray0 = base64_0.decode("fqJz~*E'p\u0001s#");
      assertArrayEquals(new byte[] {(byte)126, (byte) (-94), (byte)115, (byte)18, (byte) (-101)}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-98);
      byteArray1[1] = (byte)75;
      byteArray1[2] = (byte) (-50);
      byteArray1[3] = (byte)122;
      byteArray1[4] = (byte)52;
      byteArray1[5] = (byte)94;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      assertEquals((byte)62, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Base64 base64_0 = new Base64(100);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-15);
      byteArray1[1] = (byte)79;
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      base64_0.encodeToString(byteArray0);
      Base64.encodeBase64(byteArray1, true, false, 100);
      Base64.encodeBase64(byteArray1, false, false);
      base64_0.decode("");
      Base64.encodeBase64((byte[]) null, false);
      Base64 base64_1 = new Base64(false);
      base64_1.isUrlSafe();
      byte[] byteArray3 = Base64.encodeBase64(byteArray2);
      Base64.encodeBase64String(byteArray0);
      Base64.decodeBase64(byteArray1);
      base64_1.hasData();
      Base64.encodeBase64(byteArray3);
      byte[] byteArray4 = new byte[1];
      byteArray4[0] = (byte)0;
      base64_0.encodeToString(byteArray4);
      base64_0.decode((Object) "AAAAAAAAAA==\u0000\u0000");
      try { 
        base64_1.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      int int0 = (-76);
      Base64 base64_0 = new Base64((-76));
      Base64.encodeBase64Chunked(byteArray0);
      base64_0.encodeToString(byteArray0);
      base64_0.decode((Object) "org.apache.commons.codec.DecoderException");
      int int1 = 83;
      base64_0.readResults(byteArray0, 83, (-2512));
      base64_0.encode(byteArray0, (-76), (-76));
      Base64.encodeBase64Chunked(byteArray0);
      base64_0.decode("orgapachecommonscodecDecoderExceptio");
      base64_0.decode("org.apache.commons.codec.DecoderException");
      Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64(byteArray0, false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigInteger0.testBit((-1));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Negative bit address
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base64 base64_0 = new Base64(46);
      base64_0.decode(byteArray0, (-3178), (-118));
      int int0 = base64_0.readResults(byteArray0, 1740, 1740);
      assertFalse(base64_0.isUrlSafe());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 1962);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)0, (byte)0}, byteArray1);
      
      base64_0.encode(byteArray0);
      base64_0.encode(byteArray0, 1962, 1962);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte)14;
      base64_0.encode(byteArray0, 110, (int) (byte) (-3));
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.isBase64("V49");
      byte[] byteArray2 = new byte[0];
      Base64.encodeBase64String(byteArray2);
      Base64 base64_0 = new Base64(1, byteArray1, true);
      base64_0.encode(byteArray1);
      byte[] byteArray3 = Base64.CHUNK_SEPARATOR;
      Base64 base64_1 = new Base64(84, byteArray0);
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray1, 112, (-894));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      Base64.isBase64((byte)60);
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true);
      assertSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Base64 base64_0 = new Base64(0, (byte[]) null);
      Base64.encodeBase64((byte[]) null);
      byte[] byteArray0 = Base64.decodeBase64((byte[]) null);
      assertNull(byteArray0);
      
      base64_0.readResults((byte[]) null, 0, 0);
      Base64.isBase64((byte)0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      String string0 = Base64.encodeBase64URLSafeString(byteArray1);
      assertEquals("AAAAAA", string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Base64 base64_0 = new Base64((byte)60);
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = 2421;
      MockRandom mockRandom0 = new MockRandom(1L);
      BigInteger bigInteger0 = BigInteger.probablePrime(2421, mockRandom0);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.divide(bigInteger1);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      mockRandom0.nextBytes(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(boolean0);
      base64_0.decode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Base64 base64_0 = new Base64(6);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte) (-42);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)109;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-126), (byte) (-50), (byte) (-42), (byte)1, (byte)109}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(6, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      Base64 base64_0 = new Base64(0, byteArray0, false);
      Base64.decodeInteger(byteArray0);
      Base64.decodeBase64("");
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte) (-22));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Base64 base64_0 = new Base64((-473));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)20;
      Base64.encodeBase64(byteArray0, true);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Object object0 = new Object();
      Base64 base64_0 = new Base64(137, (byte[]) null, true);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = Base64.isBase64((byte)124);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
      
      Base64 base64_0 = new Base64((-99), byteArray0, false);
      base64_0.readResults(byteArray0, (-99), (-99));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = null;
      base64_0.encode((byte[]) null);
      Base64.encodeBase64((byte[]) null);
      int int0 = 39;
      base64_0.readResults((byte[]) null, 484, 39);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.getLowestSetBit();
      bigInteger0.longValue();
      base64_0.decode("WTB");
      Base64.toIntegerBytes(bigInteger0);
      base64_0.encodeToString((byte[]) null);
      base64_0.hasData();
      BigInteger bigInteger1 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigInteger1.testBit((-155));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Negative bit address
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)0;
      base64_0.decode((Object) "Mm{LZ&f+;Kh+");
      byteArray0[2] = (byte)86;
      Base64.encodeBase64Chunked(byteArray0);
      byteArray0[3] = (byte) (-106);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64(byteArray1, true, true);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Base64 base64_0 = new Base64((byte)60);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)60;
      base64_0.encode(byteArray0, (int) (byte)60, (-90));
      base64_0.hasData();
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, (-90), (byte)60);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      Base64.isBase64("org.apache.ommons.codec.EncoderException");
      Base64 base64_0 = new Base64();
      Base64.isBase64("");
      byte[] byteArray3 = Base64.decodeBase64(byteArray2);
      byte[] byteArray4 = Base64.encodeBase64(byteArray1, false, true, 64);
      Base64 base64_1 = new Base64(76, byteArray4);
      Object object0 = base64_1.decode((Object) "");
      base64_0.decode(object0);
      byte[] byteArray5 = new byte[1];
      Base64 base64_2 = new Base64(76, byteArray5, false);
      Base64.encodeBase64(byteArray4, false, false, 40);
      base64_0.encode(byteArray5);
      base64_2.encode(byteArray5);
      base64_0.encode(byteArray3, 76, 64);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64(byteArray0, true, false);
      Base64 base64_0 = new Base64();
      Object object0 = base64_0.decode((Object) "-m)yW#GTgW5-");
      base64_0.encode(object0);
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64.encodeBase64URLSafeString((byte[]) null);
      byte[] byteArray0 = new byte[3];
      Base64.discardWhitespace(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      base64_0.encode((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64();
      try { 
        base64_0.encode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Base64 base64_0 = new Base64(29);
      Base64.decodeBase64((byte[]) null);
      base64_0.encodeToString((byte[]) null);
      Base64.encodeBase64((byte[]) null, false, false, 76);
      Base64.encodeBase64((byte[]) null, false, false);
      byte[] byteArray0 = base64_0.decode("");
      Base64.encodeBase64((byte[]) null, false);
      base64_0.isUrlSafe();
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)91;
      byteArray1[1] = (byte)0;
      Base64.encodeBase64((byte[]) null);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-84);
      Base64.encodeBase64String(byteArray0);
      byteArray1[4] = (byte)90;
      byteArray1[5] = (byte)111;
      Base64.decodeBase64(byteArray1);
      base64_0.hasData();
      Base64.encodeBase64(byteArray0);
      base64_0.encodeToString((byte[]) null);
      Object object0 = base64_0.decode((Object) "");
      base64_0.encode(object0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64(byteArray1, true, true);
      Base64 base64_0 = new Base64(true);
      base64_0.isUrlSafe();
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(1, byteArray0, true);
      base64_0.isUrlSafe();
      Base64.encodeBase64(byteArray0);
      String string0 = "";
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.isBase64(byteArray0);
      Base64.isBase64(byteArray0);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, (-2064));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of -2064
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.isBase64((byte)67);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.encodeToString(byteArray0);
      Base64.isBase64("/w==\u0000\u0000");
      Base64.decodeBase64(byteArray0);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, false, false, (int) (byte) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)61);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64(byteArray0);
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      boolean boolean0 = Base64.isBase64("org.apache.commons.codec.DecoderException");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.decodeBase64("qbU");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64(true);
      base64_0.encodeToString(byteArray0);
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(1);
      base64_0.decode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64 base64_0 = new Base64(70, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertEquals(13, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64.encodeBase64(byteArray0, true, true);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.hasData();
      Base64 base64_1 = new Base64(64);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)34;
      Base64.encodeBase64String(byteArray0);
      Base64 base64_2 = new Base64(6, byteArray0, false);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_2.encode(byteArray1);
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray2, (-191), 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -191
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64.encodeBase64(byteArray0, false, false);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[1];
      Base64.encodeBase64URLSafeString(byteArray0);
      byteArray0[0] = (byte)0;
      Base64.isBase64("~OeN3Ars");
      Base64.encodeBase64String(byteArray0);
      base64_0.decode("ZYyrQ7\u0002y6*OgMv");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("L(!03p5");
      Base64 base64_0 = new Base64((-701));
      base64_0.encodeToString(byteArray0);
      base64_0.isUrlSafe();
      byte[] byteArray1 = base64_0.decode("L03p");
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      Base64.decodeInteger(byteArray0);
      base64_0.decode(byteArray1, 578, 942);
      Base64.encodeBase64(byteArray2, false, false);
      Base64.isArrayByteBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Base64.encodeBase64((byte[]) null, false);
      Base64 base64_0 = new Base64(90, (byte[]) null, false);
      base64_0.avail();
      base64_0.avail();
      Base64.encodeBase64((byte[]) null, true, false, (-1154));
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64String(byteArray1);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("org.apache.cmmonscodec.DecoderException");
      Base64.encodeBase64Chunked(byteArray0);
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-60);
      Base64.encodeBase64URLSafe(byteArray0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(2986, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [AQ==]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte) (-51);
      Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64((-2215), byteArray0, false);
      base64_0.decode(byteArray0, (int) (byte)28, 0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)80);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)118;
      byteArray0[1] = (byte)118;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.isArrayByteBase64(byteArray1);
      MockRandom mockRandom0 = new MockRandom((byte)0);
      mockRandom0.longs((long) (byte)0);
      mockRandom0.nextDouble();
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((-1087), (byte)0, mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // bitLength < 2
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte) (-1);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64();
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.add(bigInteger0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger1);
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      base64_0.encode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)86;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)86, byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [V\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Base64 base64_0 = new Base64(1);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte) (-115);
      byte byte0 = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)93;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(3204, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [u\uFFFD\u0002]]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }
}
