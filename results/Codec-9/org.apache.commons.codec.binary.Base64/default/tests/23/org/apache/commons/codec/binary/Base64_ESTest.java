/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 21:18:16 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(7935);
      BigInteger bigInteger0 = new BigInteger(7935, mockRandom0);
      mockRandom0.ints();
      int int0 = Base64.PEM_CHUNK_SIZE;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(64);
      base64_0.decode(byteArray0, 5, 64);
      mockRandom0.nextDouble();
      base64_0.encode(byteArray0, (-1091), (-574));
      bigInteger0.signum();
      base64_0.encode(byteArray0, 61, 7935);
      base64_0.encodeToString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      BigInteger bigInteger0 = new BigInteger(7928, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      int int0 = 4;
      Base64 base64_0 = new Base64(4);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      // Undeclared exception!
      Base64.encodeBase64Chunked(byteArray2);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextInt();
      BigInteger bigInteger0 = new BigInteger(7940, mockRandom0);
      mockRandom0.nextGaussian();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      bigInteger0.toString();
      Base64 base64_0 = new Base64(4);
      mockRandom0.longs((long) 76, (long) 7940);
      base64_0.encode(byteArray0, 4, 1310);
      base64_0.encode(byteArray0, 0, (-3562));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextInt();
      BigInteger bigInteger0 = new BigInteger(7940, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      bigInteger0.toString();
      Base64 base64_0 = new Base64(71);
      mockRandom0.longs((-519L), (-21L));
      Base64 base64_1 = new Base64(7940);
      base64_1.encode(byteArray0, 95, 211);
      bigInteger0.signum();
      base64_1.encode(byteArray0, (-851), (-851));
      base64_1.avail();
      Base64 base64_2 = new Base64();
      Object object0 = new Object();
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_2.encode(byteArray0);
      base64_2.decode(byteArray1);
      Base64.isBase64((byte) (-92));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextInt();
      BigInteger bigInteger0 = new BigInteger(7940, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      bigInteger0.toString();
      Base64 base64_0 = new Base64(71);
      mockRandom0.longs((-530L), (-1L));
      Base64 base64_1 = new Base64(7940);
      base64_1.encode(byteArray0, 72, 228);
      bigInteger0.signum();
      base64_1.encode(byteArray0, (-851), (-851));
      base64_1.avail();
      Base64 base64_2 = new Base64();
      Object object0 = new Object();
      try { 
        base64_2.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(7935);
      BigInteger bigInteger0 = new BigInteger(7935, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(9);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      base64_0.decode(byteArray2);
      base64_0.encode(byteArray2);
      // Undeclared exception!
      Base64.encodeBase64(byteArray2, true, true, 7935);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(7935);
      BigInteger bigInteger0 = new BigInteger(7935, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(9);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      base64_0.decode(byteArray2);
      base64_0.encode(byteArray2);
      // Undeclared exception!
      base64_0.encode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(7928);
      BigInteger bigInteger0 = new BigInteger(7928, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(4);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64(byteArray1, false);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      base64_0.decode(byteArray2);
      Base64.discardWhitespace(byteArray0);
      // Undeclared exception!
      base64_0.decode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64();
      Base64.isArrayByteBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(7928);
      BigInteger bigInteger0 = new BigInteger(7928, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(4);
      base64_0.encodeToString(byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      base64_0.decode(byteArray2);
      Base64 base64_1 = new Base64(162);
      // Undeclared exception!
      Base64.encodeBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)127;
      Base64.isBase64(byteArray0);
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(2, byteArray0);
      Base64.isBase64("encodeInteger called with null parameter");
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 0, 116);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          MockRandom mockRandom0 = new MockRandom(7928);
          BigInteger bigInteger0 = new BigInteger(7928, mockRandom0);
          byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
          Base64 base64_0 = new Base64(4);
          base64_0.encodeToString(byteArray0);
          byte[] byteArray1 = base64_0.encode(byteArray0);
          byte[] byteArray2 = base64_0.encode(byteArray1);
          base64_0.decode(byteArray2);
          // Undeclared exception!
          base64_0.encodeToString(byteArray2);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(7928, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(false);
      base64_0.decode(byteArray0, 64, 1240);
      base64_0.avail();
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      BigInteger bigInteger0 = new BigInteger(7928, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(4);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      bigInteger0.negate();
      base64_0.decode(byteArray2);
      Base64.isArrayByteBase64(byteArray0);
      // Undeclared exception!
      Base64.decodeInteger(byteArray2);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1240);
      Base64.isBase64((byte)29);
      Base64.isBase64((byte)61);
      byte[] byteArray0 = new byte[0];
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1240);
      BigInteger bigInteger0 = new BigInteger(7928, mockRandom0);
      Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = new BigInteger(7928, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64((-311));
      String string0 = base64_0.encodeToString(byteArray0);
      Base64 base64_1 = new Base64(true);
      byte[] byteArray1 = base64_1.decode(string0);
      Base64.decodeInteger(byteArray1);
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1240);
      BigInteger bigInteger0 = new BigInteger(7928, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(false);
      base64_0.decode(byteArray0, 64, 1240);
      base64_0.readResults(byteArray0, 0, 0);
      BigInteger bigInteger1 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1240);
      mockRandom0.doubles((-1480.9719153), (-1345.8601488660083));
      mockRandom0.longs();
      BigInteger bigInteger0 = new BigInteger(1240, mockRandom0);
      mockRandom0.nextGaussian();
      BigInteger bigInteger1 = bigInteger0.shiftRight(876);
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64.encodeBase64(byteArray0, false, false, 876);
      Base64 base64_0 = new Base64((-1));
      base64_0.decode(byteArray0, 0, 3780);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1240);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = BigInteger.TEN;
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.encodeBase64(byteArray0, true, true, 6);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(6, byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = base64_0.decode("UTF-16LE");
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1240);
      BigInteger bigInteger0 = new BigInteger(1240, mockRandom0);
      mockRandom0.nextInt();
      mockRandom0.nextGaussian();
      BigInteger bigInteger1 = bigInteger0.shiftRight(876);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      bigInteger0.min(bigInteger1);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64(byteArray1, false, true);
      base64_0.decode(byteArray0, 836, (-753));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1240);
      BigInteger bigInteger0 = new BigInteger(1240, mockRandom0);
      mockRandom0.nextGaussian();
      BigInteger bigInteger1 = bigInteger0.shiftRight(876);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger2 = bigInteger0.min(bigInteger1);
      Base64.encodeInteger(bigInteger2);
      Base64 base64_0 = new Base64(false);
      base64_0.decode(byteArray0, 32, 1240);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0, 1, 1);
      base64_0.decode(byteArray0, (-203), (-203));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(1396, mockRandom0);
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray0, (-121), (-121));
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, (-121), (-121));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-2298L));
      BigInteger bigInteger0 = new BigInteger(1240, mockRandom0);
      int int0 = 876;
      mockRandom0.nextGaussian();
      bigInteger0.abs();
      BigInteger bigInteger1 = bigInteger0.shiftRight(876);
      BigInteger bigInteger2 = bigInteger1.flipBit(1240);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      bigInteger0.min(bigInteger1);
      Base64.discardWhitespace(byteArray0);
      bigInteger0.multiply(bigInteger2);
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(876);
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      
      Base64 base64_1 = new Base64(true);
      // Undeclared exception!
      try { 
        base64_1.decode((byte[]) null, 76, 8164);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      Base64 base64_0 = new Base64(6, byteArray0);
      base64_0.encodeToString(byteArray0);
      base64_0.decode(byteArray0, 6, 6);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.ZERO;
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0, 6, 6);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      base64_0.encode(byteArray0, 1792, (-886));
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Base64.isBase64("Parameter supplied o Bas64 encode is not a byte[]");
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64((byte[]) null, false, false);
      try { 
        base64_0.encode((Object) "Parameter supplied o Bas64 encode is not a byte[]");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(true);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger0);
      base64_0.decode("7k{c [gY;ahc");
      bigInteger0.nextProbablePrime();
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = null;
      Base64.encodeBase64String((byte[]) null);
      Base64.encodeBase64((byte[]) null);
      Base64.encodeBase64Chunked(byteArray1);
      base64_0.decode((byte[]) null, (-3231), (-2530));
      Random.setNextRandom(8152);
      base64_0.avail();
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(7935);
      BigInteger bigInteger0 = new BigInteger(7935, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64Chunked(byteArray0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(26, byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)29;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64(true);
      base64_0.decode(byteArray0, (-203), (-203));
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.decodeBase64((String) null);
      base64_0.encode(byteArray1, 4343, (-1668));
      Base64.decodeBase64((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Base64 base64_0 = new Base64((-9));
      byte[] byteArray0 = new byte[0];
      base64_0.encode(byteArray0);
      base64_0.encodeToString((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isArrayByteBase64(byteArray1);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray3 = new byte[9];
      byteArray3[1] = (byte)57;
      byteArray3[2] = (byte)43;
      byteArray3[3] = (byte)74;
      byteArray3[4] = (byte)10;
      byteArray3[5] = (byte) (-60);
      byteArray3[6] = (byte)88;
      byteArray3[7] = (byte)32;
      byteArray3[8] = (byte) (-61);
      Base64.encodeBase64Chunked(byteArray3);
      Base64.decodeBase64(byteArray2);
      byte[] byteArray4 = new byte[8];
      byteArray4[0] = (byte)32;
      byteArray4[1] = (byte)43;
      byteArray4[2] = (byte)32;
      byteArray4[3] = (byte) (-60);
      byteArray4[4] = (byte)0;
      byteArray4[5] = (byte)74;
      byteArray4[6] = (byte) (-104);
      byteArray4[7] = (byte)84;
      Base64.discardWhitespace(byteArray4);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      Base64 base64_0 = new Base64(6, byteArray0);
      base64_0.decode(byteArray0, 6, 6);
      base64_0.hasData();
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)0;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)0, 20);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-72);
      byteArray0[2] = (byte) (-72);
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)1, 8192);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.encodeToString((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte) (-121);
      Base64.decodeInteger(byteArray0);
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(1414);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)122;
      byteArray1[1] = (byte)122;
      byteArray1[2] = (byte) (-121);
      byteArray1[3] = (byte)50;
      byteArray1[4] = (byte)50;
      byteArray1[5] = (byte) (-121);
      byteArray1[6] = (byte) (-65);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, true, true, (int) (byte) (-121));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of -121
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = new byte[0];
      Base64.encodeBase64Chunked(byteArray2);
      byte[] byteArray3 = new byte[0];
      Base64.discardWhitespace(byteArray1);
      byte[] byteArray4 = new byte[4];
      byteArray4[0] = (byte) (-1);
      byteArray4[1] = (byte)26;
      byteArray4[2] = (byte)76;
      byteArray4[3] = (byte)1;
      Base64.decodeInteger(byteArray4);
      Base64.isBase64((byte)123);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isArrayByteBase64(byteArray1);
      Base64.isBase64("");
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)81;
      byteArray2[1] = (byte)48;
      byteArray2[2] = (byte)33;
      byteArray2[3] = (byte) (-62);
      byteArray2[4] = (byte)27;
      byteArray2[5] = (byte)9;
      byteArray2[6] = (byte)52;
      Base64.discardWhitespace(byteArray2);
      Base64.encodeBase64Chunked(byteArray1);
      Base64.decodeBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextInt();
      BigInteger bigInteger0 = new BigInteger(7944, mockRandom0);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64.discardWhitespace(byteArray0);
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0, 8188, 0);
      Base64 base64_1 = new Base64(true);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Base64 base64_0 = new Base64(3919);
      Base64 base64_1 = new Base64(64);
      Object object0 = new Object();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)1;
      Base64.encodeBase64String(byteArray0);
      Base64 base64_2 = new Base64();
      Base64.decodeBase64((String) null);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)1, 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64(byteArray2, false, false, 454);
      Base64 base64_0 = new Base64(47, byteArray2);
      base64_0.encodeToString(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.decode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Base64.isBase64((byte)88);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(72, byteArray0, true);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.isBase64("");
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.subtract(bigInteger0);
      bigInteger0.mod(bigInteger1);
      Base64.encodeBase64String(byteArray0);
      bigInteger0.longValue();
      base64_0.decode(byteArray0, 26, (-109));
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      Base64.decodeInteger(byteArray0);
      base64_0.encode(byteArray0, (-4734), 980);
      byte[] byteArray3 = Base64.decodeBase64(byteArray2);
      base64_0.avail();
      base64_0.hasData();
      byte[] byteArray4 = Base64.encodeBase64(byteArray0, false, true, 72);
      base64_0.encode(byteArray3, (-1), 26);
      Base64.isBase64(byteArray2);
      base64_0.encodeToString(byteArray4);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, true, false, (-69));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of -69
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Base64 base64_0 = new Base64(2690, (byte[]) null, true);
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, 2690, 2690);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-18);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64.isBase64((byte) (-31));
      Base64.decodeInteger(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false, 72);
      Base64 base64_0 = new Base64(true);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray2, (int) (byte)38, 119);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 38
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64("");
      Base64.discardWhitespace(byteArray1);
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      Base64.isBase64((byte)2);
      Base64.encodeBase64URLSafeString(byteArray3);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Base64.isBase64((byte) (-1));
      byte[] byteArray0 = null;
      Base64.encodeBase64Chunked((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(false);
      base64_0.decode(byteArray0, (-203), (-203));
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 61);
      Base64.decodeBase64("<|6Z0*J,oYS6=njwI");
      Base64.isBase64("encodeInteger called with null parameter");
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      byte[] byteArray3 = Base64.decodeBase64(byteArray2);
      Base64.encodeBase64Chunked(byteArray1);
      Base64.isBase64((byte)74);
      Base64.discardWhitespace(byteArray3);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("AAAAAAA=", string0);
      
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0, (int) (byte) (-1), (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64(byteArray0, false, false, 49);
      Base64.decodeBase64("|g");
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)42;
      byteArray1[1] = (byte)68;
      byteArray1[2] = (byte)44;
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      byte[] byteArray3 = Base64.decodeBase64(byteArray2);
      Base64.encodeBase64Chunked(byteArray3);
      Base64.isBase64((byte)125);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Base64.isBase64("");
      Base64 base64_0 = new Base64(false);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      Object object0 = new Object();
      Base64.encodeBase64String(byteArray0);
      Base64 base64_1 = new Base64();
      base64_0.encode(byteArray1, 8, (-1155));
      Random.setNextRandom(0);
      Base64.encodeBase64URLSafeString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64(9);
      base64_0.encode(byteArray0, 9, (-2076));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Base64 base64_0 = new Base64(3907);
      byte[] byteArray0 = new byte[0];
      Base64 base64_1 = new Base64();
      Base64.isBase64(byteArray0);
      Base64.encodeBase64(byteArray0, true, true, 48);
      Object object0 = base64_0.decode((Object) "e-}V{ak:-");
      base64_0.encode(object0);
      base64_1.hasData();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte byte0 = (byte)65;
      Base64.isBase64((byte)65);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64((byte[]) null, true);
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64((-253));
      int int0 = Base64.PEM_CHUNK_SIZE;
      Base64.decodeBase64((String) null);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (-468), 1982292598);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -468
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      Base64.isBase64("Parameter supplied to Base64 encode is not a byte[]");
      Base64 base64_0 = new Base64(false);
      Base64.toIntegerBytes(bigInteger0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      Base64.encodeInteger(bigInteger1);
      Object object0 = new Object();
      Base64.encodeBase64String((byte[]) null);
      Base64 base64_1 = new Base64();
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray0, 64, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 64
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)10;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte) (-114);
      base64_0.encode(byteArray1);
      byteArray0[4] = (byte) (-120);
      byteArray0[5] = (byte) (-119);
      byteArray0[6] = (byte) (-113);
      byteArray0[7] = (byte)0;
      base64_0.readResults(byteArray1, (byte) (-114), (byte)103);
      base64_0.decode(byteArray0, 67, 114);
      Base64.isBase64(byteArray0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      base64_0.decode(byteArray0, (int) (byte)0, (-1749));
      Random.setNextRandom(36);
      Base64.toIntegerBytes(bigInteger0);
      base64_0.encodeToString(byteArray1);
      base64_0.encode(byteArray1, 1886, 988);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)9;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isArrayByteBase64(byteArray0);
      Base64.isArrayByteBase64(byteArray1);
      Base64.encodeBase64(byteArray0, false, false);
      Random.setNextRandom((-1232));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)1;
      Base64.decodeInteger(byteArray0);
      Base64.decodeBase64("u9]'=*w :bjg[");
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte)86;
      byteArray1[2] = (byte)1;
      byteArray1[3] = (byte)86;
      byteArray1[4] = (byte) (-9);
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)86;
      byteArray2[1] = (byte) (-73);
      byteArray2[2] = (byte)1;
      byteArray2[3] = (byte)86;
      Base64.decodeInteger(byteArray2);
      byte[] byteArray3 = new byte[2];
      byteArray3[0] = (byte) (-114);
      byteArray3[1] = (byte) (-9);
      Base64 base64_0 = new Base64((byte)1, byteArray3, false);
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      byteArray0[1] = (byte)0;
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray0);
      byteArray0[2] = (byte)41;
      bigInteger1.gcd(bigInteger0);
      byteArray0[3] = (byte)104;
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger1);
      base64_0.encode(byteArray0);
      base64_0.hasData();
      Base64.encodeBase64(byteArray1, false, false, 1);
      Base64.decodeBase64("");
      Base64.isBase64("RA[{;7-EKy}gKbl6qU");
      Base64.discardWhitespace(byteArray3);
      byte[] byteArray4 = new byte[1];
      byteArray4[0] = (byte)1;
      Base64.decodeBase64(byteArray4);
      Base64.encodeBase64Chunked(byteArray2);
      base64_0.decode(byteArray4);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Base64 base64_0 = new Base64((-2586));
      Object object0 = base64_0.decode((Object) "");
      base64_0.decode(object0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.isArrayByteBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      Base64 base64_0 = new Base64((-1498));
      base64_0.encodeToString(byteArray0);
      base64_0.encode(byteArray0, (-1498), (-1498));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte) (-76);
      byteArray0[3] = (byte)9;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      Base64 base64_0 = new Base64(523, byteArray0);
      base64_0.decode("org.apache.commons.codec.EncoderException");
      Base64.encodeBase64(byteArray0, true, false, 76);
      Base64.isBase64((byte) (-76));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 70, 70);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 70
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-9);
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)9, 2892);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(1, byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [Cg==]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray1 = new byte[0];
      byte[] byteArray2 = new byte[21];
      Base64.encodeBase64Chunked(byteArray1);
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)17;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)1;
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false, true, 36);
      Base64.decodeBase64("");
      Base64.isBase64("");
      Base64.discardWhitespace(byteArray1);
      Base64.decodeBase64(byteArray3);
      Base64.encodeBase64Chunked(byteArray2);
      Base64.isBase64((byte)0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Base64.isBase64((byte)123);
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-86);
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(0);
      Base64.isBase64("");
      base64_0.readResults(byteArray0, (byte)91, (-1));
      Base64.decodeBase64("");
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte)113;
      byteArray0[5] = (byte)34;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64URLSafe(byteArray1);
      Base64.isBase64("");
      base64_0.encodeToString(byteArray1);
      base64_0.encodeToString(byteArray0);
      Base64.isBase64((byte)0);
      base64_0.decode(byteArray0, (int) (byte)34, (-1165));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)0;
      base64_0.decode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)92;
      Base64.encodeBase64URLSafe(byteArray0);
      base64_0.decode((String) null);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Base64.isBase64((byte)65);
      Base64 base64_0 = new Base64();
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = false;
      int int0 = 19;
      Base64 base64_0 = new Base64(19, byteArray0, false);
      String string0 = "";
      Base64.encodeBase64String(byteArray0);
      Object object0 = base64_0.decode((Object) "AAAAAAA=");
      base64_0.decode(object0);
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Object object0 = base64_0.decode((Object) "");
      base64_0.encode(object0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)42;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      base64_0.isUrlSafe();
      Base64.encodeBase64URLSafe(byteArray1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64.decodeBase64("");
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = 54;
      int int1 = 0;
      MockRandom mockRandom0 = new MockRandom((-3670L));
      BigInteger bigInteger0 = new BigInteger(54, 0, mockRandom0);
      Base64.encodeInteger(bigInteger0);
      mockRandom0.ints();
      Base64.decodeBase64("");
      bigInteger0.bitLength();
      Base64 base64_0 = new Base64();
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(false);
      base64_0.decode(byteArray0, (-198), (-198));
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)0;
      Base64.decodeInteger(byteArray1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Base64 base64_0 = new Base64((byte)9, (byte[]) null);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      Base64 base64_0 = new Base64((-1498));
      base64_0.encode(byteArray0, (-1498), (-1498));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)66;
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0, 0, (int) (byte) (-1));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)44;
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)112;
      byteArray1[1] = (byte) (-87);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)76;
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)75;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)71;
      byteArray2[3] = (byte) (-1);
      byteArray2[4] = (byte)69;
      byteArray2[5] = (byte)65;
      byteArray2[6] = (byte)10;
      Base64.encodeBase64Chunked(byteArray2);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.decode((Object) "d]");
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.decode("C8y&k");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, (-901));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of -901
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Base64.isBase64((byte) (-1));
      Base64.isBase64((byte) (-1));
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-15);
      Base64 base64_0 = new Base64(961, byteArray0);
      Base64.encodeBase64String(byteArray0);
      base64_0.hasData();
      base64_0.hasData();
      Base64.encodeBase64(byteArray0, true, false);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.decode((Object) "E)WInwOHKR1t%.5j68");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64();
      base64_0.encodeToString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = "Ck>5[Na:-ZL";
      byte[] byteArray0 = Base64.decodeBase64("Ck>5[Na:-ZL");
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(1236, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [
         // NMk\uFFFDK]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 64, 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 64
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = 3919;
      Base64 base64_0 = new Base64(3919);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 11, 60);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)1;
      base64_0.readResults(byteArray0, (-1222), (byte)0);
      base64_0.hasData();
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)0;
      Base64.decodeBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true, (int) (byte)54);
      Base64.encodeBase64String(byteArray1);
      Base64.decodeBase64("endET05nZ0E=");
      Base64 base64_0 = new Base64();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.decode("C8&k");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = base64_0.decode("qvVAb]kuYzP0");
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte) (-69);
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte)2;
      Base64.encodeBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Base64.encodeBase64((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Base64.isBase64((byte) (-87));
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte) (-53);
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte) (-78);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      Base64.isBase64(byteArray0);
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)29;
      Base64.encodeBase64URLSafeString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64.isBase64("ym:IY ,o)s$-? ");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Base64.encodeBase64URLSafe((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      Base64.decodeBase64(byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      byteArray0[1] = (byte)0;
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray0);
      byteArray0[2] = (byte)41;
      bigInteger1.gcd(bigInteger0);
      byteArray0[3] = (byte)104;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.toIntegerBytes(bigInteger1);
      byte[] byteArray2 = base64_0.encode(byteArray0);
      base64_0.hasData();
      Base64.encodeBase64(byteArray2, true);
      Base64.isBase64("org.apache.commons.codec.DecoderException");
      Base64.isBase64((byte)0);
      base64_0.hasData();
      byte[] byteArray3 = new byte[3];
      byteArray3[0] = (byte)72;
      byteArray3[1] = (byte)41;
      byteArray3[2] = (byte)104;
      Base64.decodeBase64(byteArray3);
      byte[] byteArray4 = Base64.encodeBase64(byteArray1, false);
      Base64.isBase64("org.apache.commons.codec.DecoderException");
      base64_0.encode(byteArray2);
      Base64.encodeBase64URLSafe(byteArray4);
      Base64.encodeInteger(bigInteger1);
      Base64.encodeBase64String(byteArray4);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Base64 base64_0 = new Base64(1);
      byte[] byteArray0 = new byte[3];
      Base64.encodeBase64(byteArray0, true, true);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      Base64.encodeBase64Chunked(byteArray0);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      Base64.encodeBase64URLSafe((byte[]) null);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)94;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      base64_0.isUrlSafe();
      Base64.encodeBase64URLSafe(byteArray1);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.isBase64("Parameter supplied to Base64 encode is not a byte[]");
      Base64 base64_0 = new Base64(false);
      Base64.toIntegerBytes(bigInteger0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      Base64.encodeInteger(bigInteger1);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Base64.isBase64((byte) (-1));
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64((byte) (-1));
      base64_0.encode(byteArray0, (int) (byte) (-1), (-1));
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf((-1586L));
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.decode("");
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Base64 base64_0 = new Base64(1413);
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Base64.isArrayByteBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.isArrayByteBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.nextProbablePrime();
      BigInteger bigInteger1 = BigInteger.valueOf(0L);
      bigInteger0.shortValueExact();
      bigInteger0.doubleValue();
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64(byteArray0, true, true);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      base64_0.decode(byteArray1);
      Base64.isBase64("");
      Base64.toIntegerBytes(bigInteger1);
      Base64.toIntegerBytes(bigInteger1);
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)117;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)77;
      byteArray2[3] = (byte)87;
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)0;
      byteArray2[6] = (byte) (-88);
      byteArray2[7] = (byte) (-1);
      Base64.decodeBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-9);
      byteArray0[4] = (byte) (-7);
      byte byte0 = (byte) (-73);
      byteArray0[5] = (byte) (-73);
      byteArray0[6] = (byte)127;
      Base64 base64_0 = new Base64(0, byteArray0, true);
      Base64.isBase64("j4MDUyh&[2G${}s\"");
      try { 
        base64_0.encode((Object) "${zpx?");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, (-933));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of -933
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(1431655765, mockRandom0);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1240);
      BigInteger bigInteger0 = new BigInteger(1240, mockRandom0);
      mockRandom0.nextGaussian();
      BigInteger bigInteger1 = bigInteger0.shiftRight(876);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger2 = bigInteger0.min(bigInteger1);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger2);
      bigInteger0.multiply(bigInteger0);
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, false, true, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (78) than the specified maxium size of -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      Base64 base64_0 = new Base64(523, byteArray0);
      byte[] byteArray1 = base64_0.decode("org.apache.commons.codec.EncoderException");
      assertEquals(27, byteArray1.length);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int int0 = (-2361);
      Base64 base64_0 = new Base64((-2361));
      byte[] byteArray0 = new byte[2];
      String string0 = "";
      byte[] byteArray1 = base64_0.decode("");
      byte[] byteArray2 = new byte[0];
      Base64.encodeBase64String(byteArray2);
      Base64.isBase64(") than the specified maxium size of ");
      byte[] byteArray3 = Base64.decodeBase64(byteArray0);
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)55;
      Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray0);
      base64_0.isUrlSafe();
      base64_0.encode(byteArray4);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger.valueOf(0L);
      Base64.toIntegerBytes(bigInteger0);
      base64_0.hasData();
      Base64.isArrayByteBase64(byteArray3);
      Base64 base64_1 = new Base64(0);
      try { 
        base64_1.encode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)114, (byte)81, (byte)111, (byte) (-83), (byte)10}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      Base64 base64_0 = new Base64(6, byteArray0);
      base64_0.decode(byteArray0, 6, 6);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 6, 1792);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 18
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)61;
      byteArray1[2] = (byte) (-3);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(32, byteArray1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000=\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Base64.isBase64((byte) (-1));
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64(76);
      base64_1.decode((Object) "");
      base64_1.encode((byte[]) null);
      Base64.isBase64("");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      Base64 base64_2 = new Base64();
      boolean boolean0 = base64_1.hasData();
      //  // Unstable assertion: assertFalse(boolean0);
      
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      //  // Unstable assertion: assertEquals(3, byteArray1.length);
      
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)47, (byte)47, (byte)56, (byte)65, (byte) (-83), (byte)10}, byteArray2);
      
      Base64.decodeBase64(byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      base64_0.decode(byteArray1);
      base64_0.encode(byteArray0, 52, 1);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      Base64 base64_0 = new Base64((-2655), byteArray0, false);
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("AAA=", string0);
      
      Object object0 = base64_0.decode((Object) "");
      base64_0.encode(object0);
      byte[] byteArray1 = Base64.decodeBase64("a[y`V");
      Base64.encodeBase64URLSafe(byteArray0);
      base64_0.encode(byteArray1, (-364), (-2655));
      assertArrayEquals(new byte[] {(byte)107, (byte)37}, byteArray1);
      
      Object object1 = base64_0.decode((Object) "");
      Object object2 = base64_0.encode(object1);
      assertSame(object2, object1);
      
      Base64.encodeBase64(byteArray0, false, false);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(0, byteArray0, true);
      Base64.encodeBase64URLSafe(byteArray0);
      boolean boolean0 = Base64.isBase64("");
      boolean boolean1 = base64_0.hasData();
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Base64.encodeBase64(byteArray0, true, true);
      base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.decode("~rQ");
      assertSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-83)}, byteArray2);
      assertEquals(1, byteArray2.length);
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1240);
      BigInteger bigInteger0 = new BigInteger(1240, mockRandom0);
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(true);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.shiftRight(76);
      bigInteger0.subtract(bigInteger1);
      base64_0.encode(byteArray0, 0, 61);
      base64_0.readResults(byteArray0, 121, 70);
      base64_0.decode(byteArray0, 61, 61);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      Base64 base64_0 = new Base64(true);
      base64_0.encodeToString(byteArray0);
      base64_0.readResults(byteArray0, 100, 100);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Base64 base64_0 = new Base64(1646, (byte[]) null);
      boolean boolean0 = true;
      Base64.encodeBase64((byte[]) null, true, true, 1646);
      base64_0.decode((byte[]) null);
      byte[] byteArray0 = new byte[3];
      Base64.encodeBase64String(byteArray0);
      byteArray0[0] = (byte)98;
      Base64.encodeBase64URLSafeString((byte[]) null);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)0;
      Base64.encodeBase64URLSafe(byteArray0);
      base64_0.readResults(byteArray0, (-638), 0);
      base64_0.hasData();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.byteValueExact();
      Base64.isBase64("AAAA");
      // Undeclared exception!
      try { 
        bigInteger0.testBit((-638));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Negative bit address
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte) (-1), byteArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [/w==]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Base64 base64_0 = new Base64();
      try { 
        base64_0.encode((Object) "lineSeperator must not contain base64 characters: [");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[33];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64();
      int int0 = base64_0.readResults(byteArray0, (-2361), (-2361));
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Base64 base64_0 = new Base64();
      String string0 = Base64.encodeBase64URLSafeString((byte[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(26, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(38, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Base64 base64_0 = new Base64(512);
      String string0 = "fes9gWA/|X(x_(-'Pl";
      byte[] byteArray0 = new byte[2];
      base64_0.decode(byteArray0);
      byteArray0[0] = (byte)52;
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = new byte[3];
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      base64_0.readResults(byteArray2, (-2537), 0);
      byte byte1 = (byte) (-33);
      try { 
        base64_0.encode((Object) "fes9gWA/|X(x_(-'Pl");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }
}
