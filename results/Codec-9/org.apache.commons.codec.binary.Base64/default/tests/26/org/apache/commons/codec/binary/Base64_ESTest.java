/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 21:18:11 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Base64 base64_0 = new Base64(1);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte)122;
      Base64.encodeBase64(byteArray0);
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte)94;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      base64_0.encode(byteArray1);
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[112];
      byteArray0[0] = (byte)6;
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64 base64_1 = new Base64((byte)6, byteArray0);
      base64_1.encode(byteArray1, 76, 64);
      base64_1.encode(byteArray0, (int) (byte)6, (int) (byte)6);
      base64_1.encode(byteArray1, (int) (byte)6, 140);
      base64_1.decode(byteArray1, 76, 76);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[105];
      byteArray0[0] = (byte)6;
      Base64 base64_0 = new Base64((byte)6, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64 base64_1 = new Base64((byte)6, byteArray0);
      base64_1.encode(byteArray1, 76, 64);
      base64_1.encode(byteArray0, (int) (byte)6, 7);
      base64_0.decode(byteArray1, 76, 64);
      base64_1.encode(byteArray1, (int) (byte)6, 84);
      base64_1.decode(byteArray1, 76, 76);
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)100;
      base64_1.encode(byteArray1, (int) (byte)100, 91);
      base64_1.encode(byteArray2, (int) (byte)6, (-29));
      byte[] byteArray3 = new byte[2];
      byteArray3[0] = (byte)100;
      byteArray3[1] = (byte)6;
      base64_1.encode(byteArray3);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[105];
      byteArray0[0] = (byte)6;
      Base64 base64_0 = new Base64((byte)6, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      base64_0.decode(byteArray3);
      base64_0.avail();
      int int0 = (-3027);
      // Undeclared exception!
      Base64.encodeBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger1 = new BigInteger(1717986918, mockRandom0);
      Base64.encodeInteger(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[66];
      byteArray0[0] = (byte)6;
      Base64 base64_0 = new Base64((byte)6, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64 base64_1 = new Base64();
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      String string0 = base64_1.encodeToString(byteArray1);
      base64_0.decode((Object) string0);
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[105];
      byteArray0[0] = (byte)6;
      Base64 base64_0 = new Base64((byte)6, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      Base64.encodeInteger(bigInteger0);
      // Undeclared exception!
      base64_0.decode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[78];
      byteArray0[0] = (byte)6;
      Base64 base64_0 = new Base64((byte)6, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64 base64_1 = new Base64((byte)6, byteArray0);
      base64_0.decode(byteArray1, 76, 1185);
      base64_1.encode(byteArray1, (int) (byte)6, 1232);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[78];
      byteArray0[0] = (byte)6;
      Base64 base64_0 = new Base64((byte)6, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      // Undeclared exception!
      base64_0.encodeToString(byteArray2);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[49];
      byteArray0[0] = (byte)6;
      Base64 base64_0 = new Base64((byte)6, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      String string0 = base64_0.encodeToString(byteArray1);
      // Undeclared exception!
      Base64.decodeBase64(string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      byteArray0[0] = (byte)6;
      Base64 base64_0 = new Base64((byte)6, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      Base64 base64_1 = new Base64((byte)6);
      String string0 = base64_0.encodeToString(byteArray1);
      base64_0.decode(string0);
      // Undeclared exception!
      base64_0.decode(string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[43];
      byteArray0[0] = (byte)6;
      Base64 base64_0 = new Base64((byte)6, byteArray0);
      base64_0.decode(byteArray0, (int) (byte)6, (-2304));
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      // Undeclared exception!
      Base64.encodeBase64URLSafe(byteArray2);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Base64.decodeBase64((String) null);
      Base64 base64_0 = new Base64(true);
      base64_0.encode((byte[]) null, (-612), (-612));
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, (-1985), 230);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[49];
      byteArray0[0] = (byte)6;
      Base64 base64_0 = new Base64((byte)6, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      String string0 = base64_0.encodeToString(byteArray1);
      // Undeclared exception!
      base64_0.decode((Object) string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[66];
      Base64 base64_0 = new Base64((byte)6, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.encodeToString(byteArray1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte) (-11);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)1;
      Base64.decodeInteger(byteArray0);
      Base64.isBase64(byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)9;
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0, 8, 8);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger0);
      base64_0.encode(byteArray0, (-1561), (-1561));
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = new byte[0];
      Base64 base64_0 = new Base64(0, byteArray1);
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray0, 5, 5);
      base64_0.encode(byteArray0, (-3068), (-3068));
      base64_0.readResults(byteArray0, 5, 5);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray0, 1, 1);
      base64_0.encode(byteArray0, (-1581), (-1581));
      base64_0.readResults(byteArray0, 1, 116);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray0 = new byte[20];
      byteArray0[7] = (byte)126;
      byteArray0[5] = (byte)108;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)0, (int) (byte)108);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 20
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(4463, byteArray0);
      Object object0 = base64_0.decode((Object) "^(bYB%W}qJg~.=Np/");
      // Undeclared exception!
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray0, 1, 1);
      Base64.isBase64("");
      base64_0.encode(byteArray0, (-1581), (-1581));
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray0, 1, 1);
      base64_0.encode(byteArray0, 1, 1);
      Base64.isBase64("");
      base64_0.encode(byteArray0, 1711, (-1581));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray0, 1, 1);
      Base64.isBase64("");
      base64_0.decode(byteArray0, 1, (-1));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0, 1, 1);
      Base64.isBase64("");
      base64_0.encode(byteArray0, (-894), (-894));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte)18;
      Base64 base64_0 = new Base64((byte)18, byteArray0);
      Base64.encodeBase64(byteArray0, false);
      base64_0.decode(byteArray0, (int) (byte)18, (int) (byte)0);
      int int0 = 45;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, 45);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray0, 1, 1);
      Base64.isBase64("");
      base64_0.encode(byteArray0, (-894), (-894));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      String string0 = "0Yg";
      Base64.decodeBase64("0Yg");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-6);
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte)31;
      byteArray0[7] = (byte) (-24);
      byteArray0[8] = (byte)100;
      Base64.discardWhitespace(byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)70;
      byteArray1[1] = (byte)70;
      byteArray1[2] = (byte)9;
      byteArray1[3] = (byte)9;
      byteArray1[4] = (byte)70;
      byteArray1[5] = (byte)100;
      byteArray1[6] = (byte)1;
      byteArray1[7] = (byte)9;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)31, byteArray1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [FF\t\tFd\u0001\t]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("z6cg'r?!*B2");
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("_g*@l-E");
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[45];
      Base64 base64_0 = new Base64((byte)6, byteArray0);
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.encodeBase64(byteArray0, false, false, 6);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)18;
      Base64 base64_0 = new Base64((byte)18, byteArray0);
      Base64 base64_1 = new Base64(858);
      base64_0.encodeToString(byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_1.readResults(byteArray1, (-3867), 684);
      Base64.encodeBase64URLSafeString(byteArray1);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, false, false, 76);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (78) than the specified maxium size of 76
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(1389, mockRandom0);
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)18;
      Base64 base64_0 = new Base64((byte)18, byteArray0);
      byte[] byteArray1 = new byte[9];
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      Base64 base64_1 = new Base64(false);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray2, 1, 23);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64 base64_0 = new Base64();
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)18;
      byteArray2[1] = (byte)18;
      byteArray2[2] = (byte)18;
      byteArray2[3] = (byte)18;
      byteArray2[4] = (byte)18;
      byteArray2[5] = (byte)18;
      byteArray2[6] = (byte)18;
      byteArray2[7] = (byte)1;
      byteArray2[8] = (byte)18;
      base64_0.readResults(byteArray2, (byte)18, (-6));
      base64_0.decode(byteArray1, 0, (int) (byte)18);
      base64_0.encode(byteArray2, (int) (byte)18, 115);
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, (-2279), (byte)18);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(48, byteArray1);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte) (-45);
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte)108;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-28);
      byteArray0[8] = (byte)84;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)0, 87);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64.encodeBase64(byteArray0, false, false);
      Base64 base64_0 = new Base64(false);
      base64_0.decode((String) null);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)0, 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray0 = new byte[0];
      base64_0.encode(byteArray0, (-2747), (-2747));
      Base64.encodeBase64String(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, (-2747), 2647);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      Base64 base64_1 = new Base64(false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)15;
      // Undeclared exception!
      try { 
        base64_1.decode(byteArray0, 0, (int) (byte)15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((byte)0, bigInteger0.byteValue());
      
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)127;
      byteArray1[1] = (byte) (-56);
      byteArray1[2] = (byte)81;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFDQ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      Base64 base64_0 = new Base64((byte)18);
      base64_0.encodeToString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 76, 76);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64.isBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)32;
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(false);
      base64_0.decode((Object) "F*7u");
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)73;
      byteArray1[1] = (byte) (-116);
      byteArray1[2] = (byte) (-116);
      byteArray1[3] = (byte) (-116);
      byteArray1[4] = (byte) (-76);
      byteArray1[5] = (byte) (-116);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, true, 2110);
      Base64.decodeInteger(byteArray2);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)70;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64 base64_0 = new Base64();
      Base64.isBase64("9|J4");
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      bigInteger0.toString();
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      Base64.isBase64(byteArray1);
      Base64.isBase64((byte)70);
      Base64.toIntegerBytes(bigInteger0);
      Base64.discardWhitespace(byteArray2);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)29;
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = Base64.decodeBase64("n1SuQ");
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (int) (byte)0, 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.decodeInteger(byteArray0);
      Base64.decodeInteger(byteArray0);
      Base64.encodeBase64(byteArray0, true);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte) (-114);
      byteArray0[6] = (byte)70;
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-114);
      byteArray1[1] = (byte)70;
      byteArray1[2] = (byte)70;
      byteArray1[3] = (byte) (-114);
      byteArray1[4] = (byte)70;
      byteArray1[5] = (byte) (-114);
      Base64.encodeBase64(byteArray1);
      Base64.decodeBase64("7Zu$C8w[PO7h&|");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64(1, (byte[]) null);
      byte[] byteArray1 = base64_0.decode("");
      base64_0.decode(byteArray1);
      base64_0.decode((byte[]) null);
      base64_0.decode("");
      base64_0.decode((byte[]) null);
      byte[] byteArray2 = new byte[4];
      byte byte0 = (byte) (-94);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte) (-58);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      base64_0.encode(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray5 = Base64.encodeBase64Chunked(byteArray3);
      Base64.encodeBase64URLSafeString(byteArray4);
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray6 = Base64.encodeBase64(byteArray5);
      Base64 base64_1 = new Base64(false);
      base64_1.decode("");
      Base64.encodeBase64String(byteArray6);
      base64_1.decode((Object) "");
      Base64.encodeBase64String(byteArray4);
      Base64.decodeBase64("");
      byte[] byteArray7 = new byte[8];
      byteArray7[0] = (byte)123;
      byteArray7[1] = (byte) (-49);
      byteArray7[2] = (byte) (-58);
      byteArray7[3] = (byte) (-49);
      byteArray7[4] = (byte)123;
      byteArray7[5] = (byte)123;
      byteArray7[6] = (byte) (-58);
      byteArray7[7] = (byte) (-49);
      Base64.encodeBase64Chunked(byteArray7);
      base64_1.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)13;
      Base64.encodeBase64(byteArray0, false, false);
      Base64 base64_0 = new Base64(false);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)0, 2186);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Base64 base64_0 = new Base64(1971);
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)123;
      Base64.encodeBase64(byteArray0, true, true);
      Base64 base64_1 = new Base64((byte)123);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.encodeInteger(bigInteger0);
      Base64.isBase64(byteArray0);
      Base64.isBase64((byte)123);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-114);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64 base64_0 = new Base64();
      Base64.isArrayByteBase64(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      Base64.isBase64(byteArray1);
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64.encodeBase64URLSafeString(byteArray2);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(12, byteArray0, true);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      byte[] byteArray2 = base64_0.decode(byteArray0);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray3);
      Base64.encodeBase64Chunked(byteArray2);
      byte[] byteArray5 = Base64.encodeBase64Chunked(byteArray3);
      byte[] byteArray6 = Base64.encodeBase64Chunked(byteArray5);
      Base64.encodeBase64URLSafeString(byteArray4);
      Base64.encodeBase64URLSafeString(byteArray3);
      Base64.encodeBase64(byteArray6);
      byte[] byteArray7 = base64_0.decode("");
      Base64.encodeBase64String(byteArray1);
      Object object0 = base64_0.decode((Object) "");
      Base64.encodeBase64String(byteArray7);
      base64_0.decode((Object) "");
      base64_0.encode(object0);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray7, 12, 12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Base64.decodeBase64("VIUS>RJv'MW");
      Base64 base64_0 = new Base64();
      Object object0 = base64_0.decode((Object) "VIUS>RJv'MW");
      base64_0.decode(object0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64Chunked((byte[]) null);
      Base64 base64_0 = new Base64((-455), (byte[]) null, false);
      base64_0.encode((byte[]) null);
      Base64.encodeBase64((byte[]) null, true, true, 931);
      base64_0.encode((byte[]) null);
      base64_0.encode((byte[]) null);
      int int0 = (-3976);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)76;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-15);
      byteArray1[3] = (byte) (-99);
      byteArray1[4] = (byte)102;
      byteArray1[5] = (byte) (-64);
      byteArray1[6] = (byte) (-82);
      Base64.encodeBase64(byteArray1, true, false, 931);
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-114);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      Base64.encodeInteger(bigInteger0);
      Base64.isBase64(byteArray1);
      Base64.isBase64((byte)70);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[0];
      Base64.decodeInteger(byteArray0);
      Base64 base64_1 = new Base64(true);
      byte[] byteArray1 = base64_1.encode(byteArray0);
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-128);
      Base64.encodeBase64(byteArray0, false, true);
      byte[] byteArray1 = Base64.decodeBase64("org.apache.commons.codec.EncoderException");
      Base64.isArrayByteBase64(byteArray1);
      Base64.encodeBase64((byte[]) null, true, true);
      Base64 base64_0 = new Base64(76);
      base64_0.encode(byteArray0);
      base64_0.encode((byte[]) null);
      base64_0.readResults(byteArray0, (byte) (-128), (byte) (-128));
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Base64.decodeBase64("MpY}pN9aX/6vQ_Lj");
      Base64 base64_0 = new Base64(224);
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)29;
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64((byte)0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)29;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)29;
      byteArray1[7] = (byte)29;
      Base64.isBase64(byteArray1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      int int0 = Base64.PEM_CHUNK_SIZE;
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray3 = new byte[5];
      byteArray3[0] = (byte)29;
      byteArray0[1] = (byte)29;
      Base64 base64_1 = null;
      try {
        base64_1 = new Base64(76, byteArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [HQ==]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Base64 base64_0 = new Base64(1971);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte) (-124);
      Base64.isBase64(byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.compareTo(bigInteger1);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      base64_0.readResults(byteArray0, (byte) (-49), 27);
      Base64.decodeBase64(byteArray1);
      base64_0.encode((byte[]) null, 54, (-1));
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64String(byteArray0);
      base64_0.encodeToString((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[0];
      base64_0.encode(byteArray0, (-526), (-526));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)123;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte)116;
      Base64.isArrayByteBase64(byteArray0);
      Base64.discardWhitespace(byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.xor(bigInteger0);
      bigInteger0.subtract(bigInteger1);
      bigInteger0.signum();
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, false, true, (-1620));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of -1620
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-99);
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)1, byteArray0);
      base64_0.encodeToString(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      base64_0.hasData();
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)1;
      byteArray2[5] = (byte)103;
      byteArray2[6] = (byte)1;
      Base64.encodeBase64String(byteArray1);
      Base64.encodeBase64String(byteArray2);
      base64_0.encodeToString(byteArray1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte) (-72);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      Base64.encodeBase64URLSafeString(byteArray1);
      base64_0.decode((Object) "-^v(JMTSVg^B");
      Base64.discardWhitespace(byteArray2);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("UTF-16BE");
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)24;
      byteArray0[6] = (byte) (-30);
      byteArray0[7] = (byte)93;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.discardWhitespace(byteArray0);
      Base64.decodeInteger(byteArray1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte)116;
      Base64.isArrayByteBase64(byteArray0);
      Base64.discardWhitespace(byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.xor(bigInteger0);
      bigInteger0.subtract(bigInteger1);
      bigInteger0.signum();
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, false, false, (int) (byte) (-99));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of -99
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Base64.encodeBase64((byte[]) null, true);
      Base64.encodeBase64((byte[]) null, true, true, 990);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-74);
      byteArray0[5] = (byte)105;
      byteArray0[6] = (byte)112;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-1), byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0001\uFFFD&\u0000\uFFFDip]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Base64 base64_0 = new Base64(1);
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = base64_0.decode(byteArray0);
      base64_0.decode("");
      Base64.encodeBase64Chunked(byteArray1);
      base64_0.encode(byteArray1, (int) (byte)1, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Base64.isBase64((byte)0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      Base64 base64_0 = new Base64(1487, byteArray0);
      base64_0.readResults(byteArray0, 1487, 1);
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("AAA=", string0);
      
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertEquals(6, byteArray1.length);
      
      base64_0.encode(byteArray0, 1487, 0);
      Base64.isBase64((byte)0);
      int int0 = base64_0.avail();
      assertEquals(0, int0);
      
      Base64.isBase64((byte) (-91));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, 771, 771);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)29;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64((byte)0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)29;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)29;
      byteArray1[7] = (byte)29;
      Base64.isBase64(byteArray1);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger1.compareTo(bigInteger0);
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger1);
      byte[] byteArray3 = new byte[5];
      byteArray3[0] = (byte)29;
      byteArray3[1] = (byte)29;
      base64_0.readResults(byteArray2, (byte)29, (byte)0);
      Base64.decodeBase64((byte[]) null);
      base64_0.encode(byteArray0, 1, 2);
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64String((byte[]) null);
      base64_0.encodeToString((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.abs();
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = new byte[0];
      boolean boolean0 = false;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, false, 0);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64(byteArray0);
      base64_0.decode(byteArray2, (-168), (-489));
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = null;
      try {
        bigInteger2 = new BigInteger(byteArray2);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Base64 base64_0 = new Base64(0, (byte[]) null);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-99);
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)1, byteArray0);
      base64_0.encodeToString(byteArray0);
      Base64.decodeBase64(byteArray0);
      base64_0.hasData();
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)1;
      byteArray1[5] = (byte)103;
      byteArray1[6] = (byte)1;
      byteArray1[7] = (byte) (-99);
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = new byte[0];
      base64_0.encode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[0];
      base64_0.encodeToString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Object object0 = base64_0.decode((Object) "");
      assertFalse(base64_0.isUrlSafe());
      
      base64_0.encode(object0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Base64 base64_0 = new Base64((-2604));
      byte[] byteArray0 = new byte[4];
      base64_0.decode(byteArray0);
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-82);
      base64_0.decode(byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      Base64.encodeBase64URLSafeString(byteArray3);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64(byteArray3);
      base64_0.decode("WTBWR1FsRllTbTVRVkRBOURRbz0NCg");
      Base64.encodeBase64String(byteArray2);
      base64_0.decode((Object) "Y0VGQlFYSm5QVDA9DQo=");
      byte[] byteArray4 = new byte[0];
      Base64.encodeBase64String(byteArray4);
      Object object0 = base64_0.decode((Object) "Y0VGQlFYSm5QVDA9DQo=");
      base64_0.encode(object0);
      base64_0.decode(byteArray2, (int) (byte)0, 0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64();
      base64_0.encodeToString(byteArray0);
      base64_0.encode(byteArray0, (-615), (-615));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte) (-1);
      Base64.encodeBase64(byteArray0, true, true);
      Base64.decodeBase64("org.apache.commons.codec.EncoderException");
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigInteger0.divideAndRemainder(bigInteger1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger divide by zero
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-128);
      Base64.encodeBase64(byteArray0, false, true);
      Base64.decodeBase64("org.apache.commons.codec.EncoderException");
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.negate();
      Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(1);
      Base64 base64_1 = new Base64();
      try { 
        base64_1.decode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Base64 base64_0 = new Base64(1);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte)94;
      Base64.decodeBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-210), byteArray0, false);
      Base64.encodeBase64String(byteArray0);
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-26);
      byteArray0[6] = (byte) (-128);
      byteArray0[7] = (byte) (-60);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 0, (int) (byte)25);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Base64.decodeBase64("ku7=4Hgk4");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte) (-101);
      byteArray0[5] = (byte) (-24);
      byteArray0[6] = (byte) (-88);
      byteArray0[7] = (byte) (-43);
      byteArray0[8] = (byte)0;
      Base64 base64_0 = new Base64((-1611), byteArray0, true);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      base64_0.decode("encodeInteger called with null parameter");
      base64_0.encodeToString(byteArray0);
      base64_0.encodeToString(byteArray0);
      Base64.encodeBase64(byteArray1, false, true);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Base64.isBase64(";iL3J~=");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Base64.isBase64("");
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)89;
      base64_0.encode(byteArray0);
      byte[] byteArray1 = new byte[0];
      base64_0.decode(byteArray1);
      base64_0.decode("");
      Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)89;
      byteArray2[1] = (byte)1;
      byteArray2[2] = (byte)89;
      byteArray2[3] = (byte)89;
      byteArray2[4] = (byte)89;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray2, (int) (byte)89, 2099);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 89
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Base64.isBase64((byte)61);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.abs();
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64((-1664), byteArray0, false);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false, false, 76);
      Base64.isArrayByteBase64(byteArray2);
      Base64.encodeBase64(byteArray0, true, false);
      byte[] byteArray3 = base64_0.encode(byteArray0);
      base64_0.encode(byteArray3);
      base64_0.readResults(byteArray2, 0, (-1664));
      byte[] byteArray4 = new byte[5];
      byteArray4[0] = (byte)102;
      byteArray4[1] = (byte) (-1);
      byteArray4[2] = (byte)0;
      byteArray4[3] = (byte)0;
      byteArray4[4] = (byte)125;
      Base64.encodeBase64(byteArray4, false, false, 64);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 76, 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 76
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Base64 base64_0 = new Base64(420);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)89;
      byteArray0[7] = (byte) (-75);
      byteArray0[8] = (byte)0;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (-4294), (int) (byte)89);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4294
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger1.subtract(bigInteger0);
      bigInteger2.doubleValue();
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.isUrlSafe();
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Base64.decodeBase64("ZJZ7:i9r&llx");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger1.subtract(bigInteger0);
      bigInteger2.doubleValue();
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.isUrlSafe();
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-37);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)79;
      byteArray0[7] = (byte) (-90);
      byteArray0[8] = (byte)73;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64URLSafe(byteArray1);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.subtract(bigInteger1);
      bigInteger0.doubleValue();
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.isUrlSafe();
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)18;
      byteArray0[0] = (byte)18;
      Base64 base64_0 = new Base64(331, byteArray0, true);
      int int0 = (-2287);
      int int1 = 0;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, true, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64((-1581), byteArray0);
      base64_0.encode(byteArray0, (-1581), (-1581));
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte)82;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.decodeBase64(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64 base64_0 = new Base64(0);
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)3;
      byteArray2[1] = (byte)38;
      base64_0.readResults(byteArray2, 41, (byte)82);
      base64_0.avail();
      base64_0.encode(byteArray2, (int) (byte)38, (-1));
      Base64.decodeBase64((String) null);
      Base64.encodeBase64URLSafe(byteArray1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 61, 61);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 61
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-47);
      byteArray0[7] = (byte)59;
      byteArray0[8] = (byte)0;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)86, 84);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 86
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)91;
      byteArray0[0] = (byte)91;
      byte byte1 = (byte)83;
      byteArray0[1] = (byte)83;
      byte byte2 = (byte)91;
      byteArray0[2] = (byte)91;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(2530, byteArray1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [W1Nb]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-99);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64(byteArray0);
      base64_0.decode(byteArray1);
      base64_0.encodeToString(byteArray1);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte) (-126);
      byteArray2[3] = (byte) (-99);
      byteArray2[4] = (byte)0;
      base64_0.readResults(byteArray2, (-1), (byte)0);
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[66];
      Base64 base64_0 = new Base64();
      base64_0.encodeToString(byteArray0);
      base64_0.readResults(byteArray0, 759, 759);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray1, 1, 1);
      base64_0.avail();
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Base64.isBase64((byte) (-69));
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.encodeToString((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64.encodeBase64URLSafeString((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Base64.decodeBase64("X6N4Su|3");
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, (-969));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of -969
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[5];
      base64_0.encode(byteArray0);
      byteArray0[0] = (byte)0;
      Base64.encodeBase64URLSafe(byteArray0);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)76;
      Base64.decodeBase64("");
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte)56;
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray1 = base64_0.decode("(vT>D");
      base64_0.decode(byteArray1);
      byte[] byteArray2 = new byte[0];
      int int0 = 14;
      int int1 = (-1881);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, true, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.EncoderException");
      assertEquals(27, byteArray0.length);
      
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-139), byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD\uFFFD\u001A\uFFFD\uFFFD!y\uFFFD&\uFFFD\uFFFD\uFFFDr\uFFFD^pI\u0721\u05EB\u0013\u0017\u001E\uFFFD\u0628]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray0);
      
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.EncoderException");
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Base64 base64_0 = new Base64();
      base64_0.encodeToString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.EncoderException");
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)6;
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte)7;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      Base64.isBase64((byte)6);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)7, byteArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [UW5aRlNBPT0=]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Base64.encodeBase64((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Base64.encodeBase64URLSafe((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Base64 base64_0 = new Base64((-901));
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.encodeBase64((byte[]) null, true, true, 0);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64((byte[]) null);
      base64_0.decode((byte[]) null, 0, (-168));
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.bitLength();
      Base64.toIntegerBytes(bigInteger0);
      // Undeclared exception!
      try { 
        bigInteger0.compareTo((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-13);
      byteArray0[5] = (byte) (-38);
      byteArray0[6] = (byte) (-108);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64 base64_0 = new Base64((byte)0, byteArray0, false);
      base64_0.decode(byteArray1, (int) (byte) (-38), (int) (byte)0);
      base64_0.decode("9'IExhG=@vc2/yV");
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte[] byteArray0 = new byte[112];
      byteArray0[0] = (byte)6;
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64 base64_1 = new Base64((byte)6, byteArray0);
      base64_1.encode(byteArray1, 76, 64);
      base64_1.encode(byteArray0, (int) (byte)6, (int) (byte)6);
      base64_0.decode(byteArray0, 76, 64);
      Base64.encodeBase64URLSafe(byteArray1);
      base64_0.encode(byteArray1, 140, (-27));
      base64_1.encode(byteArray1, (int) (byte)6, 140);
      base64_1.decode(byteArray1, 76, 76);
      Base64.discardWhitespace(byteArray1);
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-114);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64 base64_0 = new Base64();
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64();
      base64_0.readResults(byteArray0, (-1), (-1));
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0, 4, 4);
      base64_0.encode(byteArray0, 4, 4);
      base64_0.readResults(byteArray0, 4, 4);
      base64_0.readResults(byteArray0, 1, 4);
      base64_0.encode(byteArray0, 4, (-1581));
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)37;
      byteArray0[7] = (byte) (-96);
      Base64.isBase64(byteArray0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.add(bigInteger1);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)98, byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [qE\u0000b0\u0000%\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.isBase64(byteArray0);
      Base64.encodeBase64(byteArray0, true, true, 181);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)29;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64((byte)0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)29;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)29;
      byteArray1[7] = (byte)29;
      Base64.isBase64(byteArray1);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger1.compareTo(bigInteger0);
      Base64.toIntegerBytes(bigInteger1);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)29;
      byteArray2[1] = (byte)29;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)29;
      base64_0.readResults(byteArray2, (byte)0, (byte)29);
      byte[] byteArray3 = new byte[1];
      byteArray3[0] = (byte)0;
      base64_0.readResults(byteArray3, (byte)29, 330);
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base64 base64_0 = new Base64(true);
      base64_0.encodeToString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf((-3816L));
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64(true);
      base64_0.encodeToString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[43];
      byteArray0[0] = (byte)6;
      Base64 base64_0 = new Base64((byte)6, byteArray0);
      base64_0.decode(byteArray0, (int) (byte)6, (-2304));
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64URLSafe(byteArray1);
      String string0 = base64_0.encodeToString(byteArray1);
      // Undeclared exception!
      base64_0.decode((Object) string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("AAAAAAAAAAAAAA==", string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Base64 base64_0 = new Base64();
      try { 
        base64_0.encode((Object) "w");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray2, byteArray1);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Base64 base64_0 = new Base64((byte)0);
      Object object0 = base64_0.decode((Object) "");
      base64_0.decode(object0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)29;
      byteArray0[7] = (byte)29;
      boolean boolean0 = Base64.isBase64(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)29;
      byteArray1[1] = (byte)29;
      byte[] byteArray2 = Base64.decodeBase64((byte[]) null);
      assertNull(byteArray2);
      
      String string0 = Base64.encodeBase64URLSafeString((byte[]) null);
      assertNull(string0);
      
      boolean boolean1 = base64_0.hasData();
      assertTrue(boolean1 == boolean0);
      assertFalse(base64_0.isUrlSafe());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Base64 base64_0 = new Base64(1849);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte) (-41);
      byteArray0[4] = (byte) (-109);
      byteArray0[5] = (byte) (-21);
      byteArray0[6] = (byte)111;
      byteArray0[7] = (byte)0;
      Base64.encodeBase64Chunked(byteArray0);
      Base64.decodeBase64("");
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.encodeBase64Chunked((byte[]) null);
      Base64 base64_0 = new Base64((-455), (byte[]) null, false);
      base64_0.encode((byte[]) null);
      Base64.encodeBase64URLSafeString((byte[]) null);
      boolean boolean0 = true;
      Base64.encodeBase64((byte[]) null, true, true, 931);
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      int int0 = 83;
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(83, byteArray0, false);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)114);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)108;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)84, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [l\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte)94;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(1, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u00005\uFFFD\u0000\uFFFD^]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }
}
