/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 21:18:28 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.shiftLeft(8196);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      Base64 base64_0 = new Base64(958, byteArray0);
      Base64.decodeBase64(byteArray2);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      String string0 = Base64.encodeBase64URLSafeString(byteArray3);
      base64_0.decode((Object) string0);
      // Undeclared exception!
      base64_0.decode(byteArray3);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.shiftLeft(8196);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      Base64 base64_0 = new Base64(958, byteArray0);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      String string0 = Base64.encodeBase64URLSafeString(byteArray3);
      base64_0.decode((Object) string0);
      // Undeclared exception!
      Base64.decodeInteger(byteArray3);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      int int0 = 1717986918;
      BigInteger bigInteger1 = bigInteger0.shiftLeft(1717986918);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger1);
      boolean boolean0 = true;
      // Undeclared exception!
      Base64.encodeBase64(byteArray0, true, true);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.shiftLeft(8196);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      Base64 base64_0 = new Base64(958, byteArray0);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      String string0 = Base64.encodeBase64URLSafeString(byteArray3);
      base64_0.decode((Object) string0);
      Random.setNextRandom((-87));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.gcd(bigInteger0);
      BigInteger bigInteger1 = bigInteger0.shiftLeft(8188);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false);
      Base64.encodeBase64URLSafeString(byteArray2);
      bigInteger1.pow(1);
      Base64 base64_0 = new Base64(1058, byteArray0);
      base64_0.encode(byteArray2, 13, 1058);
      base64_0.encode(byteArray2, 76, (-1));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.shiftLeft(8196);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger1);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      Base64 base64_0 = new Base64(962, byteArray0);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      String string0 = Base64.encodeBase64URLSafeString(byteArray3);
      base64_0.decode((Object) string0);
      // Undeclared exception!
      base64_0.decode((Object) string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.shiftLeft(8196);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      Base64 base64_0 = new Base64(962, byteArray0);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      Base64.encodeBase64URLSafeString(byteArray3);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.gcd(bigInteger1);
      BigInteger bigInteger2 = bigInteger0.shiftLeft(8188);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger2);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      bigInteger0.divideAndRemainder(bigInteger1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64 base64_0 = new Base64(1075, byteArray0);
      base64_0.encode(byteArray2, 0, 1075);
      base64_0.encode(byteArray2, 51, (-1));
      base64_0.readResults(byteArray1, 1, 442);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.gcd(bigInteger0);
      BigInteger bigInteger1 = bigInteger0.shiftLeft(8188);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false);
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64 base64_0 = new Base64(1075, byteArray0);
      base64_0.encode(byteArray2, 0, 1075);
      base64_0.encode(byteArray2, 76, (-1));
      base64_0.readResults(byteArray1, 1075, 0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.shiftLeft(8196);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      BigInteger bigInteger2 = BigInteger.ZERO;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      Base64 base64_0 = new Base64(962, byteArray0);
      Base64.encodeBase64(byteArray1, true, true, 8196);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      // Undeclared exception!
      Base64.encodeBase64URLSafeString(byteArray3);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.shiftLeft(8188);
      BigInteger bigInteger2 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger1);
      bigInteger1.toByteArray();
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.decodeInteger(byteArray1);
      Base64 base64_0 = new Base64(43, byteArray0);
      Base64 base64_1 = new Base64((-1784), byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 76, 998);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1024
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)11;
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = new byte[5];
      Base64.encodeBase64URLSafeString(byteArray1);
      byteArray1[1] = (byte)127;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, (int) (byte)0, (int) (byte)127);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.shiftLeft(8188);
      BigInteger bigInteger2 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64.decodeInteger(byteArray2);
      Base64 base64_0 = new Base64(1075, byteArray0);
      base64_0.encode(byteArray2, 0, 1075);
      base64_0.encode(byteArray1, (-862), (-268));
      byte[] byteArray3 = new byte[5];
      byteArray3[0] = (byte)32;
      byteArray3[1] = (byte)1;
      byteArray3[2] = (byte)71;
      byteArray3[3] = (byte)18;
      byteArray3[4] = (byte)0;
      base64_0.decode(byteArray3, 76, (int) (byte)1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Base64 base64_0 = new Base64((-242));
      base64_0.encode((byte[]) null, 2757, (-242));
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, (-4741), (-4741));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.shiftLeft(8188);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      BigInteger bigInteger2 = BigInteger.ZERO;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64 base64_0 = new Base64(1075, byteArray0);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      // Undeclared exception!
      base64_0.encode(byteArray3);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.shiftLeft(8204);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger1);
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64(76, byteArray0);
      base64_1.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64(byteArray1, true, true);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(1075, byteArray0);
      Base64.encodeBase64(byteArray2);
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.shiftLeft(8188);
      bigInteger1.modPow(bigInteger0, bigInteger0);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, true);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.decodeInteger(byteArray1);
      base64_0.encode(byteArray3);
      Base64.discardWhitespace(byteArray0);
      // Undeclared exception!
      Base64.encodeBase64(byteArray3, true, true, 8188);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)7;
      Base64.encodeBase64(byteArray0, false, true, 6);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Base64 base64_0 = new Base64(63);
      base64_0.encode((byte[]) null);
      Base64.encodeBase64((byte[]) null);
      byte[] byteArray0 = null;
      Base64.decodeBase64((byte[]) null);
      Base64 base64_1 = new Base64(87, (byte[]) null, true);
      try { 
        base64_1.encode((Object) base64_0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[0];
      Base64 base64_0 = new Base64(61, byteArray1);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      Base64 base64_0 = new Base64(1857);
      Base64.decodeBase64(byteArray1);
      base64_0.encodeToString(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true, false);
      Base64.decodeInteger(byteArray1);
      Base64 base64_1 = new Base64();
      base64_1.decode(byteArray2, 0, 1362);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)9;
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      assertFalse(base64_0.isUrlSafe());
      
      Base64.isBase64((byte)61);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64 base64_0 = new Base64(1857);
      base64_0.encodeToString(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false, false);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.decodeInteger(byteArray2);
      Base64 base64_1 = new Base64();
      base64_1.decode(byteArray2, (int) (byte)0, 68);
      base64_1.avail();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte)32;
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64(byteArray0);
      base64_0.decode((Object) "+j(gX'B*5)OHw;X");
      base64_0.decode(byteArray0, (int) (byte)39, (-1));
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)32;
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Base64.encodeBase64((byte[]) null, false, true);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
      
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)66;
      byteArray1[1] = (byte) (-117);
      byteArray1[2] = (byte)9;
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      Base64.decodeInteger(byteArray2);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)33;
      Base64.isBase64((byte)33);
      bigInteger0.max(bigInteger1);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.decodeInteger(byteArray0);
      Base64.isBase64(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false, false);
      Random.setNextRandom((byte)33);
      Base64 base64_0 = new Base64(false);
      base64_0.decode(byteArray2, (int) (byte)2, (int) (byte)33);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)33;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64 base64_0 = new Base64((byte)33);
      Base64.toIntegerBytes(bigInteger1);
      base64_0.encodeToString(byteArray0);
      bigInteger0.flipBit(116);
      bigInteger0.pow(0);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64 base64_1 = new Base64(64);
      base64_1.encode(byteArray0, 57, (-2089));
      Base64.isBase64((byte)127);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true);
      Base64 base64_1 = new Base64(64);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger0);
      base64_1.encodeToString(byteArray1);
      Base64.encodeInteger(bigInteger0);
      bigInteger0.pow(3907);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64 base64_2 = new Base64(2012);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Base64.isBase64("encodeInteger called with null parameter");
      Base64.decodeBase64("ORm3nKy27sV{Q&AwC;");
      Base64 base64_0 = new Base64();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64();
      Base64.isBase64("lineSeperator must not contain base64 characters: [");
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
      
      Base64 base64_0 = new Base64((byte)74);
      byte[] byteArray1 = base64_0.decode("/N-;h!n#+V7p");
      Base64.encodeBase64String(byteArray0);
      base64_0.decode(byteArray0, (int) (byte)74, (-1));
      byte[] byteArray2 = base64_0.decode(byteArray0);
      Base64.isBase64("{`So3D0X|");
      Base64.encodeInteger(bigInteger0);
      Base64.isBase64(byteArray2);
      base64_0.decode(byteArray1);
      base64_0.encode(byteArray1, (-2164), 1603);
      byte[] byteArray3 = base64_0.decode(byteArray0);
      Base64.encodeBase64(byteArray1, false, false);
      base64_0.decode(byteArray3);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)104;
      byteArray0[7] = (byte)118;
      byteArray0[8] = (byte) (-8);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64(byteArray0, false);
      base64_0.avail();
      base64_0.decode((Object) "");
      byte[] byteArray2 = base64_0.decode("");
      Base64.encodeBase64String(byteArray0);
      base64_0.decode(byteArray1, (int) (byte)1, (int) (byte)1);
      Base64.decodeInteger(byteArray2);
      base64_0.decode(byteArray1, 10, (-133));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.shiftLeft(8192);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      assertEquals(1368, byteArray0.length);
      
      Base64.encodeBase64Chunked(byteArray0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      Base64.isBase64((byte)0);
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64((byte)15);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-33);
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte)126;
      byteArray1[3] = (byte) (-1);
      byteArray1[4] = (byte)15;
      byteArray1[5] = (byte) (-1);
      byteArray1[6] = (byte)15;
      byteArray1[7] = (byte)1;
      byteArray1[8] = (byte) (-1);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (int) (byte)0, (int) (byte)15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.shiftLeft(8188);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      Base64 base64_0 = new Base64((byte)14);
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray3 = new byte[1];
      byteArray1[1481] = (byte) (-1);
      base64_0.encodeToString(byteArray3);
      bigInteger0.mod(bigInteger1);
      BigInteger bigInteger2 = bigInteger0.pow((byte)0);
      Base64.encodeBase64(byteArray2, true, true);
      Base64.encodeBase64URLSafeString(byteArray3);
      Base64 base64_1 = new Base64((byte) (-1));
      base64_1.encode(byteArray0, 1072, 76);
      Base64.isBase64(byteArray1);
      BigInteger bigInteger3 = BigInteger.TEN;
      bigInteger3.and(bigInteger2);
      Base64.encodeInteger(bigInteger3);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64((byte[]) null, true);
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.shiftLeft(8188);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64.encodeBase64(byteArray0, false, true);
      Base64 base64_0 = new Base64((byte)14);
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = new byte[1];
      byte byte0 = (byte) (-1);
      byteArray1[0] = (byte) (-1);
      base64_0.encodeToString(byteArray1);
      bigInteger0.mod(bigInteger1);
      // Undeclared exception!
      try { 
        bigInteger0.pow((byte) (-1));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Negative exponent
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.isBase64(byteArray0);
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0, (-1313), (-1313));
      byte[] byteArray1 = new byte[0];
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray1, (-1313), (-40));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-95);
      byte[] byteArray1 = new byte[0];
      Base64 base64_0 = new Base64((byte)28, byteArray1, true);
      base64_0.readResults(byteArray0, (byte)0, 0);
      base64_0.encodeToString(byteArray1);
      byte[] byteArray2 = base64_0.decode("");
      Object object0 = base64_0.decode((Object) "n-Y[Z9sp?J_/Hr~p");
      base64_0.decode(object0);
      Base64.isBase64((byte)0);
      byte[] byteArray3 = Base64.decodeBase64("Gfy=t\"<BJo(1SH!++");
      Base64.isBase64(byteArray3);
      base64_0.readResults(byteArray3, 2307, (byte) (-95));
      byte[] byteArray4 = Base64.discardWhitespace(byteArray1);
      byte[] byteArray5 = base64_0.encode(byteArray4);
      byte[] byteArray6 = Base64.encodeBase64Chunked(byteArray5);
      Base64.encodeBase64(byteArray0, false, true, 1540);
      base64_0.encode(byteArray2);
      base64_0.decode(byteArray3, (int) (byte) (-95), (int) (byte) (-95));
      base64_0.avail();
      Base64.decodeInteger(byteArray6);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)8;
      byte byte0 = (byte)39;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)104;
      byteArray0[7] = (byte)118;
      byteArray0[8] = (byte) (-8);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64 base64_0 = new Base64();
      base64_0.avail();
      String string0 = "";
      base64_0.decode("");
      Base64.encodeBase64String(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, (int) (byte)8, (int) (byte)8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      assertTrue(base64_0.isUrlSafe());
      
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, (-368), 64);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte) (-18);
      Base64.isBase64("Dig.Qs9~#ZO\"i");
      byteArray0[3] = (byte) (-18);
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte) (-18);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.decodeBase64((String) null);
      base64_0.decode((byte[]) null, 56, (int) (byte) (-18));
      base64_0.avail();
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.decodeInteger(byteArray1);
      base64_0.encode(byteArray0, 920, (-865));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      byte[] byteArray1 = Base64.decodeBase64("UTF-16BE");
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false);
      Base64.encodeBase64(byteArray0, false, true, 2088);
      Base64.isBase64((byte)0);
      Base64.encodeBase64(byteArray1, true, true);
      String string0 = "5/W8~d";
      Base64.decodeBase64("5/W8~d");
      Base64 base64_0 = new Base64(2088, byteArray2);
      Base64.encodeBase64URLSafe(byteArray2);
      Base64.encodeBase64(byteArray3, false, true);
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-62);
      byteArray0[6] = (byte) (-62);
      byteArray0[7] = (byte)0;
      Base64 base64_0 = new Base64(0, byteArray0, false);
      Base64.isBase64("N^i(\"y[dB");
      base64_0.encodeToString(byteArray0);
      base64_0.encodeToString(byteArray0);
      Base64.isBase64("t2gn)KR");
      Base64.isBase64("JQ8P/wDCwgA=");
      base64_0.decode(byteArray0, (int) (byte) (-62), (int) (byte)37);
      Base64.decodeBase64(byteArray0);
      Base64.encodeBase64String((byte[]) null);
      base64_0.avail();
      Base64.isBase64("t2gn)KR");
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)63;
      base64_0.decode(byteArray0, (-297), 81);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Base64.isBase64((byte)61);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.shiftLeft(8188);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)14;
      Base64.encodeBase64(byteArray1, true, false);
      Base64 base64_0 = new Base64((byte)14);
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger1);
      base64_0.encodeToString(byteArray0);
      BigInteger bigInteger2 = BigInteger.ZERO;
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, true, false);
      Base64.encodeBase64URLSafeString(byteArray1);
      bigInteger1.clearBit(5262);
      Base64 base64_1 = new Base64(5);
      Base64.encodeBase64Chunked(byteArray0);
      base64_1.encode(byteArray2, (-767), (-1982));
      Base64.isBase64(byteArray1);
      Base64.isBase64(byteArray3);
      BigInteger bigInteger3 = BigInteger.TEN;
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      Object object0 = base64_0.decode((Object) "");
      base64_0.encode(object0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)15;
      Base64 base64_0 = new Base64(true);
      Object object0 = base64_0.decode((Object) "org.apache.commons.codec.DecoderException");
      Object object1 = base64_0.encode(object0);
      base64_0.encode(byteArray0, 1, 70);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)15;
      Base64.isBase64("*6Q)x6U");
      byte[] byteArray3 = Base64.decodeBase64(byteArray0);
      Base64 base64_1 = new Base64((byte)15, byteArray1);
      base64_0.avail();
      base64_1.hasData();
      bigInteger0.toByteArray();
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64.encodeBase64(byteArray2);
      Base64.encodeBase64URLSafeString(byteArray1);
      base64_0.encode(byteArray3, (int) (byte)37, (int) (byte)37);
      byte[] byteArray4 = new byte[2];
      byteArray4[0] = (byte)0;
      byteArray4[1] = (byte)37;
      Base64.isBase64(byteArray4);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger2);
      base64_0.decode(object1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-62);
      byteArray0[6] = (byte) (-44);
      byteArray0[7] = (byte)0;
      Base64 base64_0 = new Base64((byte) (-44));
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      Base64.encodeBase64String(byteArray0);
      base64_0.encode(byteArray1, 53, (int) (byte) (-44));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)68;
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.shiftLeft(8188);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)14;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, false);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)68, (byte)103, (byte)61, (byte)61, (byte) (-123), (byte)0}, byteArray2);
      
      Base64 base64_0 = new Base64((byte)14);
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger1);
      String string0 = base64_0.encodeToString(byteArray0);
      //  // Unstable assertion: assertEquals("Q2c9PQ==\uFFFD\u0000", string0);
      
      bigInteger1.pow(0);
      Base64.encodeBase64(byteArray0, true, false);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64 base64_1 = new Base64(5);
      base64_1.encode(byteArray3, (-767), (-1982));
      Base64.isBase64(byteArray1);
      BigInteger bigInteger2 = BigInteger.TEN;
      byte[] byteArray4 = Base64.encodeInteger(bigInteger1);
      //  // Unstable assertion: assertEquals(1368, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Base64 base64_0 = new Base64(6);
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertEquals(12, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0, (int) (byte)117, (int) (byte) (-41));
      boolean boolean0 = Base64.isBase64((byte)117);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Base64 base64_0 = new Base64(2900);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byte byte0 = (byte)1;
      byteArray0[3] = (byte)1;
      byte byte1 = (byte)23;
      byteArray0[4] = (byte)23;
      byteArray0[5] = (byte)36;
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64String(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, (int) (byte)36);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Base64.encodeBase64Chunked((byte[]) null);
      Base64 base64_0 = new Base64(16);
      byte[] byteArray0 = new byte[0];
      base64_0.decode((byte[]) null);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-70);
      byteArray1[1] = (byte)10;
      byteArray1[2] = (byte) (-65);
      byteArray1[3] = (byte) (-71);
      base64_0.encode(byteArray1);
      Base64.encodeBase64((byte[]) null, true, false, 81);
      Base64.encodeBase64(byteArray0, true, false, 1372);
      base64_0.readResults((byte[]) null, 1, 1);
      base64_0.encodeToString((byte[]) null);
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 96, 1372);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)90;
      Base64 base64_1 = new Base64(true);
      base64_0.encode(byteArray0, 0, 1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64(byteArray1, false, true);
      Base64.encodeBase64String(byteArray1);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (-1), 6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Base64 base64_0 = new Base64(2900);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      Base64 base64_1 = new Base64((byte) (-19), byteArray0, false);
      base64_1.encodeToString(byteArray0);
      Base64 base64_2 = new Base64();
      base64_2.encodeToString(byteArray0);
      boolean boolean0 = Base64.isBase64(")");
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      int int0 = base64_2.avail();
      assertEquals(0, int0);
      
      base64_0.hasData();
      String string0 = Base64.encodeBase64URLSafeString(byteArray1);
      assertEquals("", string0);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      String string1 = Base64.encodeBase64URLSafeString(byteArray2);
      assertEquals("N1FBQUFRQUE", string1);
      
      base64_0.encode(byteArray1, (int) (byte) (-44), (int) (byte) (-19));
      boolean boolean1 = Base64.isBase64(byteArray2);
      assertFalse(boolean1 == boolean0);
      
      base64_2.readResults(byteArray2, 2900, 1886);
      boolean boolean2 = Base64.isBase64((byte)1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte)36;
      String string0 = Base64.encodeBase64String(byteArray0);
      //  // Unstable assertion: assertEquals("Wu7uJA==", string0);
      
      base64_0.decode((Object) "Wu7uJA==");
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)90;
      String string1 = base64_0.encodeToString(byteArray1);
      //  // Unstable assertion: assertEquals("Wg==\uFFFD\u0000", string1);
      
      base64_0.decode(byteArray1, (-86), (int) (byte)0);
      byte[] byteArray2 = Base64.decodeBase64("Wg==\r\n");
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)90}, byteArray2);
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, true, false, (int) (byte)36);
      //  // Unstable assertion: assertEquals(10, byteArray3.length);
      
      base64_0.avail();
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Base64 base64_0 = new Base64(2900);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)23;
      Base64 base64_1 = new Base64(Integer.MAX_VALUE);
      byte[] byteArray1 = base64_1.decode(byteArray0);
      base64_1.decode(byteArray1, (int) (byte)0, (-526));
      byte[] byteArray2 = base64_1.decode(byteArray1);
      assertSame(byteArray2, byteArray1);
      
      byte[] byteArray3 = base64_0.encode(byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(10, byteArray3.length);
      
      byte[] byteArray4 = new byte[0];
      byte[] byteArray5 = Base64.encodeBase64(byteArray4, false);
      assertEquals(0, byteArray5.length);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Object object0 = base64_0.decode((Object) "rkc*{/~Q");
      Object object1 = base64_0.decode(object0);
      assertNotSame(object1, object0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte)74;
      byteArray0[5] = (byte)16;
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(3430);
      base64_0.hasData();
      Base64 base64_1 = null;
      try {
        base64_1 = new Base64((byte) (-108), byteArray1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [Hp\uFFFDJ\u0000\u0010]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-120);
      boolean boolean0 = Base64.isBase64("");
      byte[] byteArray1 = Base64.decodeBase64("");
      boolean boolean1 = Base64.isBase64(byteArray0);
      assertFalse(boolean1 == boolean0);
      
      Base64 base64_0 = new Base64(184, byteArray1);
      base64_0.readResults(byteArray0, (byte) (-101), 4927);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      assertEquals(6, byteArray2.length);
      
      byte[] byteArray3 = base64_0.encode(byteArray1);
      Base64.encodeBase64Chunked(byteArray3);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      base64_0.decode((Object) "");
      bigInteger1.add(bigInteger0);
      byte[] byteArray4 = Base64.encodeInteger(bigInteger0);
      assertEquals(0, byteArray4.length);
      
      Base64.encodeBase64(byteArray3, true, true);
      byte[] byteArray5 = Base64.CHUNK_SEPARATOR;
      boolean boolean2 = Base64.isBase64((byte) (-120));
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)28;
      Base64 base64_0 = new Base64(3086, byteArray0, false);
      int int0 = base64_0.readResults(byteArray0, (byte) (-95), (byte) (-95));
      assertEquals(0, int0);
      
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("oQAc\uFFFD\u0000\u001C", string0);
      
      byte[] byteArray1 = base64_0.decode("n-Y[Z9sp?J_/Hr~p");
      base64_0.decode((Object) "n-Y[Z9sp?J_/Hr~p");
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray2);
      Base64.encodeBase64(byteArray0);
      Base64 base64_1 = new Base64(false);
      Object object0 = new Object();
      boolean boolean0 = base64_0.hasData();
      assertFalse(boolean0);
      
      String string1 = Base64.encodeBase64URLSafeString(byteArray1);
      assertEquals("n-YZ9spJ__Hr", string1);
      
      Base64.encodeBase64(byteArray0, true, true, 73);
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      assertArrayEquals(new byte[] {(byte)111, (byte)81, (byte)65, (byte)99}, byteArray3);
      assertEquals(6, byteArray2.length);
      assertEquals(4, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)28;
      Base64 base64_0 = new Base64(3086, byteArray0, false);
      base64_0.readResults(byteArray0, (byte) (-95), (byte) (-95));
      String string0 = base64_0.encodeToString(byteArray0);
      //  // Unstable assertion: assertEquals("oQAc\uFFFD\u0000\u001C", string0);
      
      byte[] byteArray1 = base64_0.decode("n-Y[Z9sp?J_/Hr~p");
      base64_0.decode((Object) "n-Y[Z9sp?J_/Hr~p");
      Base64.isBase64("");
      byte[] byteArray2 = Base64.decodeBase64("n-Y[Z9sp?J_/Hr~p");
      Base64.isBase64(byteArray1);
      int int0 = base64_0.readResults(byteArray0, (byte)0, (-223));
      //  // Unstable assertion: assertEquals((-1), int0);
      
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      byte[] byteArray4 = base64_0.encode(byteArray0);
      byte[] byteArray5 = Base64.encodeBase64Chunked(byteArray3);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      base64_0.decode((Object) "");
      bigInteger0.add(bigInteger1);
      byte[] byteArray6 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray7 = Base64.encodeBase64(byteArray4, true, false);
      //  // Unstable assertion: assertEquals(14, byteArray7.length);
      
      Base64.encodeInteger(bigInteger0);
      Base64.isBase64((byte) (-99));
      boolean boolean0 = Base64.isArrayByteBase64(byteArray5);
      //  // Unstable assertion: assertEquals(14, byteArray5.length);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-97), (byte) (-26), (byte)25, (byte) (-10), (byte) (-54), (byte)73, (byte) (-1), (byte) (-15), (byte) (-21)}, byteArray3);
      
      byte[] byteArray8 = Base64.encodeBase64Chunked(byteArray6);
      //  // Unstable assertion: assertEquals(0, byteArray8.length);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = "B3<X5,l5";
      byte[] byteArray0 = Base64.decodeBase64("B3<X5,l5");
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(38, byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0007u\uFFFD\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte) (-62);
      byteArray0[5] = (byte)117;
      Base64.decodeBase64("[pY}C?_$_{J>.Jb{");
      byteArray0[6] = (byte) (-41);
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte)0;
      try { 
        base64_0.encode((Object) "[pY}C?_$_{J>.Jb{");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = new byte[0];
      String string0 = Base64.encodeBase64URLSafeString(byteArray2);
      assertEquals("", string0);
      
      Base64 base64_1 = new Base64((byte)18, byteArray2);
      assertFalse(base64_1.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Base64 base64_0 = new Base64(2900);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)23;
      byteArray0[5] = (byte)36;
      String string0 = Base64.encodeBase64String(byteArray0);
      //  // Unstable assertion: assertEquals("7QAAARck", string0);
      
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)0;
      base64_0.decode((Object) "7QAAARck");
      String string1 = base64_0.encodeToString(byteArray1);
      //  // Unstable assertion: assertEquals("AA==\uFFFD\u0000", string1);
      
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)4;
      byteArray2[1] = (byte)66;
      byteArray2[2] = (byte) (-56);
      base64_0.decode(byteArray1, (int) (byte)0, (int) (byte)36);
      byte[] byteArray3 = new byte[9];
      byteArray3[0] = (byte)19;
      byteArray3[1] = (byte)23;
      byteArray3[2] = (byte)66;
      byteArray3[3] = (byte)36;
      byteArray3[4] = (byte)0;
      byteArray3[5] = (byte)1;
      byteArray3[6] = (byte)0;
      byteArray3[7] = (byte) (-56);
      byteArray3[8] = (byte)0;
      byte[] byteArray4 = Base64.encodeBase64URLSafe(byteArray3);
      //  // Unstable assertion: assertEquals(12, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte) (-62);
      byteArray0[5] = (byte)117;
      byteArray0[6] = (byte) (-41);
      base64_0.decode(byteArray0, (-1), (-374));
      Base64.encodeBase64(byteArray0, false, true, 82);
      int int0 = base64_0.avail();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[0];
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("", string0);
      
      byte[] byteArray1 = Base64.decodeBase64("hesz`I@z2D[\"F2?(`");
      assertEquals(7, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-123), (byte) (-21), (byte)51, (byte)35, (byte)61, (byte) (-125), (byte)23}, byteArray1);
      
      base64_0.decode(byteArray0, (-1270), (-1270));
      base64_0.avail();
      byte[] byteArray2 = base64_0.encode(byteArray0);
      base64_0.decode(byteArray0, 21, (-1853));
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false, true, 8184);
      assertEquals(0, byteArray3.length);
      
      base64_0.avail();
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Base64 base64_0 = new Base64(104);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)73;
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64("hesz`I@z2D[\"F2?(`");
      base64_0.decode(byteArray0, (-1270), (-1270));
      base64_0.avail();
      base64_0.encode(byteArray0);
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)21;
      byteArray2[1] = (byte)113;
      byteArray2[2] = (byte) (-86);
      byteArray2[3] = (byte)52;
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      assertNotSame(byteArray3, byteArray1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte)50;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-94);
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)116;
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte)109;
      byteArray1[8] = (byte) (-58);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      assertEquals(2, byteArray2.length);
      assertArrayEquals(new byte[] {(byte) (-38), (byte) (-39)}, byteArray2);
      
      Base64 base64_0 = new Base64(false);
      int int0 = base64_0.avail();
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("AA", string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0, (-1313), (-1313));
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-90);
      Base64.isArrayByteBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray1, (int) (byte)0, (int) (byte) (-90));
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray2 = base64_0.decode(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      base64_0.decode(byteArray3);
      base64_0.readResults(byteArray0, (byte)0, (byte) (-90));
      Base64.isBase64((byte) (-90));
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.add(bigInteger1);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0, (int) (byte)0, (-3719));
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[4];
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.floatValue();
      String string0 = "";
      base64_0.decode("");
      Base64.toIntegerBytes(bigInteger0);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      Base64.decodeBase64("");
      base64_0.encode(byteArray0, (int) (byte)0, 0);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-108);
      base64_0.decode(byteArray0);
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)112;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [NQp]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64((byte)8);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)8, (int) (byte)8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte) (-62);
      byteArray0[5] = (byte)117;
      byteArray0[6] = (byte) (-41);
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte)0;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)0, 81);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 5696, 5696);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5696
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = 1;
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-128);
      Base64 base64_0 = new Base64(1, byteArray0, false);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 2598, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2598
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, (-3558), 70);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = base64_0.encode((byte[]) null);
      assertFalse(base64_0.isUrlSafe());
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-26));
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray0);
      
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = Base64.encodeBase64URLSafeString((byte[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("|}(6+PB9E[p");
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-21), (byte) (-29), (byte) (-63), (byte) (-12), (byte)74}, byteArray0);
      
      Base64 base64_0 = new Base64(false);
      base64_0.avail();
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Base64 base64_0 = new Base64();
      int int0 = base64_0.avail();
      assertEquals(0, int0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)37;
      byteArray1[1] = (byte)37;
      byteArray1[2] = (byte)15;
      byteArray1[3] = (byte) (-41);
      byteArray1[4] = (byte) (-33);
      byteArray1[5] = (byte)15;
      byteArray1[6] = (byte) (-1);
      byteArray1[7] = (byte) (-41);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      assertEquals((short)0, bigInteger0.shortValue());
      
      base64_0.encode(byteArray0, (int) (byte)117, (int) (byte) (-41));
      boolean boolean0 = Base64.isBase64((byte)117);
      boolean boolean1 = base64_0.hasData();
      assertTrue(boolean1 == boolean0);
      assertTrue(base64_0.isUrlSafe());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)74;
      byte byte0 = (byte)116;
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte)16;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(3430);
      BigInteger bigInteger1 = bigInteger0.nextProbablePrime();
      base64_0.hasData();
      base64_0.decode(byteArray0);
      bigInteger0.toString();
      base64_0.readResults(byteArray1, (-2199), 63);
      base64_0.decode(byteArray1, 0, (int) (byte)48);
      bigInteger0.min(bigInteger1);
      Base64.toIntegerBytes(bigInteger0);
      try { 
        base64_0.encode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte) (-120);
      byteArray0[5] = (byte)112;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64();
      boolean boolean0 = true;
      Base64.decodeInteger(byteArray0);
      Base64.encodeBase64(byteArray1);
      Base64 base64_1 = new Base64(true);
      Object object0 = new Object();
      try { 
        base64_1.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[2];
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      base64_0.encodeToString(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      byteArray0[0] = (byte)1;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte)1;
      byteArray1[2] = (byte)1;
      byteArray1[3] = (byte)1;
      byteArray1[4] = (byte)1;
      byteArray1[5] = (byte)1;
      byteArray1[6] = (byte)1;
      byteArray1[7] = (byte)1;
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray2 = base64_0.decode(byteArray1);
      Base64.encodeBase64String(byteArray0);
      byteArray0[1] = (byte)1;
      byte[] byteArray3 = base64_0.decode(byteArray0);
      base64_0.readResults(byteArray0, (byte)1, (byte)1);
      byte[] byteArray4 = base64_0.decode("AQA=");
      Base64.decodeInteger(byteArray3);
      base64_0.readResults(byteArray2, (-1), (-525));
      Base64.encodeBase64(byteArray4, false, false);
      Base64.encodeBase64Chunked(byteArray1);
      try { 
        base64_0.encode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-1), byteArray0);
      base64_0.encodeToString(byteArray0);
      Base64.isBase64("g-(EB4)~][rbU.sC");
      Base64.isBase64(byteArray0);
      base64_0.isUrlSafe();
      base64_0.decode("");
      base64_0.decode(byteArray0);
      String string0 = null;
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.isBase64((byte) (-1));
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(false);
      try { 
        base64_0.decode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64(2);
      byte[] byteArray1 = base64_0.decode(".T6,gy#a\u0003vmmH");
      assertEquals(6, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)79, (byte) (-88), (byte)50, (byte)106, (byte) (-7), (byte) (-90)}, byteArray1);
      
      int int0 = base64_0.readResults(byteArray0, 2, 2);
      assertFalse(base64_0.isUrlSafe());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)9;
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      assertArrayEquals(new byte[] {(byte)120}, byteArray1);
      
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)76;
      byteArray2[1] = (byte)76;
      byteArray2[2] = (byte)123;
      byteArray2[3] = (byte)101;
      byteArray2[4] = (byte) (-35);
      byteArray2[5] = (byte) (-1);
      byteArray2[6] = (byte)9;
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      assertArrayEquals(new byte[] {(byte)76, (byte)76, (byte)123, (byte)101, (byte) (-35), (byte) (-1)}, byteArray3);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("1ES-8:>~Iy");
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-44), (byte)68, (byte) (-66), (byte) (-16), (byte) (-116)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("", string0);
      
      boolean boolean0 = Base64.isBase64("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(8, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Base64 base64_0 = new Base64(1426);
      byte[] byteArray0 = new byte[3];
      base64_0.decode((String) null);
      Base64.encodeBase64(byteArray0, true, false, 64);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)62;
      Base64.decodeBase64(byteArray0);
      byte[] byteArray1 = new byte[0];
      base64_0.decode(byteArray1, 1426, 0);
      base64_0.readResults(byteArray1, 1426, 0);
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)1;
      byteArray2[1] = (byte)117;
      byteArray2[2] = (byte) (-60);
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte) (-1);
      byteArray2[5] = (byte) (-1);
      byteArray2[6] = (byte)44;
      byteArray2[7] = (byte)91;
      Base64.isBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Base64.decodeBase64("org.apache.commons.codec.binary.Base64");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64 base64_0 = new Base64();
      try { 
        base64_0.encode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Base64.decodeBase64("*'Ywr");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("B3<X5,l5");
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64(76, (byte[]) null);
      Base64.decodeBase64((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Base64.encodeBase64(byteArray0, false);
      Base64 base64_0 = new Base64();
      base64_0.avail();
      byte[] byteArray1 = base64_0.decode("UTF-8");
      Base64.encodeBase64String(byteArray1);
      base64_0.decode(byteArray0, (int) (byte)118, (int) (byte)39);
      base64_0.decode(byteArray0);
      base64_0.decode("#n#6PhYC?p");
      byte[] byteArray2 = Base64.decodeBase64("UTF-8");
      Base64.isBase64(byteArray2);
      base64_0.decode(byteArray1);
      base64_0.encode(byteArray2, (int) (byte)39, (-548));
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)105);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      int int0 = (-1313);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-1313), byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [Cg==]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-15);
      byteArray0[6] = (byte)22;
      byteArray0[7] = (byte)78;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(2380, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD%\u0000\uFFFD\uFFFD\uFFFD\u0016N]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.shiftLeft(8180);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      bigInteger1.negate();
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64 base64_0 = new Base64(74, byteArray0);
      base64_0.encode(byteArray1);
      base64_0.encode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = Base64.decodeBase64("TjShOaY");
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Base64.decodeBase64("#\"S>=lpJ");
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of 2
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Base64 base64_0 = new Base64(2900);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)23;
      byteArray0[5] = (byte)36;
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)0;
      base64_0.decode((Object) "7QAAARck");
      base64_0.encodeToString(byteArray1);
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)4;
      byteArray2[1] = (byte)66;
      byteArray2[2] = (byte) (-56);
      byteArray2[3] = (byte) (-26);
      base64_0.decode(byteArray2, (-86), 94);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, false, false, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of 1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Base64 base64_0 = new Base64((-902));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte)111;
      byteArray0[6] = (byte)54;
      base64_0.encodeToString(byteArray0);
      base64_0.decode("");
      base64_0.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray0);
      base64_0.encode(byteArray0, (int) (byte)0, (-3719));
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[0];
      base64_0.decode("encodeInteger called with null parameter");
      base64_0.encode(byteArray0, 1057, (-568));
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      Base64.decodeInteger(byteArray0);
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)15;
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0, (-314), (-3719));
      base64_0.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte) (-42));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.readResults((byte[]) null, 1006, 1006);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte) (-42);
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte)38;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.readResults(byteArray0, 0, (byte)58);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger0);
      base64_0.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64 base64_0 = new Base64(false);
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte) (-80);
      Base64.decodeBase64(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(false);
      try { 
        base64_0.encode((Object) "p6]Sz%rA3|`zk");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
      Object object0 = base64_0.decode((Object) "");
      base64_0.decode(object0);
      Base64.decodeBase64("hesz`I@z2D[\"F2?(`");
      base64_0.decode(byteArray0, (-1270), (-1270));
      base64_0.avail();
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.decodeInteger(byteArray1);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64 base64_0 = new Base64();
      try { 
        base64_0.decode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Base64 base64_0 = new Base64(63);
      base64_0.encode((byte[]) null);
      Base64.encodeBase64((byte[]) null);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 82, 82);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64String(byteArray0);
      base64_0.decode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64();
      base64_0.encodeToString(byteArray0);
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64.encodeBase64Chunked((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64((-1309), (byte[]) null);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.decode((Object) "!s%j4=.<");
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64 base64_0 = new Base64();
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
      base64_0.encodeToString(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.decodeBase64("[VWYWZ')y05J.gf?.l");
      Object object0 = new Object();
      base64_0.encodeToString(byteArray1);
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertSame(byteArray1, byteArray0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Base64.isBase64((byte)0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61, (byte)13, (byte)10}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      boolean boolean0 = Base64.isBase64((byte) (-1));
      assertFalse(boolean0);
      
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(10, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(14, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)68, (byte)81, (byte)111, (byte)61}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("AAAAAAA", string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Base64 base64_0 = new Base64(6);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)10;
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertEquals(12, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("AAAAAAAA", string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Base64 base64_0 = new Base64(16);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      assertEquals(10, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)69, (byte)118, (byte)65, (byte)65, (byte)65, (byte)61, (byte)13, (byte)10}, byteArray1);
  }
}
