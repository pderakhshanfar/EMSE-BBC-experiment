/*
 * This file was automatically generated by EvoSuite
 * Thu Feb 25 23:56:14 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      BigInteger bigInteger0 = BigInteger.probablePrime(3054, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64(byteArray0, true);
      base64_0.decode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0, (int) (byte)2, (int) (byte)2);
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.encode(byteArray0, (int) (byte)2, (int) (byte)2);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 1, 3918);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = 3054;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      BigInteger bigInteger0 = BigInteger.probablePrime(3054, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64URLSafe(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 3054, 3054);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3054
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      BigInteger bigInteger0 = BigInteger.probablePrime(3054, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64URLSafe(byteArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[28];
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(14, byteArray0, true);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 14, 2021161080);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 28
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(44, byteArray0, true);
      Object object0 = base64_0.decode((Object) ":Y'J6W3g9qNs(jjO");
      // Undeclared exception!
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      BigInteger bigInteger0 = BigInteger.probablePrime(3037, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(true);
      Base64 base64_1 = new Base64();
      base64_1.decode(byteArray0, 68, 8189);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0, (int) (byte)2, (int) (byte)2);
      base64_0.encode(byteArray0, (int) (byte)2, (int) (byte)2);
      base64_0.encode(byteArray0, 76, (-1884));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.isBase64((byte)61);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64((byte)116, byteArray0, false);
      base64_0.decode(byteArray1, 2, (int) (byte)70);
      base64_0.encode(byteArray1, (int) (byte)116, (int) (byte)70);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.shortValueExact();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false, (int) (short)10);
      Base64.encodeBase64(byteArray1, true, true, 71);
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)110;
      byteArray2[1] = (byte) (-113);
      byteArray2[2] = (byte)42;
      byteArray2[3] = (byte)34;
      byteArray2[4] = (byte)124;
      byteArray2[5] = (byte) (-94);
      byteArray2[6] = (byte) (-104);
      byteArray2[7] = (byte) (-88);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-1188), byteArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [n\uFFFD*\"|\uFFFD\uFFFD\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte) (-101);
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)9;
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      base64_0.decode(byteArray1, 1, (int) (byte)116);
      base64_0.encode(byteArray0, (int) (byte)116, 1);
      base64_0.readResults(byteArray1, 1, 27);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64 base64_0 = new Base64((byte)60);
      Base64.discardWhitespace(byteArray0);
      Base64 base64_1 = new Base64();
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)60;
      byteArray2[1] = (byte)60;
      byteArray2[2] = (byte)60;
      byteArray2[3] = (byte)60;
      byteArray2[4] = (byte)86;
      byteArray2[5] = (byte)60;
      Base64.encodeBase64Chunked(byteArray0);
      base64_1.decode(byteArray1, 1, 64);
      base64_0.avail();
      byte[] byteArray3 = new byte[9];
      byteArray3[0] = (byte)116;
      byteArray3[1] = (byte)86;
      byteArray3[2] = (byte)70;
      byteArray3[1] = (byte)86;
      byteArray3[4] = (byte)29;
      byteArray3[5] = (byte)70;
      byteArray3[6] = (byte) (-32);
      byteArray3[7] = (byte)60;
      byteArray3[8] = (byte)60;
      Base64.encodeBase64(byteArray3);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0, (-1884), (-922));
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, (-922), (-922));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)13, (byte)10}, byteArray2);
      assertEquals(10, byteArray2.length);
      
      base64_0.encode(byteArray1, (int) (byte)2, (int) (byte)2);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger0);
      base64_0.encode(byteArray0, (int) (byte)2, (-2589));
      base64_0.readResults(byteArray0, 0, 0);
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      base64_0.decode(byteArray3, 2495, 0);
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      base64_0.encode(byteArray1, (int) (byte)2, (int) (byte)2);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger0);
      base64_0.encode(byteArray0, (int) (byte)2, (-2589));
      base64_0.readResults(byteArray0, 0, 0);
      Base64.discardWhitespace(byteArray2);
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      
      Object object0 = new Object();
      Base64 base64_1 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte) (-9);
      byteArray0[5] = (byte)124;
      byteArray0[6] = (byte)113;
      byteArray0[7] = (byte)28;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 0, 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64Chunked(byteArray1);
      base64_0.encode(byteArray1, (int) (byte)2, (int) (byte)2);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger0);
      base64_0.encode(byteArray0, (int) (byte)2, (-2589));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64();
      Base64.isBase64(byteArray0);
      Base64.encodeBase64((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Base64.encodeBase64((byte[]) null, true, false);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64(10, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.encodeToString(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      byte[] byteArray3 = Base64.decodeBase64(byteArray2);
      Base64.discardWhitespace(byteArray3);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Random.setNextRandom(64);
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 95, 95);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, true);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      base64_0.decode(byteArray3, (int) (byte)2, (int) (byte)70);
      base64_0.avail();
      base64_0.encode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Base64.decodeBase64((byte[]) null);
      Base64 base64_0 = new Base64((-3630), (byte[]) null, false);
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte) (-49);
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte)31;
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte)80;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (-1575), (int) (byte)3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1575
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(70L);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte)27;
      byteArray0[5] = (byte)115;
      byteArray0[6] = (byte)41;
      byteArray0[7] = (byte)23;
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(14, byteArray0, false);
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.EncoderException");
      assertEquals(27, byteArray0.length);
      
      Base64 base64_0 = new Base64();
      base64_0.decode((Object) "org.apache.commons.codec.EncoderException");
      Base64.encodeBase64Chunked((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)63;
      Base64.isBase64((byte)63);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64((-518));
      base64_0.decode(byteArray1, (int) (byte)63, (-518));
      byte[] byteArray2 = base64_0.decode(byteArray1);
      byte[] byteArray3 = new byte[6];
      byteArray3[0] = (byte)63;
      Base64.encodeBase64URLSafeString(byteArray2);
      byte[] byteArray4 = Base64.decodeBase64(byteArray2);
      byte[] byteArray5 = Base64.discardWhitespace(byteArray1);
      Base64 base64_1 = new Base64();
      base64_0.decode(byteArray5);
      Base64.isBase64((byte)123);
      Base64.decodeBase64(byteArray4);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray1, (-500), 0);
      Base64 base64_1 = new Base64(false);
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray1, (int) (byte)2, 480);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(boolean0);
      
      Base64 base64_0 = new Base64(true);
      assertTrue(base64_0.isUrlSafe());
      
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Object object0 = new Object();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true);
      byteArray0[3] = (byte)51;
      Base64.encodeBase64(byteArray1, true, false);
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)70;
      byteArray0[7] = (byte) (-32);
      byteArray0[8] = (byte)116;
      Base64.encodeBase64Chunked(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, (int) (byte)1, (int) (byte)51);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)63;
      Base64.isBase64((byte)63);
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.isBase64((byte)63);
      base64_0.decode((byte[]) null);
      base64_0.decode((Object) "UTF-16LE");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.abs();
      bigInteger0.shiftRight(101);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      base64_0.avail();
      Base64.encodeBase64(byteArray0, true, true);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.or(bigInteger1);
      BigInteger.valueOf(115L);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false);
      Base64 base64_0 = new Base64(342, byteArray0, true);
      base64_0.isUrlSafe();
      Base64.encodeBase64(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, 342, 342);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 342
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
      
      BigInteger bigInteger1 = BigInteger.TEN;
      Base64 base64_0 = new Base64((-3630), byteArray0, true);
      base64_0.isUrlSafe();
      base64_0.decode(byteArray0, 1, (-3630));
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)58;
      Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)58;
      byteArray1[1] = (byte)58;
      byteArray1[2] = (byte)58;
      byteArray1[3] = (byte)58;
      byteArray1[4] = (byte)13;
      byteArray1[5] = (byte)58;
      Base64.discardWhitespace(byteArray1);
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray1, (int) (byte)13, (-773));
      base64_0.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)42;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64(8176, byteArray1);
      base64_0.decode("tL.s+x&CcbuPE3RKaJa");
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray3 = new byte[6];
      byteArray3[0] = (byte)15;
      byteArray3[1] = (byte)2;
      byteArray3[2] = (byte)42;
      byteArray3[3] = (byte)15;
      byteArray3[4] = (byte)15;
      byteArray3[5] = (byte)2;
      Base64.encodeBase64(byteArray3, false, false, 78);
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)89;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      Base64 base64_1 = new Base64();
      // Undeclared exception!
      try { 
        base64_1.decode(byteArray2, (int) (byte)0, 8180);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)58;
      Base64 base64_0 = new Base64(382, byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-108);
      byteArray1[1] = (byte)58;
      byteArray1[2] = (byte)58;
      byteArray1[3] = (byte)58;
      base64_0.encodeToString(byteArray1);
      byte byte0 = (byte)127;
      Base64 base64_1 = new Base64(8180);
      Base64.decodeBase64(byteArray0);
      // Undeclared exception!
      try { 
        base64_1.decode(byteArray1, 0, 2218);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64.isArrayByteBase64(byteArray1);
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false);
      byte[] byteArray4 = Base64.encodeBase64(byteArray0, false);
      Base64 base64_1 = new Base64(true);
      base64_1.encode(byteArray3);
      base64_0.avail();
      Base64.isBase64((byte)124);
      base64_1.readResults(byteArray4, 18, 8192);
      base64_0.encodeToString(byteArray2);
      Base64.encodeBase64(byteArray1, false);
      base64_0.decode(byteArray1, 8192, 69);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(1, byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte byte0 = (byte)127;
      Base64.isBase64((byte)127);
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte)127;
      int int0 = (-2163);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (-2163), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2163
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-43);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray1, 830, (int) (byte) (-96));
      Base64.isBase64((byte) (-96));
      Base64.isBase64(byteArray1);
      Base64 base64_1 = new Base64();
      Base64.encodeBase64(byteArray0);
      String string0 = "sz<Qm%[3#06\\557";
      byte[] byteArray2 = base64_0.decode(byteArray1);
      base64_0.encode(byteArray2, 64, (int) (byte) (-96));
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, false);
      Base64.isBase64("sz<Qm%[3#06-7");
      base64_1.decode(byteArray0, (-377), (-730));
      Base64.encodeBase64String(byteArray3);
      byte[] byteArray4 = Base64.encodeBase64(byteArray3);
      Base64.decodeBase64(byteArray4);
      Object object0 = null;
      try { 
        base64_1.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-43);
      byteArray0[3] = (byte)124;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64.isArrayByteBase64(byteArray0);
      Base64.decodeInteger(byteArray1);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, false);
      Base64.encodeBase64(byteArray2, false);
      base64_0.encode(byteArray0);
      base64_0.avail();
      Base64.isBase64((byte)91);
      base64_0.readResults(byteArray1, 18, (byte) (-96));
      Base64.encodeBase64(byteArray3, true);
      byte[] byteArray4 = base64_0.encode((byte[]) null);
      assertNull(byteArray4);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)3;
      byteArray0[0] = (byte)3;
      byte byte1 = (byte) (-43);
      Base64.encodeBase64((byte[]) null, false);
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[2];
      Base64 base64_1 = new Base64(64, byteArray0);
      String string0 = "";
      base64_1.decode("");
      Base64.encodeBase64URLSafe((byte[]) null);
      byte byte0 = (byte) (-1);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)43, 260);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 43
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-91);
      byte byte0 = (byte)7;
      byteArray0[2] = (byte)7;
      byte byte1 = (byte) (-8);
      byteArray0[3] = (byte) (-8);
      byte byte2 = (byte) (-63);
      byteArray0[4] = (byte) (-63);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.clearBit(5);
      bigInteger1.shiftRight((byte) (-91));
      BigInteger bigInteger2 = bigInteger0.not();
      bigInteger0.divideAndRemainder(bigInteger1);
      bigInteger0.and(bigInteger2);
      bigInteger0.toString();
      Base64.toIntegerBytes(bigInteger0);
      Base64.decodeInteger(byteArray1);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)7, byteArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [AKUH-ME]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)43;
      base64_0.encodeToString(byteArray1);
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)127;
      Base64.decodeBase64(byteArray0);
      base64_0.encode(byteArray0, 0, 0);
      Base64.isBase64((byte)43);
      Base64.isBase64(byteArray0);
      Base64 base64_1 = new Base64();
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      byte[] byteArray3 = base64_1.decode(byteArray2);
      base64_0.encode(byteArray3, (int) (byte)127, (-172));
      byte[] byteArray4 = Base64.encodeBase64(byteArray2, false);
      Base64.isBase64("sz<Qm%[3#06-7");
      base64_1.decode(byteArray4, 2351, 0);
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64(byteArray3);
      Base64.decodeBase64(byteArray4);
      try { 
        base64_1.encode((Object) base64_0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = base64_0.encode((byte[]) null);
      assertFalse(base64_0.isUrlSafe());
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)2;
      Base64 base64_0 = new Base64(3296, byteArray0);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)2, 1996);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      Base64 base64_0 = new Base64();
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("KgL_qwAAAAA", string0);
      
      base64_0.encode(byteArray0, (int) (byte) (-85), (-2930));
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)43;
      base64_0.encodeToString(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      assertEquals(0, byteArray2.length);
      
      base64_0.encode(byteArray1, (int) (byte)43, 26);
      base64_0.decode(byteArray0, 255, (-1317));
      Base64.encodeBase64(byteArray2, false, false, (-1546));
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, false);
      assertArrayEquals(new byte[] {(byte)75, (byte)119, (byte)61, (byte)61}, byteArray3);
      assertEquals(4, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)43;
      String string0 = base64_0.encodeToString(byteArray0);
      //  // Unstable assertion: assertEquals("AAA=", string0);
      
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      base64_0.encode(byteArray2, 2158, (int) (byte)14);
      //  // Unstable assertion: assertEquals(0, byteArray2.length);
      
      base64_0.decode(byteArray1, 88, (-1862));
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, false, false, (int) (byte)43);
      byte[] byteArray4 = Base64.encodeBase64(byteArray3, true);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)83, (byte)51, (byte)99, (byte)57, (byte)80, (byte)81, (byte)61, (byte)61, (byte)0, (byte)0}, byteArray4);
      //  // Unstable assertion: assertEquals(10, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)2;
      byte byte0 = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byte byte1 = (byte) (-85);
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)1;
      Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64(true);
      base64_0.decode(byteArray0, (int) (byte)2, (-2744));
      Base64.isBase64("lineSeperator must not contain base64 characters: [");
      String string0 = null;
      base64_0.decode((String) null);
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Base64 base64_0 = new Base64((byte)60);
      assertFalse(base64_0.isUrlSafe());
      
      boolean boolean0 = Base64.isBase64("Parameter supplied to Base64 encode is not a byte[]");
      boolean boolean1 = Base64.isBase64((byte)60);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, 94, 94);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)1;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      assertEquals(14, byteArray1.length);
      
      Base64 base64_0 = new Base64(true);
      base64_0.decode(byteArray0, (int) (byte)2, (-2744));
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte) (-1);
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)2;
      byteArray2[4] = (byte)2;
      byteArray2[5] = (byte) (-1);
      byteArray2[6] = (byte) (-85);
      byteArray2[7] = (byte)2;
      byteArray2[8] = (byte)2;
      BigInteger bigInteger0 = new BigInteger(byteArray2);
      bigInteger0.floatValue();
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)2, (byte)2, (byte) (-1), (byte) (-85), (byte)2, (byte)2}, byteArray3);
      
      byte[] byteArray4 = new byte[0];
      base64_0.encode(byteArray4);
      byte[] byteArray5 = Base64.encodeBase64(byteArray4, false);
      byte[] byteArray6 = base64_0.encode(byteArray4);
      assertSame(byteArray6, byteArray5);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.isBase64("^ T9pKN<T!]RpMf");
      Base64.decodeBase64("GY3&'O/Swv-_Ygt7");
      base64_0.encode(byteArray1, 8184, (int) (byte)0);
      base64_0.encode(byteArray1, (int) (byte)89, (int) (byte)0);
      Base64.encodeBase64URLSafe(byteArray1);
      Random.setNextRandom(64);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[2];
      base64_0.encodeToString(byteArray0);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-68);
      base64_0.encode(byteArray0, 94, (int) (byte) (-68));
      Base64.decodeBase64("");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)76, (byte)119, (byte)61}, byteArray1);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)43;
      String string0 = base64_0.encodeToString(byteArray1);
      assertEquals("Kw==", string0);
      
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)127;
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      base64_0.encode(byteArray0, 0, 0);
      base64_0.decode(byteArray0, (int) (byte)14, 0);
      byte[] byteArray3 = new byte[6];
      byteArray3[0] = (byte)43;
      byteArray3[1] = (byte)14;
      byteArray3[2] = (byte)127;
      byteArray3[3] = (byte)127;
      byteArray3[4] = (byte)14;
      byteArray3[5] = (byte)43;
      String string1 = Base64.encodeBase64String(byteArray2);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 8152, 8152);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8152
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      Base64 base64_0 = new Base64();
      int int0 = 2271;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 2271, 2303);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2271
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-1);
      byte[] byteArray1 = new byte[0];
      Base64.encodeBase64(byteArray1, true);
      Base64 base64_1 = new Base64(false);
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte) (-90);
      byteArray2[1] = (byte) (-90);
      byteArray2[2] = (byte)1;
      byteArray2[3] = (byte)1;
      base64_0.decode(byteArray2, (-2994), (int) (byte)0);
      String string0 = null;
      base64_1.decode((String) null);
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)58;
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte2 = (byte)89;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)0;
      byte byte3 = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byte byte4 = (byte)0;
      byteArray0[6] = (byte)0;
      byte byte5 = (byte)22;
      byteArray0[7] = (byte)22;
      byteArray0[8] = (byte)11;
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 1, 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      Base64 base64_0 = new Base64();
      Base64.decodeBase64(byteArray0);
      base64_0.decode((String) null);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.encodeBase64((byte[]) null, false, true, (int) (byte)58);
      Base64.encodeBase64String(byteArray0);
      base64_0.isUrlSafe();
      base64_0.decode("");
      int int0 = Base64.MIME_CHUNK_SIZE;
      assertEquals(76, int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      Base64.encodeBase64URLSafe(byteArray0);
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0);
      int int0 = base64_0.readResults(byteArray0, 2752, (-2154));
      assertEquals((-1), int0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-43);
      byteArray0[3] = (byte)124;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      //  // Unstable assertion: assertEquals((short) (-10884), bigInteger0.shortValue());
      
      Base64 base64_0 = new Base64(true);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, false);
      byte[] byteArray4 = Base64.encodeBase64(byteArray2, false);
      //  // Unstable assertion: assertEquals(8, byteArray4.length);
      
      base64_0.encode(byteArray0);
      int int0 = base64_0.avail();
      //  // Unstable assertion: assertEquals(0, int0);
      
      boolean boolean1 = Base64.isBase64((byte)91);
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      
      int int1 = base64_0.readResults(byteArray1, 18, (byte) (-96));
      //  // Unstable assertion: assertEquals((-1), int1);
      
      String string0 = base64_0.encodeToString(byteArray3);
      //  // Unstable assertion: assertEquals("b0Z2VmZBPT0\u0000\u0000", string0);
      
      byte[] byteArray5 = Base64.encodeBase64(byteArray3, false);
      base64_0.decode(byteArray0, (int) (byte)91, (-3063));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray5);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte) (-11);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 64, 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 64
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)22;
      byteArray0[8] = (byte)11;
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0, 1, 1);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (-590), 644);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -590
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      boolean boolean0 = Base64.isArrayByteBase64(byteArray2);
      assertTrue(boolean0);
      
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64();
      String string0 = base64_0.encodeToString(byteArray1);
      String string1 = Base64.encodeBase64URLSafeString(byteArray1);
      assertTrue(string1.equals((Object)string0));
      
      byte[] byteArray3 = Base64.decodeBase64(byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertSame(byteArray3, byteArray1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Base64 base64_0 = new Base64((-1713));
      boolean boolean0 = base64_0.isUrlSafe();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64((String) null);
      assertNull(byteArray0);
      
      Base64 base64_0 = new Base64((-1713));
      boolean boolean0 = base64_0.isUrlSafe();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte byte0 = (byte) (-80);
      Base64.isBase64((byte) (-80));
      Base64 base64_0 = new Base64(true);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        bigInteger0.compareTo((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      assertTrue(base64_0.isUrlSafe());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)104;
      byteArray0[5] = (byte) (-126);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)1;
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("hhcAS2iCAAE", string0);
      
      int int0 = base64_0.avail();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Base64 base64_0 = new Base64(109);
      byte[] byteArray0 = new byte[5];
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-89);
      byteArray1[1] = (byte) (-78);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)19;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte)1;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false);
      assertEquals(12, byteArray2.length);
      
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)88;
      bigInteger0.floatValue();
      byteArray0[4] = (byte)1;
      base64_0.decode(byteArray0, 46, 0);
      BigInteger.valueOf((-2649L));
      String string0 = Base64.encodeBase64URLSafeString(byteArray3);
      assertEquals("", string0);
      
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray3);
      assertSame(byteArray4, byteArray3);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Base64 base64_0 = new Base64((-980));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)99;
      byteArray0[7] = (byte)48;
      byteArray0[8] = (byte)56;
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-113);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      assertEquals(3, byteArray2.length);
      
      byte[] byteArray3 = base64_0.decode("9^:8Zt:X3K*dejLpE");
      byte[] byteArray4 = Base64.encodeBase64URLSafe(byteArray3);
      assertArrayEquals(new byte[] {(byte) (-9), (byte) (-58), (byte)109, (byte)95, (byte)114, (byte) (-99), (byte)122, (byte)50, (byte) (-23)}, byteArray3);
      assertEquals(12, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of 5
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Base64.isBase64("");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)100;
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte1 = (byte) (-93);
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)0;
      byte byte2 = (byte) (-74);
      byteArray0[4] = (byte) (-74);
      byteArray0[5] = (byte) (-28);
      byte byte3 = (byte)108;
      byteArray0[6] = (byte)108;
      byte byte4 = (byte)69;
      byteArray0[7] = (byte)69;
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(3036, byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [d\u0000\uFFFD\u0000\uFFFD\uFFFDlE]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      base64_0.decode(byteArray0, (int) (byte) (-90), (int) (byte)0);
      boolean boolean0 = base64_0.hasData();
      assertFalse(boolean0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Base64.isBase64("");
      int int0 = 1585;
      Base64 base64_0 = new Base64(1585);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte) (-9);
      byteArray0[3] = (byte) (-32);
      Base64.encodeBase64(byteArray0);
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      boolean boolean0 = Base64.isBase64(byteArray1);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)61, (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0, (-2054), (-3));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      
      boolean boolean0 = base64_0.isUrlSafe();
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)9;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((short)91, bigInteger0.shortValue());
      
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-17), (byte)96, (byte)87, (byte)47}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-34);
      byteArray0[5] = (byte) (-110);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)95;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertEquals(0, byteArray1.length);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(1, byteArray2.length);
      
      byte[] byteArray3 = Base64.discardWhitespace(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-17), (byte)0, (byte) (-34), (byte) (-110), (byte)0, (byte)95}, byteArray3);
      assertEquals(8, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = 0;
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      Base64.decodeBase64(byteArray0);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte) (-7);
      byteArray0[7] = (byte)50;
      byteArray0[8] = (byte)82;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      assertEquals(14, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)13;
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("CA0=", string0);
      
      Base64 base64_0 = new Base64((byte)8, byteArray0, false);
      boolean boolean0 = Base64.isBase64("CA0=");
      assertTrue(boolean0);
      
      byte[] byteArray1 = base64_0.decode("CA0=");
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)8, (byte)13}, byteArray1);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Object object0 = base64_0.decode((Object) "");
      Object object1 = base64_0.encode(object0);
      Object object2 = base64_0.encode(object1);
      assertFalse(base64_0.isUrlSafe());
      assertSame(object2, object0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64();
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("", string0);
      
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertSame(byteArray1, byteArray0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("v9Cy'T[|e*\"%v((");
      Base64 base64_0 = new Base64((-3630));
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.isBase64("zrZN)T?;JYTz2|");
      Base64.encodeBase64URLSafeString(byteArray0);
      try { 
        base64_0.encode((Object) "zrZN)T?;JYTz2|");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0, (-604), (-604));
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray0, (-2401), (-2401));
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64 base64_0 = new Base64(0, byteArray0, false);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      String string0 = base64_0.encodeToString(byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertEquals("AAAA", string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      base64_0.decode((Object) "");
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64(197, byteArray0);
      Object object0 = base64_0.decode((Object) "");
      Object object1 = base64_0.decode(object0);
      assertSame(object1, object0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      boolean boolean0 = Base64.isBase64(byteArray0);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Base64 base64_0 = new Base64();
      try { 
        base64_0.decode((Object) base64_0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Base64 base64_0 = new Base64((-265));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)76, (byte)65, (byte)66, (byte)65, (byte)77, (byte)103, (byte)65}, byteArray1);
      
      Base64.encodeBase64((byte[]) null, true, true, (-265));
      base64_0.decode((Object) "");
      byte[] byteArray2 = base64_0.decode("");
      base64_0.decode("");
      byte[] byteArray3 = base64_0.encode(byteArray2);
      boolean boolean0 = Base64.isBase64(byteArray2);
      Base64.isBase64("");
      Base64.encodeBase64URLSafe(byteArray2);
      Base64.decodeBase64(byteArray3);
      Base64.encodeBase64URLSafe(byteArray2);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray4 = new byte[7];
      byteArray4[0] = (byte)0;
      byteArray4[1] = (byte)0;
      byteArray4[2] = (byte)0;
      byteArray4[3] = (byte)0;
      byteArray4[4] = (byte)0;
      byteArray4[5] = (byte)0;
      byteArray4[6] = (byte)0;
      boolean boolean1 = Base64.isBase64(byteArray4);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)2;
      byte byte0 = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byte byte1 = (byte) (-85);
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)1;
      Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64(true);
      base64_0.decode(byteArray0, (int) (byte)2, (-2744));
      String string0 = null;
      base64_0.decode((String) null);
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)1;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        bigInteger0.byteValueExact();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger out of byte range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("pL");
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-92)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Base64 base64_0 = new Base64((-1));
      assertFalse(base64_0.isUrlSafe());
      
      boolean boolean0 = Base64.isBase64((byte)126);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.EncoderException");
      assertEquals(27, byteArray0.length);
      
      boolean boolean0 = Base64.isBase64("org.apache.commons.codec.EncoderException");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Base64 base64_0 = new Base64();
      int int0 = base64_0.avail();
      assertEquals(0, int0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-90);
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64(byteArray0, true, true, 76);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.decodeBase64("pgAAAAA=");
      Base64.isBase64("V:J c.e?6+7DX'");
      base64_0.encodeToString(byteArray1);
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      base64_0.encode(byteArray0, (-65), (int) (byte) (-68));
      Base64 base64_1 = new Base64();
      boolean boolean0 = base64_0.hasData();
      assertTrue(boolean0);
      
      byte[] byteArray1 = base64_0.decode(byteArray0);
      assertEquals(0, byteArray1.length);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte) (-20);
      byteArray2[3] = (byte)1;
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)0;
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      assertEquals(6, byteArray3.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-20), (byte)1, (byte)0, (byte)0}, byteArray3);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64();
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("", string0);
      
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = Base64.encodeBase64Chunked((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      Base64 base64_0 = new Base64();
      base64_0.hasData();
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("org.apche.commons.codec.EncoderException");
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals(27, byteArray0.length);
      assertEquals((byte)11, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.EncoderException");
      Base64 base64_0 = new Base64(true);
      assertTrue(base64_0.isUrlSafe());
      
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray4 = base64_0.encode(byteArray2);
      int int0 = Base64.PEM_CHUNK_SIZE;
      byte[] byteArray5 = Base64.encodeBase64Chunked(byteArray4);
      assertEquals(96, byteArray5.length);
      
      int int1 = base64_0.readResults(byteArray3, 64, 562);
      assertEquals(4, byteArray3.length);
      assertEquals((-1), int1);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray3);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.isBase64((byte)0);
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
      
      Base64 base64_0 = new Base64();
      Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = base64_0.decode(byteArray1);
      base64_0.encode(byteArray2, (int) (byte)0, 3408);
      assertEquals(6, byteArray2.length);
      assertArrayEquals(new byte[] {(byte) (-10), (byte)0, (byte)0, (byte)0, (byte)1, (byte)0}, byteArray2);
      
      Base64.encodeBase64(byteArray0, false);
      Base64.isBase64("sz<Qm%[3#06-7");
      base64_0.decode(byteArray0, (-3294), (int) (byte)0);
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray1);
      Object object0 = base64_0.decode((Object) "sz<Qm%[3#06-7");
      base64_0.encode(object0);
      Base64.decodeInteger(byteArray1);
      int int0 = base64_0.avail();
      assertEquals(0, int0);
      
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray3);
      Base64.encodeBase64URLSafe(byteArray4);
      assertEquals(18, byteArray4.length);
      assertArrayEquals(new byte[] {(byte)57, (byte)103, (byte)65, (byte)65, (byte)65, (byte)65, (byte)69, (byte)65}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Base64 base64_0 = new Base64();
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)45;
      byte byte0 = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byte byte1 = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byte byte2 = (byte)122;
      byteArray0[6] = (byte)122;
      byte byte3 = (byte) (-1);
      byteArray0[7] = (byte) (-1);
      byte byte4 = (byte)15;
      byteArray0[8] = (byte)15;
      Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64((byte)45);
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = "org.apache.commons.codec.EncoderException";
      byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.EncoderException");
      Base64.isBase64(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-312), byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD\uFFFD\u001A\uFFFD\uFFFD!y\uFFFD&\uFFFD\uFFFD\uFFFDr\uFFFD^pI\u0721\u05EB\u0013\u0017\u001E\uFFFD\u0628]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)28;
      byteArray0[6] = (byte)0;
      boolean boolean0 = true;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(1453, byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000\u0001\u0000OA\u001C\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(true);
      int int0 = base64_0.readResults(byteArray0, 10, 10);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Base64 base64_0 = new Base64(1060);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      int int0 = base64_0.readResults(byteArray0, 1, (-4200));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertArrayEquals(new byte[] {(byte)68, (byte)81, (byte)111}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Wno$X7[{/,:mv");
      assertArrayEquals(new byte[] {(byte)90, (byte)122, (byte)23, (byte) (-17), (byte) (-7), (byte) (-81)}, byteArray0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61, (byte)61}, byteArray1);
      assertEquals(8, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = Base64.isBase64("nb");
      assertTrue(boolean0);
      
      byte[] byteArray0 = Base64.decodeBase64("nb");
      byte[] byteArray1 = new byte[0];
      Base64.isArrayByteBase64(byteArray1);
      Base64.isBase64((byte)102);
      Base64 base64_0 = new Base64(2887);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true);
      Base64.encodeBase64(byteArray1, true);
      base64_0.encode(byteArray1);
      base64_0.avail();
      Base64.isBase64((byte)54);
      Base64 base64_1 = new Base64((-172));
      base64_1.readResults(byteArray3, 76, 83);
      base64_0.encodeToString((byte[]) null);
      byte[] byteArray4 = Base64.encodeBase64(byteArray0, true);
      assertEquals(6, byteArray4.length);
      assertArrayEquals(new byte[] {(byte)110, (byte)81, (byte)61, (byte)61, (byte)13, (byte)10}, byteArray4);
      
      base64_0.decode(byteArray3, (-2789), (-102));
      assertArrayEquals(new byte[] {(byte) (-99)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Base64.isBase64((byte)0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-68);
      base64_0.encode(byteArray0, 94, (int) (byte) (-68));
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray1 = Base64.decodeBase64("");
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[0];
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("", string0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("[r>5y[mh^KO=>t");
      assertArrayEquals(new byte[] {(byte) (-81), (byte) (-100), (byte) (-90), (byte) (-124), (byte) (-93)}, byteArray0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertArrayEquals(new byte[] {(byte)68, (byte)81, (byte)111, (byte)61, (byte)13, (byte)10}, byteArray1);
      assertEquals(6, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertTrue(boolean0);
      
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      assertEquals(0, byteArray1.length);
      
      base64_0.encode(byteArray0, 1, 64);
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.EncoderException");
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertEquals(36, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Base64 base64_0 = new Base64((byte)2);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte) (-3);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, true, (int) (byte) (-86));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of -86
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)43;
      String string0 = base64_0.encodeToString(byteArray1);
      assertEquals("Kw==", string0);
      
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)127;
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      assertEquals(0, byteArray2.length);
      
      base64_0.encode(byteArray0, 0, 0);
      base64_0.decode(byteArray0, (int) (byte)14, 0);
      byte[] byteArray3 = new byte[6];
      byteArray3[0] = (byte)43;
      byteArray3[1] = (byte)14;
      byteArray3[2] = (byte)127;
      byteArray3[3] = (byte)127;
      byteArray3[4] = (byte)14;
      byteArray3[5] = (byte)43;
      Base64.encodeBase64(byteArray3, true, false, (int) (byte)127);
      byte[] byteArray4 = Base64.encodeBase64(byteArray3, true);
      assertArrayEquals(new byte[] {(byte)75, (byte)119, (byte)53, (byte)47, (byte)102, (byte)119, (byte)52, (byte)114, (byte)13, (byte)10}, byteArray4);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)68);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Base64.isBase64("o1=z5(g'Y(C8");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)71;
      byteArray0[6] = (byte) (-127);
      byteArray0[7] = (byte)29;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(16, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [p\u0007\u001F\u0000\u0001G\uFFFD\u001D]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = Base64.decodeBase64(" D4>P%QL~NHKpY{");
      assertArrayEquals(new byte[] {(byte)15, (byte) (-125), (byte) (-48), (byte)44, (byte) (-47), (byte) (-54), (byte) (-91)}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      Base64.isBase64("Gr");
      int int0 = base64_0.avail();
      assertEquals(0, int0);
      assertTrue(base64_0.isUrlSafe());
      
      boolean boolean0 = Base64.isBase64("Gr");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte) (-47);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-68);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      boolean boolean0 = Base64.isBase64((byte)98);
      assertTrue(boolean0);
      
      Base64.encodeBase64String((byte[]) null);
      Base64 base64_0 = new Base64((byte) (-47));
      Base64.decodeBase64(byteArray1);
      assertEquals(0, byteArray1.length);
      
      Base64.decodeBase64((String) null);
      base64_0.decode("");
      base64_0.hasData();
      assertFalse(base64_0.isUrlSafe());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte) (-67));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Base64 base64_0 = new Base64(0, (byte[]) null);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_1 = new Base64();
      Base64 base64_2 = null;
      try {
        base64_2 = new Base64(64, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [AQ==]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertArrayEquals(new byte[] {(byte)68, (byte)81, (byte)111, (byte)61}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.decodeBase64(byteArray0);
      Base64.encodeBase64(byteArray1);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte) (-61);
      byte byte0 = (byte) (-8);
      byteArray2[1] = (byte) (-8);
      byteArray2[2] = (byte)54;
      byteArray2[3] = (byte) (-60);
      byteArray2[4] = (byte)105;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD\uFFFD6\uFFFDi]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }
}
