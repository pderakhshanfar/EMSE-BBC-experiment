/*
 * This file was automatically generated by EvoSuite
 * Thu Feb 25 23:57:07 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.util.stream.IntStream;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(byteArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte)111;
      byteArray0[6] = (byte)61;
      byteArray0[7] = (byte)104;
      byteArray0[8] = (byte)20;
      base64_0.decode(byteArray0, 0, 20);
      assertArrayEquals(new byte[] {(byte)8, (byte) (-123), (byte)12, (byte)82, (byte)82, (byte)111, (byte)61, (byte)104, (byte)20}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(9, byteArray0.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertArrayEquals(new byte[] {(byte)8, (byte) (-123), (byte)12, (byte)82, (byte)82, (byte)111, (byte)61, (byte)104, (byte)20}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(14, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = BigInteger.TEN;
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)10, bigInteger0.shortValue());
      //  // Unstable assertion: assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = bigInteger0.negate();
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)10, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte) (-10), bigInteger1.byteValue());
      //  // Unstable assertion: assertEquals((short) (-10), bigInteger1.shortValue());
      //  // Unstable assertion: assertNotNull(bigInteger1);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger0);
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)10}, byteArray1);
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)10, bigInteger0.shortValue());
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertEquals(1, byteArray1.length);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      
      String string0 = Base64.encodeBase64String(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertEquals("AA==", string0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true, true, 6);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)39, (byte)0}, byteArray2);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertEquals(4, byteArray2.length);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      
      Base64 base64_0 = new Base64((byte)1, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)10}, byteArray1);
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)10, bigInteger0.shortValue());
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(1, byteArray1.length);
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      int int0 = base64_0.avail();
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)10}, byteArray1);
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)10, bigInteger0.shortValue());
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(1, byteArray1.length);
      //  // Unstable assertion: assertEquals(0, int0);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray0);
      //  // Unstable assertion: assertEquals(0, byteArray0.length);
      //  // Unstable assertion: assertTrue(boolean0);
      
      Base64 base64_0 = new Base64(false);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)10, bigInteger0.shortValue());
      //  // Unstable assertion: assertNotNull(bigInteger0);
      
      MockRandom mockRandom0 = new MockRandom();
      //  // Unstable assertion: assertNotNull(mockRandom0);
      
      BigInteger bigInteger1 = BigInteger.probablePrime(2259, mockRandom0);
      //  // Unstable assertion: assertEquals((short)1359, bigInteger1.shortValue());
      //  // Unstable assertion: assertEquals((byte)79, bigInteger1.byteValue());
      //  // Unstable assertion: assertNotNull(bigInteger1);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger0);
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      //  // Unstable assertion: assertEquals((short)1359, bigInteger1.shortValue());
      //  // Unstable assertion: assertEquals((byte)79, bigInteger1.byteValue());
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertEquals(380, byteArray1.length);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      
      base64_0.encode(byteArray0, 64, (int) (byte) (-40));
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(0, byteArray0.length);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      Base64 base64_1 = new Base64(76);
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      //  // Unstable assertion: assertNotNull(base64_1);
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      IntStream intStream0 = mockRandom0.ints();
      //  // Unstable assertion: assertNotNull(intStream0);
      
      boolean boolean1 = Base64.isArrayByteBase64(byteArray1);
      //  // Unstable assertion: assertEquals((short)1359, bigInteger1.shortValue());
      //  // Unstable assertion: assertEquals((byte)79, bigInteger1.byteValue());
      //  // Unstable assertion: assertEquals(380, byteArray1.length);
      //  // Unstable assertion: assertTrue(boolean1);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      
      Base64 base64_2 = new Base64(true);
      //  // Unstable assertion: assertTrue(base64_2.isUrlSafe());
      //  // Unstable assertion: assertNotNull(base64_2);
      //  // Unstable assertion: assertFalse(base64_2.equals((Object)base64_0));
      //  // Unstable assertion: assertFalse(base64_2.equals((Object)base64_1));
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray2);
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)10, bigInteger0.shortValue());
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertEquals(4, byteArray2.length);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      
      boolean boolean2 = bigInteger1.testBit(712);
      //  // Unstable assertion: assertEquals((short)1359, bigInteger1.shortValue());
      //  // Unstable assertion: assertEquals((byte)79, bigInteger1.byteValue());
      //  // Unstable assertion: assertFalse(boolean2);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger0);
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger0));
      //  // Unstable assertion: assertFalse(boolean2 == boolean1);
      //  // Unstable assertion: assertFalse(boolean2 == boolean0);
      
      byte[] byteArray3 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)39, (byte)0}, byteArray3);
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertEquals(2, byteArray3.length);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      
      BigInteger bigInteger2 = BigInteger.TEN;
      //  // Unstable assertion: assertEquals((byte)10, bigInteger2.byteValue());
      //  // Unstable assertion: assertEquals((short)10, bigInteger2.shortValue());
      //  // Unstable assertion: assertNotNull(bigInteger2);
      //  // Unstable assertion: assertNotSame(bigInteger2, bigInteger1);
      //  // Unstable assertion: assertSame(bigInteger2, bigInteger0);
      //  // Unstable assertion: assertFalse(bigInteger2.equals((Object)bigInteger1));
      
      base64_1.encode(byteArray1, 64, 76);
      //  // Unstable assertion: assertEquals((short)1359, bigInteger1.shortValue());
      //  // Unstable assertion: assertEquals((byte)79, bigInteger1.byteValue());
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      //  // Unstable assertion: assertEquals(380, byteArray1.length);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger2);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(base64_1, base64_2);
      //  // Unstable assertion: assertNotSame(base64_1, base64_0);
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger2));
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_2));
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray4 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)39, (byte)0}, byteArray4);
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertEquals(2, byteArray4.length);
      //  // Unstable assertion: assertSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte) (-41);
      byteArray0[5] = (byte) (-23);
      byteArray0[6] = (byte)72;
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertArrayEquals(new byte[] {(byte)9, (byte) (-98), (byte)30, (byte)101, (byte) (-41), (byte) (-23), (byte)72}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Base64 base64_0 = new Base64();
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      boolean boolean0 = Base64.isBase64((byte)127);
      //  // Unstable assertion: assertFalse(boolean0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)10, bigInteger0.shortValue());
      //  // Unstable assertion: assertNotNull(bigInteger0);
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray0);
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)10, bigInteger0.shortValue());
      //  // Unstable assertion: assertNotNull(byteArray0);
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      
      boolean boolean1 = Base64.isArrayByteBase64(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray0);
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)10, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertTrue(boolean1);
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      
      Base64 base64_1 = new Base64(true);
      //  // Unstable assertion: assertTrue(base64_1.isUrlSafe());
      //  // Unstable assertion: assertNotNull(base64_1);
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)39, (byte)0}, byteArray1);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      
      BigInteger bigInteger1 = BigInteger.TEN;
      //  // Unstable assertion: assertEquals((short)10, bigInteger1.shortValue());
      //  // Unstable assertion: assertEquals((byte)10, bigInteger1.byteValue());
      //  // Unstable assertion: assertNotNull(bigInteger1);
      //  // Unstable assertion: assertSame(bigInteger1, bigInteger0);
      
      byte[] byteArray2 = Base64.encodeInteger(bigInteger1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray2);
      //  // Unstable assertion: assertEquals((short)10, bigInteger1.shortValue());
      //  // Unstable assertion: assertEquals((byte)10, bigInteger1.byteValue());
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertEquals(4, byteArray2.length);
      //  // Unstable assertion: assertSame(bigInteger1, bigInteger0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      
      base64_0.encode(byteArray1, 76, (-1));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)39, (byte)0}, byteArray1);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      //  // Unstable assertion: assertNotSame(base64_0, base64_1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertFalse(base64_0.equals((Object)base64_1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      base64_1.decode(byteArray2, 1, 50);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray2);
      //  // Unstable assertion: assertTrue(base64_1.isUrlSafe());
      //  // Unstable assertion: assertEquals((short)10, bigInteger1.shortValue());
      //  // Unstable assertion: assertEquals((byte)10, bigInteger1.byteValue());
      //  // Unstable assertion: assertEquals(4, byteArray2.length);
      //  // Unstable assertion: assertNotSame(base64_1, base64_0);
      //  // Unstable assertion: assertSame(bigInteger1, bigInteger0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      base64_1.encode(byteArray2, 50, 76);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray2);
      //  // Unstable assertion: assertTrue(base64_1.isUrlSafe());
      //  // Unstable assertion: assertEquals((short)10, bigInteger1.shortValue());
      //  // Unstable assertion: assertEquals((byte)10, bigInteger1.byteValue());
      //  // Unstable assertion: assertEquals(4, byteArray2.length);
      //  // Unstable assertion: assertNotSame(base64_1, base64_0);
      //  // Unstable assertion: assertSame(bigInteger1, bigInteger0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte)88;
      byteArray0[6] = (byte)114;
      byteArray0[7] = (byte) (-14);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertArrayEquals(new byte[] {(byte)9, (byte)29, (byte)76, (byte) (-1), (byte) (-99), (byte)88, (byte)114, (byte) (-14)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)29, (byte)76, (byte) (-1), (byte) (-99), (byte)88, (byte)114, (byte) (-14)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = BigInteger.ONE;
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      
      BigInteger bigInteger2 = bigInteger0.min(bigInteger1);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger2.shortValue());
      assertEquals((byte)1, bigInteger2.byteValue());
      assertNotNull(bigInteger2);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger0, bigInteger2);
      assertSame(bigInteger1, bigInteger2);
      assertSame(bigInteger1, bigInteger0);
      assertSame(bigInteger2, bigInteger1);
      assertSame(bigInteger2, bigInteger0);
      
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      assertArrayEquals(new byte[] {(byte)1}, byteArray2);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(byteArray2);
      assertEquals(1, byteArray2.length);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger0, bigInteger2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, false, false, (int) (byte)29);
      assertArrayEquals(new byte[] {(byte)9, (byte)29, (byte)76, (byte) (-1), (byte) (-99), (byte)88, (byte)114, (byte) (-14)}, byteArray0);
      assertNotNull(byteArray3);
      assertEquals(8, byteArray0.length);
      assertEquals(12, byteArray3.length);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      int int0 = base64_0.avail();
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, int0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray0);
      //  // Unstable assertion: assertEquals(0, byteArray0.length);
      //  // Unstable assertion: assertTrue(boolean0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)10, bigInteger0.shortValue());
      //  // Unstable assertion: assertNotNull(bigInteger0);
      
      MockRandom mockRandom0 = new MockRandom();
      //  // Unstable assertion: assertNotNull(mockRandom0);
      
      BigInteger bigInteger1 = BigInteger.probablePrime(2242, mockRandom0);
      //  // Unstable assertion: assertEquals((short)2381, bigInteger1.shortValue());
      //  // Unstable assertion: assertEquals((byte)77, bigInteger1.byteValue());
      //  // Unstable assertion: assertNotNull(bigInteger1);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger0);
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      //  // Unstable assertion: assertEquals((short)2381, bigInteger1.shortValue());
      //  // Unstable assertion: assertEquals((byte)77, bigInteger1.byteValue());
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertEquals(376, byteArray1.length);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      
      Base64 base64_0 = new Base64(false);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)39, (byte)0}, byteArray2);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertEquals(2, byteArray2.length);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      
      BigInteger bigInteger2 = BigInteger.TEN;
      //  // Unstable assertion: assertEquals((short)10, bigInteger2.shortValue());
      //  // Unstable assertion: assertEquals((byte)10, bigInteger2.byteValue());
      //  // Unstable assertion: assertNotNull(bigInteger2);
      //  // Unstable assertion: assertSame(bigInteger2, bigInteger0);
      //  // Unstable assertion: assertNotSame(bigInteger2, bigInteger1);
      //  // Unstable assertion: assertFalse(bigInteger2.equals((Object)bigInteger1));
      
      byte[] byteArray3 = Base64.decodeBase64(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray3);
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertEquals(0, byteArray0.length);
      //  // Unstable assertion: assertEquals(0, byteArray3.length);
      //  // Unstable assertion: assertSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      
      int int0 = base64_0.readResults(byteArray1, 76, (-81));
      //  // Unstable assertion: assertEquals((short)2381, bigInteger1.shortValue());
      //  // Unstable assertion: assertEquals((byte)77, bigInteger1.byteValue());
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(376, byteArray1.length);
      //  // Unstable assertion: assertEquals(0, int0);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger2);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger2));
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray1);
      //  // Unstable assertion: assertEquals((short)2381, bigInteger1.shortValue());
      //  // Unstable assertion: assertEquals((byte)77, bigInteger1.byteValue());
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertEquals(376, byteArray1.length);
      //  // Unstable assertion: assertEquals(518, byteArray4.length);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger2);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger2));
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      
      byte[] byteArray5 = Base64.encodeBase64Chunked(byteArray4);
      //  // Unstable assertion: assertEquals((short)2381, bigInteger1.shortValue());
      //  // Unstable assertion: assertEquals((byte)77, bigInteger1.byteValue());
      //  // Unstable assertion: assertNotNull(byteArray5);
      //  // Unstable assertion: assertEquals(376, byteArray1.length);
      //  // Unstable assertion: assertEquals(518, byteArray4.length);
      //  // Unstable assertion: assertEquals(712, byteArray5.length);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger2);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray2);
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger2));
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray2));
      
      Random.setNextRandom(0);
      byte[] byteArray6 = base64_0.decode(byteArray1);
      //  // Unstable assertion: assertEquals((short)2381, bigInteger1.shortValue());
      //  // Unstable assertion: assertEquals((byte)77, bigInteger1.byteValue());
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(byteArray6);
      //  // Unstable assertion: assertEquals(376, byteArray1.length);
      //  // Unstable assertion: assertEquals(281, byteArray6.length);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger2);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray5);
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger2));
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray5));
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray7 = base64_0.decode(byteArray1);
      //  // Unstable assertion: assertEquals((short)2381, bigInteger1.shortValue());
      //  // Unstable assertion: assertEquals((byte)77, bigInteger1.byteValue());
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(byteArray7);
      //  // Unstable assertion: assertEquals(376, byteArray1.length);
      //  // Unstable assertion: assertEquals(281, byteArray7.length);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger2);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray7);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray6);
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger2));
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray6));
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray8 = Base64.discardWhitespace(byteArray7);
      //  // Unstable assertion: assertEquals((short)2381, bigInteger1.shortValue());
      //  // Unstable assertion: assertEquals((byte)77, bigInteger1.byteValue());
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(byteArray8);
      //  // Unstable assertion: assertEquals(276, byteArray8.length);
      //  // Unstable assertion: assertEquals(376, byteArray1.length);
      //  // Unstable assertion: assertEquals(281, byteArray7.length);
      //  // Unstable assertion: assertNotSame(byteArray8, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray8, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray8, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray8, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray8, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray8, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray8, byteArray7);
      //  // Unstable assertion: assertNotSame(byteArray8, byteArray5);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger2);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray8);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray7);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray8);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray6);
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)byteArray7));
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger2));
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray7));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray6));
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      BigInteger bigInteger3 = Base64.decodeInteger(byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)39, (byte)0}, byteArray2);
      //  // Unstable assertion: assertEquals((short)0, bigInteger3.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger3.byteValue());
      //  // Unstable assertion: assertNotNull(bigInteger3);
      //  // Unstable assertion: assertEquals(2, byteArray2.length);
      //  // Unstable assertion: assertNotSame(bigInteger3, bigInteger1);
      //  // Unstable assertion: assertNotSame(bigInteger3, bigInteger0);
      //  // Unstable assertion: assertNotSame(bigInteger3, bigInteger2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray8);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray7);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray5);
      //  // Unstable assertion: assertFalse(bigInteger3.equals((Object)bigInteger1));
      //  // Unstable assertion: assertFalse(bigInteger3.equals((Object)bigInteger0));
      //  // Unstable assertion: assertFalse(bigInteger3.equals((Object)bigInteger2));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray8));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray7));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray5));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base64 base64_0 = new Base64((-2902));
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      int int0 = base64_0.readResults(byteArray0, (byte)60, 71);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(9, byteArray0.length);
      assertEquals(0, int0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      Object object0 = base64_0.decode((Object) "qGl}");
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(object0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      boolean boolean0 = Base64.isBase64((byte)61);
      assertTrue(boolean0);
      
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)object0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-12);
      byteArray1[1] = (byte)60;
      byteArray1[2] = (byte)61;
      byteArray1[3] = (byte)61;
      byteArray1[4] = (byte)60;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, true, true, (-1520));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of -1520
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      //  // Unstable assertion: assertNotNull(byteArray0);
      //  // Unstable assertion: assertEquals(37, byteArray0.length);
      
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)39, (byte)0}, byteArray1);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      
      Base64 base64_0 = new Base64(37);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray2 = base64_0.encode(byteArray0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertEquals(37, byteArray0.length);
      //  // Unstable assertion: assertEquals(56, byteArray2.length);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray3 = Base64.decodeBase64("encodeInteger called with null parameter");
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertEquals(27, byteArray3.length);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      
      byte[] byteArray4 = base64_0.encode(byteArray3);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertEquals(27, byteArray3.length);
      //  // Unstable assertion: assertEquals(38, byteArray4.length);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Base64 base64_0 = new Base64();
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)39, (byte)0}, byteArray0);
      //  // Unstable assertion: assertNotNull(byteArray0);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      
      Base64 base64_1 = new Base64(76, byteArray0, false);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)39, (byte)0}, byteArray0);
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      //  // Unstable assertion: assertNotNull(base64_1);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray1 = new byte[9];
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-4);
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte)75;
      byteArray1[3] = (byte)16;
      byteArray1[4] = (byte)120;
      byteArray1[5] = (byte)120;
      byteArray1[6] = (byte) (-83);
      byteArray1[7] = (byte)22;
      byteArray1[8] = (byte)105;
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray1, 4, 1527);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      short short0 = bigInteger0.shortValueExact();
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)0, short0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte)32;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte) (-4), (byte)0, (byte) (-77), (byte)32}, byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte) (-4), (byte)0, (byte) (-77)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false, (int) (byte)37);
      assertArrayEquals(new byte[] {(byte)37, (byte) (-4), (byte)0, (byte) (-77), (byte)32}, byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte) (-4), (byte)0, (byte) (-77)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)74, (byte)102, (byte)119, (byte)65, (byte)115, (byte)119, (byte)61, (byte)61}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(5, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertEquals(8, byteArray2.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      assertNotNull(byteArray0);
      assertEquals(37, byteArray0.length);
      
      Base64 base64_0 = new Base64(37);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(byteArray1);
      assertEquals(37, byteArray0.length);
      assertEquals(56, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(byteArray2);
      assertEquals(37, byteArray0.length);
      assertEquals(56, byteArray1.length);
      assertEquals(78, byteArray2.length);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray0 = Base64.decodeBase64((String) null);
      assertNull(byteArray0);
      
      Base64 base64_0 = new Base64(false);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      boolean boolean0 = base64_0.hasData();
      assertFalse(base64_0.isUrlSafe());
      assertFalse(boolean0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray1 = Base64.decodeBase64((String) null);
      assertNull(byteArray1);
      
      BigInteger bigInteger1 = BigInteger.TEN;
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals((byte)10, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      byte[] byteArray2 = Base64.encodeInteger(bigInteger1);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray2);
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals((byte)10, bigInteger1.byteValue());
      assertNotNull(byteArray2);
      assertEquals(4, byteArray2.length);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      int int0 = bigInteger1.bitCount();
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals(2, int0);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      byte[] byteArray3 = base64_0.decode((byte[]) null);
      assertFalse(base64_0.isUrlSafe());
      assertNull(byteArray3);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      double double0 = bigInteger1.doubleValue();
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals(10.0, double0, 0.01);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      base64_0.decode((byte[]) null, (-4756), (-4756));
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray2);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray2);
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals((byte)10, bigInteger1.byteValue());
      assertNotNull(string0);
      assertEquals(4, byteArray2.length);
      assertEquals("Q2c9PQ", string0);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      int int1 = base64_0.readResults((byte[]) null, 430, 95);
      assertFalse(base64_0.isUrlSafe());
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null);
      assertNull(byteArray0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      int int0 = bigInteger0.intValueExact();
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals(0, int0);
      
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      
      Random.setNextRandom((-1259));
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      int int1 = base64_0.avail();
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte) (-4));
      assertFalse(boolean0);
      
      byte[] byteArray0 = Base64.decodeBase64("5!");
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      Base64 base64_0 = new Base64((byte) (-4), byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(0, byteArray0.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      boolean boolean1 = base64_0.hasData();
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, byteArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray1 = Base64.decodeBase64("5!");
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray2);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(byteArray2);
      assertEquals(4, byteArray2.length);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byte[] byteArray3 = base64_0.decode(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(byteArray3);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray3.length);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertSame(byteArray0, byteArray3);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertSame(byteArray3, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Base64 base64_0 = new Base64(691);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)63;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte)110, (byte)53, (byte) (-31), (byte)47, (byte)63}, byteArray0);
      assertEquals((byte) (-97), bigInteger0.byteValue());
      assertEquals((short) (-24673), bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      assertEquals(5, byteArray0.length);
      
      Object object0 = null;
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)39, (byte)0}, byteArray0);
      //  // Unstable assertion: assertNotNull(byteArray0);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      
      Base64 base64_0 = new Base64(27, (byte[]) null);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, 27, 32);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Base64 base64_0 = new Base64((-2611));
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)103;
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      assertArrayEquals(new byte[] {(byte)10}, byteArray1);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(byteArray1);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Object object0 = base64_0.decode((Object) "");
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(object0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      Object object1 = base64_0.encode(object0);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)13;
      base64_0.encode(byteArray0, (int) (byte)55, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)1, (byte)55, (byte)103, (byte)0, (byte)13}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(5, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, object0);
      assertNotSame(byteArray0, object1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)object0));
      assertFalse(byteArray0.equals((Object)object1));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)55, (byte)103, (byte)0, (byte)13}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(boolean0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, object0);
      assertNotSame(byteArray0, object1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)object0));
      assertFalse(byteArray0.equals((Object)object1));
      
      byte[] byteArray2 = Base64.decodeBase64("Input array too big, the output array would be bigger (");
      assertNotNull(byteArray2);
      assertEquals(32, byteArray2.length);
      assertNotSame(byteArray2, object1);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, object0);
      assertFalse(byteArray2.equals((Object)object1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)object0));
      
      boolean boolean1 = Base64.isBase64((byte)1);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, true, (int) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61, (byte)39, (byte)0}, byteArray1);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertEquals(10, byteArray1.length);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61, (byte)13, (byte)10}, byteArray1);
      
      byte[] byteArray2 = Base64.decodeBase64("fp3^y7Ovd? ]L4]C");
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)126, (byte) (-99), (byte) (-14), (byte) (-20), (byte) (-21), (byte) (-35), (byte)47, (byte) (-128)}, byteArray2);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertEquals(8, byteArray2.length);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      
      boolean boolean0 = Base64.isArrayByteBase64(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61, (byte)39, (byte)0}, byteArray1);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertEquals(10, byteArray1.length);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      
      Base64 base64_0 = new Base64(37);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      int int0 = base64_0.readResults(byteArray2, 4, 0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)126, (byte) (-99), (byte) (-14), (byte) (-20), (byte) (-21), (byte) (-35), (byte)47, (byte) (-128)}, byteArray2);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(8, byteArray2.length);
      //  // Unstable assertion: assertEquals(0, int0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray3 = base64_0.decode("FD[`^{W*)!");
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)20, (byte)53}, byteArray3);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertEquals(2, byteArray3.length);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      Base64 base64_1 = new Base64(true);
      //  // Unstable assertion: assertTrue(base64_1.isUrlSafe());
      //  // Unstable assertion: assertNotNull(base64_1);
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray4 = base64_0.encode(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61, (byte)39, (byte)0}, byteArray1);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertEquals(10, byteArray1.length);
      //  // Unstable assertion: assertEquals(18, byteArray4.length);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(base64_0, base64_1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(base64_0.equals((Object)base64_1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray5 = Base64.discardWhitespace(byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)126, (byte) (-99), (byte) (-14), (byte) (-20), (byte) (-21), (byte) (-35), (byte)47, (byte) (-128)}, byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)126, (byte) (-99), (byte) (-14), (byte) (-20), (byte) (-21), (byte) (-35), (byte)47, (byte) (-128)}, byteArray5);
      //  // Unstable assertion: assertNotNull(byteArray5);
      //  // Unstable assertion: assertEquals(8, byteArray2.length);
      //  // Unstable assertion: assertEquals(8, byteArray5.length);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray3);
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray3));
      
      byte[] byteArray6 = new byte[4];
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray3));
      
      byte byte0 = (byte)108;
      byteArray6[0] = (byte)108;
      byte byte1 = (byte) (-6);
      byteArray6[1] = (byte) (-6);
      byte byte2 = (byte)38;
      byteArray6[2] = (byte)38;
      byte byte3 = (byte)0;
      byteArray6[3] = (byte)0;
      byte[] byteArray7 = new byte[9];
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray0));
      
      byteArray1[6] = (byte)108;
      byteArray7[1] = (byte)0;
      byteArray7[2] = (byte) (-6);
      byte byte4 = (byte)0;
      byteArray7[3] = (byte)0;
      byteArray7[4] = (byte)38;
      byteArray7[5] = (byte)108;
      byteArray7[6] = (byte)0;
      byteArray7[7] = (byte)0;
      byteArray7[8] = (byte)0;
      // Undeclared exception!
      try { 
        base64_1.decode(byteArray7, (int) (byte)0, 1982292598);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61, (byte)39, (byte)0}, byteArray1);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertEquals(10, byteArray1.length);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = Base64.decodeBase64("fp3^y7Ovd? ]L4]C");
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)126, (byte) (-99), (byte) (-14), (byte) (-20), (byte) (-21), (byte) (-35), (byte)47, (byte) (-128)}, byteArray2);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertEquals(8, byteArray2.length);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      
      boolean boolean0 = Base64.isArrayByteBase64(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61, (byte)39, (byte)0}, byteArray1);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertEquals(10, byteArray1.length);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, true);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)126, (byte) (-99), (byte) (-14), (byte) (-20), (byte) (-21), (byte) (-35), (byte)47, (byte) (-128)}, byteArray2);
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertEquals(8, byteArray2.length);
      //  // Unstable assertion: assertEquals(13, byteArray3.length);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      
      Base64 base64_0 = new Base64();
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray1, false, false, 76);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61, (byte)39, (byte)0}, byteArray1);
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertEquals(10, byteArray1.length);
      //  // Unstable assertion: assertEquals(16, byteArray4.length);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      
      base64_0.encode(byteArray1, 4, 4);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61, (byte)39, (byte)0}, byteArray1);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertEquals(10, byteArray1.length);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      int int0 = base64_0.avail();
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(4, int0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      Random.setNextRandom(65);
      String string0 = base64_0.encodeToString(byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)126, (byte) (-99), (byte) (-14), (byte) (-20), (byte) (-21), (byte) (-35), (byte)47, (byte) (-128)}, byteArray2);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals(8, byteArray2.length);
      //  // Unstable assertion: assertEquals(13, byteArray3.length);
      //  // Unstable assertion: assertEquals("ZnAzeTdPdmRMNEEnAA==", string0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray4);
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray4));
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = null;
      String string0 = Base64.encodeBase64URLSafeString((byte[]) null);
      assertNull(string0);
      
      byte[] byteArray1 = Base64.encodeBase64((byte[]) null, true, true, 0);
      assertNull(byteArray1);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      BigInteger bigInteger2 = null;
      try {
        bigInteger2 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = Base64.encodeBase64String((byte[]) null);
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte) (-25));
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Base64 base64_0 = new Base64();
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)97, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertEquals(9, byteArray0.length);
      //  // Unstable assertion: assertEquals(14, byteArray1.length);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      
      int int0 = base64_0.readResults(byteArray0, 1, (byte)0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)97, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(9, byteArray0.length);
      //  // Unstable assertion: assertEquals(0, int0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      Base64 base64_1 = new Base64(19);
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      //  // Unstable assertion: assertNotNull(base64_1);
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      Base64 base64_2 = new Base64(true);
      //  // Unstable assertion: assertTrue(base64_2.isUrlSafe());
      //  // Unstable assertion: assertNotNull(base64_2);
      //  // Unstable assertion: assertFalse(base64_2.equals((Object)base64_0));
      //  // Unstable assertion: assertFalse(base64_2.equals((Object)base64_1));
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)97, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals(9, byteArray0.length);
      //  // Unstable assertion: assertEquals(14, byteArray1.length);
      //  // Unstable assertion: assertEquals("QUdFQUFBQUFBQUFBJwA", string0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false, true);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)97, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertEquals(9, byteArray0.length);
      //  // Unstable assertion: assertEquals(12, byteArray2.length);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      
      int int1 = base64_1.readResults(byteArray0, 1908874353, 2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)97, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      //  // Unstable assertion: assertEquals(9, byteArray0.length);
      //  // Unstable assertion: assertEquals(0, int1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(base64_1, base64_2);
      //  // Unstable assertion: assertNotSame(base64_1, base64_0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_2));
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertTrue(int1 == int0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, (int) (byte)0, 87);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64((-823));
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65}, byteArray1);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      
      int int0 = base64_0.readResults(byteArray0, (-823), 4166);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertEquals(0, int0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      Base64 base64_1 = new Base64((-3782));
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      //  // Unstable assertion: assertNotNull(base64_1);
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      Base64 base64_2 = new Base64(true);
      //  // Unstable assertion: assertTrue(base64_2.isUrlSafe());
      //  // Unstable assertion: assertNotNull(base64_2);
      //  // Unstable assertion: assertFalse(base64_2.equals((Object)base64_1));
      //  // Unstable assertion: assertFalse(base64_2.equals((Object)base64_0));
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      int int1 = Base64.PEM_CHUNK_SIZE;
      //  // Unstable assertion: assertEquals(64, int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true, false);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61, (byte)39, (byte)0}, byteArray2);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArray2.length);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      
      base64_1.decode(byteArray0, 64, (-864));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(base64_1, base64_2);
      //  // Unstable assertion: assertNotSame(base64_1, base64_0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_2));
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray2, 0, 4166);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray0 = Base64.decodeBase64("5!");
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      Base64 base64_1 = new Base64();
      assertFalse(base64_1.isUrlSafe());
      assertNotNull(base64_1);
      assertFalse(base64_1.equals((Object)base64_0));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 76);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      base64_1.encode(byteArray1, (-1677), (-1677));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(base64_1.isUrlSafe());
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertNotSame(base64_1, base64_0);
      assertSame(byteArray1, byteArray0);
      assertFalse(base64_1.equals((Object)base64_0));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      // Undeclared exception!
      try { 
        base64_1.readResults(byteArray0, (-1677), 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = Base64.encodeBase64String(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(string0);
      assertEquals(0, byteArray0.length);
      assertEquals("", string0);
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      assertEquals(0, byteArray0.length);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      base64_0.encode(byteArray1, (-93), (-93));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      int int0 = (-829);
      byte[] byteArray2 = Base64.decodeBase64("");
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      int int1 = 1;
      base64_0.encode(byteArray0, 126, 1204);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, byteArray0.length);
      assertNotSame(byteArray0, byteArray2);
      assertSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, 12, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(0, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(0, byteArray0.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      assertEquals(0, byteArray0.length);
      
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean0);
      
      String string0 = base64_0.encodeToString(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(string0);
      assertEquals(0, byteArray0.length);
      assertEquals("", string0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray2 = new byte[2];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[1] = (byte)97;
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)97}, byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)97}, byteArray3);
      assertNotNull(byteArray3);
      assertEquals(2, byteArray2.length);
      assertEquals(2, byteArray3.length);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      
      int int0 = base64_0.avail();
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, byteArray0.length);
      assertEquals(0, int0);
      assertSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      boolean boolean1 = base64_0.hasData();
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, byteArray0.length);
      assertFalse(boolean1);
      assertSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(boolean1 == boolean0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray0, true, false);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray4);
      assertNotNull(byteArray4);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray4.length);
      assertSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray4, byteArray2);
      assertSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray3);
      assertSame(byteArray4, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray3));
      
      String string1 = Base64.encodeBase64URLSafeString((byte[]) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Base64 base64_0 = new Base64(1);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray2 = new byte[3];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = (byte)100;
      byte[] byteArray3 = Base64.encodeBase64(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertNotNull(byteArray3);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray3.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertSame(byteArray0, byteArray3);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertSame(byteArray3, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      
      byteArray2[1] = (byte)29;
      byte byte0 = (byte)0;
      byte[] byteArray4 = base64_0.decode("org.apache.commons.codec.EncoderException");
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(byteArray4);
      assertEquals(27, byteArray4.length);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray2);
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byteArray2[2] = (byte)0;
      byte[] byteArray5 = Base64.encodeBase64Chunked(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray5);
      assertNotNull(byteArray5);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray5.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray2);
      assertSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray4);
      assertSame(byteArray1, byteArray5);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray5, byteArray4);
      assertSame(byteArray5, byteArray1);
      assertNotSame(byteArray5, byteArray2);
      assertNotSame(byteArray5, byteArray3);
      assertNotSame(byteArray5, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray0));
      
      byte[] byteArray6 = Base64.decodeBase64("fp3^y7Ovd? ]L4]C");
      assertArrayEquals(new byte[] {(byte)126, (byte) (-99), (byte) (-14), (byte) (-20), (byte) (-21), (byte) (-35), (byte)47, (byte) (-128)}, byteArray6);
      assertNotNull(byteArray6);
      assertEquals(8, byteArray6.length);
      assertNotSame(byteArray6, byteArray4);
      assertNotSame(byteArray6, byteArray2);
      assertNotSame(byteArray6, byteArray0);
      assertNotSame(byteArray6, byteArray1);
      assertNotSame(byteArray6, byteArray3);
      assertNotSame(byteArray6, byteArray5);
      assertFalse(byteArray6.equals((Object)byteArray4));
      assertFalse(byteArray6.equals((Object)byteArray2));
      assertFalse(byteArray6.equals((Object)byteArray0));
      assertFalse(byteArray6.equals((Object)byteArray1));
      assertFalse(byteArray6.equals((Object)byteArray3));
      assertFalse(byteArray6.equals((Object)byteArray5));
      
      String string0 = base64_0.encodeToString(byteArray2);
      assertArrayEquals(new byte[] {(byte)100, (byte)29, (byte)0}, byteArray2);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(string0);
      assertEquals(3, byteArray2.length);
      assertEquals("ZB0A", string0);
      assertNotSame(byteArray2, byteArray6);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray5);
      assertNotSame(byteArray2, byteArray3);
      assertFalse(byteArray2.equals((Object)byteArray6));
      assertFalse(byteArray2.equals((Object)byteArray4));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray5));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      boolean boolean1 = base64_0.hasData();
      assertFalse(base64_0.isUrlSafe());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      boolean boolean2 = Base64.isArrayByteBase64(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray6);
      assertSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray4);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray6));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      int int0 = base64_0.readResults(byteArray6, (byte)100, 255);
      assertArrayEquals(new byte[] {(byte)126, (byte) (-99), (byte) (-14), (byte) (-20), (byte) (-21), (byte) (-35), (byte)47, (byte) (-128)}, byteArray6);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(8, byteArray6.length);
      assertEquals((-1), int0);
      assertNotSame(byteArray6, byteArray4);
      assertNotSame(byteArray6, byteArray2);
      assertNotSame(byteArray6, byteArray0);
      assertNotSame(byteArray6, byteArray1);
      assertNotSame(byteArray6, byteArray3);
      assertNotSame(byteArray6, byteArray5);
      assertFalse(byteArray6.equals((Object)byteArray4));
      assertFalse(byteArray6.equals((Object)byteArray2));
      assertFalse(byteArray6.equals((Object)byteArray0));
      assertFalse(byteArray6.equals((Object)byteArray1));
      assertFalse(byteArray6.equals((Object)byteArray3));
      assertFalse(byteArray6.equals((Object)byteArray5));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      Base64 base64_1 = new Base64((byte)0);
      assertFalse(base64_1.isUrlSafe());
      assertNotNull(base64_1);
      assertFalse(base64_1.equals((Object)base64_0));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      Base64 base64_2 = new Base64(false);
      assertFalse(base64_2.isUrlSafe());
      assertNotNull(base64_2);
      assertFalse(base64_2.equals((Object)base64_0));
      assertFalse(base64_2.equals((Object)base64_1));
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      // Undeclared exception!
      try { 
        base64_1.decode(byteArray5, 255, 78);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 255
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = Base64.isBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      assertFalse(boolean0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      Base64 base64_0 = new Base64((byte)0);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61}, byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)39, (byte)0}, byteArray0);
      //  // Unstable assertion: assertNotNull(byteArray0);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)39, (byte)0}, byteArray1);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      //  // Unstable assertion: assertSame(byteArray1, byteArray0);
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)39, (byte)0}, byteArray1);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      //  // Unstable assertion: assertEquals("JwA", string0);
      //  // Unstable assertion: assertSame(byteArray1, byteArray0);
      
      boolean boolean0 = Base64.isBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = base64_0.decode(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      BigInteger bigInteger1 = new BigInteger((byte)56, (-447), mockRandom0);
      assertEquals((short)3, bigInteger1.shortValue());
      assertEquals((byte)3, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      byte[] byteArray2 = Base64.encodeInteger(bigInteger1);
      assertEquals((short)3, bigInteger1.shortValue());
      assertEquals((byte)3, bigInteger1.byteValue());
      assertNotNull(byteArray2);
      assertEquals(12, byteArray2.length);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      BigInteger bigInteger2 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger2.byteValue());
      assertEquals((short)10, bigInteger2.shortValue());
      assertNotNull(bigInteger2);
      assertSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      
      BigInteger bigInteger3 = bigInteger1.add(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)3, bigInteger1.shortValue());
      assertEquals((byte)3, bigInteger1.byteValue());
      assertEquals((byte)13, bigInteger3.byteValue());
      assertEquals((short)13, bigInteger3.shortValue());
      assertNotNull(bigInteger3);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger0, bigInteger1);
      assertSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger3, bigInteger1);
      assertNotSame(bigInteger3, bigInteger0);
      assertNotSame(bigInteger3, bigInteger2);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      
      BigInteger bigInteger4 = bigInteger3.not();
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)3, bigInteger1.shortValue());
      assertEquals((byte)3, bigInteger1.byteValue());
      assertEquals((byte)13, bigInteger3.byteValue());
      assertEquals((short)13, bigInteger3.shortValue());
      assertEquals((short) (-14), bigInteger4.shortValue());
      assertEquals((byte) (-14), bigInteger4.byteValue());
      assertNotNull(bigInteger4);
      assertNotSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger0, bigInteger1);
      assertSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger1, bigInteger4);
      assertNotSame(bigInteger3, bigInteger1);
      assertNotSame(bigInteger3, bigInteger0);
      assertNotSame(bigInteger3, bigInteger4);
      assertNotSame(bigInteger3, bigInteger2);
      assertNotSame(bigInteger4, bigInteger0);
      assertNotSame(bigInteger4, bigInteger3);
      assertNotSame(bigInteger4, bigInteger1);
      assertNotSame(bigInteger4, bigInteger2);
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger3));
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertFalse(bigInteger4.equals((Object)bigInteger0));
      assertFalse(bigInteger4.equals((Object)bigInteger3));
      assertFalse(bigInteger4.equals((Object)bigInteger1));
      assertFalse(bigInteger4.equals((Object)bigInteger2));
      
      byte[] byteArray3 = Base64.encodeInteger(bigInteger1);
      assertEquals((short)3, bigInteger1.shortValue());
      assertEquals((byte)3, bigInteger1.byteValue());
      assertNotNull(byteArray3);
      assertEquals(12, byteArray3.length);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger1, bigInteger4);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger3));
      assertFalse(bigInteger1.equals((Object)bigInteger4));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray2);
      assertEquals((short)3, bigInteger1.shortValue());
      assertEquals((byte)3, bigInteger1.byteValue());
      assertNotNull(byteArray4);
      assertEquals(12, byteArray2.length);
      assertEquals(16, byteArray4.length);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger1, bigInteger4);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray1);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger3));
      assertFalse(bigInteger1.equals((Object)bigInteger4));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray1));
      
      Random.setNextRandom(8184);
      byte[] byteArray5 = new byte[5];
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray0));
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray1));
      
      byteArray5[0] = (byte)56;
      byteArray5[1] = (byte)56;
      byteArray5[2] = (byte) (-92);
      byteArray5[3] = (byte)56;
      byteArray5[4] = (byte)56;
      byte[] byteArray6 = Base64.discardWhitespace(byteArray5);
      assertArrayEquals(new byte[] {(byte)56, (byte)56, (byte) (-92), (byte)56, (byte)56}, byteArray6);
      assertArrayEquals(new byte[] {(byte)56, (byte)56, (byte) (-92), (byte)56, (byte)56}, byteArray5);
      assertNotNull(byteArray6);
      assertEquals(5, byteArray6.length);
      assertEquals(5, byteArray5.length);
      assertNotSame(byteArray6, byteArray5);
      assertNotSame(byteArray6, byteArray0);
      assertNotSame(byteArray6, byteArray3);
      assertNotSame(byteArray6, byteArray4);
      assertNotSame(byteArray6, byteArray2);
      assertNotSame(byteArray6, byteArray1);
      assertNotSame(byteArray5, byteArray4);
      assertNotSame(byteArray5, byteArray2);
      assertNotSame(byteArray5, byteArray6);
      assertNotSame(byteArray5, byteArray0);
      assertNotSame(byteArray5, byteArray3);
      assertNotSame(byteArray5, byteArray1);
      assertFalse(byteArray6.equals((Object)byteArray5));
      assertFalse(byteArray6.equals((Object)byteArray0));
      assertFalse(byteArray6.equals((Object)byteArray3));
      assertFalse(byteArray6.equals((Object)byteArray4));
      assertFalse(byteArray6.equals((Object)byteArray2));
      assertFalse(byteArray6.equals((Object)byteArray1));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray0));
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray1));
      
      int int0 = base64_0.avail();
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, int0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray7 = new byte[2];
      assertFalse(byteArray7.equals((Object)byteArray2));
      assertFalse(byteArray7.equals((Object)byteArray1));
      assertFalse(byteArray7.equals((Object)byteArray5));
      assertFalse(byteArray7.equals((Object)byteArray6));
      assertFalse(byteArray7.equals((Object)byteArray4));
      assertFalse(byteArray7.equals((Object)byteArray3));
      assertFalse(byteArray7.equals((Object)byteArray0));
      
      byteArray7[0] = (byte)56;
      byteArray7[1] = (byte) (-92);
      String string0 = Base64.encodeBase64URLSafeString(byteArray7);
      assertArrayEquals(new byte[] {(byte)56, (byte) (-92)}, byteArray7);
      assertNotNull(string0);
      assertEquals(2, byteArray7.length);
      assertEquals("OKQ", string0);
      assertNotSame(byteArray7, byteArray2);
      assertNotSame(byteArray7, byteArray1);
      assertNotSame(byteArray7, byteArray5);
      assertNotSame(byteArray7, byteArray6);
      assertNotSame(byteArray7, byteArray4);
      assertNotSame(byteArray7, byteArray3);
      assertNotSame(byteArray7, byteArray0);
      assertFalse(byteArray7.equals((Object)byteArray2));
      assertFalse(byteArray7.equals((Object)byteArray1));
      assertFalse(byteArray7.equals((Object)byteArray5));
      assertFalse(byteArray7.equals((Object)byteArray6));
      assertFalse(byteArray7.equals((Object)byteArray4));
      assertFalse(byteArray7.equals((Object)byteArray3));
      assertFalse(byteArray7.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = Base64.decodeBase64((String) null);
      assertNull(byteArray1);
      
      Base64 base64_1 = new Base64();
      assertFalse(base64_1.isUrlSafe());
      assertNotNull(base64_1);
      assertFalse(base64_1.equals((Object)base64_0));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      String string0 = base64_0.encodeToString((byte[]) null);
      assertFalse(base64_0.isUrlSafe());
      assertNull(string0);
      assertNotSame(base64_0, base64_1);
      assertFalse(base64_0.equals((Object)base64_1));
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      boolean boolean0 = base64_0.hasData();
      assertFalse(base64_0.isUrlSafe());
      assertFalse(boolean0);
      assertNotSame(base64_0, base64_1);
      assertFalse(base64_0.equals((Object)base64_1));
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      boolean boolean1 = Base64.isArrayByteBase64(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray2 = base64_1.decode(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertFalse(base64_1.isUrlSafe());
      assertNotNull(byteArray2);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(base64_1, base64_0);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(base64_1.equals((Object)base64_0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      base64_1.decode((byte[]) null, (-1033), 64);
      assertFalse(base64_1.isUrlSafe());
      assertNotSame(base64_1, base64_0);
      assertFalse(base64_1.equals((Object)base64_0));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      String string1 = base64_0.encodeToString(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(string1);
      assertEquals(3, byteArray0.length);
      assertEquals("AAAA", string1);
      assertNotSame(base64_0, base64_1);
      assertNotSame(byteArray0, byteArray2);
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertFalse(base64_1.isUrlSafe());
      assertNotNull(byteArray3);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray3.length);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(base64_1, base64_0);
      assertSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray3, byteArray0);
      assertSame(byteArray3, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(base64_1.equals((Object)base64_0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray3, false, true);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertArrayEquals(new byte[] {}, byteArray4);
      assertFalse(base64_1.isUrlSafe());
      assertNotNull(byteArray4);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray3.length);
      assertEquals(0, byteArray4.length);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(base64_1, base64_0);
      assertSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertSame(byteArray2, byteArray4);
      assertSame(byteArray3, byteArray4);
      assertNotSame(byteArray3, byteArray0);
      assertSame(byteArray3, byteArray2);
      assertSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray0);
      assertSame(byteArray4, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(base64_1.equals((Object)base64_0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      String string2 = Base64.encodeBase64URLSafeString(byteArray3);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertFalse(base64_1.isUrlSafe());
      assertNotNull(string2);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray3.length);
      assertEquals("", string2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(base64_1, base64_0);
      assertSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertSame(byteArray2, byteArray4);
      assertSame(byteArray3, byteArray4);
      assertNotSame(byteArray3, byteArray0);
      assertSame(byteArray3, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(base64_1.equals((Object)base64_0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Base64 base64_0 = new Base64(136);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray0 = new byte[5];
      int int0 = base64_0.readResults(byteArray0, (-2565), 8186);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertEquals(0, int0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      base64_0.encode(byteArray0, (-3526), 0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertEquals("AAAAAAA", string0);
      
      byte[] byteArray1 = new byte[4];
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)107;
      byteArray1[2] = (byte) (-124);
      byteArray1[3] = (byte)101;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-1), (byte)107, (byte) (-124), (byte)101}, byteArray1);
      //  // Unstable assertion: assertEquals((short)145, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte) (-111), bigInteger0.byteValue());
      //  // Unstable assertion: assertNotNull(bigInteger0);
      //  // Unstable assertion: assertEquals(4, byteArray1.length);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean0 = Base64.isBase64(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      
      String string1 = base64_0.encodeToString(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertEquals("AAAAAAA='\u0000", string1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray2 = base64_0.encode(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61, (byte)39, (byte)0}, byteArray2);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertEquals(10, byteArray2.length);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray3 = Base64.discardWhitespace(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-1), (byte)107, (byte) (-124), (byte)101}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-1), (byte)107, (byte) (-124), (byte)101}, byteArray3);
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertEquals(4, byteArray1.length);
      //  // Unstable assertion: assertEquals(4, byteArray3.length);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      
      int int1 = base64_0.avail();
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(0, int1);
      //  // Unstable assertion: assertTrue(int1 == int0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      Base64 base64_1 = new Base64((-1289), byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      //  // Unstable assertion: assertNotNull(base64_1);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      boolean boolean1 = base64_1.hasData();
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertFalse(boolean1);
      //  // Unstable assertion: assertNotSame(base64_1, base64_0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray3, true, false);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)47, (byte)50, (byte)117, (byte)69, (byte)90, (byte)81, (byte)61, (byte)61, (byte)39, (byte)0}, byteArray4);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-1), (byte)107, (byte) (-124), (byte)101}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-1), (byte)107, (byte) (-124), (byte)101}, byteArray3);
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertEquals(10, byteArray4.length);
      //  // Unstable assertion: assertEquals(4, byteArray1.length);
      //  // Unstable assertion: assertEquals(4, byteArray3.length);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray4);
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      
      String string2 = Base64.encodeBase64URLSafeString(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertNotNull(string2);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertEquals("AAAAAAA", string2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string1));
      //  // Unstable assertion: assertTrue(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      assertArrayEquals(new byte[] {(byte)10}, byteArray1);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(byteArray1);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      String string0 = Base64.encodeBase64String(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals(1, byteArray0.length);
      assertEquals("AA==", string0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)114;
      byte byte0 = (byte)49;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-104);
      byteArray0[6] = (byte) (-113);
      byteArray0[7] = (byte)18;
      String string0 = Base64.encodeBase64String(byteArray0);
      assertArrayEquals(new byte[] {(byte)114, (byte)49, (byte)89, (byte)39, (byte)1, (byte) (-104), (byte) (-113), (byte)18}, byteArray0);
      assertNotNull(string0);
      assertEquals(8, byteArray0.length);
      assertEquals("cjFZJwGYjxI=", string0);
      
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertArrayEquals(new byte[] {(byte)114, (byte)49, (byte)89, (byte)39, (byte)1, (byte) (-104), (byte) (-113), (byte)18}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertFalse(boolean0);
      
      String string1 = Base64.encodeBase64URLSafeString(byteArray0);
      assertArrayEquals(new byte[] {(byte)114, (byte)49, (byte)89, (byte)39, (byte)1, (byte) (-104), (byte) (-113), (byte)18}, byteArray0);
      assertNotNull(string1);
      assertEquals(8, byteArray0.length);
      assertEquals("cjFZJwGYjxI", string1);
      assertFalse(string1.equals((Object)string0));
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      MockRandom mockRandom0 = new MockRandom(2016L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        BigInteger.probablePrime((byte)1, mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // bitLength < 2
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertArrayEquals(new byte[] {(byte)4, (byte)97, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(14, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray0[3] = (byte) (-109);
      int int0 = base64_0.readResults(byteArray0, 1, 19);
      assertArrayEquals(new byte[] {(byte)4, (byte)97, (byte)0, (byte) (-109), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(9, byteArray0.length);
      assertEquals(0, int0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      Base64 base64_1 = new Base64((byte) (-109));
      assertFalse(base64_1.isUrlSafe());
      assertNotNull(base64_1);
      assertFalse(base64_1.equals((Object)base64_0));
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      Base64 base64_2 = new Base64(true);
      assertTrue(base64_2.isUrlSafe());
      assertNotNull(base64_2);
      assertFalse(base64_2.equals((Object)base64_0));
      assertFalse(base64_2.equals((Object)base64_1));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      // Undeclared exception!
      try { 
        base64_2.decode(byteArray0, 8, 101);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray0 = new byte[0];
      String string0 = base64_0.encodeToString(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray0);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals(0, byteArray0.length);
      //  // Unstable assertion: assertEquals("", string0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray1 = new byte[1];
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61, (byte)39, (byte)0}, byteArray2);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertEquals(1, byteArray1.length);
      //  // Unstable assertion: assertEquals(6, byteArray2.length);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61, (byte)39, (byte)0}, byteArray3);
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertEquals(1, byteArray1.length);
      //  // Unstable assertion: assertEquals(6, byteArray3.length);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      
      byteArray1[0] = (byte)5;
      int int0 = base64_0.readResults(byteArray1, (-2851), (byte)5);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)5}, byteArray1);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(1, byteArray1.length);
      //  // Unstable assertion: assertEquals(0, int0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray4 = new byte[0];
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      
      byte[] byteArray5 = base64_0.decode("");
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray5);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(byteArray5);
      //  // Unstable assertion: assertEquals(0, byteArray5.length);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray1));
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      base64_0.encode(byteArray4, 2290, (-955));
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray4);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(0, byteArray4.length);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray5);
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray5));
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray6 = new byte[2];
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray0));
      
      byteArray6[0] = (byte)5;
      String string1 = Base64.encodeBase64URLSafeString(byteArray6);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)5, (byte)0}, byteArray6);
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertEquals(2, byteArray6.length);
      //  // Unstable assertion: assertEquals("BQA", string1);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray4);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray4);
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertNotNull(bigInteger0);
      //  // Unstable assertion: assertEquals(0, byteArray4.length);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray5);
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray5));
      
      boolean boolean0 = Base64.isBase64(byteArray4);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray4);
      //  // Unstable assertion: assertEquals(0, byteArray4.length);
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray5);
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray5));
      
      String string2 = base64_0.encodeToString(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)5}, byteArray1);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(string2);
      //  // Unstable assertion: assertEquals(1, byteArray1.length);
      //  // Unstable assertion: assertEquals("BQ'\u0000", string2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertFalse(string2.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray7 = Base64.decodeBase64("BQA");
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)5, (byte)0}, byteArray7);
      //  // Unstable assertion: assertNotNull(byteArray7);
      //  // Unstable assertion: assertEquals(2, byteArray7.length);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray5);
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray5));
      
      boolean boolean1 = Base64.isBase64(byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)5}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61, (byte)39, (byte)0}, byteArray2);
      //  // Unstable assertion: assertEquals(1, byteArray1.length);
      //  // Unstable assertion: assertEquals(6, byteArray2.length);
      //  // Unstable assertion: assertFalse(boolean1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray7);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray7);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray7));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray7));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      Base64 base64_0 = new Base64((-3444));
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      Base64 base64_1 = new Base64();
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      //  // Unstable assertion: assertNotNull(base64_1);
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray1 = base64_1.encode(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray1);
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertEquals(4, byteArray1.length);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(base64_1, base64_0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)1}, byteArray2);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertEquals(1, byteArray2.length);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      
      Base64 base64_2 = new Base64();
      //  // Unstable assertion: assertFalse(base64_2.isUrlSafe());
      //  // Unstable assertion: assertNotNull(base64_2);
      //  // Unstable assertion: assertFalse(base64_2.equals((Object)base64_1));
      //  // Unstable assertion: assertFalse(base64_2.equals((Object)base64_0));
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      int int0 = base64_2.avail();
      //  // Unstable assertion: assertFalse(base64_2.isUrlSafe());
      //  // Unstable assertion: assertEquals(0, int0);
      //  // Unstable assertion: assertNotSame(base64_2, base64_1);
      //  // Unstable assertion: assertNotSame(base64_2, base64_0);
      //  // Unstable assertion: assertFalse(base64_2.equals((Object)base64_1));
      //  // Unstable assertion: assertFalse(base64_2.equals((Object)base64_0));
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      boolean boolean0 = base64_2.hasData();
      //  // Unstable assertion: assertFalse(base64_2.isUrlSafe());
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertNotSame(base64_2, base64_1);
      //  // Unstable assertion: assertNotSame(base64_2, base64_0);
      //  // Unstable assertion: assertFalse(base64_2.equals((Object)base64_1));
      //  // Unstable assertion: assertFalse(base64_2.equals((Object)base64_0));
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)1}, byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61, (byte)39, (byte)0}, byteArray3);
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertEquals(1, byteArray2.length);
      //  // Unstable assertion: assertEquals(6, byteArray3.length);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray1);
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      //  // Unstable assertion: assertEquals((byte)1, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)1, bigInteger0.shortValue());
      //  // Unstable assertion: assertNotNull(bigInteger0);
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertEquals(4, byteArray1.length);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(base64_1, base64_0);
      //  // Unstable assertion: assertNotSame(base64_1, base64_2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      try { 
        base64_0.encode((Object) "K~^");
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte) (-4));
      //  // Unstable assertion: assertFalse(boolean0);
      
      byte[] byteArray0 = Base64.decodeBase64("5!");
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray0);
      //  // Unstable assertion: assertNotNull(byteArray0);
      //  // Unstable assertion: assertEquals(0, byteArray0.length);
      
      Base64 base64_0 = new Base64((byte) (-4), byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(0, byteArray0.length);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      boolean boolean1 = base64_0.hasData();
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(0, byteArray0.length);
      //  // Unstable assertion: assertFalse(boolean1);
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray1 = Base64.decodeBase64("5!");
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray1);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertEquals(0, byteArray1.length);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      
      BigInteger bigInteger0 = BigInteger.TEN;
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)10, bigInteger0.shortValue());
      //  // Unstable assertion: assertNotNull(bigInteger0);
      
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray2);
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)10, bigInteger0.shortValue());
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertEquals(4, byteArray2.length);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      
      byte[] byteArray3 = base64_0.decode(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray3);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertEquals(0, byteArray0.length);
      //  // Unstable assertion: assertEquals(0, byteArray3.length);
      //  // Unstable assertion: assertSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      int int0 = 0;
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray1);
      //  // Unstable assertion: assertEquals((byte)0, bigInteger1.byteValue());
      //  // Unstable assertion: assertEquals((short)0, bigInteger1.shortValue());
      //  // Unstable assertion: assertNotNull(bigInteger1);
      //  // Unstable assertion: assertEquals(0, byteArray1.length);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger0);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      boolean boolean2 = Base64.isBase64(byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray2);
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)10, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals(4, byteArray2.length);
      //  // Unstable assertion: assertTrue(boolean2);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(boolean2 == boolean1);
      //  // Unstable assertion: assertFalse(boolean2 == boolean0);
      
      String string0 = base64_0.encodeToString(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray1);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals(0, byteArray0.length);
      //  // Unstable assertion: assertEquals(0, byteArray1.length);
      //  // Unstable assertion: assertEquals("", string0);
      //  // Unstable assertion: assertSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray4 = base64_0.encode((byte[]) null);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNull(byteArray4);
      //  // Unstable assertion: assertEquals(0, byteArray0.length);
      //  // Unstable assertion: assertSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray5 = Base64.discardWhitespace(byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray5);
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)10, bigInteger0.shortValue());
      //  // Unstable assertion: assertNotNull(byteArray5);
      //  // Unstable assertion: assertEquals(4, byteArray2.length);
      //  // Unstable assertion: assertEquals(4, byteArray5.length);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray1);
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray1));
      
      int int1 = base64_0.avail();
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(0, byteArray0.length);
      //  // Unstable assertion: assertEquals(0, int1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray5);
      //  // Unstable assertion: assertSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertTrue(int1 == int0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      boolean boolean3 = base64_0.hasData();
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(0, byteArray0.length);
      //  // Unstable assertion: assertFalse(boolean3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray5);
      //  // Unstable assertion: assertSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertTrue(boolean3 == boolean1);
      //  // Unstable assertion: assertTrue(boolean3 == boolean0);
      //  // Unstable assertion: assertFalse(boolean3 == boolean2);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray6 = Base64.encodeBase64Chunked(byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)81, (byte)50, (byte)99, (byte)57, (byte)80, (byte)81, (byte)61, (byte)61, (byte)39, (byte)0}, byteArray6);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray2);
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)10, bigInteger0.shortValue());
      //  // Unstable assertion: assertNotNull(byteArray6);
      //  // Unstable assertion: assertEquals(10, byteArray6.length);
      //  // Unstable assertion: assertEquals(4, byteArray2.length);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray1);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray5);
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray5));
      
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61, (byte)39, (byte)0}, byteArray1);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArray1.length);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61, (byte)39, (byte)0}, byteArray2);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArray2.length);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray0[0] = (byte)5;
      int int0 = base64_0.readResults(byteArray0, (-2851), (byte)5);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)5}, byteArray0);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertEquals(0, int0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray3 = new byte[0];
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      
      base64_0.encode(byteArray3, 2290, (-932));
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray3);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(0, byteArray3.length);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray4 = new byte[2];
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      
      byteArray4[0] = (byte)5;
      byteArray4[1] = (byte)5;
      String string0 = Base64.encodeBase64URLSafeString(byteArray4);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)5, (byte)5}, byteArray4);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals(2, byteArray4.length);
      //  // Unstable assertion: assertEquals("BQU", string0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray3);
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertNotNull(bigInteger0);
      //  // Unstable assertion: assertEquals(0, byteArray3.length);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      
      boolean boolean0 = Base64.isBase64(byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray3);
      //  // Unstable assertion: assertEquals(0, byteArray3.length);
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      
      byte[] byteArray5 = Base64.encodeBase64(byteArray3, true, true, 742);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray5);
      //  // Unstable assertion: assertNotNull(byteArray5);
      //  // Unstable assertion: assertEquals(0, byteArray3.length);
      //  // Unstable assertion: assertEquals(0, byteArray5.length);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertSame(byteArray3, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray2);
      //  // Unstable assertion: assertSame(byteArray5, byteArray3);
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray2));
      
      BigInteger bigInteger1 = BigInteger.TEN;
      //  // Unstable assertion: assertEquals((short)10, bigInteger1.shortValue());
      //  // Unstable assertion: assertEquals((byte)10, bigInteger1.byteValue());
      //  // Unstable assertion: assertNotNull(bigInteger1);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger0);
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      byte[] byteArray6 = Base64.toIntegerBytes(bigInteger1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)10}, byteArray6);
      //  // Unstable assertion: assertEquals((short)10, bigInteger1.shortValue());
      //  // Unstable assertion: assertEquals((byte)10, bigInteger1.byteValue());
      //  // Unstable assertion: assertNotNull(byteArray6);
      //  // Unstable assertion: assertEquals(1, byteArray6.length);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray3);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger0);
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger0));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Base64 base64_0 = new Base64(1331);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, (-815), 118);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)4;
      byte[] byteArray1 = Base64.encodeBase64Chunked((byte[]) null);
      assertNull(byteArray1);
      
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray2 = Base64.encodeBase64((byte[]) null, false);
      assertNull(byteArray2);
      
      int int0 = base64_0.readResults((byte[]) null, (byte) (-109), 2889);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, int0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      Base64 base64_1 = new Base64(991);
      assertFalse(base64_1.isUrlSafe());
      assertNotNull(base64_1);
      assertFalse(base64_1.equals((Object)base64_0));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      // Undeclared exception!
      try { 
        base64_1.decode((byte[]) null, 2889, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Base64 base64_0 = new Base64(40);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)1;
      String string0 = base64_0.encodeToString(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)102, (byte)1, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertEquals("ZgEAAAA='\u0000", string0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte) (-96);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)102, (byte)1, (byte) (-1), (byte) (-108), (byte) (-96)}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray1);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertEquals(0, byteArray1.length);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      //  // Unstable assertion: assertEquals((short)10, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = BigInteger.TEN;
      //  // Unstable assertion: assertEquals((byte)10, bigInteger1.byteValue());
      //  // Unstable assertion: assertEquals((short)10, bigInteger1.shortValue());
      //  // Unstable assertion: assertNotNull(bigInteger1);
      //  // Unstable assertion: assertSame(bigInteger1, bigInteger0);
      
      BigInteger bigInteger2 = bigInteger0.add(bigInteger1);
      //  // Unstable assertion: assertEquals((short)10, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((byte)10, bigInteger1.byteValue());
      //  // Unstable assertion: assertEquals((short)10, bigInteger1.shortValue());
      //  // Unstable assertion: assertEquals((byte)20, bigInteger2.byteValue());
      //  // Unstable assertion: assertEquals((short)20, bigInteger2.shortValue());
      //  // Unstable assertion: assertNotNull(bigInteger2);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger2);
      //  // Unstable assertion: assertSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger2);
      //  // Unstable assertion: assertSame(bigInteger1, bigInteger0);
      //  // Unstable assertion: assertNotSame(bigInteger2, bigInteger0);
      //  // Unstable assertion: assertNotSame(bigInteger2, bigInteger1);
      //  // Unstable assertion: assertFalse(bigInteger2.equals((Object)bigInteger0));
      //  // Unstable assertion: assertFalse(bigInteger2.equals((Object)bigInteger1));
      
      BigInteger bigInteger3 = bigInteger0.not();
      //  // Unstable assertion: assertEquals((short)10, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((byte) (-11), bigInteger3.byteValue());
      //  // Unstable assertion: assertEquals((short) (-11), bigInteger3.shortValue());
      //  // Unstable assertion: assertNotNull(bigInteger3);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger2);
      //  // Unstable assertion: assertSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger3);
      //  // Unstable assertion: assertNotSame(bigInteger3, bigInteger2);
      //  // Unstable assertion: assertNotSame(bigInteger3, bigInteger1);
      //  // Unstable assertion: assertNotSame(bigInteger3, bigInteger0);
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger2));
      //  // Unstable assertion: assertFalse(bigInteger3.equals((Object)bigInteger2));
      //  // Unstable assertion: assertFalse(bigInteger3.equals((Object)bigInteger1));
      //  // Unstable assertion: assertFalse(bigInteger3.equals((Object)bigInteger0));
      
      BigInteger bigInteger4 = bigInteger0.multiply(bigInteger1);
      //  // Unstable assertion: assertEquals((short)10, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((byte)10, bigInteger1.byteValue());
      //  // Unstable assertion: assertEquals((short)10, bigInteger1.shortValue());
      //  // Unstable assertion: assertEquals((short)100, bigInteger4.shortValue());
      //  // Unstable assertion: assertEquals((byte)100, bigInteger4.byteValue());
      //  // Unstable assertion: assertNotNull(bigInteger4);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger2);
      //  // Unstable assertion: assertSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger4);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger3);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger4);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger3);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger2);
      //  // Unstable assertion: assertSame(bigInteger1, bigInteger0);
      //  // Unstable assertion: assertNotSame(bigInteger4, bigInteger2);
      //  // Unstable assertion: assertNotSame(bigInteger4, bigInteger1);
      //  // Unstable assertion: assertNotSame(bigInteger4, bigInteger0);
      //  // Unstable assertion: assertNotSame(bigInteger4, bigInteger3);
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger2));
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger3));
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger3));
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger2));
      //  // Unstable assertion: assertFalse(bigInteger4.equals((Object)bigInteger2));
      //  // Unstable assertion: assertFalse(bigInteger4.equals((Object)bigInteger1));
      //  // Unstable assertion: assertFalse(bigInteger4.equals((Object)bigInteger0));
      //  // Unstable assertion: assertFalse(bigInteger4.equals((Object)bigInteger3));
      
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray2);
      //  // Unstable assertion: assertEquals((short)10, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertEquals(4, byteArray2.length);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger2);
      //  // Unstable assertion: assertSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger4);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger2));
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger4));
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      
      Random.setNextRandom((-1));
      byte[] byteArray3 = Base64.discardWhitespace(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)102, (byte)1, (byte) (-1), (byte) (-108), (byte) (-96)}, byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)102, (byte)1, (byte) (-1), (byte) (-108), (byte) (-96)}, byteArray0);
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertEquals(5, byteArray3.length);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      
      int int0 = base64_0.avail();
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(0, int0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      boolean boolean0 = Base64.isBase64((byte)102);
      //  // Unstable assertion: assertTrue(boolean0);
      
      String string1 = base64_0.encodeToString(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)102, (byte)1, (byte) (-1), (byte) (-108), (byte) (-96)}, byteArray0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertEquals("ZgH/lKA='\u0000", string1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray3, true, true, 76);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)102, (byte)1, (byte) (-1), (byte) (-108), (byte) (-96)}, byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)102, (byte)1, (byte) (-1), (byte) (-108), (byte) (-96)}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)90, (byte)103, (byte)72, (byte)95, (byte)108, (byte)75, (byte)65, (byte)39, (byte)0}, byteArray4);
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertEquals(5, byteArray3.length);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertEquals(9, byteArray4.length);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = Base64.decodeBase64("H>LKo?4XFi3!a{");
      assertArrayEquals(new byte[] {(byte)28, (byte) (-78), (byte) (-88), (byte) (-31), (byte)113, (byte)98, (byte) (-35)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      assertArrayEquals(new byte[] {(byte)28, (byte) (-78), (byte) (-88), (byte) (-31), (byte)113, (byte)98, (byte) (-35)}, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(7, byteArray1.length);
      assertEquals(14, byteArray2.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byte[] byteArray3 = Base64.decodeBase64(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertNotNull(byteArray3);
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray3.length);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      
      boolean boolean0 = Base64.isBase64("H>LKo?4XFi3!a{");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, (int) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)94;
      byteArray0[5] = (byte)108;
      byteArray0[6] = (byte)47;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte)96, (byte) (-39), (byte)126, (byte)2, (byte)94, (byte)108, (byte)47}, byteArray0);
      assertEquals((byte) (-105), bigInteger0.byteValue());
      assertEquals((short)151, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      assertEquals(7, byteArray0.length);
      
      Random.setNextRandom((byte)96);
      boolean boolean0 = Base64.isBase64((byte)126);
      assertFalse(boolean0);
      
      boolean boolean1 = Base64.isBase64(byteArray0);
      assertArrayEquals(new byte[] {(byte)96, (byte) (-39), (byte)126, (byte)2, (byte)94, (byte)108, (byte)47}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Base64 base64_0 = new Base64(false);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertArrayEquals(new byte[] {(byte)96, (byte) (-39), (byte)126, (byte)2, (byte)94, (byte)108, (byte)47}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-105)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      try { 
        base64_0.encode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)42;
      byteArray0[0] = (byte)0;
      byteArray0[3] = (byte)25;
      Base64 base64_0 = new Base64((-1779));
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray1 = new byte[2];
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)42, (byte)0, (byte)25, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)67, (byte)111, (byte)65, (byte)71, (byte)81, (byte)65, (byte)61}, byteArray2);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertEquals(8, byteArray2.length);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)124;
      String string0 = base64_0.encodeToString(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)124}, byteArray1);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      //  // Unstable assertion: assertEquals("AHw=", string0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray3 = base64_0.encode(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)124}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)72, (byte)119, (byte)61}, byteArray3);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      //  // Unstable assertion: assertEquals(4, byteArray3.length);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray4 = Base64.discardWhitespace(byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)124}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)72, (byte)119, (byte)61}, byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)72, (byte)119, (byte)61}, byteArray4);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      //  // Unstable assertion: assertEquals(4, byteArray3.length);
      //  // Unstable assertion: assertEquals(4, byteArray4.length);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      int int0 = base64_0.avail();
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(0, int0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      boolean boolean0 = base64_0.hasData();
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray5 = Base64.encodeBase64Chunked(byteArray4);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)124}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)72, (byte)119, (byte)61}, byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)72, (byte)119, (byte)61}, byteArray4);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)81, (byte)85, (byte)104, (byte)51, (byte)80, (byte)81, (byte)61, (byte)61, (byte)39, (byte)0}, byteArray5);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(byteArray5);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      //  // Unstable assertion: assertEquals(4, byteArray3.length);
      //  // Unstable assertion: assertEquals(4, byteArray4.length);
      //  // Unstable assertion: assertEquals(10, byteArray5.length);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray1));
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)42, (byte)0, (byte)25, (byte)0}, byteArray0);
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertNotNull(bigInteger0);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray5);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray5));
      
      try { 
        base64_0.encode((Object) bigInteger0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)61;
      base64_0.decode(byteArray0, (-900), (-800));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)61, (byte)0}, byteArray0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray1 = base64_0.decode("");
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray1);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertEquals(0, byteArray1.length);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray2 = base64_0.decode((String) null);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNull(byteArray2);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray3);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertEquals(0, byteArray1.length);
      //  // Unstable assertion: assertEquals(0, byteArray3.length);
      //  // Unstable assertion: assertSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      String string0 = base64_0.encodeToString(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)61, (byte)0}, byteArray0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals("PQA='\u0000", string0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      boolean boolean0 = base64_0.hasData();
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      boolean boolean1 = Base64.isArrayByteBase64(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)61, (byte)0}, byteArray0);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertFalse(boolean1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      
      Base64 base64_1 = new Base64(1515, (byte[]) null, false);
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      //  // Unstable assertion: assertNotNull(base64_1);
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray4 = base64_1.decode(byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray4);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertEquals(0, byteArray1.length);
      //  // Unstable assertion: assertEquals(0, byteArray3.length);
      //  // Unstable assertion: assertEquals(0, byteArray4.length);
      //  // Unstable assertion: assertNotSame(base64_0, base64_1);
      //  // Unstable assertion: assertSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertSame(byteArray3, byteArray4);
      //  // Unstable assertion: assertSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(base64_1, base64_0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertFalse(base64_0.equals((Object)base64_1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      base64_0.decode(byteArray3, 0, (-1607));
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray3);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(0, byteArray1.length);
      //  // Unstable assertion: assertEquals(0, byteArray3.length);
      //  // Unstable assertion: assertNotSame(base64_0, base64_1);
      //  // Unstable assertion: assertSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertSame(byteArray3, byteArray4);
      //  // Unstable assertion: assertSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertFalse(base64_0.equals((Object)base64_1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      String string1 = base64_0.encodeToString(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)61, (byte)0}, byteArray0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals("PQA='\u0000", string1);
      //  // Unstable assertion: assertNotSame(base64_0, base64_1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertFalse(base64_0.equals((Object)base64_1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertTrue(string1.equals((Object)string0));
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray5 = Base64.encodeBase64URLSafe(byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray5);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(byteArray5);
      //  // Unstable assertion: assertEquals(0, byteArray1.length);
      //  // Unstable assertion: assertEquals(0, byteArray3.length);
      //  // Unstable assertion: assertEquals(0, byteArray5.length);
      //  // Unstable assertion: assertNotSame(base64_0, base64_1);
      //  // Unstable assertion: assertSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertSame(byteArray1, byteArray5);
      //  // Unstable assertion: assertSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertSame(byteArray3, byteArray4);
      //  // Unstable assertion: assertSame(byteArray3, byteArray5);
      //  // Unstable assertion: assertSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertSame(byteArray5, byteArray4);
      //  // Unstable assertion: assertSame(byteArray5, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray0);
      //  // Unstable assertion: assertSame(byteArray5, byteArray1);
      //  // Unstable assertion: assertFalse(base64_0.equals((Object)base64_1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray6 = Base64.encodeBase64((byte[]) null, false, false);
      //  // Unstable assertion: assertNull(byteArray6);
      
      String string2 = Base64.encodeBase64URLSafeString(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)61, (byte)0}, byteArray0);
      //  // Unstable assertion: assertNotNull(string2);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals("PQA", string2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertFalse(string2.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string0));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      Object object0 = new Object();
      //  // Unstable assertion: assertNotNull(object0);
      
      int int0 = base64_0.avail();
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(0, int0);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      Object object1 = base64_0.decode((Object) "");
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(object1);
      //  // Unstable assertion: assertFalse(object1.equals((Object)object0));
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      Object object2 = base64_0.decode(object1);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(object2);
      //  // Unstable assertion: assertSame(object1, object2);
      //  // Unstable assertion: assertSame(object2, object1);
      //  // Unstable assertion: assertFalse(object1.equals((Object)object0));
      //  // Unstable assertion: assertFalse(object2.equals((Object)object0));
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)10, bigInteger0.shortValue());
      //  // Unstable assertion: assertNotNull(bigInteger0);
      
      byte[] byteArray0 = new byte[2];
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)object2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)object1));
      
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)56;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)56, (byte)56}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)79, (byte)68, (byte)103, (byte)61, (byte)39, (byte)0}, byteArray1);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArray1.length);
      //  // Unstable assertion: assertNotSame(byteArray0, object2);
      //  // Unstable assertion: assertNotSame(byteArray0, object1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, object2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, object1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)object2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)object1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)object2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)object1));
      
      byte[] byteArray2 = new byte[5];
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)object1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)object2));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)56;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)56;
      byteArray2[4] = (byte)56;
      boolean boolean0 = Base64.isBase64(byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)56, (byte)0, (byte)56, (byte)56}, byteArray2);
      //  // Unstable assertion: assertEquals(5, byteArray2.length);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertNotSame(byteArray2, object1);
      //  // Unstable assertion: assertNotSame(byteArray2, object2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)object1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)object2));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray3);
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)10, bigInteger0.shortValue());
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertEquals(4, byteArray3.length);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, object2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, object1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)object2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)object1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)97;
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)4;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)3;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)0;
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      assertArrayEquals(new byte[] {(byte)4, (byte)0, (byte)0, (byte)0, (byte)3, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)66, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)77, (byte)65, (byte)65, (byte)65}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(7, byteArray1.length);
      assertEquals(10, byteArray2.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray0[2] = (byte)0;
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray0);
      assertArrayEquals(new byte[] {(byte)4, (byte)97, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray3);
      assertEquals(9, byteArray0.length);
      assertEquals(14, byteArray3.length);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      
      byteArray0[3] = (byte) (-109);
      int int0 = base64_0.readResults(byteArray0, 1, 19);
      assertArrayEquals(new byte[] {(byte)4, (byte)97, (byte)0, (byte) (-109), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(9, byteArray0.length);
      assertEquals(0, int0);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-28);
      byteArray0[8] = (byte)0;
      base64_0.decode(byteArray0, (-1359), 0);
      assertArrayEquals(new byte[] {(byte)4, (byte)97, (byte)0, (byte) (-109), (byte)0, (byte)0, (byte)0, (byte) (-28), (byte)0}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(9, byteArray0.length);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      base64_0.encode(byteArray3, (int) (byte)97, (int) (byte) (-109));
      assertArrayEquals(new byte[] {(byte)4, (byte)97, (byte)0, (byte) (-109), (byte)0, (byte)0, (byte)0, (byte) (-28), (byte)0}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(9, byteArray0.length);
      assertEquals(14, byteArray3.length);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray4 = base64_0.decode("*%7Bm5w`%{8qwh");
      assertArrayEquals(new byte[] {(byte) (-20), (byte)25, (byte) (-71), (byte) (-61), (byte) (-54), (byte) (-80)}, byteArray4);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(byteArray4);
      assertEquals(6, byteArray4.length);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray0);
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertArrayEquals(new byte[] {(byte)4, (byte)97, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(14, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray0[3] = (byte) (-109);
      int int0 = base64_0.readResults(byteArray0, 1, 19);
      assertArrayEquals(new byte[] {(byte)4, (byte)97, (byte)0, (byte) (-109), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(9, byteArray0.length);
      assertEquals(0, int0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-28);
      boolean boolean0 = Base64.isBase64("");
      assertTrue(boolean0);
      
      byteArray0[8] = (byte)0;
      base64_0.decode(byteArray0, (-1359), 0);
      assertArrayEquals(new byte[] {(byte)4, (byte)97, (byte)0, (byte) (-109), (byte)0, (byte)0, (byte)0, (byte) (-28), (byte)0}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(9, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      base64_0.encode(byteArray1, (int) (byte)97, (int) (byte) (-109));
      assertArrayEquals(new byte[] {(byte)4, (byte)97, (byte)0, (byte) (-109), (byte)0, (byte)0, (byte)0, (byte) (-28), (byte)0}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(9, byteArray0.length);
      assertEquals(14, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      boolean boolean1 = base64_0.hasData();
      assertFalse(base64_0.isUrlSafe());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte) (-4));
      assertFalse(boolean0);
      
      byte[] byteArray0 = Base64.decodeBase64("5!");
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      Base64 base64_0 = new Base64((byte) (-4), byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(0, byteArray0.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      boolean boolean1 = base64_0.hasData();
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, byteArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray1 = Base64.decodeBase64("5!");
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray2);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(byteArray2);
      assertEquals(4, byteArray2.length);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byte[] byteArray3 = base64_0.decode(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(byteArray3);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray3.length);
      assertNotSame(byteArray0, byteArray2);
      assertSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      base64_0.decode(byteArray2, 0, 44);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray2);
      assertFalse(base64_0.isUrlSafe());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(0, byteArray0.length);
      assertEquals(4, byteArray2.length);
      assertNotSame(byteArray0, byteArray2);
      assertSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray3);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      String string0 = base64_0.encodeToString(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(string0);
      assertEquals(0, byteArray0.length);
      assertEquals("", string0);
      assertNotSame(byteArray0, byteArray2);
      assertSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray4 = Base64.encodeBase64URLSafe(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray4);
      assertNotNull(byteArray4);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray4.length);
      assertNotSame(byteArray0, byteArray2);
      assertSame(byteArray0, byteArray3);
      assertSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray1);
      assertSame(byteArray4, byteArray3);
      assertSame(byteArray4, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray1));
      
      byte[] byteArray5 = Base64.encodeBase64(byteArray0, false, false);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray5);
      assertNotNull(byteArray5);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray5.length);
      assertNotSame(byteArray0, byteArray2);
      assertSame(byteArray0, byteArray5);
      assertSame(byteArray0, byteArray3);
      assertSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray5, byteArray1);
      assertSame(byteArray5, byteArray0);
      assertSame(byteArray5, byteArray4);
      assertSame(byteArray5, byteArray3);
      assertNotSame(byteArray5, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertFalse(byteArray5.equals((Object)byteArray2));
      
      String string1 = Base64.encodeBase64URLSafeString(byteArray3);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(string1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray3.length);
      assertEquals("", string1);
      assertNotSame(byteArray0, byteArray2);
      assertSame(byteArray0, byteArray5);
      assertSame(byteArray0, byteArray3);
      assertSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray1);
      assertSame(byteArray3, byteArray4);
      assertSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertSame(byteArray3, byteArray5);
      assertNotSame(byteArray3, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertTrue(string1.equals((Object)string0));
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray6 = Base64.discardWhitespace(byteArray5);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray5);
      assertArrayEquals(new byte[] {}, byteArray6);
      assertNotNull(byteArray6);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray5.length);
      assertEquals(0, byteArray6.length);
      assertNotSame(byteArray0, byteArray2);
      assertSame(byteArray0, byteArray5);
      assertSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray6);
      assertSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray5, byteArray1);
      assertNotSame(byteArray5, byteArray6);
      assertSame(byteArray5, byteArray0);
      assertSame(byteArray5, byteArray4);
      assertSame(byteArray5, byteArray3);
      assertNotSame(byteArray5, byteArray2);
      assertNotSame(byteArray6, byteArray5);
      assertNotSame(byteArray6, byteArray2);
      assertNotSame(byteArray6, byteArray0);
      assertNotSame(byteArray6, byteArray1);
      assertNotSame(byteArray6, byteArray4);
      assertNotSame(byteArray6, byteArray3);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray6.equals((Object)byteArray5));
      assertFalse(byteArray6.equals((Object)byteArray2));
      assertFalse(byteArray6.equals((Object)byteArray0));
      assertFalse(byteArray6.equals((Object)byteArray1));
      assertFalse(byteArray6.equals((Object)byteArray4));
      assertFalse(byteArray6.equals((Object)byteArray3));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)0;
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)42, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Base64 base64_0 = new Base64(144);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray0 = new byte[5];
      Base64 base64_1 = new Base64((-3722), byteArray0, true);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(base64_1.isUrlSafe());
      assertNotNull(base64_1);
      assertEquals(5, byteArray0.length);
      assertFalse(base64_1.equals((Object)base64_0));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Base64 base64_2 = new Base64();
      assertFalse(base64_2.isUrlSafe());
      assertNotNull(base64_2);
      assertFalse(base64_2.equals((Object)base64_0));
      assertFalse(base64_2.equals((Object)base64_1));
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      boolean boolean0 = base64_0.isUrlSafe();
      assertFalse(base64_0.isUrlSafe());
      assertFalse(boolean0);
      assertNotSame(base64_0, base64_2);
      assertNotSame(base64_0, base64_1);
      assertFalse(base64_0.equals((Object)base64_2));
      assertFalse(base64_0.equals((Object)base64_1));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Base64 base64_0 = new Base64(1);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray2 = new byte[3];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)100;
      byte[] byteArray3 = Base64.encodeBase64(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertNotNull(byteArray3);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray3.length);
      assertNotSame(byteArray0, byteArray2);
      assertSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertSame(byteArray3, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      
      byteArray2[1] = (byte)29;
      byte[] byteArray4 = base64_0.decode("org.apache.commons.codec.EncoderException");
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(byteArray4);
      assertEquals(27, byteArray4.length);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray0);
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray5 = base64_0.decode("");
      assertArrayEquals(new byte[] {}, byteArray5);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(byteArray5);
      assertEquals(0, byteArray5.length);
      assertNotSame(byteArray5, byteArray0);
      assertNotSame(byteArray5, byteArray4);
      assertNotSame(byteArray5, byteArray3);
      assertNotSame(byteArray5, byteArray2);
      assertNotSame(byteArray5, byteArray1);
      assertFalse(byteArray5.equals((Object)byteArray0));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byteArray2[2] = (byte)0;
      Base64 base64_1 = new Base64((byte)25, byteArray1, true);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertTrue(base64_1.isUrlSafe());
      assertNotNull(base64_1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray5));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(base64_1.equals((Object)base64_0));
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray6 = Base64.encodeInteger(bigInteger0);
      assertArrayEquals(new byte[] {}, byteArray6);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(byteArray6);
      assertEquals(0, byteArray6.length);
      assertNotSame(byteArray6, byteArray3);
      assertNotSame(byteArray6, byteArray2);
      assertNotSame(byteArray6, byteArray1);
      assertNotSame(byteArray6, byteArray4);
      assertNotSame(byteArray6, byteArray5);
      assertNotSame(byteArray6, byteArray0);
      assertFalse(byteArray6.equals((Object)byteArray3));
      assertFalse(byteArray6.equals((Object)byteArray2));
      assertFalse(byteArray6.equals((Object)byteArray1));
      assertFalse(byteArray6.equals((Object)byteArray4));
      assertFalse(byteArray6.equals((Object)byteArray5));
      assertFalse(byteArray6.equals((Object)byteArray0));
      
      byte[] byteArray7 = base64_1.decode(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray7);
      assertTrue(base64_1.isUrlSafe());
      assertNotNull(byteArray7);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray7.length);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray4);
      assertSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray6);
      assertNotSame(byteArray0, byteArray7);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray6);
      assertNotSame(byteArray1, byteArray5);
      assertNotSame(byteArray1, byteArray2);
      assertSame(byteArray1, byteArray7);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(base64_1, base64_0);
      assertNotSame(byteArray7, byteArray4);
      assertSame(byteArray7, byteArray1);
      assertNotSame(byteArray7, byteArray3);
      assertNotSame(byteArray7, byteArray5);
      assertNotSame(byteArray7, byteArray2);
      assertNotSame(byteArray7, byteArray6);
      assertNotSame(byteArray7, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray6));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray6));
      assertFalse(byteArray1.equals((Object)byteArray5));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(base64_1.equals((Object)base64_0));
      assertFalse(byteArray7.equals((Object)byteArray4));
      assertFalse(byteArray7.equals((Object)byteArray3));
      assertFalse(byteArray7.equals((Object)byteArray5));
      assertFalse(byteArray7.equals((Object)byteArray2));
      assertFalse(byteArray7.equals((Object)byteArray6));
      assertFalse(byteArray7.equals((Object)byteArray0));
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      boolean boolean1 = base64_0.isUrlSafe();
      assertFalse(base64_0.isUrlSafe());
      assertFalse(boolean1);
      assertNotSame(base64_0, base64_1);
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(boolean1 == boolean0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(false);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)56;
      int int0 = (-800);
      base64_0.decode(byteArray0, (-900), (-800));
      assertArrayEquals(new byte[] {(byte)56, (byte)0}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(2, byteArray0.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray1 = base64_0.decode(byteArray0);
      assertArrayEquals(new byte[] {(byte)56, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      assertArrayEquals(new byte[] {(byte)56, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(byteArray2);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertSame(byteArray2, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte byte0 = (byte)0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      base64_0.decode(byteArray0, (int) (byte)0, (-900));
      assertArrayEquals(new byte[] {(byte)56, (byte)0}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(2, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Base64 base64_0 = new Base64(144);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-9);
      byteArray0[4] = (byte)83;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true, 100);
      assertArrayEquals(new byte[] {(byte)98, (byte)0, (byte) (-1), (byte) (-9), (byte)83}, byteArray0);
      assertArrayEquals(new byte[] {(byte)89, (byte)103, (byte)68, (byte)95, (byte)57, (byte)49, (byte)77}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 0, 109);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Base64 base64_0 = new Base64();
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)39, (byte)0}, byteArray0);
      //  // Unstable assertion: assertNotNull(byteArray0);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      
      base64_0.encode(byteArray0, 942, (int) (byte) (-113));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)39, (byte)0}, byteArray0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      base64_0.encode(byteArray0, 942, 942);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)39, (byte)0}, byteArray0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte)124;
      Base64 base64_0 = new Base64((-1779), byteArray0, true);
      assertArrayEquals(new byte[] {(byte)0, (byte)42, (byte)0, (byte)25, (byte)124}, byteArray0);
      assertTrue(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(5, byteArray0.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = base64_0.decode(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)42, (byte)0, (byte)25, (byte)124}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertTrue(base64_0.isUrlSafe());
      assertNotNull(byteArray2);
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      boolean boolean0 = base64_0.isUrlSafe();
      assertArrayEquals(new byte[] {(byte)0, (byte)42, (byte)0, (byte)25, (byte)124}, byteArray0);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(5, byteArray0.length);
      assertTrue(boolean0);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean0);
      
      Base64 base64_0 = new Base64(true);
      assertTrue(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray1 = base64_0.decode(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertTrue(base64_0.isUrlSafe());
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      boolean boolean1 = Base64.isBase64(") than the specified maxium size of ");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertTrue(base64_0.isUrlSafe());
      assertNotNull(byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertSame(byteArray0, byteArray2);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray1, byteArray2);
      assertSame(byteArray2, byteArray0);
      assertSame(byteArray2, byteArray1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertArrayEquals(new byte[] {(byte)4, (byte)97, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(14, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray0[3] = (byte) (-109);
      int int0 = base64_0.readResults(byteArray0, 1, 19);
      assertArrayEquals(new byte[] {(byte)4, (byte)97, (byte)0, (byte) (-109), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(9, byteArray0.length);
      assertEquals(0, int0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-28);
      byteArray0[8] = (byte)0;
      base64_0.decode(byteArray0, (-1359), 0);
      assertArrayEquals(new byte[] {(byte)4, (byte)97, (byte)0, (byte) (-109), (byte)0, (byte)0, (byte)0, (byte) (-28), (byte)0}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(9, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      base64_0.encode(byteArray1, (int) (byte)97, (int) (byte) (-109));
      assertArrayEquals(new byte[] {(byte)4, (byte)97, (byte)0, (byte) (-109), (byte)0, (byte)0, (byte)0, (byte) (-28), (byte)0}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(9, byteArray0.length);
      assertEquals(14, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte) (-73);
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertArrayEquals(new byte[] {(byte)97, (byte) (-97), (byte)101, (byte) (-125), (byte)97, (byte) (-73)}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(boolean0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      boolean boolean1 = bigInteger0.equals((Object) null);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      BigInteger bigInteger1 = bigInteger0.clearBit(0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      
      byte byte0 = bigInteger0.byteValueExact();
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, byte0);
      assertNotSame(bigInteger0, bigInteger1);
      assertTrue(bigInteger0.equals((Object)bigInteger1));
      
      // Undeclared exception!
      try { 
        bigInteger0.remainder((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = Base64.decodeBase64("0jG!=\"WtL,KesTk\"l");
      assertArrayEquals(new byte[] {(byte) (-46), (byte)49}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray0[2] = (byte)0;
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(3, byteArray0.length);
      assertEquals(4, byteArray2.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byte[] byteArray3 = Base64.decodeBase64(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertNotNull(byteArray3);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray3.length);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      
      byte[] byteArray4 = Base64.decodeBase64(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray4);
      assertNotNull(byteArray4);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray4.length);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray1));
      
      boolean boolean0 = Base64.isBase64("0jG!=\"WtL,KesTk\"l");
      assertFalse(boolean0);
      
      byte[] byteArray5 = base64_0.encode(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65}, byteArray5);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(byteArray5);
      assertEquals(3, byteArray0.length);
      assertEquals(4, byteArray5.length);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray5, byteArray4);
      assertNotSame(byteArray5, byteArray2);
      assertNotSame(byteArray5, byteArray3);
      assertNotSame(byteArray5, byteArray1);
      assertNotSame(byteArray5, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertFalse(byteArray5.equals((Object)byteArray0));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("'Z@hzgDWaN:RP=>|}Bw");
      assertArrayEquals(new byte[] {(byte)102, (byte)28, (byte) (-32), (byte)13, (byte)102, (byte) (-115), (byte)68}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(7, byteArray0.length);
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertArrayEquals(new byte[] {(byte)102, (byte)28, (byte) (-32), (byte)13, (byte)102, (byte) (-115), (byte)68}, byteArray0);
      assertNotNull(string0);
      assertEquals(7, byteArray0.length);
      assertEquals("ZhzgDWaNRA", string0);
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte)102, (byte)28, (byte) (-32), (byte)13, (byte)102, (byte) (-115), (byte)68}, byteArray0);
      assertEquals((short)32240, bigInteger0.shortValue());
      assertEquals((byte) (-16), bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)61;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(78, byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000\u0000\uFFFD\u0000\u0000\u0000=]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61, (byte)39, (byte)0}, byteArray1);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertEquals(10, byteArray1.length);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean0 = Base64.isArrayByteBase64(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61, (byte)39, (byte)0}, byteArray1);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertEquals(10, byteArray1.length);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      
      int int0 = bigInteger1.compareTo(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals(0, int0);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      
      short short0 = bigInteger1.shortValueExact();
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((short)0, short0);
      assertSame(bigInteger1, bigInteger0);
      
      BigInteger bigInteger2 = BigInteger.valueOf((short)0);
      assertEquals((byte)0, bigInteger2.byteValue());
      assertEquals((short)0, bigInteger2.shortValue());
      assertNotNull(bigInteger2);
      assertSame(bigInteger2, bigInteger1);
      assertSame(bigInteger2, bigInteger0);
      
      boolean boolean0 = bigInteger2.equals(bigInteger1);
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger2.byteValue());
      assertEquals((short)0, bigInteger2.shortValue());
      assertTrue(boolean0);
      assertSame(bigInteger1, bigInteger2);
      assertSame(bigInteger1, bigInteger0);
      assertSame(bigInteger2, bigInteger1);
      assertSame(bigInteger2, bigInteger0);
      
      BigInteger bigInteger3 = bigInteger0.add(bigInteger2);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)0, bigInteger2.byteValue());
      assertEquals((short)0, bigInteger2.shortValue());
      assertEquals((short)0, bigInteger3.shortValue());
      assertEquals((byte)0, bigInteger3.byteValue());
      assertNotNull(bigInteger3);
      assertSame(bigInteger0, bigInteger3);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger0, bigInteger2);
      assertSame(bigInteger2, bigInteger1);
      assertSame(bigInteger2, bigInteger0);
      assertSame(bigInteger2, bigInteger3);
      assertSame(bigInteger3, bigInteger0);
      assertSame(bigInteger3, bigInteger2);
      assertSame(bigInteger3, bigInteger1);
      
      BigInteger bigInteger4 = bigInteger0.subtract(bigInteger1);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger4.byteValue());
      assertEquals((short)0, bigInteger4.shortValue());
      assertNotNull(bigInteger4);
      assertSame(bigInteger0, bigInteger4);
      assertSame(bigInteger0, bigInteger3);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger0, bigInteger2);
      assertSame(bigInteger1, bigInteger2);
      assertSame(bigInteger1, bigInteger0);
      assertSame(bigInteger1, bigInteger4);
      assertSame(bigInteger1, bigInteger3);
      assertSame(bigInteger4, bigInteger2);
      assertSame(bigInteger4, bigInteger1);
      assertSame(bigInteger4, bigInteger3);
      assertSame(bigInteger4, bigInteger0);
      
      BigInteger bigInteger5 = bigInteger0.andNot(bigInteger1);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((short)0, bigInteger5.shortValue());
      assertEquals((byte)0, bigInteger5.byteValue());
      assertNotNull(bigInteger5);
      assertSame(bigInteger0, bigInteger4);
      assertSame(bigInteger0, bigInteger3);
      assertSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger5);
      assertSame(bigInteger0, bigInteger2);
      assertSame(bigInteger1, bigInteger2);
      assertSame(bigInteger1, bigInteger0);
      assertSame(bigInteger1, bigInteger4);
      assertNotSame(bigInteger1, bigInteger5);
      assertSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger5, bigInteger1);
      assertNotSame(bigInteger5, bigInteger2);
      assertNotSame(bigInteger5, bigInteger3);
      assertNotSame(bigInteger5, bigInteger0);
      assertNotSame(bigInteger5, bigInteger4);
      assertTrue(bigInteger5.equals((Object)bigInteger1));
      assertTrue(bigInteger5.equals((Object)bigInteger2));
      assertTrue(bigInteger5.equals((Object)bigInteger3));
      assertTrue(bigInteger5.equals((Object)bigInteger0));
      assertTrue(bigInteger5.equals((Object)bigInteger4));
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertSame(bigInteger0, bigInteger4);
      assertSame(bigInteger0, bigInteger3);
      assertSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger5);
      assertSame(bigInteger0, bigInteger2);
      assertTrue(bigInteger0.equals((Object)bigInteger5));
      
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertSame(bigInteger0, bigInteger4);
      assertSame(bigInteger0, bigInteger3);
      assertSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger5);
      assertSame(bigInteger0, bigInteger2);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertTrue(bigInteger0.equals((Object)bigInteger5));
      
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertSame(bigInteger0, bigInteger4);
      assertSame(bigInteger0, bigInteger3);
      assertSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger5);
      assertSame(bigInteger0, bigInteger2);
      assertSame(byteArray0, byteArray2);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray2, byteArray1);
      assertSame(byteArray2, byteArray0);
      assertTrue(bigInteger0.equals((Object)bigInteger5));
      
      BigInteger bigInteger6 = bigInteger0.negate();
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)0, bigInteger6.byteValue());
      assertEquals((short)0, bigInteger6.shortValue());
      assertNotNull(bigInteger6);
      assertSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger0, bigInteger6);
      assertSame(bigInteger0, bigInteger3);
      assertSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger5);
      assertSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger6, bigInteger3);
      assertNotSame(bigInteger6, bigInteger1);
      assertNotSame(bigInteger6, bigInteger2);
      assertNotSame(bigInteger6, bigInteger0);
      assertNotSame(bigInteger6, bigInteger4);
      assertNotSame(bigInteger6, bigInteger5);
      assertTrue(bigInteger0.equals((Object)bigInteger5));
      assertTrue(bigInteger6.equals((Object)bigInteger5));
      assertTrue(bigInteger6.equals((Object)bigInteger3));
      assertTrue(bigInteger6.equals((Object)bigInteger0));
      assertTrue(bigInteger6.equals((Object)bigInteger4));
      assertTrue(bigInteger6.equals((Object)bigInteger1));
      assertTrue(bigInteger6.equals((Object)bigInteger2));
      
      int int1 = bigInteger2.intValue();
      assertEquals((byte)0, bigInteger2.byteValue());
      assertEquals((short)0, bigInteger2.shortValue());
      assertEquals(0, int1);
      assertNotSame(bigInteger2, bigInteger5);
      assertSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger6);
      assertSame(bigInteger2, bigInteger4);
      assertSame(bigInteger2, bigInteger0);
      assertSame(bigInteger2, bigInteger3);
      assertTrue(bigInteger2.equals((Object)bigInteger5));
      assertTrue(bigInteger2.equals((Object)bigInteger6));
      assertTrue(int1 == int0);
      
      Base64 base64_0 = new Base64((-2384));
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        bigInteger6.divide(bigInteger4);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger divide by zero
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(52);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 52, 52);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 52
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte byte0 = (byte)1;
      boolean boolean0 = Base64.isBase64((byte)1);
      assertFalse(boolean0);
      
      int int0 = 951;
      Base64 base64_0 = new Base64(951);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 3806, (int) (byte)1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3806
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)126);
      assertFalse(boolean0);
      
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte)126;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertArrayEquals(new byte[] {(byte)126, (byte)126, (byte)126, (byte)126, (byte)126}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean1 = Base64.isBase64((byte) (-1));
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 54, 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 54
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray0 = base64_0.encode((byte[]) null);
      assertFalse(base64_0.isUrlSafe());
      assertNull(byteArray0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      Base64 base64_0 = new Base64((-1), byteArray0, false);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(0, byteArray0.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      int int0 = base64_0.avail();
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, byteArray0.length);
      assertEquals(0, int0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      boolean boolean0 = false;
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-27);
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte) (-4));
      assertFalse(boolean0);
      
      byte[] byteArray0 = Base64.decodeBase64("5!");
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      Base64 base64_0 = new Base64((byte) (-4), byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(0, byteArray0.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      boolean boolean1 = base64_0.hasData();
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, byteArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray1 = Base64.decodeBase64("5!");
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray2);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(byteArray2);
      assertEquals(4, byteArray2.length);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray2);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray2);
      assertArrayEquals(new byte[] {(byte)81, (byte)50, (byte)99, (byte)57, (byte)80, (byte)81}, byteArray3);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(byteArray3);
      assertEquals(4, byteArray2.length);
      assertEquals(6, byteArray3.length);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      
      boolean boolean2 = Base64.isBase64((byte)77);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)39, (byte)0}, byteArray1);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = Base64.decodeBase64((String) null);
      assertNull(byteArray1);
      
      Base64 base64_0 = new Base64(37);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)39, (byte)0}, byteArray1);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals(3, byteArray0.length);
      //  // Unstable assertion: assertEquals("AAAA", string0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      
      boolean boolean0 = Base64.isBase64("AAAA");
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(true);
      assertTrue(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = BigInteger.TEN;
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals((byte)10, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      BigInteger bigInteger2 = bigInteger0.xor(bigInteger1);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((short)10, bigInteger2.shortValue());
      assertEquals((byte)10, bigInteger2.byteValue());
      assertNotNull(bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertTrue(bigInteger2.equals((Object)bigInteger1));
      
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte byte0 = (byte)110;
      byteArray1[0] = (byte)110;
      int int0 = (-3015);
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(byteArray0, byteArray1);
      assertSame(byteArray0, byteArray2);
      assertSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      BigInteger bigInteger3 = bigInteger0.shiftLeft((byte)110);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger3.shortValue());
      assertEquals((byte)0, bigInteger3.byteValue());
      assertNotNull(bigInteger3);
      assertSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger3, bigInteger2);
      assertSame(bigInteger3, bigInteger0);
      assertNotSame(bigInteger3, bigInteger1);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      
      // Undeclared exception!
      try { 
        bigInteger0.min((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, true, (-340));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of -340
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, true, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = Base64.encodeBase64Chunked((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)0);
      assertFalse(boolean0);
      
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)38;
      byte[] byteArray1 = Base64.encodeBase64URLSafe((byte[]) null);
      assertNull(byteArray1);
      
      byteArray0[1] = (byte)0;
      base64_0.decode(byteArray0, (int) (byte)0, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)38, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(9, byteArray0.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false, true);
      assertArrayEquals(new byte[] {(byte)38, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray2);
      assertEquals(9, byteArray0.length);
      assertEquals(12, byteArray2.length);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertArrayEquals(new byte[] {(byte)38, (byte)0, (byte)0, (byte)0, (byte)71, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals(9, byteArray0.length);
      assertEquals("JgAAAEcAAAAA", string0);
      assertNotSame(byteArray0, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray2));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("5!");
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean0);
      
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61, (byte)61}, byteArray1);
      
      byte[] byteArray2 = base64_0.encode(byteArray0);
      assertEquals(8, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(18, byteArray0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray0);
      assertSame(byteArray2, byteArray1);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isArrayByteBase64(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(1);
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)100;
      Base64.encodeBase64(byteArray0);
      byteArray2[1] = (byte)29;
      byte[] byteArray3 = base64_0.decode("org.apache.commons.codec.EncoderException");
      byte[] byteArray4 = base64_0.decode("");
      assertEquals(0, byteArray4.length);
      
      byteArray2[2] = (byte)0;
      Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray5 = Base64.decodeBase64("fp3^y7Ovd? ]L4]C");
      String string0 = base64_0.encodeToString(byteArray2);
      assertEquals("ZB0A", string0);
      
      boolean boolean0 = base64_0.hasData();
      boolean boolean1 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray6 = new byte[7];
      byteArray6[0] = (byte)29;
      byteArray6[1] = (byte)0;
      byteArray6[2] = (byte)100;
      byteArray6[3] = (byte)100;
      byteArray6[4] = (byte)0;
      byteArray6[5] = (byte)125;
      byteArray6[6] = (byte)29;
      base64_0.decode(byteArray6);
      base64_0.decode(byteArray5, (int) (byte)100, 0);
      base64_0.encodeToString(byteArray0);
      byte[] byteArray7 = Base64.encodeBase64URLSafe(byteArray5);
      assertEquals(11, byteArray7.length);
      assertArrayEquals(new byte[] {(byte)126, (byte) (-99), (byte) (-14), (byte) (-20), (byte) (-21), (byte) (-35), (byte)47, (byte) (-128)}, byteArray5);
      
      Base64.encodeBase64(byteArray3, false, true);
      String string1 = Base64.encodeBase64URLSafeString(byteArray2);
      assertEquals("ZB0A", string1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64.isBase64("");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)12;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(14, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64("fp3^y7Ovd? ]L4]C");
      Base64 base64_0 = new Base64();
      String string0 = base64_0.encodeToString(byteArray1);
      //  // Unstable assertion: assertEquals("QUNvQUFBQT0nAA==", string0);
      
      base64_0.hasData();
      Base64.isArrayByteBase64(byteArray1);
      base64_0.decode(byteArray2);
      base64_0.decode(byteArray1, (int) (byte)0, (int) (byte)0);
      base64_0.encodeToString(byteArray2);
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray2);
      Base64.encodeBase64(byteArray1, false, true);
      String string1 = Base64.encodeBase64URLSafeString(byteArray3);
      //  // Unstable assertion: assertEquals("ZnAzeTdPdmRMNEE", string1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0, (-781), (-781));
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64(18);
      String string0 = base64_0.encodeToString(byteArray0);
      //  // Unstable assertion: assertEquals("AA=='\u0000", string0);
      
      byte[] byteArray1 = base64_0.encode(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61, (byte)39, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals(37, byteArray0.length);
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Base64 base64_0 = new Base64((-1042), byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      int int0 = base64_0.readResults(byteArray1, (-1042), (-1042));
      assertEquals(12, byteArray1.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      boolean boolean0 = Base64.isBase64(byteArray0);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
      
      Base64 base64_0 = new Base64((-1760), byteArray0);
      int int0 = base64_0.readResults(byteArray0, (-1760), (-1760));
      assertEquals(0, int0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-1);
      base64_0.decode(byteArray1, (int) (byte) (-1), (int) (byte)0);
      byteArray0[0] = (byte)0;
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      assertEquals(0, byteArray2.length);
      
      byteArray0[1] = (byte)1;
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      byteArray0[2] = (byte)60;
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("AAE8", string0);
      
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.not();
      Base64.toIntegerBytes(bigInteger1);
      boolean boolean0 = Base64.isBase64("z6yd=AC5");
      assertTrue(boolean0);
      
      base64_0.encode(byteArray3, (-1), 0);
      assertEquals(1, byteArray3.length);
      assertArrayEquals(new byte[] {(byte)10}, byteArray3);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Base64.isBase64((byte) (-4));
      Base64 base64_0 = new Base64(false);
      base64_0.hasData();
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)39, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Base64 base64_0 = new Base64();
      int int0 = base64_0.avail();
      assertEquals(0, int0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.discardWhitespace(byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      //  // Unstable assertion: assertEquals((short)9984, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Base64 base64_0 = new Base64(1331);
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      base64_0.encode(byteArray0, (int) (byte) (-1), (int) (byte) (-1));
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      byteArray0[0] = (byte)5;
      base64_0.readResults(byteArray0, (-2851), (byte)5);
      byte[] byteArray3 = new byte[0];
      base64_0.encode(byteArray3, 2290, (-932));
      byte[] byteArray4 = new byte[2];
      byteArray4[0] = (byte)5;
      byteArray4[1] = (byte)5;
      Base64.encodeBase64URLSafeString(byteArray4);
      Base64.decodeInteger(byteArray3);
      Base64.isBase64(byteArray3);
      base64_0.encodeToString(byteArray0);
      base64_0.encode(byteArray3);
      byte[] byteArray5 = Base64.discardWhitespace(byteArray2);
      base64_0.avail();
      base64_0.hasData();
      Base64.encodeBase64Chunked(byteArray5);
      Base64.decodeInteger(byteArray1);
      try { 
        base64_0.encode((Object) "BQ\r\n");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64(518, (byte[]) null);
      byte[] byteArray0 = base64_1.encode((byte[]) null);
      assertNull(byteArray0);
      assertFalse(base64_1.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-126);
      byteArray0[7] = (byte) (-11);
      byteArray0[8] = (byte) (-1);
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
      
      Base64 base64_0 = new Base64((byte)0, (byte[]) null);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)113;
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("Af9KcQ", string0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      assertArrayEquals(new byte[] {(byte)65, (byte)102, (byte)57, (byte)75, (byte)99, (byte)81, (byte)61, (byte)61}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Base64 base64_0 = new Base64();
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(true);
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte) (-60);
      byteArray0[5] = (byte)115;
      byteArray0[6] = (byte)85;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(1, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000\u0000\u00013\uFFFDsU]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("%J`_8d6bRu{Qxu?_");
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)39, (byte) (-1), (byte)29, (byte) (-23), (byte) (-76), (byte)110, (byte)67, (byte)27, (byte) (-65)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = base64_0.decode("");
      String string0 = Base64.encodeBase64URLSafeString(byteArray2);
      assertEquals("", string0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)7;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs((long) (byte)7);
      BigInteger.probablePrime(961, mockRandom0);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        bigInteger0.clearBit((-1));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Negative bit address
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64.isBase64((byte)127);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_1 = null;
      try {
        base64_1 = new Base64(64, byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [Cg==]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte)116;
      byteArray0[6] = (byte)0;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-2229), byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [{Iw\u0000St\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)76);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [AQ==]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte) (-78);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(56, byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0004\uFFFDE\uFFFD\uFFFD\u0000\u0005\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("AQABAA", string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)102;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)90, (byte)103, (byte)61, (byte)61, (byte) (-119), (byte)0}, byteArray1);
      //  // Unstable assertion: assertEquals(6, byteArray1.length);
      
      Base64.decodeBase64((byte[]) null);
      byte[] byteArray2 = new byte[0];
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray2);
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      
      byte[] byteArray3 = Base64.decodeBase64("6");
      //  // Unstable assertion: assertEquals(0, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.decode((Object) "*idPv=?t0f#");
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("r_GvI*u0");
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-81), (byte) (-15), (byte) (-81), (byte)34, (byte) (-19)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Base64 base64_0 = new Base64(1331);
      Object object0 = base64_0.decode((Object) "");
      Object object1 = base64_0.decode(object0);
      Object object2 = base64_0.encode(object1);
      assertSame(object2, object0);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      assertNotSame(byteArray0, object2);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(9, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)54;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-98), (byte)1, (byte)0, (byte)71, (byte)54}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(5, byteArray1.length);
      
      Base64.isBase64((byte)0);
      Base64 base64_0 = new Base64((-1198));
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte) (-12);
      Base64 base64_0 = new Base64((-3626), byteArray0, true);
      Object object0 = base64_0.decode((Object) "");
      Object object1 = base64_0.decode(object0);
      Object object2 = base64_0.decode(object1);
      assertSame(object2, object1);
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(54, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      byte[] byteArray1 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64 base64_0 = new Base64(37);
      base64_0.encode(byteArray0);
      int int0 = base64_0.readResults(byteArray0, 800, (-737));
      assertEquals((-1), int0);
      
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      String string0 = Base64.encodeBase64URLSafeString(byteArray2);
      assertEquals("UGFyYW1ldGVyc3VwcGxpZWR0b0Jhc2U2NGRlY29kZWlzbm90DQphYnl0ZW9yYVN0cmluZz09DQo", string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("DQo", string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      byte[] byteArray1 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64 base64_0 = new Base64(65);
      byte[] byteArray2 = base64_0.encode(byteArray0);
      String string0 = Base64.encodeBase64URLSafeString(byteArray1);
      assertEquals("ParametersuppliedtoBase64decodeisnotabyteoraString", string0);
      
      Base64.isBase64((byte) (-89));
      String string1 = base64_0.encodeToString(byteArray2);
      assertEquals("UGFyYW1ldGVyc3VwcGxpZWR0b0Jhc2U2NGRlY29kZWlzbm90YWJ5dGVvcmFTdHJp\r\nbmc9PQ0K\r\n", string1);
      
      byte[] byteArray3 = Base64.discardWhitespace(byteArray1);
      byte[] byteArray4 = Base64.encodeBase64(byteArray3, false, false, 64);
      assertEquals(52, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("AAAAAA", string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte) (-76);
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("NQBPYUz_AbQ", string0);
  }
}
