/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:08:33 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[14];
      byteArray0[5] = (byte) (-4);
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte) (-4);
      byteArray0[6] = (byte)125;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)0, (int) (byte)125);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      MockRandom mockRandom0 = new MockRandom(2193L);
      BigInteger bigInteger0 = BigInteger.probablePrime(3661, mockRandom0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64.decodeInteger(byteArray0);
      bigInteger0.flipBit(3661);
      mockRandom0.doubles((-468.13), (double) 3661);
      Base64 base64_0 = new Base64(3661, byteArray0, true);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      Base64 base64_1 = new Base64(true);
      base64_0.decode(byteArray2);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray1, 76, 1060);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 612
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(413, byteArray0);
      Object object0 = base64_0.decode((Object) "W?LA{_M");
      // Undeclared exception!
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base64 base64_0 = new Base64((-142));
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 46, 2044);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 46
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints((long) 64);
      MockRandom mockRandom1 = new MockRandom((-157L));
      BigInteger bigInteger0 = BigInteger.probablePrime(2034, mockRandom1);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64String(byteArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base64 base64_0 = new Base64((-128));
      base64_0.decode(byteArray0, (-128), (-128));
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints(1545L);
      BigInteger bigInteger0 = BigInteger.probablePrime(2033, mockRandom0);
      Base64.encodeInteger(bigInteger0);
      Random.setNextRandom(76);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)62);
      assertFalse(boolean0);
      
      boolean boolean1 = Base64.isBase64((byte)61);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)34;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      boolean boolean0 = Base64.isBase64("5");
      assertTrue(boolean0);
      
      Base64 base64_0 = new Base64(true);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray2);
      assertEquals((byte)34, bigInteger0.byteValue());
      
      base64_0.decode(byteArray2, 0, (int) (byte)34);
      Base64.isBase64((byte)34);
      base64_0.readResults(byteArray2, 0, 0);
      assertEquals(6, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)34}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = Base64.decodeBase64("qeNfJF^&b");
      Base64.isBase64((byte)123);
      boolean boolean0 = Base64.isBase64("qeNfJF^&b");
      assertFalse(boolean0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true);
      assertArrayEquals(new byte[] {(byte)113, (byte)101, (byte)78, (byte)102, (byte)74, (byte)70, (byte)89}, byteArray1);
      assertEquals(7, byteArray1.length);
      
      Base64 base64_1 = new Base64(true);
      byte[] byteArray2 = new byte[2];
      byteArray2[1] = (byte)123;
      Base64 base64_2 = new Base64(114, byteArray2);
      boolean boolean1 = Base64.isBase64((byte)0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)1;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false, (int) (byte)6);
      assertEquals(6, byteArray1.length);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      assertEquals(4, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      Base64 base64_1 = new Base64();
      base64_1.decode((byte[]) null);
      base64_0.encode((byte[]) null, 64, (-301));
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.encodeBase64String(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, 267, 57);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64.isBase64("fzQM4;PF/v,Lrm-OeD");
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.isBase64("fzQM4;PF/v,Lrm-OeD");
      Base64.isBase64((byte)97);
      String string0 = base64_0.encodeToString((byte[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)32;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(1717986918);
      Base64.isBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false, false);
      Base64.encodeBase64(byteArray2, true);
      Base64.isBase64("8");
      Base64.isBase64("5");
      Base64.encodeBase64(byteArray1, false, false);
      Base64 base64_1 = new Base64(false);
      Base64.encodeBase64(byteArray2, true);
      // Undeclared exception!
      try { 
        base64_1.decode(byteArray2, 98, (int) (byte)3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 98
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      Base64.decodeBase64(byteArray0);
      byteArray0[1] = (byte)9;
      Base64.isBase64((byte)72);
      base64_0.decode((Object) "");
      Base64.encodeBase64URLSafe((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "";
      Base64.isBase64("");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)108;
      byteArray0[6] = (byte)78;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-1875), byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD{Ow
         // lN]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte)122;
      base64_0.readResults(byteArray0, (byte) (-48), (-1));
      Base64 base64_1 = new Base64();
      byte[] byteArray1 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64.encodeBase64String(byteArray1);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 1, 404);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 37
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)121;
      Base64.isBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      byte[] byteArray1 = new byte[0];
      Base64.isArrayByteBase64(byteArray1);
      Base64.isBase64((byte) (-17));
      base64_0.decode((Object) "Parameter supplied to Base64 decode is not a byte[] or a String");
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte) (-91);
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte) (-82);
      byteArray0[7] = (byte) (-50);
      Base64.encodeBase64(byteArray0, true, true, 64);
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.decodeInteger(byteArray1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-63);
      byteArray0[7] = (byte)0;
      int int0 = 1;
      base64_0.decode(byteArray0, (int) (byte)0, 1);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, 2123);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64.isBase64("org.apache.commons.codec.binary.Base64");
      base64_0.decode(")I_S]");
      base64_0.decode((byte[]) null, 0, 2121918366);
      base64_0.decode((byte[]) null, 0, 0);
      Base64.decodeBase64((byte[]) null);
      Base64.decodeBase64((byte[]) null);
      Base64.encodeBase64((byte[]) null, false, true, 32);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)9;
      base64_0.encode(byteArray0, 0, 0);
      byte[] byteArray1 = new byte[7];
      byteArray1[1] = (byte)121;
      byteArray1[2] = (byte)120;
      byteArray1[3] = (byte) (-8);
      byteArray1[4] = (byte)7;
      byteArray1[5] = (byte)0;
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)34;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64((byte)34);
      base64_0.encode(byteArray1, (int) (byte)34, (-349));
      Base64.decodeBase64("0?N_ %FW-c%aq=}a");
      byte[] byteArray2 = new byte[8];
      Base64.isBase64(byteArray2);
      Base64.isBase64("5");
      Base64.encodeBase64(byteArray2, false, false);
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, true);
      Base64.isArrayByteBase64(byteArray1);
      Base64.isBase64("5");
      Base64.discardWhitespace(byteArray3);
      byte[] byteArray4 = Base64.CHUNK_SEPARATOR;
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)121;
      byteArray0[1] = (byte)121;
      byte byte1 = (byte)120;
      byte byte2 = (byte)1;
      byte byte3 = (byte)0;
      byte byte4 = (byte)0;
      Base64 base64_1 = new Base64();
      // Undeclared exception!
      try { 
        base64_1.decode((byte[]) null, 64, 64);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)113;
      Base64 base64_0 = new Base64(false);
      Base64 base64_1 = new Base64();
      base64_0.encode(byteArray0, 1, (-1462));
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Base64.encodeBase64String(byteArray1);
      Base64.encodeBase64((byte[]) null, false);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      Base64.encodeBase64String((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)35;
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(329);
      byte[] byteArray1 = new byte[8];
      byteArray1[1] = (byte)35;
      byteArray1[2] = (byte)35;
      base64_0.encodeToString(byteArray0);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64String(byteArray2);
      Base64.encodeBase64String(byteArray1);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger0);
      Base64.decodeBase64("ACMjAAAAAAA=");
      Object object0 = base64_0.decode((Object) "Iw==");
      base64_0.encode(object0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)9;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)9;
      byteArray1[1] = (byte)9;
      byteArray1[2] = (byte)9;
      byteArray1[3] = (byte)9;
      byteArray1[4] = (byte)9;
      byteArray1[5] = (byte)9;
      Base64 base64_0 = new Base64((byte)9, byteArray1);
      base64_0.encodeToString(byteArray1);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray1);
      Base64.encodeBase64(byteArray0, false);
      Base64.encodeBase64(byteArray0);
      Base64.encodeBase64Chunked(byteArray3);
      byte[] byteArray4 = Base64.decodeBase64(byteArray2);
      base64_0.decode(byteArray0);
      Base64.encodeBase64(byteArray4, false);
      Base64.encodeBase64Chunked(byteArray4);
      Base64.isArrayByteBase64(byteArray3);
      Base64.isBase64((byte)9);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)113;
      Base64 base64_0 = new Base64(true);
      Base64 base64_1 = new Base64();
      base64_0.encode(byteArray0, 1, (-1462));
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Base64.encodeBase64String(byteArray1);
      Base64.encodeBase64((byte[]) null, true);
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)9;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64(byteArray1);
      Base64.encodeBase64String(byteArray0);
      Base64.decodeBase64("hw<`${b;-q7");
      Base64.decodeBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Base64 base64_0 = new Base64((-1));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)88;
      Base64.decodeInteger(byteArray0);
      base64_0.decode((Object) "pxG");
      Base64.isBase64("xT<4h,OIf#MAa^A'}J");
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-8);
      byteArray1[1] = (byte)121;
      byteArray1[2] = (byte) (-8);
      Base64.isArrayByteBase64(byteArray1);
      Base64.isBase64((byte)121);
      base64_0.encodeToString(byteArray1);
      byte[] byteArray2 = null;
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)34;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64((byte)34, byteArray0, true);
      base64_0.decode((String) null);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      Base64 base64_1 = new Base64(76, byteArray1, true);
      base64_1.avail();
      base64_0.avail();
      Base64.encodeBase64String(byteArray2);
      Base64.decodeBase64("SWci");
      Base64.encodeBase64URLSafeString((byte[]) null);
      base64_1.decode((Object) "SWci");
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte) (-54);
      byteArray0[3] = (byte) (-50);
      Base64.isBase64(byteArray0);
      Base64.isBase64("5");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      boolean boolean0 = Base64.isArrayByteBase64(byteArray1);
      assertTrue(boolean0);
      
      Base64.isBase64("5");
      Base64.encodeBase64(byteArray0, true, true);
      Base64.encodeBase64(byteArray2, true, true);
      Base64 base64_0 = new Base64(true);
      base64_0.decode(byteArray2, (int) (byte)0, 120);
      assertArrayEquals(new byte[] {(byte)122, (byte)97, (byte)122, (byte)75, (byte)122, (byte)103, (byte)61, (byte)61}, byteArray1);
      
      boolean boolean1 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean1);
      
      base64_0.encode(byteArray0, (int) (byte) (-59), 1860);
      boolean boolean2 = base64_0.isUrlSafe();
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      String string0 = "dy3/";
      Base64 base64_0 = new Base64(123, byteArray0);
      base64_0.decode("");
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, 71);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)34;
      byteArray0[0] = (byte)34;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64((byte)34);
      byte[] byteArray2 = new byte[8];
      byteArray2[4] = (byte)34;
      byteArray2[2] = (byte)34;
      byteArray2[3] = (byte)34;
      byteArray2[4] = (byte)34;
      byteArray2[5] = (byte)34;
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, true, true, 453);
      byteArray2[6] = (byte)34;
      byte[] byteArray4 = Base64.encodeBase64(byteArray3, true, false);
      Base64 base64_1 = new Base64();
      Base64.isBase64("}y?S6xNdqBT");
      int int0 = 2004;
      Base64 base64_2 = null;
      try {
        base64_2 = new Base64(2004, byteArray4, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [SWcDAA==\u0003\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)1;
      Base64 base64_0 = new Base64((-792));
      base64_0.encodeToString(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)1;
      byteArray2[1] = (byte)1;
      Base64.encodeBase64(byteArray0, false, false);
      byteArray2[2] = (byte)1;
      byteArray2[3] = (byte)1;
      byteArray2[4] = (byte)1;
      Base64.encodeBase64String(byteArray2);
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, false);
      byte[] byteArray4 = Base64.encodeBase64(byteArray2);
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray5 = Base64.decodeBase64(byteArray4);
      base64_0.decode(byteArray5);
      Base64.encodeBase64(byteArray3, true);
      Base64.encodeBase64Chunked((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.decodeBase64(byteArray0);
      Base64.encodeBase64Chunked(byteArray1);
      base64_0.encode(byteArray1);
      base64_0.decode(byteArray1, (-3890), (-3890));
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = base64_0.encode(byteArray0);
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("", string0);
      
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64(byteArray0, false, false, 64);
      Base64.encodeBase64Chunked(byteArray1);
      base64_0.encode(byteArray1);
      base64_0.decode(byteArray1, (-3890), (-3890));
      byte[] byteArray3 = new byte[4];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte) (-68);
      int int0 = base64_0.readResults(byteArray1, 76, 76);
      assertEquals((-1), int0);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray2);
      assertSame(byteArray4, byteArray1);
      
      Base64.isArrayByteBase64(byteArray3);
      Base64.isBase64((byte) (-91));
      boolean boolean0 = Base64.isBase64(byteArray3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)34;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(329);
      byte[] byteArray2 = new byte[8];
      byteArray2[1] = (byte)34;
      byteArray2[2] = (byte)34;
      base64_0.encodeToString(byteArray0);
      byte[] byteArray3 = Base64.discardWhitespace(byteArray0);
      String string0 = Base64.encodeBase64String(byteArray3);
      assertEquals("Ig==", string0);
      
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray2);
      Base64.encodeBase64(byteArray4, true);
      Base64.encodeBase64(byteArray1);
      byte[] byteArray5 = Base64.encodeBase64Chunked(byteArray4);
      Base64.decodeBase64(byteArray0);
      base64_0.decode(byteArray0);
      Base64.encodeBase64(byteArray5, false);
      assertEquals(22, byteArray5.length);
      
      byte[] byteArray6 = Base64.encodeBase64Chunked((byte[]) null);
      assertNull(byteArray6);
      
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      Base64.isBase64((byte)66);
      byte[] byteArray7 = new byte[1];
      byteArray7[0] = (byte)66;
      boolean boolean1 = Base64.isBase64(byteArray7);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)9;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64((byte)9);
      byte[] byteArray2 = new byte[14];
      byteArray2[1] = (byte)9;
      byteArray2[2] = (byte)9;
      byteArray2[3] = (byte)9;
      byte[] byteArray3 = Base64.encodeBase64(byteArray0);
      assertArrayEquals(new byte[] {(byte)67, (byte)81, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61}, byteArray3);
      
      byteArray2[4] = (byte)9;
      int int0 = base64_0.readResults(byteArray1, (byte)9, (byte)9);
      assertEquals(0, int0);
      
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray2);
      assertEquals(22, byteArray4.length);
      
      Base64.isArrayByteBase64(byteArray0);
      Base64.isBase64((byte)9);
      boolean boolean0 = Base64.isBase64(byteArray1);
      assertEquals(4, byteArray1.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64 base64_0 = new Base64();
      Base64.isBase64("xT<4h,OIf#MAa^A'}J");
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false, false);
      Base64 base64_1 = new Base64(64, byteArray1, true);
      // Undeclared exception!
      try { 
        base64_1.decode(byteArray3, 64, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 64
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      Base64 base64_0 = new Base64(true);
      base64_0.decode("");
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.avail();
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)86;
      byteArray2[1] = (byte)1;
      byteArray2[2] = (byte)1;
      byteArray2[3] = (byte)1;
      byteArray2[4] = (byte)1;
      byteArray2[5] = (byte)1;
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      //  // Unstable assertion: assertEquals(10, byteArray3.length);
      
      int int0 = base64_0.avail();
      //  // Unstable assertion: assertEquals(0, int0);
      
      String string0 = Base64.encodeBase64String(byteArray1);
      //  // Unstable assertion: assertEquals("QVFBQUFBAAA=", string0);
      
      byte[] byteArray4 = Base64.decodeBase64("|@S>7oiE");
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)75, (byte) (-70), (byte)34}, byteArray4);
      //  // Unstable assertion: assertEquals(3, byteArray4.length);
      
      byte[] byteArray5 = new byte[7];
      byteArray5[0] = (byte)1;
      byteArray5[1] = (byte)86;
      byteArray5[2] = (byte)86;
      byteArray5[3] = (byte)86;
      byteArray5[4] = (byte)1;
      byteArray5[5] = (byte)1;
      byteArray5[6] = (byte)86;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray5);
      //  // Unstable assertion: assertEquals((short)21845, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Base64 base64_0 = new Base64((-1));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)121;
      byte byte0 = (byte)120;
      byteArray0[2] = (byte)120;
      byte byte1 = (byte) (-8);
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte)0;
      Base64.isBase64("xT<4h,OIf#MAa^A'}J");
      byteArray0[5] = (byte)0;
      Base64.encodeBase64(byteArray0, false, false);
      Base64.encodeBase64(byteArray0, false, false);
      byteArray0[6] = (byte) (-59);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)0, (int) (byte)120);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = "";
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-25);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)9;
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(329);
      byte[] byteArray1 = new byte[14];
      byteArray1[1] = (byte)9;
      byteArray1[2] = (byte)9;
      byteArray1[3] = (byte)9;
      Base64.encodeBase64(byteArray0);
      byteArray1[4] = (byte)9;
      byteArray1[5] = (byte)9;
      byteArray1[6] = (byte)9;
      byteArray1[7] = (byte)9;
      base64_0.readResults(byteArray1, 0, (byte)9);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isArrayByteBase64(byteArray2);
      Base64.isBase64((byte)9);
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)1;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64(byteArray0, true, true, 64);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_1 = new Base64(false);
      base64_1.encode(byteArray1, (-1087), 0);
      Base64.isBase64(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      Base64 base64_2 = new Base64();
      Base64.encodeBase64URLSafe(byteArray2);
      Base64.isBase64("$9IAE(vR");
      base64_0.encodeToString(byteArray2);
      base64_1.encodeToString(byteArray2);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray1);
      base64_0.encode(byteArray1);
      base64_0.decode(byteArray1, (-3890), (-3890));
      byte[] byteArray4 = new byte[4];
      byteArray4[0] = (byte)0;
      byteArray4[1] = (byte) (-68);
      byteArray4[2] = (byte)0;
      byteArray4[3] = (byte)0;
      base64_0.encodeToString(byteArray4);
      byte[] byteArray5 = Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64String(byteArray5);
      byte[] byteArray6 = Base64.encodeBase64Chunked(byteArray1);
      Base64.encodeBase64(byteArray2, true);
      Base64.encodeBase64(byteArray0);
      Base64.encodeBase64Chunked(byteArray5);
      Base64.decodeBase64(byteArray3);
      byte[] byteArray7 = base64_0.decode(byteArray5);
      base64_0.encode(byteArray3);
      Base64.encodeBase64URLSafeString(byteArray7);
      Base64.decodeInteger(byteArray4);
      base64_0.decode("");
      base64_0.encodeToString(byteArray6);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-65);
      byteArray0[5] = (byte) (-1);
      Base64.isBase64(byteArray0);
      Base64.encodeBase64(byteArray0, false, false);
      Base64 base64_0 = new Base64();
      base64_0.decode((String) null);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = bigInteger0.toByteArray();
      Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64();
      Base64.isBase64("xT<4h,OIf#MAa^A'}J");
      byte byte0 = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true);
      Base64 base64_1 = new Base64((byte)0);
      // Undeclared exception!
      try { 
        base64_1.decode(byteArray1, 76, 24);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 76
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      boolean boolean0 = false;
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64(false);
      base64_0.readResults(byteArray0, 37, (-2131));
      Base64 base64_1 = new Base64((byte)60);
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray1, (-419), 490);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -419
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Base64 base64_0 = new Base64((-1));
      byte[] byteArray0 = new byte[7];
      base64_0.decode((Object) "pxG");
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)120;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      base64_0.decode("HOnf7O\"zmHeMbfA+;b");
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.decodeBase64((String) null);
      base64_0.readResults(byteArray1, (-1118), 8180);
      base64_0.encode(byteArray0, (int) (byte)0, (-1));
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)39;
      byteArray2[1] = (byte) (-10);
      Base64.encodeBase64(byteArray2, false);
      Base64.encodeBase64((byte[]) null, true, true);
      base64_0.decode((Object) "v_Y");
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      Base64 base64_0 = new Base64((-884), byteArray0, false);
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("AAEAAAEBAAA", string0);
      
      base64_0.readResults(byteArray0, 1376, 2973);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, false, 2973);
      assertEquals(18, byteArray2.length);
      
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray3);
      assertEquals(4, byteArray3.length);
      
      int int0 = base64_0.readResults(byteArray1, (byte)1, 0);
      assertEquals(0, int0);
      
      base64_0.decode(byteArray1, (int) (byte)1, 74);
      boolean boolean0 = base64_0.hasData();
      assertTrue(boolean0);
      
      base64_0.decode(byteArray2, (int) (byte)0, 5614);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)1;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 347);
      Base64.isBase64("org.apache.commons.codec.DecoderException");
      Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_0 = new Base64();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte)0;
      Base64.decodeInteger(byteArray0);
      Object object0 = base64_0.decode((Object) "");
      Object object1 = base64_0.decode(object0);
      base64_0.decode(object1);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)1;
      boolean boolean1 = false;
      Base64.encodeBase64(byteArray1, false);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-10);
      byteArray1[3] = (byte)59;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)39;
      byteArray1[7] = (byte)60;
      byteArray1[8] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.decodeBase64("v_Y");
      base64_0.readResults(byteArray1, 86, (byte) (-10));
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, (int) (byte)1, (int) (byte)59);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = (-1);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64 base64_0 = new Base64((-1), byteArray0, true);
      Base64.encodeBase64(byteArray0);
      base64_0.decode("|}~cSl\"EWl9Wv7jA}(c");
      byte[] byteArray1 = new byte[0];
      Base64.decodeBase64(byteArray1);
      base64_0.decode((Object) "|}~cSl\"EWl9Wv7jA}(c");
      Base64.decodeInteger(byteArray0);
      base64_0.decode(byteArray1);
      String string0 = "";
      Base64.decodeBase64(byteArray1);
      int int1 = 44;
      BigInteger.valueOf((byte)0);
      try { 
        base64_0.encode((Object) "Input array too big, the output array would be bigger (");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Base64 base64_0 = new Base64((-1));
      byte[] byteArray0 = new byte[7];
      base64_0.decode((Object) "pxG");
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte)0;
      Base64.isBase64("xT<4h,OIf#MAa^A'}J");
      byteArray0[5] = (byte)0;
      Base64.encodeBase64(byteArray0, false, false);
      byteArray0[6] = (byte) (-59);
      base64_0.decode(byteArray0, (int) (byte)0, (int) (byte)120);
      Base64.isArrayByteBase64(byteArray0);
      base64_0.encode(byteArray0, (int) (byte) (-8), (int) (byte)120);
      base64_0.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)5;
      Base64.encodeBase64String(byteArray0);
      Base64.isBase64("KwU=");
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)5;
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.shortValueExact();
      Base64.encodeInteger(bigInteger0);
      byteArray1[1] = (byte)5;
      Base64.encodeBase64URLSafe(byteArray0);
      base64_0.encode(byteArray1, 416, (-2527));
      byte[] byteArray2 = base64_0.decode(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray3 = new byte[1];
      byteArray3[0] = (byte)5;
      Base64.encodeBase64String(byteArray3);
      byte[] byteArray4 = new byte[6];
      byteArray4[0] = (byte)43;
      byteArray4[1] = (byte) (-23);
      byteArray4[2] = (byte)5;
      byteArray4[3] = (byte)43;
      byteArray4[4] = (byte)43;
      byteArray4[5] = (byte)5;
      base64_0.encode(byteArray4);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.decodeInteger(byteArray2);
      base64_0.decode("LDg^`f\"[]z'gxY_n}Jj");
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = 0;
      Base64.encodeBase64((byte[]) null, false, false, 0);
      Base64 base64_0 = new Base64(1, (byte[]) null);
      boolean boolean0 = true;
      Base64.encodeBase64((byte[]) null, true);
      byte[] byteArray0 = Base64.decodeBase64("5mM");
      base64_0.encode(byteArray0);
      byte[] byteArray1 = base64_0.decode("5mM");
      base64_0.encode((byte[]) null);
      Base64.isBase64("<R1[z=B#n9dLP!&Y");
      base64_0.decode((byte[]) null);
      base64_0.avail();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.intValueExact();
      bigInteger0.shortValueExact();
      BigInteger bigInteger1 = new BigInteger(byteArray1);
      bigInteger0.xor(bigInteger1);
      bigInteger0.flipBit(0);
      Base64.toIntegerBytes(bigInteger0);
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Base64 base64_0 = new Base64((-1371));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)110;
      base64_0.decode(byteArray0, 0, 0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-57);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)1;
      byteArray1[3] = (byte)0;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      Base64.isArrayByteBase64(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      assertArrayEquals(new byte[] {(byte)120, (byte)119, (byte)65, (byte)66, (byte)65, (byte)65}, byteArray2);
      
      Base64.isArrayByteBase64(byteArray1);
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      assertEquals(0, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-65);
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)81;
      byte[] byteArray1 = base64_0.decode("");
      assertEquals(0, byteArray1.length);
      
      byteArray0[7] = (byte)125;
      byte[] byteArray2 = base64_0.encode(byteArray0);
      base64_0.avail();
      int int0 = base64_0.avail();
      assertEquals(0, int0);
      
      String string0 = Base64.encodeBase64String(byteArray2);
      assertEquals("Tms4d3Y4TUFVWDA9", string0);
      
      byte[] byteArray3 = Base64.decodeBase64("|@S>7oiE");
      assertEquals(3, byteArray3.length);
      assertArrayEquals(new byte[] {(byte)75, (byte) (-70), (byte)34}, byteArray3);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = false;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64 base64_0 = new Base64();
      int int0 = 0;
      Base64.encodeBase64URLSafe(byteArray0);
      base64_0.readResults(byteArray1, 0, 1163);
      Base64.decodeBase64(byteArray0);
      base64_0.decode("N:Ak'");
      try { 
        base64_0.encode((Object) "org.apache.commons.codec.EncoderException");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-89);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((short)134, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte) (-54);
      byteArray0[3] = (byte) (-50);
      Base64.isBase64(byteArray0);
      String string0 = "5";
      Base64.isBase64("5");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      Base64.encodeBase64(byteArray1, false);
      Base64.isArrayByteBase64(byteArray1);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte) (-54), byteArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [zazKzg==]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte) (-26);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)80;
      byteArray0[7] = (byte)0;
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray4 = base64_0.encode(byteArray1);
      base64_0.decode(byteArray1, (-3890), (-3890));
      byte[] byteArray5 = new byte[4];
      byteArray5[0] = (byte)0;
      byteArray5[1] = (byte) (-68);
      byteArray5[2] = (byte)0;
      byteArray5[3] = (byte)0;
      String string0 = base64_0.encodeToString(byteArray5);
      //  // Unstable assertion: assertEquals("ALwAAA==\uFFFD\n", string0);
      
      byte[] byteArray6 = Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64String(byteArray6);
      Base64.encodeBase64Chunked(byteArray1);
      Base64.encodeBase64(byteArray2, true);
      Base64.encodeBase64(byteArray0);
      Base64.encodeBase64Chunked(byteArray6);
      byte[] byteArray7 = Base64.decodeBase64(byteArray3);
      base64_0.decode(byteArray6);
      Base64.encodeBase64(byteArray6, false);
      Base64.encodeBase64Chunked(byteArray4);
      Base64.isArrayByteBase64(byteArray0);
      //  // Unstable assertion: assertSame(byteArray0, byteArray7);
      
      Base64.isBase64((byte)66);
      byte[] byteArray8 = new byte[4];
      byteArray8[0] = (byte)66;
      byteArray8[1] = (byte)66;
      byteArray8[2] = (byte)66;
      byteArray8[3] = (byte)66;
      boolean boolean0 = Base64.isBase64(byteArray8);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte) (-127);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)86;
      byte byte0 = (byte)90;
      boolean boolean0 = false;
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-120);
      byteArray0[0] = (byte) (-120);
      byte byte1 = (byte)1;
      byteArray0[1] = (byte)1;
      boolean boolean0 = true;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, true, true, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte byte0 = (byte)0;
      Base64.isBase64((byte)0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      Base64 base64_0 = new Base64((byte)0, byteArray0, false);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      base64_0.decode("");
      Base64.encodeInteger(bigInteger0);
      String string0 = null;
      Base64.encodeInteger(bigInteger0);
      Base64.decodeBase64((String) null);
      bigInteger0.isProbablePrime(64);
      base64_0.hasData();
      BigInteger bigInteger1 = null;
      try {
        bigInteger1 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte[] byteArray0 = null;
      boolean boolean0 = false;
      int int0 = 1;
      Base64.encodeBase64((byte[]) null, true, false, 1);
      int int1 = 2798;
      Base64 base64_0 = new Base64(2798, (byte[]) null);
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)0;
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(1979, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [F\u0000\u0016\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = bigInteger0.toByteArray();
      Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      base64_0.hasData();
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      assertEquals(4, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray2);
      
      byte[] byteArray3 = Base64.decodeBase64(byteArray1);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)10}, byteArray3);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte)1;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertEquals(7, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)72, (byte)88, (byte)103, (byte)65, (byte)114, (byte)81, (byte)69}, byteArray1);
      
      Base64.decodeBase64((String) null);
      int int0 = base64_0.avail();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertArrayEquals(new byte[] {(byte)47, (byte)121, (byte)115, (byte)65, (byte)47, (byte)119, (byte)61, (byte)61}, byteArray1);
      assertEquals(8, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)72;
      byteArray0[5] = (byte)0;
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertArrayEquals(new byte[] {(byte)57, (byte)99, (byte)120, (byte)57, (byte)65, (byte)69, (byte)103, (byte)65}, byteArray1);
      assertEquals(8, byteArray1.length);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64.decodeBase64("i=i(@(+:Uy, CKp");
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte)11;
      boolean boolean0 = false;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\t+\u0000\u0001k\u000B]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      boolean boolean0 = base64_0.hasData();
      boolean boolean1 = Base64.isBase64("oMg");
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      
      base64_0.decode((Object) "oMg");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-49);
      byteArray0[4] = (byte) (-54);
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte)46;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      String string0 = base64_0.encodeToString(byteArray0);
      //  // Unstable assertion: assertEquals("JP8Cz8o7LgAA\uFFFD\n", string0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Base64 base64_0 = new Base64((-164));
      base64_0.encode((byte[]) null);
      Base64.encodeBase64((byte[]) null, false, true);
      base64_0.decode((byte[]) null, (-164), (-3287));
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null);
      assertNull(byteArray0);
      
      Base64.decodeBase64("");
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-32);
      byteArray1[1] = (byte) (-7);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)103;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)117;
      byteArray1[6] = (byte) (-78);
      byteArray1[7] = (byte) (-49);
      byte[] byteArray2 = base64_0.decode(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-126)}, byteArray2);
      assertEquals(1, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-76);
      byteArray0[7] = (byte) (-107);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64.encodeBase64(byteArray0, false, false);
      Base64.isBase64("");
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte) (-107), byteArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [AFlJ_0MAtJU\u0003\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)44;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, (int) (byte)72);
      assertArrayEquals(new byte[] {(byte)121, (byte)72, (byte)48, (byte)43, (byte)83, (byte)67, (byte)119, (byte)61}, byteArray1);
      assertEquals(8, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-65);
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte) (-1);
      Base64.isBase64(byteArray0);
      Base64.encodeBase64(byteArray0, false, false);
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertArrayEquals(new byte[] {(byte)1}, byteArray1);
      
      Base64 base64_0 = new Base64(329);
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)1;
      byteArray2[1] = (byte)1;
      byteArray2[2] = (byte)1;
      byteArray2[3] = (byte)1;
      byteArray2[4] = (byte)1;
      byteArray2[5] = (byte)1;
      byteArray2[6] = (byte)1;
      byteArray2[7] = (byte)1;
      base64_0.readResults(byteArray2, 0, (byte)1);
      base64_0.avail();
      assertFalse(base64_0.isUrlSafe());
      
      boolean boolean0 = Base64.isBase64("b,Jmd=j");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Base64.isBase64((byte) (-104));
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-104);
      Base64.encodeBase64String(byteArray0);
      byteArray0[1] = (byte) (-104);
      base64_0.decode((Object) "");
      byteArray0[2] = (byte) (-104);
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)44;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-1), byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000f,]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      int int0 = base64_0.avail();
      assertEquals(0, int0);
      assertTrue(base64_0.isUrlSafe());
  }
}
