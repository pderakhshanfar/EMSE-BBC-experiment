/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:07:42 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.util.stream.DoubleStream;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-319), byteArray0, false);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(base64_0);
      assertEquals(0, byteArray0.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      String string0 = Base64.encodeBase64String(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(string0);
      assertEquals(0, byteArray0.length);
      assertEquals("", string0);
      
      Object object0 = base64_0.decode((Object) "w[O-M8GP}C/U/yC~h5");
      assertNotSame(byteArray0, object0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(object0);
      assertEquals(0, byteArray0.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      Object object1 = base64_0.decode(object0);
      assertFalse(byteArray0.equals((Object)object0));
      assertFalse(object1.equals((Object)object0));
      assertNotSame(byteArray0, object0);
      assertNotSame(byteArray0, object1);
      assertNotSame(object0, object1);
      assertNotSame(object1, object0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(object1);
      assertEquals(0, byteArray0.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      // Undeclared exception!
      try { 
        base64_0.encode(object1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(6L);
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      BigInteger bigInteger0 = new BigInteger(8192, mockRandom0);
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertNotNull(byteArray0);
      assertEquals(1368, byteArray0.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      Base64 base64_0 = new Base64(4);
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      boolean boolean0 = bigInteger0.isProbablePrime(4);
      assertFalse(boolean0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1368, byteArray0.length);
      assertEquals(2736, byteArray1.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      
      Base64 base64_1 = new Base64();
      assertFalse(base64_1.equals((Object)base64_0));
      assertNotNull(base64_1);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_1.isUrlSafe());
      
      byte[] byteArray2 = base64_0.encode(byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(base64_0, base64_1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(1368, byteArray0.length);
      assertEquals(2736, byteArray1.length);
      assertEquals(5472, byteArray2.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      
      // Undeclared exception!
      base64_1.encodeToString(byteArray2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-16L));
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      BigInteger bigInteger0 = new BigInteger(8192, mockRandom0);
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertNotNull(byteArray0);
      assertEquals(1368, byteArray0.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      Base64 base64_0 = new Base64(4);
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      boolean boolean0 = bigInteger0.isProbablePrime(4);
      assertFalse(boolean0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      base64_0.encode(byteArray0, 4, 108);
      assertEquals(1368, byteArray0.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      
      base64_0.encode(byteArray0, (-1185), (-1185));
      assertEquals(1368, byteArray0.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1368, byteArray0.length);
      assertEquals(1368, byteArray1.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(6L);
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      int int0 = Integer.MAX_VALUE;
      BigInteger bigInteger0 = new BigInteger(Integer.MAX_VALUE, mockRandom0);
      assertNotNull(bigInteger0);
      assertEquals((short)4, bigInteger0.shortValue());
      assertEquals((byte)4, bigInteger0.byteValue());
      
      // Undeclared exception!
      try { 
        Base64.encodeInteger(bigInteger0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(6L);
      //  // Unstable assertion: assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      //  // Unstable assertion: assertEquals(0.0F, float0, 0.01F);
      
      BigInteger bigInteger0 = new BigInteger(8192, mockRandom0);
      //  // Unstable assertion: assertNotNull(bigInteger0);
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      //  // Unstable assertion: assertNotNull(byteArray0);
      //  // Unstable assertion: assertEquals(1368, byteArray0.length);
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      
      Base64 base64_0 = new Base64(4);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      boolean boolean0 = bigInteger0.isProbablePrime(4);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      
      byte[] byteArray1 = base64_0.encode(byteArray0);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertEquals(1368, byteArray0.length);
      //  // Unstable assertion: assertEquals(2736, byteArray1.length);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      Base64 base64_1 = new Base64();
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertNotNull(base64_1);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(base64_0.equals((Object)base64_1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(base64_0, base64_1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertEquals(1368, byteArray0.length);
      //  // Unstable assertion: assertEquals(2736, byteArray1.length);
      //  // Unstable assertion: assertEquals(3648, byteArray2.length);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray3 = base64_0.encode(byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(base64_0.equals((Object)base64_1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(base64_0, base64_1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertEquals(1368, byteArray0.length);
      //  // Unstable assertion: assertEquals(2736, byteArray1.length);
      //  // Unstable assertion: assertEquals(5472, byteArray3.length);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray3);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(base64_0.equals((Object)base64_1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger0));
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(base64_0, base64_1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger0);
      //  // Unstable assertion: assertNotNull(bigInteger1);
      //  // Unstable assertion: assertEquals(1368, byteArray0.length);
      //  // Unstable assertion: assertEquals(2736, byteArray1.length);
      //  // Unstable assertion: assertEquals(5472, byteArray3.length);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger1.byteValue());
      //  // Unstable assertion: assertEquals((short) (-21248), bigInteger1.shortValue());
      
      // Undeclared exception!
      Base64.decodeInteger(byteArray3);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles(0L);
      assertNotNull(doubleStream0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      BigInteger bigInteger0 = new BigInteger(8211, mockRandom0);
      assertNotNull(bigInteger0);
      assertEquals((short)256, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertNotNull(byteArray0);
      assertEquals(1372, byteArray0.length);
      assertEquals((short)256, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      Base64 base64_0 = new Base64(5);
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1372, byteArray0.length);
      assertEquals(2748, byteArray1.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals((short)256, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray2 = base64_0.encode(byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotNull(byteArray2);
      assertEquals(1372, byteArray0.length);
      assertEquals(2748, byteArray1.length);
      assertEquals(5496, byteArray2.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals((short)256, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      
      // Undeclared exception!
      Base64.encodeBase64(byteArray2, true, true, 8211);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = new BigInteger(8192, mockRandom0);
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertNotNull(byteArray0);
      assertEquals(1360, byteArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      Base64 base64_0 = new Base64(8192);
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      boolean boolean0 = bigInteger0.testBit(8192);
      assertFalse(boolean0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      Base64 base64_1 = new Base64(false);
      assertFalse(base64_1.equals((Object)base64_0));
      assertNotNull(base64_1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_1.isUrlSafe());
      
      base64_1.encode(byteArray0, 76, 76);
      assertFalse(base64_1.equals((Object)base64_0));
      assertNotSame(base64_1, base64_0);
      assertEquals(1360, byteArray0.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(base64_1.isUrlSafe());
      
      base64_1.encode(byteArray0, 64, (-1171));
      assertFalse(base64_1.equals((Object)base64_0));
      assertNotSame(base64_1, base64_0);
      assertEquals(1360, byteArray0.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(base64_1.isUrlSafe());
      
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1360, byteArray0.length);
      assertEquals(1360, byteArray1.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(1360, byteArray2.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-16L));
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      BigInteger bigInteger0 = new BigInteger(8192, mockRandom0);
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertNotNull(byteArray0);
      assertEquals(1368, byteArray0.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      Base64 base64_0 = new Base64(4);
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      boolean boolean0 = bigInteger0.isProbablePrime(4);
      assertFalse(boolean0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      base64_0.encode(byteArray0, 4, 44);
      assertEquals(1368, byteArray0.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      
      base64_0.encode(byteArray0, (-1171), (-1171));
      assertEquals(1368, byteArray0.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1368, byteArray0.length);
      assertEquals(1368, byteArray1.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = new BigInteger(8192, mockRandom0);
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertNotNull(byteArray0);
      assertEquals(1360, byteArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      Base64 base64_0 = new Base64(4);
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      boolean boolean0 = bigInteger0.testBit(4);
      assertFalse(boolean0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1360, byteArray0.length);
      assertEquals(2724, byteArray1.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(base64_0.isUrlSafe());
      
      Base64 base64_1 = new Base64(false);
      assertFalse(base64_1.equals((Object)base64_0));
      assertNotNull(base64_1);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_1.isUrlSafe());
      
      base64_1.encode(byteArray1, 76, 76);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(base64_1.equals((Object)base64_0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(base64_0, base64_1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(base64_1, base64_0);
      assertEquals(1360, byteArray0.length);
      assertEquals(2724, byteArray1.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(base64_0.isUrlSafe());
      assertFalse(base64_1.isUrlSafe());
      
      String string0 = Base64.encodeBase64String(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(string0);
      assertEquals(1360, byteArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      base64_1.encode(byteArray0, (-1), (-1171));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(base64_1.equals((Object)base64_0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(base64_1, base64_0);
      assertEquals(1360, byteArray0.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(base64_1.isUrlSafe());
      
      byte[] byteArray2 = base64_1.encode(byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(base64_1.equals((Object)base64_0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(base64_0, base64_1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(base64_1, base64_0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(1360, byteArray0.length);
      assertEquals(2724, byteArray1.length);
      assertEquals(3728, byteArray2.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(base64_0.isUrlSafe());
      assertFalse(base64_1.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-16L));
      //  // Unstable assertion: assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      //  // Unstable assertion: assertEquals(0.0F, float0, 0.01F);
      
      BigInteger bigInteger0 = new BigInteger(8192, mockRandom0);
      //  // Unstable assertion: assertNotNull(bigInteger0);
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      //  // Unstable assertion: assertNotNull(byteArray0);
      //  // Unstable assertion: assertEquals(1368, byteArray0.length);
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      
      Base64 base64_0 = new Base64(4);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      boolean boolean0 = bigInteger0.isProbablePrime(4);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      
      boolean boolean1 = bigInteger0.testBit(4);
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      //  // Unstable assertion: assertFalse(boolean1);
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      
      byte[] byteArray1 = base64_0.encode(byteArray0);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertEquals(1368, byteArray0.length);
      //  // Unstable assertion: assertEquals(2736, byteArray1.length);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      Base64 base64_1 = new Base64();
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertNotNull(base64_1);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      
      base64_0.encode(byteArray1, 8192, 64);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(base64_0.equals((Object)base64_1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(base64_0, base64_1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertEquals(1368, byteArray0.length);
      //  // Unstable assertion: assertEquals(2736, byteArray1.length);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray2 = base64_0.encode(byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(base64_0.equals((Object)base64_1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(base64_0, base64_1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertEquals(1368, byteArray0.length);
      //  // Unstable assertion: assertEquals(2736, byteArray1.length);
      //  // Unstable assertion: assertEquals(5472, byteArray2.length);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray2);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(base64_0.equals((Object)base64_1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger0));
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(base64_0, base64_1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger0);
      //  // Unstable assertion: assertNotNull(bigInteger1);
      //  // Unstable assertion: assertEquals(1368, byteArray0.length);
      //  // Unstable assertion: assertEquals(2736, byteArray1.length);
      //  // Unstable assertion: assertEquals(5472, byteArray2.length);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger1.byteValue());
      //  // Unstable assertion: assertEquals((short) (-21248), bigInteger1.shortValue());
      
      // Undeclared exception!
      base64_1.encode(byteArray2, 64, 8192);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = new BigInteger(8192, mockRandom0);
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertNotNull(byteArray0);
      assertEquals(1360, byteArray0.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      Base64 base64_0 = new Base64(4);
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      boolean boolean0 = bigInteger0.testBit(4);
      assertFalse(boolean0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1360, byteArray0.length);
      assertEquals(2724, byteArray1.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      
      Base64 base64_1 = new Base64(false);
      assertFalse(base64_1.equals((Object)base64_0));
      assertNotNull(base64_1);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_1.isUrlSafe());
      
      Base64 base64_2 = new Base64(false);
      assertFalse(base64_2.equals((Object)base64_1));
      assertFalse(base64_2.equals((Object)base64_0));
      assertNotNull(base64_2);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_2.isUrlSafe());
      
      base64_2.encode(byteArray1, 76, 1599);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(base64_0.equals((Object)base64_2));
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(base64_2.equals((Object)base64_1));
      assertFalse(base64_2.equals((Object)base64_0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(base64_0, base64_2);
      assertNotSame(base64_0, base64_1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(base64_2, base64_1);
      assertNotSame(base64_2, base64_0);
      assertEquals(1360, byteArray0.length);
      assertEquals(2724, byteArray1.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertFalse(base64_2.isUrlSafe());
      
      base64_2.encode(byteArray0, (-1), (-1171));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(base64_2.equals((Object)base64_1));
      assertFalse(base64_2.equals((Object)base64_0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(base64_2, base64_1);
      assertNotSame(base64_2, base64_0);
      assertEquals(1360, byteArray0.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_2.isUrlSafe());
      
      base64_2.encode(byteArray1, 479, 1599);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(base64_0.equals((Object)base64_2));
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(base64_2.equals((Object)base64_1));
      assertFalse(base64_2.equals((Object)base64_0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(base64_0, base64_2);
      assertNotSame(base64_0, base64_1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(base64_2, base64_1);
      assertNotSame(base64_2, base64_0);
      assertEquals(1360, byteArray0.length);
      assertEquals(2724, byteArray1.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertFalse(base64_2.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      int int0 = 8211;
      BigInteger bigInteger0 = new BigInteger(8211, mockRandom0);
      assertNotNull(bigInteger0);
      assertEquals((short)256, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertNotNull(byteArray0);
      assertEquals(1372, byteArray0.length);
      assertEquals((short)256, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      Base64 base64_0 = new Base64(1908);
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      boolean boolean0 = bigInteger0.testBit(76);
      assertFalse(boolean0);
      assertEquals((short)256, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1372, byteArray0.length);
      assertEquals(1834, byteArray1.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals((short)256, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray2 = base64_0.encode(byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(1372, byteArray0.length);
      assertEquals(1834, byteArray1.length);
      assertEquals(2452, byteArray2.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals((short)256, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      
      Base64 base64_1 = new Base64(false);
      assertFalse(base64_1.equals((Object)base64_0));
      assertNotNull(base64_1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_1.isUrlSafe());
      
      byte[] byteArray3 = base64_1.encode(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(base64_1.equals((Object)base64_0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(base64_0, base64_1);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(base64_1, base64_0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotNull(byteArray3);
      assertEquals(1372, byteArray0.length);
      assertEquals(1834, byteArray1.length);
      assertEquals(2452, byteArray2.length);
      assertEquals(3360, byteArray3.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals((short)256, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertFalse(base64_1.isUrlSafe());
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger1, bigInteger0);
      assertNotNull(bigInteger1);
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      
      byte[] byteArray4 = Base64.encodeInteger(bigInteger0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray2);
      assertNotNull(byteArray4);
      assertEquals(1372, byteArray4.length);
      assertEquals((short)256, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      byte[] byteArray5 = base64_0.decode(byteArray3);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray4));
      assertFalse(base64_1.equals((Object)base64_0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray0));
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(base64_0, base64_1);
      assertNotSame(byteArray1, byteArray5);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray5);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(base64_1, base64_0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray3, byteArray5);
      assertNotSame(byteArray5, byteArray3);
      assertNotSame(byteArray5, byteArray0);
      assertNotSame(byteArray5, byteArray1);
      assertNotSame(byteArray5, byteArray4);
      assertNotSame(byteArray5, byteArray2);
      assertNotNull(byteArray5);
      assertEquals(1372, byteArray0.length);
      assertEquals(1834, byteArray1.length);
      assertEquals(2452, byteArray2.length);
      assertEquals(3360, byteArray3.length);
      assertEquals(2452, byteArray5.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals((short)256, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertFalse(base64_1.isUrlSafe());
      
      BigInteger bigInteger2 = bigInteger0.clearBit(76);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertTrue(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotNull(bigInteger2);
      assertEquals((short)256, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)256, bigInteger2.shortValue());
      assertEquals((byte)0, bigInteger2.byteValue());
      
      // Undeclared exception!
      Base64.encodeBase64URLSafe(byteArray5);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Base64 base64_0 = new Base64();
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte) (-122);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)126, (byte)0, (byte)56, (byte) (-122)}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)102, (byte)103, (byte)65, (byte)52, (byte)104, (byte)103, (byte)61, (byte)61, (byte) (-83), (byte)0}, byteArray1);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertEquals(10, byteArray1.length);
      
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)0, 2817);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-52);
      byte[] byteArray1 = new byte[8];
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[3] = (byte)18;
      Base64 base64_0 = new Base64();
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-52), (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)122, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61, (byte)61, (byte) (-83), (byte)0}, byteArray2);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertEquals(10, byteArray2.length);
      
      base64_0.decode(byteArray2, 0, (int) (byte)18);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-52), (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)122, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61, (byte)61, (byte) (-83), (byte)0}, byteArray2);
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertEquals(10, byteArray2.length);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      int int0 = base64_0.readResults(byteArray0, 0, 13);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-52), (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertEquals(4, int0);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      Base64 base64_0 = new Base64(false);
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(10, byteArray0.length);
      assertEquals(18, byteArray1.length);
      
      base64_0.decode(byteArray1, 1, 1866);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArray0.length);
      assertEquals(18, byteArray1.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      BigInteger bigInteger0 = new BigInteger(8192, mockRandom0);
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertNotNull(byteArray0);
      assertEquals(1368, byteArray0.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      Base64 base64_0 = new Base64(1962);
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1368, byteArray0.length);
      assertEquals(1826, byteArray1.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray2 = base64_0.encode(byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotNull(byteArray2);
      assertEquals(1368, byteArray0.length);
      assertEquals(1826, byteArray1.length);
      assertEquals(2440, byteArray2.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      
      Base64 base64_1 = new Base64(76);
      assertFalse(base64_1.equals((Object)base64_0));
      assertNotNull(base64_1);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_1.isUrlSafe());
      
      byte[] byteArray3 = base64_1.encode(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(base64_1.equals((Object)base64_0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(base64_0, base64_1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(base64_1, base64_0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertNotNull(byteArray3);
      assertEquals(1368, byteArray0.length);
      assertEquals(1826, byteArray1.length);
      assertEquals(2440, byteArray2.length);
      assertEquals(3342, byteArray3.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertFalse(base64_1.isUrlSafe());
      
      byte[] byteArray4 = base64_0.encode(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(base64_0, base64_1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray1);
      assertNotNull(byteArray4);
      assertEquals(1368, byteArray0.length);
      assertEquals(1826, byteArray1.length);
      assertEquals(2440, byteArray2.length);
      assertEquals(3260, byteArray4.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      
      // Undeclared exception!
      base64_1.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-783), byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(base64_0);
      assertEquals(0, byteArray0.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray2 = new byte[3];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = (byte)1;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte) (-19);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-83), (byte)0}, byteArray0);
      //  // Unstable assertion: assertNotNull(byteArray0);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      //  // Unstable assertion: assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = new BigInteger(1717986918, mockRandom0);
      //  // Unstable assertion: assertNotNull(bigInteger0);
      //  // Unstable assertion: assertEquals((short)819, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)51, bigInteger0.byteValue());
      
      // Undeclared exception!
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-52);
      byte[] byteArray1 = new byte[8];
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)18;
      Base64 base64_0 = new Base64();
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true, (int) (byte)18);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)18, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertEquals(8, byteArray1.length);
      //  // Unstable assertion: assertEquals(13, byteArray2.length);
      
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-52), (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)122, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61, (byte)61, (byte) (-83), (byte)0}, byteArray3);
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertEquals(10, byteArray3.length);
      
      byte[] byteArray4 = Base64.encodeBase64URLSafe(byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-52), (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)122, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65}, byteArray4);
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArray4.length);
      
      base64_0.decode(byteArray3, 0, (int) (byte)18);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-52), (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)122, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61, (byte)61, (byte) (-83), (byte)0}, byteArray3);
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertEquals(10, byteArray3.length);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      int int0 = base64_0.avail();
      //  // Unstable assertion: assertEquals(4, int0);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(3128L);
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      BigInteger bigInteger0 = new BigInteger(8192, mockRandom0);
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertNotNull(byteArray0);
      assertEquals(1368, byteArray0.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray0);
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotNull(bigInteger1);
      assertEquals(1368, byteArray0.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertTrue(bigInteger0.equals((Object)bigInteger1));
      assertNotSame(bigInteger0, bigInteger1);
      assertEquals(1368, byteArray0.length);
      assertTrue(boolean0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertTrue(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1368, byteArray0.length);
      assertEquals(1368, byteArray1.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte) (-40);
      byteArray0[4] = (byte) (-110);
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)57;
      byteArray0[7] = (byte) (-100);
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger1, bigInteger0);
      assertArrayEquals(new byte[] {(byte)71, (byte)9, (byte) (-6), (byte) (-40), (byte) (-110), (byte)91, (byte)57, (byte) (-100)}, byteArray0);
      assertNotNull(bigInteger1);
      assertEquals(8, byteArray0.length);
      assertEquals((byte)27, bigInteger1.byteValue());
      assertEquals((short)27, bigInteger1.shortValue());
      
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertArrayEquals(new byte[] {(byte)71, (byte)9, (byte) (-6), (byte) (-40), (byte) (-110), (byte)91, (byte)57, (byte) (-100)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)71, (byte)9, (byte) (-6), (byte) (-40), (byte) (-110), (byte)91, (byte)57, (byte) (-100)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)71, (byte)119, (byte)61, (byte)61}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertEquals((byte)27, bigInteger1.byteValue());
      assertEquals((short)27, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      boolean boolean0 = Base64.isBase64((byte)61);
      assertTrue(boolean0);
      
      Base64 base64_0 = new Base64((byte)61, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(base64_0);
      assertEquals(0, byteArray0.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray2 = new byte[5];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = (byte)61;
      byteArray2[1] = (byte)40;
      byteArray2[2] = (byte)61;
      byteArray2[3] = (byte)61;
      byteArray2[4] = (byte)61;
      byte[] byteArray3 = base64_0.decode("");
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertNotNull(byteArray3);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray3.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray2, (int) (byte)61, 744);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 61
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-83);
      Base64 base64_0 = new Base64((byte) (-83), byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray1 = new byte[9];
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[7] = (byte) (-83);
      byteArray1[2] = (byte) (-83);
      byteArray1[3] = (byte)21;
      Base64 base64_1 = new Base64();
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertNotNull(base64_1);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true, true);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)114, (byte)81, (byte)65, (byte)65, (byte)65, (byte)65, (byte) (-83), (byte)0}, byteArray2);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertEquals(8, byteArray2.length);
      
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)114, (byte)81, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61, (byte)61, (byte) (-83), (byte)0}, byteArray3);
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertEquals(10, byteArray3.length);
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray0, true, true, (int) (byte)21);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)114, (byte)81, (byte)65, (byte)65, (byte)65, (byte)65, (byte) (-83), (byte)0}, byteArray4);
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertEquals(8, byteArray4.length);
      
      byte[] byteArray5 = Base64.encodeBase64URLSafe(byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)114, (byte)81, (byte)65, (byte)65, (byte)65, (byte)65}, byteArray5);
      //  // Unstable assertion: assertNotNull(byteArray5);
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArray5.length);
      
      base64_1.decode(byteArray3, 0, (int) (byte)21);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(base64_1, base64_0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)114, (byte)81, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61, (byte)61, (byte) (-83), (byte)0}, byteArray3);
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertEquals(10, byteArray3.length);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-104);
      Base64 base64_0 = new Base64();
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)9;
      byteArray1[1] = (byte)10;
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)9, (byte)10}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(2, byteArray1.length);
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-83);
      byteArray0[0] = (byte) (-83);
      int int0 = 16;
      Base64 base64_0 = new Base64(16, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(base64_0);
      assertEquals(4, byteArray0.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)32;
      byteArray1[1] = (byte)21;
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = BigInteger.ONE;
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger1, bigInteger0);
      assertNotNull(bigInteger1);
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      
      int int1 = bigInteger1.intValueExact();
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(int1 == int0);
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals(1, int1);
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray2.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, true);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertArrayEquals(new byte[] {(byte)32, (byte)21, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray3);
      assertEquals(9, byteArray1.length);
      assertEquals(14, byteArray3.length);
      
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray3, 0, 93);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-83);
      Base64 base64_0 = new Base64(16, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray1 = new byte[9];
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)32;
      byteArray1[2] = (byte)10;
      byteArray1[3] = (byte)10;
      base64_0.decode(byteArray1, (int) (byte)10, (-859));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)32, (byte)0, (byte)10, (byte)10, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertEquals(9, byteArray1.length);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      Base64 base64_1 = new Base64();
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertNotNull(base64_1);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true, true);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)114, (byte)81, (byte)65, (byte)65, (byte)65, (byte)65, (byte) (-83), (byte)0}, byteArray2);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertEquals(8, byteArray2.length);
      
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)114, (byte)81, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61, (byte)61, (byte) (-83), (byte)0}, byteArray3);
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertEquals(10, byteArray3.length);
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray0, false, false, (int) (byte)10);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)114, (byte)81, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61, (byte)61}, byteArray4);
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertEquals(8, byteArray4.length);
      
      byte[] byteArray5 = Base64.encodeBase64URLSafe(byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)114, (byte)81, (byte)65, (byte)65, (byte)65, (byte)65}, byteArray5);
      //  // Unstable assertion: assertNotNull(byteArray5);
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArray5.length);
      
      // Undeclared exception!
      try { 
        base64_1.decode(byteArray3, (-35), 6);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -35
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-83);
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-83);
      byteArray1[1] = (byte)76;
      byteArray1[2] = (byte) (-83);
      byteArray1[3] = (byte) (-83);
      byteArray1[4] = (byte) (-83);
      boolean boolean0 = Base64.isBase64(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-83), (byte)76, (byte) (-83), (byte) (-83), (byte) (-83)}, byteArray1);
      assertEquals(5, byteArray1.length);
      assertFalse(boolean0);
      
      boolean boolean1 = Base64.isBase64("!utVo!i");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Base64 base64_0 = new Base64();
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      Base64 base64_1 = new Base64((-1));
      assertFalse(base64_1.equals((Object)base64_0));
      assertNotNull(base64_1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_1.isUrlSafe());
      
      byte[] byteArray2 = base64_1.decode("MEn$>!C9,()Ku");
      assertFalse(base64_1.equals((Object)base64_0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(base64_1, base64_0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)48, (byte)73, (byte) (-62), (byte) (-12), (byte) (-85)}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(5, byteArray2.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_1.isUrlSafe());
      
      String string0 = base64_0.encodeToString(byteArray2);
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(base64_1.equals((Object)base64_0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(base64_0, base64_1);
      assertNotSame(base64_1, base64_0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)48, (byte)73, (byte) (-62), (byte) (-12), (byte) (-85)}, byteArray2);
      assertNotNull(string0);
      assertEquals(5, byteArray2.length);
      assertEquals("MEnC9Ks=", string0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      assertFalse(base64_1.isUrlSafe());
      
      Base64 base64_2 = new Base64(false);
      assertFalse(base64_2.equals((Object)base64_1));
      assertFalse(base64_2.equals((Object)base64_0));
      assertNotNull(base64_2);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_2.isUrlSafe());
      
      byte[] byteArray3 = new byte[5];
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      
      byteArray3[0] = (byte) (-83);
      byteArray3[1] = (byte) (-83);
      byteArray3[2] = (byte)21;
      byteArray3[3] = (byte)21;
      byteArray3[4] = (byte)21;
      Base64 base64_3 = new Base64((-1161), byteArray3);
      assertFalse(base64_3.equals((Object)base64_2));
      assertFalse(base64_3.equals((Object)base64_1));
      assertFalse(base64_3.equals((Object)base64_0));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertArrayEquals(new byte[] {(byte) (-83), (byte) (-83), (byte)21, (byte)21, (byte)21}, byteArray3);
      assertNotNull(base64_3);
      assertEquals(5, byteArray3.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_3.isUrlSafe());
      
      // Undeclared exception!
      try { 
        base64_3.encode(byteArray2, 0, 816);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-83);
      Base64 base64_0 = new Base64(16, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray1 = new byte[9];
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)32;
      byteArray1[2] = (byte)10;
      byteArray1[3] = (byte)21;
      base64_0.decode(byteArray1, (int) (byte)10, (-859));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)32, (byte)0, (byte)10, (byte)21, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertEquals(9, byteArray1.length);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      Base64 base64_1 = new Base64();
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertNotNull(base64_1);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true, true);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)114, (byte)81, (byte)65, (byte)65, (byte)65, (byte)65, (byte) (-83), (byte)0}, byteArray2);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertEquals(8, byteArray2.length);
      
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)114, (byte)81, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61, (byte)61, (byte) (-83), (byte)0}, byteArray3);
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertEquals(10, byteArray3.length);
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray0, false, false, (int) (byte)21);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)114, (byte)81, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61, (byte)61}, byteArray4);
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertEquals(8, byteArray4.length);
      
      byte[] byteArray5 = Base64.encodeBase64URLSafe(byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)114, (byte)81, (byte)65, (byte)65, (byte)65, (byte)65}, byteArray5);
      //  // Unstable assertion: assertNotNull(byteArray5);
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArray5.length);
      
      base64_1.decode(byteArray3, 0, 6);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(base64_1, base64_0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)114, (byte)81, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61, (byte)61, (byte) (-83), (byte)0}, byteArray3);
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertEquals(10, byteArray3.length);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-83);
      Base64 base64_0 = new Base64(16, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(base64_0);
      assertEquals(4, byteArray0.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)32;
      byteArray1[1] = (byte)21;
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = BigInteger.ONE;
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger1, bigInteger0);
      assertNotNull(bigInteger1);
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      
      int int0 = bigInteger1.intValueExact();
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals(1, int0);
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray2.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, false);
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertArrayEquals(new byte[] {(byte)32, (byte)21, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray3);
      assertEquals(9, byteArray1.length);
      assertEquals(12, byteArray3.length);
      
      byte[] byteArray4 = new byte[7];
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray1));
      
      byteArray4[0] = (byte)10;
      byteArray4[1] = (byte)76;
      byteArray4[2] = (byte)21;
      byteArray4[3] = (byte)32;
      byteArray4[4] = (byte)21;
      byteArray4[5] = (byte)32;
      byteArray4[6] = (byte)10;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray4, 1, (int) (byte)21);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-83);
      Base64 base64_0 = new Base64(16, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(base64_0);
      assertEquals(4, byteArray0.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)32;
      byteArray1[1] = (byte)21;
      byteArray1[2] = (byte)21;
      byteArray1[3] = (byte)21;
      base64_0.decode(byteArray1, (int) (byte)21, (-859));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)32, (byte)21, (byte)21, (byte)21, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals(4, byteArray0.length);
      assertEquals("rQAAAA", string0);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)32, (byte)21, (byte)21, (byte)21, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(9, byteArray1.length);
      assertEquals(12, byteArray2.length);
      
      Base64 base64_1 = new Base64(1, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(base64_1.equals((Object)base64_0));
      assertArrayEquals(new byte[] {(byte)32, (byte)21, (byte)21, (byte)21, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(base64_1);
      assertEquals(9, byteArray1.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_1.isUrlSafe());
      
      byte[] byteArray3 = Base64.decodeBase64("rQAAAA");
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte)0, (byte)0}, byteArray3);
      assertNotNull(byteArray3);
      assertEquals(4, byteArray3.length);
      
      String string1 = base64_0.encodeToString(byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(base64_0, base64_1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)32, (byte)21, (byte)21, (byte)21, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(string1);
      assertEquals(4, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertEquals("IBUVFQAAAAAA\uFFFD\u0000\u0000\u0000", string1);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      String string2 = Base64.encodeBase64URLSafeString(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string2);
      assertEquals(4, byteArray0.length);
      assertEquals("rQAAAA", string2);
      
      Random.setNextRandom(27);
      byte[] byteArray4 = base64_0.encode(byteArray2);
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(base64_0, base64_1);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)32, (byte)21, (byte)21, (byte)21, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray4);
      assertEquals(20, byteArray4.length);
      assertEquals(4, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertEquals(12, byteArray2.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-83);
      byte[] byteArray1 = Base64.decodeBase64("_s");
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-2)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray1.length);
      
      Base64 base64_0 = new Base64((-5856), byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-2)}, byteArray1);
      assertNotNull(base64_0);
      assertEquals(1, byteArray1.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray2 = base64_0.encode(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-2)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)47, (byte)103, (byte)61, (byte)61}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(1, byteArray1.length);
      assertEquals(4, byteArray2.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      BigInteger bigInteger0 = new BigInteger(byteArray2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte) (-2)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)47, (byte)103, (byte)61, (byte)61}, byteArray2);
      assertNotNull(bigInteger0);
      assertEquals(1, byteArray1.length);
      assertEquals(4, byteArray2.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      assertEquals((byte)61, bigInteger0.byteValue());
      assertEquals((short)15677, bigInteger0.shortValue());
      
      BigInteger bigInteger1 = BigInteger.TEN;
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger1, bigInteger0);
      assertNotNull(bigInteger1);
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      
      BigInteger bigInteger2 = BigInteger.ONE;
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotNull(bigInteger2);
      assertEquals((short)1, bigInteger2.shortValue());
      assertEquals((byte)1, bigInteger2.byteValue());
      
      BigInteger bigInteger3 = bigInteger2.shiftRight((-800));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger3);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger3, bigInteger2);
      assertNotSame(bigInteger3, bigInteger0);
      assertNotSame(bigInteger3, bigInteger1);
      assertNotNull(bigInteger3);
      assertEquals((short)1, bigInteger2.shortValue());
      assertEquals((byte)1, bigInteger2.byteValue());
      assertEquals((byte)0, bigInteger3.byteValue());
      assertEquals((short)0, bigInteger3.shortValue());
      
      BigInteger bigInteger4 = bigInteger0.modPow(bigInteger1, bigInteger1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertFalse(bigInteger1.equals((Object)bigInteger3));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger4.equals((Object)bigInteger0));
      assertFalse(bigInteger4.equals((Object)bigInteger1));
      assertFalse(bigInteger4.equals((Object)bigInteger3));
      assertFalse(bigInteger4.equals((Object)bigInteger2));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger1, bigInteger4);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger4, bigInteger0);
      assertNotSame(bigInteger4, bigInteger1);
      assertNotSame(bigInteger4, bigInteger3);
      assertNotSame(bigInteger4, bigInteger2);
      assertArrayEquals(new byte[] {(byte) (-2)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)47, (byte)103, (byte)61, (byte)61}, byteArray2);
      assertNotNull(bigInteger4);
      assertEquals(1, byteArray1.length);
      assertEquals(4, byteArray2.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      assertEquals((byte)61, bigInteger0.byteValue());
      assertEquals((short)15677, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals((byte)9, bigInteger4.byteValue());
      assertEquals((short)9, bigInteger4.shortValue());
      
      BigInteger bigInteger5 = new BigInteger(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(bigInteger5.equals((Object)bigInteger4));
      assertFalse(bigInteger5.equals((Object)bigInteger0));
      assertFalse(bigInteger5.equals((Object)bigInteger1));
      assertFalse(bigInteger5.equals((Object)bigInteger3));
      assertFalse(bigInteger5.equals((Object)bigInteger2));
      assertArrayEquals(new byte[] {(byte) (-2)}, byteArray1);
      assertNotNull(bigInteger5);
      assertEquals(1, byteArray1.length);
      assertEquals((short) (-2), bigInteger5.shortValue());
      assertEquals((byte) (-2), bigInteger5.byteValue());
      
      byte[] byteArray3 = bigInteger5.toByteArray();
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(bigInteger5.equals((Object)bigInteger4));
      assertFalse(bigInteger5.equals((Object)bigInteger0));
      assertFalse(bigInteger5.equals((Object)bigInteger1));
      assertFalse(bigInteger5.equals((Object)bigInteger3));
      assertFalse(bigInteger5.equals((Object)bigInteger2));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(bigInteger5, bigInteger4);
      assertNotSame(bigInteger5, bigInteger0);
      assertNotSame(bigInteger5, bigInteger1);
      assertNotSame(bigInteger5, bigInteger3);
      assertNotSame(bigInteger5, bigInteger2);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-2)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-2)}, byteArray3);
      assertNotNull(byteArray3);
      assertEquals(1, byteArray1.length);
      assertEquals(1, byteArray3.length);
      assertEquals((short) (-2), bigInteger5.shortValue());
      assertEquals((byte) (-2), bigInteger5.byteValue());
      
      byte[] byteArray4 = Base64.encodeInteger(bigInteger3);
      assertFalse(bigInteger2.equals((Object)bigInteger5));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger3));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger4));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      assertFalse(bigInteger3.equals((Object)bigInteger4));
      assertFalse(bigInteger3.equals((Object)bigInteger5));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertNotSame(bigInteger2, bigInteger5);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger3);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger4);
      assertNotSame(bigInteger3, bigInteger2);
      assertNotSame(bigInteger3, bigInteger0);
      assertNotSame(bigInteger3, bigInteger1);
      assertNotSame(bigInteger3, bigInteger4);
      assertNotSame(bigInteger3, bigInteger5);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray3);
      assertNotNull(byteArray4);
      assertEquals(136, byteArray4.length);
      assertEquals((short)1, bigInteger2.shortValue());
      assertEquals((byte)1, bigInteger2.byteValue());
      assertEquals((byte)0, bigInteger3.byteValue());
      assertEquals((short)0, bigInteger3.shortValue());
      
      base64_0.decode(byteArray2, (-800), 0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray4));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-2)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)47, (byte)103, (byte)61, (byte)61}, byteArray2);
      assertEquals(1, byteArray1.length);
      assertEquals(4, byteArray2.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray5 = Base64.decodeBase64("_s");
      assertFalse(byteArray5.equals((Object)byteArray0));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertNotSame(byteArray5, byteArray0);
      assertNotSame(byteArray5, byteArray4);
      assertNotSame(byteArray5, byteArray2);
      assertNotSame(byteArray5, byteArray3);
      assertNotSame(byteArray5, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-2)}, byteArray5);
      assertNotNull(byteArray5);
      assertEquals(1, byteArray5.length);
      
      byte[] byteArray6 = base64_0.decode("_s");
      assertFalse(byteArray1.equals((Object)byteArray5));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray6.equals((Object)byteArray5));
      assertFalse(byteArray6.equals((Object)byteArray2));
      assertFalse(byteArray6.equals((Object)byteArray4));
      assertFalse(byteArray6.equals((Object)byteArray3));
      assertFalse(byteArray6.equals((Object)byteArray1));
      assertFalse(byteArray6.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray5);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray6);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray6, byteArray5);
      assertNotSame(byteArray6, byteArray2);
      assertNotSame(byteArray6, byteArray4);
      assertNotSame(byteArray6, byteArray3);
      assertNotSame(byteArray6, byteArray1);
      assertNotSame(byteArray6, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-2)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-2)}, byteArray6);
      assertNotNull(byteArray6);
      assertEquals(1, byteArray1.length);
      assertEquals(1, byteArray6.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      String string0 = base64_0.encodeToString(byteArray2);
      assertFalse(byteArray1.equals((Object)byteArray5));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray6));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray5));
      assertFalse(byteArray2.equals((Object)byteArray4));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray6));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray1, byteArray5);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray6);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray2, byteArray5);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray6);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-2)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)47, (byte)103, (byte)61, (byte)61}, byteArray2);
      assertNotNull(string0);
      assertEquals(1, byteArray1.length);
      assertEquals(4, byteArray2.length);
      assertEquals("L2c9PQ==", string0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      base64_0.encode(byteArray2, 0, 251);
      assertFalse(byteArray1.equals((Object)byteArray5));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray6));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray5));
      assertFalse(byteArray2.equals((Object)byteArray4));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray6));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray1, byteArray5);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray6);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray2, byteArray5);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray6);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-2)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)47, (byte)103, (byte)61, (byte)61}, byteArray2);
      assertEquals(1, byteArray1.length);
      assertEquals(4, byteArray2.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      Base64 base64_1 = new Base64();
      assertFalse(base64_1.equals((Object)base64_0));
      assertNotNull(base64_1);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_1.isUrlSafe());
      
      String string1 = base64_0.encodeToString(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray5));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray6));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(base64_0.equals((Object)base64_1));
      assertNotSame(byteArray1, byteArray5);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray6);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(base64_0, base64_1);
      assertArrayEquals(new byte[] {(byte) (-2)}, byteArray1);
      assertNotNull(string1);
      assertEquals(1, byteArray1.length);
      assertEquals("/g==", string1);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-83);
      Base64 base64_0 = new Base64(16, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(base64_0);
      assertEquals(4, byteArray0.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)32;
      byteArray1[1] = (byte)21;
      byteArray1[2] = (byte)10;
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)32, (byte)21, (byte)10, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(9, byteArray1.length);
      assertEquals(14, byteArray2.length);
      
      byteArray1[3] = (byte)21;
      Base64 base64_1 = new Base64(64, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(base64_1.equals((Object)base64_0));
      assertArrayEquals(new byte[] {(byte)32, (byte)21, (byte)10, (byte)21, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(base64_1);
      assertEquals(9, byteArray1.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_1.isUrlSafe());
      
      base64_1.encode(byteArray0, 64, (-330));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(base64_1.equals((Object)base64_0));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(base64_1, base64_0);
      assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)32, (byte)21, (byte)10, (byte)21, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_1.isUrlSafe());
      
      base64_1.encode(byteArray0, (-330), 1);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(base64_1.equals((Object)base64_0));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(base64_1, base64_0);
      assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)32, (byte)21, (byte)10, (byte)21, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_1.isUrlSafe());
      
      byte[] byteArray3 = base64_1.decode((String) null);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(base64_1.equals((Object)base64_0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(base64_1, base64_0);
      assertArrayEquals(new byte[] {(byte)32, (byte)21, (byte)10, (byte)21, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNull(byteArray3);
      assertEquals(9, byteArray1.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_1.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte) (-31);
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-31);
      byteArray1[1] = (byte) (-31);
      byteArray1[2] = (byte) (-18);
      byteArray1[3] = (byte) (-31);
      byteArray1[4] = (byte) (-31);
      byteArray1[5] = (byte) (-31);
      byteArray1[6] = (byte) (-31);
      Base64 base64_0 = new Base64(1, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-31), (byte) (-31), (byte) (-18), (byte) (-31), (byte) (-31), (byte) (-31), (byte) (-31)}, byteArray1);
      assertNotNull(base64_0);
      assertEquals(7, byteArray1.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray2 = new byte[8];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte) (-31);
      byteArray2[1] = (byte) (-31);
      byteArray2[2] = (byte) (-18);
      byteArray2[3] = (byte) (-31);
      byteArray2[4] = (byte) (-18);
      byteArray2[5] = (byte) (-21);
      byteArray2[6] = (byte) (-31);
      byteArray2[7] = (byte) (-18);
      base64_0.encode(byteArray2, 13, (-3365));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-31), (byte) (-31), (byte) (-18), (byte) (-31), (byte) (-31), (byte) (-31), (byte) (-31)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-31), (byte) (-31), (byte) (-18), (byte) (-31), (byte) (-18), (byte) (-21), (byte) (-31), (byte) (-18)}, byteArray2);
      assertEquals(7, byteArray1.length);
      assertEquals(8, byteArray2.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray1, (-9), 724);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)106;
      byte byte0 = (byte)0;
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      int int0 = bigInteger0.intValueExact();
      assertEquals(0, int0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      Base64 base64_0 = new Base64(true);
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertTrue(base64_0.isUrlSafe());
      
      int int1 = (-1);
      base64_0.encode(byteArray0, 0, (-1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)106, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertTrue(base64_0.isUrlSafe());
      
      boolean boolean0 = base64_0.hasData();
      assertTrue(boolean0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertTrue(base64_0.isUrlSafe());
      
      Base64 base64_1 = null;
      try {
        base64_1 = new Base64((-1), byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [j\u0000\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      boolean boolean0 = Base64.isBase64("org.apache.commons.codec.binary.Base64");
      assertFalse(boolean0);
      
      byte[] byteArray0 = null;
      byte[] byteArray1 = Base64.decodeBase64((byte[]) null);
      assertNull(byteArray1);
      
      int int0 = 1298;
      Base64 base64_0 = new Base64(1298);
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      base64_0.encode((byte[]) null, 1, (-1966));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      int int1 = 26;
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, 26, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)2;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte)123, (byte)4, (byte)1, (byte)2}, byteArray0);
      assertNotNull(bigInteger0);
      assertEquals(4, byteArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      long long0 = bigInteger0.longValueExact();
      assertArrayEquals(new byte[] {(byte)123, (byte)4, (byte)1, (byte)2}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(0L, long0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      Base64 base64_0 = new Base64((byte)1, byteArray0);
      assertArrayEquals(new byte[] {(byte)123, (byte)4, (byte)1, (byte)2}, byteArray0);
      assertNotNull(base64_0);
      assertEquals(4, byteArray0.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      String string0 = "VE{{f=Cs/+^\\/P?7";
      boolean boolean0 = false;
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, false, (-1525));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of -1525
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      boolean boolean0 = Base64.isBase64("org.apache.commons.codec.binary.Base64");
      assertFalse(boolean0);
      
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null);
      assertNull(byteArray0);
      
      Base64 base64_0 = new Base64(1298);
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      Object object0 = base64_0.decode((Object) "org.apache.commons.codec.binary.Base64");
      assertNotNull(object0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      String string0 = base64_0.encodeToString((byte[]) null);
      assertNull(string0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      Object object1 = base64_0.encode(object0);
      assertFalse(object1.equals((Object)object0));
      assertNotSame(object0, object1);
      assertNotSame(object1, object0);
      assertNotNull(object1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      base64_0.encode((byte[]) null, 1, (-1966));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      int int0 = base64_0.readResults((byte[]) null, 26, 0);
      assertEquals((-1), int0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray1 = Base64.encodeBase64Chunked((byte[]) null);
      assertNull(byteArray1);
      
      byte[] byteArray2 = Base64.encodeBase64URLSafe((byte[]) null);
      assertNull(byteArray2);
      
      byte[] byteArray3 = Base64.encodeBase64((byte[]) null, false, false, (-1966));
      assertNull(byteArray3);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      boolean boolean0 = Base64.isBase64("org.apache.commons.codec.binary.Base64");
      assertFalse(boolean0);
      
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null);
      assertNull(byteArray0);
      
      Base64 base64_0 = new Base64(1298);
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      base64_0.encode((byte[]) null, 1, (-1966));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray1 = base64_0.decode("Ic_Fs%fQr[Ho$)>Qv");
      assertArrayEquals(new byte[] {(byte)33, (byte) (-49), (byte) (-59), (byte) (-79), (byte) (-12), (byte)43, (byte)30, (byte) (-124), (byte)47}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(9, byteArray1.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(4, byteArray2.length);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      int int0 = base64_0.readResults((byte[]) null, 26, 0);
      assertEquals((-1), int0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      boolean boolean1 = Base64.isBase64((byte)125);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray3 = Base64.encodeBase64Chunked((byte[]) null);
      assertNull(byteArray3);
      
      byte[] byteArray4 = Base64.encodeBase64URLSafe((byte[]) null);
      assertNull(byteArray4);
      
      base64_0.decode((byte[]) null, 1298, 26);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-83);
      Base64 base64_0 = new Base64(16, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray1 = new byte[9];
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)32;
      byteArray1[1] = (byte)21;
      byteArray1[2] = (byte)10;
      byteArray1[3] = (byte)21;
      base64_0.decode(byteArray1, (int) (byte)10, (-859));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)32, (byte)21, (byte)10, (byte)21, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertEquals(9, byteArray1.length);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      Base64 base64_1 = new Base64();
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertNotNull(base64_1);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      
      int int0 = base64_1.readResults(byteArray0, (byte) (-83), 0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(base64_1, base64_0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertEquals(0, int0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      
      byte[] byteArray2 = new byte[2];
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = (byte)14;
      byteArray2[1] = (byte)10;
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)14, (byte)10}, byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)68, (byte)103, (byte)111, (byte)61, (byte) (-83), (byte)0}, byteArray3);
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertEquals(2, byteArray2.length);
      //  // Unstable assertion: assertEquals(6, byteArray3.length);
      
      byte[] byteArray4 = Base64.encodeBase64URLSafe(byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)114, (byte)81, (byte)65, (byte)65, (byte)65, (byte)65}, byteArray4);
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArray4.length);
      
      base64_1.decode(byteArray3, 0, 6);
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray4));
      //  // Unstable assertion: assertNotSame(base64_1, base64_0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray4);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)14, (byte)10}, byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)68, (byte)103, (byte)111, (byte)61, (byte) (-83), (byte)0}, byteArray3);
      //  // Unstable assertion: assertEquals(2, byteArray2.length);
      //  // Unstable assertion: assertEquals(6, byteArray3.length);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte) (-111);
      byteArray0[6] = (byte)47;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)21, (byte) (-118), (byte)73, (byte)62, (byte)16, (byte) (-111), (byte)47}, byteArray0);
      assertArrayEquals(new byte[] {(byte)21, (byte) (-118), (byte)73, (byte)62, (byte)16, (byte) (-111), (byte)47}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      
      Base64 base64_0 = new Base64((-1));
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray2 = new byte[8];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)16;
      byteArray2[1] = (byte)62;
      byteArray2[2] = (byte)32;
      byteArray2[3] = (byte) (-118);
      byteArray2[4] = (byte) (-111);
      byteArray2[5] = (byte)73;
      byteArray2[6] = (byte) (-28);
      byteArray2[7] = (byte)21;
      base64_0.encode(byteArray2, (int) (byte)16, (-4405));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)16, (byte)62, (byte)32, (byte) (-118), (byte) (-111), (byte)73, (byte) (-28), (byte)21}, byteArray2);
      assertEquals(8, byteArray2.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-83);
      Base64 base64_0 = new Base64();
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)32;
      byteArray1[1] = (byte)21;
      String string0 = base64_0.encodeToString(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-83), (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals(2, byteArray0.length);
      assertEquals("rQA=", string0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      boolean boolean0 = Base64.isBase64(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)32, (byte)21, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(9, byteArray1.length);
      assertFalse(boolean0);
      
      byte[] byteArray2 = base64_0.decode(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-83), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      Base64 base64_1 = new Base64();
      assertFalse(base64_1.equals((Object)base64_0));
      assertNotNull(base64_1);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_1.isUrlSafe());
      
      Object object0 = base64_0.decode((Object) "rQA=");
      assertFalse(base64_0.equals((Object)base64_1));
      assertNotSame(base64_0, base64_1);
      assertNotNull(object0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      Object object1 = base64_1.decode(object0);
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(base64_1.equals((Object)base64_0));
      assertFalse(object1.equals((Object)object0));
      assertNotSame(base64_0, base64_1);
      assertNotSame(base64_1, base64_0);
      assertNotSame(object0, object1);
      assertNotSame(object1, object0);
      assertNotNull(object1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      assertFalse(base64_1.isUrlSafe());
      
      String string1 = Base64.encodeBase64String(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)object1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)object0));
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)object1));
      assertFalse(byteArray2.equals((Object)object0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, object1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, object0);
      assertNotSame(base64_0, base64_1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, object1);
      assertNotSame(byteArray2, object0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-83), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotNull(string1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertEquals("", string1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false, false, (-2476));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)object1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)object0));
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)object1));
      assertFalse(byteArray2.equals((Object)object0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)object0));
      assertFalse(byteArray3.equals((Object)object1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, object1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, object0);
      assertNotSame(base64_0, base64_1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, object1);
      assertSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, object0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, object0);
      assertNotSame(byteArray3, object1);
      assertSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-83), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertNotNull(byteArray3);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray3.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)122);
      assertTrue(boolean0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger1, bigInteger0);
      assertNotNull(bigInteger1);
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      
      BigInteger bigInteger2 = bigInteger1.or(bigInteger0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertTrue(bigInteger2.equals((Object)bigInteger0));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotNull(bigInteger2);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((short)10, bigInteger2.shortValue());
      assertEquals((byte)10, bigInteger2.byteValue());
      
      BigInteger bigInteger3 = bigInteger1.and(bigInteger2);
      assertTrue(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertTrue(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertTrue(bigInteger3.equals((Object)bigInteger1));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger3);
      assertNotSame(bigInteger3, bigInteger0);
      assertNotSame(bigInteger3, bigInteger1);
      assertNotSame(bigInteger3, bigInteger2);
      assertNotNull(bigInteger3);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((short)10, bigInteger2.shortValue());
      assertEquals((byte)10, bigInteger2.byteValue());
      assertEquals((short)0, bigInteger3.shortValue());
      assertEquals((byte)0, bigInteger3.byteValue());
      
      BigInteger bigInteger4 = bigInteger1.add(bigInteger0);
      assertTrue(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertTrue(bigInteger1.equals((Object)bigInteger3));
      assertTrue(bigInteger4.equals((Object)bigInteger2));
      assertFalse(bigInteger4.equals((Object)bigInteger1));
      assertFalse(bigInteger4.equals((Object)bigInteger3));
      assertNotSame(bigInteger0, bigInteger1);
      assertSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger4);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger4, bigInteger1);
      assertNotSame(bigInteger4, bigInteger2);
      assertNotSame(bigInteger4, bigInteger3);
      assertSame(bigInteger4, bigInteger0);
      assertNotNull(bigInteger4);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)10, bigInteger4.byteValue());
      assertEquals((short)10, bigInteger4.shortValue());
      
      BigInteger bigInteger5 = bigInteger0.or(bigInteger1);
      assertTrue(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertTrue(bigInteger1.equals((Object)bigInteger3));
      assertFalse(bigInteger1.equals((Object)bigInteger4));
      assertTrue(bigInteger5.equals((Object)bigInteger2));
      assertTrue(bigInteger5.equals((Object)bigInteger4));
      assertFalse(bigInteger5.equals((Object)bigInteger3));
      assertTrue(bigInteger5.equals((Object)bigInteger0));
      assertFalse(bigInteger5.equals((Object)bigInteger1));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger5);
      assertSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger1, bigInteger5);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger4);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger5, bigInteger0);
      assertNotSame(bigInteger5, bigInteger4);
      assertNotSame(bigInteger5, bigInteger3);
      assertNotSame(bigInteger5, bigInteger2);
      assertNotSame(bigInteger5, bigInteger1);
      assertNotNull(bigInteger5);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)10, bigInteger5.byteValue());
      assertEquals((short)10, bigInteger5.shortValue());
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertTrue(bigInteger0.equals((Object)bigInteger5));
      assertTrue(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger5);
      assertSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger3);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      Base64 base64_0 = new Base64(true);
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertTrue(base64_0.isUrlSafe());
      
      boolean boolean1 = base64_0.hasData();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertTrue(base64_0.isUrlSafe());
      
      byte[] byteArray1 = base64_0.decode("JI.]");
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)36}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray1.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertTrue(base64_0.isUrlSafe());
      
      boolean boolean2 = Base64.isBase64(byteArray0);
      assertTrue(bigInteger0.equals((Object)bigInteger5));
      assertTrue(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger5);
      assertSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertTrue(boolean2);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      byte[] byteArray2 = new byte[9];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)122;
      byteArray2[1] = (byte)122;
      byteArray2[2] = (byte)122;
      byteArray2[3] = (byte)122;
      byteArray2[4] = (byte)122;
      byteArray2[5] = (byte)19;
      byteArray2[6] = (byte)122;
      byteArray2[7] = (byte)122;
      byteArray2[8] = (byte)122;
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)122, (byte)122, (byte)122, (byte)122, (byte)122, (byte)19, (byte)122, (byte)122, (byte)122}, byteArray3);
      assertArrayEquals(new byte[] {(byte)122, (byte)122, (byte)122, (byte)122, (byte)122, (byte)19, (byte)122, (byte)122, (byte)122}, byteArray2);
      assertNotNull(byteArray3);
      assertEquals(9, byteArray3.length);
      assertEquals(9, byteArray2.length);
      
      byte[] byteArray4 = Base64.toIntegerBytes(bigInteger0);
      assertTrue(bigInteger0.equals((Object)bigInteger5));
      assertTrue(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger5);
      assertSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray2);
      assertArrayEquals(new byte[] {(byte)10}, byteArray4);
      assertNotNull(byteArray4);
      assertEquals(1, byteArray4.length);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      byte[] byteArray5 = base64_0.decode("JI.]");
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray0));
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertNotSame(byteArray5, byteArray2);
      assertNotSame(byteArray5, byteArray4);
      assertNotSame(byteArray5, byteArray0);
      assertNotSame(byteArray5, byteArray3);
      assertNotSame(byteArray5, byteArray1);
      assertArrayEquals(new byte[] {(byte)36}, byteArray5);
      assertNotNull(byteArray5);
      assertEquals(1, byteArray5.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertTrue(base64_0.isUrlSafe());
      
      boolean boolean3 = base64_0.isUrlSafe();
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte)40;
      byteArray0[6] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-63), (byte) (-35), (byte)40, (byte)0, (byte)0, (byte) (-1)}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(12, byteArray1.length);
      
      Base64 base64_0 = new Base64();
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-63), (byte) (-35), (byte)40, (byte)0, (byte)0, (byte) (-1)}, byteArray0);
      assertNotNull(byteArray2);
      assertEquals(7, byteArray0.length);
      assertEquals(12, byteArray2.length);
      
      base64_0.decode(byteArray1, (int) (byte)0, (-1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-63), (byte) (-35), (byte)40, (byte)0, (byte)0, (byte) (-1)}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(12, byteArray1.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-63), (byte) (-35), (byte)40, (byte)0, (byte)0, (byte) (-1)}, byteArray0);
      assertNotNull(bigInteger0);
      assertEquals(7, byteArray0.length);
      assertEquals(12, byteArray1.length);
      assertEquals((short)255, bigInteger0.shortValue());
      assertEquals((byte) (-1), bigInteger0.byteValue());
      
      byte[] byteArray3 = Base64.decodeBase64("By0*t");
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertArrayEquals(new byte[] {(byte)7, (byte)45, (byte)45}, byteArray3);
      assertNotNull(byteArray3);
      assertEquals(3, byteArray3.length);
      
      byte[] byteArray4 = Base64.encodeInteger(bigInteger0);
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-63), (byte) (-35), (byte)40, (byte)0, (byte)0, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)119, (byte)100, (byte)48, (byte)111, (byte)65, (byte)65, (byte)68, (byte)47}, byteArray4);
      assertNotNull(byteArray4);
      assertEquals(7, byteArray0.length);
      assertEquals(12, byteArray1.length);
      assertEquals(8, byteArray4.length);
      assertEquals((short)255, bigInteger0.shortValue());
      assertEquals((byte) (-1), bigInteger0.byteValue());
      
      byte[] byteArray5 = Base64.encodeInteger(bigInteger0);
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertFalse(byteArray5.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray5);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray5, byteArray3);
      assertNotSame(byteArray5, byteArray2);
      assertNotSame(byteArray5, byteArray4);
      assertNotSame(byteArray5, byteArray1);
      assertNotSame(byteArray5, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-63), (byte) (-35), (byte)40, (byte)0, (byte)0, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)119, (byte)100, (byte)48, (byte)111, (byte)65, (byte)65, (byte)68, (byte)47}, byteArray5);
      assertNotNull(byteArray5);
      assertEquals(7, byteArray0.length);
      assertEquals(12, byteArray1.length);
      assertEquals(8, byteArray5.length);
      assertEquals((short)255, bigInteger0.shortValue());
      assertEquals((byte) (-1), bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-83);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      Base64 base64_0 = new Base64(false);
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      base64_0.decode(byteArray0, (int) (byte)56, (int) (byte) (-1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals(4, byteArray0.length);
      assertEquals("rQAAAA", string0);
      
      base64_0.encode((byte[]) null, (-3557), (-852));
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray2 = new byte[6];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)56;
      byteArray2[2] = (byte) (-1);
      byteArray2[3] = (byte)56;
      byteArray2[4] = (byte)76;
      byteArray2[5] = (byte)76;
      int int0 = base64_0.readResults(byteArray2, (byte)0, (-2428));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)56, (byte) (-1), (byte)56, (byte)76, (byte)76}, byteArray2);
      assertEquals(6, byteArray2.length);
      assertEquals((-1), int0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      int int1 = base64_0.readResults(byteArray2, (-2428), 7);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertTrue(int1 == int0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)56, (byte) (-1), (byte)56, (byte)76, (byte)76}, byteArray2);
      assertEquals(6, byteArray2.length);
      assertEquals((-1), int1);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-83);
      Base64 base64_0 = new Base64(16, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)114, (byte)81, (byte)65, (byte)65, (byte)65, (byte)65, (byte) (-83), (byte)0}, byteArray1);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertEquals(8, byteArray1.length);
      
      String string0 = Base64.encodeBase64String(byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertEquals("rQAAAA==", string0);
      
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)114, (byte)81, (byte)65, (byte)65, (byte)65, (byte)65, (byte) (-83), (byte)0}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)114, (byte)81, (byte)65, (byte)65, (byte)65, (byte)65, (byte) (-83), (byte)0}, byteArray2);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertEquals(8, byteArray1.length);
      //  // Unstable assertion: assertEquals(8, byteArray2.length);
      
      byte[] byteArray3 = Base64.decodeBase64((String) null);
      //  // Unstable assertion: assertNull(byteArray3);
      
      Base64 base64_1 = new Base64((byte) (-83), (byte[]) null);
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertNotNull(base64_1);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray2, false);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)114, (byte)81, (byte)65, (byte)65, (byte)65, (byte)65, (byte) (-83), (byte)0}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)114, (byte)81, (byte)65, (byte)65, (byte)65, (byte)65, (byte) (-83), (byte)0}, byteArray2);
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertEquals(8, byteArray1.length);
      //  // Unstable assertion: assertEquals(8, byteArray2.length);
      //  // Unstable assertion: assertEquals(12, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte byte0 = (byte)109;
      boolean boolean0 = Base64.isBase64((byte)109);
      assertTrue(boolean0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger1, bigInteger0);
      assertNotNull(bigInteger1);
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      
      BigInteger bigInteger2 = bigInteger1.or(bigInteger0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertTrue(bigInteger2.equals((Object)bigInteger0));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotNull(bigInteger2);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)10, bigInteger2.shortValue());
      assertEquals((byte)10, bigInteger2.byteValue());
      
      BigInteger bigInteger3 = bigInteger1.and(bigInteger2);
      assertTrue(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertTrue(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertTrue(bigInteger3.equals((Object)bigInteger1));
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger2, bigInteger3);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger3, bigInteger0);
      assertNotSame(bigInteger3, bigInteger2);
      assertNotSame(bigInteger3, bigInteger1);
      assertNotNull(bigInteger3);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)10, bigInteger2.shortValue());
      assertEquals((byte)10, bigInteger2.byteValue());
      assertEquals((byte)0, bigInteger3.byteValue());
      assertEquals((short)0, bigInteger3.shortValue());
      
      BigInteger bigInteger4 = bigInteger1.add(bigInteger0);
      assertTrue(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertTrue(bigInteger1.equals((Object)bigInteger3));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger4.equals((Object)bigInteger3));
      assertFalse(bigInteger4.equals((Object)bigInteger1));
      assertTrue(bigInteger4.equals((Object)bigInteger2));
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger4);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger4, bigInteger3);
      assertNotSame(bigInteger4, bigInteger2);
      assertSame(bigInteger4, bigInteger0);
      assertNotSame(bigInteger4, bigInteger1);
      assertNotNull(bigInteger4);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((byte)10, bigInteger4.byteValue());
      assertEquals((short)10, bigInteger4.shortValue());
      
      // Undeclared exception!
      try { 
        bigInteger1.testBit((-885));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Negative bit address
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)109;
      byte byte0 = (byte)23;
      byteArray0[1] = (byte)23;
      byte byte1 = (byte)76;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)32;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)109, (byte)23, (byte)76, (byte)32}, byteArray0);
      assertArrayEquals(new byte[] {(byte)109, (byte)23, (byte)76}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      byte[] byteArray2 = null;
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      Base64 base64_1 = new Base64((-1420), (byte[]) null);
      assertFalse(base64_1.equals((Object)base64_0));
      assertNotNull(base64_1);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_1.isUrlSafe());
      
      base64_1.encode((byte[]) null, 33, (int) (byte)0);
      assertFalse(base64_1.equals((Object)base64_0));
      assertNotSame(base64_1, base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_1.isUrlSafe());
      
      byte[] byteArray0 = base64_0.decode((byte[]) null);
      assertFalse(base64_0.equals((Object)base64_1));
      assertNotSame(base64_0, base64_1);
      assertNull(byteArray0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(false);
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray1 = Base64.encodeBase64((byte[]) null, true, false, 3376);
      assertNull(byteArray1);
      
      byte[] byteArray2 = Base64.encodeBase64((byte[]) null, false, true, 64);
      assertNull(byteArray2);
      
      byte[] byteArray3 = base64_0.encode((byte[]) null);
      assertNull(byteArray3);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray4 = Base64.encodeBase64Chunked((byte[]) null);
      assertNull(byteArray4);
      
      String string0 = base64_0.encodeToString((byte[]) null);
      assertNull(string0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray5 = base64_0.decode("org.apache.commons.codec.DecoderException");
      assertFalse(byteArray5.equals((Object)byteArray0));
      assertNotSame(byteArray5, byteArray0);
      assertNotNull(byteArray5);
      assertEquals(27, byteArray5.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      int int0 = base64_0.readResults((byte[]) null, 1908874353, 1717986918);
      assertEquals((-1), int0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      base64_0.encode((byte[]) null, 3376, 98);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray6 = Base64.encodeBase64(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray6.equals((Object)byteArray5));
      assertSame(byteArray0, byteArray6);
      assertNotSame(byteArray0, byteArray5);
      assertSame(byteArray6, byteArray0);
      assertNotSame(byteArray6, byteArray5);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray6);
      assertNotNull(byteArray6);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray6.length);
      
      byte[] byteArray7 = new byte[1];
      assertFalse(byteArray7.equals((Object)byteArray0));
      assertFalse(byteArray7.equals((Object)byteArray6));
      assertFalse(byteArray7.equals((Object)byteArray5));
      
      byteArray7[0] = (byte) (-70);
      byte[] byteArray8 = base64_0.decode(byteArray7);
      assertFalse(byteArray7.equals((Object)byteArray0));
      assertFalse(byteArray7.equals((Object)byteArray6));
      assertFalse(byteArray7.equals((Object)byteArray5));
      assertFalse(byteArray8.equals((Object)byteArray6));
      assertFalse(byteArray8.equals((Object)byteArray7));
      assertFalse(byteArray8.equals((Object)byteArray0));
      assertFalse(byteArray8.equals((Object)byteArray5));
      assertNotSame(byteArray7, byteArray8);
      assertNotSame(byteArray7, byteArray0);
      assertNotSame(byteArray7, byteArray6);
      assertNotSame(byteArray7, byteArray5);
      assertNotSame(byteArray8, byteArray6);
      assertNotSame(byteArray8, byteArray7);
      assertNotSame(byteArray8, byteArray0);
      assertNotSame(byteArray8, byteArray5);
      assertArrayEquals(new byte[] {(byte) (-70)}, byteArray7);
      assertArrayEquals(new byte[] {}, byteArray8);
      assertNotNull(byteArray8);
      assertEquals(1, byteArray7.length);
      assertEquals(0, byteArray8.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray9 = base64_0.decode(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray0.equals((Object)byteArray7));
      assertFalse(byteArray0.equals((Object)byteArray8));
      assertFalse(byteArray9.equals((Object)byteArray7));
      assertFalse(byteArray9.equals((Object)byteArray8));
      assertFalse(byteArray9.equals((Object)byteArray5));
      assertSame(byteArray0, byteArray6);
      assertNotSame(byteArray0, byteArray5);
      assertSame(byteArray0, byteArray9);
      assertNotSame(byteArray0, byteArray7);
      assertNotSame(byteArray0, byteArray8);
      assertSame(byteArray9, byteArray6);
      assertNotSame(byteArray9, byteArray7);
      assertNotSame(byteArray9, byteArray8);
      assertSame(byteArray9, byteArray0);
      assertNotSame(byteArray9, byteArray5);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray9);
      assertNotNull(byteArray9);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray9.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray10 = Base64.encodeBase64((byte[]) null, false);
      assertNull(byteArray10);
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray0.equals((Object)byteArray7));
      assertFalse(byteArray0.equals((Object)byteArray8));
      assertSame(byteArray0, byteArray6);
      assertNotSame(byteArray0, byteArray5);
      assertSame(byteArray0, byteArray9);
      assertNotSame(byteArray0, byteArray7);
      assertNotSame(byteArray0, byteArray8);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(bigInteger0);
      assertEquals(0, byteArray0.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      byte[] byteArray11 = base64_0.decode("org.apache.commons.codec.EncoderException");
      assertFalse(byteArray11.equals((Object)byteArray8));
      assertFalse(byteArray11.equals((Object)byteArray9));
      assertFalse(byteArray11.equals((Object)byteArray0));
      assertFalse(byteArray11.equals((Object)byteArray7));
      assertFalse(byteArray11.equals((Object)byteArray5));
      assertFalse(byteArray11.equals((Object)byteArray6));
      assertNotSame(byteArray11, byteArray8);
      assertNotSame(byteArray11, byteArray9);
      assertNotSame(byteArray11, byteArray0);
      assertNotSame(byteArray11, byteArray7);
      assertNotSame(byteArray11, byteArray5);
      assertNotSame(byteArray11, byteArray6);
      assertNotNull(byteArray11);
      assertEquals(27, byteArray11.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray12 = Base64.encodeBase64((byte[]) null, true, true);
      assertNull(byteArray12);
      
      byte[] byteArray13 = base64_0.encode(byteArray9);
      assertFalse(byteArray0.equals((Object)byteArray11));
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray0.equals((Object)byteArray7));
      assertFalse(byteArray0.equals((Object)byteArray8));
      assertFalse(byteArray13.equals((Object)byteArray7));
      assertFalse(byteArray13.equals((Object)byteArray11));
      assertFalse(byteArray13.equals((Object)byteArray5));
      assertFalse(byteArray13.equals((Object)byteArray8));
      assertFalse(byteArray9.equals((Object)byteArray7));
      assertFalse(byteArray9.equals((Object)byteArray11));
      assertFalse(byteArray9.equals((Object)byteArray8));
      assertFalse(byteArray9.equals((Object)byteArray5));
      assertNotSame(byteArray0, byteArray11);
      assertSame(byteArray0, byteArray6);
      assertNotSame(byteArray0, byteArray5);
      assertSame(byteArray0, byteArray9);
      assertNotSame(byteArray0, byteArray7);
      assertNotSame(byteArray0, byteArray8);
      assertSame(byteArray0, byteArray13);
      assertNotSame(byteArray13, byteArray7);
      assertNotSame(byteArray13, byteArray11);
      assertSame(byteArray13, byteArray6);
      assertSame(byteArray13, byteArray0);
      assertNotSame(byteArray13, byteArray5);
      assertSame(byteArray13, byteArray9);
      assertNotSame(byteArray13, byteArray8);
      assertSame(byteArray9, byteArray13);
      assertSame(byteArray9, byteArray6);
      assertNotSame(byteArray9, byteArray7);
      assertNotSame(byteArray9, byteArray11);
      assertNotSame(byteArray9, byteArray8);
      assertSame(byteArray9, byteArray0);
      assertNotSame(byteArray9, byteArray5);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray13);
      assertArrayEquals(new byte[] {}, byteArray9);
      assertNotNull(byteArray13);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray13.length);
      assertEquals(0, byteArray9.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray14 = Base64.encodeBase64URLSafe((byte[]) null);
      assertNull(byteArray14);
      
      byte[] byteArray15 = Base64.encodeBase64((byte[]) null, false, true);
      assertNull(byteArray15);
      
      boolean boolean0 = Base64.isBase64((byte) (-70));
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      boolean boolean0 = Base64.isBase64("-?707K<=");
      //  // Unstable assertion: assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-1);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-1), (byte)0, (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertEquals(7, byteArray0.length);
      //  // Unstable assertion: assertEquals(14, byteArray1.length);
      
      Base64 base64_0 = new Base64(false);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      String string0 = base64_0.encodeToString(byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-1), (byte)0, (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals(7, byteArray0.length);
      //  // Unstable assertion: assertEquals("AAD/AP///w==\uFFFD\u0000", string0);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      boolean boolean1 = Base64.isBase64(byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-1), (byte)0, (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
      //  // Unstable assertion: assertEquals(7, byteArray0.length);
      //  // Unstable assertion: assertEquals(14, byteArray1.length);
      //  // Unstable assertion: assertFalse(boolean1);
      
      Base64 base64_1 = new Base64(0);
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertNotNull(base64_1);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      
      byte[] byteArray2 = base64_1.decode(byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(base64_1, base64_0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-1), (byte)0, (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray2);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertEquals(7, byteArray0.length);
      //  // Unstable assertion: assertEquals(0, byteArray2.length);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      
      Object object0 = new Object();
      //  // Unstable assertion: assertNotNull(object0);
      
      String string1 = Base64.encodeBase64String(byteArray1);
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-1), (byte)0, (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertEquals(7, byteArray0.length);
      //  // Unstable assertion: assertEquals(14, byteArray1.length);
      //  // Unstable assertion: assertEquals("QUFEL0FQLy8vdz09rQA=", string1);
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, true, (int) (byte) (-1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(base64_1, base64_0);
      //  // Unstable assertion: assertSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-1), (byte)0, (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray2);
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertEquals(0, byteArray3.length);
      //  // Unstable assertion: assertEquals(7, byteArray0.length);
      //  // Unstable assertion: assertEquals(0, byteArray2.length);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      
      base64_0.decode(byteArray1, (int) (byte)0, (int) (byte)0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(base64_0.equals((Object)base64_1));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(base64_0, base64_1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-1), (byte)0, (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
      //  // Unstable assertion: assertEquals(7, byteArray0.length);
      //  // Unstable assertion: assertEquals(14, byteArray1.length);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-41);
      byteArray0[0] = (byte) (-41);
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-41)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = Base64.isBase64("MEn$>!C9,()Ku");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-41)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-41)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-41)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-41)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)49, (byte)119, (byte)61, (byte)61}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(4, byteArray2.length);
      
      int int0 = (-21);
      Base64 base64_0 = new Base64((-21));
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      int int1 = bigInteger0.intValueExact();
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertNotNull(byteArray3);
      assertEquals(0, byteArray3.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray3, false);
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertSame(byteArray3, byteArray4);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray0);
      assertSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray2);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertArrayEquals(new byte[] {}, byteArray4);
      assertNotNull(byteArray4);
      assertEquals(0, byteArray3.length);
      assertEquals(0, byteArray4.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray2, 0, 1996);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      boolean boolean0 = Base64.isBase64("org.apache.commons.codec.binary.Base64");
      assertFalse(boolean0);
      
      byte[] byteArray0 = null;
      byte[] byteArray1 = Base64.encodeBase64((byte[]) null);
      assertNull(byteArray1);
      
      int int0 = 1298;
      Base64 base64_0 = new Base64(1298);
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      base64_0.encode((byte[]) null, 1, (-1966));
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      int int1 = 26;
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, 26, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64 base64_0 = new Base64((byte)0, byteArray0, false);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotNull(base64_0);
      assertEquals(2, byteArray0.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 28);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)61}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)61}, byteArray1);
      assertArrayEquals(new byte[] {(byte)81, (byte)85, (byte)70, (byte)66, (byte)80, (byte)81}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertEquals(6, byteArray2.length);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertNotNull(byteArray3);
      assertEquals(0, byteArray3.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray0, false, false, 76);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)61}, byteArray4);
      assertNotNull(byteArray4);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray4.length);
      
      BigInteger bigInteger1 = bigInteger0.flipBit(718);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotNull(bigInteger1);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      
      String string0 = base64_0.encodeToString(byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)61}, byteArray1);
      assertNotNull(string0);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertEquals("QUFBPQ==", string0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      boolean boolean0 = base64_0.isUrlSafe();
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      BigInteger bigInteger2 = BigInteger.ONE;
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotNull(bigInteger2);
      assertEquals((byte)1, bigInteger2.byteValue());
      assertEquals((short)1, bigInteger2.shortValue());
      
      BigInteger bigInteger3 = bigInteger0.min(bigInteger2);
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger3);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger3, bigInteger1);
      assertNotSame(bigInteger3, bigInteger2);
      assertSame(bigInteger3, bigInteger0);
      assertNotNull(bigInteger3);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)1, bigInteger2.byteValue());
      assertEquals((short)1, bigInteger2.shortValue());
      assertEquals((short)0, bigInteger3.shortValue());
      assertEquals((byte)0, bigInteger3.byteValue());
      
      byte[] byteArray5 = Base64.toIntegerBytes(bigInteger0);
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray0));
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray5, byteArray3);
      assertNotSame(byteArray5, byteArray0);
      assertNotSame(byteArray5, byteArray1);
      assertNotSame(byteArray5, byteArray4);
      assertNotSame(byteArray5, byteArray2);
      assertArrayEquals(new byte[] {}, byteArray5);
      assertNotNull(byteArray5);
      assertEquals(0, byteArray5.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      byte[] byteArray6 = base64_0.decode(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray5));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray5));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray4));
      assertFalse(byteArray6.equals((Object)byteArray3));
      assertFalse(byteArray6.equals((Object)byteArray5));
      assertFalse(byteArray6.equals((Object)byteArray2));
      assertFalse(byteArray6.equals((Object)byteArray1));
      assertFalse(byteArray6.equals((Object)byteArray4));
      assertFalse(byteArray6.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray6);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray5);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray6);
      assertNotSame(byteArray2, byteArray5);
      assertNotSame(byteArray2, byteArray6);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray6, byteArray3);
      assertNotSame(byteArray6, byteArray5);
      assertNotSame(byteArray6, byteArray2);
      assertNotSame(byteArray6, byteArray1);
      assertNotSame(byteArray6, byteArray4);
      assertNotSame(byteArray6, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)61}, byteArray1);
      assertArrayEquals(new byte[] {(byte)81, (byte)85, (byte)70, (byte)66, (byte)80, (byte)81}, byteArray2);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)61}, byteArray6);
      assertNotNull(byteArray6);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertEquals(6, byteArray2.length);
      assertEquals(4, byteArray6.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      boolean boolean1 = base64_0.hasData();
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray6));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray6);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      String string1 = Base64.encodeBase64String((byte[]) null);
      assertNull(string1);
      
      byte[] byteArray7 = Base64.encodeBase64(byteArray4);
      assertFalse(byteArray7.equals((Object)byteArray4));
      assertFalse(byteArray7.equals((Object)byteArray0));
      assertFalse(byteArray7.equals((Object)byteArray1));
      assertFalse(byteArray7.equals((Object)byteArray3));
      assertFalse(byteArray7.equals((Object)byteArray5));
      assertFalse(byteArray7.equals((Object)byteArray2));
      assertFalse(byteArray7.equals((Object)byteArray6));
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray6));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray5));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray6));
      assertNotSame(byteArray7, byteArray4);
      assertNotSame(byteArray7, byteArray0);
      assertNotSame(byteArray7, byteArray1);
      assertNotSame(byteArray7, byteArray3);
      assertNotSame(byteArray7, byteArray5);
      assertNotSame(byteArray7, byteArray2);
      assertNotSame(byteArray7, byteArray6);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray6);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray7);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray7);
      assertNotSame(byteArray4, byteArray5);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray6);
      assertArrayEquals(new byte[] {(byte)81, (byte)85, (byte)70, (byte)66, (byte)80, (byte)81, (byte)61, (byte)61}, byteArray7);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)61}, byteArray4);
      assertNotNull(byteArray7);
      assertEquals(8, byteArray7.length);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray4.length);
      
      boolean boolean2 = Base64.isBase64(byteArray3);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray3.equals((Object)byteArray6));
      assertFalse(byteArray3.equals((Object)byteArray5));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray4));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray7));
      assertSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray3, byteArray6);
      assertNotSame(byteArray3, byteArray5);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray7);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertEquals(0, byteArray3.length);
      assertTrue(boolean2);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      String string2 = Base64.encodeBase64URLSafeString(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray6));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray7));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(byteArray1.equals((Object)byteArray7));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray5));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray6));
      assertFalse(byteArray2.equals((Object)byteArray5));
      assertFalse(byteArray2.equals((Object)byteArray6));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray7));
      assertFalse(byteArray2.equals((Object)byteArray4));
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray6);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray7);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray7);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray5);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray6);
      assertNotSame(byteArray2, byteArray5);
      assertNotSame(byteArray2, byteArray6);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray7);
      assertNotSame(byteArray2, byteArray4);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)61}, byteArray1);
      assertArrayEquals(new byte[] {(byte)81, (byte)85, (byte)70, (byte)66, (byte)80, (byte)81}, byteArray2);
      assertNotNull(string2);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertEquals(6, byteArray2.length);
      assertEquals("UVVGQlBR", string2);
      
      String string3 = Base64.encodeBase64URLSafeString(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray6));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray7));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray7));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray5));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray6));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(byteArray2.equals((Object)byteArray5));
      assertFalse(byteArray2.equals((Object)byteArray6));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray7));
      assertFalse(byteArray2.equals((Object)byteArray4));
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray6);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray7);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray7);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray5);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray6);
      assertNotSame(byteArray2, byteArray5);
      assertNotSame(byteArray2, byteArray6);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray7);
      assertNotSame(byteArray2, byteArray4);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)61}, byteArray1);
      assertArrayEquals(new byte[] {(byte)81, (byte)85, (byte)70, (byte)66, (byte)80, (byte)81}, byteArray2);
      assertNotNull(string3);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertEquals(6, byteArray2.length);
      assertEquals("UVVGQlBR", string3);
      
      byte[] byteArray8 = Base64.toIntegerBytes(bigInteger0);
      assertFalse(byteArray8.equals((Object)byteArray7));
      assertFalse(byteArray8.equals((Object)byteArray4));
      assertFalse(byteArray8.equals((Object)byteArray3));
      assertFalse(byteArray8.equals((Object)byteArray6));
      assertFalse(byteArray8.equals((Object)byteArray2));
      assertFalse(byteArray8.equals((Object)byteArray0));
      assertFalse(byteArray8.equals((Object)byteArray1));
      assertFalse(byteArray8.equals((Object)byteArray5));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertNotSame(byteArray8, byteArray7);
      assertNotSame(byteArray8, byteArray4);
      assertNotSame(byteArray8, byteArray3);
      assertNotSame(byteArray8, byteArray6);
      assertNotSame(byteArray8, byteArray2);
      assertNotSame(byteArray8, byteArray0);
      assertNotSame(byteArray8, byteArray1);
      assertNotSame(byteArray8, byteArray5);
      assertSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertArrayEquals(new byte[] {}, byteArray8);
      assertNotNull(byteArray8);
      assertEquals(0, byteArray8.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      byte[] byteArray9 = base64_0.decode(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray8));
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray6));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray7));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray7));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray5));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(byteArray1.equals((Object)byteArray8));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray6));
      assertFalse(byteArray2.equals((Object)byteArray5));
      assertFalse(byteArray2.equals((Object)byteArray6));
      assertFalse(byteArray2.equals((Object)byteArray8));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray7));
      assertFalse(byteArray2.equals((Object)byteArray4));
      assertFalse(byteArray9.equals((Object)byteArray2));
      assertFalse(byteArray9.equals((Object)byteArray6));
      assertFalse(byteArray9.equals((Object)byteArray5));
      assertFalse(byteArray9.equals((Object)byteArray4));
      assertFalse(byteArray9.equals((Object)byteArray8));
      assertFalse(byteArray9.equals((Object)byteArray1));
      assertFalse(byteArray9.equals((Object)byteArray7));
      assertFalse(byteArray9.equals((Object)byteArray0));
      assertFalse(byteArray9.equals((Object)byteArray3));
      assertNotSame(byteArray0, byteArray8);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray6);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray9);
      assertNotSame(byteArray0, byteArray7);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray7);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray5);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray8);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray9);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray6);
      assertNotSame(byteArray2, byteArray5);
      assertNotSame(byteArray2, byteArray9);
      assertNotSame(byteArray2, byteArray6);
      assertNotSame(byteArray2, byteArray8);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray7);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray9, byteArray2);
      assertNotSame(byteArray9, byteArray6);
      assertNotSame(byteArray9, byteArray5);
      assertNotSame(byteArray9, byteArray4);
      assertNotSame(byteArray9, byteArray8);
      assertNotSame(byteArray9, byteArray1);
      assertNotSame(byteArray9, byteArray7);
      assertNotSame(byteArray9, byteArray0);
      assertNotSame(byteArray9, byteArray3);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)61}, byteArray1);
      assertArrayEquals(new byte[] {(byte)81, (byte)85, (byte)70, (byte)66, (byte)80, (byte)81}, byteArray2);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)61}, byteArray9);
      assertNotNull(byteArray9);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertEquals(6, byteArray2.length);
      assertEquals(4, byteArray9.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-19);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte) (-19)}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)79, (byte)48, (byte)61, (byte) (-83), (byte)0}, byteArray1);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArray1.length);
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte) (-19)}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)79, (byte)48, (byte)61, (byte) (-83), (byte)0}, byteArray1);
      //  // Unstable assertion: assertNotNull(bigInteger0);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArray1.length);
      //  // Unstable assertion: assertEquals((byte) (-19), bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)237, bigInteger0.shortValue());
      
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte) (-19)}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)79, (byte)48}, byteArray2);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals(3, byteArray2.length);
      
      byte[] byteArray3 = Base64.decodeBase64("");
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray3);
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertEquals(0, byteArray3.length);
      
      byte[] byteArray4 = new byte[0];
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      
      byte[] byteArray5 = Base64.encodeBase64URLSafe(byteArray4);
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertSame(byteArray4, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray3);
      //  // Unstable assertion: assertSame(byteArray5, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray4);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray5);
      //  // Unstable assertion: assertNotNull(byteArray5);
      //  // Unstable assertion: assertEquals(0, byteArray4.length);
      //  // Unstable assertion: assertEquals(0, byteArray5.length);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-83);
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)21;
      byteArray1[2] = (byte)76;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)56;
      byteArray1[5] = (byte) (-83);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)21, (byte)76, (byte)0, (byte)56, (byte) (-83)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)21, (byte)76, (byte)0, (byte)56, (byte) (-83)}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray2.length);
      
      Base64 base64_0 = new Base64(false);
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      base64_0.decode(byteArray2, (-1204), (int) (byte)0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)21, (byte)76, (byte)0, (byte)56, (byte) (-83)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)21, (byte)76, (byte)0, (byte)56, (byte) (-83)}, byteArray2);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray2.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)21, (byte)76, (byte)0, (byte)56, (byte) (-83)}, byteArray1);
      assertNotNull(string0);
      assertEquals(6, byteArray1.length);
      assertEquals("_xVMADit", string0);
      
      base64_0.encode(byteArray0, (-953), (int) (byte)0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      int int0 = base64_0.readResults(byteArray2, (byte) (-83), (byte) (-83));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)21, (byte)76, (byte)0, (byte)56, (byte) (-83)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)21, (byte)76, (byte)0, (byte)56, (byte) (-83)}, byteArray2);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray2.length);
      assertEquals(0, int0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      int int1 = base64_0.readResults(byteArray1, (byte)0, (-575));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertTrue(int1 == int0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)21, (byte)76, (byte)0, (byte)56, (byte) (-83)}, byteArray1);
      assertEquals(6, byteArray1.length);
      assertEquals(0, int1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      boolean boolean0 = Base64.isBase64(byteArray2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)21, (byte)76, (byte)0, (byte)56, (byte) (-83)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)21, (byte)76, (byte)0, (byte)56, (byte) (-83)}, byteArray2);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray2.length);
      assertFalse(boolean0);
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false, false);
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)47, (byte)120, (byte)86, (byte)77, (byte)65, (byte)68, (byte)105, (byte)116}, byteArray3);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)21, (byte)76, (byte)0, (byte)56, (byte) (-83)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)21, (byte)76, (byte)0, (byte)56, (byte) (-83)}, byteArray2);
      assertNotNull(byteArray3);
      assertEquals(8, byteArray3.length);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray2.length);
      
      boolean boolean1 = Base64.isBase64(byteArray1);
      assertTrue(boolean1 == boolean0);
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)21, (byte)76, (byte)0, (byte)56, (byte) (-83)}, byteArray1);
      assertEquals(6, byteArray1.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)106, (byte)0, (byte) (-1)}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)97, (byte)103, (byte)68, (byte)47, (byte) (-83), (byte)0}, byteArray1);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertEquals(3, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArray1.length);
      
      Base64 base64_0 = new Base64(false);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      String string0 = base64_0.encodeToString(byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)106, (byte)0, (byte) (-1)}, byteArray0);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals(3, byteArray0.length);
      //  // Unstable assertion: assertEquals("agD/\uFFFD\u0000", string0);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      boolean boolean0 = Base64.isBase64(byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)106, (byte)0, (byte) (-1)}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)97, (byte)103, (byte)68, (byte)47, (byte) (-83), (byte)0}, byteArray1);
      //  // Unstable assertion: assertEquals(3, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArray1.length);
      //  // Unstable assertion: assertFalse(boolean0);
      
      byte[] byteArray2 = base64_0.decode(byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)106, (byte)0, (byte) (-1)}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray2);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertEquals(3, byteArray0.length);
      //  // Unstable assertion: assertEquals(0, byteArray2.length);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      Object object0 = base64_0.decode((Object) "agD/\r\n");
      //  // Unstable assertion: assertNotNull(object0);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      String string1 = Base64.encodeBase64String(byteArray2);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)object0));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)object0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, object0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, object0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)106, (byte)0, (byte) (-1)}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray2);
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertEquals(3, byteArray0.length);
      //  // Unstable assertion: assertEquals(0, byteArray2.length);
      //  // Unstable assertion: assertEquals("", string1);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, true, false, 76);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)object0));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)object0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, object0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, object0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)106, (byte)0, (byte) (-1)}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)97, (byte)103, (byte)68, (byte)47, (byte) (-83), (byte)0}, byteArray3);
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertEquals(3, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      boolean boolean0 = Base64.isBase64("org.apache.commons.codec.binary.Base64");
      assertFalse(boolean0);
      
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null);
      assertNull(byteArray0);
      
      Base64 base64_0 = new Base64((-1902), (byte[]) null);
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray1 = Base64.encodeBase64((byte[]) null, false, false);
      assertNull(byteArray1);
      
      boolean boolean1 = base64_0.hasData();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      assertArrayEquals(new byte[] {(byte)1}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(1, byteArray2.length);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, (-1902), 47);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)10, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      Base64 base64_0 = new Base64((byte)0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-1), (byte)10, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0}, byteArray1);
      assertNotNull(base64_0);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      byte byte0 = bigInteger0.byteValueExact();
      assertEquals((byte)1, byte0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)1}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(1, byteArray2.length);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      int int0 = base64_0.readResults(byteArray0, (byte) (-1), (-176));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)10, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertEquals(0, int0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray3 = base64_0.decode(byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)10, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertNotNull(byteArray3);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertEquals(0, byteArray3.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray1, false);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray3);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)10, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)47, (byte)119, (byte)65, (byte)61}, byteArray4);
      assertNotNull(byteArray4);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertEquals(4, byteArray4.length);
      
      byte[] byteArray5 = Base64.encodeBase64(byteArray4);
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertFalse(byteArray5.equals((Object)byteArray0));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray5);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray5);
      assertNotSame(byteArray5, byteArray3);
      assertNotSame(byteArray5, byteArray1);
      assertNotSame(byteArray5, byteArray0);
      assertNotSame(byteArray5, byteArray4);
      assertNotSame(byteArray5, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)10, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)47, (byte)119, (byte)65, (byte)61}, byteArray4);
      assertArrayEquals(new byte[] {(byte)76, (byte)51, (byte)100, (byte)66, (byte)80, (byte)81, (byte)61, (byte)61}, byteArray5);
      assertNotNull(byteArray5);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertEquals(4, byteArray4.length);
      assertEquals(8, byteArray5.length);
      
      boolean boolean0 = base64_0.isUrlSafe();
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray5));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray5);
      assertNotSame(byteArray1, byteArray3);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)10, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(boolean0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray6 = Base64.encodeBase64(byteArray3, false, true, (-176));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray5));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray4));
      assertFalse(byteArray3.equals((Object)byteArray5));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray6.equals((Object)byteArray1));
      assertFalse(byteArray6.equals((Object)byteArray5));
      assertFalse(byteArray6.equals((Object)byteArray2));
      assertFalse(byteArray6.equals((Object)byteArray0));
      assertFalse(byteArray6.equals((Object)byteArray4));
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray6);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray5);
      assertNotSame(byteArray1, byteArray6);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray3, byteArray2);
      assertSame(byteArray3, byteArray6);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray3, byteArray5);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray6, byteArray1);
      assertNotSame(byteArray6, byteArray5);
      assertSame(byteArray6, byteArray3);
      assertNotSame(byteArray6, byteArray2);
      assertNotSame(byteArray6, byteArray0);
      assertNotSame(byteArray6, byteArray4);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)10, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertArrayEquals(new byte[] {}, byteArray6);
      assertNotNull(byteArray6);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertEquals(0, byteArray3.length);
      assertEquals(0, byteArray6.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray7 = base64_0.encode(byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray6));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray5));
      assertFalse(byteArray1.equals((Object)byteArray6));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray7.equals((Object)byteArray3));
      assertFalse(byteArray7.equals((Object)byteArray0));
      assertFalse(byteArray7.equals((Object)byteArray4));
      assertFalse(byteArray7.equals((Object)byteArray2));
      assertFalse(byteArray7.equals((Object)byteArray5));
      assertFalse(byteArray7.equals((Object)byteArray6));
      assertFalse(byteArray7.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray7);
      assertNotSame(byteArray0, byteArray6);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray5);
      assertNotSame(byteArray1, byteArray6);
      assertNotSame(byteArray1, byteArray7);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray7, byteArray3);
      assertNotSame(byteArray7, byteArray0);
      assertNotSame(byteArray7, byteArray4);
      assertNotSame(byteArray7, byteArray2);
      assertNotSame(byteArray7, byteArray5);
      assertNotSame(byteArray7, byteArray6);
      assertNotSame(byteArray7, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)10, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)47, (byte)119, (byte)65, (byte)61}, byteArray7);
      assertNotNull(byteArray7);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertEquals(4, byteArray7.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      boolean boolean1 = Base64.isBase64((byte)37);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray8 = new byte[3];
      assertFalse(byteArray8.equals((Object)byteArray4));
      assertFalse(byteArray8.equals((Object)byteArray0));
      assertFalse(byteArray8.equals((Object)byteArray5));
      assertFalse(byteArray8.equals((Object)byteArray1));
      assertFalse(byteArray8.equals((Object)byteArray3));
      assertFalse(byteArray8.equals((Object)byteArray7));
      assertFalse(byteArray8.equals((Object)byteArray6));
      assertFalse(byteArray8.equals((Object)byteArray2));
      
      byteArray8[0] = (byte) (-1);
      byte[] byteArray9 = Base64.encodeBase64(byteArray8, false);
      assertFalse(byteArray8.equals((Object)byteArray4));
      assertFalse(byteArray8.equals((Object)byteArray0));
      assertFalse(byteArray8.equals((Object)byteArray5));
      assertFalse(byteArray8.equals((Object)byteArray1));
      assertFalse(byteArray8.equals((Object)byteArray3));
      assertFalse(byteArray8.equals((Object)byteArray7));
      assertFalse(byteArray8.equals((Object)byteArray6));
      assertFalse(byteArray8.equals((Object)byteArray2));
      assertFalse(byteArray9.equals((Object)byteArray2));
      assertFalse(byteArray9.equals((Object)byteArray0));
      assertFalse(byteArray9.equals((Object)byteArray4));
      assertFalse(byteArray9.equals((Object)byteArray3));
      assertFalse(byteArray9.equals((Object)byteArray1));
      assertFalse(byteArray9.equals((Object)byteArray7));
      assertFalse(byteArray9.equals((Object)byteArray5));
      assertFalse(byteArray9.equals((Object)byteArray8));
      assertFalse(byteArray9.equals((Object)byteArray6));
      assertNotSame(byteArray8, byteArray4);
      assertNotSame(byteArray8, byteArray0);
      assertNotSame(byteArray8, byteArray5);
      assertNotSame(byteArray8, byteArray1);
      assertNotSame(byteArray8, byteArray3);
      assertNotSame(byteArray8, byteArray7);
      assertNotSame(byteArray8, byteArray6);
      assertNotSame(byteArray8, byteArray9);
      assertNotSame(byteArray8, byteArray2);
      assertNotSame(byteArray9, byteArray2);
      assertNotSame(byteArray9, byteArray0);
      assertNotSame(byteArray9, byteArray4);
      assertNotSame(byteArray9, byteArray3);
      assertNotSame(byteArray9, byteArray1);
      assertNotSame(byteArray9, byteArray7);
      assertNotSame(byteArray9, byteArray5);
      assertNotSame(byteArray9, byteArray8);
      assertNotSame(byteArray9, byteArray6);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0}, byteArray8);
      assertArrayEquals(new byte[] {(byte)47, (byte)119, (byte)65, (byte)65}, byteArray9);
      assertNotNull(byteArray9);
      assertEquals(3, byteArray8.length);
      assertEquals(4, byteArray9.length);
      
      byteArray8[1] = (byte) (-34);
      byteArray8[2] = (byte) (-1);
      boolean boolean2 = Base64.isArrayByteBase64(byteArray8);
      assertFalse(byteArray8.equals((Object)byteArray4));
      assertFalse(byteArray8.equals((Object)byteArray0));
      assertFalse(byteArray8.equals((Object)byteArray5));
      assertFalse(byteArray8.equals((Object)byteArray1));
      assertFalse(byteArray8.equals((Object)byteArray3));
      assertFalse(byteArray8.equals((Object)byteArray7));
      assertFalse(byteArray8.equals((Object)byteArray6));
      assertFalse(byteArray8.equals((Object)byteArray9));
      assertFalse(byteArray8.equals((Object)byteArray2));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(byteArray8, byteArray4);
      assertNotSame(byteArray8, byteArray0);
      assertNotSame(byteArray8, byteArray5);
      assertNotSame(byteArray8, byteArray1);
      assertNotSame(byteArray8, byteArray3);
      assertNotSame(byteArray8, byteArray7);
      assertNotSame(byteArray8, byteArray6);
      assertNotSame(byteArray8, byteArray9);
      assertNotSame(byteArray8, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-34), (byte) (-1)}, byteArray8);
      assertEquals(3, byteArray8.length);
      assertFalse(boolean2);
      
      String string0 = Base64.encodeBase64String(byteArray6);
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray0.equals((Object)byteArray9));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray8));
      assertFalse(byteArray0.equals((Object)byteArray7));
      assertFalse(byteArray0.equals((Object)byteArray6));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray8));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray5));
      assertFalse(byteArray1.equals((Object)byteArray6));
      assertFalse(byteArray1.equals((Object)byteArray7));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray9));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray4));
      assertFalse(byteArray3.equals((Object)byteArray9));
      assertFalse(byteArray3.equals((Object)byteArray7));
      assertFalse(byteArray3.equals((Object)byteArray5));
      assertFalse(byteArray3.equals((Object)byteArray8));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray6.equals((Object)byteArray7));
      assertFalse(byteArray6.equals((Object)byteArray1));
      assertFalse(byteArray6.equals((Object)byteArray5));
      assertFalse(byteArray6.equals((Object)byteArray8));
      assertFalse(byteArray6.equals((Object)byteArray2));
      assertFalse(byteArray6.equals((Object)byteArray9));
      assertFalse(byteArray6.equals((Object)byteArray0));
      assertFalse(byteArray6.equals((Object)byteArray4));
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray9);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray8);
      assertNotSame(byteArray0, byteArray7);
      assertNotSame(byteArray0, byteArray6);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray8);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray5);
      assertNotSame(byteArray1, byteArray6);
      assertNotSame(byteArray1, byteArray7);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray9);
      assertNotSame(byteArray3, byteArray2);
      assertSame(byteArray3, byteArray6);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray3, byteArray9);
      assertNotSame(byteArray3, byteArray7);
      assertNotSame(byteArray3, byteArray5);
      assertNotSame(byteArray3, byteArray8);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray6, byteArray7);
      assertNotSame(byteArray6, byteArray1);
      assertNotSame(byteArray6, byteArray5);
      assertNotSame(byteArray6, byteArray8);
      assertSame(byteArray6, byteArray3);
      assertNotSame(byteArray6, byteArray2);
      assertNotSame(byteArray6, byteArray9);
      assertNotSame(byteArray6, byteArray0);
      assertNotSame(byteArray6, byteArray4);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)10, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertArrayEquals(new byte[] {}, byteArray6);
      assertNotNull(string0);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertEquals(0, byteArray3.length);
      assertEquals(0, byteArray6.length);
      assertEquals("", string0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray10 = Base64.encodeBase64URLSafe(byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray0.equals((Object)byteArray9));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray8));
      assertFalse(byteArray0.equals((Object)byteArray7));
      assertFalse(byteArray0.equals((Object)byteArray6));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray8));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray5));
      assertFalse(byteArray1.equals((Object)byteArray6));
      assertFalse(byteArray1.equals((Object)byteArray7));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray9));
      assertFalse(byteArray10.equals((Object)byteArray1));
      assertFalse(byteArray10.equals((Object)byteArray3));
      assertFalse(byteArray10.equals((Object)byteArray7));
      assertFalse(byteArray10.equals((Object)byteArray5));
      assertFalse(byteArray10.equals((Object)byteArray8));
      assertFalse(byteArray10.equals((Object)byteArray6));
      assertFalse(byteArray10.equals((Object)byteArray2));
      assertFalse(byteArray10.equals((Object)byteArray9));
      assertFalse(byteArray10.equals((Object)byteArray0));
      assertFalse(byteArray10.equals((Object)byteArray4));
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray10);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray9);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray8);
      assertNotSame(byteArray0, byteArray7);
      assertNotSame(byteArray0, byteArray6);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray8);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray5);
      assertNotSame(byteArray1, byteArray6);
      assertNotSame(byteArray1, byteArray7);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray10);
      assertNotSame(byteArray1, byteArray9);
      assertNotSame(byteArray10, byteArray1);
      assertNotSame(byteArray10, byteArray3);
      assertNotSame(byteArray10, byteArray7);
      assertNotSame(byteArray10, byteArray5);
      assertNotSame(byteArray10, byteArray8);
      assertNotSame(byteArray10, byteArray6);
      assertNotSame(byteArray10, byteArray2);
      assertNotSame(byteArray10, byteArray9);
      assertNotSame(byteArray10, byteArray0);
      assertNotSame(byteArray10, byteArray4);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)10, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)95, (byte)119, (byte)65}, byteArray10);
      assertNotNull(byteArray10);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertEquals(3, byteArray10.length);
      
      byte[] byteArray11 = Base64.discardWhitespace(byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray10));
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray0.equals((Object)byteArray9));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray8));
      assertFalse(byteArray0.equals((Object)byteArray7));
      assertFalse(byteArray0.equals((Object)byteArray6));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray8));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray5));
      assertFalse(byteArray1.equals((Object)byteArray6));
      assertFalse(byteArray1.equals((Object)byteArray7));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray10));
      assertFalse(byteArray1.equals((Object)byteArray9));
      assertFalse(byteArray11.equals((Object)byteArray0));
      assertFalse(byteArray11.equals((Object)byteArray4));
      assertFalse(byteArray11.equals((Object)byteArray10));
      assertFalse(byteArray11.equals((Object)byteArray1));
      assertFalse(byteArray11.equals((Object)byteArray9));
      assertFalse(byteArray11.equals((Object)byteArray7));
      assertFalse(byteArray11.equals((Object)byteArray5));
      assertFalse(byteArray11.equals((Object)byteArray3));
      assertFalse(byteArray11.equals((Object)byteArray8));
      assertFalse(byteArray11.equals((Object)byteArray6));
      assertFalse(byteArray11.equals((Object)byteArray2));
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray10);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray9);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray8);
      assertNotSame(byteArray0, byteArray11);
      assertNotSame(byteArray0, byteArray7);
      assertNotSame(byteArray0, byteArray6);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray8);
      assertNotSame(byteArray1, byteArray11);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray5);
      assertNotSame(byteArray1, byteArray6);
      assertNotSame(byteArray1, byteArray7);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray10);
      assertNotSame(byteArray1, byteArray9);
      assertNotSame(byteArray11, byteArray0);
      assertNotSame(byteArray11, byteArray4);
      assertNotSame(byteArray11, byteArray10);
      assertNotSame(byteArray11, byteArray1);
      assertNotSame(byteArray11, byteArray9);
      assertNotSame(byteArray11, byteArray7);
      assertNotSame(byteArray11, byteArray5);
      assertNotSame(byteArray11, byteArray3);
      assertNotSame(byteArray11, byteArray8);
      assertNotSame(byteArray11, byteArray6);
      assertNotSame(byteArray11, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)10, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0}, byteArray11);
      assertNotNull(byteArray11);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertEquals(2, byteArray11.length);
      
      int int1 = base64_0.readResults(byteArray0, (byte) (-1), (byte) (-1));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray10));
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray0.equals((Object)byteArray9));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray8));
      assertFalse(byteArray0.equals((Object)byteArray11));
      assertFalse(byteArray0.equals((Object)byteArray7));
      assertFalse(byteArray0.equals((Object)byteArray6));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray8));
      assertFalse(byteArray1.equals((Object)byteArray11));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray5));
      assertFalse(byteArray1.equals((Object)byteArray6));
      assertFalse(byteArray1.equals((Object)byteArray7));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray10));
      assertFalse(byteArray1.equals((Object)byteArray9));
      assertFalse(int1 == int0);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray10);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray9);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray8);
      assertNotSame(byteArray0, byteArray11);
      assertNotSame(byteArray0, byteArray7);
      assertNotSame(byteArray0, byteArray6);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray8);
      assertNotSame(byteArray1, byteArray11);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray5);
      assertNotSame(byteArray1, byteArray6);
      assertNotSame(byteArray1, byteArray7);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray10);
      assertNotSame(byteArray1, byteArray9);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)10, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertEquals((-1), int1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray12 = new byte[7];
      assertFalse(byteArray12.equals((Object)byteArray3));
      assertFalse(byteArray12.equals((Object)byteArray7));
      assertFalse(byteArray12.equals((Object)byteArray9));
      assertFalse(byteArray12.equals((Object)byteArray5));
      assertFalse(byteArray12.equals((Object)byteArray1));
      assertFalse(byteArray12.equals((Object)byteArray6));
      assertFalse(byteArray12.equals((Object)byteArray10));
      assertFalse(byteArray12.equals((Object)byteArray8));
      assertFalse(byteArray12.equals((Object)byteArray11));
      assertFalse(byteArray12.equals((Object)byteArray2));
      assertFalse(byteArray12.equals((Object)byteArray0));
      assertFalse(byteArray12.equals((Object)byteArray4));
      
      byteArray12[0] = (byte) (-34);
      byteArray12[1] = (byte)1;
      byteArray12[2] = (byte) (-1);
      byteArray12[3] = (byte) (-34);
      byteArray12[4] = (byte)0;
      byteArray12[5] = (byte)37;
      byteArray12[6] = (byte)10;
      byte[] byteArray13 = Base64.encodeBase64URLSafe(byteArray12);
      assertFalse(byteArray13.equals((Object)byteArray10));
      assertFalse(byteArray13.equals((Object)byteArray7));
      assertFalse(byteArray13.equals((Object)byteArray3));
      assertFalse(byteArray13.equals((Object)byteArray6));
      assertFalse(byteArray13.equals((Object)byteArray5));
      assertFalse(byteArray13.equals((Object)byteArray12));
      assertFalse(byteArray13.equals((Object)byteArray1));
      assertFalse(byteArray13.equals((Object)byteArray0));
      assertFalse(byteArray13.equals((Object)byteArray4));
      assertFalse(byteArray13.equals((Object)byteArray2));
      assertFalse(byteArray13.equals((Object)byteArray8));
      assertFalse(byteArray13.equals((Object)byteArray11));
      assertFalse(byteArray13.equals((Object)byteArray9));
      assertFalse(byteArray12.equals((Object)byteArray3));
      assertFalse(byteArray12.equals((Object)byteArray7));
      assertFalse(byteArray12.equals((Object)byteArray9));
      assertFalse(byteArray12.equals((Object)byteArray5));
      assertFalse(byteArray12.equals((Object)byteArray1));
      assertFalse(byteArray12.equals((Object)byteArray6));
      assertFalse(byteArray12.equals((Object)byteArray10));
      assertFalse(byteArray12.equals((Object)byteArray8));
      assertFalse(byteArray12.equals((Object)byteArray11));
      assertFalse(byteArray12.equals((Object)byteArray2));
      assertFalse(byteArray12.equals((Object)byteArray0));
      assertFalse(byteArray12.equals((Object)byteArray4));
      assertNotSame(byteArray13, byteArray10);
      assertNotSame(byteArray13, byteArray7);
      assertNotSame(byteArray13, byteArray3);
      assertNotSame(byteArray13, byteArray6);
      assertNotSame(byteArray13, byteArray5);
      assertNotSame(byteArray13, byteArray12);
      assertNotSame(byteArray13, byteArray1);
      assertNotSame(byteArray13, byteArray0);
      assertNotSame(byteArray13, byteArray4);
      assertNotSame(byteArray13, byteArray2);
      assertNotSame(byteArray13, byteArray8);
      assertNotSame(byteArray13, byteArray11);
      assertNotSame(byteArray13, byteArray9);
      assertNotSame(byteArray12, byteArray3);
      assertNotSame(byteArray12, byteArray7);
      assertNotSame(byteArray12, byteArray6);
      assertNotSame(byteArray12, byteArray10);
      assertNotSame(byteArray12, byteArray8);
      assertNotSame(byteArray12, byteArray2);
      assertNotSame(byteArray12, byteArray9);
      assertNotSame(byteArray12, byteArray5);
      assertNotSame(byteArray12, byteArray1);
      assertNotSame(byteArray12, byteArray11);
      assertNotSame(byteArray12, byteArray13);
      assertNotSame(byteArray12, byteArray0);
      assertNotSame(byteArray12, byteArray4);
      assertArrayEquals(new byte[] {(byte)51, (byte)103, (byte)72, (byte)95, (byte)51, (byte)103, (byte)65, (byte)108, (byte)67, (byte)103}, byteArray13);
      assertArrayEquals(new byte[] {(byte) (-34), (byte)1, (byte) (-1), (byte) (-34), (byte)0, (byte)37, (byte)10}, byteArray12);
      assertNotNull(byteArray13);
      assertEquals(10, byteArray13.length);
      assertEquals(7, byteArray12.length);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      boolean boolean0 = Base64.isBase64("org.apache.commons.codec.binary.Base64");
      assertFalse(boolean0);
      
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null, false);
      assertNull(byteArray0);
      
      Base64 base64_0 = new Base64((-3500), (byte[]) null, true);
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertTrue(base64_0.isUrlSafe());
      
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 2303, 2303);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      boolean boolean0 = Base64.isBase64("4");
      assertFalse(boolean0);
      
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null);
      assertNull(byteArray0);
      
      Base64 base64_0 = new Base64((-1902), (byte[]) null, false);
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      String string0 = Base64.encodeBase64URLSafeString((byte[]) null);
      assertNull(string0);
      
      boolean boolean1 = base64_0.hasData();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      Random.setNextRandom(35);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64((-528), (byte[]) null);
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray1 = Base64.encodeBase64URLSafe((byte[]) null);
      assertNull(byteArray1);
      
      byte[] byteArray2 = Base64.encodeBase64((byte[]) null);
      assertNull(byteArray2);
      
      Object object0 = base64_0.decode((Object) "");
      assertNotNull(object0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      boolean boolean0 = Base64.isBase64("");
      assertTrue(boolean0);
      
      byte[] byteArray3 = Base64.encodeBase64((byte[]) null);
      assertNull(byteArray3);
      
      byte[] byteArray4 = Base64.encodeBase64URLSafe((byte[]) null);
      assertNull(byteArray4);
      
      base64_0.decode((byte[]) null, 68, (-4357));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      int int0 = base64_0.avail();
      assertEquals(0, int0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      int int1 = base64_0.readResults((byte[]) null, 0, 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray5 = base64_0.decode("?}fahEhms?Iw.W");
      assertFalse(byteArray5.equals((Object)object0));
      assertNotSame(byteArray5, object0);
      assertArrayEquals(new byte[] {(byte)125, (byte) (-88), (byte)68, (byte) (-122), (byte)107, (byte)8, (byte) (-63)}, byteArray5);
      assertNotNull(byteArray5);
      assertEquals(7, byteArray5.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      byte[] byteArray6 = Base64.toIntegerBytes(bigInteger0);
      assertFalse(byteArray6.equals((Object)object0));
      assertFalse(byteArray6.equals((Object)byteArray5));
      assertNotSame(byteArray6, object0);
      assertNotSame(byteArray6, byteArray5);
      assertArrayEquals(new byte[] {}, byteArray6);
      assertNotNull(byteArray6);
      assertEquals(0, byteArray6.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      Base64 base64_0 = new Base64(1, byteArray0, false);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(base64_0);
      assertEquals(1, byteArray0.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of 1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-60);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-60)}, byteArray0);
      assertNotNull(bigInteger0);
      assertEquals(1, byteArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      BigInteger bigInteger1 = bigInteger0.nextProbablePrime();
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertArrayEquals(new byte[] {(byte) (-60)}, byteArray0);
      assertNotNull(bigInteger1);
      assertEquals(1, byteArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)2, bigInteger1.byteValue());
      assertEquals((short)2, bigInteger1.shortValue());
      
      Base64 base64_0 = new Base64((-148), byteArray0);
      assertArrayEquals(new byte[] {(byte) (-60)}, byteArray0);
      assertNotNull(base64_0);
      assertEquals(1, byteArray0.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-60)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      int int0 = base64_0.readResults(byteArray0, (byte) (-60), 77);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-60)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, int0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(bigInteger0, bigInteger1);
      assertSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-60)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      boolean boolean0 = base64_0.isUrlSafe();
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-60)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray3 = new byte[6];
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      
      byteArray3[0] = (byte) (-60);
      byteArray3[1] = (byte) (-60);
      byteArray3[2] = (byte) (-60);
      byteArray3[3] = (byte) (-60);
      byteArray3[4] = (byte) (-60);
      byteArray3[5] = (byte) (-60);
      byte[] byteArray4 = Base64.encodeBase64(byteArray3, false, false);
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertArrayEquals(new byte[] {(byte)120, (byte)77, (byte)84, (byte)69, (byte)120, (byte)77, (byte)84, (byte)69}, byteArray4);
      assertArrayEquals(new byte[] {(byte) (-60), (byte) (-60), (byte) (-60), (byte) (-60), (byte) (-60), (byte) (-60)}, byteArray3);
      assertNotNull(byteArray4);
      assertEquals(8, byteArray4.length);
      assertEquals(6, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte)113;
      byte byte0 = (byte)108;
      byteArray0[3] = (byte)108;
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-114), (byte) (-16), (byte)113, (byte)108}, byteArray0);
      assertNotNull(string0);
      assertEquals(4, byteArray0.length);
      assertEquals("jvBxbA", string0);
      
      Base64 base64_0 = new Base64(true);
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertTrue(base64_0.isUrlSafe());
      
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      String string1 = Base64.encodeBase64URLSafeString(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(string1);
      assertEquals(0, byteArray1.length);
      assertEquals("", string1);
      
      String string2 = Base64.encodeBase64URLSafeString(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-114), (byte) (-16), (byte)113, (byte)108}, byteArray0);
      assertNotNull(string2);
      assertEquals(4, byteArray0.length);
      assertEquals("jvBxbA", string2);
      
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-114), (byte) (-16), (byte)113, (byte)108}, byteArray0);
      assertArrayEquals(new byte[] {(byte)106, (byte)118, (byte)66, (byte)120, (byte)98, (byte)65}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(4, byteArray0.length);
      assertEquals(6, byteArray2.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte) (-45);
      byteArray0[5] = (byte)0;
      byte byte0 = (byte) (-1);
      byteArray0[6] = (byte) (-1);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)112, (byte) (-9), (byte)52, (byte)63, (byte) (-45), (byte)0, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)99, (byte)80, (byte)99, (byte)48, (byte)80, (byte)57, (byte)77, (byte)65, (byte)95, (byte)119}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(10, byteArray1.length);
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)112, (byte) (-9), (byte)52, (byte)63, (byte) (-45), (byte)0, (byte) (-1)}, byteArray0);
      assertNotNull(bigInteger0);
      assertEquals(7, byteArray0.length);
      assertEquals((byte) (-89), bigInteger0.byteValue());
      assertEquals((short)167, bigInteger0.shortValue());
      
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [p\uFFFD4?\uFFFD\u0000\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte)77;
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)21;
      base64_0.encode(byteArray0, 0, (-1));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-37), (byte)0, (byte)0, (byte)63, (byte)77, (byte)6, (byte)0, (byte)21}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(110, byteArray0, true);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(base64_0);
      assertEquals(0, byteArray0.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertTrue(base64_0.isUrlSafe());
      
      int int0 = 3376;
      byte[] byteArray1 = Base64.encodeBase64((byte[]) null, true, true, 3376);
      assertNull(byteArray1);
      
      byte[] byteArray2 = Base64.encodeBase64((byte[]) null, true, true, 64);
      assertNull(byteArray2);
      
      byte[] byteArray3 = base64_0.encode((byte[]) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNull(byteArray3);
      assertEquals(0, byteArray0.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertTrue(base64_0.isUrlSafe());
      
      byte[] byteArray4 = Base64.encodeBase64Chunked((byte[]) null);
      assertNull(byteArray4);
      
      String string0 = base64_0.encodeToString((byte[]) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNull(string0);
      assertEquals(0, byteArray0.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertTrue(base64_0.isUrlSafe());
      
      byte[] byteArray5 = base64_0.decode("org.apache.commons.codec.DecoderException");
      assertFalse(byteArray5.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray5, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray5);
      assertEquals(0, byteArray0.length);
      assertEquals(27, byteArray5.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertTrue(base64_0.isUrlSafe());
      
      base64_0.encode((byte[]) null, 3376, 98);
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertNotSame(byteArray0, byteArray5);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertTrue(base64_0.isUrlSafe());
      
      byte[] byteArray6 = Base64.encodeBase64(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray6.equals((Object)byteArray5));
      assertSame(byteArray0, byteArray6);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray6, byteArray5);
      assertSame(byteArray6, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray6);
      assertNotNull(byteArray6);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray6.length);
      
      byte[] byteArray7 = new byte[1];
      assertFalse(byteArray7.equals((Object)byteArray0));
      assertFalse(byteArray7.equals((Object)byteArray5));
      assertFalse(byteArray7.equals((Object)byteArray6));
      
      byteArray7[0] = (byte) (-70);
      byte[] byteArray8 = base64_0.decode(byteArray7);
      assertFalse(byteArray0.equals((Object)byteArray7));
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray7.equals((Object)byteArray0));
      assertFalse(byteArray7.equals((Object)byteArray5));
      assertFalse(byteArray7.equals((Object)byteArray6));
      assertFalse(byteArray8.equals((Object)byteArray6));
      assertFalse(byteArray8.equals((Object)byteArray5));
      assertFalse(byteArray8.equals((Object)byteArray7));
      assertFalse(byteArray8.equals((Object)byteArray0));
      assertSame(byteArray0, byteArray6);
      assertNotSame(byteArray0, byteArray8);
      assertNotSame(byteArray0, byteArray7);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray7, byteArray8);
      assertNotSame(byteArray7, byteArray0);
      assertNotSame(byteArray7, byteArray5);
      assertNotSame(byteArray7, byteArray6);
      assertNotSame(byteArray8, byteArray6);
      assertNotSame(byteArray8, byteArray5);
      assertNotSame(byteArray8, byteArray7);
      assertNotSame(byteArray8, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-70)}, byteArray7);
      assertArrayEquals(new byte[] {}, byteArray8);
      assertNotNull(byteArray8);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray7.length);
      assertEquals(0, byteArray8.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertTrue(base64_0.isUrlSafe());
      
      byte[] byteArray9 = base64_0.decode(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray8));
      assertFalse(byteArray0.equals((Object)byteArray7));
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray9.equals((Object)byteArray8));
      assertFalse(byteArray9.equals((Object)byteArray7));
      assertFalse(byteArray9.equals((Object)byteArray5));
      assertSame(byteArray0, byteArray6);
      assertSame(byteArray0, byteArray9);
      assertNotSame(byteArray0, byteArray8);
      assertNotSame(byteArray0, byteArray7);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray9, byteArray8);
      assertSame(byteArray9, byteArray0);
      assertSame(byteArray9, byteArray6);
      assertNotSame(byteArray9, byteArray7);
      assertNotSame(byteArray9, byteArray5);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray9);
      assertNotNull(byteArray9);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray9.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertTrue(base64_0.isUrlSafe());
      
      byte[] byteArray10 = Base64.encodeBase64((byte[]) null, true);
      assertNull(byteArray10);
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray8));
      assertFalse(byteArray0.equals((Object)byteArray7));
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertSame(byteArray0, byteArray6);
      assertSame(byteArray0, byteArray9);
      assertNotSame(byteArray0, byteArray8);
      assertNotSame(byteArray0, byteArray7);
      assertNotSame(byteArray0, byteArray5);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(bigInteger0);
      assertEquals(0, byteArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      byte[] byteArray11 = base64_0.decode("org.apache.commons.codec.EncoderException");
      assertFalse(byteArray0.equals((Object)byteArray8));
      assertFalse(byteArray0.equals((Object)byteArray7));
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray11.equals((Object)byteArray7));
      assertFalse(byteArray11.equals((Object)byteArray0));
      assertFalse(byteArray11.equals((Object)byteArray6));
      assertFalse(byteArray11.equals((Object)byteArray5));
      assertFalse(byteArray11.equals((Object)byteArray9));
      assertFalse(byteArray11.equals((Object)byteArray8));
      assertNotSame(byteArray0, byteArray11);
      assertSame(byteArray0, byteArray6);
      assertSame(byteArray0, byteArray9);
      assertNotSame(byteArray0, byteArray8);
      assertNotSame(byteArray0, byteArray7);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray11, byteArray7);
      assertNotSame(byteArray11, byteArray0);
      assertNotSame(byteArray11, byteArray6);
      assertNotSame(byteArray11, byteArray5);
      assertNotSame(byteArray11, byteArray9);
      assertNotSame(byteArray11, byteArray8);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray11);
      assertEquals(0, byteArray0.length);
      assertEquals(27, byteArray11.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertTrue(base64_0.isUrlSafe());
      
      byte[] byteArray12 = Base64.encodeBase64((byte[]) null, false, true);
      assertNull(byteArray12);
      
      byte[] byteArray13 = base64_0.encode(byteArray6);
      assertFalse(byteArray0.equals((Object)byteArray11));
      assertFalse(byteArray0.equals((Object)byteArray8));
      assertFalse(byteArray0.equals((Object)byteArray7));
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray13.equals((Object)byteArray5));
      assertFalse(byteArray13.equals((Object)byteArray7));
      assertFalse(byteArray13.equals((Object)byteArray11));
      assertFalse(byteArray13.equals((Object)byteArray8));
      assertFalse(byteArray6.equals((Object)byteArray5));
      assertFalse(byteArray6.equals((Object)byteArray8));
      assertFalse(byteArray6.equals((Object)byteArray11));
      assertFalse(byteArray6.equals((Object)byteArray7));
      assertSame(byteArray0, byteArray13);
      assertNotSame(byteArray0, byteArray11);
      assertSame(byteArray0, byteArray6);
      assertSame(byteArray0, byteArray9);
      assertNotSame(byteArray0, byteArray8);
      assertNotSame(byteArray0, byteArray7);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray13, byteArray5);
      assertNotSame(byteArray13, byteArray7);
      assertSame(byteArray13, byteArray0);
      assertSame(byteArray13, byteArray6);
      assertSame(byteArray13, byteArray9);
      assertNotSame(byteArray13, byteArray11);
      assertNotSame(byteArray13, byteArray8);
      assertNotSame(byteArray6, byteArray5);
      assertSame(byteArray6, byteArray9);
      assertNotSame(byteArray6, byteArray8);
      assertNotSame(byteArray6, byteArray11);
      assertNotSame(byteArray6, byteArray7);
      assertSame(byteArray6, byteArray13);
      assertSame(byteArray6, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray13);
      assertArrayEquals(new byte[] {}, byteArray6);
      assertNotNull(byteArray13);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray13.length);
      assertEquals(0, byteArray6.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertTrue(base64_0.isUrlSafe());
      
      byte[] byteArray14 = Base64.encodeBase64URLSafe((byte[]) null);
      assertNull(byteArray14);
      
      byte[] byteArray15 = base64_0.decode("BL5a");
      assertFalse(byteArray0.equals((Object)byteArray11));
      assertFalse(byteArray0.equals((Object)byteArray8));
      assertFalse(byteArray0.equals((Object)byteArray7));
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray15.equals((Object)byteArray8));
      assertFalse(byteArray15.equals((Object)byteArray6));
      assertFalse(byteArray15.equals((Object)byteArray5));
      assertFalse(byteArray15.equals((Object)byteArray9));
      assertFalse(byteArray15.equals((Object)byteArray7));
      assertFalse(byteArray15.equals((Object)byteArray13));
      assertFalse(byteArray15.equals((Object)byteArray0));
      assertFalse(byteArray15.equals((Object)byteArray11));
      assertSame(byteArray0, byteArray13);
      assertNotSame(byteArray0, byteArray11);
      assertSame(byteArray0, byteArray6);
      assertSame(byteArray0, byteArray9);
      assertNotSame(byteArray0, byteArray8);
      assertNotSame(byteArray0, byteArray15);
      assertNotSame(byteArray0, byteArray7);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray15, byteArray8);
      assertNotSame(byteArray15, byteArray6);
      assertNotSame(byteArray15, byteArray5);
      assertNotSame(byteArray15, byteArray9);
      assertNotSame(byteArray15, byteArray7);
      assertNotSame(byteArray15, byteArray13);
      assertNotSame(byteArray15, byteArray0);
      assertNotSame(byteArray15, byteArray11);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)4, (byte) (-66), (byte)90}, byteArray15);
      assertNotNull(byteArray15);
      assertEquals(0, byteArray0.length);
      assertEquals(3, byteArray15.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertTrue(base64_0.isUrlSafe());
      
      byte byte0 = (byte)1;
      boolean boolean0 = Base64.isBase64((byte)1);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-39);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)1;
      Base64 base64_0 = new Base64(1524, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-103), (byte) (-18), (byte)0, (byte) (-39), (byte)0, (byte)1}, byteArray0);
      assertNotNull(base64_0);
      assertEquals(6, byteArray0.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      boolean boolean0 = Base64.isBase64("hC,LX *4[");
      assertFalse(boolean0);
      
      boolean boolean1 = Base64.isBase64("hC,LX *4[");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = base64_0.isUrlSafe();
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-103), (byte) (-18), (byte)0, (byte) (-39), (byte)0, (byte)1}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(boolean2);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      Object object0 = base64_0.decode((Object) "hC,LX *4[");
      assertNotSame(byteArray0, object0);
      assertArrayEquals(new byte[] {(byte) (-103), (byte) (-18), (byte)0, (byte) (-39), (byte)0, (byte)1}, byteArray0);
      assertNotNull(object0);
      assertEquals(6, byteArray0.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      boolean boolean3 = Base64.isBase64("!|Q4Qd");
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      int int0 = base64_0.avail();
      assertFalse(byteArray0.equals((Object)object0));
      assertNotSame(byteArray0, object0);
      assertArrayEquals(new byte[] {(byte) (-103), (byte) (-18), (byte)0, (byte) (-39), (byte)0, (byte)1}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(0, int0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      BigInteger bigInteger1 = bigInteger0.clearBit(25);
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotNull(bigInteger1);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      
      int int1 = bigInteger0.intValueExact();
      assertTrue(int1 == int0);
      assertTrue(bigInteger0.equals((Object)bigInteger1));
      assertNotSame(bigInteger0, bigInteger1);
      assertEquals(0, int1);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)object0));
      assertTrue(bigInteger0.equals((Object)bigInteger1));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, object0);
      assertNotSame(bigInteger0, bigInteger1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)object0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, object0);
      assertArrayEquals(new byte[] {(byte) (-103), (byte) (-18), (byte)0, (byte) (-39), (byte)0, (byte)1}, byteArray0);
      assertNotNull(string0);
      assertEquals(6, byteArray0.length);
      assertEquals("me4A2QAB", string0);
      
      base64_0.decode(byteArray1, 0, (int) (byte) (-18));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)object0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)object0));
      assertTrue(bigInteger0.equals((Object)bigInteger1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, object0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, object0);
      assertNotSame(bigInteger0, bigInteger1);
      assertArrayEquals(new byte[] {(byte) (-103), (byte) (-18), (byte)0, (byte) (-39), (byte)0, (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      MockRandom mockRandom0 = new MockRandom(1141);
      bigInteger0.toString();
      mockRandom0.longs();
      BigInteger.probablePrime(170, mockRandom0);
      bigInteger0.bitLength();
      BigInteger.probablePrime(1141, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      //  // Unstable assertion: assertTrue(boolean0);
      
      Base64.encodeBase64(byteArray0, false, true);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      //  // Unstable assertion: assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)38;
      byteArray2[1] = (byte) (-90);
      byteArray2[2] = (byte) (-31);
      byteArray2[3] = (byte)53;
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      //  // Unstable assertion: assertEquals(10, byteArray3.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)74, (byte)113, (byte)98, (byte)104, (byte)78, (byte)81, (byte)61, (byte)61, (byte) (-83), (byte)0}, byteArray3);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Base64 base64_0 = new Base64(88);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-89);
      byteArray0[8] = (byte) (-23);
      base64_0.decode(byteArray0, (int) (byte) (-23), (int) (byte) (-1));
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64((byte)0, byteArray1);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.byteValueExact();
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(1, byteArray2.length);
      
      base64_0.readResults(byteArray0, (byte) (-1), (-176));
      byte[] byteArray3 = base64_0.decode(byteArray1);
      assertEquals(0, byteArray3.length);
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray1, false);
      byte[] byteArray5 = Base64.encodeBase64(byteArray4);
      assertArrayEquals(new byte[] {(byte)76, (byte)51, (byte)100, (byte)66, (byte)81, (byte)81, (byte)61, (byte)61}, byteArray5);
      
      base64_0.isUrlSafe();
      byte[] byteArray6 = Base64.encodeBase64(byteArray3, false, true, (-176));
      base64_0.encode(byteArray1);
      Base64.isBase64((byte)37);
      byte[] byteArray7 = new byte[3];
      byteArray7[0] = (byte) (-1);
      Base64.encodeBase64(byteArray7, false);
      byteArray7[1] = (byte) (-34);
      byteArray7[2] = (byte) (-1);
      boolean boolean0 = Base64.isArrayByteBase64(byteArray7);
      assertFalse(boolean0);
      
      Base64.encodeBase64String(byteArray6);
      Base64.encodeBase64URLSafe(byteArray1);
      Base64.discardWhitespace(byteArray1);
      base64_0.readResults(byteArray0, (byte) (-1), (byte) (-1));
      byte[] byteArray8 = new byte[7];
      byteArray8[0] = (byte) (-34);
      byteArray8[1] = (byte)1;
      byteArray8[2] = (byte) (-1);
      byteArray8[3] = (byte) (-34);
      byteArray8[4] = (byte)0;
      byteArray8[5] = (byte)37;
      byteArray8[6] = (byte)0;
      byte[] byteArray9 = Base64.encodeBase64URLSafe(byteArray8);
      assertEquals(10, byteArray9.length);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("z\"z>BHLfm6pt");
      Base64 base64_0 = new Base64(true);
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      //  // Unstable assertion: assertEquals("zzBHLfm6pg", string0);
      
      String string1 = Base64.encodeBase64String(byteArray0);
      //  // Unstable assertion: assertEquals("zzBHLfm6pg==", string1);
      
      Base64.decodeBase64("z\"z>BHLfm6pt");
      byte[] byteArray1 = base64_0.encode(byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.shiftRight(0);
      bigInteger0.modPow(bigInteger1, bigInteger1);
      bigInteger0.toByteArray();
      Base64.encodeInteger(bigInteger0);
      base64_0.decode(byteArray0, 0, (-2174));
      Base64.encodeBase64(byteArray0, true, true);
      byte[] byteArray2 = base64_0.decode("");
      base64_0.encodeToString(byteArray2);
      base64_0.encode(byteArray0, 0, 0);
      String string2 = base64_0.encodeToString(byteArray0);
      //  // Unstable assertion: assertEquals("zzBHLfm6pg\uFFFD\u0000", string2);
      
      Base64.isBase64(byteArray0);
      base64_0.decode(byteArray0);
      base64_0.decode((Object) "zzBHLfm6pg\r\n");
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte)63;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)37;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      assertEquals(12, byteArray1.length);
      
      Base64 base64_0 = new Base64(false);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((short) (-29879), bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)26;
      byteArray0[8] = (byte) (-56);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-1307), byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000\u0019\uFFFD5(3\u0000\u001A\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      boolean boolean0 = Base64.isBase64("org.apache.commons.codec.binary.Base64");
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null);
      assertNull(byteArray0);
      
      Base64 base64_0 = new Base64((-1902), (byte[]) null);
      boolean boolean1 = base64_0.hasData();
      assertFalse(base64_0.isUrlSafe());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)76;
      Base64.isArrayByteBase64(byteArray0);
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("4YIAhAABTA", string0);
      
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(7, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)30;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)44;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((byte)0, bigInteger0.byteValue());
      
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(14, byteArray1.length);
      
      Base64 base64_0 = new Base64(false);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Base64.isBase64("-?707K<=");
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)108;
      byteArray0[0] = (byte)108;
      byte byte1 = (byte)69;
      byteArray0[1] = (byte)69;
      byte byte2 = (byte)0;
      byteArray0[2] = (byte)0;
      byte byte3 = (byte) (-23);
      byteArray0[3] = (byte) (-23);
      byte byte4 = (byte)0;
      byteArray0[4] = (byte)0;
      Base64.decodeBase64(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)108, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [lE\u0000\uFFFD\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte) (-31);
      byteArray0[4] = (byte)64;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      String string0 = "Input array too big, the output array would be bigger (";
      Base64.isBase64("Input array too big, the output array would be bigger (");
      byte[] byteArray0 = new byte[0];
      Base64.isBase64(byteArray0);
      Base64.isBase64("MEn$>!C9,()Ku");
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      int int0 = 1996;
      Base64 base64_0 = new Base64(1996);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.intValueExact();
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64(byteArray0, false);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray2, 1996, 1996);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1996
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-83);
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)0;
      byte byte1 = (byte) (-67);
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte) (-127);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64.encodeBase64String(byteArray0);
      Base64.discardWhitespace(byteArray1);
      Base64.decodeBase64("rQC9gQ==");
      Base64 base64_0 = new Base64(325, byteArray0);
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-53);
      byteArray0[4] = (byte) (-46);
      byteArray0[5] = (byte)107;
      byteArray0[6] = (byte) (-76);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64(byteArray0, false);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [@\u0000\u0000\uFFFD\uFFFDk\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-19);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(808, byteArray1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [AO0=\uFFFD\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte0 = (byte)23;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte)76;
      byte byte1 = (byte)4;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)56;
      byte byte2 = (byte) (-1);
      byteArray0[7] = (byte) (-1);
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(false);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)0, 1344);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)80;
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)80;
      byteArray1[1] = (byte)80;
      byteArray1[2] = (byte)80;
      byteArray1[3] = (byte)80;
      byteArray1[4] = (byte)80;
      Base64.isBase64(byteArray1);
      Base64 base64_0 = new Base64(2184);
      int int0 = (-365);
      int int1 = (-1286);
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-31);
      byteArray0[0] = (byte) (-31);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)8;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      BigInteger bigInteger1 = new BigInteger(byteArray1);
      bigInteger0.mod(bigInteger1);
      byteArray0[3] = (byte)8;
      try { 
        base64_0.decode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)21;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(14, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Base64.isBase64("");
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)44;
      byteArray1[3] = (byte) (-1);
      byteArray1[4] = (byte)44;
      base64_0.encode(byteArray1, (-955), 0);
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte) (-1);
      byte[] byteArray2 = base64_0.encode(byteArray0);
      assertArrayEquals(new byte[] {(byte)95, (byte)121, (byte)122, (byte)95, (byte)13, (byte)10}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)81;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)49;
      byteArray0[8] = (byte)51;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [:\u0000\u001A\u0000\u0001Q\u000013]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      int int0 = base64_0.readResults(byteArray0, (byte)37, (byte)99);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(0, int0);
  }
}
