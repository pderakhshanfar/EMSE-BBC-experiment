/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:06:06 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.nextProbablePrime();
      BigInteger bigInteger1 = bigInteger0.shiftLeft(8182);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      bigInteger1.shiftLeft(8165);
      Base64.toIntegerBytes(bigInteger2);
      base64_0.avail();
      base64_0.decode(byteArray0, 81, 81);
      Base64.isBase64((byte) (-98));
      Base64.decodeInteger(byteArray0);
      base64_0.readResults(byteArray0, 0, 8165);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.shiftLeft(8182);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger2);
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray2);
      Base64.encodeBase64(byteArray3, false, false, 8182);
      Base64 base64_0 = new Base64(1811);
      base64_0.encode(byteArray1);
      byte[] byteArray4 = new byte[4];
      byteArray4[0] = (byte)14;
      byteArray4[1] = (byte) (-100);
      byteArray4[2] = (byte)123;
      byteArray4[3] = (byte)117;
      Base64.decodeInteger(byteArray4);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.avail();
      Base64.decodeBase64(": ");
      base64_0.decode(byteArray1, 0, 64);
      base64_0.readResults(byteArray1, 0, 0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.shiftLeft(8182);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger2);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, true, 8182);
      base64_0.encode(byteArray3);
      // Undeclared exception!
      Base64.encodeBase64Chunked(byteArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Base64 base64_0 = new Base64(2426, (byte[]) null);
      base64_0.encode((byte[]) null, (-3255), (-3255));
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, 2426, 2426);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base64.decodeBase64(") than the specified maxium size of ");
      byte[] byteArray1 = Base64.decodeBase64(") than the specified maxium size of ");
      Base64 base64_0 = new Base64((-4085), byteArray0);
      base64_0.avail();
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, 0, 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 21
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      int int0 = 2725;
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(2725, byteArray0);
      Object object0 = base64_0.decode((Object) "UTF-8");
      // Undeclared exception!
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.decodeInteger(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray1 = new byte[7];
      byte byte0 = (byte) (-100);
      byteArray1[1] = (byte)81;
      byteArray1[2] = (byte) (-83);
      byteArray1[3] = (byte) (-53);
      byteArray1[4] = (byte)81;
      byteArray1[5] = (byte)102;
      byteArray1[6] = (byte)14;
      Base64.encodeBase64(byteArray1, true, true, (int) (byte)14);
      Base64 base64_0 = new Base64(48, byteArray0, false);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = Base64.decodeBase64("Y8L?.^0<$3+");
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_0 = new Base64((-4084), byteArray0);
      byte[] byteArray3 = new byte[9];
      byteArray3[0] = (byte) (-49);
      byteArray3[1] = (byte)86;
      byteArray3[2] = (byte)1;
      byteArray3[3] = (byte)112;
      byteArray3[4] = (byte)91;
      byteArray3[5] = (byte)108;
      byteArray3[6] = (byte) (-31);
      byteArray3[7] = (byte)11;
      byteArray3[8] = (byte)1;
      Base64.encodeBase64(byteArray3, true, true, 65);
      base64_0.avail();
      base64_0.decode(byteArray2, 0, 64);
      base64_0.avail();
      base64_0.decode(byteArray1, 0, 4);
      byte[] byteArray4 = new byte[6];
      byteArray4[0] = (byte)112;
      byteArray4[1] = (byte)86;
      byteArray4[2] = (byte)86;
      byteArray4[3] = (byte)1;
      byteArray4[4] = (byte)91;
      byteArray4[5] = (byte)1;
      Base64.decodeInteger(byteArray4);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.shiftLeft(8168);
      bigInteger0.shiftLeft(5373);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger2);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, false, 8168);
      Base64.isBase64(byteArray1);
      base64_0.encode(byteArray3);
      Base64.discardWhitespace(byteArray1);
      // Undeclared exception!
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("lVd|TIIv7-Y");
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64.isBase64("T.<!`v");
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.shiftLeft(8168);
      bigInteger0.shiftLeft(5373);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger2);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, false, 8168);
      Base64.isBase64(byteArray1);
      base64_0.encode(byteArray3);
      // Undeclared exception!
      Base64.encodeBase64(byteArray3, true, true, 8168);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64.isBase64("2n?vDbx9dh#[\r");
      Base64.isBase64("&a;<u(9w+");
      Base64 base64_1 = new Base64(false);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.shiftLeft((-1315));
      BigInteger bigInteger1 = bigInteger0.shiftLeft(2021161080);
      byte[] byteArray0 = null;
      Base64.encodeBase64URLSafe((byte[]) null);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.shiftLeft(8168);
      bigInteger0.shiftLeft(5373);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger2);
      Base64 base64_1 = new Base64();
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray2);
      Base64.encodeBase64URLSafe(byteArray1);
      // Undeclared exception!
      Base64.encodeBase64(byteArray3, false);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64(") than the specified maxium size of ");
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.shiftLeft(1356);
      bigInteger0.shiftLeft(2725);
      bigInteger0.longValueExact();
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger1);
      Base64.isBase64(byteArray2);
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64Chunked(byteArray2);
      base64_0.decode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Base64.isBase64((byte)125);
      Base64 base64_0 = new Base64(false);
      base64_0.avail();
      byte[] byteArray0 = Base64.decodeBase64("UTF-16BE");
      Base64 base64_1 = new Base64(2040);
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64("Y8L?.^0<$3+");
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      Base64.discardWhitespace(byteArray1);
      Base64 base64_0 = new Base64((-4099), byteArray0);
      base64_0.avail();
      base64_0.decode(byteArray3, 0, 94);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64.isBase64("2n?vDbx9dh#[\r");
      Base64 base64_1 = new Base64(false);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.shiftLeft(8168);
      bigInteger0.shiftLeft(5373);
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger1);
      BigInteger bigInteger2 = new BigInteger(byteArray2);
      Base64.encodeInteger(bigInteger2);
      base64_1.decode(byteArray1);
      Base64.isBase64((byte)14);
      BigInteger bigInteger3 = bigInteger1.not();
      bigInteger3.bitCount();
      base64_1.avail();
      base64_0.decode(byteArray2, 0, 1444);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64 base64_0 = new Base64((-2597), byteArray0, true);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.isBase64((byte)61);
      Base64 base64_1 = new Base64();
      Object object0 = new Object();
      base64_0.decode(byteArray0, (int) (byte)61, (-883));
      Base64.encodeBase64(byteArray0, true, false, 76);
      base64_1.avail();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      Base64 base64_1 = new Base64(64, byteArray0, true);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64String(byteArray1);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 0, 1792);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64.isBase64("2n?vDbx9dh#[\r");
      Base64 base64_1 = new Base64(false);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.shiftLeft(8168);
      bigInteger0.shiftLeft(5373);
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger1);
      BigInteger bigInteger2 = new BigInteger(byteArray2);
      byte[] byteArray3 = Base64.encodeInteger(bigInteger2);
      byte[] byteArray4 = base64_1.decode(byteArray1);
      Base64.isBase64("2n?vDbx9dh#[\r");
      Base64 base64_2 = new Base64(24, byteArray4, true);
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray5 = Base64.encodeBase64URLSafe(byteArray3);
      byte[] byteArray6 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray7 = Base64.encodeBase64(byteArray3, true);
      byte[] byteArray8 = new byte[2];
      byteArray8[0] = (byte)109;
      Base64.encodeBase64URLSafe(byteArray7);
      Base64.encodeBase64(byteArray6, true, true, 8168);
      Base64 base64_3 = new Base64((-2699), byteArray0);
      // Undeclared exception!
      base64_3.encode(byteArray5, 76, 8168);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Base64.isBase64("n");
      byte[] byteArray0 = new byte[5];
      Base64 base64_0 = new Base64((byte)9, byteArray0, true);
      base64_0.encode(byteArray0, (int) (byte)9, (-1));
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, 60, (byte)9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64("Y8L?.^0<53l+");
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      Base64.discardWhitespace(byteArray1);
      Base64 base64_0 = new Base64((-4099), byteArray0);
      base64_0.avail();
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray3, 0, 94);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64.discardWhitespace(byteArray0);
      Base64.decodeInteger(byteArray0);
      Base64.isBase64((byte)1);
      Object object0 = new Object();
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 1, 123);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Base64 base64_0 = new Base64();
      String string0 = "2n?vDbx9dh#[\\r";
      Base64.isBase64("2n?vDbx9dh#[\r");
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.shiftLeft(1356);
      BigInteger bigInteger2 = bigInteger1.shiftLeft(1356);
      bigInteger0.longValueExact();
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeInteger(bigInteger2);
      BigInteger bigInteger3 = null;
      try {
        bigInteger3 = new BigInteger(byteArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.decodeInteger(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte) (-49);
      byteArray2[1] = (byte) (-123);
      byteArray2[2] = (byte) (-43);
      byteArray2[3] = (byte) (-21);
      byteArray2[4] = (byte)1;
      base64_0.decode(byteArray2, (int) (byte)1, 1);
      base64_0.encodeToString(byteArray0);
      Base64.encodeBase64URLSafe(byteArray1);
      Base64.encodeBase64URLSafe(byteArray1);
      Base64.encodeBase64(byteArray0, true);
      Base64.discardWhitespace(byteArray1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "TRs{#Z~FSZ%Q>";
      Base64.isBase64("TRs{#Z~FSZ%Q>");
      Base64 base64_0 = new Base64(false);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.shiftLeft(64);
      bigInteger0.shiftLeft((-50));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)14;
      Base64.decodeBase64("");
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)14;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeInteger(bigInteger1);
      BigInteger bigInteger2 = new BigInteger(byteArray1);
      BigInteger bigInteger3 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        bigInteger3.byteValueExact();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger out of byte range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = Base64.decodeBase64("d");
      Base64.encodeBase64String(byteArray0);
      Base64.isBase64("d");
      base64_0.decode(byteArray0);
      base64_0.decode((byte[]) null, (-327), (-327));
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)23;
      byteArray1[1] = (byte) (-24);
      byteArray1[2] = (byte)17;
      byteArray1[3] = (byte)23;
      Base64 base64_1 = new Base64(1, byteArray1, true);
      Base64.encodeBase64URLSafeString((byte[]) null);
      base64_1.decode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.isUrlSafe();
      Base64 base64_1 = new Base64(64);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)9;
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64.isBase64("|");
      Base64.isBase64("}&Ue7EPVN");
      Base64 base64_1 = new Base64();
      byte[] byteArray0 = new byte[23];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte) (-16);
      byteArray0[6] = (byte)62;
      Base64.decodeBase64(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 99, (int) (byte)62);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 99
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.shiftLeft((-134));
      BigInteger bigInteger1 = bigInteger0.shiftLeft(55);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      Base64.encodeInteger(bigInteger1);
      base64_0.decode(byteArray1);
      Base64.isBase64((byte)0);
      BigInteger bigInteger2 = BigInteger.TEN;
      bigInteger2.not();
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64.isBase64("2n?vDbx9dh#[\r");
      Base64 base64_1 = new Base64(false);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.shiftLeft(8168);
      bigInteger0.shiftLeft(5373);
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger1);
      BigInteger bigInteger2 = new BigInteger(byteArray2);
      Base64.encodeInteger(bigInteger2);
      base64_1.decode(byteArray1);
      Base64.isBase64((byte)14);
      BigInteger bigInteger3 = bigInteger1.not();
      Object object0 = new Object();
      try { 
        base64_1.decode((Object) bigInteger3);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = Base64.decodeBase64("d");
      Base64.encodeBase64String(byteArray0);
      base64_0.isUrlSafe();
      base64_0.decode((byte[]) null, (-327), (-327));
      Base64 base64_1 = new Base64(1, (byte[]) null, true);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Object object0 = new Object();
      Base64.encodeBase64(byteArray1);
      base64_0.readResults(byteArray1, 32, (-81));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      Base64.encodeBase64URLSafeString(byteArray1);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.shiftLeft(4057);
      BigInteger bigInteger1 = bigInteger0.shiftLeft((byte)0);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      Base64.encodeInteger(bigInteger0);
      Base64.encodeInteger(bigInteger1);
      byte[] byteArray3 = base64_0.decode(byteArray2);
      base64_0.decode("");
      Base64.isBase64((byte)12);
      Object object0 = new Object();
      Base64 base64_1 = new Base64();
      base64_1.decode((Object) "");
      Object object1 = base64_1.decode((Object) "org.apache.commons.codec.DecoderException");
      base64_1.encode(object1);
      Object object2 = new Object();
      Base64.encodeBase64String(byteArray3);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-12);
      byteArray0[0] = (byte) (-12);
      byte byte1 = (byte) (-82);
      byteArray0[1] = (byte) (-82);
      Base64.decodeBase64(byteArray0);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64.encodeBase64String(byteArray1);
      base64_0.isUrlSafe();
      int int0 = (-327);
      boolean boolean0 = false;
      Base64.encodeBase64(byteArray1);
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      boolean boolean0 = Base64.isBase64("");
      byte[] byteArray0 = new byte[5];
      Base64 base64_0 = new Base64((byte)9, byteArray0, true);
      base64_0.encode(byteArray0, (int) (byte)9, (-1));
      boolean boolean1 = base64_0.hasData();
      assertTrue(boolean1 == boolean0);
      assertTrue(base64_0.isUrlSafe());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = null;
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64.encodeBase64Chunked(byteArray0);
      boolean boolean0 = true;
      Base64 base64_0 = new Base64((-603), byteArray0, true);
      Base64.encodeBase64((byte[]) null, true, true, 313);
      Base64.decodeBase64((byte[]) null);
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 64, 64);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-50), byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64(byteArray1, true);
      Base64 base64_1 = new Base64(false);
      Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64("UTF-16LE");
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Base64.isBase64("n\"");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)62;
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, (int) (byte)62);
      Base64.encodeBase64URLSafe(byteArray1);
      Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false);
      byte[] byteArray3 = new byte[6];
      byteArray3[0] = (byte)9;
      byteArray3[1] = (byte)0;
      byteArray3[2] = (byte)0;
      byteArray3[3] = (byte)15;
      byteArray3[4] = (byte)0;
      byteArray3[5] = (byte)62;
      Base64.discardWhitespace(byteArray3);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(1739, byteArray2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [AD4AAAA=]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = Base64.decodeBase64("d");
      Base64.encodeBase64String(byteArray0);
      base64_0.isUrlSafe();
      base64_0.decode((byte[]) null, (-327), (-327));
      Base64 base64_1 = new Base64(1, (byte[]) null, false);
      // Undeclared exception!
      try { 
        base64_1.encode((byte[]) null, 184, 53);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Base64.isBase64("n\"");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64((byte)62);
      base64_0.encodeToString(byteArray1);
      byte[] byteArray2 = null;
      Base64.encodeBase64((byte[]) null, false, false, 4779);
      base64_0.decode((byte[]) null);
      Base64 base64_1 = new Base64((byte)0, (byte[]) null);
      Base64.encodeBase64String((byte[]) null);
      base64_0.readResults(byteArray0, (byte)62, 0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger0);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Base64.isBase64("n\"");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)9;
      byte byte0 = (byte)62;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64(false);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.shiftLeft((byte)0);
      bigInteger0.shiftLeft(76);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeInteger(bigInteger0);
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray2 = base64_0.decode(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false);
      base64_0.decode("CT4ADgA");
      base64_0.encodeToString(byteArray3);
      Base64.isBase64((byte)63);
      Object object0 = new Object();
      base64_0.encode(byteArray1, (-1), (int) (byte)0);
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Base64.isBase64("n\"");
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.isBase64("Parameter supplied to Base64 encode is not a byte[]");
      Base64 base64_0 = new Base64((byte)0);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Base64 base64_1 = new Base64((byte)62);
      base64_1.hasData();
      base64_0.isUrlSafe();
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64(byteArray1, false);
      base64_1.decode(byteArray0);
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)14;
      byteArray2[2] = (byte)9;
      byteArray2[3] = (byte)62;
      byte[] byteArray3 = base64_1.encode(byteArray2);
      Base64 base64_2 = new Base64((byte)14);
      // Undeclared exception!
      try { 
        base64_2.encode(byteArray3, 0, (int) (byte)14);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = Base64.decodeBase64("d");
      Base64.encodeBase64String(byteArray0);
      base64_0.isUrlSafe();
      base64_0.decode((byte[]) null, (-327), (-327));
      base64_0.decode(".5CK{J,y/e?3UR|Em");
      Base64.decodeBase64(byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = Base64.decodeBase64("");
      Base64 base64_0 = new Base64((-832), byteArray1);
      Base64.encodeBase64(byteArray2, true, true, (-3841));
      base64_0.encodeToString(byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      boolean boolean0 = Base64.isBase64("B^?YiHq\"]mG\"YMhH");
      base64_0.decode(byteArray2);
      boolean boolean1 = base64_0.hasData();
      assertTrue(boolean1 == boolean0);
      
      bigInteger0.toString(64);
      base64_0.decode("");
      Base64.decodeBase64(byteArray0);
      base64_0.encode(byteArray1);
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      int int0 = base64_0.readResults(byteArray2, 118, (-3841));
      assertEquals(0, int0);
      
      Base64.isBase64((byte)0);
      base64_0.avail();
      String string0 = Base64.encodeBase64String(byteArray3);
      assertEquals("", string0);
      
      base64_0.decode((Object) "");
      assertFalse(base64_0.isUrlSafe());
      
      String string1 = Base64.encodeBase64String(byteArray1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = Base64.decodeBase64("d");
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("", string0);
      
      boolean boolean0 = base64_0.isUrlSafe();
      assertFalse(boolean0);
      
      Base64.encodeBase64(byteArray0, false, true);
      base64_0.decode((byte[]) null, (-327), (-327));
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true, 1);
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64URLSafe(byteArray1);
      Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      assertEquals(0, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Base64.isBase64("n\"");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64((byte)62);
      base64_0.encodeToString(byteArray1);
      byte[] byteArray2 = null;
      Base64.encodeBase64((byte[]) null, false, false, 4779);
      base64_0.decode((byte[]) null);
      Base64 base64_1 = new Base64((byte)0, (byte[]) null);
      base64_0.readResults(byteArray0, (byte)62, 0);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)88;
      String string0 = null;
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Base64.decodeBase64((String) null);
      Base64 base64_0 = new Base64((-1), (byte[]) null, true);
      base64_0.decode((String) null);
      base64_0.decode((String) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64((byte)78);
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)120);
      //  // Unstable assertion: assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte)120;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, (int) (byte)120);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      byte[] byteArray3 = Base64.decodeBase64("]hE7:5");
      byte[] byteArray4 = new byte[1];
      byteArray4[0] = (byte)120;
      Base64.encodeBase64URLSafe(byteArray2);
      byte[] byteArray5 = Base64.encodeBase64Chunked(byteArray4);
      base64_0.encodeToString(byteArray1);
      Base64.encodeBase64URLSafe(byteArray5);
      Base64.encodeBase64URLSafe(byteArray5);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)101, (byte)65, (byte)61, (byte)61, (byte) (-49), (byte)10}, byteArray5);
      //  // Unstable assertion: assertEquals(6, byteArray5.length);
      
      byte[] byteArray6 = Base64.encodeBase64(byteArray3, true);
      byte[] byteArray7 = Base64.discardWhitespace(byteArray6);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)104, (byte)69, (byte)55, (byte)53, (byte) (-49)}, byteArray7);
      //  // Unstable assertion: assertEquals(5, byteArray7.length);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = Base64.decodeBase64("d");
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("", string0);
      
      boolean boolean0 = base64_0.isUrlSafe();
      assertFalse(boolean0);
      
      base64_0.decode((byte[]) null, (-327), (-327));
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true, 1);
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64((byte[]) null, true, false, 1);
      int int0 = base64_0.readResults(byteArray0, (-809), 16);
      assertEquals((-1), int0);
      
      boolean boolean1 = Base64.isBase64(byteArray1);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Object object0 = base64_0.decode((Object) "z7wSX<?X/@R|");
      base64_0.decode(object0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("AAAA", string0);
      
      byte[] byteArray1 = Base64.decodeBase64("UTF-16");
      base64_0.encode(byteArray0, (int) (byte)0, 4385);
      String string1 = base64_0.encodeToString(byteArray1);
      assertEquals(4, byteArray1.length);
      assertEquals("UTF+1w==", string1);
      
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      assertEquals(3, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Base64 base64_0 = new Base64(2523, (byte[]) null, false);
      Base64.encodeBase64((byte[]) null);
      Base64.encodeBase64Chunked((byte[]) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      bigInteger0.pow(2523);
      Base64.encodeBase64((byte[]) null, false, true);
      base64_0.encode(byteArray0);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = BigInteger.ZERO;
      bigInteger2.subtract(bigInteger1);
      base64_0.decode((byte[]) null);
      byte[] byteArray1 = Base64.encodeBase64Chunked((byte[]) null);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[2];
      base64_0.readResults(byteArray0, (-1007), 1168);
      byte byte0 = (byte)30;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (-1052), 82);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1052
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Object object0 = base64_0.decode((Object) "z7wSX<?X/@R|");
      base64_0.decode(object0);
      byte[] byteArray0 = new byte[3];
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_1 = new Base64(false);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.shiftLeft(4);
      bigInteger1.shiftLeft((byte)0);
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      BigInteger bigInteger2 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger2);
      byte[] byteArray2 = base64_1.decode(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false);
      assertArrayEquals(new byte[] {(byte)69, (byte)65, (byte)61, (byte)61}, byteArray3);
      assertEquals(4, byteArray3.length);
      
      base64_0.decode("");
      Base64.isBase64((byte)0);
      Object object1 = new Object();
      base64_1.decode((Object) "");
      Object object2 = new Object();
      base64_1.encode(object0);
      int int0 = base64_1.readResults(byteArray1, 2192, 913);
      assertArrayEquals(new byte[] {(byte)69, (byte)65, (byte)61, (byte)61}, byteArray1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Base64.isBase64("n\"");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)14;
      Base64 base64_0 = new Base64(1051, byteArray0, false);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 0, 1051);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byte byte0 = (byte)23;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 1, 113);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Base64.isBase64((byte)120);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte)120;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false, (int) (byte)120);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray3 = Base64.decodeBase64("]hE7:5");
      //  // Unstable assertion: assertEquals(3, byteArray3.length);
      
      byte[] byteArray4 = new byte[1];
      byte[] byteArray5 = Base64.encodeBase64URLSafe(byteArray1);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray5);
      //  // Unstable assertion: assertEquals((short) (-12534), bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals(14, byteArray5.length);
      
      byte[] byteArray6 = Base64.encodeBase64Chunked(byteArray1);
      //  // Unstable assertion: assertEquals(18, byteArray6.length);
      
      base64_0.encodeToString(byteArray0);
      Base64.isBase64((byte)120);
      base64_0.decode(byteArray1);
      Base64.isArrayByteBase64(byteArray4);
      base64_0.encode(byteArray0);
      byte[] byteArray7 = new byte[1];
      byteArray7[0] = (byte)0;
      byte[] byteArray8 = Base64.encodeBase64(byteArray7, true);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61, (byte) (-49), (byte)10}, byteArray8);
      
      byte[] byteArray9 = new byte[5];
      byteArray9[0] = (byte)120;
      byteArray9[1] = (byte)120;
      byteArray9[2] = (byte)120;
      byteArray9[3] = (byte) (-54);
      byteArray9[4] = (byte)0;
      boolean boolean0 = Base64.isBase64(byteArray9);
      //  // Unstable assertion: assertFalse(boolean0);
      
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray9);
      //  // Unstable assertion: assertEquals((byte)28, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte byte0 = (byte)121;
      Base64 base64_0 = new Base64(1);
      base64_0.encodeToString((byte[]) null);
      base64_0.encode((byte[]) null, (int) (byte)0, (int) (byte) (-11));
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.isBase64((byte)0);
      Object object0 = new Object();
      base64_0.decode((Object) "");
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = "o";
      Base64.isBase64("o");
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)1;
      byteArray0[0] = (byte)1;
      byte byte1 = (byte)83;
      byteArray0[1] = (byte)83;
      int int0 = 0;
      base64_0.decode(byteArray0, 1, 0);
      try { 
        base64_0.encode((Object) "o");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Base64.isBase64("n\"");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)0;
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("CT4ADgA", string0);
      
      Base64 base64_0 = new Base64(false);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.shiftLeft((byte)0);
      bigInteger0.shiftLeft(76);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      base64_0.encode(byteArray0, 2991, (-2454));
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64((-603));
      base64_0.encodeToString(byteArray0);
      Base64.isBase64((byte)49);
      Base64.isArrayByteBase64(byteArray1);
      base64_0.encode((byte[]) null);
      byte[] byteArray2 = Base64.encodeBase64((byte[]) null, true);
      assertNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte)31;
      Base64.encodeBase64(byteArray0, false, true, (int) (byte)12);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray1);
      //  // Unstable assertion: assertEquals(0, byteArray3.length);
      
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray2);
      base64_0.encodeToString(byteArray2);
      Base64.encodeBase64(byteArray0, true, true, 52);
      byte[] byteArray5 = new byte[3];
      byteArray5[0] = (byte)94;
      byteArray5[1] = (byte)12;
      byteArray5[2] = (byte)31;
      base64_0.readResults(byteArray5, 1925, (byte)77);
      boolean boolean0 = Base64.isBase64(byteArray4);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)122, (byte)119, (byte)111, (byte)61, (byte) (-49), (byte)10}, byteArray4);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)94;
      Base64.encodeBase64(byteArray0, true, true, 76);
      Base64 base64_1 = new Base64(true);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64("]hE7:5");
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray0);
      //  // Unstable assertion: assertEquals(7, byteArray3.length);
      
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray2);
      String string0 = base64_1.encodeToString(byteArray4);
      //  // Unstable assertion: assertEquals("aEU3Nc8K\uFFFD\n", string0);
      
      Base64.encodeBase64(byteArray2, false, true, 93);
      int int0 = base64_1.readResults(byteArray1, 1324, (byte) (-40));
      //  // Unstable assertion: assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)0;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      boolean boolean0 = Base64.isBase64("OAY0)!%Ii0mJ]");
      //  // Unstable assertion: assertFalse(boolean0);
      
      base64_0.decode((Object) "OAY0)!%Ii0mJ]");
      String string0 = Base64.encodeBase64String(byteArray0);
      //  // Unstable assertion: assertEquals("YgA=", string0);
      
      byte[] byteArray2 = base64_0.encode(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)87, (byte)87, (byte)100, (byte)66, (byte)80, (byte)99, (byte)56, (byte)75, (byte) (-49), (byte)10}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)88;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_0 = new Base64((-1));
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)2;
      byteArray2[2] = (byte) (-10);
      byteArray2[3] = (byte)52;
      byteArray2[4] = (byte)111;
      byteArray2[5] = (byte)111;
      byteArray2[6] = (byte)2;
      byteArray2[7] = (byte)88;
      byteArray2[8] = (byte)52;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray2, (int) (byte)111, (int) (byte)111);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 111
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-118);
      byteArray0[5] = (byte)83;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-114);
      byteArray0[8] = (byte) (-112);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      //  // Unstable assertion: assertEquals(12, byteArray1.length);
      
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)0;
      Base64.decodeInteger(byteArray2);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      String string0 = base64_0.encodeToString(byteArray3);
      //  // Unstable assertion: assertEquals("QUE9Pc8K", string0);
      
      Base64.isBase64((byte) (-118));
      Base64.isArrayByteBase64(byteArray3);
      base64_0.encode(byteArray0);
      byte[] byteArray4 = Base64.encodeBase64(byteArray0, true);
      //  // Unstable assertion: assertEquals(14, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Base64 base64_0 = new Base64(43);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte)0;
      base64_0.encodeToString(byteArray0);
      int int0 = 445;
      base64_0.encode((byte[]) null, 43, 445);
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.isBase64((byte)0);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)112;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((short)242, bigInteger0.shortValue());
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertEquals(8, byteArray1.length);
      
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)33;
      byteArray2[3] = (byte)112;
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)33;
      String string0 = Base64.encodeBase64String(byteArray2);
      assertEquals("AAAhcAAh", string0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte)31;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true, (int) (byte)12);
      assertArrayEquals(new byte[] {(byte)50, (byte)65, (byte)120, (byte)101, (byte)84, (byte)82, (byte)56}, byteArray1);
      
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)113;
      byteArray2[1] = (byte)64;
      byteArray2[2] = (byte)40;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)100;
      byteArray2[5] = (byte)104;
      byteArray2[6] = (byte)21;
      byte[] byteArray3 = base64_0.decode(byteArray2);
      assertArrayEquals(new byte[] {(byte) (-87), (byte) (-40)}, byteArray3);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      byte[] byteArray2 = Base64.decodeBase64("");
      Base64 base64_0 = new Base64((-832), byteArray1);
      Base64.encodeBase64(byteArray2, true, true, (-3841));
      base64_0.encodeToString(byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      Base64.isBase64("B^?YiHq\"]mG\"YMhH");
      byte[] byteArray3 = base64_0.decode(byteArray2);
      base64_0.hasData();
      base64_0.isUrlSafe();
      Base64.encodeBase64String(byteArray3);
      Base64.encodeBase64(byteArray0, false);
      base64_0.decode(byteArray3);
      byte[] byteArray4 = new byte[2];
      byte byte0 = (byte) (-82);
      byteArray4[0] = (byte) (-82);
      byteArray4[1] = (byte)0;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = Base64.decodeBase64("d");
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("", string0);
      
      boolean boolean0 = base64_0.isUrlSafe();
      assertFalse(boolean0);
      
      base64_0.decode((byte[]) null, (-327), (-327));
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true, 1);
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64URLSafe(byteArray1);
      Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      assertEquals(0, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      Base64.decodeInteger(byteArray0);
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = base64_0.decode("rGJ||NVP:}u4!zO");
      assertArrayEquals(new byte[] {(byte) (-84), (byte)98, (byte)77, (byte)84, (byte) (-5), (byte) (-72), (byte) (-52)}, byteArray1);
      assertEquals(7, byteArray1.length);
      
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)83, (byte)100, (byte)121, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65}, byteArray2);
      assertEquals(10, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-93);
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      base64_0.decode(byteArray0, (-3929), (int) (byte)0);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byte[] byteArray2 = base64_0.encode(byteArray0);
      Base64.encodeBase64String(byteArray0);
      base64_0.avail();
      base64_0.decode(byteArray0);
      Base64.decodeInteger(byteArray0);
      base64_0.hasData();
      base64_0.readResults(byteArray1, (byte) (-1), (byte) (-1));
      byte[] byteArray3 = base64_0.decode("owAA/w==");
      byte[] byteArray4 = Base64.encodeBase64(byteArray0, false, false);
      base64_0.encode(byteArray4);
      base64_0.decode(byteArray2, (int) (byte) (-1), (-889));
      base64_0.decode("owAA/w==");
      Base64.isBase64(byteArray3);
      try { 
        base64_0.encode((Object) "owAA/w==");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64(byteArray0, false);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)117;
      Base64.encodeBase64String(byteArray1);
      base64_0.hasData();
      Base64.isArrayByteBase64(byteArray0);
      byte[] byteArray2 = base64_0.decode(byteArray0);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray2);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      int int0 = 0;
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(0, byteArray0, false);
      base64_0.encode(byteArray0);
      Base64.encodeBase64String(byteArray0);
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64.encodeBase64((byte[]) null, false, false);
      base64_0.isUrlSafe();
      byte[] byteArray0 = new byte[7];
      Base64.encodeBase64Chunked((byte[]) null);
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Object object0 = base64_0.decode((Object) "z7wSX<?X/@R|");
      Object object1 = base64_0.decode(object0);
      assertNotSame(object1, object0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)124;
      base64_0.encode(byteArray0, (int) (byte)61, 657);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)69, (byte)119, (byte)65, (byte)88, (byte)113, (byte)52, (byte)65}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Base64.isBase64((byte)120);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte)120;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, (int) (byte)120);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      Base64.decodeBase64("]hE7:5");
      byte[] byteArray3 = new byte[1];
      byteArray3[0] = (byte)120;
      Base64.encodeBase64URLSafe(byteArray2);
      Base64.encodeBase64Chunked(byteArray3);
      base64_0.encodeToString(byteArray1);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray2, true, true, (-600));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of -600
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Base64.encodeBase64((byte[]) null);
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64 base64_0 = new Base64((-2362), (byte[]) null);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Base64.isBase64("n\"");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)9;
      byte byte0 = (byte)62;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64(false);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.shiftLeft((byte)0);
      bigInteger0.shiftLeft(76);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeInteger(bigInteger0);
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Base64.encodeBase64(byteArray1, false);
      base64_0.decode("CT4ADgA");
      Base64.isBase64((byte)63);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[2];
      base64_0.readResults(byteArray0, (-1007), 1168);
      byteArray0[0] = (byte)30;
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      bigInteger0.pow(1975);
      Base64.encodeBase64(byteArray0, true, true);
      byteArray0[1] = (byte) (-48);
      base64_0.encode(byteArray0);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.add(bigInteger0);
      bigInteger0.subtract(bigInteger1);
      byte[] byteArray2 = base64_0.decode(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      //  // Unstable assertion: assertEquals(4, byteArray1.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61, (byte)0, (byte)10}, byteArray3);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte)98;
      byteArray0[5] = (byte) (-81);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(608, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [G\u0000h\uFFFDb\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      try { 
        base64_0.encode((Object) "Parameter supplied to Base64 decode is not a byte[] or a String");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-95);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      assertEquals(12, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      int int0 = 2523;
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64(2523, (byte[]) null, false);
      Base64.encodeBase64((byte[]) null);
      Base64.encodeBase64Chunked((byte[]) null);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 2523, 2523);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64 base64_0 = new Base64((-1020), byteArray0, true);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61}, byteArray1);
      assertArrayEquals(new byte[] {(byte)81, (byte)85, (byte)69, (byte)57, (byte)80, (byte)81, (byte)61, (byte)61}, byteArray2);
      
      base64_0.decode(byteArray0, (-1020), (-1020));
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray4 = Base64.encodeBase64(byteArray0, false, true);
      String string0 = base64_0.encodeToString(byteArray3);
      assertEquals("QUE9PQ0K", string0);
      
      base64_0.decode(byteArray0, (-1020), 0);
      byte[] byteArray5 = base64_0.decode(byteArray0);
      base64_0.decode(byteArray4, (int) (byte)0, (int) (byte)0);
      Base64.encodeBase64Chunked(byteArray5);
      base64_0.decode("");
      byte[] byteArray6 = Base64.decodeBase64(byteArray3);
      assertArrayEquals(new byte[] {(byte)0}, byteArray6);
      
      base64_0.isUrlSafe();
      assertNotSame(byteArray0, byteArray5);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Base64.isBase64("]");
      base64_0.decode(byteArray0, (-2721), 0);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false);
      Base64.encodeBase64(byteArray1, false);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray2);
      assertEquals(8, byteArray3.length);
      assertArrayEquals(new byte[] {(byte)81, (byte)86, (byte)69, (byte)57, (byte)80, (byte)81, (byte)61, (byte)61}, byteArray3);
      
      boolean boolean1 = base64_0.isUrlSafe();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-4);
      byteArray0[6] = (byte)70;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000\uFFFD\u000Fj\u0000\uFFFDF]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-50), byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      base64_0.decode(byteArray2);
      Base64.decodeBase64("");
      int int0 = base64_0.readResults(byteArray2, 11, 85);
      assertEquals(0, int0);
      assertFalse(base64_0.isUrlSafe());
  }
}
