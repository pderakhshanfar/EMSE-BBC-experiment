/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:07:38 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[11];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byteArray0[1] = (byte)2;
      base64_0.encode(byteArray1, (int) (byte)2, (int) (byte)2);
      byteArray0[1] = (byte)2;
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      base64_0.encode(byteArray1, (int) (byte)2, (-481));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)43;
      Base64.encodeBase64(byteArray0, false, false, 14);
      BigInteger bigInteger0 = BigInteger.ZERO;
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(119);
      base64_0.readResults(byteArray0, 119, 119);
      byte[] byteArray1 = Base64.decodeBase64("org.apache.commosScod-c.DecoderException");
      base64_0.encode(byteArray1, 0, 0);
      Base64 base64_1 = new Base64(64, (byte[]) null, true);
      Base64.decodeBase64(byteArray0);
      // Undeclared exception!
      try { 
        base64_1.decode(byteArray1, 0, 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 27
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64(128);
      base64_0.readResults(byteArray0, 128, 128);
      byte[] byteArray1 = Base64.decodeBase64("org.apachH.commons.codec.D1coderException");
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      bigInteger0.longValue();
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)43;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byteArray0[1] = (byte)2;
      base64_0.decode(byteArray1, (int) (byte)2, (int) (byte)2);
      base64_0.encode(byteArray1, (int) (byte)2, (int) (byte)2);
      byteArray0[1] = (byte)2;
      byteArray0[4] = (byte)0;
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)2;
      byteArray2[1] = (byte)15;
      byteArray2[2] = (byte)1;
      byteArray2[3] = (byte)0;
      Base64.encodeBase64(byteArray2, false, false, (int) (byte)15);
      base64_0.readResults(byteArray0, 0, 449);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)43;
      base64_0.decode(byteArray0, (int) (byte)0, (int) (byte)0);
      base64_0.encode(byteArray0, (int) (byte)5, (int) (byte)2);
      byteArray0[1] = (byte)43;
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      base64_0.encode(byteArray1, (int) (byte)2, (-1634));
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64(119);
      base64_0.readResults(byteArray0, 119, 119);
      Base64.decodeBase64("org.apachH.commons.codec.D1coderException");
      base64_0.encode((byte[]) null, 119, (-1));
      BigInteger bigInteger0 = BigInteger.ZERO;
      int int0 = 3468;
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, 3468, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2017);
      BigInteger bigInteger0 = BigInteger.probablePrime(2017, mockRandom0);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)69;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      byteArray0[2] = (byte) (-31);
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      BigInteger.probablePrime((byte)69, mockRandom0);
      bigInteger2.divideAndRemainder(bigInteger0);
      bigInteger0.shiftLeft((-1847));
      mockRandom0.doubles(1660L);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = Base64.decodeBase64("QVFBQUFBRUFBQUFDQUFBQUF3QUFBQVFBQUFBRkFBQUFCZ0FBQUFjQUFBQUlBQUFBQ1FBQUFBb0FBQUFMQUFBQURBQUFBQTBBQUFBT0FBQUFEd0FBQUJBQUFBQVJBQUFBRWdBQUFCTUFBQUFVQUFBQUZRQUFBQllBQUFBWEFBQUFHQUFBQUJrQUFBQWFBQUFBR3dBQUFCd0FBQUFkQUFBQUhnQUFBQjhBQUFBZ0FBQUFJUUFBQUNJQUFBQWpBQUFBSkFBQUFDVUFBQUFtQUFBQUp3QUFBQ2dBQUFBcEFBQUFLZ0FBQUNzQUFBQXNBQUFBTFFBQUFDNEFBQUF2QUFBQU1BQUFBREVBQUFBeUFBQUFNd0FBQURRQUFBQTFBQUFBTmdBQUFEY0FBQUE0QUFBQU9RQUFBRG9BQUFBN0FBQUFQQUFBQUQwQUFBQStBQUFGdXc9PQ");
      Base64.encodeBase64URLSafeString(byteArray2);
      byte[] byteArray3 = Base64.decodeBase64("QVFBQUFBRUFBQUFDQUFBQUF3QUFBQVFBQUFBRkFBQUFCZ0FBQUFjQUFBQUlBQUFBQ1FBQUFBb0FBQUFMQUFBQURBQUFBQTBBQUFBT0FBQUFEd0FBQUJBQUFBQVJBQUFBRWdBQUFCTUFBQUFVQUFBQUZRQUFBQllBQUFBWEFBQUFHQUFBQUJrQUFBQWFBQUFBR3dBQUFCd0FBQUFkQUFBQUhnQUFBQjhBQUFBZ0FBQUFJUUFBQUNJQUFBQWpBQUFBSkFBQUFDVUFBQUFtQUFBQUp3QUFBQ2dBQUFBcEFBQUFLZ0FBQUNzQUFBQXNBQUFBTFFBQUFDNEFBQUF2QUFBQU1BQUFBREVBQUFBeUFBQUFNd0FBQURRQUFBQTFBQUFBTmdBQUFEY0FBQUE0QUFBQU9RQUFBRG9BQUFBN0FBQUFQQUFBQUQwQUFBQStBQUFGdXc9PQ");
      byte[] byteArray4 = Base64.decodeBase64("QVFBQUFBRUFBQUFDQUFBQUF3QUFBQVFBQUFBRkFBQUFCZ0FBQUFjQUFBQUlBQUFBQ1FBQUFBb0FBQUFMQUFBQURBQUFBQTBBQUFBT0FBQUFEd0FBQUJBQUFBQVJBQUFBRWdBQUFCTUFBQUFVQUFBQUZRQUFBQllBQUFBWEFBQUFHQUFBQUJrQUFBQWFBQUFBR3dBQUFCd0FBQUFkQUFBQUhnQUFBQjhBQUFBZ0FBQUFJUUFBQUNJQUFBQWpBQUFBSkFBQUFDVUFBQUFtQUFBQUp3QUFBQ2dBQUFBcEFBQUFLZ0FBQUNzQUFBQXNBQUFBTFFBQUFDNEFBQUF2QUFBQU1BQUFBREVBQUFBeUFBQUFNd0FBQURRQUFBQTFBQUFBTmdBQUFEY0FBQUE0QUFBQU9RQUFBRG9BQUFBN0FBQUFQQUFBQUQwQUFBQStBQUFGdXc9PQ");
      Base64 base64_0 = new Base64(38);
      base64_0.encode(byteArray3);
      BigInteger bigInteger3 = new BigInteger(byteArray4);
      Base64.encodeInteger(bigInteger3);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)43;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      base64_0.decode(byteArray1, (int) (byte)0, (int) (byte)0);
      base64_0.encode(byteArray1, (int) (byte)5, (int) (byte)2);
      byteArray0[1] = (byte)5;
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      base64_0.encode(byteArray2, (int) (byte)2, (-1634));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)43;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byteArray0[1] = (byte)2;
      base64_0.decode(byteArray1, (int) (byte)2, (int) (byte)2);
      base64_0.encode(byteArray1, (int) (byte)5, (int) (byte)2);
      byteArray0[1] = (byte)5;
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      base64_0.encode(byteArray2, 26, (-1634));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)9;
      Base64.isBase64(byteArray1);
      Base64 base64_0 = new Base64((byte)9);
      base64_0.readResults(byteArray0, (byte)9, (-2782));
      Base64.decodeBase64("!H}SZ:,+D$");
      Base64 base64_1 = new Base64(119, (byte[]) null, false);
      base64_1.hasData();
      Base64 base64_2 = new Base64(0);
      base64_2.encode(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 0, 64);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64(76, byteArray0, false);
      Base64.decodeBase64("US-ASCII");
      base64_0.hasData();
      Base64 base64_2 = new Base64(2137);
      byte[] byteArray1 = new byte[12];
      byteArray1[0] = (byte) (-110);
      byteArray1[1] = (byte)1;
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2017);
      BigInteger bigInteger0 = BigInteger.probablePrime(2017, mockRandom0);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)69;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      byteArray0[2] = (byte) (-31);
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      BigInteger bigInteger3 = BigInteger.probablePrime((byte)69, mockRandom0);
      bigInteger2.divideAndRemainder(bigInteger0);
      mockRandom0.doubles(1660L);
      mockRandom0.setSeed((byte) (-31));
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = Base64.decodeBase64("QVFBQUFBRUFBQUFDQUFBQUF3QUFBQVFBQUFBRkFBQUFCZ0FBQUFjQUFBQUlBQUFBQ1FBQUFBb0FBQUFMQUFBQURBQUFBQTBBQUFBT0FBQUFEd0FBQUJBQUFBQVJBQUFBRWdBQUFCTUFBQUFVQUFBQUZRQUFBQllBQUFBWEFBQUFHQUFBQUJrQUFBQWFBQUFBR3dBQUFCd0FBQUFkQUFBQUhnQUFBQjhBQUFBZ0FBQUFJUUFBQUNJQUFBQWpBQUFBSkFBQUFDVUFBQUFtQUFBQUp3QUFBQ2dBQUFBcEFBQUFLZ0FBQUNzQUFBQXNBQUFBTFFBQUFDNEFBQUF2QUFBQU1BQUFBREVBQUFBeUFBQUFNd0FBQURRQUFBQTFBQUFBTmdBQUFEY0FBQUE0QUFBQU9RQUFBRG9BQUFBN0FBQUFQQUFBQUQwQUFBQStBQUFGdXc9PQ");
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger3);
      Base64 base64_0 = new Base64((byte)69);
      base64_0.encode(byteArray3);
      Base64.discardWhitespace(byteArray1);
      base64_0.decode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(119);
      base64_0.readResults(byteArray0, 119, 119);
      byte[] byteArray1 = Base64.decodeBase64("org.apachH.commons.codec.D1coderException");
      base64_0.encode(byteArray1, 0, (-2926));
      Base64 base64_1 = new Base64(64, (byte[]) null, true);
      base64_1.hasData();
      Base64 base64_2 = new Base64(119);
      base64_2.encode(byteArray1);
      base64_1.decode(byteArray1, 0, 852);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 110;
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64(110, (byte[]) null, false);
      base64_0.decode("");
      Base64.encodeBase64Chunked((byte[]) null);
      base64_0.encodeToString((byte[]) null);
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, 110, 78);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)112;
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byteArray0[1] = (byte)109;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false);
      Base64.encodeBase64URLSafeString(byteArray2);
      base64_0.decode(byteArray1, 1, 1197);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      Base64.discardWhitespace(byteArray2);
      Base64.discardWhitespace(byteArray3);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-1794), byteArray0, true);
      byte[] byteArray1 = new byte[1];
      Base64.encodeBase64(byteArray1, true, false);
      byteArray1[0] = (byte) (-119);
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2004);
      BigInteger bigInteger0 = BigInteger.probablePrime(2004, mockRandom0);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)69;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger0.divideAndRemainder(bigInteger1);
      byteArray0[2] = (byte) (-31);
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      bigInteger2.getLowestSetBit();
      BigInteger.probablePrime((byte)69, mockRandom0);
      bigInteger2.divideAndRemainder(bigInteger0);
      mockRandom0.setSeed((byte) (-31));
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = Base64.decodeBase64("CAAAAAEAAAACAAAAAwAAAAQAAAAFAAAABgAAAAcAAAAIAAAACQAAAAoAAAALAAAADAAAAA0AAAAOAAAADwAAABAAAAARAAAAEgAAABMAAAAUAAAAFQAAABYAAAAXAAAAGAAAABkAAAAaAAAAGwAAABwAAAAdAAAAHgAAAB8AAAAgAAAAIQAAACIAAAAjAAAAJAAAACUAAAAmAAAAJwAAACgAAAApAAAAKgAAACsAAAAsAAAALQAAAC4AAAAvAAAAMAAAADEAAAAyAAAAMwAAADQAAAA1AAAANgAAADcAAAA4AAAAOQAAADoAAAA7AAAAPAAAAD0AAAA-DZs");
      byte[] byteArray3 = Base64.decodeBase64("CAAAAAEAAAACAAAAAwAAAAQAAAAFAAAABgAAAAcAAAAIAAAACQAAAAoAAAALAAAADAAAAA0AAAAOAAAADwAAABAAAAARAAAAEgAAABMAAAAUAAAAFQAAABYAAAAXAAAAGAAAABkAAAAaAAAAGwAAABwAAAAdAAAAHgAAAB8AAAAgAAAAIQAAACIAAAAjAAAAJAAAACUAAAAmAAAAJwAAACgAAAApAAAAKgAAACsAAAAsAAAALQAAAC4AAAAvAAAAMAAAADEAAAAyAAAAMwAAADQAAAA1AAAANgAAADcAAAA4AAAAOQAAADoAAAA7AAAAPAAAAD0AAAA-DZs");
      Base64 base64_0 = new Base64((byte)69);
      base64_0.encode(byteArray3);
      byte[] byteArray4 = Base64.discardWhitespace(byteArray1);
      assertFalse(byteArray4.equals((Object)byteArray2));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-1);
      byte byte0 = (byte)67;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte) (-31);
      byteArray0[4] = (byte)76;
      Base64.isBase64(byteArray0);
      int int0 = 119;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(37, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [{\uFFFDC\uFFFDL]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(119, byteArray0);
      Base64.decodeBase64("iu:+Qvf[%");
      boolean boolean0 = true;
      Base64 base64_1 = new Base64((byte)2, byteArray0);
      base64_1.decode((String) null);
      // Undeclared exception!
      try { 
        base64_1.decode((byte[]) null, 31, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      Base64 base64_1 = new Base64();
      Object object0 = base64_1.decode((Object) "lineSeperator must not contain base64 characters: [");
      Object object1 = base64_0.decode(object0);
      base64_0.encode(object1);
      try { 
        base64_1.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Base64.isBase64("gHy4Az");
      int int0 = Base64.MIME_CHUNK_SIZE;
      byte[] byteArray0 = Base64.decodeBase64((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(119);
      base64_0.readResults(byteArray0, 119, 119);
      byte[] byteArray1 = Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      base64_0.encode(byteArray1, 0, (-2926));
      Base64 base64_1 = new Base64(64, (byte[]) null, true);
      base64_1.hasData();
      Base64 base64_2 = new Base64(119);
      base64_2.encode(byteArray1);
      // Undeclared exception!
      try { 
        base64_1.decode(byteArray1, 0, 852);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 27
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(119);
      base64_0.readResults(byteArray0, 119, 119);
      byte[] byteArray1 = Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      base64_0.encode(byteArray1, 119, (-2926));
      base64_0.hasData();
      byte[] byteArray2 = base64_0.encode(byteArray1);
      assertEquals(38, byteArray2.length);
      assertFalse(base64_0.isUrlSafe());
      
      Base64.isBase64(byteArray2);
      Object object0 = base64_0.decode((Object) "org.apache.commons.codec.DecoderException");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = Base64.encodeBase64URLSafeString((byte[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-12);
      byte byte0 = (byte)36;
      byteArray0[3] = (byte)36;
      byte byte1 = (byte)29;
      byteArray0[4] = (byte)29;
      byteArray0[5] = (byte)66;
      byteArray0[6] = (byte)119;
      byteArray0[7] = (byte)122;
      Base64.isBase64(byteArray0);
      int int0 = 2932;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(2932, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [f+\uFFFD$\u001DBwz]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertTrue(boolean0);
      
      Base64 base64_0 = new Base64();
      base64_0.readResults(byteArray0, 93, 93);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-121);
      byteArray1[2] = (byte)122;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)76;
      byteArray1[5] = (byte)6;
      byteArray1[6] = (byte)45;
      base64_0.encode(byteArray1);
      Base64 base64_1 = new Base64(2664, byteArray0, false);
      String string0 = Base64.encodeBase64String(byteArray1);
      assertEquals("/4d6AEwGLQ==", string0);
      
      Base64 base64_2 = new Base64((byte)45);
      base64_2.encode(byteArray1, 37, (-1910));
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      assertEquals((short) (-13121), bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Random.setNextRandom((-4157));
      Base64 base64_0 = new Base64(43, (byte[]) null, false);
      base64_0.encode((byte[]) null);
      Base64.encodeBase64URLSafe((byte[]) null);
      try { 
        base64_0.encode((Object) "~wuc:O_5*wHpA");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)101;
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      //  // Unstable assertion: assertFalse(boolean0);
      
      Base64 base64_0 = new Base64((byte)8);
      byte[] byteArray1 = new byte[6];
      Base64.decodeBase64(byteArray1);
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)8;
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte) (-1);
      String string0 = base64_0.encodeToString(byteArray1);
      //  // Unstable assertion: assertEquals("/wj//wAA\uFFFD\uFFFD", string0);
      
      byteArray1[4] = (byte)27;
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      //  // Unstable assertion: assertEquals(5, byteArray2.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)8, (byte) (-1), (byte)27, (byte)0, (byte)101}, byteArray2);
      
      int int0 = base64_0.avail();
      //  // Unstable assertion: assertEquals(0, int0);
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-1);
      Base64.decodeBase64((String) null);
      Base64 base64_0 = new Base64((-644), byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, (int) (byte) (-1), (int) (byte)8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-42);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)8);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)8;
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte) (-1);
      Base64.discardWhitespace(byteArray0);
      base64_0.avail();
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte) (-1);
      byteArray2[1] = (byte)1;
      byteArray2[2] = (byte)27;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte) (-1);
      byteArray2[6] = (byte)8;
      base64_0.encodeToString(byteArray2);
      try { 
        base64_0.encode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("f[I%X)!Qlc;EoH");
      Base64.isBase64("");
      byte[] byteArray1 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64.isBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64((byte) (-68));
      base64_0.isUrlSafe();
      Base64.decodeInteger(byteArray1);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(119, byteArray0);
      byte[] byteArray1 = Base64.decodeBase64("iu:+Qvf[%");
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true, true);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.divideAndRemainder(bigInteger1);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.setSeed(119);
      BigInteger bigInteger2 = BigInteger.ZERO;
      BigInteger bigInteger3 = bigInteger0.min(bigInteger2);
      Base64.toIntegerBytes(bigInteger2);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.discardWhitespace(byteArray2);
      byte[] byteArray3 = Base64.encodeInteger(bigInteger3);
      assertFalse(byteArray3.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(119, byteArray0);
      byte[] byteArray1 = Base64.decodeBase64("F:f");
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true, true);
      base64_0.decode((String) null);
      base64_0.decode(byteArray1, (int) (byte)2, (-1817));
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, false);
      assertSame(byteArray3, byteArray2);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("lineSeperator must not contain base64 characters: [");
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[1] = (byte)0;
      Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64(false);
      base64_1.isUrlSafe();
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray4 = Base64.discardWhitespace(byteArray3);
      //  // Unstable assertion: assertEquals(62, byteArray4.length);
      //  // Unstable assertion: assertEquals(32, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte byte0 = (byte)127;
      Base64.isBase64((byte)127);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte)127;
      byteArray0[6] = (byte)14;
      byteArray0[7] = (byte)127;
      byteArray0[8] = (byte)127;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64((-677), byteArray0);
      base64_0.readResults(byteArray0, (byte)14, (-826));
      int int0 = (-1441);
      base64_0.decode(byteArray0, (int) (byte)14, (-1441));
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.decodeInteger(byteArray0);
      Base64.encodeBase64(byteArray0, true, true);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, false, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("GEY(z4G;^#Sx");
      boolean boolean0 = Base64.isBase64("HSB\"MC9&m78']+");
      assertFalse(boolean0);
      
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("GEYz4GSx", string0);
      
      Base64 base64_0 = new Base64(124);
      base64_0.isUrlSafe();
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((byte)119, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte) (-68);
      byteArray0[6] = (byte)46;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64(byteArray1, false, false, 2379);
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64URLSafeString(byteArray1);
      base64_0.decode((byte[]) null);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte) (-68), 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -68
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Base64 base64_0 = new Base64((-1), (byte[]) null, true);
      base64_0.encode((byte[]) null, (-1), (-1));
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64.encodeBase64((byte[]) null, true, true);
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, (-1), (-663));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("gHy4Az");
      Base64.isBase64("gHy4Az");
      Base64.discardWhitespace(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)12;
      byteArray1[2] = (byte) (-93);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      Base64.encodeBase64String(byteArray1);
      Base64 base64_0 = new Base64(true);
      Base64.decodeBase64("HSB\"MC9&m78']+");
      Base64.isBase64("gHy4Az");
      Base64.encodeBase64String(byteArray0);
      boolean boolean0 = base64_0.isUrlSafe();
      Base64.encodeBase64((byte[]) null, true, true);
      boolean boolean1 = base64_0.hasData();
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Base64.isBase64("KLR(V}P");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte) (-12);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray1 = Base64.encodeBase64((byte[]) null, true, false, (int) (byte)41);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)127;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(false);
      base64_0.decode(byteArray0);
      int int0 = base64_0.readResults(byteArray1, 61, 61);
      assertEquals((-1), int0);
      
      Base64.encodeBase64(byteArray1);
      base64_0.encode(byteArray1, (-1), (int) (byte)42);
      assertEquals(12, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      Base64.isBase64("KLR(V}P");
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)120;
      byteArray1[1] = (byte)120;
      byteArray1[2] = (byte)120;
      byteArray1[3] = (byte)120;
      byteArray1[4] = (byte)11;
      Base64.decodeBase64(byteArray1);
      base64_0.readResults(byteArray0, 2061584302, 0);
      Base64.encodeBase64(byteArray0);
      base64_0.decode(byteArray0);
      base64_0.readResults(byteArray0, (-87), (byte)120);
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-1);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64();
      Object object0 = base64_0.decode((Object) "UTF-16");
      base64_0.encode(object0);
      int int0 = 1907;
      base64_0.readResults(byteArray1, 1907, (byte) (-1));
      Object object1 = new Object();
      try { 
        base64_0.encode(object1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = Base64.decodeBase64("/~T*<}");
      Base64.isArrayByteBase64(byteArray0);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      assertEquals(6, byteArray2.length);
      
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64(true);
      assertTrue(base64_0.isUrlSafe());
      
      byte[] byteArray3 = Base64.decodeBase64("AAAAAAAA");
      assertEquals(6, byteArray3.length);
      
      Base64.isBase64("");
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("AAAAAAAA", string0);
      
      Base64 base64_1 = new Base64();
      base64_1.isUrlSafe();
      Base64.decodeInteger(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-3)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-17);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false, 47);
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64URLSafeString(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (int) (byte)0, (int) (byte)42);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64.isArrayByteBase64(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte) (-1);
      byteArray2[1] = (byte)12;
      byteArray2[2] = (byte) (-93);
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)0;
      Base64.encodeBase64String(byteArray2);
      byte[] byteArray3 = Base64.decodeBase64(byteArray1);
      Base64 base64_0 = new Base64(true);
      base64_0.decode(byteArray0);
      byte[] byteArray4 = new byte[4];
      byteArray4[0] = (byte)12;
      byteArray4[1] = (byte)12;
      byteArray4[2] = (byte) (-1);
      byteArray4[3] = (byte) (-1);
      String string0 = Base64.encodeBase64String(byteArray4);
      assertEquals("DAz//w==", string0);
      
      boolean boolean0 = base64_0.hasData();
      Base64.decodeBase64("");
      Base64.decodeInteger(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertSame(byteArray1, byteArray3);
      
      byte[] byteArray5 = Base64.encodeBase64(byteArray4, true, true);
      assertEquals(8, byteArray5.length);
      
      boolean boolean1 = Base64.isBase64((byte)54);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(32);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false);
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, false);
      base64_0.decode(byteArray3, 32, (int) (byte)0);
      Base64.decodeInteger(byteArray0);
      Base64.decodeBase64(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64.isBase64((byte)13);
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-6);
      byteArray0[0] = (byte) (-6);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger.valueOf(76);
      Base64.toIntegerBytes(bigInteger0);
      byte byte1 = (byte)58;
      BigInteger.valueOf(64);
      byteArray0[1] = (byte)58;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 2, (int) (byte)58);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-64);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      base64_0.readResults(byteArray0, 76, 0);
      Base64.encodeBase64(byteArray1);
      byte[] byteArray2 = base64_0.decode(byteArray0);
      base64_1.readResults(byteArray0, (-1465), 76);
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, byteArray3.length);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray4 = Base64.encodeInteger(bigInteger0);
      assertEquals(0, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)88;
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(99);
      int int0 = 6017;
      base64_0.decode(byteArray0, 33, (int) (byte)0);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_1 = new Base64((-1));
      try { 
        base64_0.encode((Object) base64_1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Base64 base64_0 = new Base64(1618);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte)125;
      base64_0.readResults(byteArray0, 0, 0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = null;
      base64_0.decode((byte[]) null, 2, 2048);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.encodeBase64String((byte[]) null);
      Base64.encodeBase64((byte[]) null, false);
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("lineSeperator must not contain base64 characters: [");
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = new byte[9];
      byte byte0 = (byte)119;
      byteArray1[0] = (byte)119;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte) (-123);
      byteArray1[5] = (byte) (-75);
      byteArray1[6] = (byte)0;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (46) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)104;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)88;
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean0);
      
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = base64_0.decode(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-66), (byte)21}, byteArray1);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)101;
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean0);
      
      Base64 base64_0 = new Base64((byte)8);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)8;
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte) (-1);
      byteArray1[4] = (byte)27;
      byteArray1[5] = (byte) (-1);
      String string0 = Base64.encodeBase64String(byteArray1);
      assertEquals("/wj//xv/", string0);
      
      base64_0.encode(byteArray1, 172, (int) (byte) (-1));
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("lineSeperator must not contain base64 charac|ers: [");
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
      assertEquals(31, byteArray0.length);
      
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)119;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte) (-123);
      byteArray1[5] = (byte) (-75);
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte)0;
      byteArray1[8] = (byte)0;
      boolean boolean1 = Base64.isBase64((byte) (-75));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(119, byteArray0);
      base64_0.readResults(byteArray0, 119, 119);
      base64_0.encode(byteArray0);
      base64_0.decode(byteArray0, 0, (-775));
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64.isArrayByteBase64(byteArray1);
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte) (-44);
      byte[] byteArray3 = new byte[6];
      byteArray3[0] = (byte)31;
      byteArray3[1] = (byte)31;
      byteArray3[2] = (byte)31;
      byteArray3[3] = (byte)0;
      byteArray3[4] = (byte) (-44);
      byteArray3[5] = (byte) (-44);
      Base64.decodeBase64(byteArray3);
      byteArray2[1] = (byte)31;
      byteArray2[2] = (byte)0;
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((byte) (-44), 1, mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // bitLength < 2
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(92, byteArray0, true);
      Base64.decodeBase64("<djC4WX<lI7f{i");
      byte[] byteArray1 = new byte[7];
      Base64.decodeInteger(byteArray0);
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte) (-116);
      byteArray1[2] = (byte)119;
      byteArray1[3] = (byte) (-125);
      byteArray1[4] = (byte)1;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte) (-1);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      base64_0.decode((Object) "<djC4WX<lI7f{i");
      assertTrue(base64_0.isUrlSafe());
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray2);
      assertEquals(14, byteArray2.length);
      assertEquals((short)255, bigInteger0.shortValue());
      
      Base64.encodeBase64(byteArray1, true, true);
      byte[] byteArray3 = Base64.decodeBase64("<djC4WX<lI7f{i");
      assertArrayEquals(new byte[] {(byte)118, (byte)48, (byte) (-72), (byte)89, (byte)121, (byte)72, (byte) (-19), (byte) (-8)}, byteArray3);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-47);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)107;
      byteArray0[7] = (byte) (-15);
      byteArray0[8] = (byte) (-89);
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-47);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)107;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)106;
      byteArray1[5] = (byte) (-89);
      byteArray1[6] = (byte) (-15);
      byteArray1[7] = (byte) (-89);
      byteArray1[8] = (byte) (-89);
      base64_0.encode(byteArray1);
      base64_0.decode((String) null);
      int int0 = 2146;
      int int1 = 1821;
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-24);
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte)6;
      Base64 base64_0 = new Base64((-2542), byteArray0, false);
      Base64.decodeBase64("]");
      BigInteger bigInteger0 = BigInteger.valueOf((-1570L));
      Base64.toIntegerBytes(bigInteger0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)1, 1105);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(119, byteArray0);
      base64_0.readResults(byteArray0, 119, 119);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.decode(byteArray0, 0, (-775));
      Base64.encodeBase64URLSafeString(byteArray0);
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("", string0);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false);
      boolean boolean0 = Base64.isArrayByteBase64(byteArray2);
      assertTrue(boolean0);
      
      byte[] byteArray3 = new byte[9];
      byteArray3[0] = (byte) (-44);
      byteArray3[1] = (byte)31;
      byteArray3[2] = (byte)0;
      byteArray3[3] = (byte) (-1);
      byteArray3[4] = (byte)114;
      byteArray3[5] = (byte)0;
      byteArray3[6] = (byte)1;
      byteArray3[7] = (byte) (-79);
      byteArray3[8] = (byte)30;
      boolean boolean1 = Base64.isArrayByteBase64(byteArray3);
      Base64.encodeBase64(byteArray1, true, true);
      boolean boolean2 = base64_0.hasData();
      assertTrue(boolean2 == boolean1);
      assertFalse(base64_0.isUrlSafe());
      assertSame(byteArray0, byteArray1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64((byte[]) null);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.encodeBase64((byte[]) null);
      Base64.encodeBase64Chunked((byte[]) null);
      boolean boolean0 = false;
      Base64.encodeBase64((byte[]) null, false);
      boolean boolean1 = true;
      Base64.encodeBase64((byte[]) null, true);
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Base64 base64_0 = new Base64(1618);
      byte[] byteArray0 = base64_0.decode("iu:+Qvf[%");
      byte[] byteArray1 = new byte[1];
      Base64.decodeBase64("");
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true, true);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)105, (byte)117, (byte)45, (byte)81, (byte)118, (byte)81, (byte) (-106), (byte) (-93)}, byteArray2);
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      
      byteArray1[0] = (byte)2;
      byte[] byteArray3 = base64_0.decode("");
      base64_0.decode(byteArray1, 1618, (-323));
      byte[] byteArray4 = base64_0.decode(byteArray3);
      //  // Unstable assertion: assertSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte) (-116);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte)99;
      Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(true);
      Base64.decodeBase64((String) null);
      String string0 = base64_0.encodeToString(byteArray0);
      //  // Unstable assertion: assertEquals("AApHjAEuYw\uFFFD\uFFFD", string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2004);
      BigInteger bigInteger0 = BigInteger.probablePrime(2004, mockRandom0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)69;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger0.divideAndRemainder(bigInteger1);
      byteArray0[2] = (byte) (-31);
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      bigInteger2.getLowestSetBit();
      bigInteger2.divideAndRemainder(bigInteger0);
      mockRandom0.setSeed((byte) (-31));
      BigInteger bigInteger3 = bigInteger0.min(bigInteger2);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.discardWhitespace(byteArray0);
      Base64.encodeInteger(bigInteger3);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Base64 base64_0 = new Base64((-1048));
      Base64.encodeBase64((byte[]) null, true);
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        bigInteger0.xor((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte)1;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, (int) (byte)88);
      assertArrayEquals(new byte[] {(byte)87, (byte)65, (byte)66, (byte)114, (byte)65, (byte)81, (byte)61, (byte)61}, byteArray1);
      assertEquals(8, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte) (-116);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-40);
      byteArray0[6] = (byte)30;
      Base64 base64_0 = new Base64(0, byteArray0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)119;
      byteArray0[6] = (byte)60;
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray3 = new byte[9];
      byteArray3[0] = (byte)119;
      byteArray3[1] = (byte)12;
      byteArray3[2] = (byte)12;
      byteArray3[3] = (byte)13;
      byteArray3[4] = (byte)86;
      byteArray3[5] = (byte)12;
      byteArray3[6] = (byte)13;
      byteArray3[7] = (byte)12;
      byteArray3[8] = (byte)12;
      Base64.encodeBase64(byteArray3);
      Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray2, (int) (byte)12, (-1));
      byte[] byteArray4 = Base64.decodeBase64("");
      assertFalse(byteArray4.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-1689), byteArray0, true);
      Base64.encodeBase64(byteArray0, true, false, 366);
      base64_0.encodeToString(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 366, (-1689));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Base64 base64_0 = new Base64((-891));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-107);
      Base64.encodeBase64(byteArray0, true, true);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("lineSeperator must not contain base64 characters: [");
      Base64.isBase64(byteArray0);
      assertEquals(32, byteArray0.length);
      
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)119;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte) (-123);
      byteArray1[5] = (byte) (-75);
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte)0;
      byteArray1[8] = (byte)0;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      assertEquals(12, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)26;
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)26;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)26;
      byteArray1[3] = (byte)26;
      byteArray1[4] = (byte)26;
      byteArray1[5] = (byte)26;
      int int0 = base64_0.readResults(byteArray1, (byte)26, (byte)26);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64Chunked(byteArray0);
      boolean boolean0 = true;
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte) (-117);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.isArrayByteBase64(byteArray1);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-2273), byteArray1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000\uFFFD\u0000\uFFFDe\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)100;
      byteArray0[5] = (byte)12;
      Base64.decodeBase64(byteArray0);
      base64_0.decode("");
      Base64.decodeBase64("");
      Base64.isBase64("");
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte) (-84);
      byteArray0[7] = (byte)24;
      byteArray0[8] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64((byte) (-84));
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      Base64.encodeBase64(byteArray2, false);
      base64_0.decode(byteArray1, (int) (byte)112, (-1426));
      Base64.decodeInteger(byteArray0);
      Base64.isBase64((byte)61);
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      String string0 = "KLR(V}P";
      Base64.isBase64("KLR(V}P");
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)120;
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)0;
      byte byte1 = (byte)26;
      byteArray0[4] = (byte)26;
      byteArray0[5] = (byte)0;
      byte byte2 = (byte)0;
      byteArray0[6] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray0);
      try { 
        base64_0.encode((Object) "KLR(V}P");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-114);
      byteArray0[7] = (byte)1;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000\u0000\uFFFD\uFFFDL\u0000\uFFFD\u0001]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)35;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-85);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)8, 91);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64.isArrayByteBase64(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte) (-1);
      byteArray2[1] = (byte)12;
      byteArray2[2] = (byte) (-93);
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)0;
      String string0 = Base64.encodeBase64String(byteArray2);
      assertEquals("/wyjAAA=", string0);
      
      Base64 base64_0 = new Base64(true);
      byte[] byteArray3 = Base64.decodeBase64("HSB\"MC9&m78']+");
      assertEquals(7, byteArray3.length);
      assertArrayEquals(new byte[] {(byte)29, (byte)32, (byte)76, (byte)11, (byte) (-39), (byte) (-69), (byte) (-13)}, byteArray3);
      
      Base64.isBase64("");
      Base64.encodeBase64String(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      boolean boolean0 = base64_0.isUrlSafe();
      assertTrue(boolean0);
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray2);
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte) (-69);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(14, byteArray1.length);
      
      base64_0.avail();
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)69;
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(109, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [E\u0000\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-6);
      byteArray0[0] = (byte) (-6);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger.valueOf(76);
      Base64.toIntegerBytes(bigInteger0);
      byte byte1 = (byte)58;
      BigInteger.valueOf(64);
      byteArray0[1] = (byte)58;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 20, (int) (byte)58);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 20
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)104;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)88;
      Base64.isArrayByteBase64(byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertEquals(12, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)66}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)111;
      byteArray0[5] = (byte)24;
      byteArray0[6] = (byte)47;
      byteArray0[7] = (byte)79;
      byteArray0[8] = (byte)0;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-2701), byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000\u0000\u0000\u0000o\u0018/O\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)110;
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("y7xObg==", string0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Base64 base64_0 = new Base64();
      String string0 = "";
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-111);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)57;
      byte[] byteArray1 = base64_0.decode(byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Base64 base64_0 = new Base64(0, (byte[]) null, true);
      base64_0.encode((byte[]) null, 3374, 0);
      assertTrue(base64_0.isUrlSafe());
  }
}
