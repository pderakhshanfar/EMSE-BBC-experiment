/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 16:10:29 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[108];
      Base64 base64_0 = new Base64((byte)4, byteArray0);
      base64_0.encode(byteArray0, (int) (byte)4, (int) (byte)4);
      base64_0.encode(byteArray0, (int) (byte)4, 32);
      base64_0.encode(byteArray0, 1, 45);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      base64_0.encode(byteArray1, 1, (int) (byte)4);
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 1, 4719);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 148
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[39];
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0, 4, (int) (byte)4);
      base64_0.encode(byteArray0, 99, (-721));
      Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_1 = new Base64();
      base64_1.encode(byteArray0, 1803, (-23));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[39];
      Base64 base64_0 = new Base64((byte)4, byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray2 = base64_0.encode(byteArray0);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      base64_0.decode(byteArray3);
      // Undeclared exception!
      base64_0.decode(byteArray3);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)98;
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)17;
      byteArray0[8] = (byte)4;
      Base64.encodeBase64(byteArray0, true, true, 14);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[33];
      Base64 base64_0 = new Base64((byte)4, byteArray0);
      base64_0.encode(byteArray0, (int) (byte)0, 33);
      base64_0.encode(byteArray0, (int) (byte)0, (-3037));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[48];
      Base64 base64_0 = new Base64((byte)4, byteArray0);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64.encodeBase64(byteArray1);
      byte[] byteArray2 = base64_0.encode(byteArray0);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      // Undeclared exception!
      base64_0.encode(byteArray3);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[33];
      Base64 base64_0 = new Base64((byte)4, byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      MockRandom mockRandom0 = new MockRandom((-748L));
      BigInteger bigInteger0 = new BigInteger(1364, (-74), mockRandom0);
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)4;
      byteArray2[1] = (byte)4;
      byteArray2[2] = (byte)4;
      byteArray2[3] = (byte)4;
      byteArray2[4] = (byte) (-109);
      byteArray2[5] = (byte)4;
      byteArray2[6] = (byte)4;
      byteArray2[7] = (byte)4;
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray3 = Base64.discardWhitespace(byteArray0);
      assertFalse(byteArray3.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      Base64 base64_0 = new Base64((byte)4, byteArray0);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      base64_0.decode(byteArray2, 0, (int) (byte)4);
      base64_0.decode(byteArray2, 0, (-1060));
      assertArrayEquals(new byte[] {(byte)66, (byte)65, (byte)81, (byte)61}, byteArray2);
      
      base64_0.encode(byteArray0);
      byte[] byteArray3 = base64_0.encode(byteArray0);
      assertEquals(6, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[33];
      Base64 base64_0 = new Base64((byte)4, byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)4;
      byteArray1[1] = (byte)4;
      byteArray1[3] = (byte)4;
      byteArray1[5] = (byte)4;
      byteArray1[6] = (byte)4;
      byteArray1[7] = (byte)4;
      base64_0.encode(byteArray1, (int) (byte)4, (int) (byte)4);
      base64_0.encode(byteArray1, 91, (-917));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[51];
      Base64 base64_0 = new Base64((byte)4, byteArray0);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray3 = base64_0.encode(byteArray0);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      assertEquals(17160, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[50];
      byte byte0 = (byte)7;
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0, (int) (byte)7, (int) (byte)7);
      base64_0.readResults(byteArray0, (byte)7, (byte)7);
      boolean boolean0 = false;
      Base64 base64_1 = null;
      try {
        base64_1 = new Base64(76, byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000\u0000\u0000\u0000\u0000\u0000\u0000AAAAAAA\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[33];
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0, (int) (byte)4, (int) (byte)4);
      Base64.isBase64("");
      base64_0.encode(byteArray0, (int) (byte)4, (int) (byte)4);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      base64_0.encode(byteArray1, (int) (byte)4, (-2864));
      assertEquals(0, byteArray1.length);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[33];
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0, (int) (byte)4, (int) (byte)4);
      base64_0.encode(byteArray0, (int) (byte)4, (int) (byte)4);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(0, byteArray1.length);
      
      base64_0.decode(byteArray0, (-669), (-2864));
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[50];
      Base64 base64_0 = new Base64((byte)4, byteArray0);
      byte[] byteArray1 = Base64.decodeBase64("");
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray0);
      byte[] byteArray4 = base64_0.encode(byteArray2);
      base64_0.encode(byteArray4);
      assertEquals(1296, byteArray4.length);
      
      byte[] byteArray5 = base64_0.decode("encodeInteger called with null parameter");
      assertEquals(27, byteArray5.length);
      
      base64_0.decode(byteArray3, (-737), 1609);
      assertEquals(68, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-24);
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = new byte[0];
      Base64.discardWhitespace(byteArray1);
      Base64 base64_0 = new Base64();
      String string0 = "";
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("FPl@h%!$5SC4n?OG");
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(7, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)20, (byte) (-7), (byte)97, (byte) (-27), (byte) (-72), (byte) (-100), (byte) (-31)}, byteArray1);
      
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)4;
      byteArray2[1] = (byte) (-1);
      byteArray2[2] = (byte) (-128);
      Base64 base64_0 = new Base64(662, byteArray2);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0, (int) (byte)4, (int) (byte)4);
      base64_0.encode((byte[]) null, (-915), (-915));
      assertFalse(base64_0.isUrlSafe());
      
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, 1277, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0, (int) (byte)4, (int) (byte)4);
      base64_0.encode((byte[]) null, (-915), (-915));
      int int0 = base64_0.avail();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0, (int) (byte)4, (int) (byte)4);
      Base64 base64_1 = new Base64((byte)4, byteArray0);
      base64_0.decode(byteArray0, (-2864), (-582));
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(66, byteArray1, true);
      boolean boolean0 = true;
      boolean boolean1 = false;
      Object object0 = base64_0.decode((Object) "dE(dKYxa[%+/=");
      Base64.encodeBase64URLSafeString(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)54;
      byteArray0[6] = (byte)15;
      base64_0.decode(byteArray0, (int) (byte)1, (int) (byte)54);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64 base64_0 = new Base64((byte)4, byteArray0);
      int int0 = base64_0.readResults(byteArray0, (byte)4, (byte)4);
      assertEquals(0, int0);
      
      base64_0.encode((byte[]) null, (int) (byte)4, (-2279));
      boolean boolean0 = base64_0.hasData();
      assertTrue(boolean0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[1] = (byte)4;
      Base64.isBase64((byte)61);
      Base64 base64_0 = new Base64((byte)61, byteArray0);
      Base64.decodeBase64(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 105, 17);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 105
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = null;
      Base64 base64_1 = new Base64(64, (byte[]) null);
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, 76, 64);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[1] = (byte)4;
      Base64 base64_0 = new Base64((byte)4, byteArray0);
      base64_0.decode(byteArray0, (int) (byte)4, (int) (byte)4);
      base64_0.encode(byteArray0, (int) (byte)4, (-2293));
      base64_0.encode(byteArray0);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)80;
      byteArray0[2] = (byte)80;
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("UABQAAAAAAA=", string0);
      
      byte[] byteArray1 = base64_0.decode(byteArray0);
      assertEquals(1, byteArray1.length);
      
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)80;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((byte)15, bigInteger0.byteValue());
      
      base64_0.decode(byteArray0, 0, (int) (byte)89);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64(") than the specified maxium size of ");
      BigInteger bigInteger0 = new BigInteger((-1), byteArray0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertEquals((short)5601, bigInteger0.shortValue());
      assertEquals(28, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)6;
      Base64 base64_0 = new Base64((byte)6, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertEquals(64, byteArray1.length);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64((-151), byteArray1);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64(") than the pecified maxium size of ");
      Base64 base64_0 = new Base64((-1930));
      Base64.encodeBase64String(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 1, 8168);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 20
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64(") than the specified maxium size of ");
      Base64 base64_0 = new Base64(1);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 5, 3508);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 21
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64(862, byteArray0);
      base64_0.decode((Object) "/");
      base64_0.encode(byteArray0, 365, 365);
      String string0 = base64_0.encodeToString(byteArray0);
      //  // Unstable assertion: assertEquals("AAQ=\u0000\u0004", string0);
      
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, true);
      Base64.isBase64((byte)123);
      byte[] byteArray4 = Base64.discardWhitespace(byteArray3);
      //  // Unstable assertion: assertEquals(13, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)95;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      // Undeclared exception!
      try { 
        bigInteger0.byteValueExact();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger out of byte range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64(1, byteArray0);
      base64_0.decode(byteArray0, 1, 1);
      byte[] byteArray1 = new byte[5];
      byteArray1[1] = (byte) (-88);
      byteArray1[2] = (byte) (-16);
      byteArray1[3] = (byte) (-28);
      byteArray1[4] = (byte)19;
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray1, (-1101), (byte)19);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)4;
      Base64 base64_0 = new Base64((byte)4, byteArray0, true);
      byte[] byteArray1 = new byte[7];
      byteArray1[5] = (byte)4;
      byteArray1[1] = (byte)4;
      byteArray1[2] = (byte)4;
      byteArray1[3] = (byte)4;
      byteArray1[2] = (byte)4;
      byteArray1[6] = (byte)4;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (int) (byte)4, 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[1] = (byte)4;
      Base64 base64_0 = new Base64((byte)4, byteArray0);
      Object object0 = base64_0.decode((Object) "\"Z");
      base64_0.decode(object0);
      base64_0.encode(byteArray0, 109, (-2279));
      base64_0.encodeToString(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)4;
      byteArray1[1] = (byte) (-82);
      byteArray1[2] = (byte)4;
      byteArray1[3] = (byte)4;
      byteArray1[4] = (byte)4;
      byteArray1[5] = (byte)4;
      byteArray1[6] = (byte)4;
      byte[] byteArray2 = base64_0.encode(byteArray1);
      Base64.encodeBase64(byteArray2, false);
      Base64.encodeBase64(byteArray1, false, false);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, true, false, (int) (byte)4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Base64.isBase64((byte)12);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)12;
      byteArray0[4] = (byte)12;
      Base64 base64_0 = new Base64((byte)12, byteArray0);
      Base64 base64_1 = new Base64(1417, byteArray0, false);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)13;
      byteArray1[1] = (byte) (-117);
      byteArray1[2] = (byte)13;
      byteArray1[3] = (byte)13;
      byteArray1[4] = (byte)12;
      byteArray1[5] = (byte)12;
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte)12;
      byteArray1[8] = (byte)2;
      Base64 base64_2 = new Base64(0, byteArray1);
      // Undeclared exception!
      try { 
        base64_2.encode(byteArray1, 1, (int) (byte)13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte byte0 = (byte) (-8);
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Base64 base64_0 = new Base64((-1), (byte[]) null);
      base64_0.encodeToString((byte[]) null);
      Base64.encodeBase64URLSafe((byte[]) null);
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafe((byte[]) null);
      base64_0.encode(byteArray0);
      Base64.encodeBase64((byte[]) null, false, false);
      Base64.encodeBase64((byte[]) null);
      base64_0.decode((Object) "org.apache.commons.codec.EncoderException");
      Object object0 = base64_0.decode((Object) "org.apache.commons.codec.EncoderException");
      Base64.decodeInteger(byteArray0);
      Base64.encodeBase64((byte[]) null, true, true, 1);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)43;
      byteArray1[1] = (byte) (-16);
      Base64.encodeBase64URLSafeString(byteArray1);
      base64_0.decode((byte[]) null, 2388, (-1066));
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.equals(object0);
      bigInteger0.shortValueExact();
      Base64.toIntegerBytes(bigInteger0);
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte)28;
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = base64_0.decode((String) null);
      assertNull(byteArray1);
      
      base64_0.decode((Object) "");
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byte byte0 = (byte)4;
      byteArray0[1] = (byte)4;
      Base64 base64_0 = new Base64((-1301), byteArray0);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 11, 8168);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 20
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0, (-3316), (-1120));
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      boolean boolean0 = Base64.isBase64(byteArray0);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[1] = (byte)4;
      Base64 base64_0 = new Base64((-1301), byteArray0);
      base64_0.hasData();
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)4, 2353);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 20
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64String(byteArray0);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.shortValueExact();
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)4;
      Base64 base64_0 = new Base64((-3463));
      base64_0.encode(byteArray0, (-3463), (-3463));
      byte[] byteArray1 = base64_0.decode(byteArray0);
      assertEquals(0, byteArray1.length);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)73);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Base64 base64_0 = new Base64(0, (byte[]) null, true);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.bitLength();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte) (-8);
      byteArray0[5] = (byte) (-45);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)67;
      byteArray0[8] = (byte)82;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertEquals(12, byteArray1.length);
      
      Base64.isBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      base64_0.encodeToString(byteArray0);
      Base64.encodeBase64((byte[]) null, false, false);
      byte[] byteArray2 = base64_0.decode("1u");
      assertTrue(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {(byte) (-42)}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Base64 base64_0 = new Base64(0, (byte[]) null, true);
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null);
      assertNull(byteArray0);
      
      boolean boolean0 = Base64.isBase64("TGdshx!'cR,fR");
      assertFalse(boolean0);
      
      String string0 = base64_0.encodeToString((byte[]) null);
      assertNull(string0);
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Base64 base64_0 = new Base64(0, (byte[]) null, true);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.bitLength();
      base64_0.encodeToString((byte[]) null);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      base64_0.decode((byte[]) null);
      base64_0.decode((byte[]) null);
      Base64.isBase64((byte) (-124));
      base64_0.readResults(byteArray0, 0, 0);
      Base64.encodeBase64URLSafeString((byte[]) null);
      base64_0.encode((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)4;
      Base64 base64_0 = new Base64(76, byteArray0, true);
      byte[] byteArray1 = new byte[7];
      byteArray1[5] = (byte)4;
      byteArray1[1] = (byte)4;
      byteArray1[2] = (byte)4;
      byteArray1[3] = (byte)4;
      byteArray1[2] = (byte)4;
      byteArray1[6] = (byte)4;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (int) (byte)4, 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-44);
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64("");
      Base64 base64_0 = new Base64((-1), byteArray1, false);
      byte[] byteArray2 = base64_0.decode("");
      boolean boolean1 = base64_0.isUrlSafe();
      assertFalse(boolean1);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false, false);
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger0.add(bigInteger1);
      byte[] byteArray4 = Base64.toIntegerBytes(bigInteger2);
      assertEquals(1, byteArray4.length);
      
      base64_0.hasData();
      boolean boolean2 = base64_0.hasData();
      assertTrue(boolean2 == boolean0);
      
      byte[] byteArray5 = Base64.discardWhitespace(byteArray2);
      assertNotSame(byteArray5, byteArray3);
      assertEquals(0, byteArray5.length);
      assertSame(byteArray2, byteArray3);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Base64 base64_0 = new Base64(0, (byte[]) null, true);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.bitLength();
      base64_0.encodeToString((byte[]) null);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      base64_0.decode((byte[]) null);
      base64_0.decode((Object) "Parameter supplied to Base64 decode is not a byte[] or a String");
      base64_0.decode((byte[]) null);
      Base64.isBase64((byte) (-124));
      base64_0.readResults(byteArray0, 0, 0);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.isBase64(byteArray0);
      base64_0.encode((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)28;
      byteArray0[2] = (byte)0;
      base64_0.encode(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64((byte[]) null, false);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-44);
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean0);
      
      byte[] byteArray1 = Base64.decodeBase64("");
      Base64 base64_0 = new Base64((-1), byteArray1, false);
      byte[] byteArray2 = base64_0.decode("");
      base64_0.isUrlSafe();
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray3 = new byte[3];
      byteArray3[0] = (byte) (-44);
      byteArray3[1] = (byte) (-44);
      byteArray3[2] = (byte) (-44);
      String string0 = Base64.encodeBase64String(byteArray3);
      assertEquals("1NTU", string0);
      
      base64_0.decode(byteArray0, 8189, (int) (byte) (-44));
      Base64 base64_1 = new Base64(2479, byteArray0, false);
      byte[] byteArray4 = base64_1.encode(byteArray2);
      byte[] byteArray5 = Base64.encodeBase64Chunked(byteArray2);
      assertSame(byteArray2, byteArray4);
      assertSame(byteArray5, byteArray4);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)4;
      Base64 base64_0 = new Base64(76, byteArray0, true);
      byte[] byteArray1 = new byte[7];
      byteArray1[5] = (byte)4;
      byteArray1[1] = (byte)4;
      byteArray1[2] = (byte)4;
      byteArray1[3] = (byte)4;
      byteArray1[4] = (byte)4;
      byteArray1[2] = (byte)4;
      byteArray1[6] = (byte)4;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 24, 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 24
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      byte byte0 = (byte) (-108);
      byteArray0[2] = (byte) (-108);
      byte byte1 = (byte) (-66);
      byteArray0[3] = (byte) (-66);
      byte byte2 = (byte)73;
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte)7;
      byte byte3 = (byte)39;
      byteArray0[6] = (byte)39;
      byteArray0[7] = (byte) (-66);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray1);
      base64_0.decode("vG*+i7Y[");
      Object object0 = base64_0.decode((Object) "");
      base64_0.decode(object0);
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Base64 base64_0 = new Base64(0, (byte[]) null, true);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.bitLength();
      base64_0.encodeToString((byte[]) null);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      base64_0.decode((byte[]) null);
      base64_0.decode((Object) "Parameter supplied to Base64 decode is not a byte[] or a String");
      base64_0.decode((byte[]) null);
      Base64.isBase64((byte) (-124));
      base64_0.readResults(byteArray0, 0, 0);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.isBase64(byteArray0);
      base64_0.encode((byte[]) null);
      Base64.decodeBase64((String) null);
      byte[] byteArray1 = Base64.encodeBase64((byte[]) null, true, false, 76);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte) (-99);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.decodeInteger(byteArray0);
      int int0 = (-1971);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, (-1971));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of -1971
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Base64 base64_0 = new Base64(3046);
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-112);
      base64_0.readResults(byteArray0, (byte) (-67), (byte) (-112));
      byteArray0[2] = (byte)9;
      Base64.decodeBase64("");
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)9;
      byteArray2[1] = (byte) (-112);
      byteArray2[2] = (byte) (-67);
      byteArray2[3] = (byte) (-67);
      byteArray2[4] = (byte) (-67);
      byteArray2[5] = (byte)9;
      byteArray2[6] = (byte)53;
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, true);
      assertEquals(12, byteArray3.length);
      
      byte[] byteArray4 = base64_0.decode(byteArray2);
      assertEquals(0, byteArray4.length);
      
      Base64.encodeBase64(byteArray4, false, false, (int) (byte) (-112));
      byte[] byteArray5 = Base64.decodeBase64(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray5);
      assertEquals(6, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte)0;
      base64_0.encode(byteArray0, (int) (byte)69, (int) (byte) (-79));
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)41;
      byteArray1[2] = (byte)117;
      byteArray1[3] = (byte)122;
      boolean boolean0 = Base64.isBase64("&-~v|");
      //  // Unstable assertion: assertFalse(boolean0);
      
      String string0 = base64_0.encodeToString(byteArray1);
      //  // Unstable assertion: assertEquals("ACl1egAA;\uFFFD", string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.toString(1);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("AAAAAAAAAAA=", string0);
      
      boolean boolean0 = Base64.isBase64(byteArray1);
      assertTrue(boolean0);
      
      BigInteger bigInteger2 = BigInteger.TEN;
      bigInteger2.shortValueExact();
      byte[] byteArray2 = Base64.encodeInteger(bigInteger1);
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Base64.decodeBase64(",cR/f");
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.isArrayByteBase64(byteArray0);
      Base64.decodeBase64(byteArray1);
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)9;
      byteArray2[1] = (byte)104;
      byteArray2[2] = (byte) (-120);
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(20, byteArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [h\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-8);
      Base64.isBase64("");
      Base64.encodeBase64(byteArray0, true, true);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64 base64_0 = new Base64();
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      //  // Unstable assertion: assertEquals(16, byteArray2.length);
      
      byte[] byteArray3 = Base64.discardWhitespace(byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertEquals(12, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte)13;
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertArrayEquals(new byte[] {(byte)75, (byte)103, (byte)70, (byte)57, (byte)89, (byte)87, (byte)107, (byte)78}, byteArray1);
      assertEquals(8, byteArray1.length);
      
      base64_0.decode((byte[]) null, 183, 183);
      base64_0.encode((byte[]) null);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64URLSafeString((byte[]) null);
      byte[] byteArray1 = new byte[5];
      byte byte0 = (byte)110;
      byteArray1[0] = (byte)110;
      byte byte1 = (byte)35;
      byteArray1[1] = (byte)35;
      Base64.decodeBase64((byte[]) null);
      Base64 base64_0 = new Base64((byte)35, (byte[]) null, true);
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, (-241), (int) (byte)35);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byte[] byteArray1 = null;
      Base64.encodeBase64Chunked((byte[]) null);
      Base64 base64_0 = new Base64(true);
      base64_0.encode((byte[]) null);
      base64_0.decode("vG*+i7Y[");
      Base64 base64_1 = new Base64(76, (byte[]) null, true);
      base64_1.decode((Object) "");
      Base64 base64_2 = new Base64(false);
      Object object0 = new Object();
      try { 
        base64_2.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64 base64_0 = new Base64(548, byteArray0, false);
      base64_0.encode(byteArray0, (-1904), (int) (byte)0);
      byte[] byteArray1 = base64_0.decode("W5 )q^$");
      assertArrayEquals(new byte[] {(byte)91, (byte) (-102)}, byteArray1);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.toString((-1137));
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("AA==", string0);
      
      base64_0.decode((Object) "AA==");
      Base64.encodeBase64(byteArray0, false, false, 76);
      byte[] byteArray3 = base64_0.encode(byteArray0);
      boolean boolean0 = Base64.isArrayByteBase64(byteArray3);
      assertFalse(boolean0);
      
      Base64.encodeInteger(bigInteger0);
      Base64.isBase64(byteArray0);
      byte[] byteArray4 = base64_0.encode(byteArray2);
      assertEquals(0, byteArray4.length);
      
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.shortValueExact();
      byte[] byteArray5 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray6 = Base64.discardWhitespace(byteArray5);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray6);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      boolean boolean0 = Base64.isArrayByteBase64(byteArray1);
      assertTrue(boolean0);
      
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      Base64 base64_0 = new Base64(1415);
      byte[] byteArray3 = base64_0.decode(byteArray0);
      byte[] byteArray4 = base64_0.encode(byteArray2);
      assertEquals(14, byteArray4.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      
      Base64.isBase64("");
      Base64.encodeBase64(byteArray3, true, true);
      byte[] byteArray5 = base64_0.decode(byteArray3);
      Base64.encodeBase64(byteArray5, false, false, 1);
      assertEquals(0, byteArray3.length);
      assertSame(byteArray3, byteArray5);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-44);
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64("");
      Base64 base64_0 = new Base64((-1), byteArray1, false);
      byte[] byteArray2 = base64_0.decode("");
      boolean boolean1 = base64_0.isUrlSafe();
      assertFalse(boolean1);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false, false);
      assertEquals(0, byteArray3.length);
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger0.add(bigInteger1);
      byte[] byteArray4 = Base64.toIntegerBytes(bigInteger2);
      assertEquals(1, byteArray4.length);
      
      base64_0.hasData();
      boolean boolean2 = base64_0.hasData();
      assertTrue(boolean2 == boolean0);
      
      String string0 = base64_0.encodeToString(byteArray1);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)0;
      Base64 base64_0 = new Base64(76, byteArray0, true);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)119;
      byteArray1[1] = (byte) (-8);
      byteArray1[2] = (byte) (-8);
      byteArray1[3] = (byte)2;
      byteArray1[4] = (byte)13;
      byteArray1[5] = (byte) (-8);
      base64_0.encode(byteArray1, 1048, (int) (byte) (-8));
      byte[] byteArray2 = base64_0.decode(byteArray0);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Base64.isBase64((byte)0);
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean0);
      
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64((byte)0);
      base64_0.decode(byteArray2);
      Base64.isBase64("");
      byte[] byteArray3 = Base64.decodeBase64("");
      byte[] byteArray4 = Base64.encodeBase64(byteArray1, false, true);
      byte[] byteArray5 = base64_0.decode(byteArray4);
      assertEquals(4, byteArray5.length);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61}, byteArray5);
      
      Base64.encodeBase64(byteArray1, false, true, 76);
      Base64.decodeBase64(byteArray3);
      assertEquals(0, byteArray3.length);
      assertNotSame(byteArray3, byteArray2);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)1;
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
      
      Base64 base64_0 = new Base64((byte) (-109), byteArray0, false);
      Base64.decodeBase64(byteArray0);
      base64_0.encodeToString(byteArray0);
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("kwE=", string0);
      
      base64_0.encode(byteArray0, (int) (byte) (-109), 0);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)57;
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64("");
      Base64 base64_0 = new Base64(668, byteArray1, true);
      base64_0.decode("");
      boolean boolean1 = base64_0.isUrlSafe();
      assertFalse(boolean1 == boolean0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeBase64(byteArray1, false, true);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.add(bigInteger1);
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(1, byteArray2.length);
      
      boolean boolean2 = base64_0.hasData();
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = Base64.encodeBase64URLSafeString((byte[]) null);
      assertNull(string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.signum();
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.bitCount();
      bigInteger0.min(bigInteger1);
      bigInteger0.negate();
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.isArrayByteBase64(byteArray1);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte) (-96);
      byteArray2[1] = (byte) (-81);
      byteArray2[2] = (byte) (-8);
      byteArray2[3] = (byte)31;
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)27;
      byteArray2[6] = (byte)102;
      byteArray2[7] = (byte)0;
      byteArray2[8] = (byte)0;
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, false);
      assertEquals(14, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      int int0 = 0;
      Base64 base64_0 = new Base64(0, byteArray0, true);
      byte[] byteArray1 = base64_0.decode("");
      Base64.decodeBase64("");
      Base64.decodeBase64(byteArray0);
      Base64.encodeBase64(byteArray1, true, true, (-3142));
      base64_0.encode(byteArray0);
      Base64.decodeBase64("");
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-31);
      byteArray0[5] = (byte) (-88);
      byteArray0[6] = (byte)0;
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-34);
      byteArray1[1] = (byte) (-61);
      byteArray1[2] = (byte) (-27);
      Base64.encodeBase64(byteArray1, true, true, 1722);
      Object object0 = null;
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte)26;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertArrayEquals(new byte[] {(byte)59, (byte) (-8), (byte)2, (byte)119, (byte)0, (byte)26}, byteArray1);
      assertEquals(6, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = base64_0.decode("/9.\"@L4x3[4GAkR]Gm");
      base64_0.readResults(byteArray0, 216, 2940);
      base64_0.isUrlSafe();
      String string0 = "";
      base64_0.decode("");
      base64_0.decode("ihvUenBF");
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64(",cR/f");
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)113, (byte)31, (byte) (-33)}, byteArray0);
      
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)15;
      byteArray1[2] = (byte)13;
      byteArray1[3] = (byte)25;
      byteArray1[4] = (byte)125;
      Base64 base64_0 = new Base64(0, byteArray1);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-8);
      byteArray0[7] = (byte) (-47);
      byteArray0[8] = (byte)66;
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(false);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      base64_0.hasData();
      try { 
        base64_0.decode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Base64 base64_0 = new Base64(1301);
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      //  // Unstable assertion: assertEquals(0, byteArray1.length);
      
      byteArray0[0] = (byte)0;
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray4 = base64_0.decode("");
      //  // Unstable assertion: assertEquals(0, byteArray4.length);
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray3);
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      
      byte[] byteArray5 = Base64.encodeBase64(byteArray2);
      //  // Unstable assertion: assertEquals(8, byteArray5.length);
      
      byte[] byteArray6 = new byte[3];
      byteArray6[0] = (byte)0;
      byteArray6[1] = (byte)0;
      byteArray6[2] = (byte)93;
      byte[] byteArray7 = Base64.encodeBase64Chunked(byteArray6);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)66, (byte)100, (byte)27, (byte)0}, byteArray7);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray1 = null;
      Base64.encodeBase64String((byte[]) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger0.subtract(bigInteger1);
      BigInteger bigInteger3 = bigInteger0.shiftLeft((-3776));
      bigInteger3.intValueExact();
      bigInteger0.toByteArray();
      bigInteger3.andNot(bigInteger1);
      bigInteger1.negate();
      bigInteger3.toByteArray();
      bigInteger1.xor(bigInteger2);
      bigInteger0.isProbablePrime(0);
      // Undeclared exception!
      try { 
        bigInteger0.divideAndRemainder(bigInteger3);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger divide by zero
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, true, (int) (byte)2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of 2
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)120;
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
      
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)37;
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64(89, (byte[]) null, true);
      int int0 = 5;
      base64_0.decode((byte[]) null, (-2288), 0);
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64 base64_0 = new Base64(548, byteArray0, false);
      base64_0.encode(byteArray0, (-1904), (int) (byte)0);
      byte[] byteArray1 = base64_0.decode("W5 )q^$");
      assertArrayEquals(new byte[] {(byte)91, (byte) (-102)}, byteArray1);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.toString((-1137));
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64String(byteArray0);
      base64_0.decode((Object) "AA==");
      Base64.encodeBase64(byteArray0, false, false, 76);
      byte[] byteArray3 = base64_0.encode(byteArray0);
      Base64.isArrayByteBase64(byteArray3);
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
      
      base64_0.encode(byteArray2);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.shortValueExact();
      byte[] byteArray4 = Base64.encodeInteger(bigInteger1);
      int int0 = base64_0.readResults(byteArray4, (byte)0, 55);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray4);
      assertEquals(0, int0);
      
      base64_0.decode(byteArray3, 496, (-514));
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61, (byte)0}, byteArray3);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Base64 base64_0 = new Base64(61);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray1 = base64_0.encode((byte[]) null);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = "org.apache.commons.codec.EncoderException";
      byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.EncoderException");
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)89;
      byteArray1[1] = (byte)111;
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte)27;
      byteArray1[4] = (byte)1;
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger0);
      byteArray1[5] = (byte) (-104);
      byteArray1[6] = (byte)110;
      byteArray1[7] = (byte)0;
      byteArray1[8] = (byte)0;
      Base64.encodeBase64URLSafe(byteArray1);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 1826, 1826);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1826
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-117);
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)7;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(14, byteArray1.length);
      
      base64_0.decode((Object) "org.apache.commons.codec.DecoderException");
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.bitCount();
      bigInteger0.not();
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray2);
      assertEquals(4, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      boolean boolean0 = true;
      Base64 base64_0 = new Base64((-1505), byteArray0, true);
      Object object0 = new Object();
      bigInteger0.bitLength();
      base64_0.decode(byteArray0, (int) (byte)0, (-337));
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64.decodeInteger(byteArray0);
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean0);
      
      Base64 base64_0 = new Base64(0, byteArray0);
      base64_0.readResults(byteArray0, 0, (-1216));
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61}, byteArray1);
      assertEquals(4, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Base64 base64_0 = new Base64(3046);
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(6, byteArray1.length);
      
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-112);
      base64_0.readResults(byteArray0, (byte) (-67), (byte) (-112));
      byteArray0[2] = (byte)9;
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      base64_0.avail();
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      base64_0.readResults(byteArray3, 0, 0);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray3);
      assertEquals(4, byteArray3.length);
      
      base64_0.decode(byteArray0, 0, (int) (byte) (-112));
      assertNotSame(byteArray0, byteArray2);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Object object0 = base64_0.decode((Object) "LpG/_Z+B");
      Object object1 = base64_0.encode(object0);
      Object object2 = base64_0.encode(object1);
      byte[] byteArray0 = new byte[8];
      base64_0.encodeToString(byteArray0);
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte)69;
      base64_0.encode(byteArray0);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)100;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      Base64.decodeBase64((String) null);
      Base64.decodeBase64(byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
      base64_0.encode(object2);
      base64_0.hasData();
      Base64.encodeBase64String(byteArray0);
      Object object3 = new Object();
      try { 
        base64_0.decode(object3);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64(byteArray1, true, true, 91);
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.isBase64("");
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(") than the specified maxium size of ", 64);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Radix out of range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)27);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)27;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      boolean boolean1 = Base64.isArrayByteBase64(byteArray1);
      assertTrue(boolean1);
      
      Base64.decodeBase64(byteArray1);
      Base64 base64_0 = new Base64((byte)27);
      byte[] byteArray2 = base64_0.decode(byteArray1);
      assertEquals(8, byteArray1.length);
      assertEquals(4, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)27, (byte)27, (byte)27, (byte)27}, byteArray2);
      
      byte[] byteArray3 = new byte[9];
      byteArray3[0] = (byte)27;
      byteArray3[1] = (byte)27;
      byte[] byteArray4 = new byte[3];
      byteArray4[0] = (byte)27;
      Base64.isBase64("");
      byteArray4[1] = (byte)27;
      byteArray4[2] = (byte)105;
      Base64.encodeBase64(byteArray4, false, true);
      byteArray3[2] = (byte)27;
      byteArray3[3] = (byte)27;
      byteArray3[4] = (byte)91;
      byteArray3[5] = (byte)27;
      byteArray3[6] = (byte)27;
      byteArray3[7] = (byte)27;
      byteArray3[8] = (byte)27;
      byte[] byteArray5 = Base64.encodeBase64(byteArray3, false, true);
      assertEquals(12, byteArray5.length);
      
      byte[] byteArray6 = base64_0.decode(byteArray0);
      byte[] byteArray7 = Base64.encodeBase64(byteArray6, true, false, 116);
      assertEquals(0, byteArray7.length);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte) (-68);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [&\\\u0000R\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Base64 base64_0 = new Base64(0, (byte[]) null, false);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)121;
      byteArray0[6] = (byte) (-123);
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [&\u0000\uFFFD\uFFFD\u0000y\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)110;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(283, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [V\u0007\uFFFD\uFFFD\u0000\u0001n]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byteArray0[0] = (byte)0;
      base64_0.encode(byteArray0);
      Base64.encodeBase64(byteArray1);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61, (byte)13, (byte)10}, byteArray1);
      assertEquals(6, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)39;
      byteArray0[7] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.decode("vG*+i7Y[");
      assertArrayEquals(new byte[] {(byte) (-68), (byte)111, (byte) (-94), (byte) (-19)}, byteArray3);
      assertEquals(4, byteArray3.length);
      
      Object object0 = base64_0.decode((Object) "");
      Object object1 = base64_0.encode(object0);
      assertSame(object1, object0);
      
      boolean boolean0 = Base64.isArrayByteBase64(byteArray2);
      assertTrue(boolean0);
      assertEquals(21, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Object object0 = new Object();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      base64_0.encode(byteArray0, (int) (byte)0, (int) (byte)0);
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }
}
