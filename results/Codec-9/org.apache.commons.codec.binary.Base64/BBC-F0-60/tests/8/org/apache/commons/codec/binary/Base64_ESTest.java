/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:06:23 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      BigInteger bigInteger0 = new BigInteger(8048, mockRandom0);
      BigInteger bigInteger1 = bigInteger0.multiply(bigInteger0);
      BigInteger bigInteger2 = bigInteger1.multiply(bigInteger1);
      BigInteger bigInteger3 = bigInteger1.multiply(bigInteger2);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger3);
      Base64 base64_0 = new Base64(1717);
      base64_0.decode(byteArray0);
      Base64.encodeInteger(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      BigInteger bigInteger0 = new BigInteger(8044, mockRandom0);
      BigInteger bigInteger1 = bigInteger0.multiply(bigInteger0);
      BigInteger bigInteger2 = bigInteger1.multiply(bigInteger1);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger2);
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0, 32, 1417);
      byte[] byteArray1 = new byte[6];
      byte byte0 = (byte)31;
      byteArray1[0] = (byte)31;
      byte byte1 = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-126);
      byteArray1[3] = (byte)113;
      byteArray1[4] = (byte)0;
      byte byte2 = (byte) (-44);
      // Undeclared exception!
      Base64.encodeBase64Chunked(byteArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      BigInteger bigInteger0 = new BigInteger(8048, mockRandom0);
      BigInteger bigInteger1 = bigInteger0.multiply(bigInteger0);
      BigInteger bigInteger2 = bigInteger1.multiply(bigInteger1);
      BigInteger bigInteger3 = bigInteger1.multiply(bigInteger2);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger3);
      Base64 base64_0 = new Base64(8048);
      // Undeclared exception!
      Base64.encodeBase64(byteArray0, true, true);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      BigInteger bigInteger0 = new BigInteger(8048, mockRandom0);
      BigInteger bigInteger1 = bigInteger0.multiply(bigInteger0);
      BigInteger bigInteger2 = bigInteger1.multiply(bigInteger1);
      BigInteger bigInteger3 = bigInteger1.multiply(bigInteger2);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger3);
      Base64 base64_0 = new Base64(8048);
      // Undeclared exception!
      Base64.encodeBase64String(byteArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      BigInteger bigInteger0 = new BigInteger(8048, mockRandom0);
      BigInteger bigInteger1 = bigInteger0.multiply(bigInteger0);
      BigInteger bigInteger2 = bigInteger1.multiply(bigInteger1);
      BigInteger bigInteger3 = bigInteger1.multiply(bigInteger2);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger3);
      Base64 base64_0 = new Base64(8124);
      // Undeclared exception!
      Base64.encodeBase64URLSafeString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-138), byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)58;
      byteArray1[1] = (byte)74;
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      BigInteger bigInteger0 = new BigInteger(8048, mockRandom0);
      mockRandom0.nextDouble();
      BigInteger bigInteger1 = bigInteger0.multiply(bigInteger0);
      BigInteger bigInteger2 = bigInteger1.multiply(bigInteger1);
      BigInteger bigInteger3 = bigInteger1.multiply(bigInteger2);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger3);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(1720);
      base64_0.decode(byteArray0);
      Base64.isArrayByteBase64(byteArray1);
      // Undeclared exception!
      Base64.discardWhitespace(byteArray1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      BigInteger bigInteger0 = new BigInteger(8048, mockRandom0);
      mockRandom0.nextDouble();
      BigInteger bigInteger1 = bigInteger0.multiply(bigInteger0);
      BigInteger bigInteger2 = bigInteger1.multiply(bigInteger1);
      BigInteger bigInteger3 = bigInteger1.multiply(bigInteger2);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger3);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      int int0 = 1720;
      Base64 base64_0 = new Base64(1720);
      // Undeclared exception!
      base64_0.encodeToString(byteArray1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      BigInteger bigInteger0 = new BigInteger(8048, mockRandom0);
      mockRandom0.nextBoolean();
      mockRandom0.nextDouble();
      BigInteger bigInteger1 = bigInteger0.multiply(bigInteger0);
      BigInteger bigInteger2 = bigInteger1.multiply(bigInteger1);
      BigInteger bigInteger3 = bigInteger1.multiply(bigInteger2);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger3);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(1720);
      base64_0.decode(byteArray1);
      base64_0.decode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8003, mockRandom0);
      mockRandom0.nextDouble();
      BigInteger bigInteger1 = bigInteger0.multiply(bigInteger0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(true);
      Base64.encodeInteger(bigInteger0);
      mockRandom0.nextInt();
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.encode(byteArray0, 1, 2262);
      mockRandom0.longs();
      // Undeclared exception!
      base64_0.encode(byteArray0, (int) (byte)5, 2262);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8048, mockRandom0);
      mockRandom0.nextDouble();
      BigInteger bigInteger1 = bigInteger0.multiply(bigInteger0);
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(true);
      bigInteger0.doubleValue();
      BigInteger bigInteger2 = BigInteger.ONE;
      bigInteger0.xor(bigInteger2);
      BigInteger bigInteger3 = bigInteger1.multiply(bigInteger1);
      BigInteger bigInteger4 = bigInteger1.multiply(bigInteger3);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger4);
      // Undeclared exception!
      Base64.encodeBase64(byteArray0, true);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8048, mockRandom0);
      mockRandom0.nextDouble();
      BigInteger bigInteger1 = bigInteger0.multiply(bigInteger0);
      Base64 base64_0 = new Base64(true);
      BigInteger bigInteger2 = BigInteger.ONE;
      bigInteger0.xor(bigInteger2);
      BigInteger bigInteger3 = bigInteger1.multiply(bigInteger1);
      BigInteger bigInteger4 = bigInteger1.multiply(bigInteger3);
      bigInteger4.not();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger4);
      Base64.decodeInteger(byteArray0);
      Base64.isBase64(byteArray0);
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger1 = new BigInteger(575, mockRandom0);
      mockRandom0.nextDouble();
      BigInteger bigInteger2 = bigInteger0.multiply(bigInteger1);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      bigInteger2.multiply(bigInteger0);
      Base64 base64_0 = new Base64();
      bigInteger2.multiply(bigInteger0);
      base64_0.encode(byteArray0, 1, 76);
      byte[] byteArray1 = new byte[4];
      byteArray0[75] = (byte) (-46);
      byteArray1[2] = (byte) (-56);
      byteArray1[3] = (byte)4;
      base64_0.encode(byteArray1, (-563), (-971));
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8003, mockRandom0);
      mockRandom0.nextDouble();
      BigInteger bigInteger1 = bigInteger0.multiply(bigInteger0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(true);
      bigInteger1.multiply(bigInteger1);
      base64_0.encode(byteArray0, 1, 2247);
      Base64.encodeBase64String(byteArray0);
      base64_0.encode(byteArray0, (int) (byte)5, 2247);
      int int0 = 0;
      base64_0.encode(byteArray0, 0, 0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      int int1 = 623;
      // Undeclared exception!
      base64_0.encode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger1 = new BigInteger(575, mockRandom0);
      mockRandom0.nextDouble();
      BigInteger bigInteger2 = bigInteger0.multiply(bigInteger1);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(false);
      bigInteger2.multiply(bigInteger0);
      base64_0.encode(byteArray0, 1, 68);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)9;
      byteArray1[1] = (byte) (-46);
      byteArray1[2] = (byte) (-56);
      byteArray1[3] = (byte) (-1);
      base64_0.encode(byteArray1, (-563), (-971));
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger1 = new BigInteger(575, mockRandom0);
      mockRandom0.nextDouble();
      BigInteger bigInteger2 = bigInteger0.multiply(bigInteger1);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(true);
      bigInteger2.multiply(bigInteger0);
      base64_0.encode(byteArray0, 1, 68);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)9;
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte) (-56);
      byteArray1[3] = (byte) (-1);
      base64_0.encode(byteArray1, (-563), (-971));
      Base64.decodeInteger(byteArray1);
      Base64.encodeBase64(byteArray0, true);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Base64 base64_0 = new Base64((-3806), (byte[]) null);
      Base64.decodeBase64((byte[]) null);
      Base64.encodeBase64((byte[]) null, true, false);
      base64_0.decode((byte[]) null);
      Base64.encodeBase64((byte[]) null, true, true);
      base64_0.encode((byte[]) null, (-3806), (-3806));
      int int0 = (-516);
      base64_0.encode((byte[]) null, (-516), (-516));
      int int1 = 19;
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, 19, (-3806));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8003, mockRandom0);
      mockRandom0.nextDouble();
      BigInteger bigInteger1 = bigInteger0.multiply(bigInteger0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(true);
      BigInteger bigInteger2 = BigInteger.ZERO;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)99;
      byteArray1[1] = (byte) (-24);
      byteArray1[2] = (byte)65;
      byteArray1[3] = (byte)49;
      byteArray1[4] = (byte) (-75);
      byteArray1[5] = (byte)12;
      byteArray1[6] = (byte) (-43);
      byteArray1[7] = (byte)38;
      byteArray1[8] = (byte)60;
      Base64.encodeBase64(byteArray1, false, true);
      bigInteger1.multiply(bigInteger2);
      base64_0.encode(byteArray0, 1, 2247);
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)67;
      byteArray2[1] = (byte) (-99);
      base64_0.encode(byteArray0, (int) (byte)67, (-23));
      base64_0.decode(byteArray0, 5150, 2247);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8003, mockRandom0);
      mockRandom0.nextDouble();
      BigInteger bigInteger1 = bigInteger0.multiply(bigInteger0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(true);
      BigInteger bigInteger2 = BigInteger.ZERO;
      bigInteger1.multiply(bigInteger2);
      base64_0.encode(byteArray0, 1, 2247);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)67;
      byteArray1[1] = (byte) (-99);
      byteArray1[3] = (byte)48;
      byteArray1[4] = (byte)23;
      byteArray1[5] = (byte)62;
      byteArray1[6] = (byte)67;
      byteArray1[7] = (byte)84;
      byteArray1[8] = (byte)5;
      Base64.encodeBase64String(byteArray1);
      Base64.encodeBase64(byteArray1, true);
      base64_0.avail();
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, 7756, 4132);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1020);
      BigInteger bigInteger0 = new BigInteger(8003, mockRandom0);
      mockRandom0.nextDouble();
      BigInteger bigInteger1 = bigInteger0.multiply(bigInteger0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(true);
      BigInteger bigInteger2 = BigInteger.ZERO;
      bigInteger1.multiply(bigInteger2);
      base64_0.encode(byteArray0, 1, 2247);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)67;
      byteArray1[1] = (byte) (-99);
      base64_0.decode(byteArray0, 1993, 1993);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("PQWuwptP");
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertArrayEquals(new byte[] {(byte)61, (byte)5, (byte) (-82), (byte) (-62), (byte) (-101), (byte)79}, byteArray0);
      assertFalse(boolean0);
      assertEquals(6, byteArray0.length);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64((byte)15, byteArray1);
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)2;
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)0;
      byteArray2[6] = (byte)93;
      byteArray2[7] = (byte)15;
      byteArray2[8] = (byte)2;
      base64_0.encode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1029);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-110);
      byteArray0[5] = (byte) (-120);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(false);
      base64_0.readResults(byteArray0, (byte) (-101), 3878);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Base64.isBase64((byte)61);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte)61;
      byteArray0[6] = (byte)61;
      byteArray0[7] = (byte)61;
      Base64.encodeBase64(byteArray0, true, true, (int) (byte)61);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      BigInteger bigInteger0 = new BigInteger(7960, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = new byte[2];
      bigInteger0.negate();
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)1;
      base64_0.decode(byteArray0, 0, 7976);
      base64_0.decode(byteArray1, 100, 100);
      Base64.isBase64((byte)1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1010);
      mockRandom0.nextInt();
      BigInteger bigInteger0 = new BigInteger(1010, mockRandom0);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.multiply(bigInteger1);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64(true);
      base64_1.decode(byteArray0, 0, 3024);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      int int0 = 1861;
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(1717986918, mockRandom0);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.multiply(bigInteger1);
      Base64.encodeInteger(bigInteger2);
      Base64 base64_0 = new Base64();
      base64_0.readResults(byteArray0, int0, int0);
      bigInteger2.abs();
      byte[] byteArray1 = new byte[3];
      byte byte0 = (byte) (-37);
      byteArray1[0] = byte0;
      long long0 = (-334L);
      long long1 = (-2199L);
      long long2 = 0L;
      mockRandom0.longs(long0, long1, long2);
      byte byte1 = (byte) (-59);
      byteArray1[1] = byte1;
      byte byte2 = (byte) (-69);
      byteArray1[2] = byte2;
      Base64.decodeBase64(byteArray1);
      Base64.isArrayByteBase64(byteArray0);
      Base64.encodeInteger(bigInteger2);
      Base64.toIntegerBytes(bigInteger2);
      byte byte3 = (byte)17;
      Base64.isBase64(byte3);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-28);
      Base64.encodeBase64(byteArray0, false, true, 10);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64((byte)47);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, (int) (byte)1, (int) (byte)6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(50);
      BigInteger bigInteger0 = new BigInteger(1507, mockRandom0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      boolean boolean0 = Base64.isBase64("_TM/");
      assertTrue(boolean0);
      
      base64_0.encode(byteArray0, 50, 50);
      int int0 = base64_0.readResults(byteArray0, 50, 40);
      assertEquals(248, byteArray0.length);
      assertEquals(40, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(467, mockRandom0);
      bigInteger0.multiply(bigInteger0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(1314);
      base64_0.decode(byteArray1, 467, (-1));
      assertEquals(76, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1010);
      BigInteger bigInteger0 = new BigInteger(1010, mockRandom0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.multiply(bigInteger1);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(91);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 1, 1355);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 164
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1061);
      BigInteger bigInteger0 = new BigInteger(1061, mockRandom0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      BigInteger bigInteger2 = BigInteger.TEN;
      Base64 base64_0 = new Base64(16);
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)52;
      byteArray2[1] = (byte)52;
      byteArray2[2] = (byte)44;
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true);
      //  // Unstable assertion: assertEquals(6, byteArray3.length);
      
      byte[] byteArray4 = base64_0.encode(byteArray0);
      boolean boolean0 = Base64.isArrayByteBase64(byteArray4);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertEquals(262, byteArray4.length);
      
      byte[] byteArray5 = Base64.discardWhitespace(byteArray1);
      //  // Unstable assertion: assertEquals(125, byteArray5.length);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Base64.isBase64("H{U");
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger0.remainder(bigInteger1);
      Base64.decodeBase64(byteArray0);
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64((byte)93, byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)28;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)28;
      byteArray1[4] = (byte)28;
      byteArray1[5] = (byte)6;
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte)0;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray2, (int) (byte)0, (int) (byte)28);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Base64.decodeBase64((String) null);
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.isArrayByteBase64(byteArray0);
      Base64.encodeBase64String((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-1);
      byteArray0[0] = (byte) (-1);
      Base64 base64_0 = new Base64(16);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, 20);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64(") than the specified maxium size of ");
      Base64 base64_0 = new Base64(true);
      Base64 base64_1 = new Base64(false);
      base64_1.encode(byteArray0);
      base64_0.decode("Input array too big, the output array would be bigger (");
      byte[] byteArray1 = base64_1.decode((String) null);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64URLSafeString((byte[]) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      int int0 = 1;
      bigInteger1.clearBit(1);
      BigInteger bigInteger2 = bigInteger0.or(bigInteger1);
      bigInteger0.or(bigInteger1);
      bigInteger2.getLowestSetBit();
      bigInteger0.mod(bigInteger1);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(1, byteArray1);
      base64_0.readResults((byte[]) null, 1, 1);
      bigInteger1.andNot(bigInteger2);
      Base64.encodeBase64URLSafe((byte[]) null);
      try { 
        base64_0.decode((Object) bigInteger2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64.isArrayByteBase64(byteArray0);
      Base64.encodeBase64String(byteArray0);
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.shiftRight((-12));
      bigInteger0.bitCount();
      bigInteger0.signum();
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64((-1207), byteArray0);
      base64_0.decode("org.apache.commons.codec.EncoderException");
      base64_0.decode((byte[]) null);
      base64_0.decode("org.apache.commons.codec.EncoderException");
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-12);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_1 = new Base64((byte) (-12), byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true, true);
      base64_0.decode(byteArray2, (int) (byte) (-12), (int) (byte) (-12));
      Base64.encodeBase64(byteArray2);
      Base64.decodeBase64("PSkuFLtP");
      boolean boolean0 = false;
      int int0 = 45;
      Base64.encodeBase64(byteArray1, true, true, 20);
      Base64.decodeBase64("PSkuFLtP");
      try { 
        base64_1.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64(") than the specified maxium size of ");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.toString(3174);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_0 = new Base64((-1688));
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray2);
      Base64.encodeBase64(byteArray4, true, false);
      BigInteger bigInteger1 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger0);
      Base64 base64_1 = new Base64();
      base64_1.encode(byteArray3);
      byte[] byteArray5 = new byte[3];
      byteArray5[0] = (byte) (-40);
      byteArray5[1] = (byte) (-84);
      byteArray5[2] = (byte) (-41);
      Base64.decodeBase64(byteArray5);
      BigInteger bigInteger2 = Base64.decodeInteger(byteArray4);
      try { 
        base64_0.encode((Object) bigInteger2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64(") than the specified maxium size of ");
      Base64 base64_0 = new Base64(true);
      int int0 = 2103;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 0, 2103);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 21
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)93;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64((byte)28, byteArray1);
      Base64.encodeBase64(byteArray1, false, false);
      Base64.encodeBase64(byteArray0);
      base64_0.decode(byteArray1, (int) (byte)2, (int) (byte)0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      Base64.discardWhitespace(byteArray2);
      Base64.encodeBase64(byteArray0, false, true, 45);
      Base64.decodeBase64("PSkuFLtP");
      base64_0.decode((Object) "");
      byte[] byteArray3 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64(byteArray3, false, false, 0);
      Base64.isBase64((byte) (-123));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeBase64((byte[]) null, false, false, 108);
      Base64.encodeBase64((byte[]) null, true);
      Base64 base64_0 = new Base64(12, (byte[]) null, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte) (-26);
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 encode is not a byte[]");
      Base64.isBase64("Parameter supplied to Base64 encode is not a byte[]");
      Base64.encodeBase64(byteArray0, false);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64.isArrayByteBase64(byteArray0);
      Base64.encodeBase64String(byteArray0);
      Base64.discardWhitespace(byteArray1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)22;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      bigInteger0.toString(0);
      Base64 base64_0 = new Base64((-2002));
      base64_0.encode(byteArray0, (-381), (-2182));
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray1, (-1), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      Base64.encodeBase64URLSafe((byte[]) null);
      base64_0.decode((byte[]) null);
      Base64.decodeBase64((byte[]) null);
      Base64.encodeBase64((byte[]) null, false, true, (int) (byte)0);
      base64_0.decode((byte[]) null);
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, 0, 2217);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)93;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64((byte)28, byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false);
      base64_0.decode(byteArray1, (int) (byte)2, (int) (byte)0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray1);
      Base64.discardWhitespace(byteArray3);
      Base64.encodeBase64(byteArray0, false, true, 45);
      byte[] byteArray4 = Base64.decodeBase64("PSkuFLtP");
      base64_0.decode((Object) "");
      base64_0.readResults(byteArray0, 393, 2626);
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.encodeToString(byteArray1);
      Base64.discardWhitespace(byteArray2);
      byte[] byteArray5 = base64_0.decode("org.apache.commons.codec.binary.Base64");
      base64_0.encodeToString(byteArray5);
      Base64.encodeBase64(byteArray4, false, false, 105);
      Base64.isBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte byte0 = (byte)0;
      byte[] byteArray0 = null;
      bigInteger0.clearBit((byte)0);
      Base64.encodeBase64URLSafe((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = base64_0.decode("z^`lXCf|xlF^]n");
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray1 = new byte[0];
      Base64 base64_1 = new Base64(false);
      Base64.decodeBase64(byteArray1);
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte) (-1);
      byteArray2[1] = (byte)110;
      byteArray2[2] = (byte)2;
      byteArray2[3] = (byte)59;
      byteArray2[4] = (byte) (-1);
      byteArray2[5] = (byte)0;
      byteArray2[6] = (byte) (-110);
      BigInteger bigInteger0 = new BigInteger(byteArray2);
      Base64.encodeInteger(bigInteger0);
      base64_0.decode("jc81BV|6M8W");
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-50);
      byte byte0 = (byte) (-9);
      byteArray0[6] = (byte) (-9);
      Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      bigInteger0.pow(55);
      base64_0.decode(byteArray0);
      Object object0 = base64_0.decode((Object) "M-w%xT;?Y$t");
      base64_0.encode(object0);
      Object object1 = base64_0.decode((Object) "M-w%xT;?Y$t");
      base64_0.encode(object1);
      try { 
        base64_0.encode((Object) "%v\"jX");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)28;
      byte byte0 = (byte) (-54);
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte)93;
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      bigInteger0.floatValue();
      Base64.encodeBase64(byteArray0, true, true, (int) (byte)93);
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      bigInteger0.bitCount();
      Base64 base64_0 = new Base64(9);
      bigInteger0.bitCount();
      base64_0.avail();
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64URLSafe(byteArray1);
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray0);
      bigInteger1.toString(3969);
      Base64 base64_1 = new Base64(4);
      byte[] byteArray2 = new byte[0];
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray2, (-1), 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      bigInteger0.bitCount();
      Base64 base64_0 = new Base64(9);
      bigInteger0.bitCount();
      base64_0.avail();
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      bigInteger0.signum();
      Base64.isBase64((byte)106);
      byte[] byteArray2 = base64_0.decode(byteArray0);
      bigInteger0.doubleValue();
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, false, false, 9);
      base64_0.avail();
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.floatValue();
      bigInteger1.intValue();
      bigInteger0.modInverse(bigInteger1);
      base64_0.avail();
      byte[] byteArray4 = base64_0.decode(byteArray0);
      base64_0.decode(byteArray1);
      byte[] byteArray5 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray6 = base64_0.encode(byteArray5);
      Base64.decodeBase64("{,sH{7zwH");
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64String(byteArray3);
      base64_0.decode((Object) "");
      Base64.decodeInteger(byteArray2);
      Base64.isBase64(byteArray6);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray7 = Base64.discardWhitespace(byteArray4);
      base64_0.encode(byteArray7);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-12);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-12);
      byteArray1[1] = (byte) (-12);
      byteArray1[2] = (byte)60;
      byteArray1[3] = (byte)60;
      byteArray1[4] = (byte)60;
      byteArray1[5] = (byte) (-12);
      byteArray1[6] = (byte) (-12);
      byteArray1[7] = (byte) (-12);
      Base64.encodeBase64URLSafeString(byteArray1);
      base64_0.encode(byteArray0, 0, (int) (byte) (-12));
      Base64.decodeBase64(byteArray1);
      Base64.encodeBase64((byte[]) null, false, false, 19);
      Base64.isBase64((byte)34);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = base64_0.decode("z^`lXCf|xlF^]n");
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = new byte[0];
      Base64 base64_1 = new Base64(64, byteArray2, false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64Chunked(byteArray1);
      Base64.encodeBase64(byteArray0, false, false);
      BigInteger bigInteger1 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger1);
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      bigInteger0.bitCount();
      Base64 base64_0 = new Base64(9);
      bigInteger0.bitCount();
      base64_0.avail();
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      bigInteger0.signum();
      Base64.isBase64((byte)106);
      byte[] byteArray2 = base64_0.decode(byteArray0);
      bigInteger0.doubleValue();
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, false, false, 9);
      base64_0.avail();
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.floatValue();
      bigInteger1.intValue();
      bigInteger0.modInverse(bigInteger1);
      base64_0.avail();
      byte[] byteArray4 = base64_0.decode(byteArray0);
      base64_0.decode(byteArray1);
      byte[] byteArray5 = Base64.decodeBase64("");
      byte[] byteArray6 = base64_0.encode(byteArray5);
      Base64.decodeBase64("{,sH{7zwH");
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64String(byteArray3);
      base64_0.decode((Object) "");
      Base64.decodeInteger(byteArray2);
      Base64.isBase64(byteArray6);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.discardWhitespace(byteArray4);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte) (-41);
      Base64 base64_0 = new Base64();
      Base64.decodeInteger(byteArray0);
      base64_0.encodeToString(byteArray0);
      base64_0.readResults(byteArray0, (byte) (-41), 102);
      Object object0 = new Object();
      Object object1 = new Object();
      try { 
        base64_0.encode(object1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = base64_0.decode("z^`lXCf|xlF^]n");
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.isArrayByteBase64(byteArray1);
      Base64.isBase64(byteArray0);
      base64_0.decode(byteArray1, 0, (-2511));
      base64_0.encode(byteArray1, 0, 437);
      base64_0.readResults(byteArray1, 0, 0);
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte) (-59);
      byteArray2[1] = (byte) (-105);
      byteArray2[2] = (byte)1;
      byteArray2[3] = (byte)16;
      byteArray2[4] = (byte) (-15);
      byteArray2[5] = (byte)47;
      byteArray2[6] = (byte)1;
      byteArray2[7] = (byte) (-4);
      byteArray2[8] = (byte)16;
      Base64.decodeBase64(byteArray2);
      Base64.encodeBase64(byteArray1, true);
      base64_0.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      Base64.decodeBase64((String) null);
      Base64 base64_0 = new Base64(true);
      int int0 = 632;
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 632, 632);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte byte0 = (byte)2;
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64((byte)2, byteArray1);
      Base64.encodeBase64(byteArray1, false, false);
      base64_0.decode(byteArray0, (int) (byte)0, (int) (byte)0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (int) (byte)2, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)93;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64((byte)28, byteArray1);
      boolean boolean0 = false;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false);
      int int0 = 393;
      base64_0.decode(byteArray1, (int) (byte)2, (int) (byte)0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray2, (int) (byte)0, 51);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = null;
      base64_0.encode((byte[]) null);
      int int0 = 233;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = null;
      try {
        bigInteger1 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-78);
      Base64 base64_0 = new Base64(0, byteArray0);
      Base64.encodeBase64(byteArray0, false);
      base64_0.decode("jJvn");
      base64_0.isUrlSafe();
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafe(byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.toByteArray();
      BigInteger bigInteger1 = null;
      try {
        bigInteger1 = new BigInteger(byteArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)27;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64((byte)0, byteArray2);
      byte[] byteArray3 = base64_0.encode(byteArray1);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.abs();
      Base64.encodeBase64(byteArray1, true, true, 25);
      bigInteger1.not();
      bigInteger0.add(bigInteger1);
      byte[] byteArray4 = base64_0.decode("");
      byte[] byteArray5 = Base64.discardWhitespace(byteArray3);
      base64_0.decode("org.apache.commons.codec.EncoderException");
      base64_0.encodeToString(byteArray4);
      Base64.encodeBase64(byteArray5, false, true, 76);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte) (-41);
      Base64.encodeBase64(byteArray0, false, false, 645);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      byte[] byteArray0 = null;
      boolean boolean0 = true;
      Base64.encodeBase64((byte[]) null, true, true);
      Base64 base64_0 = new Base64(2027);
      Base64.encodeBase64((byte[]) null);
      Base64.encodeBase64Chunked((byte[]) null);
      base64_0.decode((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64.isBase64((byte)0);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, false, false, (int) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)1;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      base64_0.readResults(byteArray0, 55, 0);
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-89);
      base64_0.decode(byteArray0);
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)39;
      byteArray2[1] = (byte)10;
      byteArray2[2] = (byte) (-89);
      byteArray2[3] = (byte) (-79);
      base64_0.encodeToString(byteArray2);
      Base64.decodeBase64("sJhIsu(%l*B!X");
      base64_0.avail();
      base64_0.readResults(byteArray0, 0, (byte)0);
      Base64.encodeBase64URLSafe(byteArray1);
      base64_0.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)27;
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)27;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)122;
      byteArray1[3] = (byte)27;
      byteArray1[4] = (byte)120;
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray3 = new byte[9];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte)27;
      byteArray3[2] = (byte)122;
      byteArray3[3] = (byte)27;
      byteArray3[4] = (byte)52;
      byteArray3[5] = (byte)122;
      byteArray3[6] = (byte)122;
      byteArray3[7] = (byte)120;
      byteArray3[8] = (byte)120;
      Base64.decodeInteger(byteArray3);
      Base64.discardWhitespace(byteArray3);
      Base64.encodeBase64String(byteArray2);
      Base64 base64_0 = new Base64();
      Base64.decodeInteger(byteArray0);
      base64_0.encodeToString(byteArray1);
      base64_0.readResults(byteArray1, (byte)27, (byte)27);
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)19;
      byteArray0[5] = (byte)107;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-4086), byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000\uFFFD@\u0000\u0013k\u0000\u0000\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Base64 base64_0 = new Base64();
      String string0 = "Be";
      base64_0.encodeToString((byte[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-47);
      byte byte0 = (byte)79;
      byteArray0[2] = (byte)79;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte) (-47), 2861);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -47
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64(") than the specified maxium size of ");
      Base64 base64_0 = new Base64(true);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 2114, 2114);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2114
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-12);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-12);
      byteArray1[1] = (byte) (-12);
      byteArray1[2] = (byte)60;
      byteArray1[3] = (byte)60;
      byteArray1[4] = (byte)60;
      byteArray1[5] = (byte) (-12);
      byteArray1[6] = (byte) (-12);
      byteArray1[7] = (byte) (-12);
      Base64.encodeBase64URLSafeString(byteArray1);
      base64_0.encode(byteArray0, 0, (int) (byte) (-12));
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)0;
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64(byteArray0, false, false);
      base64_0.avail();
      base64_0.hasData();
      base64_0.avail();
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.isArrayByteBase64(byteArray2);
      byte[] byteArray3 = new byte[1];
      byteArray3[0] = (byte)0;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray3, false, false, (-3808));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of -3808
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = base64_0.decode("z^`lXCf|xlF^]n");
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.isArrayByteBase64(byteArray1);
      Base64.isBase64(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      bigInteger0.floatValue();
      Base64.encodeBase64(byteArray1, true, true, 67);
      Base64.isBase64("z^`lXCf|xlF^]n");
      base64_0.decode(byteArray0);
      Base64.decodeBase64(byteArray1);
      bigInteger0.nextProbablePrime();
      base64_0.decode("+<Uw{rkUU7i*mMl1");
      // Undeclared exception!
      try { 
        bigInteger0.pow((-1875));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Negative exponent
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte) (-24);
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte)25;
      Base64 base64_0 = new Base64(0, byteArray0, true);
      Base64.decodeBase64(byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.encodeInteger(bigInteger0);
      base64_0.decode("91N{}tWf=30#>JwL");
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isArrayByteBase64(byteArray0);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.encodeToString(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64String(byteArray1);
      Base64.isBase64("s`$&Z_#0bscZj1|P&9f");
      Base64.encodeBase64String(byteArray2);
      byte[] byteArray3 = base64_0.decode("xY*^&K1W$.6W9-Ox");
      base64_0.decode(byteArray0);
      byte[] byteArray4 = Base64.encodeBase64URLSafe(byteArray3);
      Base64.isBase64(byteArray4);
      Base64.encodeBase64(byteArray1, true);
      Base64.encodeBase64(byteArray3, true, false);
      Base64.discardWhitespace(byteArray2);
      byte[] byteArray5 = new byte[9];
      byteArray5[0] = (byte) (-56);
      byteArray5[1] = (byte)0;
      byteArray5[2] = (byte)0;
      byteArray5[3] = (byte)0;
      byteArray5[4] = (byte)0;
      byteArray5[5] = (byte) (-45);
      byteArray5[6] = (byte)0;
      byteArray5[7] = (byte)58;
      byteArray5[8] = (byte)0;
      base64_0.decode(byteArray5);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)93;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64((byte)0, byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false);
      int int0 = 393;
      base64_0.decode(byteArray1, (int) (byte)2, (int) (byte)0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray2, (int) (byte)0, 51);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Base64 base64_0 = new Base64(2120);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-11);
      Base64.encodeBase64(byteArray0, true);
      byte[] byteArray1 = new byte[4];
      Base64.encodeBase64(byteArray1, false, false);
      byteArray1[0] = (byte)105;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)34;
      byteArray1[3] = (byte)78;
      Base64.encodeBase64URLSafe(byteArray1);
      base64_0.isUrlSafe();
      Base64.isBase64("");
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-50);
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte)113;
      byteArray0[8] = (byte) (-78);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(351, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0019\u0000\u0000\u0000\uFFFD\uFFFD\u000Bq\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Base64 base64_0 = new Base64(87);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte)33;
      byteArray0[5] = (byte)111;
      byteArray0[6] = (byte)0;
      Base64.encodeBase64String(byteArray0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("O/CK@mM;lg#W##y");
      Base64.decodeBase64((String) null);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.not();
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray0);
      bigInteger0.max(bigInteger1);
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64(byteArray0, true, false);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64(byteArray1, true, false, 64);
      base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.decode(byteArray1);
      Base64.encodeBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte)22;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)75;
      bigInteger0.toString((int) (byte)0);
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)31;
      byteArray2[4] = (byte)50;
      byteArray2[5] = (byte)0;
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      Base64 base64_0 = new Base64((byte)22);
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64Chunked(byteArray3);
      byte[] byteArray4 = Base64.encodeBase64(byteArray1, true, true);
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray5 = base64_0.encode(byteArray3);
      Base64.decodeBase64(byteArray5);
      base64_0.decode(byteArray4, (-841), 49);
      byte[] byteArray6 = new byte[4];
      byteArray6[0] = (byte)0;
      byteArray6[1] = (byte)75;
      byteArray6[2] = (byte)31;
      byteArray6[3] = (byte)75;
      Base64.isArrayByteBase64(byteArray6);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)115;
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)46;
      byte byte1 = (byte)70;
      byteArray0[2] = (byte)70;
      byte byte2 = (byte)80;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byte byte3 = (byte)87;
      byteArray0[6] = (byte)87;
      byteArray0[7] = (byte)62;
      byteArray0[8] = (byte)11;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)0, byteArray1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [cy5GUP8AVz4L]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)47;
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)47;
      byteArray1[1] = (byte)47;
      byteArray1[2] = (byte)47;
      byteArray1[3] = (byte)47;
      byteArray1[4] = (byte)47;
      byteArray1[5] = (byte)47;
      byteArray1[6] = (byte)47;
      byteArray1[7] = (byte)47;
      byteArray1[8] = (byte)47;
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)82;
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64();
      Object object0 = base64_0.decode((Object) "");
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.mod(bigInteger1);
      Base64.encodeInteger(bigInteger0);
      base64_0.decode(object0);
      Base64.isBase64("");
      base64_0.encode(byteArray0, (-1), 0);
      Base64.decodeBase64(byteArray0);
      Object object1 = new Object();
      try { 
        base64_0.decode(object1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-19);
      byteArray0[7] = (byte)0;
      Base64.decodeBase64(byteArray0);
      Base64.isBase64("}Ql<GzL4c");
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, true, (int) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-93);
      byteArray0[6] = (byte) (-82);
      byteArray0[7] = (byte) (-80);
      byteArray0[8] = (byte) (-1);
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)94;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)87;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte) (-45);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      Base64.isBase64(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2);
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray2);
      base64_0.encodeToString(byteArray2);
      base64_0.decode((Object) "H");
      Base64.encodeBase64Chunked(byteArray3);
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      Base64.isArrayByteBase64(byteArray0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-68);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-64);
      byteArray0[8] = (byte)65;
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray1 = new byte[1];
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      byteArray1[0] = (byte) (-1);
      base64_0.encodeToString(byteArray1);
      Base64.encodeBase64Chunked(byteArray2);
      boolean boolean0 = base64_0.hasData();
      assertFalse(boolean0);
  }
}
