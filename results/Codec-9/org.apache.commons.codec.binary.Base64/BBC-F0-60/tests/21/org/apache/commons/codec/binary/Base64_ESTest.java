/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:07:36 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      BigInteger bigInteger0 = new BigInteger(6028, mockRandom0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short) (-17152), bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short) (-17152), bigInteger0.shortValue());
      assertEquals(1008, byteArray0.length);
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short) (-17152), bigInteger0.shortValue());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1008, byteArray0.length);
      assertEquals(1344, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short) (-17152), bigInteger0.shortValue());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals(1008, byteArray0.length);
      assertEquals(1344, byteArray1.length);
      assertEquals(1792, byteArray2.length);
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray2);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short) (-17152), bigInteger0.shortValue());
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertEquals(1008, byteArray0.length);
      assertEquals(1344, byteArray1.length);
      assertEquals(1792, byteArray2.length);
      assertEquals(2392, byteArray3.length);
      assertNotNull(byteArray3);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      
      Base64 base64_0 = new Base64(5);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      base64_0.decode(byteArray0, 1, 4);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short) (-17152), bigInteger0.shortValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(1008, byteArray0.length);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      
      base64_0.encode(byteArray2, 96, (-1902));
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short) (-17152), bigInteger0.shortValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertEquals(1008, byteArray0.length);
      assertEquals(1344, byteArray1.length);
      assertEquals(1792, byteArray2.length);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray3);
      
      byte[] byteArray4 = base64_0.decode(byteArray2);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short) (-17152), bigInteger0.shortValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertEquals(1008, byteArray0.length);
      assertEquals(1344, byteArray1.length);
      assertEquals(1792, byteArray2.length);
      assertEquals(1344, byteArray4.length);
      assertNotNull(byteArray4);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      BigInteger bigInteger0 = new BigInteger(6028, mockRandom0);
      assertEquals((short) (-17152), bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertEquals((short) (-17152), bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(1008, byteArray0.length);
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertEquals((short) (-17152), bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1008, byteArray0.length);
      assertEquals(1344, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      assertEquals((short) (-17152), bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(1008, byteArray0.length);
      assertEquals(1344, byteArray1.length);
      assertEquals(1792, byteArray2.length);
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray2);
      assertEquals((short) (-17152), bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertEquals(1008, byteArray0.length);
      assertEquals(1344, byteArray1.length);
      assertEquals(1792, byteArray2.length);
      assertEquals(2392, byteArray3.length);
      assertNotNull(byteArray3);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      
      Base64 base64_0 = new Base64(5);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      base64_0.decode(byteArray0, 1, 4);
      assertEquals((short) (-17152), bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(1008, byteArray0.length);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray3, 1, 6028);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2392
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      MockRandom mockRandom1 = new MockRandom((-2619L));
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      BigInteger bigInteger0 = new BigInteger(286, mockRandom1);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(bigInteger0);
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertEquals(48, byteArray0.length);
      assertNotNull(byteArray0);
      assertNotSame(mockRandom1, mockRandom0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(48, byteArray0.length);
      assertEquals(64, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(mockRandom1, mockRandom0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(48, byteArray0.length);
      assertEquals(64, byteArray1.length);
      assertEquals(88, byteArray2.length);
      assertNotNull(byteArray2);
      assertNotSame(mockRandom1, mockRandom0);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray2);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertEquals(48, byteArray0.length);
      assertEquals(64, byteArray1.length);
      assertEquals(88, byteArray2.length);
      assertEquals(120, byteArray3.length);
      assertNotNull(byteArray3);
      assertNotSame(mockRandom1, mockRandom0);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      
      Base64 base64_0 = new Base64(286);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      String string0 = Base64.encodeBase64String(byteArray3);
      assertEquals("VlZaYVIxRnNSbFpTYTBwVVZsVmFRMVZXVmtkU1ZrWldVbXRLVWxaVmNFTlZWbFpIVVd4R1YxWnJTbEpXVlZwRFZXcENSMUZzUmxaU2EwNXJUVVZhUTFWV1ZrZGliRVpXVW10S1VsWllRa05WVmxaSFVXYzlQUT09", string0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertEquals(48, byteArray0.length);
      assertEquals(64, byteArray1.length);
      assertEquals(88, byteArray2.length);
      assertEquals(120, byteArray3.length);
      assertNotNull(string0);
      assertNotSame(mockRandom1, mockRandom0);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      
      base64_0.decode(byteArray3, 15, 1);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertEquals(48, byteArray0.length);
      assertEquals(64, byteArray1.length);
      assertEquals(88, byteArray2.length);
      assertEquals(120, byteArray3.length);
      assertNotSame(mockRandom1, mockRandom0);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      
      base64_0.encode(byteArray1, 8184, (-343));
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertEquals(48, byteArray0.length);
      assertEquals(64, byteArray1.length);
      assertNotSame(mockRandom1, mockRandom0);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray3);
      
      byte[] byteArray4 = base64_0.decode(byteArray3);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertEquals(48, byteArray0.length);
      assertEquals(64, byteArray1.length);
      assertEquals(88, byteArray2.length);
      assertEquals(120, byteArray3.length);
      assertEquals(88, byteArray4.length);
      assertNotNull(byteArray4);
      assertNotSame(mockRandom1, mockRandom0);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      BigInteger bigInteger0 = new BigInteger(6031, mockRandom0);
      assertEquals((short) (-17152), bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      float float1 = bigInteger0.floatValue();
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertEquals((short) (-17152), bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotEquals(float1, float0, 0.01F);
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertEquals((short) (-17152), bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(1008, byteArray0.length);
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertEquals((short) (-17152), bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1008, byteArray0.length);
      assertEquals(1344, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      assertEquals((short) (-17152), bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(1008, byteArray0.length);
      assertEquals(1344, byteArray1.length);
      assertEquals(1792, byteArray2.length);
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray2);
      assertEquals((short) (-17152), bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertEquals(1008, byteArray0.length);
      assertEquals(1344, byteArray1.length);
      assertEquals(1792, byteArray2.length);
      assertEquals(2392, byteArray3.length);
      assertNotNull(byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray3);
      assertEquals((short) (-17152), bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertEquals(1008, byteArray0.length);
      assertEquals(1344, byteArray1.length);
      assertEquals(1792, byteArray2.length);
      assertEquals(2392, byteArray3.length);
      assertEquals(3192, byteArray4.length);
      assertNotNull(byteArray4);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray2);
      
      Base64 base64_0 = new Base64(26);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      // Undeclared exception!
      Base64.encodeBase64(byteArray4, true);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      BigInteger bigInteger0 = new BigInteger(6028, mockRandom0);
      assertEquals((short) (-17152), bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertEquals((short) (-17152), bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(1008, byteArray0.length);
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertEquals((short) (-17152), bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1008, byteArray0.length);
      assertEquals(1344, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      assertEquals((short) (-17152), bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals(1008, byteArray0.length);
      assertEquals(1344, byteArray1.length);
      assertEquals(1792, byteArray2.length);
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray2);
      assertEquals((short) (-17152), bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertEquals(1008, byteArray0.length);
      assertEquals(1344, byteArray1.length);
      assertEquals(1792, byteArray2.length);
      assertEquals(2392, byteArray3.length);
      assertNotNull(byteArray3);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray2);
      assertEquals((short) (-17152), bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertEquals(1008, byteArray0.length);
      assertEquals(1344, byteArray1.length);
      assertEquals(1792, byteArray2.length);
      assertEquals(2392, byteArray4.length);
      assertNotNull(byteArray4);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray3);
      
      byte[] byteArray5 = Base64.encodeBase64(byteArray0);
      assertEquals((short) (-17152), bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertFalse(byteArray5.equals((Object)byteArray0));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertEquals(1008, byteArray0.length);
      assertEquals(1344, byteArray5.length);
      assertNotNull(byteArray5);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray5, byteArray4);
      assertNotSame(byteArray5, byteArray3);
      assertNotSame(byteArray5, byteArray1);
      assertNotSame(byteArray5, byteArray0);
      assertNotSame(byteArray5, byteArray2);
      
      // Undeclared exception!
      Base64.encodeBase64(byteArray3);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.decodeBase64("UTF-16BE");
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(6, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)81, (byte)49, (byte)126, (byte) (-41), (byte) (-96), (byte)68}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray2 = new byte[9];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byte byte0 = (byte)92;
      byteArray2[0] = (byte)92;
      byteArray2[1] = (byte) (-79);
      byteArray2[2] = (byte)61;
      byteArray2[3] = (byte)124;
      byteArray2[4] = (byte) (-111);
      byteArray2[5] = (byte)54;
      byteArray2[6] = (byte) (-113);
      byteArray2[7] = (byte)0;
      byteArray2[8] = (byte) (-53);
      BigInteger bigInteger0 = new BigInteger(byteArray2);
      assertEquals((byte) (-53), bigInteger0.byteValue());
      assertEquals((short)203, bigInteger0.shortValue());
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(9, byteArray2.length);
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte)92, (byte) (-79), (byte)61, (byte)124, (byte) (-111), (byte)54, (byte) (-113), (byte)0, (byte) (-53)}, byteArray2);
      
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      assertEquals((byte) (-53), bigInteger0.byteValue());
      assertEquals((short)203, bigInteger0.shortValue());
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertEquals(9, byteArray2.length);
      assertEquals(9, byteArray3.length);
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {(byte)92, (byte) (-79), (byte)61, (byte)124, (byte) (-111), (byte)54, (byte) (-113), (byte)0, (byte) (-53)}, byteArray2);
      assertArrayEquals(new byte[] {(byte)92, (byte) (-79), (byte)61, (byte)124, (byte) (-111), (byte)54, (byte) (-113), (byte)0, (byte) (-53)}, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, 1, 24);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Base64 base64_0 = new Base64(45);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base6H decode is Eot a byte[] or a String");
      assertEquals(37, byteArray0.length);
      assertNotNull(byteArray0);
      
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 992, 992);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 992
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      BigInteger bigInteger0 = new BigInteger(6028, mockRandom0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short) (-17152), bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short) (-17152), bigInteger0.shortValue());
      assertEquals(1008, byteArray0.length);
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short) (-17152), bigInteger0.shortValue());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1008, byteArray0.length);
      assertEquals(1344, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short) (-17152), bigInteger0.shortValue());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(1008, byteArray0.length);
      assertEquals(1344, byteArray1.length);
      assertEquals(1792, byteArray2.length);
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray2);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short) (-17152), bigInteger0.shortValue());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertEquals(1008, byteArray0.length);
      assertEquals(1344, byteArray1.length);
      assertEquals(1792, byteArray2.length);
      assertEquals(2392, byteArray3.length);
      assertNotNull(byteArray3);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      
      Base64 base64_0 = new Base64(62);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray4 = base64_0.encode(byteArray3);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short) (-17152), bigInteger0.shortValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertEquals(1008, byteArray0.length);
      assertEquals(1344, byteArray1.length);
      assertEquals(1792, byteArray2.length);
      assertEquals(2392, byteArray3.length);
      assertEquals(3300, byteArray4.length);
      assertNotNull(byteArray4);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray1);
      
      Random.setNextRandom(2462);
      // Undeclared exception!
      base64_0.encode(byteArray4);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      BigInteger bigInteger0 = new BigInteger(6020, mockRandom0);
      assertEquals((byte) (-67), bigInteger0.byteValue());
      assertEquals((short)189, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertEquals((byte) (-67), bigInteger0.byteValue());
      assertEquals((short)189, bigInteger0.shortValue());
      assertEquals(1004, byteArray0.length);
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertEquals((byte) (-67), bigInteger0.byteValue());
      assertEquals((short)189, bigInteger0.shortValue());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1004, byteArray0.length);
      assertEquals(1340, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      assertEquals((byte) (-67), bigInteger0.byteValue());
      assertEquals((short)189, bigInteger0.shortValue());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals(1004, byteArray0.length);
      assertEquals(1340, byteArray1.length);
      assertEquals(1788, byteArray2.length);
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray2);
      assertEquals((byte) (-67), bigInteger0.byteValue());
      assertEquals((short)189, bigInteger0.shortValue());
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertEquals(1004, byteArray0.length);
      assertEquals(1340, byteArray1.length);
      assertEquals(1788, byteArray2.length);
      assertEquals(2384, byteArray3.length);
      assertNotNull(byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray1);
      assertEquals((byte) (-67), bigInteger0.byteValue());
      assertEquals((short)189, bigInteger0.shortValue());
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertEquals(1004, byteArray0.length);
      assertEquals(1340, byteArray1.length);
      assertEquals(1788, byteArray4.length);
      assertNotNull(byteArray4);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray1);
      
      Base64 base64_0 = new Base64(2313);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      int int0 = bigInteger0.signum();
      assertEquals(1, int0);
      assertEquals((byte) (-67), bigInteger0.byteValue());
      assertEquals((short)189, bigInteger0.shortValue());
      
      base64_0.encode(byteArray0, 1, 59);
      assertEquals((byte) (-67), bigInteger0.byteValue());
      assertEquals((short)189, bigInteger0.shortValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertEquals(1004, byteArray0.length);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray4);
      
      int int1 = base64_0.avail();
      assertEquals(76, int1);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      MockRandom mockRandom0 = new MockRandom(32L);
      assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = new BigInteger(1717986918, mockRandom0);
      assertEquals((short)819, bigInteger0.shortValue());
      assertEquals((byte)51, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      BigInteger bigInteger0 = new BigInteger(6008, mockRandom0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(1004, byteArray0.length);
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1004, byteArray0.length);
      assertEquals(1340, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      LongStream longStream0 = mockRandom0.longs((long) 6008);
      assertNotNull(longStream0);
      
      base64_0.decode(byteArray1, 112, 6008);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1004, byteArray0.length);
      assertEquals(1340, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean0 = Base64.isBase64(byteArray1);
      assertTrue(boolean0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1004, byteArray0.length);
      assertEquals(1340, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, true, true, 112);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (1836) than the specified maxium size of 112
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Random.setNextRandom((-1));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte)0;
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)9, (byte)4, (byte)106, (byte)0}, byteArray0);
      
      Base64 base64_0 = new Base64((-1));
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray1 = base64_0.decode(byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)9, (byte)4, (byte)106, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray2 = new byte[8];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = (byte)4;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)4;
      byteArray2[3] = (byte)4;
      byteArray2[4] = (byte)106;
      byteArray2[5] = (byte)0;
      byteArray2[6] = (byte)4;
      byteArray2[7] = (byte)4;
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray2);
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals(11, byteArray3.length);
      assertEquals(8, byteArray2.length);
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {(byte)4, (byte)0, (byte)4, (byte)4, (byte)106, (byte)0, (byte)4, (byte)4}, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray3);
      
      byte[] byteArray4 = Base64.toIntegerBytes(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertEquals(0, byteArray4.length);
      assertNotNull(byteArray4);
      assertArrayEquals(new byte[] {}, byteArray4);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray3);
      
      try { 
        base64_0.decode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      BigInteger bigInteger0 = new BigInteger(6008, mockRandom0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals(1004, byteArray0.length);
      assertNotNull(byteArray0);
      
      Base64 base64_0 = new Base64((-3699));
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      mockRandom0.nextBytes(byteArray0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals(1004, byteArray0.length);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1004, byteArray0.length);
      assertEquals(1340, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      base64_0.decode(byteArray0, 16, 1071);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(1004, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(1004, byteArray2.length);
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      BigInteger bigInteger0 = new BigInteger(6008, mockRandom0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(1004, byteArray0.length);
      assertNotNull(byteArray0);
      
      Base64 base64_0 = new Base64((-3699));
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      base64_0.decode(byteArray0, 16, 1071);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(1004, byteArray0.length);
      
      byte[] byteArray1 = base64_0.decode(byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1004, byteArray0.length);
      assertEquals(751, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(751, byteArray2.length);
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertNotNull(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)19, (byte)10}, byteArray0);
      
      MockRandom mockRandom0 = new MockRandom(64L);
      //  // Unstable assertion: assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      //  // Unstable assertion: assertEquals(0.0F, float0, 0.01F);
      
      MockRandom mockRandom1 = new MockRandom();
      //  // Unstable assertion: assertFalse(mockRandom1.equals((Object)mockRandom0));
      //  // Unstable assertion: assertNotNull(mockRandom1);
      
      BigInteger bigInteger0 = new BigInteger(Integer.MAX_VALUE, mockRandom1);
      //  // Unstable assertion: assertEquals((short)4, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)4, bigInteger0.byteValue());
      //  // Unstable assertion: assertFalse(mockRandom1.equals((Object)mockRandom0));
      //  // Unstable assertion: assertNotNull(bigInteger0);
      
      // Undeclared exception!
      try { 
        Base64.encodeInteger(bigInteger0);
       //  fail("Expecting exception: NegativeArraySizeException");
       // Unstable assertion
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      BigInteger bigInteger0 = new BigInteger(5994, mockRandom0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short) (-17408), bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short) (-17408), bigInteger0.shortValue());
      assertEquals(1000, byteArray0.length);
      assertNotNull(byteArray0);
      
      Base64 base64_0 = new Base64(true);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      int int0 = 812;
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short) (-17408), bigInteger0.shortValue());
      assertEquals(1000, byteArray0.length);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 812, 1409);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1000
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte)26;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)105;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 8192);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(7, byteArray0.length);
      assertEquals(12, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-17), (byte)3, (byte)88, (byte)26, (byte)0, (byte)105}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Base64 base64_0 = new Base64(true);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, 0, 4002);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)61);
      assertTrue(boolean0);
      
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      int int0 = base64_0.avail();
      assertEquals(0, int0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Base64 base64_0 = new Base64(45);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      assertEquals(37, byteArray0.length);
      assertNotNull(byteArray0);
      
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = new BigInteger(5994, mockRandom0);
      assertEquals((short) (-17664), bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray0 = bigInteger0.toByteArray();
      assertEquals((short) (-17664), bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(746, byteArray0.length);
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertEquals((short) (-17664), bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(996, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray1);
      assertEquals((short) (-17664), bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short) (-17664), bigInteger1.shortValue());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertEquals(996, byteArray1.length);
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(bigInteger1, bigInteger0);
      
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      assertEquals((short) (-17664), bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertTrue(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(746, byteArray0.length);
      assertEquals(742, byteArray2.length);
      assertNotNull(byteArray2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(0, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(0, byteArray0.length);
      assertNotNull(base64_0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)125;
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertNotNull(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)19, (byte)10}, byteArray0);
      
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals(1, byteArray1.length);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)19, (byte)10}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)19}, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      
      Base64 base64_0 = new Base64((-2138), byteArray1, true);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals(1, byteArray1.length);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)19, (byte)10}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)19}, byteArray1);
      
      Object object0 = base64_0.decode((Object) "P@Z,|#QS8 XZ&^/j-");
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals(1, byteArray1.length);
      //  // Unstable assertion: assertNotNull(object0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)19, (byte)10}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)19}, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, object0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, object0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      
      Object object1 = base64_0.encode(object0);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)object0));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)object0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(object1.equals((Object)object0));
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals(1, byteArray1.length);
      //  // Unstable assertion: assertNotNull(object1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)19, (byte)10}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)19}, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, object0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, object1);
      //  // Unstable assertion: assertNotSame(byteArray1, object1);
      //  // Unstable assertion: assertNotSame(byteArray1, object0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(object0, object1);
      //  // Unstable assertion: assertNotSame(object1, object0);
      
      try { 
        base64_0.encode((Object) "P@Z,|#QS8 XZ&^/j-");
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Base64 base64_1 = new Base64();
      assertFalse(base64_1.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_1.equals((Object)base64_0));
      assertNotNull(base64_1);
      
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray0);
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals(0, byteArray0.length);
      assertNotNull(bigInteger1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(bigInteger1, bigInteger0);
      
      base64_0.decode(byteArray1, 2, 76);
      assertFalse(base64_0.isUrlSafe());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray1);
      assertNotSame(base64_0, base64_1);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles(114L, 0.0, (double) 114L);
      assertNotNull(doubleStream0);
      
      BigInteger bigInteger0 = new BigInteger(1981, mockRandom0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte)0;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 0, 414);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-29);
      base64_0.encode(byteArray0, (int) (byte) (-29), (-3367));
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-29)}, byteArray0);
      
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)33;
      boolean boolean0 = base64_0.hasData();
      assertTrue(boolean0);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray2.length);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte) (-29)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-29)}, byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray0 = new byte[5];
      Base64 base64_1 = new Base64();
      assertFalse(base64_1.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_1.equals((Object)base64_0));
      assertNotNull(base64_1);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)10}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray0, 2, 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)10);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)10;
      Base64 base64_0 = new Base64((byte)10, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(6, byteArray0.length);
      assertNotNull(base64_0);
      assertArrayEquals(new byte[] {(byte)10, (byte)10, (byte)18, (byte)10, (byte)10, (byte)10}, byteArray0);
      
      byte[] byteArray1 = base64_0.decode(byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)10, (byte)10, (byte)18, (byte)10, (byte)10, (byte)10}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = base64_0.encode(byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(6, byteArray0.length);
      assertEquals(14, byteArray2.length);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)10, (byte)10, (byte)18, (byte)10, (byte)10, (byte)10}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      base64_0.encode(byteArray2, (int) (byte)10, (-1296));
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(6, byteArray0.length);
      assertEquals(14, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)10, (byte)10, (byte)18, (byte)10, (byte)10, (byte)10}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("", string0);
      assertEquals(0, byteArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Base64 base64_0 = new Base64(45);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      String string1 = Base64.encodeBase64String(byteArray0);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals(0, byteArray0.length);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      byte[] byteArray1 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(37, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = base64_0.encode(byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals(37, byteArray1.length);
      assertEquals(56, byteArray2.length);
      assertNotNull(byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray2);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertEquals(37, byteArray1.length);
      assertEquals(56, byteArray2.length);
      assertEquals(76, byteArray3.length);
      assertNotNull(byteArray3);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      
      byte[] byteArray4 = base64_0.encode(byteArray3);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertEquals(37, byteArray1.length);
      assertEquals(56, byteArray2.length);
      assertEquals(76, byteArray3.length);
      assertEquals(110, byteArray4.length);
      assertNotNull(byteArray4);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(base64_0);
      
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = new byte[7];
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)28;
      byteArray1[1] = (byte) (-60);
      byteArray1[2] = (byte)14;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)68;
      byteArray1[5] = (byte)19;
      byteArray1[6] = (byte)84;
      String string0 = base64_0.encodeToString(byteArray1);
      //  // Unstable assertion: assertEquals("HMQOAEQTVA==\u0013\n", string0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(7, byteArray1.length);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)28, (byte) (-60), (byte)14, (byte)0, (byte)68, (byte)19, (byte)84}, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte) (-49);
      BigInteger bigInteger0 = BigInteger.ZERO;
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertNotNull(bigInteger0);
      
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertEquals(0, byteArray2.length);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, true, true, 209);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals(5, byteArray3.length);
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)77, (byte) (-49)}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)84, (byte)99, (byte)56, (byte)19, (byte)10}, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      
      byte[] byteArray4 = Base64.decodeBase64((byte[]) null);
      //  // Unstable assertion: assertNull(byteArray4);
      
      int int0 = base64_0.avail();
      //  // Unstable assertion: assertEquals(0, int0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray5 = new byte[3];
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray2));
      
      byteArray5[0] = (byte) (-49);
      byteArray5[1] = (byte) (-49);
      byteArray5[2] = (byte)77;
      boolean boolean0 = Base64.isBase64(byteArray5);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray2));
      //  // Unstable assertion: assertEquals(3, byteArray5.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-49), (byte) (-49), (byte)77}, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray2);
      
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)10);
      //  // Unstable assertion: assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)10;
      Base64 base64_0 = new Base64((byte)10, byteArray0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)10}, byteArray0);
      
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArray1.length);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)10}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61, (byte)19, (byte)10}, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true, false, 4345);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArray2.length);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)10}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61, (byte)19, (byte)10}, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      
      int int0 = base64_0.avail();
      //  // Unstable assertion: assertEquals(0, int0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)10}, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      
      byte[] byteArray3 = base64_0.decode(byteArray2);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArray2.length);
      //  // Unstable assertion: assertEquals(1, byteArray3.length);
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)10}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61, (byte)19, (byte)10}, byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)10}, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray1, true, false, (int) (byte)10);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArray1.length);
      //  // Unstable assertion: assertEquals(10, byteArray4.length);
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)10}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61, (byte)19, (byte)10}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)81, (byte)50, (byte)99, (byte)57, (byte)80, (byte)82, (byte)77, (byte)75, (byte)19, (byte)10}, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Base64 base64_0 = new Base64(76, (byte[]) null, true);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      int int0 = base64_0.readResults((byte[]) null, 0, 0);
      assertEquals(0, int0);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      int int1 = base64_0.readResults((byte[]) null, 76, 76);
      assertEquals(0, int1);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertTrue(int1 == int0);
      
      byte[] byteArray0 = base64_0.decode("");
      assertTrue(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int int2 = base64_0.readResults((byte[]) null, 76, 1718);
      assertEquals(0, int2);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      byte[] byteArray1 = Base64.encodeBase64Chunked((byte[]) null);
      assertNull(byteArray1);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = bigInteger0.clearBit(1);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertTrue(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals(4, byteArray2.length);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray2, byteArray0);
      
      int int3 = bigInteger0.bitLength();
      assertEquals(1, int3);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertTrue(bigInteger0.equals((Object)bigInteger1));
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertNotSame(bigInteger0, bigInteger1);
      
      BigInteger bigInteger2 = BigInteger.ONE;
      assertEquals((short)1, bigInteger2.shortValue());
      assertEquals((byte)1, bigInteger2.byteValue());
      assertTrue(bigInteger2.equals((Object)bigInteger1));
      assertNotNull(bigInteger2);
      assertNotSame(bigInteger2, bigInteger1);
      assertSame(bigInteger2, bigInteger0);
      
      String string0 = Base64.encodeBase64String((byte[]) null);
      assertNull(string0);
      
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger2);
      assertEquals((short)1, bigInteger2.shortValue());
      assertEquals((byte)1, bigInteger2.byteValue());
      assertTrue(bigInteger2.equals((Object)bigInteger1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertEquals(1, byteArray3.length);
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {(byte)1}, byteArray3);
      assertNotSame(bigInteger2, bigInteger1);
      assertSame(bigInteger2, bigInteger0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      
      byte[] byteArray4 = Base64.toIntegerBytes(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertTrue(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertEquals(1, byteArray4.length);
      assertNotNull(byteArray4);
      assertArrayEquals(new byte[] {(byte)1}, byteArray4);
      assertSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray2);
      
      byte[] byteArray5 = base64_0.encode(byteArray4);
      assertTrue(base64_0.isUrlSafe());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertTrue(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray0));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertEquals(1, byteArray4.length);
      assertEquals(2, byteArray5.length);
      assertNotNull(byteArray5);
      assertArrayEquals(new byte[] {(byte)1}, byteArray4);
      assertArrayEquals(new byte[] {(byte)65, (byte)81}, byteArray5);
      assertSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray5);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray5, byteArray4);
      assertNotSame(byteArray5, byteArray0);
      assertNotSame(byteArray5, byteArray2);
      assertNotSame(byteArray5, byteArray3);
      
      BigInteger bigInteger3 = Base64.decodeInteger(byteArray4);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)0, bigInteger3.shortValue());
      assertEquals((byte)0, bigInteger3.byteValue());
      assertTrue(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray5));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertEquals(1, byteArray4.length);
      assertNotNull(bigInteger3);
      assertArrayEquals(new byte[] {(byte)1}, byteArray4);
      assertSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray5);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(bigInteger3, bigInteger1);
      assertNotSame(bigInteger3, bigInteger2);
      assertNotSame(bigInteger3, bigInteger0);
      
      byte[] byteArray6 = Base64.decodeBase64(byteArray4);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertFalse(byteArray6.equals((Object)byteArray3));
      assertFalse(byteArray6.equals((Object)byteArray5));
      assertFalse(byteArray6.equals((Object)byteArray2));
      assertFalse(byteArray6.equals((Object)byteArray4));
      assertFalse(byteArray6.equals((Object)byteArray0));
      assertTrue(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray5));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertEquals(0, byteArray6.length);
      assertEquals(1, byteArray4.length);
      assertNotNull(byteArray6);
      assertArrayEquals(new byte[] {}, byteArray6);
      assertArrayEquals(new byte[] {(byte)1}, byteArray4);
      assertNotSame(byteArray6, byteArray3);
      assertNotSame(byteArray6, byteArray5);
      assertNotSame(byteArray6, byteArray2);
      assertNotSame(byteArray6, byteArray4);
      assertNotSame(byteArray6, byteArray0);
      assertSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray5);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray6);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)58);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)58;
      Base64 base64_0 = new Base64((byte)58, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(5, byteArray0.length);
      assertNotNull(base64_0);
      assertArrayEquals(new byte[] {(byte) (-114), (byte)58, (byte)58, (byte)58, (byte)58}, byteArray0);
      
      byte[] byteArray1 = base64_0.decode(byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-114), (byte)58, (byte)58, (byte)58, (byte)58}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = base64_0.encode(byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(5, byteArray0.length);
      assertEquals(13, byteArray2.length);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte) (-114), (byte)58, (byte)58, (byte)58, (byte)58}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      byte[] byteArray3 = base64_0.encode(byteArray2);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertEquals(5, byteArray0.length);
      assertEquals(13, byteArray2.length);
      assertEquals(25, byteArray3.length);
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {(byte) (-114), (byte)58, (byte)58, (byte)58, (byte)58}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray2);
      assertFalse(base64_0.isUrlSafe());
      assertEquals((byte)58, bigInteger0.byteValue());
      assertEquals((short)14906, bigInteger0.shortValue());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(5, byteArray0.length);
      assertEquals(13, byteArray2.length);
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte) (-114), (byte)58, (byte)58, (byte)58, (byte)58}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      boolean boolean1 = Base64.isBase64("-*(N8FaAj#_/");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = bigInteger0.bitLength();
      assertEquals(40, int0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals((byte)58, bigInteger0.byteValue());
      assertEquals((short)14906, bigInteger0.shortValue());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(5, byteArray0.length);
      assertEquals(13, byteArray2.length);
      assertArrayEquals(new byte[] {(byte) (-114), (byte)58, (byte)58, (byte)58, (byte)58}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      Random.setNextRandom((byte)58);
      byte[] byteArray4 = Base64.encodeBase64(byteArray3, false, false);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertEquals(5, byteArray0.length);
      assertEquals(13, byteArray2.length);
      assertEquals(25, byteArray3.length);
      assertEquals(36, byteArray4.length);
      assertNotNull(byteArray4);
      assertArrayEquals(new byte[] {(byte) (-114), (byte)58, (byte)58, (byte)58, (byte)58}, byteArray0);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray3);
      
      base64_0.encode(byteArray1, (int) (byte)58, (-346));
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-114), (byte)58, (byte)58, (byte)58, (byte)58}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      
      int int1 = base64_0.readResults(byteArray1, (byte)58, (-346));
      assertEquals((-1), int1);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(int1 == int0);
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-114), (byte)58, (byte)58, (byte)58, (byte)58}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      
      byte[] byteArray5 = Base64.discardWhitespace(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray0));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray5.length);
      assertNotNull(byteArray5);
      assertArrayEquals(new byte[] {(byte) (-114), (byte)58, (byte)58, (byte)58, (byte)58}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-114), (byte)58, (byte)58, (byte)58, (byte)58}, byteArray5);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray5, byteArray4);
      assertNotSame(byteArray5, byteArray3);
      assertNotSame(byteArray5, byteArray0);
      assertNotSame(byteArray5, byteArray2);
      assertNotSame(byteArray5, byteArray1);
      
      boolean boolean2 = base64_0.hasData();
      assertFalse(boolean2);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-114), (byte)58, (byte)58, (byte)58, (byte)58}, byteArray0);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      
      byte[] byteArray6 = Base64.encodeInteger(bigInteger0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals((byte)58, bigInteger0.byteValue());
      assertEquals((short)14906, bigInteger0.shortValue());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray6.equals((Object)byteArray0));
      assertFalse(byteArray6.equals((Object)byteArray1));
      assertFalse(byteArray6.equals((Object)byteArray5));
      assertFalse(byteArray6.equals((Object)byteArray3));
      assertFalse(byteArray6.equals((Object)byteArray4));
      assertFalse(byteArray6.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray4));
      assertFalse(byteArray2.equals((Object)byteArray5));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(5, byteArray0.length);
      assertEquals(8, byteArray6.length);
      assertEquals(13, byteArray2.length);
      assertNotNull(byteArray6);
      assertArrayEquals(new byte[] {(byte) (-114), (byte)58, (byte)58, (byte)58, (byte)58}, byteArray0);
      assertArrayEquals(new byte[] {(byte)106, (byte)106, (byte)111, (byte)54, (byte)79, (byte)106, (byte)111, (byte)61}, byteArray6);
      assertNotSame(byteArray0, byteArray6);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray6, byteArray0);
      assertNotSame(byteArray6, byteArray1);
      assertNotSame(byteArray6, byteArray5);
      assertNotSame(byteArray6, byteArray3);
      assertNotSame(byteArray6, byteArray4);
      assertNotSame(byteArray6, byteArray2);
      assertNotSame(byteArray2, byteArray6);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray2, byteArray5);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      boolean boolean3 = Base64.isBase64((byte)58);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray6);
      assertEquals((short)14906, bigInteger1.shortValue());
      assertEquals((byte)58, bigInteger1.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals((byte)58, bigInteger0.byteValue());
      assertEquals((short)14906, bigInteger0.shortValue());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(byteArray0.equals((Object)byteArray6));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray6.equals((Object)byteArray0));
      assertFalse(byteArray6.equals((Object)byteArray1));
      assertFalse(byteArray6.equals((Object)byteArray5));
      assertFalse(byteArray6.equals((Object)byteArray3));
      assertFalse(byteArray6.equals((Object)byteArray4));
      assertFalse(byteArray6.equals((Object)byteArray2));
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertFalse(byteArray2.equals((Object)byteArray6));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray4));
      assertFalse(byteArray2.equals((Object)byteArray5));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(5, byteArray0.length);
      assertEquals(8, byteArray6.length);
      assertEquals(13, byteArray2.length);
      assertNotNull(bigInteger1);
      assertArrayEquals(new byte[] {(byte) (-114), (byte)58, (byte)58, (byte)58, (byte)58}, byteArray0);
      assertArrayEquals(new byte[] {(byte)106, (byte)106, (byte)111, (byte)54, (byte)79, (byte)106, (byte)111, (byte)61}, byteArray6);
      assertNotSame(byteArray0, byteArray6);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray6, byteArray0);
      assertNotSame(byteArray6, byteArray1);
      assertNotSame(byteArray6, byteArray5);
      assertNotSame(byteArray6, byteArray3);
      assertNotSame(byteArray6, byteArray4);
      assertNotSame(byteArray6, byteArray2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(byteArray2, byteArray6);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray2, byteArray5);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(bigInteger0, bigInteger1);
      
      byte[] byteArray7 = new byte[9];
      assertFalse(byteArray7.equals((Object)byteArray2));
      assertFalse(byteArray7.equals((Object)byteArray1));
      assertFalse(byteArray7.equals((Object)byteArray5));
      assertFalse(byteArray7.equals((Object)byteArray6));
      assertFalse(byteArray7.equals((Object)byteArray3));
      assertFalse(byteArray7.equals((Object)byteArray4));
      assertFalse(byteArray7.equals((Object)byteArray0));
      
      byteArray7[0] = (byte)58;
      byteArray7[1] = (byte)58;
      byteArray7[2] = (byte) (-114);
      byteArray7[3] = (byte)58;
      byteArray7[4] = (byte)58;
      byteArray7[5] = (byte)58;
      byteArray7[6] = (byte)58;
      byteArray7[7] = (byte)40;
      byteArray7[8] = (byte) (-114);
      byte[] byteArray8 = Base64.encodeBase64(byteArray7, false, true, 2125);
      assertFalse(byteArray8.equals((Object)byteArray6));
      assertFalse(byteArray8.equals((Object)byteArray0));
      assertFalse(byteArray8.equals((Object)byteArray3));
      assertFalse(byteArray8.equals((Object)byteArray2));
      assertFalse(byteArray8.equals((Object)byteArray4));
      assertFalse(byteArray8.equals((Object)byteArray7));
      assertFalse(byteArray8.equals((Object)byteArray5));
      assertFalse(byteArray8.equals((Object)byteArray1));
      assertFalse(byteArray7.equals((Object)byteArray2));
      assertFalse(byteArray7.equals((Object)byteArray1));
      assertFalse(byteArray7.equals((Object)byteArray5));
      assertFalse(byteArray7.equals((Object)byteArray6));
      assertFalse(byteArray7.equals((Object)byteArray3));
      assertFalse(byteArray7.equals((Object)byteArray4));
      assertFalse(byteArray7.equals((Object)byteArray0));
      assertEquals(12, byteArray8.length);
      assertEquals(9, byteArray7.length);
      assertNotNull(byteArray8);
      assertArrayEquals(new byte[] {(byte)58, (byte)58, (byte) (-114), (byte)58, (byte)58, (byte)58, (byte)58, (byte)40, (byte) (-114)}, byteArray7);
      assertNotSame(byteArray8, byteArray6);
      assertNotSame(byteArray8, byteArray0);
      assertNotSame(byteArray8, byteArray3);
      assertNotSame(byteArray8, byteArray2);
      assertNotSame(byteArray8, byteArray4);
      assertNotSame(byteArray8, byteArray7);
      assertNotSame(byteArray8, byteArray5);
      assertNotSame(byteArray8, byteArray1);
      assertNotSame(byteArray7, byteArray2);
      assertNotSame(byteArray7, byteArray8);
      assertNotSame(byteArray7, byteArray1);
      assertNotSame(byteArray7, byteArray5);
      assertNotSame(byteArray7, byteArray6);
      assertNotSame(byteArray7, byteArray3);
      assertNotSame(byteArray7, byteArray4);
      assertNotSame(byteArray7, byteArray0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      Object object0 = base64_0.decode((Object) "MP0,-f>");
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(object0);
      
      Object object1 = base64_0.decode(object0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      assertNotSame(object0, object1);
      assertNotSame(object1, object0);
      
      Object object2 = base64_0.decode(object1);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object1.equals((Object)object0));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      assertNotSame(object0, object1);
      assertNotSame(object0, object2);
      assertNotSame(object1, object0);
      assertSame(object1, object2);
      assertNotSame(object2, object0);
      assertSame(object2, object1);
      
      Object object3 = base64_0.encode(object2);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object0.equals((Object)object2));
      assertFalse(object1.equals((Object)object0));
      assertFalse(object2.equals((Object)object0));
      assertFalse(object3.equals((Object)object0));
      assertNotNull(object3);
      assertNotSame(object0, object3);
      assertNotSame(object0, object1);
      assertNotSame(object0, object2);
      assertNotSame(object1, object0);
      assertSame(object1, object2);
      assertSame(object1, object3);
      assertNotSame(object2, object0);
      assertSame(object2, object3);
      assertSame(object2, object1);
      assertSame(object3, object2);
      assertNotSame(object3, object0);
      assertSame(object3, object1);
      
      byte[] byteArray0 = null;
      byte[] byteArray1 = Base64.encodeBase64((byte[]) null, false, false);
      assertNull(byteArray1);
      
      byte[] byteArray2 = Base64.decodeBase64("");
      assertFalse(byteArray2.equals((Object)object0));
      assertFalse(byteArray2.equals((Object)object3));
      assertFalse(byteArray2.equals((Object)object1));
      assertFalse(byteArray2.equals((Object)object2));
      assertEquals(0, byteArray2.length);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotSame(byteArray2, object0);
      assertNotSame(byteArray2, object3);
      assertNotSame(byteArray2, object1);
      assertNotSame(byteArray2, object2);
      
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object2));
      assertNotNull(object4);
      
      String string0 = Base64.encodeBase64URLSafeString((byte[]) null);
      assertNull(string0);
      
      String string1 = Base64.encodeBase64URLSafeString((byte[]) null);
      assertNull(string1);
      
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)80);
      assertTrue(boolean0);
      
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null, true);
      assertNull(byteArray0);
      
      byte[] byteArray1 = Base64.encodeBase64((byte[]) null, false);
      assertNull(byteArray1);
      
      Base64 base64_0 = new Base64(1802);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray2 = Base64.encodeBase64URLSafe((byte[]) null);
      assertNull(byteArray2);
      
      byte[] byteArray3 = base64_0.decode((byte[]) null);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNull(byteArray3);
      
      byte[] byteArray4 = Base64.encodeBase64((byte[]) null);
      assertNull(byteArray4);
      
      int int0 = base64_0.avail();
      assertEquals(0, int0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      Base64 base64_1 = new Base64(30, (byte[]) null, true);
      assertTrue(base64_1.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_1.equals((Object)base64_0));
      assertNotNull(base64_1);
      
      Base64 base64_2 = new Base64(76, (byte[]) null, true);
      assertTrue(base64_2.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_2.equals((Object)base64_0));
      assertFalse(base64_2.equals((Object)base64_1));
      assertNotNull(base64_2);
      
      boolean boolean1 = base64_2.hasData();
      assertFalse(boolean1);
      assertTrue(base64_2.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_2.equals((Object)base64_0));
      assertFalse(base64_2.equals((Object)base64_1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(base64_2, base64_0);
      assertNotSame(base64_2, base64_1);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray5 = Base64.toIntegerBytes(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(1, byteArray5.length);
      assertNotNull(byteArray5);
      assertArrayEquals(new byte[] {(byte)10}, byteArray5);
      
      byte[] byteArray6 = base64_1.decode((byte[]) null);
      assertTrue(base64_1.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_1.equals((Object)base64_2));
      assertFalse(base64_1.equals((Object)base64_0));
      assertNull(byteArray6);
      assertNotSame(base64_1, base64_2);
      assertNotSame(base64_1, base64_0);
      
      String string0 = base64_2.encodeToString((byte[]) null);
      assertTrue(base64_2.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_2.equals((Object)base64_0));
      assertFalse(base64_2.equals((Object)base64_1));
      assertNull(string0);
      assertNotSame(base64_2, base64_0);
      assertNotSame(base64_2, base64_1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      Base64 base64_0 = new Base64(5784, (byte[]) null);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      String string0 = Base64.encodeBase64String((byte[]) null);
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, (int) (byte)30, 5196);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      Base64 base64_0 = new Base64(906, byteArray0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)0, (byte)0}, byteArray0);
      
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArray1.length);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)69, (byte)65, (byte)65, (byte)65}, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      
      base64_0.decode(byteArray0, (int) (byte)1, (int) (byte)1);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)10, bigInteger0.shortValue());
      //  // Unstable assertion: assertNotNull(bigInteger0);
      
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertEquals(10, byteArray2.length);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)69, (byte)65, (byte)65, (byte)65, (byte)61, (byte)61, (byte)19, (byte)10}, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray1, 906, (-1));
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = Base64.isBase64(byteArray0);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false, 62);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertEquals(10, byteArray1.length);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61, (byte)61, (byte)19, (byte)10}, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = Base64.decodeBase64("");
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertEquals(0, byteArray2.length);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      
      Object object0 = new Object();
      //  // Unstable assertion: assertNotNull(object0);
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      //  // Unstable assertion: assertEquals("AAAAAA", string0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      
      String string1 = Base64.encodeBase64URLSafeString(byteArray0);
      //  // Unstable assertion: assertEquals("AAAAAA", string1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertTrue(string1.equals((Object)string0));
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      
      byte[] byteArray3 = Base64.decodeBase64("");
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertEquals(0, byteArray3.length);
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      
      byte[] byteArray4 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertEquals(2, byteArray4.length);
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)19, (byte)10}, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      
      boolean boolean1 = Base64.isArrayByteBase64(byteArray2);
      //  // Unstable assertion: assertTrue(boolean1);
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      //  // Unstable assertion: assertEquals(0, byteArray2.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray2);
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertEquals(0, byteArray2.length);
      //  // Unstable assertion: assertNotNull(bigInteger0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      String string0 = "MP0,-f>";
      Object object0 = base64_0.decode((Object) "MP0,-f>");
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(object0);
      
      Object object1 = base64_0.decode(object0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      assertNotSame(object0, object1);
      assertNotSame(object1, object0);
      
      Object object2 = base64_0.decode(object1);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object1.equals((Object)object0));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      assertNotSame(object0, object2);
      assertNotSame(object0, object1);
      assertSame(object1, object2);
      assertNotSame(object1, object0);
      assertSame(object2, object1);
      assertNotSame(object2, object0);
      
      Object object3 = base64_0.encode(object2);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(object0.equals((Object)object2));
      assertFalse(object0.equals((Object)object1));
      assertFalse(object1.equals((Object)object0));
      assertFalse(object2.equals((Object)object0));
      assertFalse(object3.equals((Object)object0));
      assertNotNull(object3);
      assertNotSame(object0, object2);
      assertNotSame(object0, object3);
      assertNotSame(object0, object1);
      assertSame(object1, object2);
      assertSame(object1, object3);
      assertNotSame(object1, object0);
      assertSame(object2, object3);
      assertSame(object2, object1);
      assertNotSame(object2, object0);
      assertSame(object3, object2);
      assertNotSame(object3, object0);
      assertSame(object3, object1);
      
      try { 
        base64_0.encode((Object) "MP0,-f>");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)123);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)123;
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte)123;
      byteArray0[7] = (byte)123;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, (-632));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of -632
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Base64 base64_0 = new Base64();
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(base64_0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)3;
      Object object0 = base64_0.decode((Object) "sI@1Ajq3{A`ShPU");
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(object0);
      
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)object0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)object0));
      //  // Unstable assertion: assertEquals(6, byteArray0.length);
      //  // Unstable assertion: assertEquals(10, byteArray1.length);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)124, (byte)3, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)102, (byte)65, (byte)77, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)19, (byte)10}, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, object0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, object0);
      
      try { 
        base64_0.encode((Object) "");
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)17;
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)17}, byteArray0);
      
      Base64 base64_0 = new Base64(45);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      Object object0 = base64_0.decode((Object) "org.apache.commons.codec.binary.Base64");
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(object0);
      
      Object object1 = base64_0.encode(object0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      assertNotSame(object0, object1);
      assertNotSame(object1, object0);
      
      Object object2 = base64_0.encode(object1);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object1.equals((Object)object0));
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      assertNotSame(object0, object2);
      assertNotSame(object0, object1);
      assertNotSame(object1, object0);
      assertNotSame(object1, object2);
      assertNotSame(object2, object0);
      assertNotSame(object2, object1);
      
      int int0 = base64_0.readResults(byteArray0, (-194), (byte)17);
      assertEquals((-1), int0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(byteArray0.equals((Object)object0));
      assertFalse(byteArray0.equals((Object)object1));
      assertFalse(byteArray0.equals((Object)object2));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)17}, byteArray0);
      assertNotSame(byteArray0, object0);
      assertNotSame(byteArray0, object1);
      assertNotSame(byteArray0, object2);
      
      base64_0.encode(byteArray0, (int) (byte)17, (int) (byte)97);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(byteArray0.equals((Object)object0));
      assertFalse(byteArray0.equals((Object)object1));
      assertFalse(byteArray0.equals((Object)object2));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)17}, byteArray0);
      assertNotSame(byteArray0, object0);
      assertNotSame(byteArray0, object1);
      assertNotSame(byteArray0, object2);
      
      Base64 base64_1 = new Base64((-194), (byte[]) null, false);
      assertFalse(base64_1.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_1.equals((Object)base64_0));
      assertNotNull(base64_1);
      
      byte[] byteArray1 = base64_1.encode((byte[]) null);
      assertFalse(base64_1.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_1.equals((Object)base64_0));
      assertNull(byteArray1);
      assertNotSame(base64_1, base64_0);
      
      try { 
        base64_1.encode((Object) "org.apache.commons.codec.binary.Base64");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)0);
      //  // Unstable assertion: assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64 base64_0 = new Base64(831);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(base64_0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArray1.length);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61, (byte)19, (byte)10}, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      
      String string0 = Base64.encodeBase64String(byteArray1);
      //  // Unstable assertion: assertEquals("QUE9PRMK", string0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArray1.length);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61, (byte)19, (byte)10}, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = Base64.decodeBase64("org.apache.commons.codec.EncoderException");
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(27, byteArray2.length);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      
      byte[] byteArray3 = base64_0.encode(byteArray1);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArray1.length);
      //  // Unstable assertion: assertEquals(10, byteArray3.length);
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61, (byte)19, (byte)10}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)81, (byte)85, (byte)69, (byte)57, (byte)80, (byte)82, (byte)77, (byte)75, (byte)19, (byte)10}, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray2);
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(27, byteArray2.length);
      //  // Unstable assertion: assertEquals(38, byteArray4.length);
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      
      int int0 = base64_0.readResults(byteArray2, 831, 44);
      //  // Unstable assertion: assertEquals((-1), int0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertEquals(27, byteArray2.length);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      
      boolean boolean1 = Base64.isBase64("Cqf>v$~6[stR@");
      //  // Unstable assertion: assertFalse(boolean1);
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertNotNull(bigInteger0);
      
      base64_0.encode(byteArray3, 3508, (int) (byte)0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray4));
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArray1.length);
      //  // Unstable assertion: assertEquals(10, byteArray3.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61, (byte)19, (byte)10}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)81, (byte)85, (byte)69, (byte)57, (byte)80, (byte)82, (byte)77, (byte)75, (byte)19, (byte)10}, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray4);
      
      int int1 = base64_0.readResults(byteArray4, (byte)0, 9);
      //  // Unstable assertion: assertEquals((-1), int1);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertTrue(int1 == int0);
      //  // Unstable assertion: assertEquals(27, byteArray2.length);
      //  // Unstable assertion: assertEquals(38, byteArray4.length);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray4);
      //  // Unstable assertion: assertEquals((byte) (-88), bigInteger1.byteValue());
      //  // Unstable assertion: assertEquals((short) (-10072), bigInteger1.shortValue());
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger0));
      //  // Unstable assertion: assertEquals(27, byteArray2.length);
      //  // Unstable assertion: assertEquals(38, byteArray4.length);
      //  // Unstable assertion: assertNotNull(bigInteger1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)17;
      boolean boolean0 = Base64.isBase64(byteArray0);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)17}, byteArray0);
      
      Base64 base64_0 = new Base64(1137);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(base64_0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertEquals(4, byteArray1.length);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)17}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)69, (byte)81, (byte)61, (byte)61}, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      
      String string0 = Base64.encodeBase64String(byteArray0);
      //  // Unstable assertion: assertEquals("EQ==", string0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)17}, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      
      byte[] byteArray2 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(37, byteArray2.length);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      
      byte[] byteArray3 = base64_0.encode(byteArray0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArray3.length);
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)17}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)69, (byte)81, (byte)61, (byte)61, (byte)19, (byte)10}, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertEquals(4, byteArray1.length);
      //  // Unstable assertion: assertEquals(10, byteArray4.length);
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)17}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)69, (byte)81, (byte)61, (byte)61}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)82, (byte)86, (byte)69, (byte)57, (byte)80, (byte)81, (byte)61, (byte)61, (byte)19, (byte)10}, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      
      int int0 = base64_0.readResults(byteArray2, (-1), 1137);
      //  // Unstable assertion: assertEquals((-1), int0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(37, byteArray2.length);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      
      boolean boolean1 = Base64.isBase64("&S");
      //  // Unstable assertion: assertFalse(boolean1);
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      
      byte[] byteArray5 = Base64.encodeBase64(byteArray3, true);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray3));
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArray3.length);
      //  // Unstable assertion: assertEquals(10, byteArray5.length);
      //  // Unstable assertion: assertNotNull(byteArray5);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)17}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)69, (byte)81, (byte)61, (byte)61, (byte)19, (byte)10}, byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)82, (byte)86, (byte)69, (byte)57, (byte)80, (byte)82, (byte)77, (byte)75, (byte)19, (byte)10}, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray3);
      
      Base64 base64_1 = new Base64(1137);
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertNotNull(base64_1);
      
      int int1 = (-2269);
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)1;
      Base64 base64_0 = new Base64(906, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(4, byteArray0.length);
      assertNotNull(base64_0);
      assertArrayEquals(new byte[] {(byte)41, (byte)1, (byte)0, (byte)0}, byteArray0);
      
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(4, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)41, (byte)1, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)75, (byte)81, (byte)69, (byte)65, (byte)65, (byte)65}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)1, (int) (byte)41);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)17;
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)17}, byteArray0);
      
      Base64 base64_0 = new Base64(45);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      Object object0 = base64_0.decode((Object) "org.apache.commons.codec.binary.Base64");
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(object0);
      
      Object object1 = base64_0.encode(object0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      assertNotSame(object0, object1);
      assertNotSame(object1, object0);
      
      Object object2 = base64_0.encode(object1);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object1.equals((Object)object0));
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      assertNotSame(object0, object1);
      assertNotSame(object0, object2);
      assertNotSame(object1, object2);
      assertNotSame(object1, object0);
      assertNotSame(object2, object0);
      assertNotSame(object2, object1);
      
      int int0 = base64_0.readResults(byteArray0, (-194), (byte)17);
      assertEquals((-1), int0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(byteArray0.equals((Object)object1));
      assertFalse(byteArray0.equals((Object)object0));
      assertFalse(byteArray0.equals((Object)object2));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)17}, byteArray0);
      assertNotSame(byteArray0, object1);
      assertNotSame(byteArray0, object0);
      assertNotSame(byteArray0, object2);
      
      base64_0.encode(byteArray0, (int) (byte)17, (int) (byte)97);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(byteArray0.equals((Object)object1));
      assertFalse(byteArray0.equals((Object)object0));
      assertFalse(byteArray0.equals((Object)object2));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)17}, byteArray0);
      assertNotSame(byteArray0, object1);
      assertNotSame(byteArray0, object0);
      assertNotSame(byteArray0, object2);
      
      byte[] byteArray1 = Base64.encodeBase64((byte[]) null);
      assertNull(byteArray1);
      
      Base64 base64_1 = new Base64((-782));
      assertFalse(base64_1.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_1.equals((Object)base64_0));
      assertNotNull(base64_1);
      
      int int1 = base64_1.avail();
      assertEquals(0, int1);
      assertFalse(base64_1.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_1.equals((Object)base64_0));
      assertFalse(int1 == int0);
      assertNotSame(base64_1, base64_0);
      
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)15;
      boolean boolean0 = Base64.isBase64(byteArray0);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)15}, byteArray0);
      
      Base64 base64_0 = new Base64(45);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(base64_0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertNotNull(bigInteger0);
      
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(0, byteArray1.length);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false, false);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertEquals(4, byteArray2.length);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)15}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)68, (byte)119, (byte)61, (byte)61}, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      
      String string0 = Base64.encodeBase64String(byteArray0);
      //  // Unstable assertion: assertEquals("Dw==", string0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)15}, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      
      byte[] byteArray3 = Base64.decodeBase64("j!taJ~vd#H,.saN?[");
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(7, byteArray3.length);
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-114), (byte) (-42), (byte) (-119), (byte) (-67), (byte) (-47), (byte) (-20), (byte)104}, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      
      byte[] byteArray4 = base64_0.encode(byteArray3);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertEquals(7, byteArray3.length);
      //  // Unstable assertion: assertEquals(14, byteArray4.length);
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-114), (byte) (-42), (byte) (-119), (byte) (-67), (byte) (-47), (byte) (-20), (byte)104}, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      
      byte[] byteArray5 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray2));
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArray5.length);
      //  // Unstable assertion: assertNotNull(byteArray5);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)15}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)68, (byte)119, (byte)61, (byte)61, (byte)19, (byte)10}, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray2);
      
      int int0 = base64_0.readResults(byteArray0, 1771, 0);
      //  // Unstable assertion: assertEquals((-1), int0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)15}, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      
      boolean boolean1 = Base64.isBase64("j!taJ~vd#H,.saN?[");
      //  // Unstable assertion: assertFalse(boolean1);
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      
      BigInteger bigInteger1 = BigInteger.TEN;
      //  // Unstable assertion: assertEquals((byte)10, bigInteger1.byteValue());
      //  // Unstable assertion: assertEquals((short)10, bigInteger1.shortValue());
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger0));
      //  // Unstable assertion: assertNotNull(bigInteger1);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger0);
      
      byte[] byteArray6 = Base64.toIntegerBytes(bigInteger1);
      //  // Unstable assertion: assertEquals((byte)10, bigInteger1.byteValue());
      //  // Unstable assertion: assertEquals((short)10, bigInteger1.shortValue());
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger0));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray3));
      //  // Unstable assertion: assertEquals(1, byteArray6.length);
      //  // Unstable assertion: assertNotNull(byteArray6);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)10}, byteArray6);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger0);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray3);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(true);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte) (-27);
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)95;
      byteArray0[7] = (byte)97;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 1, (int) (byte)33);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte) (-101);
      byteArray2[1] = (byte)7;
      Base64 base64_0 = new Base64((byte)106, byteArray2, true);
      base64_0.avail();
      base64_0.decode(byteArray2, (int) (byte) (-101), (int) (byte) (-101));
      byte[] byteArray3 = Base64.decodeBase64(byteArray1);
      byte[] byteArray4 = Base64.encodeBase64(byteArray2, true);
      base64_0.readResults(byteArray3, 1, 3839);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)106, (byte)7, (byte)0, (byte)0}, byteArray3);
      //  // Unstable assertion: assertEquals(6, byteArray1.length);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray5 = Base64.toIntegerBytes(bigInteger0);
      //  // Unstable assertion: assertEquals(0, byteArray5.length);
      
      base64_0.readResults(byteArray0, (byte)7, (-542));
      boolean boolean0 = Base64.isBase64(byteArray4);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertEquals(6, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)71;
      Object object0 = base64_0.decode((Object) "MP0,-f>");
      Object object1 = base64_0.encode(object0);
      base64_0.encode(object1);
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte) (-27);
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)101;
      int int0 = base64_0.readResults(byteArray0, 2253, (byte)33);
      //  // Unstable assertion: assertEquals((-1), int0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      base64_0.isUrlSafe();
      String string0 = Base64.encodeBase64URLSafeString(byteArray1);
      //  // Unstable assertion: assertEquals("SVVkTVllVVFaUUETCg", string0);
      
      boolean boolean0 = Base64.isBase64("MP0,-f>");
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)112;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64((-2038));
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false);
      String string0 = Base64.encodeBase64String(byteArray2);
      assertEquals("WlVGR2R3PT0=", string0);
      
      byte[] byteArray3 = Base64.decodeBase64("j");
      byte[] byteArray4 = base64_0.encode(byteArray2);
      byte[] byteArray5 = Base64.encodeBase64Chunked(byteArray3);
      assertEquals(0, byteArray5.length);
      
      int int0 = base64_0.readResults(byteArray0, (byte)112, 113);
      assertEquals((-1), int0);
      
      Base64.isBase64("Cqf>v$~6[stR@");
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray6 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(1, byteArray6.length);
      
      byte[] byteArray7 = Base64.encodeBase64Chunked(byteArray4);
      assertEquals(18, byteArray7.length);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(0, byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)125;
      byteArray1[1] = (byte)103;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)71;
      Object object0 = base64_0.decode((Object) "MP0,-f>");
      Object object1 = base64_0.encode(object0);
      base64_0.encode(object1);
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte) (-27);
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)101;
      byteArray0[7] = (byte) (-54);
      base64_0.encode(byteArray0, 1, (int) (byte)33);
      Base64.encodeBase64((byte[]) null);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)0;
      Base64.encodeBase64(byteArray1, true);
      base64_0.avail();
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)31;
      Base64.isArrayByteBase64(byteArray0);
      boolean boolean0 = Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64();
      boolean boolean1 = base64_0.hasData();
      assertTrue(boolean1 == boolean0);
      assertFalse(base64_0.isUrlSafe());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)0;
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Base64.isBase64((byte)0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64((byte) (-21), byteArray1, false);
      byte[] byteArray2 = base64_0.decode(byteArray1);
      byte[] byteArray3 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64(byteArray2, false, false);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray4 = Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      Base64.discardWhitespace(byteArray4);
      bigInteger0.shiftRight(3465);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = null;
      try {
        bigInteger2 = new BigInteger(byteArray3);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Base64 base64_0 = new Base64((-410));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.toString(1);
      Base64.toIntegerBytes(bigInteger0);
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-21);
      byteArray0[5] = (byte) (-18);
      base64_0.decode(byteArray0, (int) (byte)40, (int) (byte)0);
      base64_0.readResults(byteArray0, 4237, (byte)0);
      Base64.encodeBase64(byteArray0, false, false);
      base64_0.isUrlSafe();
      Base64.encodeBase64URLSafeString(byteArray0);
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)53;
      byteArray0[6] = (byte)36;
      byteArray0[7] = (byte)71;
      byteArray0[8] = (byte) (-105);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("Tex3OVo1JEeX", string0);
      
      Base64.decodeInteger(byteArray1);
      assertEquals(9, byteArray1.length);
      
      Base64 base64_0 = new Base64((byte)53);
      byte[] byteArray2 = base64_0.decode(byteArray0);
      assertArrayEquals(new byte[] {(byte)51, (byte)15, (byte)89, (byte) (-28)}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)19;
      Base64 base64_0 = new Base64((byte)19, byteArray0, true);
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Base64.isBase64((byte)80);
      Base64.encodeBase64((byte[]) null, true);
      Base64.encodeBase64((byte[]) null, false);
      Base64 base64_0 = new Base64(1802);
      Base64.encodeBase64URLSafe((byte[]) null);
      base64_0.decode((byte[]) null);
      Base64.encodeBase64((byte[]) null);
      base64_0.avail();
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 2528, 1520);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)71;
      Object object0 = base64_0.decode((Object) "MP0,-f>");
      Object object1 = base64_0.encode(object0);
      base64_0.encode(object1);
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)97;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64.encodeBase64URLSafeString(byteArray1);
      byteArray0[4] = (byte) (-27);
      byteArray0[5] = (byte)16;
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.xor(bigInteger0);
      bigInteger0.intValueExact();
      bigInteger0.doubleValue();
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      base64_0.hasData();
      base64_0.encode(byteArray0, (int) (byte)71, 58);
      Base64.discardWhitespace(byteArray2);
      Base64.decodeBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isBase64(byteArray0);
      int int0 = 0;
      Base64 base64_0 = new Base64(0, byteArray0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.decodeInteger(byteArray1);
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)14;
      Base64.encodeBase64(byteArray2, true, true, 3983);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, 0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte) (-46);
      byteArray0[3] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[5] = (byte) (-46);
      Base64 base64_0 = new Base64((byte)30, byteArray0);
      base64_0.encode(byteArray0, (int) (byte) (-46), (-2140));
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)112;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.isBase64((byte)112);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64String(byteArray0);
      base64_0.readResults(byteArray0, (byte)120, (byte)112);
      Base64.isBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      base64_0.decode(byteArray1);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      base64_0.encode(byteArray1, (int) (byte)112, 0);
      Base64.decodeBase64(byteArray0);
      base64_0.readResults(byteArray0, (byte)1, (-1));
      base64_0.encode(byteArray0, (int) (byte)112, (-5904));
      Base64.encodeBase64(byteArray1, false, true, 1527);
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.avail();
      base64_0.isUrlSafe();
      try { 
        base64_0.decode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("hW<");
      Base64.isBase64("L7*4E");
      Base64 base64_0 = new Base64(0, byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger1);
      bigInteger0.subtract(bigInteger1);
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      base64_0.readResults(byteArray1, 0, (-368));
      Base64.encodeBase64(byteArray0);
      byte[] byteArray3 = Base64.discardWhitespace(byteArray1);
      Base64.encodeBase64(byteArray3, false, false);
      Base64.encodeBase64((byte[]) null, false);
      base64_0.encode(byteArray2, 0, 0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-29);
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Base64 base64_0 = new Base64((-1));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-24);
      byteArray0[6] = (byte) (-6);
      base64_0.readResults(byteArray0, (byte)1, (byte) (-2));
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)43;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.isBase64((byte) (-1));
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)32;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte) (-1);
      byteArray2[4] = (byte) (-2);
      Base64.discardWhitespace(byteArray2);
      Base64.isBase64((byte)1);
      Base64.decodeBase64(byteArray1);
      Base64.encodeBase64(byteArray2, false);
      Base64 base64_0 = new Base64((byte) (-1));
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      base64_0.hasData();
      byte[] byteArray1 = base64_0.decode("Kiei2`N");
      base64_0.encode(byteArray0, 1, 1);
      Base64.isBase64("Kiei2`N");
      base64_0.decode(byteArray1, 1, 2770);
      base64_0.encodeToString(byteArray0);
      Base64.isBase64("Kiei2`N");
      base64_0.decode((Object) "GO+)?4!nl");
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64((byte)41, byteArray0, false);
      base64_0.encode(byteArray0, 0, (int) (byte)1);
      base64_0.decode((Object) "KQGYAA");
      Base64.decodeBase64("-< YcC~T");
      Base64.encodeBase64Chunked(byteArray0);
      try { 
        base64_0.encode((Object) "KQGYAA");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byte byte0 = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)13;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(1120, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [}\u00000\u0001\u0000\u0000\u0000\r]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Base64.encodeBase64((byte[]) null, false, true, 94);
      Base64 base64_0 = new Base64(94, (byte[]) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger0);
      base64_0.decode("=IZ{6q?t6%.K]>r");
      boolean boolean0 = Base64.isBase64(" [6&01><w!z&}@qjk\"0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)2;
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64.discardWhitespace(byteArray1);
      byte[] byteArray2 = null;
      boolean boolean0 = true;
      Base64.encodeBase64((byte[]) null, true, true);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)71;
      Object object0 = base64_0.decode((Object) "MP0,-f>");
      Object object1 = base64_0.encode(object0);
      Object object2 = base64_0.encode(object1);
      assertNotSame(object2, object1);
      
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte) (-27);
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)101;
      byteArray0[7] = (byte) (-54);
      base64_0.encode(byteArray0, 1, (int) (byte)33);
      Base64.encodeBase64((byte[]) null);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)0;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      int int0 = base64_0.avail();
      assertEquals(0, int0);
      
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      assertEquals(4, byteArray3.length);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61, (byte)13, (byte)10}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertArrayEquals(new byte[] {(byte)119, (byte)65, (byte)69, (byte)65, (byte)13, (byte)10}, byteArray1);
      
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("wAEA", string0);
      
      Base64 base64_0 = new Base64((byte)0);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)1;
      byteArray2[1] = (byte)1;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)1;
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)0;
      base64_0.encodeToString(byteArray2);
      byte[] byteArray3 = Base64.decodeBase64(byteArray0);
      int int0 = base64_0.avail();
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, int0);
      
      String string1 = Base64.encodeBase64URLSafeString(byteArray3);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte) (-119);
      byteArray0[6] = (byte)30;
      base64_0.encode(byteArray0, (int) (byte)123, (-1));
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isBase64(byteArray0);
      int int0 = 0;
      Base64 base64_0 = new Base64(0, byteArray0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, 0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      byte byte0 = (byte)41;
      Base64.isBase64((byte)41);
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((byte)41, byteArray0, true);
      Base64.decodeBase64("&Z+qwzdHh_x(YQR^=h'");
      Base64.isBase64("&Z+qwzdHh_x(YQR^=h'");
      Base64.decodeBase64((String) null);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)41, (int) (byte)41);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 41
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Base64 base64_0 = new Base64((-410));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-21);
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte)0;
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Base64.decodeBase64(byteArray0);
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray0);
      Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      Base64.discardWhitespace(byteArray1);
      BigInteger bigInteger2 = BigInteger.ONE;
      bigInteger1.and(bigInteger2);
      bigInteger1.setBit((byte)0);
      try { 
        base64_0.encode((Object) bigInteger1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)3;
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)0, byteArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [AAA=\u0013
         // ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)21;
      Base64 base64_0 = new Base64(30, byteArray0, true);
      base64_0.decode(byteArray0);
      base64_0.encode(byteArray0, (-1), (int) (byte)21);
      int int0 = (-84);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, true, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of 1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Base64 base64_0 = new Base64(647);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertEquals(7, byteArray1.length);
      
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)59;
      byteArray2[1] = (byte) (-1);
      byteArray2[2] = (byte) (-12);
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte) (-29);
      byteArray2[5] = (byte) (-12);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true);
      assertArrayEquals(new byte[] {(byte)79, (byte)47, (byte)47, (byte)48, (byte)65, (byte)79, (byte)80, (byte)48, (byte)13, (byte)10}, byteArray3);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-78);
      Base64 base64_0 = new Base64(87, byteArray0);
      byte[] byteArray1 = new byte[0];
      Base64.decodeInteger(byteArray1);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte) (-78);
      byteArray2[1] = (byte) (-78);
      byteArray2[2] = (byte) (-78);
      byteArray2[3] = (byte) (-78);
      byteArray2[4] = (byte) (-78);
      byteArray2[5] = (byte) (-78);
      Base64.encodeBase64URLSafe(byteArray2);
      base64_0.isUrlSafe();
      base64_0.isUrlSafe();
      byte[] byteArray3 = Base64.encodeBase64(byteArray0);
      byte[] byteArray4 = Base64.decodeBase64(byteArray3);
      assertArrayEquals(new byte[] {(byte)115, (byte)103, (byte)61, (byte)61}, byteArray3);
      assertEquals(4, byteArray3.length);
      assertArrayEquals(new byte[] {(byte) (-78)}, byteArray4);
      
      base64_0.hasData();
      Base64.decodeBase64("");
      base64_0.hasData();
      Base64.isBase64("");
      base64_0.hasData();
      base64_0.avail();
      byte[] byteArray5 = Base64.discardWhitespace(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-78)}, byteArray5);
      
      String string0 = Base64.encodeBase64String(byteArray1);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte) (-126);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)122;
      byteArray0[7] = (byte)48;
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Base64.isBase64((byte)2);
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64(byteArray0, false);
      Base64.encodeBase64(byteArray0, false);
      Base64 base64_0 = new Base64((byte)2);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)2;
      byteArray2[1] = (byte)2;
      base64_0.decode(byteArray2);
      Base64.encodeBase64(byteArray1);
      base64_0.avail();
      byte[] byteArray3 = new byte[6];
      byteArray3[0] = (byte)2;
      byteArray3[1] = (byte)2;
      base64_0.decode(byteArray3, 90, (int) (byte)2);
      byteArray3[2] = (byte)2;
      byteArray3[3] = (byte)2;
      byteArray3[4] = (byte)64;
      byteArray3[5] = (byte)0;
      Base64.encodeBase64String(byteArray3);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray3, false, false, (-1903));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of -1903
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64.isBase64(byteArray1);
      Base64.decodeInteger(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false);
      Base64 base64_0 = new Base64();
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, true, 64);
      byte[] byteArray4 = base64_0.encode(byteArray2);
      byte[] byteArray5 = new byte[5];
      byteArray5[0] = (byte)72;
      byteArray5[1] = (byte) (-1);
      byteArray5[2] = (byte)1;
      byteArray5[3] = (byte)39;
      base64_0.decode(byteArray3, 2223, (-2915));
      assertSame(byteArray3, byteArray4);
      
      byteArray5[4] = (byte)0;
      String string0 = base64_0.encodeToString(byteArray5);
      assertEquals("SP8BJwA=", string0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(0, byteArray0);
      base64_0.decode("=3");
      Base64.decodeBase64(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      base64_0.encodeToString(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64("TxBz<V8e _SPw/L1");
      assertEquals(10, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)79, (byte)16, (byte)115, (byte)87, (byte) (-57), (byte) (-65), (byte)72, (byte) (-4), (byte)63, (byte)47}, byteArray2);
      
      Base64.discardWhitespace(byteArray0);
      base64_0.decode((String) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.xor(bigInteger1);
      bigInteger0.intValueExact();
      bigInteger0.doubleValue();
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      boolean boolean0 = base64_0.hasData();
      assertFalse(boolean0);
      
      base64_0.encode(byteArray1, 1, 0);
      byte[] byteArray4 = Base64.discardWhitespace(byteArray3);
      assertEquals(0, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte) (-30);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-74);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-105);
      byteArray0[7] = (byte)122;
      boolean boolean0 = true;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(1802, byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0013\uFFFD\u0000\u0000\uFFFD\u0000\uFFFDz]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)17;
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
      
      Base64 base64_0 = new Base64(1137);
      Base64.encodeBase64(byteArray0, false, false);
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("EQ==", string0);
      
      byte[] byteArray1 = Base64.decodeBase64("Cqf>v$~6[stR@");
      byte[] byteArray2 = base64_0.encode(byteArray1);
      assertArrayEquals(new byte[] {(byte)10, (byte) (-89), (byte) (-17), (byte) (-22), (byte) (-53), (byte)81}, byteArray1);
      assertEquals(10, byteArray2.length);
      
      Base64.encodeBase64Chunked(byteArray0);
      base64_0.readResults(byteArray0, 1771, 0);
      Base64.isBase64("Cqf>v$~6[stR@");
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(1, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(1901, byteArray0);
      Base64.encodeBase64String(byteArray0);
      base64_0.encode(byteArray0);
      Base64.isBase64(byteArray0);
      base64_0.decode("");
      Object object0 = new Object();
      Base64.encodeBase64(byteArray0, false);
      byte[] byteArray1 = Base64.decodeBase64("");
      Base64.encodeBase64(byteArray1);
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(802);
      boolean boolean0 = base64_0.hasData();
      assertFalse(boolean0);
  }
}
