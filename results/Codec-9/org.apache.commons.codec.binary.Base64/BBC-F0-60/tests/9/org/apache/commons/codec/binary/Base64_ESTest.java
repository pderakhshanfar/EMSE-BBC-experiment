/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:06:43 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(1783);
      base64_0.encode(byteArray0, (-1), (-1));
      base64_0.encode(byteArray0, 1356, 123);
      base64_0.encode(byteArray0, 1644, 123);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Random.setNextRandom((-1801));
      Base64 base64_0 = new Base64((-1801));
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[4];
      bigInteger0.longValue();
      byteArray0[0] = (byte)48;
      byte byte0 = (byte) (-25);
      byteArray0[1] = (byte) (-25);
      byte byte1 = (byte)127;
      byteArray0[2] = (byte)127;
      byte byte2 = (byte)96;
      byteArray0[3] = (byte)96;
      base64_0.decode(byteArray0, (int) (byte) (-25), 0);
      int int0 = 637;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 0, 112);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf((-4932L));
      int int0 = Base64.MIME_CHUNK_SIZE;
      BigInteger bigInteger1 = bigInteger0.pow(1462);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(6);
      base64_0.encode(byteArray0, 6, 1462);
      base64_0.encode(byteArray0, 76, 2246);
      Base64.decodeInteger(byteArray0);
      base64_0.decode(byteArray0, 0, 70);
      base64_0.decode(byteArray0, 637, 893);
      base64_0.decode(byteArray0, 893, 6);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.isBase64((byte)68);
      base64_0.encode(byteArray0, 1460, (-1256));
      Base64.decodeInteger(byteArray1);
      Base64.decodeInteger(byteArray1);
      // Undeclared exception!
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf((-4932L));
      int int0 = Base64.MIME_CHUNK_SIZE;
      BigInteger bigInteger1 = bigInteger0.pow(1462);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(6);
      Base64.isBase64("7qWMq[/cXs^");
      int int1 = 2239;
      Base64.decodeInteger(byteArray0);
      base64_0.encode(byteArray0, 6, 1462);
      bigInteger0.divideAndRemainder(bigInteger1);
      Base64.encodeBase64(byteArray0, false, true);
      Base64.encodeInteger(bigInteger1);
      bigInteger1.remainder(bigInteger0);
      // Undeclared exception!
      base64_0.encode(byteArray0, 76, 2239);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf((-4932L));
      int int0 = Base64.MIME_CHUNK_SIZE;
      BigInteger bigInteger1 = bigInteger0.pow(1462);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      int int1 = 6;
      Base64 base64_0 = new Base64(6);
      int int2 = 2239;
      base64_0.encode(byteArray0, 6, 1462);
      Base64.encodeBase64URLSafe(byteArray0);
      base64_0.encode(byteArray0, 76, 2239);
      Base64.decodeInteger(byteArray0);
      base64_0.decode(byteArray0, 0, 70);
      int int3 = 626;
      int int4 = 893;
      // Undeclared exception!
      Base64.encodeBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf((-4932L));
      int int0 = Base64.MIME_CHUNK_SIZE;
      BigInteger bigInteger1 = bigInteger0.pow(1462);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(6);
      base64_0.encode(byteArray0, 6, 1462);
      base64_0.encode(byteArray0, 76, 2239);
      Base64.decodeInteger(byteArray0);
      base64_0.decode(byteArray0, 0, 70);
      base64_0.decode(byteArray0, 28, 1014);
      base64_0.decode(byteArray0, 1462, 0);
      Base64.discardWhitespace(byteArray0);
      Base64.isBase64((byte) (-19));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf((-4932L));
      int int0 = Base64.MIME_CHUNK_SIZE;
      BigInteger bigInteger1 = bigInteger0.pow(1462);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(6);
      bigInteger1.floatValue();
      base64_0.encode(byteArray0, 6, 1462);
      base64_0.encode(byteArray0, 76, 2239);
      base64_0.decode(byteArray0, 1462, 70);
      base64_0.encode(byteArray0, 1462, 76);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 1462, 1717986918);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2992
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf((-4932L));
      int int0 = Base64.MIME_CHUNK_SIZE;
      int int1 = Base64.MIME_CHUNK_SIZE;
      BigInteger bigInteger1 = bigInteger0.pow(1463);
      bigInteger1.not();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(6);
      base64_0.encode(byteArray0, 6, 1463);
      base64_0.encode(byteArray0, 76, 2239);
      base64_0.decode(byteArray0, 0, 70);
      BigInteger bigInteger2 = BigInteger.ZERO;
      base64_0.encode(byteArray0, 0, (-44));
      base64_0.encode(byteArray0, 0, 6);
      Base64.encodeBase64(byteArray0, true);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf((-4932L));
      int int0 = Base64.MIME_CHUNK_SIZE;
      BigInteger bigInteger1 = bigInteger0.pow(1462);
      Base64.encodeInteger(bigInteger1);
      BigInteger bigInteger2 = bigInteger1.pow(76);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger2);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          BigInteger bigInteger0 = BigInteger.valueOf((-4937L));
          int int0 = Base64.MIME_CHUNK_SIZE;
          bigInteger0.intValue();
          BigInteger bigInteger1 = bigInteger0.pow(1462);
          byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
          Base64 base64_0 = new Base64(6);
          bigInteger0.floatValue();
          base64_0.encode(byteArray0, 76, 2239);
          base64_0.encode(byteArray0, 76, (-1130));
          base64_0.readResults(byteArray0, 11, 6);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf((-4932L));
      int int0 = Base64.PEM_CHUNK_SIZE;
      bigInteger0.intValue();
      BigInteger bigInteger1 = bigInteger0.pow(1783);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(4);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.isBase64(byteArray1);
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf((-4932L));
      int int0 = Base64.PEM_CHUNK_SIZE;
      bigInteger0.intValue();
      BigInteger bigInteger1 = bigInteger0.pow(5440);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(5440);
      // Undeclared exception!
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf((-4932L));
      int int0 = Base64.PEM_CHUNK_SIZE;
      bigInteger0.intValue();
      BigInteger bigInteger1 = bigInteger0.pow(1783);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64((-4932));
      Base64 base64_1 = new Base64(4);
      byte[] byteArray1 = base64_1.encode(byteArray0);
      Base64.decodeInteger(byteArray0);
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf((-4932L));
      int int0 = Base64.MIME_CHUNK_SIZE;
      int int1 = Base64.MIME_CHUNK_SIZE;
      BigInteger bigInteger1 = bigInteger0.pow(1462);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(6);
      base64_0.encode(byteArray0, 76, 2239);
      base64_0.decode(byteArray0, 0, 70);
      base64_0.encode(byteArray0, 2239, 93);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)52;
      byteArray1[1] = (byte)41;
      byteArray1[2] = (byte) (-74);
      base64_0.encode(byteArray1, 93, (-272));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isBase64(byteArray0);
      Base64.isBase64((byte)90);
      Base64 base64_0 = new Base64((byte)90, byteArray0);
      Object object0 = base64_0.decode((Object) "lyyRbay]0dL");
      Object object1 = base64_0.decode(object0);
      // Undeclared exception!
      try { 
        base64_0.encode(object1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf((-4932L));
      int int0 = Base64.MIME_CHUNK_SIZE;
      bigInteger0.intValue();
      BigInteger bigInteger1 = bigInteger0.pow(1462);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(6);
      base64_0.encode(byteArray0, 76, 2239);
      base64_0.encode(byteArray0, (-934), (-1130));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf((-4932L));
      int int0 = Base64.MIME_CHUNK_SIZE;
      bigInteger0.intValue();
      BigInteger bigInteger1 = bigInteger0.pow(1462);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(6);
      base64_0.encode(byteArray0, 76, 2239);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)82;
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte)60;
      byteArray1[3] = (byte) (-56);
      byteArray1[4] = (byte)61;
      byteArray1[5] = (byte)1;
      Base64.encodeBase64Chunked(byteArray1);
      base64_0.readResults(byteArray0, 1, 0);
      base64_0.decode(byteArray0, 0, 70);
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigInteger.valueOf((-4932L));
      int int0 = Base64.MIME_CHUNK_SIZE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte)24;
      Base64.decodeInteger(byteArray0);
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)9, byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [K\tf\u0014=\u0018]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf((-4932L));
      int int0 = Base64.MIME_CHUNK_SIZE;
      bigInteger0.intValue();
      BigInteger bigInteger1 = bigInteger0.pow(1462);
      BigInteger bigInteger2 = BigInteger.TEN;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(6);
      base64_0.encode(byteArray0, 76, 2239);
      Base64.encodeBase64(byteArray0, true);
      base64_0.decode(byteArray0, 0, 70);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-18);
      byteArray1[1] = (byte) (-88);
      byteArray1[2] = (byte)36;
      byteArray1[3] = (byte) (-81);
      // Undeclared exception!
      Base64.encodeBase64(byteArray0, false);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf((-4932L));
      int int0 = Base64.MIME_CHUNK_SIZE;
      bigInteger0.intValue();
      bigInteger0.shortValueExact();
      BigInteger bigInteger1 = bigInteger0.pow(1462);
      BigInteger bigInteger2 = BigInteger.TEN;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(1462);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.decodeBase64(byteArray0);
      BigInteger bigInteger3 = BigInteger.ZERO;
      Base64.decodeInteger(byteArray1);
      base64_0.encode(byteArray1);
      base64_0.decode((Object) "Parameter supplied to Base64 encode is not a byte[]");
      // Undeclared exception!
      base64_0.decode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf((-4932L));
      int int0 = Base64.MIME_CHUNK_SIZE;
      bigInteger0.intValue();
      BigInteger bigInteger1 = bigInteger0.pow(1462);
      BigInteger bigInteger2 = BigInteger.TEN;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(6);
      base64_0.encode(byteArray0, 76, 2239);
      base64_0.decode(byteArray0, 0, 70);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-18);
      byteArray1[1] = (byte) (-88);
      byteArray1[2] = (byte)36;
      byteArray1[3] = (byte) (-81);
      byteArray1[4] = (byte)13;
      byteArray1[5] = (byte)9;
      base64_0.encode(byteArray1, 50, (-858));
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte) (-1);
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.valueOf(76);
      int int0 = Base64.MIME_CHUNK_SIZE;
      bigInteger0.intValue();
      bigInteger0.pow(62);
      BigInteger bigInteger1 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_1 = new Base64(1110);
      base64_0.decode(byteArray0, 1, 74);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf((-4932L));
      int int0 = Base64.MIME_CHUNK_SIZE;
      bigInteger0.intValue();
      BigInteger bigInteger1 = bigInteger0.pow(1462);
      BigInteger bigInteger2 = BigInteger.TEN;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(6);
      base64_0.decode(byteArray0, 0, 70);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf((-4932L));
      int int0 = Base64.MIME_CHUNK_SIZE;
      bigInteger0.intValue();
      BigInteger bigInteger1 = BigInteger.TEN;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      bigInteger0.andNot(bigInteger0);
      Base64.isBase64(byteArray0);
      Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(true);
      base64_0.decode(byteArray0, 0, 4398);
      Base64 base64_1 = new Base64(true);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf((-4932L));
      int int0 = Base64.MIME_CHUNK_SIZE;
      int int1 = Base64.PEM_CHUNK_SIZE;
      BigInteger bigInteger1 = bigInteger0.pow(1462);
      bigInteger0.toString(101);
      BigInteger bigInteger2 = BigInteger.TEN;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64.isBase64("56jVL'%~@)pZK<i  ");
      BigInteger bigInteger3 = BigInteger.ZERO;
      Base64 base64_0 = new Base64();
      BigInteger bigInteger4 = Base64.decodeInteger(byteArray1);
      assertEquals((short)15677, bigInteger4.shortValue());
      assertEquals(4098, byteArray1.length);
      
      base64_0.decode(byteArray0, 101, 101);
      Base64.isBase64(byteArray0);
      Base64.isBase64((byte) (-61));
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      int int2 = base64_0.readResults(byteArray2, 1, 903);
      assertEquals(75, int2);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-118);
      byte byte0 = (byte) (-84);
      byteArray0[2] = (byte) (-84);
      byte byte1 = (byte) (-110);
      byteArray0[3] = (byte) (-110);
      byteArray0[4] = (byte)21;
      byte byte2 = (byte)32;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)84;
      byteArray0[7] = (byte) (-68);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Random.setNextRandom(123);
      Base64.discardWhitespace(byteArray1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.add(bigInteger1);
      bigInteger0.doubleValue();
      // Undeclared exception!
      try { 
        bigInteger0.byteValueExact();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger out of byte range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = Base64.PEM_CHUNK_SIZE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      Base64 base64_0 = new Base64(9, byteArray0);
      base64_0.decode("($^XG:39bW");
      Base64 base64_1 = new Base64();
      base64_0.encode(byteArray0);
      int int1 = Base64.PEM_CHUNK_SIZE;
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf((-4932L));
      int int0 = Base64.MIME_CHUNK_SIZE;
      bigInteger0.intValue();
      BigInteger bigInteger1 = bigInteger0.pow(1462);
      BigInteger bigInteger2 = BigInteger.TEN;
      bigInteger0.andNot(bigInteger2);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(1325);
      base64_0.encode(byteArray0, 76, 2126);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf((-4932L));
      int int0 = Base64.MIME_CHUNK_SIZE;
      bigInteger0.intValue();
      BigInteger bigInteger1 = bigInteger0.pow(1462);
      BigInteger bigInteger2 = BigInteger.TEN;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      bigInteger0.andNot(bigInteger1);
      Base64.isBase64(byteArray0);
      BigInteger bigInteger3 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(true);
      base64_0.decode(byteArray0, 0, 4398);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = Base64.MIME_CHUNK_SIZE;
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.isBase64((byte)118);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      int int1 = Base64.PEM_CHUNK_SIZE;
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = new byte[6];
      Base64.isBase64((byte)123);
      BigInteger bigInteger1 = BigInteger.TEN;
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger1);
      int int2 = Base64.PEM_CHUNK_SIZE;
      Base64 base64_1 = new Base64();
      base64_1.encodeToString(byteArray1);
      Base64.encodeBase64(byteArray2, true, true);
      base64_1.encode(byteArray0, 22, (int) (byte)118);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte) (-58);
      byteArray0[4] = (byte)0;
      byteArray0[7] = (byte) (-84);
      byteArray0[8] = (byte)56;
      Base64.encodeBase64(byteArray0, true, true, 116);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, 2095105998);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64.discardWhitespace(byteArray1);
      Base64.isBase64((byte)61);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf((-4932L));
      int int0 = Base64.MIME_CHUNK_SIZE;
      bigInteger0.intValue();
      BigInteger bigInteger1 = bigInteger0.pow(1462);
      BigInteger bigInteger2 = BigInteger.TEN;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      bigInteger0.andNot(bigInteger1);
      Base64.isBase64(byteArray0);
      BigInteger bigInteger3 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(false);
      base64_0.decode(byteArray0, (int) (byte)118, (int) (byte)118);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf((-4932L));
      int int0 = Base64.MIME_CHUNK_SIZE;
      bigInteger0.intValue();
      BigInteger bigInteger1 = bigInteger0.pow(1462);
      BigInteger bigInteger2 = BigInteger.TEN;
      bigInteger1.compareTo(bigInteger2);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      bigInteger1.clearBit((byte)0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      bigInteger0.longValueExact();
      Base64.encodeBase64String(byteArray1);
      Base64.isBase64("@YX:1x");
      Base64 base64_0 = new Base64(false);
      base64_0.decode("@YX:1x");
      // Undeclared exception!
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base64.encodeBase64URLSafeString(byteArray0);
      BigInteger bigInteger0 = BigInteger.valueOf((byte)0);
      BigInteger bigInteger1 = bigInteger0.pow((byte)56);
      BigInteger bigInteger2 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger1);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte) (-58);
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte) (-84);
      byteArray1[8] = (byte)56;
      Base64.encodeBase64(byteArray1, true, true, 116);
      Base64 base64_1 = new Base64((byte)0);
      // Undeclared exception!
      try { 
        base64_1.decode(byteArray1, (int) (byte)0, 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64.isBase64((byte) (-59));
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0, 1973, (int) (byte) (-59));
      Base64.isBase64(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.multiply(bigInteger0);
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("F{+TVN");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      Base64.encodeBase64(byteArray2, false, false, 2762);
      Base64.decodeInteger(byteArray1);
      Base64 base64_0 = new Base64();
      try { 
        base64_0.encode((Object) "F{+TVN");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("F{+TVN");
      Base64.isBase64((byte)78);
      Base64.isBase64("F{+TVN");
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64(byteArray0, true);
      base64_0.decode("F{+TVN");
      BigInteger bigInteger1 = BigInteger.ONE;
      int int0 = Base64.MIME_CHUNK_SIZE;
      Base64.encodeInteger(bigInteger1);
      try { 
        base64_0.encode((Object) bigInteger1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(74, byteArray0, true);
      String string0 = "]";
      base64_0.decode("]");
      base64_0.encode(byteArray0);
      base64_0.encode(byteArray0);
      base64_0.hasData();
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)15;
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base64.encodeBase64URLSafeString(byteArray0);
      BigInteger bigInteger0 = BigInteger.valueOf((byte)0);
      BigInteger bigInteger1 = bigInteger0.pow((byte)56);
      BigInteger bigInteger2 = BigInteger.TEN;
      bigInteger2.negate();
      bigInteger2.intValue();
      BigInteger bigInteger3 = BigInteger.ZERO;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      BigInteger bigInteger4 = BigInteger.ZERO;
      bigInteger4.byteValueExact();
      Base64.encodeInteger(bigInteger4);
      bigInteger1.longValueExact();
      Base64.isArrayByteBase64(byteArray1);
      Base64.encodeBase64String(byteArray1);
      Base64.isBase64("AAAA");
      Base64 base64_0 = new Base64(123, byteArray1);
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)32;
      byteArray2[1] = (byte)56;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)56;
      Base64.encodeBase64(byteArray2, true, true);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray2, 1, (int) (byte)56);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64(byteArray0, false, false, 64);
      Base64 base64_1 = new Base64(111, byteArray0);
      base64_1.readResults(byteArray0, 31, 2048);
      base64_1.avail();
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(35, byteArray0, true);
      base64_0.encode(byteArray1, 1973, (-3166));
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)0;
      byteArray2[0] = (byte)0;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)0;
      byteArray2[6] = (byte)0;
      byteArray2[7] = (byte)0;
      byteArray2[8] = (byte)0;
      byte[] byteArray3 = Base64.CHUNK_SEPARATOR;
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray1, 2414, (-40));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64.isBase64((byte) (-59));
      Base64 base64_0 = new Base64(true);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.encodeInteger(bigInteger0);
      Base64.encodeInteger(bigInteger0);
      base64_0.isUrlSafe();
      base64_0.decode(byteArray0, (int) (byte) (-59), (int) (byte) (-59));
      base64_0.decode(byteArray0, 0, 1899);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.intValue();
      BigInteger bigInteger1 = bigInteger0.pow((byte)0);
      Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger2 = BigInteger.ZERO;
      bigInteger0.byteValueExact();
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      bigInteger1.longValueExact();
      Base64.isArrayByteBase64(byteArray0);
      Base64.encodeBase64String(byteArray1);
      String string0 = "WlUT|09;f_i,D])!2n";
      Base64.isBase64("WlUT|09;f_i,D])!2n");
      Base64 base64_0 = new Base64(false);
      Base64 base64_1 = new Base64((-2860));
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)10;
      byteArray2[1] = (byte)10;
      byteArray2[2] = (byte)10;
      byteArray2[3] = (byte)10;
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)10;
      base64_0.encode(byteArray2, (int) (byte)10, (-766));
      byteArray2[6] = (byte)0;
      base64_1.decode(byteArray2);
      Base64.isBase64((byte) (-125));
      Base64.encodeBase64String(byteArray1);
      int int0 = Base64.MIME_CHUNK_SIZE;
      try { 
        base64_0.encode((Object) "WlUT|09;f_i,D])!2n");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base64.encodeBase64URLSafeString(byteArray0);
      BigInteger.valueOf((byte)0);
      byte byte0 = (byte) (-1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true, 6);
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)0, byteArray1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [AAAA]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(10, byteArray1, true);
      byte[] byteArray2 = base64_0.decode("");
      base64_0.encodeToString(byteArray1);
      base64_0.readResults(byteArray0, (-762), 40);
      base64_0.decode(byteArray1);
      Base64.encodeBase64(byteArray2, false, false, 10);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte) (-37);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)60;
      Base64.isBase64(byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.getLowestSetBit();
      bigInteger1.compareTo(bigInteger0);
      BigInteger bigInteger2 = BigInteger.ZERO;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64((byte)10);
      Base64 base64_1 = new Base64((byte)10, byteArray1);
      base64_1.decode((Object) "jL|n03{O<FDrE!-'++i");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      Object object0 = base64_0.decode((Object) "");
      base64_0.decode(object0);
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64 base64_0 = new Base64((-3128));
      base64_0.decode(byteArray0, 545, (-3442));
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false, 2458);
      Base64.decodeInteger(byteArray2);
      byte[] byteArray3 = new byte[3];
      base64_0.encode(byteArray2, 39, (-659));
      byteArray3[0] = (byte)33;
      Base64.encodeInteger(bigInteger0);
      byteArray3[1] = (byte) (-1);
      byteArray3[2] = (byte)33;
      base64_0.encode(byteArray3, (int) (byte)0, 41);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.longValue();
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64();
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true, (-3356));
      Base64.decodeInteger(byteArray2);
      int int0 = Base64.PEM_CHUNK_SIZE;
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      base64_0.readResults(byteArray3, (byte)0, 0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64.isBase64((byte) (-59));
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)0, 861);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64 base64_0 = new Base64(1312, (byte[]) null, false);
      base64_0.decode(byteArray0, 8192, 0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64((byte[]) null, false, false, 0);
      Base64.decodeInteger(byteArray0);
      Base64 base64_1 = new Base64(76);
      bigInteger0.longValueExact();
      Base64.isArrayByteBase64(byteArray1);
      Base64.encodeBase64String((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64 base64_0 = new Base64(1312, (byte[]) null, false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger0);
      Base64 base64_1 = new Base64(3344, (byte[]) null, true);
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, 118, 64);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)34;
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0, 41, (int) (byte)0);
      Base64.isBase64(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger0.multiply(bigInteger1);
      bigInteger2.getLowestSetBit();
      Base64.encodeInteger(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)0;
      byte byte1 = (byte) (-46);
      Base64.encodeBase64URLSafeString(byteArray0);
      BigInteger bigInteger0 = BigInteger.valueOf((-4932L));
      int int0 = Base64.MIME_CHUNK_SIZE;
      bigInteger0.intValue();
      BigInteger bigInteger1 = bigInteger0.pow(1457);
      BigInteger bigInteger2 = BigInteger.TEN;
      bigInteger1.compareTo(bigInteger2);
      Base64.encodeInteger(bigInteger1);
      // Undeclared exception!
      try { 
        bigInteger1.clearBit((byte) (-46));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Negative bit address
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte)34;
      Base64.encodeBase64URLSafeString(byteArray0);
      BigInteger bigInteger0 = BigInteger.valueOf((byte)0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger1.pow(2062);
      int int0 = Base64.MIME_CHUNK_SIZE;
      BigInteger bigInteger2 = BigInteger.ZERO;
      bigInteger2.intValue();
      BigInteger bigInteger3 = bigInteger0.pow(2027);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger3);
      BigInteger bigInteger4 = BigInteger.ZERO;
      byte[] byteArray2 = Base64.encodeInteger(bigInteger4);
      bigInteger4.longValueExact();
      Base64.isArrayByteBase64(byteArray2);
      Base64.encodeBase64String(byteArray1);
      Base64.isBase64("Parameter supplied to Base64 encode is not a byte[]");
      Base64 base64_0 = new Base64(true);
      Base64 base64_1 = new Base64();
      base64_1.decode(byteArray1);
      Base64.isBase64((byte)34);
      Base64.encodeBase64String(byteArray1);
      int int1 = Base64.MIME_CHUNK_SIZE;
      try { 
        base64_1.encode((Object) "Parameter supplied to Base64 encode is not a byte[]");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.byteValueExact();
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64();
      base64_0.encodeToString(byteArray1);
      base64_0.readResults(byteArray0, (-69), (-69));
      base64_0.avail();
      Base64.isArrayByteBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(32, byteArray0, false);
      base64_0.encode(byteArray1, 1973, (-3172));
      Base64.isBase64(byteArray1);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = BigInteger.ZERO;
      bigInteger2.multiply(bigInteger1);
      int int0 = Base64.PEM_CHUNK_SIZE;
      Base64.encodeInteger(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64((byte[]) null, false, false);
      Base64.encodeBase64((byte[]) null, false, false);
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 356, 625);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true, (-3356));
      Base64.decodeInteger(byteArray2);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, 2015);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[0];
      int int0 = (-1820);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true);
      base64_0.readResults(byteArray0, (-1820), (-1820));
      int int1 = 54;
      base64_0.decode(byteArray1, (-1820), 0);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger0);
      Base64.decodeBase64(byteArray0);
      Base64.encodeBase64URLSafe(byteArray2);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 54, 2064);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 54
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Base64.encodeBase64((byte[]) null, false, false);
      Base64.encodeBase64((byte[]) null, false, false);
      Base64 base64_0 = new Base64();
      base64_0.encode((byte[]) null, 3293, (-589));
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-69);
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)78;
      byte byte1 = (byte) (-1);
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(false);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 4, 84);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte) (-36);
      byteArray0[5] = (byte) (-28);
      Base64.discardWhitespace(byteArray0);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)38;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64((byte)38);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      byte[] byteArray3 = new byte[7];
      byteArray3[0] = (byte)38;
      byteArray3[1] = (byte)0;
      byteArray3[2] = (byte)0;
      Base64.decodeInteger(byteArray1);
      byteArray3[3] = (byte)0;
      byteArray3[4] = (byte)0;
      Base64.discardWhitespace(byteArray2);
      byte[] byteArray4 = Base64.encodeBase64(byteArray2, true);
      Base64.isBase64(byteArray4);
      Base64 base64_1 = new Base64(true);
      base64_1.readResults(byteArray2, 8180, 7);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64((byte[]) null, true);
      byte[] byteArray0 = base64_0.decode("org.apache.commons.codec.EncoderException");
      byte[] byteArray1 = new byte[2];
      Base64.encodeBase64(byteArray0, true, false, 606);
      base64_0.decode(byteArray0, 0, 0);
      byteArray1[0] = (byte)33;
      Base64.decodeInteger(byteArray1);
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)33;
      byteArray2[1] = (byte)33;
      byteArray2[2] = (byte)33;
      base64_0.decode(byteArray2, 606, (int) (byte)33);
      base64_0.encodeToString(byteArray1);
      base64_0.avail();
      Base64.encodeBase64(byteArray2, true, true, (int) (byte)33);
      base64_0.encode(byteArray0, (int) (byte)33, 8);
      Base64.encodeBase64((byte[]) null, false, true, (-2071));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64 base64_0 = new Base64();
      base64_0.decode("org.apache.commons.codec.EncoderException");
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-69);
      byteArray1[1] = (byte)26;
      byteArray1[2] = (byte) (-44);
      Base64.encodeBase64URLSafe(byteArray1);
      Base64 base64_1 = new Base64(4);
      base64_0.encode((byte[]) null);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray3 = new byte[9];
      byteArray3[0] = (byte) (-44);
      byteArray3[1] = (byte) (-69);
      byteArray3[2] = (byte) (-69);
      byteArray3[3] = (byte) (-44);
      byteArray3[4] = (byte)26;
      byteArray3[5] = (byte) (-69);
      byteArray3[6] = (byte)26;
      byteArray3[7] = (byte)112;
      byteArray3[8] = (byte)26;
      Base64.isBase64(byteArray3);
      Base64 base64_2 = new Base64(33, (byte[]) null, true);
      Base64 base64_3 = new Base64();
      // Undeclared exception!
      try { 
        base64_3.encode(byteArray0, (int) (byte) (-69), 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -69
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte) (-30);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.decode(byteArray1, 1710, 804);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true, false, 2533);
      byte[] byteArray3 = Base64.decodeBase64(byteArray0);
      base64_0.avail();
      Base64.decodeInteger(byteArray3);
      Base64.isBase64(byteArray2);
      Base64.encodeBase64Chunked(byteArray2);
      Base64.encodeBase64(byteArray3, false, true);
      Base64.toIntegerBytes(bigInteger0);
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)38;
      Base64.encodeBase64URLSafeString(byteArray0);
      BigInteger bigInteger0 = BigInteger.valueOf((byte)38);
      BigInteger bigInteger1 = bigInteger0.pow((byte)38);
      bigInteger0.intValueExact();
      bigInteger1.intValue();
      BigInteger bigInteger2 = bigInteger1.pow((byte)0);
      Base64.encodeInteger(bigInteger1);
      Base64.encodeInteger(bigInteger2);
      // Undeclared exception!
      try { 
        bigInteger1.longValueExact();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger out of long range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64.encodeBase64URLSafeString((byte[]) null);
      base64_0.isUrlSafe();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte) (-53);
      byteArray0[6] = (byte)1;
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Base64.isBase64((byte)1);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte)1;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.abs();
      Base64 base64_0 = new Base64((-1), byteArray0, false);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-74);
      byteArray1[1] = (byte)14;
      byteArray1[2] = (byte)0;
      base64_0.encode(byteArray1, (-2562), (-2562));
      bigInteger1.subtract(bigInteger0);
      bigInteger0.multiply(bigInteger1);
      base64_0.encodeToString(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true);
      Base64.encodeInteger(bigInteger1);
      Base64.isBase64(byteArray2);
      Base64 base64_1 = null;
      try {
        base64_1 = new Base64(85, byteArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [zLYBAAAAAAA=\u0000\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Base64.isBase64((byte)1);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)1;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(false);
      BigInteger bigInteger0 = BigInteger.TEN;
      base64_0.encodeToString(byteArray1);
      base64_0.decode((String) null);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 2140, 81);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2140
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64 base64_0 = new Base64();
      byte[] byteArray2 = base64_0.encode(byteArray0);
      Object object0 = base64_0.decode((Object) "");
      base64_0.encode(object0);
      byte[] byteArray3 = Base64.decodeBase64("");
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger0);
      base64_0.readResults(byteArray3, 16, (-1));
      byte[] byteArray4 = new byte[6];
      byteArray4[0] = (byte)1;
      byteArray4[1] = (byte) (-119);
      byteArray4[2] = (byte)4;
      byteArray4[3] = (byte)114;
      byteArray4[4] = (byte)102;
      byteArray4[5] = (byte)81;
      Base64.encodeBase64(byteArray4, false);
      Base64.encodeBase64String(byteArray1);
      base64_0.encodeToString(byteArray3);
      byte[] byteArray5 = base64_0.decode(" =Yz;m@,9 E|hU8KzPf");
      base64_0.encode(byteArray2, (-1), 0);
      Base64.encodeBase64URLSafe(byteArray5);
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64(665, (byte[]) null);
      Base64.encodeBase64((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64();
      base64_0.decode("UTF-8");
      base64_0.encodeToString(byteArray1);
      base64_0.readResults(byteArray0, (byte)0, 0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      base64_0.decode((Object) ") than the specified maxium size of ");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)76;
      byteArray0[7] = (byte)0;
      Base64.encodeBase64Chunked(byteArray0);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Base64.encodeBase64Chunked((byte[]) null);
      Base64 base64_0 = new Base64((-862));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      Base64.decodeBase64(byteArray0);
      base64_0.decode("r*h0vvlfyIE");
      base64_0.decode((byte[]) null);
      Base64.encodeBase64URLSafeString((byte[]) null);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-81);
      byteArray1[2] = (byte)1;
      Base64.decodeBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Base64.decodeBase64("F{+TVN");
      Base64.isBase64((byte)78);
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)78;
      byteArray0[8] = (byte)74;
      Base64.encodeBase64(byteArray0);
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)121;
      byteArray0[0] = (byte)121;
      byte byte1 = (byte) (-65);
      byteArray0[1] = (byte) (-65);
      byte byte2 = (byte) (-30);
      byteArray0[2] = (byte) (-30);
      Base64.isBase64(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)121, byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [y\uFFFD\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = base64_0.decode("org.apache.commons.codec.EncoderException");
      byte[] byteArray1 = new byte[2];
      Base64.encodeBase64(byteArray0, true, false, 606);
      base64_0.decode(byteArray0, 0, 0);
      byteArray1[0] = (byte)33;
      Base64.decodeInteger(byteArray1);
      byte byte0 = (byte) (-1);
      byteArray1[1] = (byte) (-1);
      boolean boolean0 = true;
      Base64.decodeBase64((byte[]) null);
      Base64.encodeBase64(byteArray1, true, true, 76);
      Base64.decodeInteger(byteArray0);
      Base64.decodeBase64("");
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)0;
      Base64.encodeBase64String(byteArray0);
      Base64.decodeBase64(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64("WgATAA==");
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      Base64.isBase64("WgATAA==");
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.encodeBase64(byteArray0, true);
      Base64.isArrayByteBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Base64.isBase64("");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byte byte0 = (byte) (-114);
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte) (-100);
      byteArray0[4] = (byte)15;
      byte byte1 = (byte)1;
      byteArray0[5] = (byte)1;
      byte byte2 = (byte)114;
      byteArray0[6] = (byte)114;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(1862, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD\uFFFD\u000B\uFFFD\u000F\u0001r]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte byte0 = (byte) (-48);
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte)1;
      byte byte1 = (byte)73;
      base64_0.encode(byteArray0);
      base64_0.encodeToString(byteArray0);
      Base64.encodeBase64(byteArray1, false, false, 0);
      byteArray0[2] = (byte)73;
      byte byte2 = (byte)27;
      Base64.encodeBase64String(byteArray0);
      try { 
        base64_0.encode((Object) "org.apache.commons.codec.DecoderException");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)0;
      byte byte0 = (byte)24;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-32);
      byteArray0[6] = (byte)13;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64.isBase64(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)0, byteArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [TwAYWwDgDQ==]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      int int0 = 98;
      Base64 base64_0 = new Base64(98, byteArray0, true);
      base64_0.decode((Object) "");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.decodeInteger(byteArray1);
      Object object0 = new Object();
      boolean boolean0 = true;
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.encode(byteArray0);
      Base64.encodeBase64(byteArray0, true);
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = "org.apache.commons.codec.EncoderException";
      Base64.isBase64("org.apache.commons.codec.EncoderException");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte) (-15);
      byteArray0[5] = (byte)40;
      Base64 base64_0 = new Base64(1, byteArray0, true);
      try { 
        base64_0.encode((Object) "org.apache.commons.codec.EncoderException");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-42);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)98;
      byteArray0[7] = (byte) (-1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte) (-1);
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte) (-42);
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)98;
      byteArray2[6] = (byte)0;
      byteArray2[7] = (byte)0;
      base64_0.encodeToString(byteArray2);
      Base64.encodeBase64String(byteArray0);
      String string0 = null;
      Base64.encodeBase64Chunked(byteArray1);
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = (-3510);
      Base64 base64_0 = new Base64((-3510));
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)65;
      Base64.encodeBase64String(byteArray0);
      byteArray1[1] = (byte)0;
      base64_0.decode("");
      byteArray1[2] = (byte) (-108);
      byteArray1[3] = (byte) (-117);
      byteArray1[4] = (byte)49;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, false, false, (int) (byte) (-117));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of -117
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)0;
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false, false);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61}, byteArray3);
      assertEquals(4, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = null;
      Base64.decodeBase64((String) null);
      int int0 = 0;
      Base64 base64_0 = new Base64(0);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs((long) 0, (long) 64);
      // Undeclared exception!
      try { 
        mockRandom0.longs((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size must be non-negative
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isArrayByteBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64();
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte) (-38);
      byteArray2[1] = (byte) (-101);
      Base64.decodeBase64("");
      byteArray2[2] = (byte)0;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      base64_0.encode(byteArray2);
      String string0 = base64_0.encodeToString(byteArray2);
      assertFalse(base64_0.isUrlSafe());
      assertEquals("2psA", string0);
      
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(0, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)53;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, false, (-271));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of -271
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Base64.isBase64((byte) (-38));
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-38);
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte) (-38);
      byteArray0[5] = (byte) (-38);
      byteArray0[6] = (byte) (-38);
      byteArray0[7] = (byte) (-38);
      byteArray0[8] = (byte) (-38);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-38);
      byteArray1[1] = (byte) (-38);
      byteArray1[2] = (byte) (-38);
      byteArray1[3] = (byte) (-38);
      byteArray1[4] = (byte) (-38);
      byteArray1[5] = (byte) (-38);
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray1);
      assertTrue(bigInteger1.equals((Object)bigInteger0));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Base64 base64_0 = new Base64(665, (byte[]) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(1, byteArray0.length);
      
      byte[] byteArray1 = base64_0.decode("");
      assertEquals(0, byteArray1.length);
      
      base64_0.encodeToString((byte[]) null);
      int int0 = base64_0.readResults((byte[]) null, 665, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)15;
      byte byte0 = (byte)0;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      byteArray0[1] = (byte)0;
      bigInteger0.abs();
      byteArray0[2] = (byte)92;
      byte byte1 = (byte)1;
      base64_0.encode(byteArray0);
      try { 
        base64_0.encode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Base64.isBase64((byte)1);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)1;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertEquals(12, byteArray1.length);
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(false);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.equals(bigInteger0);
      bigInteger0.gcd(bigInteger1);
      Base64.encodeBase64(byteArray0, false, false, 4040);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      assertEquals(0, byteArray2.length);
      
      boolean boolean0 = Base64.isBase64("%0Zr]4/JrZ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-120);
      Base64 base64_0 = new Base64(175, byteArray0);
      try { 
        base64_0.encode((Object) "U$3`jMZy5");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-46);
      byteArray0[5] = (byte)34;
      byteArray0[6] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray0);
      BigInteger bigInteger0 = BigInteger.valueOf(0L);
      bigInteger0.pow(116);
      bigInteger0.intValueExact();
      bigInteger0.intValue();
      bigInteger0.pow(1457);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      bigInteger0.longValueExact();
      Base64.isArrayByteBase64(byteArray1);
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      Base64.encodeBase64String(byteArray3);
      Base64.isBase64("");
      Base64 base64_0 = new Base64(true);
      byte[] byteArray4 = base64_0.decode(byteArray0);
      Base64.isBase64((byte)56);
      Base64.encodeBase64String(byteArray2);
      base64_0.readResults(byteArray4, 0, 0);
      try { 
        base64_0.encode((Object) "ADgAANIiAA");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte) (-45);
      byteArray0[1] = (byte) (-45);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)0, byteArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [ANM=\u0000\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte)75;
      byteArray0[6] = (byte)0;
      int int0 = base64_0.readResults(byteArray0, (byte)0, (byte)75);
      assertEquals(0, int0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.EncoderException");
      Base64 base64_0 = new Base64();
      base64_0.decode((Object) "org.apache.commons.codec.EncoderException");
      byte[] byteArray1 = base64_0.decode(byteArray0);
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)111;
      byteArray2[1] = (byte)67;
      byteArray2[2] = (byte)105;
      byteArray2[3] = (byte)20;
      byteArray2[4] = (byte) (-1);
      byteArray2[5] = (byte) (-88);
      byteArray2[6] = (byte)0;
      byteArray2[7] = (byte)0;
      Base64.decodeBase64(byteArray2);
      Base64.encodeBase64Chunked(byteArray1);
      try { 
        base64_0.encode((Object) "org.apache.commons.codec.EncoderException");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)38;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64((byte)38);
      Base64.encodeBase64(byteArray1, true);
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)38;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)0;
      Base64.encodeBase64String(byteArray0);
      byteArray2[5] = (byte)38;
      byteArray2[6] = (byte)38;
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true);
      boolean boolean0 = true;
      Base64.encodeBase64(byteArray0, true, true);
      BigInteger bigInteger1 = new BigInteger(byteArray3);
      bigInteger0.xor(bigInteger1);
      byte[] byteArray4 = base64_0.decode("");
      Base64.decodeInteger(byteArray4);
      int int0 = 71;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray2, 105, 71);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 105
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte)1;
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64URLSafe(byteArray0);
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = base64_0.decode(byteArray0);
      assertEquals(0, byteArray1.length);
      
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte)0;
      int int0 = base64_0.readResults(byteArray0, (byte)0, (byte) (-1));
      assertEquals((-1), int0);
  }
}
