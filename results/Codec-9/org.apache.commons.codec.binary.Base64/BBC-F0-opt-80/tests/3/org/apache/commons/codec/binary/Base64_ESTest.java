/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 20:49:18 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      BigInteger bigInteger0 = new BigInteger(5297, mockRandom0);
      // Undeclared exception!
      try { 
        Base64.encodeInteger(bigInteger0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(5261, mockRandom0);
      // Undeclared exception!
      try { 
        Base64.encodeInteger(bigInteger0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      BigInteger bigInteger0 = new BigInteger(5229, mockRandom0);
      // Undeclared exception!
      try { 
        Base64.encodeInteger(bigInteger0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      BigInteger bigInteger0 = new BigInteger(5261, mockRandom0);
      // Undeclared exception!
      try { 
        Base64.encodeInteger(bigInteger0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(6592, mockRandom0);
      // Undeclared exception!
      try { 
        Base64.encodeInteger(bigInteger0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-74);
      Base64.isBase64(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(false);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64();
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64();
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(12);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, 6);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      // Undeclared exception!
      try { 
        Base64.encodeBase64URLSafe(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(true);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-1);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64((byte) (-1), byteArray1);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(1194, byteArray1, true);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.decodeBase64("org.apache.commons.codec.DecoderException");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(56, (byte[]) null);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(false);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)110;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(8184);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)107;
      byteArray0[4] = (byte)25;
      byteArray0[5] = (byte) (-79);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(3000, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD{\u0000k\u0019\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.gcd(bigInteger1);
      bigInteger0.not();
      BigInteger bigInteger2 = BigInteger.TEN;
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(52, byteArray0, true);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)120;
      byteArray1[1] = (byte)1;
      byteArray1[3] = (byte)10;
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      Base64 base64_0 = new Base64(7, byteArray0, true);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte) (-1);
      byteArray1[4] = (byte) (-1);
      byte[] byteArray2 = base64_0.decode("");
      byteArray1[7] = (byte) (-1);
      String string0 = base64_0.encodeToString(byteArray1);
      //  // Unstable assertion: assertEquals("____\uFFFD__8A\uFFFDAP8A\uFFFD", string0);
      
      // Undeclared exception!
      try { 
        Base64.decodeInteger(byteArray2);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte) (-1));
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      Base64 base64_0 = new Base64(7, byteArray0, true);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte) (-1);
      base64_0.decode("org.apache.commons.codec.binary.StringUtils");
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      Base64 base64_1 = new Base64(32, byteArray2);
      Base64.isBase64((byte) (-1));
      BigInteger bigInteger0 = new BigInteger(byteArray2);
      // Undeclared exception!
      try { 
        Base64.encodeInteger(bigInteger0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        Base64.decodeInteger(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)92;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(8184);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)61;
      byteArray1[1] = (byte)6;
      byteArray1[2] = (byte)104;
      byteArray1[4] = (byte) (-1);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.intValueExact();
      bigInteger0.not();
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      byteArray1[5] = (byte)0;
      Base64.isBase64((byte) (-1));
      Base64.isBase64((byte)61);
      // Undeclared exception!
      try { 
        Base64.decodeBase64(byteArray2);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(69);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Base64.encodeBase64Chunked((byte[]) null);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64();
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte)125;
      byteArray0[6] = (byte)54;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(123, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000\u0000%\uFFFD*}6]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(23);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)3;
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(true);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)92;
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        Base64.encodeBase64Chunked(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.intValueExact();
      // Undeclared exception!
      try { 
        Base64.decodeBase64((String) null);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)92;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, (int) (byte)92);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte) (-114);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, true);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte)0;
      byte byte0 = (byte)112;
      byteArray0[4] = (byte)112;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, false);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.not();
      Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64();
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)0;
      Base64 base64_0 = new Base64(0, byteArray0, false);
      // Undeclared exception!
      try { 
        Base64.decodeBase64(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)80;
      byteArray0[0] = (byte)80;
      // Undeclared exception!
      try { 
        Base64.decodeInteger(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64(968, byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)0;
      byte byte0 = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)37;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.setBit(2276);
      bigInteger0.testBit((byte)78);
      Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64((byte)78);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-1899), byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [N\u0000\u0000%]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-47);
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)1;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger0.min(bigInteger1);
      bigInteger0.doubleValue();
      // Undeclared exception!
      try { 
        Base64.encodeInteger(bigInteger0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Base64.isBase64((byte)0);
      byte[] byteArray0 = Base64.encodeBase64URLSafe((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-22);
      byteArray0[6] = (byte)0;
      // Undeclared exception!
      try { 
        Base64.encodeBase64String(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-88);
      byteArray0[8] = (byte)0;
      // Undeclared exception!
      try { 
        Base64.encodeBase64Chunked(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-93);
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)62;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)1;
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      Base64.isArrayByteBase64(byteArray0);
      // Undeclared exception!
      try { 
        Base64.encodeBase64URLSafeString(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byte byte0 = (byte)80;
      byteArray0[1] = (byte)80;
      byte byte1 = (byte)18;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-121);
      byteArray0[5] = (byte)122;
      byte byte2 = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-19);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFDP\u0012\u0000\uFFFDz\u0000\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte) (-114);
      byteArray0[5] = (byte)117;
      byteArray0[6] = (byte) (-59);
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte)85;
      // Undeclared exception!
      try { 
        Base64.encodeBase64String(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)44;
      byteArray0[6] = (byte) (-1);
      // Undeclared exception!
      try { 
        Base64.encodeBase64URLSafeString(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)53;
      byteArray0[7] = (byte) (-75);
      byteArray0[8] = (byte)0;
      // Undeclared exception!
      try { 
        Base64.encodeBase64URLSafeString(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Base64.encodeBase64((byte[]) null, false, false);
      // Undeclared exception!
      try { 
        Base64.decodeBase64("");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)70;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-1311), byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [F]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64 base64_0 = new Base64(38, byteArray0, true);
      // Undeclared exception!
      try { 
        Base64.decodeInteger(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.decodeBase64("");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(3401);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafe(byteArray0);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }
}
