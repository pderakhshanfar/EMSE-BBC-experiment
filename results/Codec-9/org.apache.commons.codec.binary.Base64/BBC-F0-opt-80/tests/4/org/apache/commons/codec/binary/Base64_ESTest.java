/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 20:50:10 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = BigInteger.probablePrime(2964, mockRandom0);
      mockRandom0.ints();
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.andNot(bigInteger1);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.decodeBase64(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      Base64.decodeBase64(byteArray2);
      Base64.isBase64((byte)124);
      Base64 base64_0 = new Base64(817);
      base64_0.decode(byteArray0, 112, 2964);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = BigInteger.probablePrime(3311, mockRandom0);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      BigInteger bigInteger1 = BigInteger.TEN;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      assertEquals(760, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      MockRandom mockRandom0 = new MockRandom(21);
      mockRandom0.doubles();
      mockRandom0.ints();
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64((byte[]) null);
      Base64.decodeBase64((byte[]) null);
      Base64.encodeBase64((byte[]) null, false, false);
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte) (-74);
      byteArray0[5] = (byte)21;
      byteArray0[6] = (byte) (-70);
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Base64.isBase64((byte)61);
      boolean boolean0 = Base64.isBase64((byte)61);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)61;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, (int) (byte)61);
      assertEquals(6, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte byte0 = (byte)12;
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)12;
      Base64 base64_0 = new Base64((byte)12, byteArray0);
      base64_0.readResults(byteArray0, (byte)0, (-1788));
      Base64.encodeBase64(byteArray0, true);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 0, 70);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(0, byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-4);
      byteArray1[1] = (byte)1;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-93);
      byteArray1[4] = (byte)2;
      byteArray1[5] = (byte)1;
      byteArray1[6] = (byte)17;
      byteArray1[7] = (byte)29;
      byteArray1[8] = (byte)125;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)12;
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64 base64_0 = new Base64((byte)12, byteArray0);
      int int0 = base64_0.readResults(byteArray0, (byte)0, (-1788));
      assertEquals(0, int0);
      
      Base64 base64_1 = new Base64(19, byteArray0, true);
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("DAAAAAAAAA==", string0);
      
      base64_1.decode((String) null);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)12;
      byteArray1[1] = (byte)12;
      byteArray1[2] = (byte) (-18);
      byteArray1[3] = (byte)12;
      byteArray1[4] = (byte)12;
      byteArray1[5] = (byte)12;
      byteArray1[6] = (byte)12;
      byteArray1[7] = (byte)12;
      byteArray1[8] = (byte)12;
      Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      assertEquals(19, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)62;
      Base64.discardWhitespace(byteArray0);
      boolean boolean0 = Base64.isBase64((byte)3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte)90;
      byteArray0[7] = (byte)3;
      base64_0.decode(byteArray0, (int) (byte)1, 1);
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("aXxWAWkoWgM=", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)62;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.isBase64((byte)127);
      Base64 base64_0 = new Base64((-3194), byteArray1, true);
      byte[] byteArray2 = base64_0.decode(byteArray0);
      assertEquals(0, byteArray2.length);
      
      base64_0.decode(byteArray0, (-3194), (-3194));
      assertEquals(2, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)12;
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64 base64_0 = new Base64((byte)12, byteArray0);
      base64_0.readResults(byteArray0, (byte)0, (-1788));
      int int0 = 70;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 0, 70);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = BigInteger.probablePrime(1028, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertEquals(172, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64.isBase64(byteArray1);
      boolean boolean0 = false;
      Base64 base64_0 = new Base64((-1129), byteArray1, false);
      Base64.encodeBase64(byteArray0, true);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 110, (int) (byte)49);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 110
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = base64_0.decode("Px*v#iAw)x>j4n");
      byte[] byteArray1 = base64_0.decode("");
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.encodeBase64String(byteArray1);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64("z+tRF|P<");
      Object object0 = new Object();
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      try { 
        base64_0.decode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Base64 base64_0 = new Base64(55);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-52);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.isBase64((byte)1);
      Base64 base64_1 = new Base64(64, byteArray1, false);
      boolean boolean0 = base64_1.hasData();
      assertFalse(boolean0);
      
      Base64 base64_2 = new Base64((byte)62, byteArray0);
      byte[] byteArray2 = base64_2.decode(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, true);
      assertArrayEquals(new byte[] {(byte) (-52)}, byteArray1);
      assertEquals(0, byteArray3.length);
      assertFalse(base64_2.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Base64 base64_0 = new Base64(55);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray0 = Base64.decodeBase64("lineSeperator must not contain base64 characters: [");
      Base64.isBase64(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 21, (int) (byte)55);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)123;
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)49;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-3113), byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [{1]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(true);
      base64_0.readResults(byteArray0, 73, 73);
      Base64 base64_1 = new Base64(0, byteArray0, true);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)31;
      byteArray1[1] = (byte)1;
      byteArray1[2] = (byte) (-101);
      byteArray1[3] = (byte)52;
      byteArray1[4] = (byte) (-124);
      byteArray1[5] = (byte)86;
      byteArray1[6] = (byte) (-36);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      Base64.encodeBase64(byteArray2);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger0);
      base64_0.hasData();
      // Undeclared exception!
      try { 
        base64_1.encodeToString(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Base64 base64_0 = new Base64(111);
      base64_0.decode("ye7-]H");
      byte[] byteArray0 = new byte[1];
      base64_0.decode(byteArray0, (-1), 54);
      base64_0.decode("");
      byte[] byteArray1 = Base64.decodeBase64("");
      Base64.isBase64(byteArray1);
      byte[] byteArray2 = Base64.decodeBase64((String) null);
      assertNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)12;
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)12;
      byteArray1[2] = (byte)12;
      byteArray1[3] = (byte)12;
      byteArray1[4] = (byte)12;
      Base64 base64_0 = new Base64((-1334), byteArray1);
      base64_0.readResults(byteArray1, (byte)12, (-1788));
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 0, 57);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64((-2964), byteArray0);
      base64_0.readResults(byteArray0, 51, 51);
      base64_0.decode((String) null);
      boolean boolean0 = Base64.isBase64((byte)2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Base64 base64_0 = new Base64(111);
      byte byte0 = (byte)1;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte)106;
      Base64.encodeBase64(byteArray0, true, true);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)66;
      byteArray1[1] = (byte)13;
      Base64.isArrayByteBase64(byteArray1);
      Base64 base64_1 = new Base64((byte)106);
      Base64 base64_2 = null;
      try {
        base64_2 = new Base64(100, byteArray1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [B\r]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Base64.decodeBase64((byte[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte) (-67);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)41);
      base64_0.decode("o");
      Base64 base64_1 = new Base64((byte) (-67), (byte[]) null, true);
      base64_1.encode((byte[]) null);
      Base64.encodeBase64(byteArray0);
      Base64.isBase64((byte) (-97));
      Base64.encodeBase64((byte[]) null, false);
      base64_0.encodeToString((byte[]) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      Random.setNextRandom(1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Base64.isBase64("QZ");
      Base64.isBase64((byte) (-94));
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)47;
      byte[] byteArray1 = base64_0.decode(byteArray0);
      int int0 = base64_0.avail();
      assertEquals(0, int0);
      
      boolean boolean0 = Base64.isBase64((byte)47);
      base64_0.encode(byteArray1);
      base64_0.decode(byteArray0);
      Base64.isBase64((byte) (-74));
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray0);
      assertArrayEquals(new byte[] {(byte)95, (byte)121, (byte)56}, byteArray2);
      
      boolean boolean1 = Base64.isBase64("oP^~f){tPjgw\"|dv");
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray3 = base64_0.decode("Parameter supplied to Base64 encode is not a byte[]");
      assertEquals(30, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64((byte[]) null, false, false, 531);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      boolean boolean0 = Base64.isBase64("e>K}Cb");
      assertFalse(boolean0);
      
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0, 0, (-1));
      byte[] byteArray2 = base64_0.decode(byteArray1);
      String string0 = Base64.encodeBase64URLSafeString(byteArray2);
      assertFalse(base64_0.isUrlSafe());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Base64 base64_0 = new Base64(111);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)106;
      byteArray0[7] = (byte)41;
      byteArray0[8] = (byte)32;
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_1 = new Base64((byte)13);
      Base64 base64_2 = null;
      try {
        base64_2 = new Base64((-1), byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [
         // \u0007\uFFFD\r7\u0001j) ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)12;
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isArrayByteBase64(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)71;
      byteArray1[1] = (byte)61;
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      Base64 base64_0 = new Base64(719);
      base64_0.encode(byteArray2, 1, 1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeBase64URLSafe(byteArray1);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray2, (-449), (int) (byte)71);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -449
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isArrayByteBase64(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)71;
      byteArray1[1] = (byte)61;
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      Base64 base64_0 = new Base64(719);
      base64_0.encode(byteArray2, 1, 1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.and(bigInteger0);
      bigInteger0.divideAndRemainder(bigInteger1);
      Base64.toIntegerBytes(bigInteger0);
      base64_0.hasData();
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, true);
      BigInteger bigInteger2 = new BigInteger(byteArray3);
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, (byte)71, 8180);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64((byte[]) null);
      assertNull(byteArray0);
      
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-97);
      byteArray1[1] = (byte) (-67);
      byteArray1[2] = (byte)62;
      byteArray1[3] = (byte)1;
      byteArray1[4] = (byte)3;
      byteArray1[5] = (byte) (-52);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-97), (byte) (-67), (byte)62, (byte)1, (byte)3, (byte) (-52)}, byteArray2);
      
      boolean boolean0 = Base64.isBase64((byte)62);
      assertFalse(boolean0);
      
      Base64 base64_0 = new Base64((byte) (-67), byteArray1, false);
      boolean boolean1 = base64_0.hasData();
      assertFalse(boolean1);
      
      base64_0.decode(byteArray1, 67, (-1035));
      base64_0.decode((byte[]) null);
      assertFalse(base64_0.isUrlSafe());
      assertNotSame(byteArray1, byteArray2);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isArrayByteBase64(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)71;
      byteArray1[1] = (byte)61;
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      Base64 base64_0 = new Base64(719);
      base64_0.encode(byteArray2, 1, 1);
      assertArrayEquals(new byte[] {(byte)82, (byte)122, (byte)48, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65}, byteArray2);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.and(bigInteger0);
      bigInteger0.divideAndRemainder(bigInteger1);
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(0, byteArray3.length);
      
      base64_0.hasData();
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray1, true);
      assertEquals(10, byteArray4.length);
      
      byte[] byteArray5 = Base64.encodeBase64(byteArray0, false);
      assertSame(byteArray0, byteArray5);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      base64_0.isUrlSafe();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.getLowestSetBit();
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.add(bigInteger1);
      Base64 base64_1 = new Base64(9);
      Base64 base64_2 = new Base64(true);
      base64_2.encode((byte[]) null);
      Base64.encodeBase64((byte[]) null);
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger2 = null;
      try {
        bigInteger2 = new BigInteger(byteArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Base64 base64_0 = new Base64(111);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray0 = base64_0.decode("");
      byte[] byteArray1 = new byte[0];
      base64_0.decode(byteArray1, 111, (-2024));
      base64_0.decode("");
      byte[] byteArray2 = Base64.decodeBase64("");
      Base64.isBase64(byteArray2);
      byte[] byteArray3 = new byte[3];
      byteArray3[1] = (byte)55;
      byteArray3[2] = (byte) (-67);
      base64_0.decode(byteArray3, 0, (int) (byte)0);
      byte[] byteArray4 = base64_0.decode(byteArray0);
      base64_0.readResults(byteArray4, 111, (byte) (-67));
      Base64.encodeBase64(byteArray0, true);
      Base64.encodeInteger(bigInteger0);
      Random.setNextRandom(13);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Base64 base64_0 = new Base64(111);
      byte[] byteArray0 = base64_0.decode("");
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.isBase64((byte)6);
      Base64 base64_1 = new Base64(1776, byteArray1, false);
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_1.hasData();
      // Undeclared exception!
      try { 
        base64_1.decode(byteArray0, (int) (byte) (-52), 40);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -52
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)15;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.equals(">\"i!L45&");
      BigInteger bigInteger1 = bigInteger0.not();
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger1);
      bigInteger0.shiftLeft(0);
      Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(false);
      base64_0.readResults(byteArray2, (-804), 81);
      byte[] byteArray3 = Base64.decodeBase64(byteArray1);
      Base64.isBase64(">\"i!L45&");
      Base64.decodeBase64(byteArray3);
      Random.setNextRandom(76);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.decodeBase64("lineSeperator must not contain base64 characters: [");
      Base64.isBase64(byteArray1);
      Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(13, byteArray1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD)\uFFFDI\uFFFD^\uFFFD\uFFFDh\uFFFDk\uFFFD\uFFFDz-r\uFFFD\uFFFDj)\uFFFDj\u01FA\uFFFD\uFFFDZ\uFFFD\uFFFD-z\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      base64_0.isUrlSafe();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.add(bigInteger1);
      Base64 base64_1 = new Base64(76);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)118;
      byte byte0 = (byte) (-52);
      Base64.discardWhitespace(byteArray0);
      Base64.isBase64((byte) (-1));
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)9;
      byteArray1[1] = (byte)88;
      byteArray1[2] = (byte) (-52);
      byteArray1[3] = (byte)88;
      Base64 base64_2 = null;
      try {
        base64_2 = new Base64((byte)3, byteArray1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\tX\uFFFDX]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Base64.decodeBase64((byte[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)62;
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, (int) (byte) (-97), (int) (byte)16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Base64 base64_0 = new Base64(111);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger0);
      base64_0.decode("");
      byte[] byteArray0 = new byte[0];
      base64_0.decode(byteArray0, 111, (-2024));
      base64_0.decode("");
      byte[] byteArray1 = Base64.decodeBase64("lineSeperator must not contain base64 characters: [");
      Base64.isBase64(byteArray1);
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)94;
      byteArray2[1] = (byte)55;
      byteArray2[2] = (byte) (-67);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray2, 0, 11);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)12;
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      //  // Unstable assertion: assertFalse(boolean0);
      
      Base64 base64_0 = new Base64((byte)12);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)12;
      BigInteger bigInteger0 = new BigInteger(byteArray2);
      bigInteger0.equals(">\"i!L45&");
      bigInteger0.not();
      Base64.toIntegerBytes(bigInteger0);
      byteArray2[1] = (byte)12;
      byte[] byteArray3 = new byte[9];
      byteArray3[0] = (byte)12;
      byteArray3[1] = (byte)12;
      byteArray3[2] = (byte)12;
      byteArray3[3] = (byte)12;
      byteArray3[4] = (byte)12;
      byteArray3[5] = (byte)12;
      byteArray3[6] = (byte) (-13);
      byteArray3[7] = (byte)12;
      byteArray3[8] = (byte)12;
      byte[] byteArray4 = Base64.decodeBase64(byteArray3);
      //  // Unstable assertion: assertEquals(0, byteArray4.length);
      
      byteArray2[2] = (byte)12;
      Base64.isBase64((byte)100);
      String string0 = Base64.encodeBase64String(byteArray1);
      //  // Unstable assertion: assertEquals("REE9PcHe", string0);
      
      Base64.encodeBase64Chunked(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)68, (byte)65, (byte)61, (byte)61, (byte) (-63), (byte) (-34)}, byteArray1);
      
      base64_0.decode((Object) ">\"i!L45&");
      base64_0.decode((Object) "REE9PQ0K");
      byte[] byteArray5 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray5);
      int int0 = base64_0.avail();
      //  // Unstable assertion: assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-34);
      Base64 base64_0 = new Base64(0, byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64(byteArray0);
      base64_0.decode(byteArray0);
      base64_0.avail();
      byte[] byteArray2 = Base64.decodeBase64("{S");
      base64_0.encode(byteArray2, (int) (byte) (-34), (int) (byte) (-63));
      Base64.encodeBase64(byteArray1, false, false, 0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = (-2964);
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-2964), byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte) (-1), 106);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Base64.decodeBase64((byte[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-52);
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64((byte)62, (byte[]) null);
      byte[] byteArray1 = new byte[0];
      base64_0.decode(byteArray1, 26, (int) (byte) (-67));
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.decodeBase64("]");
      base64_0.isUrlSafe();
      try { 
        base64_0.encode((Object) "t}6,");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Base64 base64_0 = new Base64((-574));
      byte[] byteArray0 = new byte[8];
      String string0 = "UTF-16LE";
      Base64.decodeBase64("UTF-16LE");
      Base64.discardWhitespace(byteArray0);
      Base64.isBase64((byte)88);
      Base64 base64_1 = new Base64((-522), byteArray0, true);
      try { 
        base64_1.encode((Object) "UTF-16LE");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Base64.decodeBase64((byte[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-52);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.isBase64((byte)62);
      Base64 base64_0 = new Base64((byte) (-67), byteArray0, false);
      Base64.encodeBase64URLSafeString((byte[]) null);
      base64_0.hasData();
      base64_0.decode(byteArray1, (int) (byte) (-97), 0);
      base64_0.decode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("lineSeperator must not contain base64 characters: [");
      byte[] byteArray1 = Base64.decodeBase64("lineSeperator must not contain base64 characters: [");
      Base64 base64_0 = new Base64(5);
      byte[] byteArray2 = new byte[2];
      byte[] byteArray3 = new byte[4];
      byteArray3[0] = (byte)35;
      byteArray3[1] = (byte)35;
      byteArray3[2] = (byte)35;
      byteArray3[3] = (byte)35;
      base64_0.encodeToString(byteArray3);
      byteArray2[0] = (byte)35;
      byteArray2[1] = (byte)35;
      base64_0.encode(byteArray2, (int) (byte)35, (int) (byte)35);
      base64_0.decode(byteArray0, 1, (int) (byte)35);
      Base64.decodeInteger(byteArray1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Base64 base64_0 = new Base64(111);
      byte[] byteArray0 = base64_0.decode("");
      byte[] byteArray1 = base64_0.decode("lineSeperator must not contain base64 characters: [");
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      base64_0.decode(byteArray1, 111, 2);
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64.isBase64("Parameter supplied to Base64 encode is not a byte[]");
      base64_0.decode((Object) "");
      base64_0.decode(byteArray2);
      base64_0.decode((Object) "");
      Base64.encodeBase64URLSafeString(byteArray2);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Base64 base64_0 = new Base64(118);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)54;
      Object object0 = base64_0.decode((Object) "");
      Object object1 = base64_0.encode(object0);
      Object object2 = base64_0.decode(object1);
      base64_0.decode(object2);
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte) (-1);
      base64_0.encodeToString(byteArray0);
      base64_0.decode((Object) "MQAYAAAAAf8A\r\n");
      base64_0.encodeToString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Base64 base64_0 = new Base64((-574));
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.isBase64(byteArray1);
      Base64 base64_1 = null;
      try {
        base64_1 = new Base64(890, byteArray2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [AAAAAAA=]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)15;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      Base64 base64_0 = new Base64(true);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.bitCount();
      BigInteger bigInteger1 = bigInteger0.shiftLeft((-2684));
      byte[] byteArray3 = Base64.encodeInteger(bigInteger1);
      //  // Unstable assertion: assertEquals(0, byteArray3.length);
      
      base64_0.readResults(byteArray2, (-1266), (-1266));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)47, (byte)119, (byte)56, (byte)80, (byte) (-97), (byte) (-67)}, byteArray2);
      //  // Unstable assertion: assertEquals(6, byteArray2.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)47, (byte)119, (byte)56, (byte)80, (byte)63, (byte) (-101)}, byteArray2);
      
      byte[] byteArray4 = Base64.decodeBase64(byteArray0);
      boolean boolean0 = Base64.isBase64("\"bbG=D");
      //  // Unstable assertion: assertFalse(boolean0);
      
      byte[] byteArray5 = Base64.decodeBase64(byteArray0);
      //  // Unstable assertion: assertEquals(0, byteArray5.length);
      
      String string0 = base64_0.encodeToString(byteArray4);
      //  // Unstable assertion: assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      base64_0.isUrlSafe();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.add(bigInteger1);
      Base64 base64_1 = new Base64(76);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte) (-72);
      byteArray0[6] = (byte)16;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte) (-47);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      base64_0.encode(byteArray1, (-1561), (int) (byte) (-47));
      assertEquals(12, byteArray1.length);
      
      BigInteger bigInteger2 = BigInteger.ZERO;
      bigInteger2.divideAndRemainder(bigInteger1);
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger2);
      assertEquals(0, byteArray2.length);
      
      boolean boolean0 = base64_0.hasData();
      assertTrue(boolean0);
      
      BigInteger bigInteger3 = Base64.decodeInteger(byteArray0);
      assertEquals((short) (-5133), bigInteger3.shortValue());
      
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("WAkrdnq4EP/R", string0);
      
      Base64.isBase64("");
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray3 = Base64.decodeBase64("WAkrdnq4EP/R");
      assertArrayEquals(new byte[] {(byte)88, (byte)9, (byte)43, (byte)118, (byte)122, (byte) (-72), (byte)16, (byte) (-1), (byte) (-47)}, byteArray3);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertTrue(boolean0);
      
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)71;
      byteArray1[1] = (byte)61;
      byteArray1[2] = (byte)56;
      byteArray1[3] = (byte) (-17);
      byteArray1[4] = (byte) (-89);
      byteArray1[5] = (byte)54;
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(6, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Base64.decodeBase64((byte[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-16);
      byteArray0[5] = (byte) (-52);
      Base64 base64_0 = new Base64(true);
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, (int) (byte) (-52), (int) (byte)62);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      base64_0.isUrlSafe();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      boolean boolean0 = bigInteger1.isProbablePrime(64);
      bigInteger0.add(bigInteger1);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      BigInteger bigInteger2 = BigInteger.ONE;
      base64_0.isUrlSafe();
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)112;
      byteArray1[2] = (byte) (-55);
      byteArray1[3] = (byte)0;
      Base64.decodeBase64(byteArray1);
      boolean boolean1 = base64_0.isUrlSafe();
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Base64.decodeBase64((byte[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)62;
      Base64 base64_0 = new Base64(true);
      base64_0.readResults((byte[]) null, (byte) (-97), 736);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.bitCount();
      bigInteger0.shiftLeft((-3892));
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64((byte[]) null);
      Base64.decodeBase64((byte[]) null);
      Base64.isBase64("");
      byte[] byteArray1 = Base64.decodeBase64((byte[]) null);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)15;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray3 = Base64.discardWhitespace(byteArray1);
      Base64.isBase64((byte) (-1));
      Base64 base64_0 = new Base64((byte)0, byteArray2, false);
      base64_0.hasData();
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray3, (int) (byte)15, (int) (byte)15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 15
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-2964), byteArray0);
      base64_0.readResults(byteArray0, 51, 51);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      base64_0.decode(byteArray0, 0, (-1));
      Base64.encodeBase64String(byteArray1);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64("");
      Object object0 = base64_0.decode((Object) "");
      Object object1 = base64_0.decode((Object) "");
      assertNotSame(object1, object0);
      
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte) (-68);
      byteArray2[1] = (byte) (-68);
      byteArray2[2] = (byte) (-8);
      byteArray2[4] = (byte) (-8);
      byteArray2[5] = (byte) (-68);
      String string0 = Base64.encodeBase64URLSafeString(byteArray2);
      assertEquals("vLz4APi8", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Base64.decodeBase64((byte[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-52);
      Base64.discardWhitespace(byteArray0);
      String string0 = "";
      Base64.decodeBase64("");
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      bigInteger0.floatValue();
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64((byte[]) null);
      assertNull(byteArray0);
      
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-97);
      byteArray1[1] = (byte) (-67);
      byteArray1[2] = (byte)62;
      byteArray1[3] = (byte)1;
      byteArray1[4] = (byte)3;
      byteArray1[5] = (byte) (-52);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      Base64.isBase64((byte)62);
      Base64 base64_0 = new Base64((byte) (-67), byteArray1, false);
      boolean boolean0 = base64_0.hasData();
      assertFalse(boolean0);
      
      base64_0.decode(byteArray2, (int) (byte) (-97), 0);
      byte[] byteArray3 = base64_0.decode(byteArray2);
      assertEquals(0, byteArray3.length);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-97), (byte) (-67), (byte)62, (byte)1, (byte)3, (byte) (-52)}, byteArray2);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      base64_0.isUrlSafe();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.add(bigInteger1);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      bigInteger0.abs();
      base64_0.isUrlSafe();
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray1);
      assertEquals(1, byteArray0.length);
      
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte) (-1);
      byteArray2[1] = (byte)112;
      byteArray2[2] = (byte) (-66);
      byteArray2[3] = (byte)0;
      byte[] byteArray3 = Base64.decodeBase64(byteArray2);
      assertEquals(0, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.decodeInteger(byteArray0);
      bigInteger0.longValueExact();
      Base64.toIntegerBytes(bigInteger0);
      bigInteger0.getLowestSetBit();
      byteArray0[1] = (byte) (-1);
      base64_0.encodeToString(byteArray0);
      base64_0.encode(byteArray0, (int) (byte)0, (int) (byte) (-1));
      int int0 = 1;
      int int1 = 0;
      try { 
        base64_0.encode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Base64 base64_0 = new Base64((-574));
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      base64_0.encode(byteArray0);
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("AAAAAAA", string0);
      
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte)0;
      base64_0.encode(byteArray0, (int) (byte)95, (-725));
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
      
      base64_0.encode(byteArray1, 2744, 2744);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      Base64.discardWhitespace(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte)1;
      byteArray1[3] = (byte)1;
      byteArray1[4] = (byte)1;
      Base64 base64_0 = new Base64((byte)1, byteArray1);
      base64_0.encode(byteArray0);
      Object object0 = new Object();
      Base64.decodeBase64(byteArray1);
      base64_0.decode(byteArray1, 0, (int) (byte)0);
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-2964), byteArray0);
      base64_0.readResults(byteArray0, 51, 51);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-116);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)120;
      byteArray0[8] = (byte)0;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [M\u0000\u0000\u0000\uFFFD\uFFFD\u0000x\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)63;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      assertArrayEquals(new byte[] {(byte)80, (byte)119, (byte)61, (byte)61}, byteArray1);
      assertEquals(4, byteArray1.length);
      
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)50;
      byteArray2[1] = (byte)0;
      int int0 = base64_0.readResults(byteArray2, (-1), 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)72;
      Base64.encodeBase64(byteArray0, false, false, (int) (byte)72);
      Base64.encodeBase64(byteArray0, false, false);
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)18;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)31;
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)11;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)11;
      byteArray2[4] = (byte)106;
      byteArray2[5] = (byte)72;
      byteArray2[6] = (byte)63;
      byteArray2[7] = (byte)63;
      byteArray2[8] = (byte)18;
      base64_0.encodeToString(byteArray2);
      byteArray0[7] = (byte)0;
      base64_0.encode(byteArray0, 70, (int) (byte)0);
      base64_0.readResults(byteArray0, 2911, 119);
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray1);
      assertEquals(19, byteArray3.length);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray4 = Base64.encodeInteger(bigInteger0);
      assertEquals(0, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      byte byte0 = (byte)115;
      byteArray0[4] = (byte)115;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)7;
      Base64.encodeBase64(byteArray0, true, true, (int) (byte)32);
      Base64 base64_0 = new Base64();
      String string0 = "";
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-45);
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte) (-14);
      byteArray0[5] = (byte) (-48);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)1;
      base64_0.decode(byteArray0, (int) (byte) (-48), (int) (byte)0);
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Base64 base64_0 = new Base64(3350);
      byte[] byteArray0 = new byte[4];
      Base64.decodeBase64("Px*v#iAw)x>j4n");
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte) (-2);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 3350, (int) (byte)88);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3350
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)15;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(true);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.bitCount();
      bigInteger0.shiftLeft((byte) (-1));
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      assertEquals(0, byteArray3.length);
      
      base64_0.readResults(byteArray2, (byte)15, (-1266));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)15}, byteArray2);
      assertEquals(3, byteArray2.length);
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray0);
      assertEquals(4, byteArray4.length);
      
      byte[] byteArray5 = Base64.decodeBase64(byteArray1);
      assertEquals(6, byteArray1.length);
      assertEquals(3, byteArray5.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)15}, byteArray5);
      
      Base64.isBase64("\"bbG=D");
      byte[] byteArray6 = new byte[1];
      byteArray6[0] = (byte) (-1);
      byte[] byteArray7 = Base64.decodeBase64(byteArray6);
      assertEquals(0, byteArray7.length);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-58);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)45;
      Base64.encodeBase64(byteArray0, false);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)113;
      base64_0.encode(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)99, (byte)81, (byte)61, (byte)61}, byteArray2);
      
      byte[] byteArray3 = base64_0.decode("org.apache.commons.codec.EncoderException");
      //  // Unstable assertion: assertEquals(27, byteArray3.length);
      
      String string0 = base64_0.encodeToString(byteArray1);
      //  // Unstable assertion: assertEquals("cQ==\uFFFD\uFFFD", string0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      //  // Unstable assertion: assertEquals(10, byteArray1.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)121, (byte)81, (byte)77, (byte)65, (byte)65, (byte)81, (byte)61, (byte)61, (byte) (-8), (byte) (-101)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)35;
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false);
      Base64 base64_0 = new Base64((byte)35);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)73, (byte)119}, byteArray2);
      
      base64_0.encode(byteArray1, (int) (byte)35, 0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      //  // Unstable assertion: assertEquals(0, byteArray3.length);
      
      boolean boolean0 = base64_0.hasData();
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray1);
      //  // Unstable assertion: assertEquals((short)35, bigInteger1.shortValue());
      
      byte[] byteArray4 = new byte[4];
      byteArray4[0] = (byte)35;
      byteArray4[1] = (byte)35;
      byteArray4[2] = (byte)35;
      byteArray4[3] = (byte)35;
      String string0 = Base64.encodeBase64String(byteArray4);
      //  // Unstable assertion: assertEquals("IyMjIw==", string0);
      
      boolean boolean1 = Base64.isBase64("org.apache.commons.codec.EncoderException");
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      
      byte[] byteArray5 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)73, (byte)119, (byte)61, (byte)61, (byte) (-8), (byte) (-101)}, byteArray5);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte)0;
      Base64 base64_0 = new Base64(0, byteArray0, true);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.encodeInteger(bigInteger0);
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Base64 base64_0 = new Base64(111);
      String string0 = "";
      base64_0.decode("");
      String string1 = "lineSeperator must not contain base64 characters: [";
      byte[] byteArray0 = base64_0.decode("lineSeperator must not contain base64 characters: [");
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = new byte[0];
      base64_0.decode(byteArray1, 111, (-2024));
      base64_0.decode("");
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger1 = new BigInteger(byteArray2);
      // Undeclared exception!
      try { 
        bigInteger1.shortValueExact();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger out of short range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)6;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)116;
      byte byte1 = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-104);
      byteArray0[5] = (byte)0;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(890, byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000\uFFFDt\u0000\uFFFD\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)1;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)68, (byte)115, (byte)66, (byte) (-8), (byte) (-101)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Base64.encodeBase64String((byte[]) null);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      String string0 = "[C2lI[Y'3iPov43";
      Base64.isBase64("[C2lI[Y'3iPov43");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)95;
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte)123;
      byteArray0[8] = (byte)100;
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte) (-93), byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD>\uFFFD\u0000\u0000_\b{d]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)44;
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("ACw", string0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      Base64.decodeBase64("");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)50;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      Base64.encodeBase64(byteArray0, true, true);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.valueOf(0L);
      bigInteger0.isProbablePrime((byte)49);
      bigInteger0.add(bigInteger1);
      // Undeclared exception!
      try { 
        bigInteger0.and((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-65);
      byteArray0[8] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertEquals(12, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte) (-101);
      Base64 base64_0 = new Base64((-377), byteArray0, false);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-101);
      byteArray1[1] = (byte) (-8);
      byteArray1[2] = (byte) (-101);
      byteArray1[3] = (byte) (-8);
      byteArray1[4] = (byte) (-101);
      byte[] byteArray2 = base64_0.decode(byteArray1);
      assertEquals(0, byteArray2.length);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)53;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(false);
      base64_0.decode(byteArray1);
      base64_0.encodeToString(byteArray0);
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      int int0 = base64_0.avail();
      assertEquals(0, int0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte) (-50);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(1, byteArray1.length);
      
      base64_0.decode(byteArray0, 1478, (int) (byte) (-50));
      base64_0.decode((Object) "|S<mh~%6NwPZ^7Z@");
      base64_0.hasData();
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)127;
      byte[] byteArray3 = new byte[3];
      byteArray3[0] = (byte) (-50);
      byteArray3[1] = (byte) (-50);
      byteArray3[2] = (byte)0;
      byte[] byteArray4 = base64_0.decode(byteArray3);
      byteArray2[1] = (byte) (-58);
      byte[] byteArray5 = Base64.encodeBase64(byteArray2, false, false);
      assertArrayEquals(new byte[] {(byte)102, (byte)56, (byte)89, (byte)61}, byteArray5);
      
      byte[] byteArray6 = base64_0.decode("|S<mh~%6NwPZ^7Z@");
      assertArrayEquals(new byte[] {(byte)74, (byte)104, (byte)122, (byte)55, (byte)3, (byte) (-39), (byte) (-19)}, byteArray6);
      assertEquals(7, byteArray6.length);
      
      base64_0.decode(byteArray4, 1168, (-2536));
      assertNotSame(byteArray4, byteArray3);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-34);
      Base64 base64_0 = new Base64(0, byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      assertArrayEquals(new byte[] {(byte)119, (byte)100, (byte)52, (byte)61}, byteArray2);
      
      base64_0.decode(byteArray0);
      base64_0.avail();
      byte[] byteArray3 = Base64.decodeBase64("{S");
      base64_0.encode(byteArray3, (int) (byte) (-34), (int) (byte) (-63));
      assertEquals(0, byteArray3.length);
      assertArrayEquals(new byte[] {}, byteArray3);
  }
}
