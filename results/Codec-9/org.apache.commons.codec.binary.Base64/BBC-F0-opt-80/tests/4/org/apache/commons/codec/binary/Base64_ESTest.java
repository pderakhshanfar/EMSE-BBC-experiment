/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:14:22 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      Base64 base64_0 = new Base64(995);
      base64_0.encode(byteArray0, 1, 10);
      base64_0.encode(byteArray0, 995, (-682));
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      BigInteger bigInteger0 = new BigInteger(7760, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      bigInteger0.longValue();
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      Base64 base64_1 = new Base64(7);
      byte[] byteArray2 = base64_1.encode(byteArray1);
      byte[] byteArray3 = base64_1.encode(byteArray2);
      base64_0.decode(byteArray3);
      base64_0.encode(byteArray1);
      // Undeclared exception!
      base64_0.decode(byteArray3);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      BigInteger bigInteger0 = new BigInteger(7760, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      bigInteger0.longValue();
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      Base64 base64_1 = new Base64(7);
      byte[] byteArray2 = base64_1.encode(byteArray1);
      byte[] byteArray3 = base64_1.encode(byteArray2);
      byte[] byteArray4 = base64_0.decode(byteArray3);
      base64_0.encode(byteArray1);
      base64_0.decode(byteArray4, 1995, 76);
      // Undeclared exception!
      Base64.decodeInteger(byteArray4);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(1431655765, mockRandom0);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      base64_0.encode(byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.encode(byteArray1);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte) (-1);
      byteArray2[1] = (byte) (-1);
      byteArray2[2] = (byte) (-1);
      byteArray2[3] = (byte) (-1);
      byteArray2[4] = (byte) (-1);
      base64_0.decode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      BigInteger bigInteger0 = new BigInteger(7760, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      mockRandom0.setSeed(7760);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      // Undeclared exception!
      Base64.encodeBase64(byteArray4, false, true);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      BigInteger bigInteger0 = new BigInteger(7760, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      mockRandom0.setSeed(7760);
      bigInteger0.longValue();
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      Base64 base64_1 = new Base64(7);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray2 = base64_1.encode(byteArray1);
      Base64.encodeBase64(byteArray2, true);
      Base64 base64_2 = new Base64((-3035));
      // Undeclared exception!
      Base64.encodeBase64URLSafe(byteArray2);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      BigInteger bigInteger0 = new BigInteger(7760, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      mockRandom0.setSeed(7760);
      bigInteger0.longValue();
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray1);
      Base64.encodeBase64String(byteArray1);
      Base64 base64_1 = new Base64(7);
      byte[] byteArray2 = base64_1.encode(byteArray1);
      // Undeclared exception!
      Base64.encodeBase64(byteArray2, true);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      BigInteger bigInteger0 = new BigInteger(7760, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      mockRandom0.setSeed(7760);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      bigInteger0.longValue();
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray1);
      Base64.encodeBase64(byteArray2, true);
      Base64 base64_1 = new Base64(61);
      // Undeclared exception!
      base64_1.encode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)9;
      byteArray1[1] = (byte) (-17);
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.discardWhitespace(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 81);
      Base64 base64_0 = new Base64((-96), byteArray1, true);
      Object object0 = base64_0.decode((Object) "encodeInteger called with null parameter");
      // Undeclared exception!
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      byteArray0[0] = (byte)59;
      byteArray0[6] = (byte)59;
      byteArray0[7] = (byte)59;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray1, (int) (byte)6, (int) (byte)6);
      base64_0.readResults(byteArray0, (byte)6, (byte)59);
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-19);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true, (int) (byte)6);
      Base64.discardWhitespace(byteArray1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)61;
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte)0;
      byte byte1 = (byte) (-25);
      byteArray0[3] = (byte) (-25);
      Base64.decodeInteger(byteArray0);
      Base64.isBase64((byte)61);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(2328, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [=\uFFFD\u0000\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(2096, mockRandom0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64(false);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 1, 2386);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 258
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0, 0, 3491);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)25;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)19;
      byteArray1[3] = (byte)30;
      byteArray1[4] = (byte) (-94);
      byteArray1[5] = (byte) (-82);
      byteArray1[6] = (byte) (-36);
      byteArray1[7] = (byte)123;
      Base64.isBase64((byte) (-36));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(2096, mockRandom0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.pow(55);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64.decodeBase64(byteArray1);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      Base64.encodeBase64(byteArray2, false, false);
      Base64.encodeBase64String(byteArray1);
      Base64 base64_0 = new Base64(false);
      base64_0.decode("QVFBQUFBSUFBQUFEQUFBQUJBQUFBQVVBQUFBR0FBQUFCd0FBQUFnQUFBQUpBQUFBQ2dBQUFBc0FBQUFNQUFBQURRQUFBQTRBQUFBUEFBQUFFQUFBQUJFQUFBQVNBQUFBRXdBQUFCUUFBQUFWQUFBQUZnQUFBQmNBQUFBWUFBQUFHUUFBQUJvQUFBQWJBQUFBSEFBQUFCMEFBQUFlQUFBQUh3QUFBQ0FBQUFBaEFBQUFJZ0FBQUNNQUFBQWtBQUFBSlFBQUFDWUFBQUFuQUFBQUtBQUFBQ2tBQUFBcUFBQUFLd0FBQUN3QUFBQXRBQUFBTGdBQUFDOEFBQUF3QUFBQU1RQUFBRElBQUFBekFBQUFOQUFBQURVQUFBQTJBQUFBTndBQUFEZ0FBQUE1QUFBQU9nQUFBRHNBQUFBOEFBQUFQUUFBQUQ0QUFBQS9BQUFBUUFBQUFFRUE=");
      Base64.discardWhitespace(byteArray2);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)76;
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)84;
      byteArray1[1] = (byte) (-89);
      byteArray1[2] = (byte)94;
      byteArray1[3] = (byte) (-1);
      byteArray1[4] = (byte)104;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      Base64 base64_1 = new Base64();
      Base64.toIntegerBytes(bigInteger0);
      base64_1.decode(byteArray2, 0, 328);
      Base64.isBase64(byteArray1);
      try { 
        base64_0.encode((Object) base64_1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      byteArray0[4] = (byte) (-121);
      byteArray0[1] = (byte) (-76);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      BigInteger bigInteger0 = new BigInteger(2719, mockRandom0);
      BigInteger bigInteger1 = bigInteger0.pow(123);
      Base64.encodeInteger(bigInteger0);
      Base64.decodeBase64(byteArray0);
      byteArray0[2] = (byte) (-1);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte) (-76);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      BigInteger bigInteger0 = new BigInteger(2719, mockRandom0);
      bigInteger0.pow(123);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      Base64.decodeBase64(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, true, true);
      //  // Unstable assertion: assertEquals(624, byteArray3.length);
      //  // Unstable assertion: assertEquals(456, byteArray1.length);
      
      String string0 = Base64.encodeBase64String(byteArray2);
      //  // Unstable assertion: assertEquals("", string0);
      
      base64_0.decode((Object) "");
      Base64 base64_1 = new Base64((byte) (-8));
      byte[] byteArray4 = base64_0.encode(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)104, (byte)55, (byte)81, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte) (-1), (byte)10}, byteArray4);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte) (-76);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      BigInteger bigInteger0 = new BigInteger(2719, mockRandom0);
      bigInteger0.pow(123);
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byteArray0[2] = (byte) (-1);
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64(byteArray1, true, true);
      Base64.encodeBase64String(byteArray2);
      base64_0.decode((Object) "");
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte)15;
      Base64.encodeBase64URLSafe(byteArray1);
      byteArray0[5] = (byte)123;
      base64_0.encode(byteArray0);
      try { 
        base64_0.decode((Object) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      Base64 base64_1 = new Base64(76, byteArray0);
      base64_1.decode(byteArray0, (int) (byte) (-1), (int) (byte) (-1));
      base64_0.encode(byteArray0, 76, (-2440));
      boolean boolean0 = base64_0.hasData();
      assertTrue(boolean0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-1);
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte)59;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray1, (int) (byte)6, 1932);
      assertEquals(12, byteArray1.length);
      
      base64_0.encode(byteArray0, (int) (byte)59, (int) (byte)59);
      int int0 = base64_0.avail();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      Base64 base64_0 = new Base64(3064, byteArray0);
      base64_0.encode((byte[]) null, (int) (byte) (-1), (int) (byte) (-1));
      assertFalse(base64_0.isUrlSafe());
      
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, (-520), 76);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte)59;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray1, (int) (byte)6, 1932);
      base64_0.decode(byteArray1, 112, (int) (byte)59);
      base64_0.encodeToString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = base64_0.decode("encodeInteger called with null parameter");
      byte[] byteArray1 = new byte[2];
      byteArray1[1] = (byte) (-77);
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger0.and(bigInteger1);
      Base64.encodeInteger(bigInteger0);
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Base64.encodeBase64URLSafeString((byte[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-111);
      Base64 base64_0 = new Base64((byte) (-111), byteArray0);
      Base64 base64_1 = new Base64(28);
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray0, 1, 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64(64);
      Base64 base64_2 = new Base64();
      byte[] byteArray0 = base64_2.decode("org.apache.commons.codec.DecoderException");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      base64_0.encodeToString(byteArray1);
      Base64.decodeInteger(byteArray1);
      Base64.decodeInteger(byteArray1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Base64 base64_0 = new Base64(15);
      byte[] byteArray0 = base64_0.decode("?1Jfn2PP6PBNB`$");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      base64_0.encodeToString(byteArray1);
      base64_0.decode(byteArray1, 1, 5);
      BigInteger bigInteger0 = BigInteger.ZERO;
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64(64);
      Base64 base64_2 = new Base64();
      byte[] byteArray0 = base64_2.decode("org.apache.commons.codec.DecoderException");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      base64_0.encodeToString(byteArray1);
      // Undeclared exception!
      try { 
        base64_1.decode(byteArray0, 1, 8184);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 27
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)9;
      Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_1 = new Base64((-552));
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = base64_0.decode("Parameter supplied to Base64 decode is not a byte[] or a String");
      assertEquals(37, byteArray2.length);
      
      byte[] byteArray3 = Base64.discardWhitespace(byteArray0);
      assertEquals(3, byteArray3.length);
      
      boolean boolean0 = Base64.isBase64(byteArray1);
      assertArrayEquals(new byte[] {(byte)65, (byte)69, (byte)86, (byte)75, (byte)67, (byte)81}, byteArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte)22;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)22;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_1 = new Base64(false);
      // Undeclared exception!
      try { 
        base64_1.decode(byteArray1, (int) (byte)0, 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Base64.isBase64((byte)66);
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-68), byteArray0, true);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)66;
      byteArray1[1] = (byte) (-12);
      byteArray1[2] = (byte)66;
      byteArray1[3] = (byte)66;
      byteArray1[4] = (byte)66;
      byteArray1[5] = (byte)66;
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      boolean boolean0 = Base64.isBase64((byte)123);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64(3064, byteArray0, true);
      base64_0.encodeToString((byte[]) null);
      Base64.isBase64((byte)1);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)1;
      byteArray2[1] = (byte)1;
      byteArray2[2] = (byte)1;
      byteArray2[3] = (byte)1;
      byteArray2[4] = (byte)1;
      byteArray2[5] = (byte)1;
      Base64.decodeInteger(byteArray2);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)0;
      Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)22;
      Base64.decodeBase64("UTF-16BE");
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 255, (int) (byte)22);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = base64_0.decode("ISO-8859-1");
      base64_0.decode("AAAA");
      Base64.isBase64(byteArray0);
      base64_0.readResults(byteArray2, 3441, (-2973));
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.decodeBase64(byteArray2);
      BigInteger bigInteger1 = bigInteger0.negate();
      BigInteger bigInteger2 = BigInteger.TEN;
      BigInteger bigInteger3 = bigInteger2.shiftLeft(45);
      byte[] byteArray3 = new byte[4];
      byteArray3[0] = (byte)76;
      byteArray3[1] = (byte)82;
      byteArray3[2] = (byte)82;
      byteArray3[3] = (byte) (-119);
      BigInteger bigInteger4 = new BigInteger(byteArray3);
      bigInteger0.or(bigInteger4);
      byte[] byteArray4 = Base64.toIntegerBytes(bigInteger1);
      base64_0.decode(byteArray4);
      Base64.toIntegerBytes(bigInteger3);
      Base64.encodeInteger(bigInteger4);
      Base64.decodeBase64(byteArray3);
      Base64.isArrayByteBase64(byteArray3);
      Base64.decodeBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Base64.isBase64((byte) (-6));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte) (-6);
      byteArray0[5] = (byte) (-6);
      byteArray0[6] = (byte) (-6);
      byteArray0[7] = (byte) (-6);
      byteArray0[8] = (byte) (-6);
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      base64_0.decode((String) null);
      base64_0.decode((String) null);
      Base64.isBase64(byteArray1);
      base64_0.readResults((byte[]) null, (byte) (-6), (byte) (-6));
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.decodeBase64((byte[]) null);
      bigInteger0.negate();
      bigInteger0.shiftLeft(76);
      BigInteger bigInteger1 = null;
      try {
        bigInteger1 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)82;
      Base64 base64_0 = new Base64(false);
      Object object0 = new Object();
      Object object1 = base64_0.decode((Object) "LE#0nNJ9aJJFAr:ZdIV");
      Object object2 = base64_0.encode(object1);
      base64_0.decode(object2);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)0;
      Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)22;
      byteArray1[2] = (byte)82;
      byteArray1[3] = (byte)98;
      byteArray1[4] = (byte)22;
      byteArray1[5] = (byte)82;
      byteArray1[6] = (byte)22;
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)98;
      byteArray2[2] = (byte) (-91);
      byteArray2[3] = (byte)22;
      byteArray2[4] = (byte)82;
      byteArray2[5] = (byte)82;
      Base64.decodeInteger(byteArray2);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, 0, (int) (byte)22);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64.discardWhitespace(byteArray0);
      Base64.isBase64(byteArray1);
      Base64 base64_0 = new Base64(123);
      Base64.decodeBase64("");
      base64_0.decode("R+VExR'4G _");
      Base64.discardWhitespace(byteArray1);
      Base64.isBase64("R+VExR'4G _");
      Base64.isBase64((byte)1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)82;
      byteArray2[1] = (byte)75;
      byteArray2[2] = (byte) (-78);
      byteArray2[3] = (byte)117;
      byteArray2[4] = (byte)3;
      byteArray2[5] = (byte)3;
      byteArray2[6] = (byte) (-57);
      Base64.discardWhitespace(byteArray2);
      Base64.isBase64(byteArray1);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.shortValueExact();
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Base64.encodeBase64URLSafeString((byte[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)46;
      Base64 base64_0 = new Base64((byte) (-1), (byte[]) null);
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, 10, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64URLSafeString((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      assertEquals(0, byteArray2.length);
      
      boolean boolean0 = Base64.isBase64(byteArray1);
      assertTrue(boolean0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(1, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Base64.isBase64((byte)48);
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-1855), byteArray0, true);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)48;
      byteArray1[1] = (byte)48;
      byteArray1[2] = (byte)48;
      byteArray1[3] = (byte)48;
      byteArray1[4] = (byte)48;
      byteArray1[5] = (byte)48;
      base64_0.readResults(byteArray0, (byte)48, 56);
      byteArray1[6] = (byte)48;
      byteArray1[7] = (byte)48;
      byteArray1[8] = (byte)48;
      base64_0.readResults(byteArray1, (-329), (byte)48);
      base64_0.readResults(byteArray0, (-1855), (-1855));
      Base64.decodeInteger(byteArray0);
      base64_0.isUrlSafe();
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte) (-98);
      byteArray2[1] = (byte)48;
      byteArray2[2] = (byte)48;
      byteArray2[3] = (byte)48;
      byteArray2[4] = (byte)48;
      byteArray2[5] = (byte)48;
      byteArray2[6] = (byte)48;
      byteArray2[7] = (byte)48;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray2, true, true, (-3312));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of -3312
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      assertEquals(0, byteArray2.length);
      
      boolean boolean0 = Base64.isBase64(byteArray1);
      assertEquals(0, byteArray1.length);
      assertTrue(boolean0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(1, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)81;
      Base64.discardWhitespace(byteArray0);
      byte[] byteArray1 = new byte[6];
      Base64.encodeBase64(byteArray1, false, false);
      Base64.encodeBase64(byteArray0, true, true, 3859);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.intValue();
      bigInteger0.intValueExact();
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_1 = new Base64((-144), byteArray1);
      byte[] byteArray2 = base64_1.decode("I");
      Base64.isBase64("M}Xs:%3");
      Base64.encodeBase64URLSafe(byteArray2);
      Base64.encodeBase64String((byte[]) null);
      base64_1.readResults(byteArray1, (-1), (-1));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)0;
      Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)22;
      byteArray1[3] = (byte)98;
      Object object0 = new Object();
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)81;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)81;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte) (-55);
      byteArray2[4] = (byte)51;
      byteArray2[5] = (byte)81;
      base64_0.decode(byteArray2, (-1946), (-2835));
      base64_0.decode(byteArray1);
      Base64.isBase64((byte)42);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.intValue();
      Base64.encodeBase64URLSafe(byteArray3);
      Base64.toIntegerBytes(bigInteger1);
      Base64 base64_1 = new Base64(false);
      base64_1.decode(byteArray3);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = null;
      byte[] byteArray1 = Base64.decodeBase64("0K9Z\"G{ZRR");
      int int0 = 1380;
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(1380, (byte[]) null, false);
      base64_0.decode((byte[]) null);
      Base64.encodeBase64(byteArray1);
      base64_0.hasData();
      Base64.encodeBase64(byteArray1, false, false, 64);
      base64_0.decode("f<Y");
      Base64.encodeBase64URLSafe((byte[]) null);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Base64.encodeBase64URLSafeString((byte[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)16;
      Base64 base64_0 = new Base64(false);
      base64_0.decode("org.apache.commons.codec.binary.StringUtils");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      base64_0.encodeToString(byteArray0);
      Base64.encodeBase64Chunked(byteArray1);
      Base64.decodeBase64("org.apache.commons.codec.binary.StringUtils");
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Base64.decodeBase64((String) null);
      Base64.encodeBase64((byte[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)0;
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64((byte[]) null, true);
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.decodeBase64("US-ASCII");
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)34;
      byteArray1[1] = (byte)34;
      byteArray1[2] = (byte)34;
      byteArray1[3] = (byte)0;
      Base64.decodeInteger(byteArray1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64.decodeBase64((String) null);
      base64_0.decode((byte[]) null);
      Base64.encodeBase64((byte[]) null, true, false);
      Base64.encodeBase64((byte[]) null, false, false, 61);
      base64_0.encode((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.intValue();
      bigInteger0.intValueExact();
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = base64_0.decode(byteArray1);
      base64_0.decode((Object) "");
      base64_0.hasData();
      BigInteger bigInteger1 = new BigInteger(byteArray2);
      BigInteger bigInteger2 = BigInteger.ZERO;
      bigInteger2.shiftLeft(68);
      bigInteger1.bitCount();
      Base64.encodeInteger(bigInteger1);
      try { 
        base64_0.encode((Object) bigInteger1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)0;
      Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)22;
      byteArray1[2] = (byte)82;
      byteArray1[3] = (byte)98;
      byteArray1[4] = (byte)22;
      byteArray1[5] = (byte)82;
      byteArray1[6] = (byte)22;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, 0, (int) (byte)22);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Base64 base64_0 = new Base64(1);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)29;
      byteArray1[3] = (byte) (-1);
      byteArray1[4] = (byte)117;
      byteArray1[5] = (byte) (-1);
      byteArray1[6] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray1);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray2 = Base64.decodeBase64("m|\"EX");
      Base64.discardWhitespace(byteArray2);
      base64_0.decode("");
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, true);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray3, (int) (byte)16, (int) (byte)29);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Base64.isBase64((byte)39);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)39;
      Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      base64_0.hasData();
      base64_0.encode(byteArray1, (int) (byte)39, (-1645));
      base64_0.avail();
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)39;
      byteArray2[1] = (byte)39;
      byteArray2[2] = (byte) (-9);
      byteArray2[3] = (byte)39;
      byteArray2[4] = (byte)39;
      byteArray2[5] = (byte)39;
      byteArray2[6] = (byte)39;
      byteArray2[7] = (byte)39;
      byteArray2[8] = (byte)39;
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray2, (byte)39, 670);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.intValue();
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 0, 7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64URLSafeString((byte[]) null);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)39;
      byteArray1[1] = (byte)16;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      Base64.isBase64("");
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (int) (byte)0, 26);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Base64 base64_0 = new Base64((-1));
      byte[] byteArray0 = new byte[0];
      base64_0.decode(byteArray0, (-1), (-1));
      base64_0.encodeToString(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      base64_0.isUrlSafe();
      Base64.encodeBase64(byteArray0, false, true);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)8;
      byteArray1[4] = (byte)0;
      Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray2 = base64_0.decode("hYY9D`k!h");
      Base64.discardWhitespace(byteArray2);
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Base64 base64_0 = new Base64((-1));
      byte[] byteArray0 = new byte[0];
      base64_0.decode(byteArray0, (-1), (-1));
      base64_0.encode(byteArray0, (-1), 494);
      base64_0.encodeToString(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.isBase64("");
      Base64.encodeBase64(byteArray0, false, true);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      base64_0.encode(byteArray1, (-1428), (int) (byte)0);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-30);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)1;
      Base64.encodeBase64URLSafe(byteArray1);
      base64_0.decode("");
      int int0 = 1;
      Base64.isBase64("");
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (-928), (int) (byte)16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -928
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte) (-71);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-70);
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte) (-82);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64.decodeInteger(byteArray1);
      Base64.isBase64((byte) (-115));
      Base64.encodeBase64(byteArray0, true);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      String string0 = "";
      byte[] byteArray0 = Base64.decodeBase64("");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 91);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray2 = new byte[0];
      Base64.encodeBase64Chunked(byteArray2);
      int int0 = 0;
      base64_0.readResults(byteArray2, 0, 0);
      Base64.decodeInteger(byteArray0);
      Base64.encodeBase64String(byteArray2);
      Base64.decodeInteger(byteArray0);
      base64_0.encodeToString(byteArray0);
      base64_0.encode(byteArray2);
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, false, true, 0);
      base64_0.decode(byteArray3, 0, 0);
      Base64.encodeBase64(byteArray1, false);
      base64_0.encodeToString(byteArray2);
      Base64.encodeBase64(byteArray2, true, true);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 2188, 91);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2188
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Base64 base64_0 = new Base64(1);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      base64_0.encode(byteArray0, (int) (byte)0, 1);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.decode((byte[]) null);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-49);
      byteArray0[0] = (byte) (-49);
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Base64 base64_0 = new Base64(847);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      Base64.decodeBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 encode is not a byte[]");
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [=\uFFFD\u0699\uFFFD^\uFFFD\u02E9\uFFFDX\uFFFDv\uFFFD\u0001j\u01FA\uFFFD\uFFFD\u0721\u05E2\uFFFDz-i\uFFFD\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      Base64 base64_0 = new Base64(0, byteArray0, false);
      Base64.encodeBase64(byteArray0, false, false);
      Base64.encodeBase64(byteArray0, false);
      boolean boolean0 = Base64.isBase64("Input array too big, the output array would be bigger (");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = base64_0.decode("encodeInteger called with null parameter");
      assertEquals(27, byteArray0.length);
      
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)85;
      byteArray1[1] = (byte) (-77);
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      assertArrayEquals(new byte[] {(byte)86, (byte)98, (byte)77, (byte)61}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte)0;
      base64_0.decode(byteArray0, (int) (byte)1, (int) (byte)63);
      base64_0.decode(byteArray0);
      Base64.isBase64((byte)0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.intValue();
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray0);
      //  // Unstable assertion: assertEquals(7, byteArray2.length);
      
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger1);
      //  // Unstable assertion: assertEquals(0, byteArray3.length);
      
      byte[] byteArray4 = base64_0.decode(byteArray1);
      //  // Unstable assertion: assertEquals(5, byteArray4.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)60, (byte)10}, byteArray1);
      //  // Unstable assertion: assertEquals(9, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)60;
      Base64 base64_0 = new Base64(1199, byteArray0, false);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)60;
      int int0 = base64_0.readResults(byteArray1, 0, 0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)1;
      byteArray1[2] = (byte)82;
      byteArray1[3] = (byte)98;
      byteArray1[4] = (byte)1;
      byteArray1[5] = (byte)82;
      byteArray1[6] = (byte)1;
      base64_0.decode(byteArray1, 0, (int) (byte)1);
      base64_0.encodeToString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      String string0 = Base64.encodeBase64URLSafeString((byte[]) null);
      assertNull(string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertArrayEquals(new byte[] {(byte)39, (byte)16, (byte)0, (byte)0}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(4, byteArray1.length);
      
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)0;
      boolean boolean0 = Base64.isBase64(byteArray2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null, true, false);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte)80;
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64(false);
      base64_0.decode(byteArray0);
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64(byteArray0, true, false);
      Base64.decodeBase64("");
      base64_0.decode(byteArray0);
      String string0 = "?kp]*gNbdNS27";
      Base64 base64_1 = new Base64(true);
      try { 
        base64_1.encode((Object) "F");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Base64 base64_0 = new Base64((-1));
      byte[] byteArray0 = new byte[0];
      base64_0.decode(byteArray0, (-1), (-1));
      base64_0.encode(byteArray0, (-1), 494);
      base64_0.encodeToString(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      base64_0.isUrlSafe();
      Base64.encodeBase64(byteArray0, false, true);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)8;
      byteArray2[3] = (byte)1;
      byteArray2[4] = (byte)0;
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray2);
      byte[] byteArray4 = base64_0.decode("hYY9D`k!h");
      Base64.isBase64("hYY9D`k!h");
      base64_0.encode(byteArray4, 1, (-769));
      Base64.decodeBase64(byteArray0);
      base64_0.isUrlSafe();
      Base64.encodeBase64(byteArray3);
      base64_0.readResults(byteArray1, 1184, (-1526));
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.toString();
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger.valueOf(178L);
      bigInteger1.intValue();
      BigInteger bigInteger2 = bigInteger0.divide(bigInteger1);
      bigInteger2.nextProbablePrime();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.isBase64("0");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      bigInteger0.longValue();
      Base64 base64_0 = new Base64(110);
      Base64.encodeBase64(byteArray2);
      bigInteger0.add(bigInteger2);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, 0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-124);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)118;
      byteArray0[8] = (byte)0;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-1939), byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000\u0000\u0001\u0000\u0000\uFFFD\u0000v\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Base64 base64_0 = new Base64();
      String string0 = null;
      Base64.decodeBase64((String) null);
      base64_0.decode((byte[]) null);
      Base64.encodeBase64((byte[]) null);
      base64_0.hasData();
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.intValue();
      bigInteger0.intValueExact();
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray2 = base64_0.decode("1{&J.L@w31 <H");
      Base64.isBase64("1{&J.L@w31 <H");
      Base64.encodeBase64URLSafe(byteArray1);
      Base64.encodeBase64String(byteArray2);
      base64_0.readResults(byteArray2, (byte)0, (byte)0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)44;
      byteArray0[0] = (byte)44;
      byte byte1 = (byte)92;
      byteArray0[1] = (byte)92;
      byte byte2 = (byte)0;
      byteArray0[2] = (byte)0;
      byte byte3 = (byte)29;
      byteArray0[3] = (byte)29;
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(984, byteArray0, true);
      Base64.encodeBase64URLSafe(byteArray0);
      base64_0.encode(byteArray0, 984, 0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.remainder(bigInteger1);
      Base64.toIntegerBytes(bigInteger0);
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Base64 base64_0 = new Base64((-51));
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Base64.encodeBase64(byteArray1, false, false, (-51));
      Base64.decodeBase64("");
      byteArray0[0] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.decode(byteArray1, (-1), (-3917));
      byte[] byteArray2 = base64_0.decode("g}@Oj'Sx");
      byte[] byteArray3 = base64_0.decode("AA");
      base64_0.readResults(byteArray2, 0, (-585));
      Base64.encodeBase64(byteArray3);
      byte[] byteArray4 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64(byteArray1, true, true, (-900));
      Base64.encodeBase64(byteArray4, true, false, (-585));
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-74);
      Base64.encodeBase64URLSafe(byteArray0);
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)2;
      base64_0.encode(byteArray1, (int) (byte)117, (int) (byte) (-93));
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray1);
      base64_0.decode(byteArray0);
      base64_0.isUrlSafe();
      Object object0 = null;
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)32;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(1, byteArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [/3pvIA==]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-37);
      byteArray0[7] = (byte)3;
      Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-384), byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000\u0001\u0006\u0000t\u0001\uFFFD\u0003]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Base64 base64_0 = new Base64(1467);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-64);
      Base64.encodeBase64(byteArray0, true);
      byte[] byteArray1 = new byte[3];
      Base64.encodeBase64String(byteArray1);
      byteArray1[0] = (byte)1;
      Base64.encodeBase64(byteArray1, false);
      byteArray1[1] = (byte)77;
      byteArray1[2] = (byte)1;
      base64_0.readResults(byteArray1, (byte)77, 0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (-878), (int) (byte)1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -878
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(0, byteArray0, false);
      Base64.decodeBase64("");
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64("");
      Base64.encodeBase64(byteArray1, false, true);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)1;
      byteArray2[1] = (byte) (-1);
      byteArray2[2] = (byte)113;
      byteArray2[3] = (byte) (-23);
      byteArray2[4] = (byte) (-57);
      byteArray2[5] = (byte)11;
      Base64.encodeBase64Chunked(byteArray2);
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, true, true, 0);
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isArrayByteBase64(byteArray4);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64String(byteArray3);
      String string1 = base64_0.encodeToString(byteArray1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      byte byte0 = (byte)39;
      Base64.isBase64((byte)39);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)39;
      Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.decodeBase64(byteArray0);
      base64_0.hasData();
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Base64 base64_0 = new Base64(1);
      Base64.encodeBase64((byte[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)30;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)42;
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("vyAAvgAAHgAq", string0);
      
      byte[] byteArray1 = base64_0.decode("org.apache.commons.codec.EncoderException");
      assertEquals(27, byteArray1.length);
      
      Base64.isBase64((byte) (-101));
      Base64.encodeBase64String((byte[]) null);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64.encodeBase64(byteArray0, false, false, 1321);
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(0, byteArray2.length);
      
      byte[] byteArray3 = new byte[6];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte)32;
      byteArray3[2] = (byte)30;
      byteArray3[3] = (byte)0;
      byteArray3[4] = (byte)0;
      byteArray3[5] = (byte)0;
      base64_0.decode(byteArray3, (-2787), (int) (byte) (-65));
      assertFalse(base64_0.isUrlSafe());
  }
}
