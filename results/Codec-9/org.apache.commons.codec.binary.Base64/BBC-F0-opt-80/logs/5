* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-opt-80
* Going to generate test cases for class: org.apache.commons.codec.binary.Base64
* Starting Client-0
* Connecting to master process on port 19835
* Analyzing classpath: 
  - subjects/buggy-versions/Codec-9/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.codec.binary.Base64
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1539
* Using seed 2798375050
* Starting evolution
bbc usage percentage is: 80%
* Initial Number of Goals in DynaMOSA = 419 / 1539
* Search finished after 603s and 126 generations, 60145 statements, best individual has fitness: 104.0
* Minimizing test suite
[MASTER] 20:48:36.414 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 98%
* Total number of goals: 216
* Number of covered goals: 212
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 95%
* Total number of goals: 193
* Number of covered goals: 183
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 19
* Number of covered goals: 19
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 95%
* Total number of goals: 787
* Number of covered goals: 748
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 89%
* Total number of goals: 80
* Number of covered goals: 71
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 35
* Number of covered goals: 35
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 35
* Number of covered goals: 35
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 88%
* Total number of goals: 193
* Number of covered goals: 169
* Generated 82 tests with total length 1225
* Resulting test suite's coverage: 89% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 20:49:18.198 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6851% of time used, but only 36/82 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 45%
* Compiling and checking tests
[MASTER] 20:49:39.969 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:40.172 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:40.364 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:40.519 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:40.649 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:40.818 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:40.984 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:41.087 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:41.284 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:41.399 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:41.503 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:41.608 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:41.677 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:41.796 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:41.801 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [6]; expected:<60> but was:<13>
[MASTER] 20:49:41.802 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[4];
byteArray0[0] = (byte) (-50);
byteArray0[1] = (byte) (-7);
byteArray0[2] = (byte)1;
byteArray0[3] = (byte)76;
byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
Base64 base64_0 = new Base64();
Base64.encodeBase64Chunked(byteArray1);
assertArrayEquals(new byte[] {(byte)122, (byte)118, (byte)107, (byte)66, (byte)84, (byte)65, (byte)60, (byte) (-98)}, byteArray1);

byte[] byteArray2 = new byte[4];
byteArray2[0] = (byte)1;
byteArray2[1] = (byte)76;
byteArray2[2] = (byte) (-50);
byteArray2[3] = (byte)76;
base64_0.encode(byteArray2, (int) (byte)1, (int) (byte) (-50));
boolean boolean0 = base64_0.isUrlSafe();
assertFalse(boolean0);

base64_0.decode((Object) "T");
base64_0.decode(byteArray0, 2491, (int) (byte) (-7));
String string0 = Base64.encodeBase64String(byteArray0);
assertEquals("zvkBTA==", string0);


[MASTER] 20:49:41.940 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:42.088 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:42.089 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [4]; expected:<60> but was:<13>
[MASTER] 20:49:42.090 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64 base64_0 = new Base64(1248);
byte[] byteArray0 = new byte[0];
byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
byte[] byteArray2 = new byte[1];
byte[] byteArray3 = base64_0.encode(byteArray2);
assertEquals(6, byteArray3.length);

base64_0.decode(byteArray2, 0, 1248);
byte[] byteArray4 = Base64.encodeBase64(byteArray2, true);
assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61, (byte)60, (byte) (-98)}, byteArray4);

byteArray2[0] = (byte)84;
byte[] byteArray5 = Base64.encodeBase64(byteArray2, false, true, 1248);
base64_0.readResults(byteArray2, (byte)84, 1492);
byte[] byteArray6 = Base64.encodeBase64(byteArray5, true, false);
assertArrayEquals(new byte[] {(byte)86, (byte)107, (byte)69, (byte)61, (byte)60, (byte) (-98)}, byteArray6);

byte[] byteArray7 = Base64.decodeBase64("o");
assertEquals(0, byteArray7.length);

base64_0.encode(byteArray0, (int) (byte)84, (-1373));
base64_0.isUrlSafe();
Base64.encodeBase64(byteArray1);
assertSame(byteArray0, byteArray1);


[MASTER] 20:49:42.187 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:42.288 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:42.380 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:42.455 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:42.653 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:42.654 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [8]; expected:<60> but was:<13>
[MASTER] 20:49:42.654 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64 base64_0 = new Base64(true);
byte[] byteArray0 = new byte[4];
byteArray0[0] = (byte) (-96);
byteArray0[1] = (byte)0;
byteArray0[2] = (byte) (-118);
byteArray0[3] = (byte)6;
byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
byte[] byteArray2 = new byte[1];
byteArray2[0] = (byte)96;
base64_0.readResults(byteArray2, (byte)96, (byte)96);
byte[] byteArray3 = base64_0.decode("r,>b>GrH");
Base64.isBase64(byteArray3);
assertEquals(3, byteArray3.length);
assertArrayEquals(new byte[] {(byte) (-83), (byte) (-79), (byte) (-85)}, byteArray3);

byte[] byteArray4 = Base64.encodeBase64(byteArray1, true, false);
assertEquals(10, byteArray4.length);
assertArrayEquals(new byte[] {(byte)98, (byte)48, (byte)70, (byte)68, (byte)83, (byte)48, (byte)74, (byte)110, (byte)60, (byte) (-98)}, byteArray4);


[MASTER] 20:49:42.738 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:42.847 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:42.927 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:42.993 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:43.082 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:43.251 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:43.364 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:43.364 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [8]; expected:<0> but was:<13>
[MASTER] 20:49:43.365 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64 base64_0 = new Base64();
byte[] byteArray0 = new byte[5];
base64_0.decode(byteArray0);
Base64.encodeBase64URLSafe(byteArray0);
byteArray0[0] = (byte)118;
byteArray0[1] = (byte)22;
byteArray0[2] = (byte)0;
byteArray0[3] = (byte)120;
byteArray0[4] = (byte) (-75);
base64_0.encode(byteArray0, (int) (byte) (-75), (-2501));
BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
assertEquals((short)191, bigInteger0.shortValue());

base64_0.decode(byteArray0, 2646, (int) (byte) (-75));
boolean boolean0 = base64_0.hasData();
byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
assertArrayEquals(new byte[] {(byte)100, (byte)104, (byte)89, (byte)65, (byte)101, (byte)76, (byte)85, (byte)61, (byte)0, (byte)0}, byteArray1);

boolean boolean1 = Base64.isBase64(">~v1]%+");
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);


[MASTER] 20:49:43.464 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:43.617 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:43.759 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:43.864 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:44.047 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:44.255 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:44.386 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:44.389 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<...codecEncoderExceptio[  ]> but was:<...codecEncoderExceptio[
]>
[MASTER] 20:49:44.391 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
Base64 base64_0 = new Base64(false);
base64_0.decode((Object) "org.apache.commons.codec.EncoderException");
byte[] byteArray1 = new byte[5];
base64_0.decode("org.apache.commons.codec.EncoderException");
byteArray1[0] = (byte)109;
boolean boolean0 = Base64.isBase64((byte)109);
assertTrue(boolean0);

byte[] byteArray2 = base64_0.decode("org.apache.commons.codec.EncoderException");
BigInteger bigInteger0 = BigInteger.ZERO;
bigInteger0.longValue();
byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
assertEquals(0, byteArray3.length);

String string0 = base64_0.encodeToString(byteArray2);
assertEquals("orgapachecommonscodecEncoderExceptio\u0000\u0000", string0);

byte[] byteArray4 = Base64.decodeBase64("W(F:XmQ-4*m");
assertEquals(6, byteArray4.length);


[MASTER] 20:49:44.452 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:44.518 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:44.588 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:44.602 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [8]; expected:<0> but was:<13>
[MASTER] 20:49:44.603 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte byte0 = (byte)1;
byte byte1 = (byte)76;
byte[] byteArray0 = new byte[6];
byte byte2 = (byte)38;
byteArray0[0] = (byte)38;
byteArray0[1] = (byte)1;
byteArray0[2] = (byte)1;
byteArray0[3] = (byte) (-7);
byteArray0[4] = (byte)1;
byteArray0[5] = (byte) (-7);
byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false);
assertEquals(6, byteArray0.length);
assertEquals(10, byteArray1.length);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertFalse(byteArray1.equals((Object)byteArray0));
assertNotNull(byteArray1);
assertArrayEquals(new byte[] {(byte)38, (byte)1, (byte)1, (byte) (-7), (byte)1, (byte) (-7)}, byteArray0);
assertArrayEquals(new byte[] {(byte)74, (byte)103, (byte)69, (byte)66, (byte)43, (byte)81, (byte)72, (byte)53, (byte)0, (byte)0}, byteArray1);

Base64 base64_0 = new Base64();
assertFalse(base64_0.isUrlSafe());
assertNotNull(base64_0);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);

base64_0.encode(byteArray1, 1, (int) (byte) (-7));
assertFalse(base64_0.isUrlSafe());
assertEquals(6, byteArray0.length);
assertEquals(10, byteArray1.length);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertArrayEquals(new byte[] {(byte)38, (byte)1, (byte)1, (byte) (-7), (byte)1, (byte) (-7)}, byteArray0);
assertArrayEquals(new byte[] {(byte)74, (byte)103, (byte)69, (byte)66, (byte)43, (byte)81, (byte)72, (byte)53, (byte)0, (byte)0}, byteArray1);

boolean boolean0 = base64_0.isUrlSafe();
assertFalse(base64_0.isUrlSafe());
assertFalse(boolean0);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);

byte[] byteArray2 = new byte[7];
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));

byteArray2[0] = (byte)76;
byteArray2[1] = (byte)76;
byteArray2[2] = (byte) (-7);
byteArray2[3] = (byte) (-54);
byteArray2[4] = (byte)1;
byteArray2[5] = (byte) (-7);
byteArray2[6] = (byte)38;
byte[] byteArray3 = base64_0.encode(byteArray2);
assertFalse(base64_0.isUrlSafe());
assertEquals(12, byteArray3.length);
assertEquals(7, byteArray2.length);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray2, byteArray3);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray0);
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertNotNull(byteArray3);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertArrayEquals(new byte[] {(byte)76, (byte)76, (byte) (-7), (byte) (-54), (byte)1, (byte) (-7), (byte)38}, byteArray2);

Object object0 = base64_0.decode((Object) "");
assertFalse(base64_0.isUrlSafe());
assertNotNull(object0);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);

Object object1 = base64_0.decode(object0);
assertFalse(base64_0.isUrlSafe());
assertSame(object0, object1);
assertSame(object1, object0);
assertNotNull(object1);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);

base64_0.decode(byteArray1, (int) (byte)76, (int) (byte)1);

[MASTER] 20:49:44.799 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:44.909 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:45.051 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:45.061 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [4]; expected:<0> but was:<13>
[MASTER] 20:49:45.068 [logback-1] WARN  JUnitAnalyzer - Failing test:
 boolean boolean0 = Base64.isBase64((byte) (-119));
assertFalse(boolean0);

byte[] byteArray0 = new byte[3];
byteArray0[0] = (byte) (-119);
byteArray0[1] = (byte) (-119);
byteArray0[2] = (byte) (-119);
byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false);
assertEquals(3, byteArray0.length);
assertEquals(6, byteArray1.length);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertFalse(byteArray1.equals((Object)byteArray0));
assertNotNull(byteArray1);
assertArrayEquals(new byte[] {(byte) (-119), (byte) (-119), (byte) (-119)}, byteArray0);
assertArrayEquals(new byte[] {(byte)105, (byte)89, (byte)109, (byte)74, (byte)0, (byte)0}, byteArray1);

Base64 base64_0 = new Base64();
assertFalse(base64_0.isUrlSafe());
assertNotNull(base64_0);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);

byte[] byteArray2 = base64_0.decode(byteArray0);
assertFalse(base64_0.isUrlSafe());
assertEquals(3, byteArray0.length);
assertEquals(0, byteArray2.length);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray0);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertNotNull(byteArray2);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertArrayEquals(new byte[] {(byte) (-119), (byte) (-119), (byte) (-119)}, byteArray0);
assertArrayEquals(new byte[] {}, byteArray2);

base64_0.decode(byteArray1, (int) (byte) (-119), 0);
assertFalse(base64_0.isUrlSafe());
assertEquals(3, byteArray0.length);
assertEquals(6, byteArray1.length);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertArrayEquals(new byte[] {(byte) (-119), (byte) (-119), (byte) (-119)}, byteArray0);
assertArrayEquals(new byte[] {(byte)105, (byte)89, (byte)109, (byte)74, (byte)0, (byte)0}, byteArray1);

String string0 = base64_0.encodeToString(byteArray0);
assertFalse(base64_0.isUrlSafe());
assertEquals(3, byteArray0.length);
assertEquals("iYmJ", string0);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertNotNull(string0);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertArrayEquals(new byte[] {(byte) (-119), (byte) (-119), (byte) (-119)}, byteArray0);

byte[] byteArray3 = Base64.decodeBase64("s}I=G~utHaJ");
assertEquals(1, byteArray3.length);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray1);
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray1));
assertNotNull(byteArray3);
assertArrayEquals(new byte[] {(byte) (-80)}, byteArray3);

boolean boolean1 = base64_0.hasData();
assertFalse(base64_0.isUrlSafe());
assertFalse(boolean1);
assertTrue(boolean1 == boolean0);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);

byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray0);
assertEquals(3, byteArray0.length);
assertEquals(6, byteArray4.length);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray4, byteArray3);
assertNotSame(byteArray4, byteArray0);
assertNotSame(byteArray4, byteArray2);
assertNotSame(byteArray4, byteArray1);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray4.equals((Object)byteArray3));
assertFalse(byteArray4.equals((Object)byteArray0));
assertFalse(byteArray4.equals((Object)byteArray2));
assertFalse(byteArray4.equals((Object)byteArray1));
assertNotNull(byteArray4);
assertArrayEquals(new byte[] {(byte) (-119), (byte) (-119), (byte) (-119)}, byteArray0);
assertArrayEquals(new byte[] {(byte)105, (byte)89, (byte)109, (byte)74, (byte)0, (byte)0}, byteArray4);

boolean boolean2 = Base64.isBase64((byte) (-22));
assertFalse(boolean2);
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);

byte[] byteArray5 = base64_0.decode(byteArray1);
assertFalse(base64_0.isUrlSafe());
assertEquals(3, byteArray0.length);
assertEquals(6, byteArray1.length);
assertEquals(3, byteArray5.length);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray5);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray5);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray5, byteArray4);
assertNotSame(byteArray5, byteArray0);
assertNotSame(byteArray5, byteArray3);
assertNotSame(byteArray5, byteArray1);
assertNotSame(byteArray5, byteArray2);
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray4));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray5.equals((Object)byteArray4));
assertFalse(byteArray5.equals((Object)byteArray0));
assertFalse(byteArray5.equals((Object)byteArray3));
assertFalse(byteArray5.equals((Object)byteArray1));
assertFalse(byteArray5.equals((Object)byteArray2));
assertNotNull(byteArray5);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertArrayEquals(new byte[] {(byte) (-119), (byte) (-119), (byte) (-119)}, byteArray0);
assertArrayEquals(new byte[] {(byte)105, (byte)89, (byte)109, (byte)74, (byte)0, (byte)0}, byteArray1);
assertArrayEquals(new byte[] {(byte) (-119), (byte) (-119), (byte) (-119)}, byteArray5);

byte[] byteArray6 = base64_0.decode(byteArray3);
assertFalse(base64_0.isUrlSafe());
assertEquals(1, byteArray3.length);
assertEquals(0, byteArray6.length);
assertNotSame(byteArray3, byteArray5);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray4);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray6);
assertNotSame(byteArray6, byteArray0);
assertNotSame(byteArray6, byteArray4);
assertNotSame(byteArray6, byteArray5);
assertNotSame(byteArray6, byteArray3);
assertNotSame(byteArray6, byteArray2);
assertNotSame(byteArray6, byteArray1);
assertFalse(byteArray3.equals((Object)byteArray5));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray4));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray6.equals((Object)byteArray0));
assertFalse(byteArray6.equals((Object)byteArray4));
assertFalse(byteArray6.equals((Object)byteArray5));
assertFalse(byteArray6.equals((Object)byteArray3));
assertFalse(byteArray6.equals((Object)byteArray2));
assertFalse(byteArray6.equals((Object)byteArray1));
assertNotNull(byteArray6);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertArrayEquals(new byte[] {(byte) (-80)}, byteArray3);
assertArrayEquals(new byte[] {}, byteArray6);

BigInteger bigInteger0 = BigInteger.ZERO;
assertEquals((short)0, bigInteger0.shortValue());
assertEquals((byte)0, bigInteger0.byteValue());
assertNotNull(bigInteger0);

BigInteger bigInteger1 = BigInteger.TEN;
assertEquals((byte)10, bigInteger1.byteValue());
assertEquals((short)10, bigInteger1.shortValue());
assertNotSame(bigInteger1, bigInteger0);
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertNotNull(bigInteger1);

BigInteger bigInteger2 = bigInteger1.nextProbablePrime();
assertEquals((byte)10, bigInteger1.byteValue());
assertEquals((short)10, bigInteger1.shortValue());
assertEquals((byte)11, bigInteger2.byteValue());
assertEquals((short)11, bigInteger2.shortValue());
assertNotSame(bigInteger1, bigInteger2);
assertNotSame(bigInteger1, bigInteger0);
assertNotSame(bigInteger2, bigInteger1);
assertNotSame(bigInteger2, bigInteger0);
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertFalse(bigInteger2.equals((Object)bigInteger1));
assertFalse(bigInteger2.equals((Object)bigInteger0));
assertNotNull(bigInteger2);

BigInteger bigInteger3 = bigInteger0.remainder(bigInteger1);
assertEquals((short)0, bigInteger0.shortValue());
assertEquals((byte)0, bigInteger0.byteValue());
assertEquals((byte)10, bigInteger1.byteValue());
assertEquals((short)10, bigInteger1.shortValue());
assertEquals((short)0, bigInteger3.shortValue());
assertEquals((byte)0, bigInteger3.byteValue());
assertNotSame(bigInteger0, bigInteger2);
assertSame(bigInteger0, bigInteger3);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger2);
assertNotSame(bigInteger1, bigInteger0);
assertNotSame(bigInteger1, bigInteger3);
assertSame(bigInteger3, bigInteger0);
assertNotSame(bigInteger3, bigInteger2);
assertNotSame(bigInteger3, bigInteger1);
assertFalse(bigInteger0.equals((Object)bigInteger2));
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger1.equals((Object)bigInteger2));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertFalse(bigInteger3.equals((Object)bigInteger2));
assertFalse(bigInteger3.equals((Object)bigInteger1));
assertNotNull(bigInteger3);

BigInteger bigInteger4 = bigInteger0.clearBit(0);
assertEquals((short)0, bigInteger0.shortValue());
assertEquals((byte)0, bigInteger0.byteValue());
assertEquals((byte)0, bigInteger4.byteValue());
assertEquals((short)0, bigInteger4.shortValue());
assertNotSame(bigInteger0, bigInteger2);
assertSame(bigInteger0, bigInteger3);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger0, bigInteger4);
assertNotSame(bigInteger4, bigInteger3);
assertNotSame(bigInteger4, bigInteger1);
assertNotSame(bigInteger4, bigInteger2);
assertNotSame(bigInteger4, bigInteger0);
assertFalse(bigInteger0.equals((Object)bigInteger2));
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger4.equals((Object)bigInteger1));
assertTrue(bigInteger4.equals((Object)bigInteger0));
assertFalse(bigInteger4.equals((Object)bigInteger2));
assertTrue(bigInteger4.equals((Object)bigInteger3));
assertNotNull(bigInteger4);

byte[] byteArray7 = Base64.toIntegerBytes(bigInteger0);
assertEquals((short)0, bigInteger0.shortValue());
assertEquals((byte)0, bigInteger0.byteValue());
assertEquals(0, byteArray7.length);
assertNotSame(bigInteger0, bigInteger2);
assertSame(bigInteger0, bigInteger3);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger0, bigInteger4);
assertNotSame(byteArray7, byteArray4);
assertNotSame(byteArray7, byteArray0);
assertNotSame(byteArray7, byteArray2);
assertNotSame(byteArray7, byteArray3);
assertNotSame(byteArray7, byteArray6);
assertNotSame(byteArray7, byteArray5);
assertNotSame(byteArray7, byteArray1);
assertFalse(bigInteger0.equals((Object)bigInteger2));
assertTrue(bigInteger0.equals((Object)bigInteger4));
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(byteArray7.equals((Object)byteArray4));
assertFalse(byteArray7.equals((Object)byteArray0));
assertFalse(byteArray7.equals((Object)byteArray2));
assertFalse(byteArray7.equals((Object)byteArray3));
assertFalse(byteArray7.equals((Object)byteArray6));
assertFalse(byteArray7.equals((Object)byteArray5));
assertFalse(byteArray7.equals((Object)byteArray1));
assertNotNull(byteArray7);
assertArrayEquals(new byte[] {}, byteArray7);

Object object0 = base64_0.decode((Object) "iYmJ");
assertFalse(base64_0.isUrlSafe());
assertNotNull(object0);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);

byte[] byteArray8 = Base64.toIntegerBytes(bigInteger0);
assertEquals((short)0, bigInteger0.shortValue());
assertEquals((byte)0, bigInteger0.byteValue());
assertEquals(0, byteArray8.length);
assertNotSame(bigInteger0, bigInteger2);
assertSame(bigInteger0, bigInteger3);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger0, bigInteger4);
assertNotSame(byteArray8, byteArray4);
assertNotSame(byteArray8, byteArray7);
assertNotSame(byteArray8, byteArray0);
assertNotSame(byteArray8, byteArray3);
assertNotSame(byteArray8, byteArray2);
assertNotSame(byteArray8, byteArray5);
assertNotSame(byteArray8, byteArray1);
assertNotSame(byteArray8, object0);
assertNotSame(byteArray8, byteArray6);
assertFalse(bigInteger0.equals((Object)bigInteger2));
assertTrue(bigInteger0.equals((Object)bigInteger4));
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(byteArray8.equals((Object)byteArray4));
assertFalse(byteArray8.equals((Object)byteArray7));
assertFalse(byteArray8.equals((Object)byteArray0));
assertFalse(byteArray8.equals((Object)byteArray3));
assertFalse(byteArray8.equals((Object)byteArray2));
assertFalse(byteArray8.equals((Object)byteArray5));
assertFalse(byteArray8.equals((Object)byteArray1));
assertFalse(byteArray8.equals((Object)object0));
assertFalse(byteArray8.equals((Object)byteArray6));
assertNotNull(byteArray8);
assertArrayEquals(new byte[] {}, byteArray8);

Base64.isArrayByteBase64((byte[]) null);

[MASTER] 20:49:45.265 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:45.277 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [4]; expected:<0> but was:<13>
[MASTER] 20:49:45.279 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64 base64_0 = new Base64(1248);
assertFalse(base64_0.isUrlSafe());
assertNotNull(base64_0);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);

byte[] byteArray0 = new byte[0];
byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
assertEquals(0, byteArray0.length);
assertEquals(0, byteArray1.length);
assertSame(byteArray0, byteArray1);
assertSame(byteArray1, byteArray0);
assertNotNull(byteArray1);
assertArrayEquals(new byte[] {}, byteArray0);
assertArrayEquals(new byte[] {}, byteArray1);

byte[] byteArray2 = new byte[1];
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));

byte[] byteArray3 = base64_0.encode(byteArray2);
assertFalse(base64_0.isUrlSafe());
assertEquals(1, byteArray2.length);
assertEquals(6, byteArray3.length);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray3);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray0);
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray0));
assertNotNull(byteArray3);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertArrayEquals(new byte[] {(byte)0}, byteArray2);
assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61, (byte)0, (byte)0}, byteArray3);

base64_0.decode(byteArray2, 0, 1248);
assertFalse(base64_0.isUrlSafe());
assertEquals(1, byteArray2.length);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray3);
assertNotSame(byteArray2, byteArray1);
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray1));
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertArrayEquals(new byte[] {(byte)0}, byteArray2);

byte[] byteArray4 = Base64.encodeBase64(byteArray2, true);
assertEquals(1, byteArray2.length);
assertEquals(6, byteArray4.length);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray3);
assertNotSame(byteArray2, byteArray4);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray4, byteArray1);
assertNotSame(byteArray4, byteArray3);
assertNotSame(byteArray4, byteArray0);
assertNotSame(byteArray4, byteArray2);
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray4.equals((Object)byteArray1));
assertFalse(byteArray4.equals((Object)byteArray3));
assertFalse(byteArray4.equals((Object)byteArray0));
assertFalse(byteArray4.equals((Object)byteArray2));
assertNotNull(byteArray4);
assertArrayEquals(new byte[] {(byte)0}, byteArray2);
assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61, (byte)0, (byte)0}, byteArray4);

byteArray2[0] = (byte)84;
byte[] byteArray5 = Base64.encodeBase64(byteArray2, false, true, 1248);
assertEquals(1, byteArray2.length);
assertEquals(2, byteArray5.length);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray3);
assertNotSame(byteArray2, byteArray4);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray5);
assertNotSame(byteArray5, byteArray4);
assertNotSame(byteArray5, byteArray2);
assertNotSame(byteArray5, byteArray1);
assertNotSame(byteArray5, byteArray0);
assertNotSame(byteArray5, byteArray3);
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray4));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray5.equals((Object)byteArray4));
assertFalse(byteArray5.equals((Object)byteArray2));
assertFalse(byteArray5.equals((Object)byteArray1));
assertFalse(byteArray5.equals((Object)byteArray0));
assertFalse(byteArray5.equals((Object)byteArray3));
assertNotNull(byteArray5);
assertArrayEquals(new byte[] {(byte)84}, byteArray2);
assertArrayEquals(new byte[] {(byte)86, (byte)65}, byteArray5);

byte[] byteArray6 = Base64.discardWhitespace(byteArray4);
assertEquals(1, byteArray2.length);
assertEquals(6, byteArray4.length);
assertEquals(6, byteArray6.length);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray3);
assertNotSame(byteArray2, byteArray4);
assertNotSame(byteArray2, byteArray6);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray5);
assertNotSame(byteArray4, byteArray6);
assertNotSame(byteArray4, byteArray1);
assertNotSame(byteArray4, byteArray3);
assertNotSame(byteArray4, byteArray0);
assertNotSame(byteArray4, byteArray5);
assertNotSame(byteArray4, byteArray2);
assertNotSame(byteArray6, byteArray5);
assertNotSame(byteArray6, byteArray2);
assertNotSame(byteArray6, byteArray4);
assertNotSame(byteArray6, byteArray1);
assertNotSame(byteArray6, byteArray0);
assertNotSame(byteArray6, byteArray3);
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray4));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray5));
assertFalse(byteArray4.equals((Object)byteArray1));
assertFalse(byteArray4.equals((Object)byteArray3));
assertFalse(byteArray4.equals((Object)byteArray0));
assertFalse(byteArray4.equals((Object)byteArray5));
assertFalse(byteArray4.equals((Object)byteArray2));
assertFalse(byteArray6.equals((Object)byteArray5));
assertFalse(byteArray6.equals((Object)byteArray2));
assertFalse(byteArray6.equals((Object)byteArray4));
assertFalse(byteArray6.equals((Object)byteArray1));
assertFalse(byteArray6.equals((Object)byteArray0));
assertFalse(byteArray6.equals((Object)byteArray3));
assertNotNull(byteArray6);
assertArrayEquals(new byte[] {(byte)84}, byteArray2);
assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61, (byte)0, (byte)0}, byteArray4);
assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61, (byte)0, (byte)0}, byteArray6);


[MASTER] 20:49:45.376 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:45.463 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:45.464 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [6]; expected:<0> but was:<13>
[MASTER] 20:49:45.465 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64 base64_0 = new Base64();
assertFalse(base64_0.isUrlSafe());
assertNotNull(base64_0);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);

byte[] byteArray0 = new byte[4];
byteArray0[0] = (byte)0;
byteArray0[1] = (byte)0;
int int0 = base64_0.readResults(byteArray0, 76, 8192);
assertFalse(base64_0.isUrlSafe());
assertEquals(4, byteArray0.length);
assertEquals(0, int0);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);

byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
assertEquals(4, byteArray0.length);
assertEquals(8, byteArray1.length);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertFalse(byteArray1.equals((Object)byteArray0));
assertNotNull(byteArray1);
assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)0, (byte)0}, byteArray1);

base64_0.decode(byteArray1, 1206, (int) (byte)0);
assertFalse(base64_0.isUrlSafe());
assertEquals(4, byteArray0.length);
assertEquals(8, byteArray1.length);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)0, (byte)0}, byteArray1);

boolean boolean0 = Base64.isBase64(byteArray1);
assertEquals(4, byteArray0.length);
assertEquals(8, byteArray1.length);
assertFalse(boolean0);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)0, (byte)0}, byteArray1);

String string0 = Base64.encodeBase64URLSafeString(byteArray1);
assertEquals(4, byteArray0.length);
assertEquals(8, byteArray1.length);
assertEquals("QUFBQUFBAAA", string0);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertNotNull(string0);
assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)0, (byte)0}, byteArray1);

int int1 = base64_0.avail();
assertFalse(base64_0.isUrlSafe());
assertEquals(0, int1);
assertTrue(int1 == int0);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);

byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
assertEquals(4, byteArray0.length);
assertEquals(8, byteArray1.length);
assertEquals(8, byteArray2.length);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray1);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertNotNull(byteArray2);
assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)0, (byte)0}, byteArray1);
assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)0, (byte)0}, byteArray2);

base64_0.decode(byteArray1, 92, 92);

[MASTER] 20:49:45.595 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:45.597 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [8]; expected:<0> but was:<13>
[MASTER] 20:49:45.599 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BigInteger bigInteger0 = BigInteger.ONE;
assertEquals((short)1, bigInteger0.shortValue());
assertEquals((byte)1, bigInteger0.byteValue());
assertNotNull(bigInteger0);

String string0 = bigInteger0.toString();
assertEquals((short)1, bigInteger0.shortValue());
assertEquals((byte)1, bigInteger0.byteValue());
assertEquals("1", string0);
assertNotNull(string0);

BigInteger bigInteger1 = BigInteger.ONE;
assertEquals((short)1, bigInteger1.shortValue());
assertEquals((byte)1, bigInteger1.byteValue());
assertSame(bigInteger1, bigInteger0);
assertNotNull(bigInteger1);

BigInteger bigInteger2 = bigInteger0.andNot(bigInteger1);
assertEquals((short)1, bigInteger0.shortValue());
assertEquals((byte)1, bigInteger0.byteValue());
assertEquals((short)1, bigInteger1.shortValue());
assertEquals((byte)1, bigInteger1.byteValue());
assertEquals((byte)0, bigInteger2.byteValue());
assertEquals((short)0, bigInteger2.shortValue());
assertNotSame(bigInteger0, bigInteger2);
assertSame(bigInteger0, bigInteger1);
assertSame(bigInteger1, bigInteger0);
assertNotSame(bigInteger1, bigInteger2);
assertNotSame(bigInteger2, bigInteger0);
assertNotSame(bigInteger2, bigInteger1);
assertFalse(bigInteger2.equals((Object)bigInteger0));
assertFalse(bigInteger2.equals((Object)bigInteger1));
assertNotNull(bigInteger2);

BigInteger bigInteger3 = bigInteger0.shiftLeft(0);
assertEquals((short)1, bigInteger0.shortValue());
assertEquals((byte)1, bigInteger0.byteValue());
assertEquals((short)1, bigInteger3.shortValue());
assertEquals((byte)1, bigInteger3.byteValue());
assertNotSame(bigInteger0, bigInteger2);
assertSame(bigInteger0, bigInteger3);
assertSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger3, bigInteger2);
assertSame(bigInteger3, bigInteger1);
assertSame(bigInteger3, bigInteger0);
assertFalse(bigInteger0.equals((Object)bigInteger2));
assertFalse(bigInteger3.equals((Object)bigInteger2));
assertNotNull(bigInteger3);

BigInteger bigInteger4 = bigInteger0.min(bigInteger1);
assertEquals((short)1, bigInteger0.shortValue());
assertEquals((byte)1, bigInteger0.byteValue());
assertEquals((short)1, bigInteger1.shortValue());
assertEquals((byte)1, bigInteger1.byteValue());
assertEquals((byte)1, bigInteger4.byteValue());
assertEquals((short)1, bigInteger4.shortValue());
assertNotSame(bigInteger0, bigInteger2);
assertSame(bigInteger0, bigInteger3);
assertSame(bigInteger0, bigInteger4);
assertSame(bigInteger0, bigInteger1);
assertSame(bigInteger1, bigInteger0);
assertSame(bigInteger1, bigInteger3);
assertSame(bigInteger1, bigInteger4);
assertNotSame(bigInteger1, bigInteger2);
assertNotSame(bigInteger4, bigInteger2);
assertSame(bigInteger4, bigInteger1);
assertSame(bigInteger4, bigInteger0);
assertSame(bigInteger4, bigInteger3);
assertFalse(bigInteger0.equals((Object)bigInteger2));
assertFalse(bigInteger1.equals((Object)bigInteger2));
assertFalse(bigInteger4.equals((Object)bigInteger2));
assertNotNull(bigInteger4);

byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
assertEquals((short)1, bigInteger0.shortValue());
assertEquals((byte)1, bigInteger0.byteValue());
assertEquals(4, byteArray0.length);
assertNotSame(bigInteger0, bigInteger2);
assertSame(bigInteger0, bigInteger3);
assertSame(bigInteger0, bigInteger4);
assertSame(bigInteger0, bigInteger1);
assertFalse(bigInteger0.equals((Object)bigInteger2));
assertNotNull(byteArray0);
assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray0);

byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
assertEquals((short)1, bigInteger0.shortValue());
assertEquals((byte)1, bigInteger0.byteValue());
assertEquals(4, byteArray0.length);
assertEquals(6, byteArray1.length);
assertNotSame(bigInteger0, bigInteger2);
assertSame(bigInteger0, bigInteger3);
assertSame(bigInteger0, bigInteger4);
assertSame(bigInteger0, bigInteger1);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertFalse(bigInteger0.equals((Object)bigInteger2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertNotNull(byteArray1);
assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray0);
assertArrayEquals(new byte[] {(byte)81, (byte)86, (byte)69, (byte)57, (byte)80, (byte)81}, byteArray1);

Base64 base64_0 = new Base64(true);
assertTrue(base64_0.isUrlSafe());
assertNotNull(base64_0);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);

boolean boolean0 = base64_0.isUrlSafe();
assertTrue(base64_0.isUrlSafe());
assertTrue(boolean0);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);

int int0 = base64_0.readResults(byteArray0, (-2288), 1237);
assertEquals((short)1, bigInteger0.shortValue());
assertEquals((byte)1, bigInteger0.byteValue());
assertTrue(base64_0.isUrlSafe());
assertEquals(4, byteArray0.length);
assertEquals(0, int0);
assertNotSame(bigInteger0, bigInteger2);
assertSame(bigInteger0, bigInteger3);
assertSame(bigInteger0, bigInteger4);
assertSame(bigInteger0, bigInteger1);
assertNotSame(byteArray0, byteArray1);
assertFalse(bigInteger0.equals((Object)bigInteger2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray0);

byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
assertEquals((short)1, bigInteger0.shortValue());
assertEquals((byte)1, bigInteger0.byteValue());
assertEquals(4, byteArray0.length);
assertEquals(6, byteArray1.length);
assertEquals(10, byteArray2.length);
assertNotSame(bigInteger0, bigInteger2);
assertSame(bigInteger0, bigInteger3);
assertSame(bigInteger0, bigInteger4);
assertSame(bigInteger0, bigInteger1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray1);
assertFalse(bigInteger0.equals((Object)bigInteger2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertNotNull(byteArray2);
assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray0);
assertArrayEquals(new byte[] {(byte)81, (byte)86, (byte)69, (byte)57, (byte)80, (byte)81}, byteArray1);
assertArrayEquals(new byte[] {(byte)85, (byte)86, (byte)90, (byte)70, (byte)79, (byte)86, (byte)66, (byte)82, (byte)0, (byte)0}, byteArray2);

byte[] byteArray3 = Base64.encodeBase64(byteArray1, true, false, 1237);
assertEquals((short)1, bigInteger0.shortValue());
assertEquals((byte)1, bigInteger0.byteValue());
assertEquals(4, byteArray0.length);
assertEquals(6, byteArray1.length);
assertEquals(10, byteArray3.length);
assertNotSame(bigInteger0, bigInteger2);
assertSame(bigInteger0, bigInteger3);
assertSame(bigInteger0, bigInteger4);
assertSame(bigInteger0, bigInteger1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray2);
assertFalse(bigInteger0.equals((Object)bigInteger2));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray2));
assertNotNull(byteArray3);
assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray0);
assertArrayEquals(new byte[] {(byte)81, (byte)86, (byte)69, (byte)57, (byte)80, (byte)81}, byteArray1);
assertArrayEquals(new byte[] {(byte)85, (byte)86, (byte)90, (byte)70, (byte)79, (byte)86, (byte)66, (byte)82, (byte)0, (byte)0}, byteArray3);

byte[] byteArray4 = Base64.decodeBase64("UTF-8");
assertEquals(3, byteArray4.length);
assertNotSame(byteArray4, byteArray0);
assertNotSame(byteArray4, byteArray3);
assertNotSame(byteArray4, byteArray1);
assertNotSame(byteArray4, byteArray2);
assertFalse(byteArray4.equals((Object)byteArray0));
assertFalse(byteArray4.equals((Object)byteArray3));
assertFalse(byteArray4.equals((Object)byteArray1));
assertFalse(byteArray4.equals((Object)byteArray2));
assertNotNull(byteArray4);
assertArrayEquals(new byte[] {(byte)81, (byte)49, (byte)126}, byteArray4);

base64_0.encode(byteArray1, 0, 3299);

[MASTER] 20:49:45.763 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:45.764 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [4]; expected:<0> but was:<13>
[MASTER] 20:49:45.768 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64 base64_0 = new Base64(1248);
assertFalse(base64_0.isUrlSafe());
assertNotNull(base64_0);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);

byte[] byteArray0 = new byte[0];
byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
assertEquals(0, byteArray0.length);
assertEquals(0, byteArray1.length);
assertSame(byteArray0, byteArray1);
assertSame(byteArray1, byteArray0);
assertNotNull(byteArray1);
assertArrayEquals(new byte[] {}, byteArray0);
assertArrayEquals(new byte[] {}, byteArray1);

byte[] byteArray2 = Base64.decodeBase64(byteArray0);
assertEquals(0, byteArray0.length);
assertEquals(0, byteArray2.length);
assertSame(byteArray0, byteArray1);
assertSame(byteArray0, byteArray2);
assertSame(byteArray2, byteArray1);
assertSame(byteArray2, byteArray0);
assertNotNull(byteArray2);
assertArrayEquals(new byte[] {}, byteArray0);
assertArrayEquals(new byte[] {}, byteArray2);

byte[] byteArray3 = new byte[1];
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray0));

byte[] byteArray4 = base64_0.encode(byteArray3);
assertFalse(base64_0.isUrlSafe());
assertEquals(1, byteArray3.length);
assertEquals(6, byteArray4.length);
assertNotSame(byteArray3, byteArray4);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray4, byteArray0);
assertNotSame(byteArray4, byteArray3);
assertNotSame(byteArray4, byteArray2);
assertNotSame(byteArray4, byteArray1);
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray4.equals((Object)byteArray0));
assertFalse(byteArray4.equals((Object)byteArray3));
assertFalse(byteArray4.equals((Object)byteArray2));
assertFalse(byteArray4.equals((Object)byteArray1));
assertNotNull(byteArray4);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertArrayEquals(new byte[] {(byte)0}, byteArray3);
assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61, (byte)0, (byte)0}, byteArray4);

base64_0.decode(byteArray3, 0, 1248);
assertFalse(base64_0.isUrlSafe());
assertEquals(1, byteArray3.length);
assertNotSame(byteArray3, byteArray4);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray0);
assertFalse(byteArray3.equals((Object)byteArray4));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray0));
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertArrayEquals(new byte[] {(byte)0}, byteArray3);

byte[] byteArray5 = Base64.encodeBase64(byteArray3, true);
assertEquals(1, byteArray3.length);
assertEquals(6, byteArray5.length);
assertNotSame(byteArray3, byteArray4);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray5);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray5, byteArray3);
assertNotSame(byteArray5, byteArray0);
assertNotSame(byteArray5, byteArray4);
assertNotSame(byteArray5, byteArray1);
assertNotSame(byteArray5, byteArray2);
assertFalse(byteArray3.equals((Object)byteArray4));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray5.equals((Object)byteArray3));
assertFalse(byteArray5.equals((Object)byteArray0));
assertFalse(byteArray5.equals((Object)byteArray4));
assertFalse(byteArray5.equals((Object)byteArray1));
assertFalse(byteArray5.equals((Object)byteArray2));
assertNotNull(byteArray5);
assertArrayEquals(new byte[] {(byte)0}, byteArray3);
assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61, (byte)0, (byte)0}, byteArray5);

byteArray3[0] = (byte)84;
byte[] byteArray6 = Base64.encodeBase64(byteArray3, false, true, 1248);
assertEquals(1, byteArray3.length);
assertEquals(2, byteArray6.length);
assertNotSame(byteArray3, byteArray4);
assertNotSame(byteArray3, byteArray6);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray5);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray6, byteArray0);
assertNotSame(byteArray6, byteArray3);
assertNotSame(byteArray6, byteArray2);
assertNotSame(byteArray6, byteArray1);
assertNotSame(byteArray6, byteArray4);
assertNotSame(byteArray6, byteArray5);
assertFalse(byteArray3.equals((Object)byteArray4));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray5));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray6.equals((Object)byteArray0));
assertFalse(byteArray6.equals((Object)byteArray3));
assertFalse(byteArray6.equals((Object)byteArray2));
assertFalse(byteArray6.equals((Object)byteArray1));
assertFalse(byteArray6.equals((Object)byteArray4));
assertFalse(byteArray6.equals((Object)byteArray5));
assertNotNull(byteArray6);
assertArrayEquals(new byte[] {(byte)84}, byteArray3);
assertArrayEquals(new byte[] {(byte)86, (byte)65}, byteArray6);

byte[] byteArray7 = Base64.discardWhitespace(byteArray5);
assertEquals(1, byteArray3.length);
assertEquals(6, byteArray5.length);
assertEquals(6, byteArray7.length);
assertNotSame(byteArray3, byteArray4);
assertNotSame(byteArray3, byteArray6);
assertNotSame(byteArray3, byteArray7);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray5);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray5, byteArray6);
assertNotSame(byteArray5, byteArray7);
assertNotSame(byteArray5, byteArray3);
assertNotSame(byteArray5, byteArray0);
assertNotSame(byteArray5, byteArray4);
assertNotSame(byteArray5, byteArray1);
assertNotSame(byteArray5, byteArray2);
assertNotSame(byteArray7, byteArray2);
assertNotSame(byteArray7, byteArray6);
assertNotSame(byteArray7, byteArray3);
assertNotSame(byteArray7, byteArray0);
assertNotSame(byteArray7, byteArray4);
assertNotSame(byteArray7, byteArray1);
assertNotSame(byteArray7, byteArray5);
assertFalse(byteArray3.equals((Object)byteArray4));
assertFalse(byteArray3.equals((Object)byteArray6));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray5));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray5.equals((Object)byteArray6));
assertFalse(byteArray5.equals((Object)byteArray3));
assertFalse(byteArray5.equals((Object)byteArray0));
assertFalse(byteArray5.equals((Object)byteArray4));
assertFalse(byteArray5.equals((Object)byteArray1));
assertFalse(byteArray5.equals((Object)byteArray2));
assertFalse(byteArray7.equals((Object)byteArray2));
assertFalse(byteArray7.equals((Object)byteArray6));
assertFalse(byteArray7.equals((Object)byteArray3));
assertFalse(byteArray7.equals((Object)byteArray0));
assertFalse(byteArray7.equals((Object)byteArray4));
assertFalse(byteArray7.equals((Object)byteArray1));
assertFalse(byteArray7.equals((Object)byteArray5));
assertNotNull(byteArray7);
assertArrayEquals(new byte[] {(byte)84}, byteArray3);
assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61, (byte)0, (byte)0}, byteArray5);
assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61, (byte)0, (byte)0}, byteArray7);

boolean boolean0 = Base64.isBase64((byte)4);
assertFalse(boolean0);

byte[] byteArray8 = Base64.encodeBase64(byteArray5, false, true);
assertEquals(1, byteArray3.length);
assertEquals(6, byteArray5.length);
assertEquals(8, byteArray8.length);
assertNotSame(byteArray3, byteArray4);
assertNotSame(byteArray3, byteArray8);
assertNotSame(byteArray3, byteArray6);
assertNotSame(byteArray3, byteArray7);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray5);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray5, byteArray6);
assertNotSame(byteArray5, byteArray7);
assertNotSame(byteArray5, byteArray3);
assertNotSame(byteArray5, byteArray0);
assertNotSame(byteArray5, byteArray4);
assertNotSame(byteArray5, byteArray8);
assertNotSame(byteArray5, byteArray1);
assertNotSame(byteArray5, byteArray2);
assertNotSame(byteArray8, byteArray2);
assertNotSame(byteArray8, byteArray0);
assertNotSame(byteArray8, byteArray3);
assertNotSame(byteArray8, byteArray6);
assertNotSame(byteArray8, byteArray7);
assertNotSame(byteArray8, byteArray1);
assertNotSame(byteArray8, byteArray4);
assertNotSame(byteArray8, byteArray5);
assertFalse(byteArray3.equals((Object)byteArray4));
assertFalse(byteArray3.equals((Object)byteArray6));
assertFalse(byteArray3.equals((Object)byteArray7));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray5));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray5.equals((Object)byteArray6));
assertFalse(byteArray5.equals((Object)byteArray7));
assertFalse(byteArray5.equals((Object)byteArray3));
assertFalse(byteArray5.equals((Object)byteArray0));
assertFalse(byteArray5.equals((Object)byteArray4));
assertFalse(byteArray5.equals((Object)byteArray1));
assertFalse(byteArray5.equals((Object)byteArray2));
assertFalse(byteArray8.equals((Object)byteArray2));
assertFalse(byteArray8.equals((Object)byteArray0));
assertFalse(byteArray8.equals((Object)byteArray3));
assertFalse(byteArray8.equals((Object)byteArray6));
assertFalse(byteArray8.equals((Object)byteArray7));
assertFalse(byteArray8.equals((Object)byteArray1));
assertFalse(byteArray8.equals((Object)byteArray4));
assertFalse(byteArray8.equals((Object)byteArray5));
assertNotNull(byteArray8);
assertArrayEquals(new byte[] {(byte)84}, byteArray3);
assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61, (byte)0, (byte)0}, byteArray5);
assertArrayEquals(new byte[] {(byte)81, (byte)85, (byte)69, (byte)57, (byte)80, (byte)81, (byte)65, (byte)65}, byteArray8);


[MASTER] 20:49:46.103 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:46.113 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [4]; expected:<0> but was:<13>
[MASTER] 20:49:46.116 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64 base64_0 = new Base64(1248);
assertFalse(base64_0.isUrlSafe());
assertNotNull(base64_0);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);

byte[] byteArray0 = new byte[0];
byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
assertEquals(0, byteArray0.length);
assertEquals(0, byteArray1.length);
assertSame(byteArray0, byteArray1);
assertSame(byteArray1, byteArray0);
assertNotNull(byteArray1);
assertArrayEquals(new byte[] {}, byteArray0);
assertArrayEquals(new byte[] {}, byteArray1);

byte[] byteArray2 = new byte[1];
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));

byte[] byteArray3 = base64_0.encode(byteArray2);
assertFalse(base64_0.isUrlSafe());
assertEquals(1, byteArray2.length);
assertEquals(6, byteArray3.length);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray3);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray1);
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray1));
assertNotNull(byteArray3);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertArrayEquals(new byte[] {(byte)0}, byteArray2);
assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61, (byte)0, (byte)0}, byteArray3);

base64_0.decode(byteArray2, 0, 1248);
assertFalse(base64_0.isUrlSafe());
assertEquals(1, byteArray2.length);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray3);
assertNotSame(byteArray2, byteArray0);
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray0));
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertArrayEquals(new byte[] {(byte)0}, byteArray2);

byte[] byteArray4 = Base64.encodeBase64(byteArray2, true);
assertEquals(1, byteArray2.length);
assertEquals(6, byteArray4.length);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray3);
assertNotSame(byteArray2, byteArray4);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray4, byteArray0);
assertNotSame(byteArray4, byteArray3);
assertNotSame(byteArray4, byteArray2);
assertNotSame(byteArray4, byteArray1);
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray4.equals((Object)byteArray0));
assertFalse(byteArray4.equals((Object)byteArray3));
assertFalse(byteArray4.equals((Object)byteArray2));
assertFalse(byteArray4.equals((Object)byteArray1));
assertNotNull(byteArray4);
assertArrayEquals(new byte[] {(byte)0}, byteArray2);
assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61, (byte)0, (byte)0}, byteArray4);

byteArray2[0] = (byte)84;
byte[] byteArray5 = Base64.encodeBase64(byteArray2, false, true, 1248);
assertEquals(1, byteArray2.length);
assertEquals(2, byteArray5.length);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray3);
assertNotSame(byteArray2, byteArray5);
assertNotSame(byteArray2, byteArray4);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray5, byteArray0);
assertNotSame(byteArray5, byteArray4);
assertNotSame(byteArray5, byteArray3);
assertNotSame(byteArray5, byteArray2);
assertNotSame(byteArray5, byteArray1);
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray4));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray5.equals((Object)byteArray0));
assertFalse(byteArray5.equals((Object)byteArray4));
assertFalse(byteArray5.equals((Object)byteArray3));
assertFalse(byteArray5.equals((Object)byteArray2));
assertFalse(byteArray5.equals((Object)byteArray1));
assertNotNull(byteArray5);
assertArrayEquals(new byte[] {(byte)84}, byteArray2);
assertArrayEquals(new byte[] {(byte)86, (byte)65}, byteArray5);

byte[] byteArray6 = Base64.discardWhitespace(byteArray4);
assertEquals(1, byteArray2.length);
assertEquals(6, byteArray4.length);
assertEquals(6, byteArray6.length);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray3);
assertNotSame(byteArray2, byteArray5);
assertNotSame(byteArray2, byteArray6);
assertNotSame(byteArray2, byteArray4);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray4, byteArray5);
assertNotSame(byteArray4, byteArray0);
assertNotSame(byteArray4, byteArray3);
assertNotSame(byteArray4, byteArray6);
assertNotSame(byteArray4, byteArray1);
assertNotSame(byteArray4, byteArray2);
assertNotSame(byteArray6, byteArray1);
assertNotSame(byteArray6, byteArray3);
assertNotSame(byteArray6, byteArray5);
assertNotSame(byteArray6, byteArray2);
assertNotSame(byteArray6, byteArray0);
assertNotSame(byteArray6, byteArray4);
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray5));
assertFalse(byteArray2.equals((Object)byteArray4));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray4.equals((Object)byteArray5));
assertFalse(byteArray4.equals((Object)byteArray0));
assertFalse(byteArray4.equals((Object)byteArray3));
assertFalse(byteArray4.equals((Object)byteArray2));
assertFalse(byteArray4.equals((Object)byteArray1));
assertFalse(byteArray6.equals((Object)byteArray1));
assertFalse(byteArray6.equals((Object)byteArray3));
assertFalse(byteArray6.equals((Object)byteArray5));
assertFalse(byteArray6.equals((Object)byteArray2));
assertFalse(byteArray6.equals((Object)byteArray0));
assertFalse(byteArray6.equals((Object)byteArray4));
assertNotNull(byteArray6);
assertArrayEquals(new byte[] {(byte)84}, byteArray2);
assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61, (byte)0, (byte)0}, byteArray4);
assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61, (byte)0, (byte)0}, byteArray6);

int int0 = base64_0.avail();
assertFalse(base64_0.isUrlSafe());
assertEquals(0, int0);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);

byte[] byteArray7 = base64_0.decode("");
assertFalse(base64_0.isUrlSafe());
assertEquals(0, byteArray7.length);
assertNotSame(byteArray7, byteArray3);
assertNotSame(byteArray7, byteArray4);
assertNotSame(byteArray7, byteArray0);
assertNotSame(byteArray7, byteArray6);
assertNotSame(byteArray7, byteArray5);
assertNotSame(byteArray7, byteArray1);
assertNotSame(byteArray7, byteArray2);
assertFalse(byteArray7.equals((Object)byteArray3));
assertFalse(byteArray7.equals((Object)byteArray4));
assertFalse(byteArray7.equals((Object)byteArray0));
assertFalse(byteArray7.equals((Object)byteArray6));
assertFalse(byteArray7.equals((Object)byteArray5));
assertFalse(byteArray7.equals((Object)byteArray1));
assertFalse(byteArray7.equals((Object)byteArray2));
assertNotNull(byteArray7);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertArrayEquals(new byte[] {}, byteArray7);


[MASTER] 20:49:46.224 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:46.303 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:46.303 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [4]; expected:<0> but was:<13>
[MASTER] 20:49:46.304 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[2];
byteArray0[0] = (byte)60;
Base64 base64_0 = new Base64(true);
assertTrue(base64_0.isUrlSafe());
assertNotNull(base64_0);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);

byte[] byteArray1 = Base64.encodeBase64((byte[]) null, true, true);
assertNull(byteArray1);

byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
assertEquals(2, byteArray0.length);
assertEquals(6, byteArray2.length);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray2, byteArray0);
assertFalse(byteArray2.equals((Object)byteArray0));
assertNotNull(byteArray2);
assertArrayEquals(new byte[] {(byte)60, (byte)0}, byteArray0);
assertArrayEquals(new byte[] {(byte)80, (byte)65, (byte)65, (byte)61, (byte)0, (byte)0}, byteArray2);

base64_0.encode(byteArray0, (-1), (-1848));
assertTrue(base64_0.isUrlSafe());
assertEquals(2, byteArray0.length);
assertNotSame(byteArray0, byteArray2);
assertFalse(byteArray0.equals((Object)byteArray2));
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertArrayEquals(new byte[] {(byte)60, (byte)0}, byteArray0);

base64_0.encode(byteArray0, (-1848), (-22));
assertTrue(base64_0.isUrlSafe());
assertEquals(2, byteArray0.length);
assertNotSame(byteArray0, byteArray2);
assertFalse(byteArray0.equals((Object)byteArray2));
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertArrayEquals(new byte[] {(byte)60, (byte)0}, byteArray0);


[MASTER] 20:49:46.375 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:46.375 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [0]; expected:<0> but was:<13>
[MASTER] 20:49:46.376 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
assertEquals(2, byteArray0.length);
assertNotNull(byteArray0);
assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);

boolean boolean0 = false;
Base64 base64_0 = new Base64(false);
assertFalse(base64_0.isUrlSafe());
assertNotNull(base64_0);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);

Base64.encodeInteger((BigInteger) null);

[MASTER] 20:49:46.515 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:46.735 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:46.823 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:46.832 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [0]; expected:<0> but was:<13>
[MASTER] 20:49:46.835 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
assertEquals(2, byteArray0.length);
assertNotNull(byteArray0);
assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);

Base64 base64_0 = new Base64(false);
assertFalse(base64_0.isUrlSafe());
assertNotNull(base64_0);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);

Object object0 = base64_0.decode((Object) "org.apache.commons.codec.EncoderException");
assertFalse(base64_0.isUrlSafe());
assertNotNull(object0);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);

byte[] byteArray1 = base64_0.decode("org.apache.commons.codec.EncoderException");
assertFalse(base64_0.isUrlSafe());
assertEquals(27, byteArray1.length);
assertNotSame(byteArray1, object0);
assertNotSame(byteArray1, byteArray0);
assertFalse(byteArray1.equals((Object)object0));
assertFalse(byteArray1.equals((Object)byteArray0));
assertNotNull(byteArray1);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);

BigInteger bigInteger0 = new BigInteger(byteArray1);
assertFalse(base64_0.isUrlSafe());
assertEquals((byte) (-88), bigInteger0.byteValue());
assertEquals((short) (-10072), bigInteger0.shortValue());
assertEquals(27, byteArray1.length);
assertFalse(byteArray1.equals((Object)object0));
assertFalse(byteArray1.equals((Object)byteArray0));
assertNotNull(bigInteger0);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);

byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
assertFalse(base64_0.isUrlSafe());
assertEquals((byte) (-88), bigInteger0.byteValue());
assertEquals((short) (-10072), bigInteger0.shortValue());
assertEquals(27, byteArray1.length);
assertEquals(27, byteArray2.length);
assertNotSame(byteArray1, object0);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray2, object0);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray1);
assertFalse(byteArray1.equals((Object)object0));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)object0));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertNotNull(byteArray2);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);

int int0 = bigInteger0.getLowestSetBit();
assertFalse(base64_0.isUrlSafe());
assertEquals((byte) (-88), bigInteger0.byteValue());
assertEquals((short) (-10072), bigInteger0.shortValue());
assertEquals(27, byteArray1.length);
assertEquals(3, int0);
assertNotSame(byteArray1, object0);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);
assertFalse(byteArray1.equals((Object)object0));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);

int int1 = bigInteger0.getLowestSetBit();
assertFalse(base64_0.isUrlSafe());
assertEquals((byte) (-88), bigInteger0.byteValue());
assertEquals((short) (-10072), bigInteger0.shortValue());
assertEquals(27, byteArray1.length);
assertEquals(3, int1);
assertNotSame(byteArray1, object0);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);
assertFalse(byteArray1.equals((Object)object0));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertTrue(int1 == int0);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);

Base64 base64_1 = new Base64((-2812));
assertFalse(base64_1.isUrlSafe());
assertFalse(base64_1.equals((Object)base64_0));
assertNotNull(base64_1);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);

byte[] byteArray3 = base64_1.encode(byteArray0);
assertFalse(base64_1.isUrlSafe());
assertEquals(2, byteArray0.length);
assertEquals(4, byteArray3.length);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, object0);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(base64_1, base64_0);
assertNotSame(byteArray3, object0);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray2);
assertFalse(byteArray0.equals((Object)object0));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(base64_1.equals((Object)base64_0));
assertFalse(byteArray3.equals((Object)object0));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray2));
assertNotNull(byteArray3);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)61}, byteArray3);

base64_1.encode(byteArray1, (-5898), 1717986918);
assertFalse(base64_0.isUrlSafe());
assertFalse(base64_1.isUrlSafe());
assertEquals(27, byteArray1.length);
assertNotSame(base64_0, base64_1);
assertNotSame(byteArray1, object0);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(base64_1, base64_0);
assertFalse(base64_0.equals((Object)base64_1));
assertFalse(byteArray1.equals((Object)object0));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(base64_1.equals((Object)base64_0));
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);

base64_0.encode(byteArray3, 80, 2556);
assertFalse(base64_0.isUrlSafe());
assertFalse(base64_1.isUrlSafe());
assertEquals(2, byteArray0.length);
assertEquals(4, byteArray3.length);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, object0);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(base64_0, base64_1);
assertNotSame(base64_1, base64_0);
assertNotSame(byteArray3, object0);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray2);
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)object0));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(base64_0.equals((Object)base64_1));
assertFalse(base64_1.equals((Object)base64_0));
assertFalse(byteArray3.equals((Object)object0));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray2));
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)61}, byteArray3);

byte[] byteArray4 = Base64.encodeBase64URLSafe((byte[]) null);
assertNull(byteArray4);

Base64.discardWhitespace((byte[]) null);

[MASTER] 20:49:46.927 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:47.019 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:47.139 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:47.242 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:47.334 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:47.518 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:47.523 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [0]; expected:<0> but was:<13>
[MASTER] 20:49:47.524 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
assertEquals(2, byteArray0.length);
assertNotNull(byteArray0);
assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);

Base64 base64_0 = new Base64(false);
assertFalse(base64_0.isUrlSafe());
assertNotNull(base64_0);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);

Base64 base64_1 = new Base64(false);
assertFalse(base64_1.isUrlSafe());
assertFalse(base64_1.equals((Object)base64_0));
assertNotNull(base64_1);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);

byte[] byteArray1 = base64_1.decode("b");
assertFalse(base64_1.isUrlSafe());
assertEquals(0, byteArray1.length);
assertNotSame(base64_1, base64_0);
assertNotSame(byteArray1, byteArray0);
assertFalse(base64_1.equals((Object)base64_0));
assertFalse(byteArray1.equals((Object)byteArray0));
assertNotNull(byteArray1);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertArrayEquals(new byte[] {}, byteArray1);

BigInteger bigInteger0 = BigInteger.ZERO;
assertEquals((byte)0, bigInteger0.byteValue());
assertEquals((short)0, bigInteger0.shortValue());
assertNotNull(bigInteger0);

long long0 = bigInteger0.longValue();
assertEquals((byte)0, bigInteger0.byteValue());
assertEquals((short)0, bigInteger0.shortValue());
assertEquals(0L, long0);

Base64.toIntegerBytes((BigInteger) null);

[MASTER] 20:49:47.640 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:47.718 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:47.792 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:47.793 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [0]; expected:<0> but was:<13>
[MASTER] 20:49:47.793 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
assertEquals(2, byteArray0.length);
assertNotNull(byteArray0);
assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);

BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
assertEquals((short)0, bigInteger0.shortValue());
assertEquals((byte)0, bigInteger0.byteValue());
assertEquals(2, byteArray0.length);
assertNotNull(bigInteger0);
assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);

Base64 base64_0 = new Base64(19, (byte[]) null);
assertFalse(base64_0.isUrlSafe());
assertNotNull(base64_0);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);

Base64.decodeInteger((byte[]) null);

[MASTER] 20:49:47.873 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:48.001 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:48.114 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:48.283 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:48.346 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:48.477 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:49.980 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:50.044 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:50.045 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [0]; expected:<0> but was:<13>
[MASTER] 20:49:50.047 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[7];
BigInteger bigInteger0 = BigInteger.TEN;
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((byte)10, bigInteger0.byteValue());
assertNotNull(bigInteger0);

Base64 base64_0 = new Base64(11, byteArray0);
assertFalse(base64_0.isUrlSafe());
assertEquals(7, byteArray0.length);
assertNotNull(base64_0);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);

byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
assertEquals(2, byteArray1.length);
assertNotSame(byteArray1, byteArray0);
assertFalse(byteArray1.equals((Object)byteArray0));
assertNotNull(byteArray1);
assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);

BigInteger bigInteger1 = Base64.decodeInteger(byteArray0);
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertEquals(7, byteArray0.length);
assertNotSame(byteArray0, byteArray1);
assertNotSame(bigInteger1, bigInteger0);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertNotNull(bigInteger1);
assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);

byte[] byteArray2 = base64_0.encode(byteArray0);
assertFalse(base64_0.isUrlSafe());
assertEquals(7, byteArray0.length);
assertEquals(26, byteArray2.length);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray1);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertNotNull(byteArray2);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);

byte[] byteArray3 = Base64.CHUNK_SEPARATOR;
assertEquals(2, byteArray3.length);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray0);
assertSame(byteArray3, byteArray1);
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray0));
assertNotNull(byteArray3);
assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray3);

BigInteger bigInteger2 = Base64.decodeInteger(byteArray0);
assertEquals((short)0, bigInteger2.shortValue());
assertEquals((byte)0, bigInteger2.byteValue());
assertEquals(7, byteArray0.length);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray3);
assertNotSame(bigInteger2, bigInteger1);
assertNotSame(bigInteger2, bigInteger0);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray3));
assertTrue(bigInteger2.equals((Object)bigInteger1));
assertFalse(bigInteger2.equals((Object)bigInteger0));
assertNotNull(bigInteger2);
assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);

Base64 base64_1 = new Base64();
assertFalse(base64_1.isUrlSafe());
assertFalse(base64_1.equals((Object)base64_0));
assertNotNull(base64_1);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);

String string0 = base64_0.encodeToString(byteArray2);
assertFalse(base64_0.isUrlSafe());
assertEquals(7, byteArray0.length);
assertEquals(26, byteArray2.length);
assertEquals("QUFBQUFB\u0000\u0000\u0000\u0000\u0000\u0000\u0000QUEAAAAA\u0000\u0000\u0000\u0000\u0000\u0000\u0000AAAAQUE9\u0000\u0000\u0000\u0000\u0000\u0000\u0000PQAAAAAA\u0000\u0000\u0000\u0000\u0000\u0000\u0000AAA=\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray3);
assertNotSame(base64_0, base64_1);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray3);
assertNotSame(byteArray2, byteArray1);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(base64_0.equals((Object)base64_1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray1));
assertNotNull(string0);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);


[MASTER] 20:49:50.113 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:50.207 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:50.283 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:52.023 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:52.166 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:52.168 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [0]; expected:<0> but was:<13>
[MASTER] 20:49:52.169 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
assertEquals(2, byteArray0.length);
assertNotNull(byteArray0);
assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);

Base64 base64_0 = new Base64(false);
assertFalse(base64_0.isUrlSafe());
assertNotNull(base64_0);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);

base64_0.encode(byteArray0, (-49), (-49));
assertFalse(base64_0.isUrlSafe());
assertEquals(2, byteArray0.length);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);

base64_0.readResults(byteArray0, (-49), 2132);

[MASTER] 20:49:52.240 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:52.331 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:52.427 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:52.553 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:53.958 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:55.239 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:50:00.234 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:50:00.235 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<...QUlBQUFBQ1FBQUFBb0FB[  QUFMQUFBQURBQUFBQTBBQUFBT0FBQUFEd0FBQUJBQUFBQVJBQUFBRWdBQUFCTUFBQUFVQUFBQUZR  QUFBQllBQUFBWEFBQUFHQUFBQUJrQUFBQWFBQUFBR3dBQUFCd0FBQUFkQUFBQUhnQUFBQjhBQUFB  Z0FBQUFJUUFBQUNJQUFBQWpBQUFBSkFBQUFDVUFBQUFtQUFBQUp3QUFBQ2dBQUFBcEFBQUFLZ0FB  QUNzQUFBQXNBQUFBTFFBQUFDNEFBQUF2QUFBQU1BQUFBREVBQUFBeUFBQUFNd0FBQURRQUFBQTFB  QUFBTmdBQUFEY0FBQUE0QUFBQU9RQUFBRG9BQUFBN0FBQUFQQUFBQUQwQUFBQStBQUFBUHdBQUFF  QUFBQUJCQUFBQVFnQUFBRU1BQUFCRUFBQUFSUUFBQUVZQUFBQkhBQUFBU0FBQUFFa0FBQUJLQUFB  QVN3QUFBRXdBQUFCTkFBQUFUZ0FBQUU4QUFBQlFBQUFBVVFBQUFGSUFBQUJUQUFBQVZBQUFDcUU9  ]> but was:<...QUlBQUFBQ1FBQUFBb0FB[
QUFMQUFBQURBQUFBQTBBQUFBT0FBQUFEd0FBQUJBQUFBQVJBQUFBRWdBQUFCTUFBQUFVQUFBQUZR
QUFBQllBQUFBWEFBQUFHQUFBQUJrQUFBQWFBQUFBR3dBQUFCd0FBQUFkQUFBQUhnQUFBQjhBQUFB
Z0FBQUFJUUFBQUNJQUFBQWpBQUFBSkFBQUFDVUFBQUFtQUFBQUp3QUFBQ2dBQUFBcEFBQUFLZ0FB
QUNzQUFBQXNBQUFBTFFBQUFDNEFBQUF2QUFBQU1BQUFBREVBQUFBeUFBQUFNd0FBQURRQUFBQTFB
QUFBTmdBQUFEY0FBQUE0QUFBQU9RQUFBRG9BQUFBN0FBQUFQQUFBQUQwQUFBQStBQUFBUHdBQUFF
QUFBQUJCQUFBQVFnQUFBRU1BQUFCRUFBQUFSUUFBQUVZQUFBQkhBQUFBU0FBQUFFa0FBQUJLQUFB
QVN3QUFBRXdBQUFCTkFBQUFUZ0FBQUU4QUFBQlFBQUFBVVFBQUFGSUFBQUJUQUFBQVZBQUFDcUU9
]>
[MASTER] 20:50:00.236 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64 base64_0 = new Base64();
assertFalse(base64_0.isUrlSafe());
assertNotNull(base64_0);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);

MockRandom mockRandom0 = new MockRandom();
assertNotNull(mockRandom0);

BigInteger bigInteger0 = BigInteger.probablePrime(2721, mockRandom0);
assertEquals((byte) (-95), bigInteger0.byteValue());
assertEquals((short)2721, bigInteger0.shortValue());
assertNotNull(bigInteger0);

byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
assertEquals((byte) (-95), bigInteger0.byteValue());
assertEquals((short)2721, bigInteger0.shortValue());
assertEquals(456, byteArray0.length);
assertNotNull(byteArray0);

BigInteger bigInteger1 = new BigInteger(byteArray0);
assertEquals((byte) (-95), bigInteger0.byteValue());
assertEquals((short)2721, bigInteger0.shortValue());
assertEquals((byte)61, bigInteger1.byteValue());
assertEquals((short)17725, bigInteger1.shortValue());
assertEquals(456, byteArray0.length);
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertNotNull(bigInteger1);

int int0 = bigInteger0.bitLength();
assertEquals((byte) (-95), bigInteger0.byteValue());
assertEquals((short)2721, bigInteger0.shortValue());
assertEquals(2721, int0);
assertNotSame(bigInteger0, bigInteger1);
assertFalse(bigInteger0.equals((Object)bigInteger1));

Base64 base64_1 = new Base64(true);
assertTrue(base64_1.isUrlSafe());
assertFalse(base64_1.equals((Object)base64_0));
assertNotNull(base64_1);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);

String string0 = base64_1.encodeToString(byteArray0);
assertEquals((byte) (-95), bigInteger0.byteValue());
assertEquals((short)2721, bigInteger0.shortValue());
assertTrue(base64_1.isUrlSafe());
assertEquals(456, byteArray0.length);
assertEquals("QVFBQUFBRUFBQUFDQUFBQUF3QUFBQVFBQUFBRkFBQUFCZ0FBQUFjQUFBQUlBQUFBQ1FBQUFBb0FB\u0000\u0000QUFMQUFBQURBQUFBQTBBQUFBT0FBQUFEd0FBQUJBQUFBQVJBQUFBRWdBQUFCTUFBQUFVQUFBQUZR\u0000\u0000QUFBQllBQUFBWEFBQUFHQUFBQUJrQUFBQWFBQUFBR3dBQUFCd0FBQUFkQUFBQUhnQUFBQjhBQUFB\u0000\u0000Z0FBQUFJUUFBQUNJQUFBQWpBQUFBSkFBQUFDVUFBQUFtQUFBQUp3QUFBQ2dBQUFBcEFBQUFLZ0FB\u0000\u0000QUNzQUFBQXNBQUFBTFFBQUFDNEFBQUF2QUFBQU1BQUFBREVBQUFBeUFBQUFNd0FBQURRQUFBQTFB\u0000\u0000QUFBTmdBQUFEY0FBQUE0QUFBQU9RQUFBRG9BQUFBN0FBQUFQQUFBQUQwQUFBQStBQUFBUHdBQUFF\u0000\u0000QUFBQUJCQUFBQVFnQUFBRU1BQUFCRUFBQUFSUUFBQUVZQUFBQkhBQUFBU0FBQUFFa0FBQUJLQUFB\u0000\u0000QVN3QUFBRXdBQUFCTkFBQUFUZ0FBQUU4QUFBQlFBQUFBVVFBQUFGSUFBQUJUQUFBQVZBQUFDcUU9\u0000\u0000", string0);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(base64_1, base64_0);
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(base64_1.equals((Object)base64_0));
assertNotNull(string0);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);

String string1 = base64_1.encodeToString(byteArray0);
assertEquals((byte) (-95), bigInteger0.byteValue());
assertEquals((short)2721, bigInteger0.shortValue());
assertTrue(base64_1.isUrlSafe());
assertEquals(456, byteArray0.length);
assertEquals("QVFBQUFBRUFBQUFDQUFBQUF3QUFBQVFBQUFBRkFBQUFCZ0FBQUFjQUFBQUlBQUFBQ1FBQUFBb0FB\u0000\u0000QUFMQUFBQURBQUFBQTBBQUFBT0FBQUFEd0FBQUJBQUFBQVJBQUFBRWdBQUFCTUFBQUFVQUFBQUZR\u0000\u0000QUFBQllBQUFBWEFBQUFHQUFBQUJrQUFBQWFBQUFBR3dBQUFCd0FBQUFkQUFBQUhnQUFBQjhBQUFB\u0000\u0000Z0FBQUFJUUFBQUNJQUFBQWpBQUFBSkFBQUFDVUFBQUFtQUFBQUp3QUFBQ2dBQUFBcEFBQUFLZ0FB\u0000\u0000QUNzQUFBQXNBQUFBTFFBQUFDNEFBQUF2QUFBQU1BQUFBREVBQUFBeUFBQUFNd0FBQURRQUFBQTFB\u0000\u0000QUFBTmdBQUFEY0FBQUE0QUFBQU9RQUFBRG9BQUFBN0FBQUFQQUFBQUQwQUFBQStBQUFBUHdBQUFF\u0000\u0000QUFBQUJCQUFBQVFnQUFBRU1BQUFCRUFBQUFSUUFBQUVZQUFBQkhBQUFBU0FBQUFFa0FBQUJLQUFB\u0000\u0000QVN3QUFBRXdBQUFCTkFBQUFUZ0FBQUU4QUFBQlFBQUFBVVFBQUFGSUFBQUJUQUFBQVZBQUFDcUU9\u0000\u0000", string1);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(base64_1, base64_0);
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(base64_1.equals((Object)base64_0));
assertTrue(string1.equals((Object)string0));
assertNotNull(string1);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);

byte[] byteArray1 = Base64.decodeBase64("");
Base64.encodeBase64(byteArray1, true, true, (-873));
Base64.isBase64((byte)51);
Base64.isBase64(byteArray0);

[MASTER] 20:50:12.768 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'Base64_ESTest' to results/Codec-9/org.apache.commons.codec.binary.Base64/BBC-F0-opt-80/tests/5
* Done!

* Computation finished
