/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 14:26:35 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)17;
      byte byte0 = (byte)76;
      byteArray1[1] = (byte)76;
      byte byte1 = (byte)96;
      byteArray1[2] = (byte)96;
      byteArray1[3] = (byte)1;
      byte byte2 = (byte) (-1);
      byteArray1[4] = (byte) (-1);
      byteArray1[5] = (byte) (-96);
      Base64.decodeInteger(byteArray1);
      Base64 base64_0 = new Base64((byte)1, byteArray0, false);
      int int0 = 1;
      base64_0.readResults(byteArray0, (byte) (-1), (-1));
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.xor(bigInteger0);
      BigInteger bigInteger1 = bigInteger0.pow(3587);
      BigInteger bigInteger2 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64();
      BigInteger bigInteger3 = Base64.decodeInteger(byteArray0);
      bigInteger3.toByteArray();
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      bigInteger0.modPow(bigInteger1, bigInteger3);
      Base64 base64_1 = new Base64();
      Base64.decodeInteger(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_2 = new Base64(76);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      // Undeclared exception!
      Base64.encodeBase64URLSafeString(byteArray3);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte)29;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.add(bigInteger0);
      BigInteger bigInteger2 = bigInteger0.pow(1972);
      BigInteger bigInteger3 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger1);
      bigInteger1.getLowestSetBit();
      bigInteger1.toByteArray();
      // Undeclared exception!
      Base64.encodeInteger(bigInteger2);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.xor(bigInteger0);
      int int0 = 3570;
      BigInteger bigInteger1 = bigInteger0.pow(3570);
      BigInteger bigInteger2 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      int int1 = 3;
      Base64 base64_0 = new Base64(3);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      base64_0.decode(byteArray0);
      Base64.decodeInteger(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.decodeInteger(byteArray0);
      // Undeclared exception!
      Base64.decodeBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.xor(bigInteger0);
      BigInteger bigInteger1 = bigInteger0.pow(3570);
      BigInteger bigInteger2 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_0 = new Base64(3);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      // Undeclared exception!
      Base64.encodeBase64(byteArray3);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.xor(bigInteger0);
      BigInteger bigInteger1 = bigInteger0.pow(3570);
      bigInteger1.longValue();
      BigInteger bigInteger2 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(3);
      BigInteger bigInteger3 = BigInteger.ONE;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.decodeInteger(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      base64_0.decode(byteArray0, 3, 101);
      base64_0.encode(byteArray0, (-2167), (-1));
      Base64.decodeInteger(byteArray2);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger0.pow(3570);
      BigInteger bigInteger3 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger2);
      Base64 base64_0 = new Base64(3);
      Base64.decodeInteger(byteArray0);
      Base64 base64_1 = new Base64(3);
      base64_1.encode(byteArray0, 123, 123);
      base64_1.avail();
      base64_1.readResults(byteArray0, 1, 65);
      base64_1.avail();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.xor(bigInteger0);
      BigInteger bigInteger1 = bigInteger0.pow(3570);
      BigInteger bigInteger2 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(3);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.decodeInteger(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_1 = new Base64(3);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      byte[] byteArray4 = Base64.discardWhitespace(byteArray3);
      // Undeclared exception!
      base64_0.encode(byteArray4, 72, 788);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.xor(bigInteger0);
      BigInteger bigInteger1 = bigInteger0.pow(3570);
      BigInteger bigInteger2 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(3);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.decodeInteger(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_1 = new Base64(3);
      Base64.decodeBase64(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      byte[] byteArray4 = Base64.discardWhitespace(byteArray3);
      // Undeclared exception!
      base64_0.decode(byteArray4);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.xor(bigInteger0);
      BigInteger bigInteger2 = bigInteger0.pow(3570);
      bigInteger2.max(bigInteger1);
      BigInteger bigInteger3 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger2);
      Base64 base64_0 = new Base64(3);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.decodeInteger(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_1 = new Base64(3);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      byte[] byteArray4 = Base64.discardWhitespace(byteArray3);
      base64_0.decode(byteArray4);
      // Undeclared exception!
      base64_1.encode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.xor(bigInteger0);
      BigInteger bigInteger1 = bigInteger0.pow(3570);
      BigInteger bigInteger2 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(3);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.decodeInteger(byteArray1);
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      base64_0.decode(byteArray2);
      // Undeclared exception!
      Base64.decodeBase64(string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = BigInteger.TEN;
      BigInteger bigInteger3 = bigInteger0.pow(2216);
      BigInteger bigInteger4 = BigInteger.TEN;
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64((byte)0, byteArray1, true);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.decodeInteger(byteArray1);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)0;
      byteArray2[3] = (byte)0;
      base64_1.decode(byteArray2);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger3);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.xor(bigInteger0);
      BigInteger bigInteger1 = bigInteger0.pow(3570);
      BigInteger bigInteger2 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(3);
      BigInteger bigInteger3 = Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      bigInteger0.modPow(bigInteger1, bigInteger3);
      Base64 base64_1 = new Base64();
      Base64.decodeInteger(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      base64_0.decode(byteArray2, 64, 64);
      base64_0.encode(byteArray1, 18, (-2167));
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.xor(bigInteger0);
      BigInteger bigInteger1 = bigInteger0.pow(3570);
      BigInteger bigInteger2 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64();
      BigInteger bigInteger3 = Base64.decodeInteger(byteArray0);
      bigInteger3.toByteArray();
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      bigInteger0.modPow(bigInteger1, bigInteger3);
      Base64 base64_1 = new Base64();
      Base64.decodeInteger(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_2 = new Base64(76);
      Base64.encodeBase64Chunked(byteArray2);
      // Undeclared exception!
      Base64.encodeBase64String(byteArray0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.xor(bigInteger0);
      BigInteger bigInteger1 = bigInteger0.pow(3570);
      BigInteger bigInteger2 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(3);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.decodeInteger(byteArray1);
      base64_0.decode(byteArray0, 97, 3570);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte) (-50);
      byteArray2[1] = (byte) (-50);
      byteArray2[2] = (byte) (-124);
      byteArray2[3] = (byte) (-85);
      byteArray2[4] = (byte) (-88);
      byteArray2[5] = (byte)24;
      base64_0.encode(byteArray2, 3570, 4);
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.xor(bigInteger0);
      BigInteger bigInteger1 = bigInteger0.pow(3570);
      BigInteger bigInteger2 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(3570);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      Base64.decodeInteger(byteArray1);
      base64_0.decode(byteArray0, 3, 104);
      base64_0.encode(byteArray1, 104, (-2167));
      Base64.decodeInteger(byteArray2);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.xor(bigInteger0);
      BigInteger bigInteger1 = bigInteger0.pow(3570);
      BigInteger bigInteger2 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(3);
      String string0 = Base64.encodeBase64String(byteArray0);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_1 = new Base64();
      Base64.decodeInteger(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64.decodeInteger(byteArray2);
      byte[] byteArray3 = new byte[3];
      byteArray3[0] = (byte)107;
      byteArray3[1] = (byte)9;
      byteArray3[2] = (byte)30;
      Base64.encodeBase64Chunked(byteArray3);
      Base64 base64_2 = new Base64((byte)30);
      // Undeclared exception!
      base64_2.decode(string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.pow(3570);
      BigInteger bigInteger3 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger2);
      Base64 base64_0 = new Base64(3);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      base64_0.encodeToString(byteArray2);
      byte[] byteArray3 = new byte[8];
      int int0 = 3;
      Base64 base64_1 = new Base64(3);
      Base64.decodeInteger(byteArray0);
      // Undeclared exception!
      Base64.encodeBase64Chunked(byteArray2);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.xor(bigInteger0);
      BigInteger bigInteger1 = bigInteger0.pow(3570);
      BigInteger bigInteger2 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger1);
      Base64 base64_0 = new Base64(3);
      Base64.decodeInteger(byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_1 = new Base64();
      base64_0.decode(byteArray0, 64, 104);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64 base64_0 = new Base64(1965);
      base64_0.encode((byte[]) null);
      base64_0.encode((byte[]) null, 1965, (-1817));
      base64_0.decode((byte[]) null, (-2952), 47);
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, 47, 37);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.xor(bigInteger1);
      BigInteger bigInteger2 = bigInteger0.pow(3570);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger2);
      Base64 base64_0 = new Base64(14);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_1 = new Base64((-249));
      base64_1.decode(byteArray1, 14, 3);
      base64_0.encode(byteArray0, 64, 76);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.xor(bigInteger0);
      BigInteger bigInteger1 = bigInteger0.pow(3570);
      BigInteger bigInteger2 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(3);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_1 = new Base64();
      Base64.decodeInteger(byteArray1);
      Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_2 = new Base64();
      Base64.decodeInteger(byteArray1);
      // Undeclared exception!
      Base64.decodeInteger(byteArray1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.xor(bigInteger1);
      BigInteger bigInteger2 = bigInteger0.pow(3570);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger2);
      Base64 base64_0 = new Base64(3570);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Base64.isBase64(byteArray1);
      BigInteger bigInteger3 = BigInteger.ZERO;
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.xor(bigInteger1);
      BigInteger bigInteger3 = bigInteger0.pow(3570);
      BigInteger bigInteger4 = BigInteger.ONE;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger3);
      Base64 base64_0 = new Base64(61);
      Base64.decodeInteger(byteArray0);
      bigInteger3.and(bigInteger2);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      base64_0.encodeToString(byteArray0);
      Base64 base64_1 = new Base64(false);
      base64_1.encodeToString(byteArray1);
      // Undeclared exception!
      Base64.encodeBase64(byteArray0, true, true, 3570);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.xor(bigInteger1);
      BigInteger bigInteger2 = bigInteger0.pow(3570);
      BigInteger bigInteger3 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger2);
      Base64 base64_0 = new Base64(3);
      Base64.decodeInteger(byteArray0);
      Base64 base64_1 = new Base64((-1749));
      base64_1.encode(byteArray0, 123, 123);
      base64_1.avail();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Base64.isBase64((byte)61);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.xor(bigInteger1);
      BigInteger bigInteger2 = bigInteger0.pow(3570);
      BigInteger bigInteger3 = BigInteger.ONE;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger2);
      int int0 = 1;
      Base64 base64_0 = new Base64(1);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_1 = new Base64(287);
      Base64.decodeInteger(byteArray0);
      Base64.encodeBase64Chunked(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray1);
      // Undeclared exception!
      base64_1.encodeToString(byteArray1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = BigInteger.TEN;
      BigInteger bigInteger3 = bigInteger0.pow(2216);
      BigInteger bigInteger4 = BigInteger.ONE;
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64((-828));
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      base64_0.decode("");
      Base64 base64_1 = new Base64((byte)0, byteArray1, true);
      Base64.encodeBase64URLSafeString(byteArray2);
      byte[] byteArray3 = new byte[5];
      byteArray3[0] = (byte)0;
      byteArray3[3] = (byte)0;
      base64_1.decode(byteArray3);
      byte[] byteArray4 = Base64.encodeInteger(bigInteger3);
      // Undeclared exception!
      Base64.discardWhitespace(byteArray4);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Base64.isBase64((byte)60);
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, (int) (byte)60, (int) (byte)60);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, (int) (byte)7);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte) (-68), (byte)93}, byteArray1);
      
      Base64 base64_0 = new Base64((byte)7, byteArray0);
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)7;
      byteArray2[1] = (byte)7;
      byteArray2[2] = (byte) (-71);
      base64_0.encodeToString(byteArray2);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, 863, 1979);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.getLowestSetBit();
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.shortValueExact();
      bigInteger1.xor(bigInteger0);
      bigInteger1.pow((byte)121);
      BigInteger bigInteger2 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger2);
      //  // Unstable assertion: assertEquals(0, byteArray0.length);
      
      Base64 base64_0 = new Base64(0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)121;
      byteArray1[1] = (byte)121;
      byteArray1[2] = (byte)121;
      byteArray1[3] = (byte)121;
      Base64 base64_1 = new Base64();
      BigInteger bigInteger3 = Base64.decodeInteger(byteArray1);
      //  // Unstable assertion: assertEquals((short)11442, bigInteger3.shortValue());
      
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)101, (byte)88, (byte)108, (byte)53, (byte)101, (byte)81, (byte)61, (byte)61, (byte) (-68), (byte)93}, byteArray2);
      //  // Unstable assertion: assertEquals(10, byteArray2.length);
      
      Base64 base64_2 = new Base64((-439));
      base64_2.encodeToString((byte[]) null);
      int int0 = base64_1.avail();
      //  // Unstable assertion: assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-25);
      Base64 base64_0 = new Base64(40, byteArray0, true);
      Base64.encodeBase64(byteArray0);
      Base64.isBase64("$x?TY)vequ#l8F}");
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      base64_0.decode((Object) "A(WO2rC#KKy6A");
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      String string0 = base64_0.encodeToString(byteArray1);
      //  // Unstable assertion: assertEquals("QU5rQUFBRG68XQ\u0000\uFFFD\u0000\u0000\u0000\uFFFD", string0);
      
      byte[] byteArray3 = base64_0.decode(byteArray0);
      //  // Unstable assertion: assertEquals(0, byteArray3.length);
      
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray2);
      Base64.encodeBase64(byteArray2, false, false);
      byte[] byteArray5 = base64_0.decode("");
      base64_0.decode((byte[]) null);
      byte[] byteArray6 = Base64.decodeBase64(byteArray4);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)78, (byte)107, (byte)65, (byte)65, (byte)65, (byte)68, (byte)110}, byteArray6);
      
      base64_0.decode(byteArray5, 0, (-1529));
      boolean boolean0 = Base64.isBase64(byteArray4);
      //  // Unstable assertion: assertEquals(14, byteArray4.length);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.modInverse(bigInteger0);
      bigInteger1.not();
      Base64.encodeBase64Chunked((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, (int) (byte)7);
      Base64 base64_0 = new Base64();
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      //  // Unstable assertion: assertEquals(0, byteArray2.length);
      
      byte[] byteArray3 = Base64.encodeBase64((byte[]) null);
      //  // Unstable assertion: assertNull(byteArray3);
      
      Base64.encodeBase64String((byte[]) null);
      Base64.encodeBase64((byte[]) null, true, false);
      boolean boolean0 = Base64.isBase64(byteArray1);
      //  // Unstable assertion: assertFalse(boolean0);
      
      String string0 = base64_0.encodeToString(byteArray1);
      //  // Unstable assertion: assertEquals("QUFBvF0=", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(863, byteArray0);
      boolean boolean0 = Base64.isBase64((byte) (-112));
      boolean boolean1 = Base64.isBase64((byte)126);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, (int) (byte)7);
      Base64 base64_0 = new Base64();
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      boolean boolean0 = Base64.isBase64("");
      //  // Unstable assertion: assertTrue(boolean0);
      
      Base64.encodeBase64(byteArray1, false, false, 10);
      boolean boolean1 = Base64.isBase64(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte) (-68), (byte)93}, byteArray1);
      //  // Unstable assertion: assertEquals(6, byteArray1.length);
      //  // Unstable assertion: assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger0.xor(bigInteger1);
      BigInteger bigInteger3 = bigInteger0.pow(3570);
      BigInteger bigInteger4 = BigInteger.ONE;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger3);
      bigInteger2.not();
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)96;
      bigInteger3.bitCount();
      byteArray1[1] = (byte)51;
      byteArray1[2] = (byte)82;
      byteArray1[4] = (byte)82;
      byteArray1[5] = (byte)17;
      byteArray1[6] = (byte) (-121);
      byteArray1[7] = (byte)17;
      byte[] byteArray2 = base64_0.decode(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-35), (byte)20}, byteArray2);
      
      byte[] byteArray3 = Base64.discardWhitespace(byteArray0);
      assertEquals(1464, byteArray3.length);
      assertEquals(1483, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = BigInteger.TEN;
      BigInteger bigInteger3 = bigInteger0.pow(2216);
      BigInteger bigInteger4 = BigInteger.TEN;
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64();
      base64_0.decode("");
      Base64 base64_1 = new Base64((byte)0, byteArray1, true);
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte) (-1);
      byteArray2[2] = (byte) (-1);
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte) (-1);
      base64_1.decode(byteArray2);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger3);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = BigInteger.TEN;
      BigInteger bigInteger3 = bigInteger0.pow(2216);
      BigInteger bigInteger4 = BigInteger.ONE;
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64((-828));
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      base64_0.decode("");
      Base64 base64_1 = new Base64((byte)0, byteArray1, true);
      Base64.encodeBase64URLSafeString(byteArray2);
      byte[] byteArray3 = new byte[5];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte) (-1);
      byteArray3[2] = (byte) (-1);
      byteArray3[3] = (byte)0;
      byteArray3[4] = (byte) (-1);
      base64_1.decode(byteArray3);
      byte[] byteArray4 = Base64.encodeInteger(bigInteger3);
      assertEquals(11584, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.xor(bigInteger1);
      bigInteger2.shiftRight((byte)0);
      bigInteger0.pow((byte)0);
      bigInteger2.abs();
      Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64((-828));
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false, false);
      byte[] byteArray3 = base64_0.decode("");
      Base64.encodeBase64URLSafe(byteArray3);
      base64_0.hasData();
      Base64.isBase64("");
      Base64 base64_1 = new Base64();
      Base64.decodeInteger(byteArray0);
      base64_0.decode(byteArray2, (int) (byte)0, 81);
      byte[] byteArray4 = Base64.encodeBase64URLSafe(byteArray3);
      assertFalse(byteArray4.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte) (-103);
      Base64.decodeInteger(byteArray0);
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64((byte) (-94));
      base64_0.readResults(byteArray0, (byte) (-103), 0);
      Base64.isBase64(") than the specified maxium size of ");
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, (int) (byte)7);
      Base64 base64_0 = new Base64();
      boolean boolean0 = Base64.isBase64(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte) (-1), (byte) (-1)}, byteArray1);
      //  // Unstable assertion: assertFalse(boolean0);
      
      base64_0.decode(byteArray0, (int) (byte)7, 0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)121;
      byte[] byteArray1 = new byte[3];
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64.decodeInteger(byteArray0);
      base64_0.readResults(byteArray1, 1244, (byte)121);
      boolean boolean0 = Base64.isBase64("gqYZ8l43{qMf5~[ m){");
      assertFalse(boolean0);
      
      Base64.decodeInteger(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65}, byteArray3);
      
      byte[] byteArray4 = new byte[5];
      byteArray4[0] = (byte)121;
      byteArray4[1] = (byte)121;
      byteArray4[2] = (byte)121;
      byteArray4[3] = (byte)121;
      byteArray4[4] = (byte)121;
      BigInteger bigInteger1 = new BigInteger(byteArray4);
      byte[] byteArray5 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(0, byteArray5.length);
      
      boolean boolean1 = Base64.isBase64((byte)121);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64 base64_0 = new Base64(0, byteArray0);
      base64_0.encode(byteArray0, 0, 0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      bigInteger0.not();
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1)}, byteArray3);
      
      base64_0.decode(byteArray1, 26, 0);
      //  // Unstable assertion: assertEquals(0, byteArray1.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64.decodeBase64("?wp_lIaGTzciy?");
      Base64 base64_0 = new Base64(3502, byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 0, (int) (byte)92);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)37;
      Base64.encodeBase64Chunked(byteArray0);
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      boolean boolean0 = true;
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray1, (int) (byte) (-1), (int) (byte) (-1));
      Base64.decodeInteger(byteArray1);
      Base64.decodeInteger(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, (byte) (-1), (byte) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-1);
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.xor(bigInteger1);
      bigInteger0.pow(2216);
      bigInteger0.abs();
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(2216);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.decodeBase64(byteArray0);
      Base64.isBase64("");
      Base64.decodeInteger(byteArray1);
      Base64.encodeBase64((byte[]) null, false);
      BigInteger bigInteger2 = null;
      try {
        bigInteger2 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = Base64.isBase64(":MX3]oSfT_");
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)61, (byte)62, (byte) (-14)}, byteArray2);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.xor(bigInteger0);
      BigInteger bigInteger2 = bigInteger1.pow(2212);
      BigInteger bigInteger3 = bigInteger2.abs();
      byte[] byteArray3 = Base64.encodeInteger(bigInteger3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray3);
      
      Base64 base64_0 = new Base64(2212);
      Base64.decodeBase64(byteArray1);
      byte[] byteArray4 = Base64.encodeBase64(byteArray1, true, true);
      byte[] byteArray5 = base64_0.decode("o~a`?$-IF");
      byte[] byteArray6 = Base64.decodeBase64(byteArray4);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)61}, byteArray6);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)81, (byte)85, (byte)70, (byte)66, (byte)80, (byte)81, (byte)62, (byte) (-14)}, byteArray4);
      //  // Unstable assertion: assertEquals(8, byteArray4.length);
      
      base64_0.decode((Object) "o~a`?$-IF");
      base64_0.decode(byteArray5, (-1212), 1689);
      byte[] byteArray7 = base64_0.decode("i{-Vx{");
      //  // Unstable assertion: assertEquals(3, byteArray7.length);
      
      boolean boolean1 = base64_0.hasData();
      //  // Unstable assertion: assertFalse(boolean1);
      
      Base64.encodeBase64URLSafeString((byte[]) null);
      boolean boolean2 = Base64.isBase64("AAA=");
      //  // Unstable assertion: assertFalse(boolean2 == boolean0);
      
      byte[] byteArray8 = base64_0.decode(byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray8);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-1);
      byteArray0[0] = (byte) (-1);
      byte byte1 = (byte)92;
      byteArray0[1] = (byte)92;
      byte byte2 = (byte)0;
      byteArray0[2] = (byte)0;
      byte byte3 = (byte)0;
      byteArray0[3] = (byte)0;
      byte byte4 = (byte)1;
      boolean boolean0 = true;
      Base64 base64_0 = new Base64((byte)0, byteArray0, true);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 0, 47);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.longValueExact();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      BigInteger bigInteger1 = new BigInteger(byteArray1);
      bigInteger1.shiftRight(114);
      bigInteger1.longValue();
      BigInteger bigInteger2 = bigInteger0.divide(bigInteger1);
      String string0 = Base64.encodeBase64String(byteArray1);
      assertEquals("Cg==", string0);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64("11-}Ht6v;=0{0]%B");
      Base64 base64_0 = new Base64(false);
      BigInteger bigInteger3 = BigInteger.ZERO;
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger3);
      assertEquals(0, byteArray3.length);
      
      Base64.isBase64((byte)92);
      Base64.encodeInteger(bigInteger2);
      byte[] byteArray4 = base64_0.decode(byteArray2);
      assertArrayEquals(new byte[] {(byte)10}, byteArray4);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64.isBase64(":MX3]oSfT_");
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)32;
      byteArray2[1] = (byte)118;
      byteArray2[2] = (byte) (-12);
      byteArray2[3] = (byte)80;
      byteArray2[4] = (byte)73;
      Base64.decodeBase64(byteArray1);
      Base64.decodeInteger(byteArray2);
      Base64.decodeInteger(byteArray0);
      base64_0.readResults(byteArray2, (byte)80, 1034);
      Base64.isBase64("org.apache.commons.codec.DecoderException");
      Base64.encodeBase64(byteArray0);
      byte[] byteArray3 = new byte[5];
      byteArray3[0] = (byte)91;
      byteArray3[1] = (byte)80;
      byteArray3[2] = (byte)32;
      byteArray3[3] = (byte)118;
      byteArray3[4] = (byte)73;
      Base64.decodeInteger(byteArray3);
      Base64.encodeBase64(byteArray1, false);
      base64_0.encode(byteArray1);
      base64_0.isUrlSafe();
      base64_0.hasData();
      byte[] byteArray4 = base64_0.decode("");
      assertFalse(byteArray4.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger1.xor(bigInteger0);
      BigInteger bigInteger3 = bigInteger0.pow(2216);
      BigInteger bigInteger4 = bigInteger3.abs();
      byte[] byteArray1 = Base64.encodeInteger(bigInteger4);
      Base64 base64_0 = new Base64(2216);
      Base64.decodeBase64(byteArray0);
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      //  // Unstable assertion: assertEquals(1228, byteArray1.length);
      //  // Unstable assertion: assertEquals(1640, byteArray2.length);
      
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray0);
      boolean boolean0 = Base64.isArrayByteBase64(byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)61, (byte) (-1), (byte)92}, byteArray3);
      //  // Unstable assertion: assertFalse(boolean0);
      
      Base64 base64_1 = new Base64(true);
      BigInteger bigInteger5 = BigInteger.ZERO;
      byte[] byteArray4 = Base64.toIntegerBytes(bigInteger2);
      //  // Unstable assertion: assertEquals(0, byteArray4.length);
      
      boolean boolean1 = Base64.isBase64((byte)0);
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.testBit((byte)1);
      bigInteger0.xor(bigInteger1);
      bigInteger0.pow((byte)0);
      bigInteger0.abs();
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64((-828));
      String string0 = Base64.encodeBase64String(byteArray1);
      assertEquals("Q2c9PQ==", string0);
      
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, true, true);
      byte[] byteArray4 = base64_0.decode("");
      Base64.encodeBase64URLSafe(byteArray4);
      boolean boolean0 = base64_0.hasData();
      assertFalse(boolean0);
      
      byte[] byteArray5 = Base64.encodeBase64(byteArray4);
      assertEquals(0, byteArray5.length);
      
      base64_0.encode(byteArray2, 2645, (-828));
      base64_0.decode(byteArray1, (int) (byte)0, (int) (byte) (-1));
      byte[] byteArray6 = Base64.encodeBase64URLSafe(byteArray3);
      assertEquals(12, byteArray6.length);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64.isBase64(":MX3]oSfT_");
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isArrayByteBase64(byteArray1);
      Base64 base64_0 = new Base64(false);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byte[] byteArray1 = Base64.decodeBase64("?wp_lIaGTzciy?");
      Base64 base64_0 = new Base64(276, byteArray1);
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)92;
      byteArray2[1] = (byte)92;
      byteArray2[2] = (byte)92;
      byteArray2[3] = (byte)92;
      byteArray2[4] = (byte)92;
      byteArray2[5] = (byte)94;
      byteArray2[6] = (byte)92;
      base64_0.encode(byteArray2, (int) (byte)92, (int) (byte) (-1));
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(1, byteArray3.length);
      
      bigInteger0.not();
      byte[] byteArray4 = Base64.discardWhitespace(byteArray2);
      assertArrayEquals(new byte[] {(byte)92, (byte)92, (byte)92, (byte)92, (byte)92, (byte)94, (byte)92}, byteArray4);
      
      boolean boolean0 = base64_0.hasData();
      assertArrayEquals(new byte[] {(byte) (-62), (byte) (-97), (byte) (-27), (byte)33, (byte) (-95), (byte) (-109), (byte) (-51), (byte) (-56), (byte) (-78)}, byteArray1);
      assertEquals(9, byteArray1.length);
      assertFalse(base64_0.isUrlSafe());
      
      boolean boolean1 = Base64.isBase64(byteArray2);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = false;
      int int0 = 8192;
      Base64.encodeBase64(byteArray0, false, false, 8192);
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 8, 2043);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.shiftRight(41);
      BigInteger bigInteger2 = bigInteger0.nextProbablePrime();
      BigInteger bigInteger3 = new BigInteger(byteArray0);
      bigInteger3.longValue();
      BigInteger bigInteger4 = BigInteger.TEN;
      bigInteger4.intValue();
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeInteger(bigInteger4);
      Base64 base64_0 = new Base64();
      BigInteger bigInteger5 = BigInteger.TEN;
      bigInteger0.testBit((byte)92);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      BigInteger bigInteger6 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger2);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte) (-1);
      byteArray2[2] = (byte)92;
      byteArray2[3] = (byte)92;
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64.isArrayByteBase64(byteArray1);
      try { 
        base64_0.encode((Object) bigInteger1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)1;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.xor(bigInteger0);
      BigInteger bigInteger2 = bigInteger0.pow(2216);
      BigInteger bigInteger3 = bigInteger2.abs();
      byte[] byteArray1 = Base64.encodeInteger(bigInteger3);
      int int0 = (-828);
      Base64 base64_0 = new Base64(2216);
      Base64.decodeBase64(byteArray0);
      Base64.encodeBase64(byteArray1, true, true);
      base64_0.decode((String) null);
      Base64.encodeBase64URLSafe(byteArray1);
      base64_0.hasData();
      Base64.encodeBase64(byteArray0);
      Base64.isBase64((byte) (-3));
      Base64 base64_1 = null;
      try {
        base64_1 = new Base64(1530, byteArray1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [AqAopg7FCgeDJ1tKcz/pe+AOS8pKNBMu57zx6IXCzaDlxPYE/SGH+38+l3AgdfOfRNw8u6YBCw4BOqz9/pOXmypGkkOUGS8zSGgUZ5QYuLK4Z+XJdPmfKNYQ/V7mehQTLiyj/1puBxB9i9jwOY0AvKMLqNm7FBTp7Rw/bFwVjQUrfOky9JuNuytC6xgmHvw/scENTnT28sMQHt7gCFicvPzeOvd2EbZo3t78qVv+5Yg5kZCo5TmaBnXgXgRmq12MVoVQmfYz5+0njHqCPEmBm+v8mlAsHG2lOoPQUdtCLQCJHMgzd4yEp3TS+Sq75en52GxV4LNPebsi5K3PcTc1M9HUos+G1aHqmafB49ljXLnkMQFBU/tf4tRIN7kCSwOAL1Kk9gqDwybrmOlAcO1SpeNlyBO+k+LgxJfB7pcX1vIS3qfrzuLm7cyLFj37erCGVwMQ3k4jatzxGGi9PzNrI5v319Qlv7Myx0LozqvGfGw5Orw5MWH0dnOy6dC+iok2yyQUHry9FVqjPSFQ1QkFOpaXnziD/f1Iatj/pZstA2Stsw1CqRMufg0JFRwtMwlxEAkkI9q2WbmdVuMRpDzkLx4z+xitwp1Lxm0cPz+hk6xXFkF2WsWGjoPPQ4TURiLXkMBbekUy/zzHetfBqCLYwR/SeNdoqx9eLAQV9ggZ5GuSWiYk/wI7zXDn/gCIjFUPUJk3wtU+Pp4DfJKnr7fuRPDDNZWiUnc/RC5mOxHxf2tCuvIb8dWC4h9gghMk/w4rMhvxTG3JUrCRRsV0aVfHm9BOqJaHhatoi2bZehX9pbmM/pmvBUSbOGiRqUsjFgfICEmBdlM0JNqFQb7p8H3iHAjkU2EAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Base64.isBase64("[zI E&2~cR-&");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte)26;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)92;
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("ATMPihoBXA==", string0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      assertEquals(18, byteArray2.length);
      
      boolean boolean0 = Base64.isArrayByteBase64(byteArray1);
      assertTrue(boolean0);
      assertEquals(12, byteArray1.length);
      
      Base64 base64_0 = new Base64((-3870));
      Base64 base64_1 = new Base64(true);
      Object object0 = base64_1.decode((Object) "[zI E&2~cR-&");
      Object object1 = base64_0.decode(object0);
      assertNotSame(object0, object1);
      
      int int0 = base64_0.avail();
      assertEquals(0, int0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(0, byteArray3.length);
      
      Base64.encodeBase64Chunked((byte[]) null);
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray1);
      assertEquals((short)348, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64();
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)0;
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.not();
      Base64 base64_1 = new Base64((-2818), byteArray1);
      Base64 base64_2 = new Base64(64);
      byte[] byteArray3 = base64_2.decode(byteArray2);
      //  // Unstable assertion: assertFalse(base64_2.isUrlSafe());
      //  // Unstable assertion: assertEquals(0, byteArray3.length);
      
      byte[] byteArray4 = Base64.discardWhitespace(byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-1), (byte)92}, byteArray4);
      
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray2);
      //  // Unstable assertion: assertEquals((byte)0, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)92;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(true);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.decodeInteger(byteArray1);
      int int0 = Base64.PEM_CHUNK_SIZE;
      Base64.isBase64("Parameter supplied to Base64 encode is not a byte[]");
      Base64.decodeInteger(byteArray1);
      Base64.encodeBase64(byteArray0, true);
      Base64 base64_1 = new Base64(76, byteArray0, true);
      base64_1.encode(byteArray0);
      Base64 base64_2 = new Base64(true);
      base64_2.isUrlSafe();
      base64_0.hasData();
      Base64 base64_3 = new Base64();
      base64_3.encodeToString(byteArray0);
      Base64.decodeInteger(byteArray1);
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64URLSafeString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.xor(bigInteger1);
      bigInteger0.pow(2216);
      bigInteger0.abs();
      Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64((-828));
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true, true);
      byte[] byteArray3 = base64_0.decode("");
      Base64.encodeBase64URLSafe(byteArray3);
      base64_0.hasData();
      Base64.encodeBase64(byteArray3);
      Base64.isBase64((byte)1);
      Base64 base64_1 = new Base64((byte) (-1), byteArray1, true);
      Base64.decodeInteger(byteArray0);
      base64_1.encode(byteArray0, 54, (int) (byte)0);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray2, (int) (byte)0, 81);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.shiftRight((byte) (-1));
      BigInteger bigInteger2 = bigInteger1.nextProbablePrime();
      bigInteger2.longValue();
      BigInteger bigInteger3 = bigInteger0.divide(bigInteger1);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger3);
      Base64 base64_0 = new Base64();
      BigInteger bigInteger4 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger2);
      BigInteger bigInteger5 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.isArrayByteBase64(byteArray0);
      try { 
        base64_0.encode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)7;
      Base64.encodeBase64(byteArray0, true, true, (int) (byte)7);
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0, 57, 0);
      base64_0.decode("");
      base64_0.readResults(byteArray0, 1607, 8192);
      base64_0.decode("");
      base64_0.isUrlSafe();
      Base64.decodeBase64("");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Base64.isBase64("[zI E&2~cR-&");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte)26;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)92;
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.encodeBase64Chunked(byteArray1);
      Base64.isArrayByteBase64(byteArray1);
      Base64 base64_0 = new Base64((-3870));
      Base64 base64_1 = new Base64(true);
      Object object0 = base64_1.decode((Object) "[zI E&2~cR-&");
      base64_0.decode(object0);
      base64_0.avail();
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64((byte)26);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64 base64_0 = new Base64((-828));
      base64_0.encode((byte[]) null);
      byte[] byteArray0 = base64_0.decode("");
      base64_0.decode((Object) "");
      byte[] byteArray1 = base64_0.decode("lineSeperator must not contain base64 characters: [");
      base64_0.hasData();
      Base64.isBase64("");
      base64_0.encode(byteArray1);
      Base64.encodeBase64Chunked(byteArray0);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Base64 base64_0 = new Base64((-2353), (byte[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-9);
      byteArray0[3] = (byte)1;
      base64_0.decode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)121;
      Base64.encodeBase64(byteArray0);
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.xor(bigInteger1);
      bigInteger0.pow(2216);
      BigInteger bigInteger2 = bigInteger0.abs();
      Base64 base64_0 = new Base64((-828));
      Base64.decodeBase64(byteArray0);
      Base64.encodeBase64(byteArray0, true, true);
      String string0 = "";
      base64_0.decode("");
      Base64.encodeInteger(bigInteger2);
      base64_0.decode((Object) "");
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)0, 1689);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.longValueExact();
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.decodeBase64("11-}Ht6v;=0{0]%B");
      BigInteger bigInteger1 = new BigInteger(byteArray1);
      bigInteger1.shiftRight(114);
      bigInteger0.nextProbablePrime();
      bigInteger1.longValue();
      Base64 base64_0 = new Base64(114);
      byte[] byteArray2 = base64_0.decode("11-}Ht6v;=0{0]%B");
      byte[] byteArray3 = base64_0.decode(byteArray2);
      byte[] byteArray4 = base64_0.decode(byteArray2);
      byte[] byteArray5 = base64_0.decode(byteArray1);
      Base64.encodeBase64URLSafe(byteArray4);
      base64_0.hasData();
      Base64.encodeBase64(byteArray3);
      Base64.isBase64((byte) (-28));
      base64_0.encode(byteArray5, 1073741824, 0);
      base64_0.decode(byteArray1, (int) (byte) (-28), 638);
      Base64.encodeBase64URLSafe(byteArray3);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = new byte[0];
      base64_0.readResults(byteArray1, 0, 28);
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      base64_0.readResults((byte[]) null, (byte)125, 745);
      Base64.encodeBase64(byteArray2, true, true);
      Base64.encodeBase64String(byteArray0);
      base64_0.decode("ISO-8859-1");
      byte[] byteArray3 = new byte[3];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte)125;
      byteArray3[2] = (byte)0;
      Base64.encodeBase64(byteArray3);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte) (-101);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      bigInteger0.toString();
      byteArray0[2] = (byte) (-1);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      Base64.isBase64((byte) (-82));
      Base64 base64_1 = new Base64();
      BigInteger bigInteger1 = BigInteger.TEN;
      Base64.decodeBase64("1");
      base64_0.decode("Dm{M4c y~e%$L.e");
      BigInteger bigInteger2 = BigInteger.TEN;
      BigInteger bigInteger3 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger3);
      Base64.encodeBase64URLSafeString(byteArray2);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64();
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)11;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)19;
      byteArray2[4] = (byte)0;
      base64_0.encode(byteArray2, (int) (byte)11, (int) (byte)0);
      byteArray2[5] = (byte)0;
      byteArray2[6] = (byte)0;
      base64_0.decode((String) null);
      base64_0.readResults(byteArray2, (-1780), 2313);
      base64_0.decode("RrH@K^zU#2g_S");
      base64_0.isUrlSafe();
      Base64.decodeBase64("Parameter supplied to Base64 encode is not a byte[]");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Base64.isBase64(")u.'yS(");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-64);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      bigInteger0.not();
      Base64 base64_0 = new Base64(1708, byteArray0);
      base64_0.decode(byteArray0);
      Base64.discardWhitespace(byteArray1);
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)1;
      byteArray2[1] = (byte) (-66);
      byteArray2[2] = (byte) (-64);
      byteArray2[3] = (byte) (-64);
      byteArray2[4] = (byte)1;
      byteArray2[5] = (byte) (-66);
      byteArray2[6] = (byte) (-64);
      byteArray2[7] = (byte) (-64);
      Base64.decodeInteger(byteArray2);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(0, byteArray0);
      base64_0.encode(byteArray0, 0, 0);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeBase64(byteArray0);
      Base64.isBase64((byte)101);
      Base64 base64_1 = new Base64();
      BigInteger bigInteger1 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      Base64 base64_2 = new Base64(true);
      base64_2.decode("US-ASCII");
      BigInteger bigInteger2 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger1);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)101;
      byteArray1[1] = (byte)101;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)101;
      byteArray1[4] = (byte)101;
      Base64.encodeBase64URLSafeString(byteArray1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(0, byteArray0);
      base64_0.encode(byteArray0, 0, 0);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      bigInteger0.not();
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      base64_0.avail();
      byte[] byteArray0 = new byte[0];
      Base64 base64_1 = new Base64((-1469), byteArray0);
      Base64 base64_2 = new Base64(780);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      Object object0 = new Object();
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.pow(64);
      Base64.encodeBase64(byteArray2, true, true, 0);
      Base64.toIntegerBytes(bigInteger1);
      try { 
        base64_2.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(true);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte) (-12);
      byteArray2[1] = (byte)52;
      byteArray2[2] = (byte)34;
      byteArray2[3] = (byte)77;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.multiply(bigInteger1);
      byteArray2[4] = (byte) (-1);
      byteArray2[5] = (byte)0;
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray2);
      assertArrayEquals(new byte[] {(byte)57, (byte)68, (byte)81, (byte)105, (byte)84, (byte)102, (byte)56, (byte)65}, byteArray3);
      
      BigInteger bigInteger2 = Base64.decodeInteger(byteArray1);
      base64_0.readResults(byteArray0, (-607), 1365);
      boolean boolean0 = Base64.isBase64("0*dg");
      assertFalse(boolean0);
      
      Base64.decodeInteger(byteArray1);
      Base64.encodeBase64(byteArray0, true);
      base64_0.encode(byteArray1);
      base64_0.hasData();
      base64_0.encodeToString(byteArray0);
      assertTrue(base64_0.isUrlSafe());
      
      Base64.toIntegerBytes(bigInteger2);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray4 = Base64.encodeInteger(bigInteger0);
      assertEquals(0, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte) (-101);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      bigInteger0.toString();
      byteArray0[2] = (byte) (-1);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = base64_0.decode("-?:@>6Hnf6]fM6O'F");
      byte[] byteArray3 = base64_0.decode(byteArray2);
      byte[] byteArray4 = base64_0.decode(byteArray3);
      byte[] byteArray5 = base64_0.decode(byteArray4);
      Base64.encodeBase64URLSafe(byteArray0);
      base64_0.hasData();
      Base64.encodeBase64(byteArray1);
      Base64.isBase64((byte) (-101));
      int int0 = 0;
      int int1 = 638;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray5, 0, 638);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Base64.isBase64((byte) (-69));
      byte[] byteArray0 = null;
      Base64.encodeBase64((byte[]) null);
      int int0 = 0;
      Base64.encodeBase64((byte[]) null, true, false, 0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.xor(bigInteger1);
      BigInteger bigInteger2 = null;
      try {
        bigInteger2 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)17;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      String string0 = "org.apache.commons.codec.DecoderException";
      Base64.isBase64("org.apache.commons.codec.DecoderException");
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, true);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)17, byteArray2, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [CAAR]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)31;
      byteArray0[6] = (byte)30;
      byteArray0[7] = (byte) (-84);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((short)196, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Base64 base64_0 = new Base64();
      String string0 = "";
      byte[] byteArray0 = base64_0.decode("");
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      base64_0.encodeToString(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      base64_0.encodeToString(byteArray1);
      Base64.encodeBase64(byteArray1, true, true);
      base64_0.encodeToString(byteArray2);
      base64_0.decode("uYH2&;7sl");
      Base64.decodeBase64((String) null);
      base64_0.avail();
      base64_0.decode(byteArray1);
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64.encodeBase64((byte[]) null, false, false);
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)107;
      Base64.encodeBase64(byteArray0, false, false);
      byteArray0[1] = (byte)31;
      Base64.isBase64(")N8e]IXC9YOWyoz%");
      byteArray0[2] = (byte) (-105);
      Base64.encodeBase64(byteArray0, false);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-26);
      base64_0.encode(byteArray0);
      String string0 = "";
      Base64.isBase64("");
      Object object0 = null;
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(true);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte) (-12);
      byteArray2[1] = (byte)52;
      byteArray2[2] = (byte)34;
      byteArray2[3] = (byte)77;
      byteArray2[4] = (byte) (-1);
      byteArray2[5] = (byte)0;
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray2);
      assertArrayEquals(new byte[] {(byte)57, (byte)68, (byte)81, (byte)105, (byte)84, (byte)102, (byte)56, (byte)65}, byteArray3);
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      base64_0.readResults(byteArray0, (-607), 1365);
      boolean boolean0 = Base64.isBase64("0*dg");
      Base64.decodeInteger(byteArray1);
      byte[] byteArray4 = Base64.encodeBase64(byteArray0, true);
      base64_0.encode(byteArray1);
      boolean boolean1 = base64_0.isUrlSafe();
      assertFalse(boolean1 == boolean0);
      
      base64_0.hasData();
      base64_0.encodeToString(byteArray0);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray5 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray5.length);
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("", string0);
      assertSame(byteArray0, byteArray4);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 4113, 4113);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4113
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(863, byteArray0);
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("", string0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.longValueExact();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.decodeBase64("11-}Ht6v;=0{0]%B");
      BigInteger bigInteger1 = new BigInteger(byteArray1);
      bigInteger1.shiftRight(114);
      bigInteger0.nextProbablePrime();
      bigInteger1.longValue();
      bigInteger0.divide(bigInteger1);
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64((-654));
      base64_0.decode(byteArray2, (-654), (-654));
      Base64.isBase64((byte) (-111));
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("Q2c9PQ", string0);
      
      String string1 = Base64.encodeBase64URLSafeString(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-41), (byte)95, (byte) (-121), (byte) (-73), (byte) (-85)}, byteArray1);
      assertEquals("11-Ht6s", string1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte) (-91);
      base64_0.encode(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      base64_0.readResults(byteArray0, (byte) (-91), (byte) (-91));
      byteArray0[4] = (byte) (-83);
      bigInteger0.intValueExact();
      base64_0.decode("[B?");
      byteArray0[5] = (byte)0;
      Base64.decodeInteger(byteArray1);
      byteArray0[6] = (byte)106;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)3;
      Base64.decodeBase64(byteArray0);
      base64_0.decode((Object) "[B?");
      base64_0.decode(byteArray0);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64(byteArray2);
      Base64.isBase64(byteArray0);
      boolean boolean0 = base64_0.hasData();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Base64 base64_0 = new Base64((-2424));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte) (-13);
      byteArray0[5] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.isBase64("org.apache.commons.codec.DecoderException");
      byte[] byteArray1 = Base64.decodeBase64("");
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Base64 base64_0 = new Base64(2967);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)0;
      int int0 = base64_0.readResults(byteArray0, 2423, (byte)0);
      assertEquals(0, int0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)92;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertEquals(10, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)101, (byte)82, (byte)54, (byte)50, (byte)95, (byte)119, (byte)68, (byte)95, (byte)88, (byte)65}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray0 = Base64.decodeBase64((String) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = 75;
      Base64 base64_0 = new Base64(75);
      BigInteger bigInteger0 = BigInteger.valueOf((-1461L));
      Base64.toIntegerBytes(bigInteger0);
      Object object0 = base64_0.decode((Object) "");
      Object object1 = base64_0.encode(object0);
      base64_0.encode(object1);
      byte[] byteArray0 = new byte[0];
      Base64.isBase64("");
      Object object2 = base64_0.encode(object1);
      Object object3 = base64_0.decode(object2);
      base64_0.decode(object3);
      int int1 = 468;
      BigInteger bigInteger1 = null;
      try {
        bigInteger1 = new BigInteger(byteArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-25);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(40, byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [/\uFFFD\u0000\u0000\u0000\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.longValueExact();
      bigInteger0.testBit(0);
      bigInteger0.modPow(bigInteger1, bigInteger1);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.isArrayByteBase64(byteArray0);
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Base64.isBase64(")u.'yS(");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-64);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertEquals(8, byteArray1.length);
      
      boolean boolean0 = Base64.isBase64((byte)101);
      assertTrue(boolean0);
      
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray2 = base64_0.decode(")u.'yS(");
      assertArrayEquals(new byte[] {(byte) (-69), (byte)36}, byteArray2);
      
      BigInteger bigInteger1 = BigInteger.TEN;
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger1);
      String string0 = Base64.encodeBase64URLSafeString(byteArray3);
      assertEquals("Cg", string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      Base64.decodeBase64("?wp_lIaGTzciy?");
      base64_0.readResults((byte[]) null, 0, (-1));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)125;
      Base64.decodeBase64((byte[]) null);
      byteArray0[3] = (byte)0;
      base64_0.readResults((byte[]) null, 0, 0);
      Base64.encodeBase64(byteArray0, false, true);
      Base64.encodeBase64String(byteArray0);
      base64_0.decode("|et+LU1OJMM:s");
      byte[] byteArray1 = Base64.encodeBase64((byte[]) null);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.xor(bigInteger1);
      bigInteger0.pow(2216);
      bigInteger0.abs();
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64((-828));
      Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true, true);
      byte[] byteArray3 = base64_0.decode("");
      byte[] byteArray4 = Base64.decodeBase64(byteArray1);
      assertArrayEquals(new byte[] {(byte)92, (byte)0, (byte)0, (byte)1}, byteArray4);
      
      base64_0.decode((Object) "");
      base64_0.decode(byteArray1, (int) (byte)0, 1689);
      byte[] byteArray5 = base64_0.decode("lineSeperator must not contain base64 characters: [");
      boolean boolean0 = base64_0.hasData();
      assertFalse(boolean0);
      
      Base64.isBase64("");
      base64_0.encode(byteArray5);
      byte[] byteArray6 = base64_0.decode(byteArray2);
      assertEquals(9, byteArray2.length);
      assertEquals(5, byteArray6.length);
      
      byte[] byteArray7 = Base64.encodeBase64Chunked(byteArray3);
      assertEquals(0, byteArray7.length);
      
      int int0 = base64_0.avail();
      assertEquals(0, int0);
      
      Base64.decodeBase64(byteArray1);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)88, (byte)65, (byte)65, (byte)65, (byte)65, (byte)81, (byte)61, (byte)61}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Base64 base64_0 = new Base64((-1));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byte[] byteArray1 = base64_0.decode(byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(0, byteArray0);
      base64_0.encode(byteArray0, 0, 0);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      bigInteger0.not();
      byte[] byteArray2 = base64_0.decode(byteArray1);
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(0, byteArray3.length);
      assertNotSame(byteArray3, byteArray2);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Base64 base64_0 = new Base64();
      String string0 = "Parameter supplied to Base64 decode is not a byte[] or a String";
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.valueOf(64);
      BigInteger bigInteger2 = BigInteger.ZERO;
      bigInteger1.xor(bigInteger2);
      bigInteger0.flipBit(64);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        bigInteger1.clearBit((-1));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Negative bit address
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-88);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)0);
      base64_0.encodeToString(byteArray0);
      base64_0.encode(byteArray0, 0, (int) (byte)40);
      base64_0.encodeToString(byteArray1);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, false, true, (-333));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (18) than the specified maxium size of -333
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)56;
      byteArray0[7] = (byte)0;
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD\uFFFD\u0000\u0000\u0000\uFFFD8\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-51);
      byteArray0[0] = (byte) (-51);
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)48;
      byte byte2 = (byte)1;
      byteArray0[3] = (byte)1;
      byte byte3 = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-78);
      byte byte4 = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-20);
      byteArray0[8] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64((-2353));
      base64_0.readResults(byteArray0, 0, 57);
      base64_0.decode("zQAwAQCyAOwA");
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.longValueExact();
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      assertFalse(byteArray2.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      base64_0.avail();
      byte[] byteArray0 = new byte[0];
      Base64 base64_1 = new Base64((-1469), byteArray0);
      Base64 base64_2 = new Base64(780);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeBase64(byteArray0, true);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Object object0 = new Object();
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.pow(64);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, true, true, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }
}
