/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 01:06:05 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[124];
      Base64 base64_0 = new Base64(4, byteArray0, true);
      assertEquals(124, byteArray0.length);
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertTrue(base64_0.isUrlSafe());
      
      base64_0.encode(byteArray0, 4, 76);
      assertEquals(124, byteArray0.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertTrue(base64_0.isUrlSafe());
      
      base64_0.encode(byteArray0, 4, 4);
      assertEquals(124, byteArray0.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertTrue(base64_0.isUrlSafe());
      
      int int0 = base64_0.readResults(byteArray0, 109, 4);
      assertEquals(124, byteArray0.length);
      assertEquals(4, int0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertTrue(base64_0.isUrlSafe());
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      assertEquals(124, byteArray0.length);
      assertEquals(172, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = Base64.decodeBase64("nUwM`");
      assertEquals(3, byteArray2.length);
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-99), (byte)76, (byte)12}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      base64_0.encode(byteArray0, 4, 109);
      assertEquals(124, byteArray0.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertTrue(base64_0.isUrlSafe());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals(124, byteArray0.length);
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      assertEquals(124, byteArray0.length);
      assertEquals(20, byteArray3.length);
      assertNotNull(byteArray3);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      
      base64_0.decode(byteArray0, 4, 109);
      assertEquals(124, byteArray0.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertTrue(base64_0.isUrlSafe());
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      
      byte[] byteArray4 = new byte[4];
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray3));
      
      byteArray4[0] = (byte)10;
      byteArray4[1] = (byte)16;
      byteArray0[94] = (byte) (-126);
      BigInteger bigInteger1 = new BigInteger(byteArray4);
      assertEquals(4, byteArray4.length);
      assertNotNull(bigInteger1);
      assertArrayEquals(new byte[] {(byte)10, (byte)16, (byte)0, (byte)0}, byteArray4);
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      base64_0.encode(byteArray0, 8192, (-1446));
      assertEquals(124, byteArray0.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray2);
      assertTrue(base64_0.isUrlSafe());
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray2));
      
      base64_0.encode(byteArray3, (int) (byte) (-126), 1995);
      assertEquals(124, byteArray0.length);
      assertEquals(20, byteArray3.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray3, byteArray2);
      assertTrue(base64_0.isUrlSafe());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray4));
      assertFalse(byteArray3.equals((Object)byteArray2));
      
      base64_0.decode(byteArray0, (-1446), 86);
      assertEquals(124, byteArray0.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray2);
      assertTrue(base64_0.isUrlSafe());
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray2));
      
      Random.setNextRandom((byte)10);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[124];
      Base64 base64_0 = new Base64(4, byteArray0, false);
      assertEquals(124, byteArray0.length);
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      base64_0.encode(byteArray0, 4, 76);
      assertEquals(124, byteArray0.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      base64_0.encode(byteArray0, 4, 4);
      assertEquals(124, byteArray0.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      base64_0.encode(byteArray0, 4, 109);
      assertEquals(124, byteArray0.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      base64_0.decode(byteArray0, 4, 109);
      assertEquals(124, byteArray0.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      base64_0.encode(byteArray0, 45, (-1950));
      assertEquals(124, byteArray0.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[124];
      Base64 base64_0 = new Base64(4, byteArray0, true);
      assertEquals(124, byteArray0.length);
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertTrue(base64_0.isUrlSafe());
      
      base64_0.encode(byteArray0, 4, 76);
      assertEquals(124, byteArray0.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertTrue(base64_0.isUrlSafe());
      
      base64_0.encode(byteArray0, 4, 4);
      assertEquals(124, byteArray0.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertTrue(base64_0.isUrlSafe());
      
      int int0 = base64_0.readResults(byteArray0, 4, 4);
      assertEquals(124, byteArray0.length);
      assertEquals(4, int0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertTrue(base64_0.isUrlSafe());
      
      base64_0.encode(byteArray0, 4, 109);
      assertEquals(124, byteArray0.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertTrue(base64_0.isUrlSafe());
      
      base64_0.decode(byteArray0, 4, 76);
      assertEquals(124, byteArray0.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertTrue(base64_0.isUrlSafe());
      
      int int1 = base64_0.avail();
      assertEquals(124, byteArray0.length);
      assertEquals(8063, int1);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertTrue(base64_0.isUrlSafe());
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[74];
      Base64 base64_0 = new Base64(10, byteArray0, true);
      //  // Unstable assertion: assertEquals(74, byteArray0.length);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-98), (byte) (-94)}, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = base64_0.encode(byteArray0);
      //  // Unstable assertion: assertEquals(74, byteArray0.length);
      //  // Unstable assertion: assertEquals(1061, byteArray2.length);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray2);
      //  // Unstable assertion: assertEquals(74, byteArray0.length);
      //  // Unstable assertion: assertEquals(1061, byteArray2.length);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      
      byte[] byteArray3 = base64_0.encode(byteArray2);
      //  // Unstable assertion: assertEquals(74, byteArray0.length);
      //  // Unstable assertion: assertEquals(1061, byteArray2.length);
      //  // Unstable assertion: assertEquals(14513, byteArray3.length);
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      
      byte[] byteArray4 = Base64.decodeBase64(string0);
      //  // Unstable assertion: assertEquals(74, byteArray0.length);
      //  // Unstable assertion: assertEquals(1061, byteArray2.length);
      //  // Unstable assertion: assertEquals(1061, byteArray4.length);
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      
      byte[] byteArray5 = base64_0.encode(byteArray2);
      //  // Unstable assertion: assertEquals(74, byteArray0.length);
      //  // Unstable assertion: assertEquals(1061, byteArray2.length);
      //  // Unstable assertion: assertEquals(14513, byteArray5.length);
      //  // Unstable assertion: assertNotNull(byteArray5);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray4);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray4));
      
      // Undeclared exception!
      Base64.encodeBase64URLSafe(byteArray3);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[124];
      int int0 = 6;
      Base64 base64_0 = new Base64(6, byteArray0, true);
      assertEquals(124, byteArray0.length);
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertTrue(base64_0.isUrlSafe());
      
      base64_0.encode(byteArray0, 6, 76);
      assertEquals(124, byteArray0.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertTrue(base64_0.isUrlSafe());
      
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(124, byteArray0.length);
      assertEquals(174, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      base64_0.encode(byteArray0, 6, 6);
      assertEquals(124, byteArray0.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertTrue(base64_0.isUrlSafe());
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      base64_0.encode(byteArray0, 6, 107);
      assertEquals(124, byteArray0.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertTrue(base64_0.isUrlSafe());
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      base64_0.decode(byteArray1, 6, 107);
      assertEquals(124, byteArray0.length);
      assertEquals(174, byteArray1.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertTrue(base64_0.isUrlSafe());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 1, 8032);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 124
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[128];
      Base64 base64_0 = new Base64(4, byteArray0, true);
      assertEquals(128, byteArray0.length);
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertTrue(base64_0.isUrlSafe());
      
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(128, byteArray0.length);
      assertEquals(178, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      base64_0.encode(byteArray0, 4, 4);
      assertEquals(128, byteArray0.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertTrue(base64_0.isUrlSafe());
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      byte[] byteArray2 = base64_0.encode(byteArray0);
      assertEquals(128, byteArray0.length);
      assertEquals(5675, byteArray2.length);
      assertNotNull(byteArray2);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertTrue(base64_0.isUrlSafe());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byte[] byteArray3 = base64_0.encode(byteArray1);
      assertEquals(128, byteArray0.length);
      assertEquals(178, byteArray1.length);
      assertEquals(7918, byteArray3.length);
      assertNotNull(byteArray3);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertTrue(base64_0.isUrlSafe());
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      
      byte[] byteArray4 = Base64.discardWhitespace(byteArray3);
      assertEquals(128, byteArray0.length);
      assertEquals(178, byteArray1.length);
      assertEquals(7918, byteArray3.length);
      assertEquals(7918, byteArray4.length);
      assertNotNull(byteArray4);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray0);
      assertTrue(base64_0.isUrlSafe());
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray0));
      
      // Undeclared exception!
      Base64.discardWhitespace(byteArray2);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[128];
      Base64 base64_0 = new Base64(4, byteArray0, true);
      //  // Unstable assertion: assertEquals(128, byteArray0.length);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      
      base64_0.encode(byteArray0, 4, 76);
      //  // Unstable assertion: assertEquals(128, byteArray0.length);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      
      base64_0.decode(byteArray0, 4, 4);
      //  // Unstable assertion: assertEquals(128, byteArray0.length);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertEquals(128, byteArray0.length);
      //  // Unstable assertion: assertEquals(178, byteArray1.length);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray0);
      //  // Unstable assertion: assertEquals(128, byteArray0.length);
      //  // Unstable assertion: assertEquals(171, byteArray2.length);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      
      byte[] byteArray3 = base64_0.encode(byteArray1);
      //  // Unstable assertion: assertEquals(128, byteArray0.length);
      //  // Unstable assertion: assertEquals(178, byteArray1.length);
      //  // Unstable assertion: assertEquals(7918, byteArray3.length);
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      
      boolean boolean0 = Base64.isBase64(byteArray1);
      //  // Unstable assertion: assertEquals(128, byteArray0.length);
      //  // Unstable assertion: assertEquals(178, byteArray1.length);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray4 = base64_0.decode(byteArray3);
      //  // Unstable assertion: assertEquals(128, byteArray0.length);
      //  // Unstable assertion: assertEquals(178, byteArray1.length);
      //  // Unstable assertion: assertEquals(7918, byteArray3.length);
      //  // Unstable assertion: assertEquals(178, byteArray4.length);
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      
      // Undeclared exception!
      Base64.decodeInteger(byteArray3);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[95];
      Base64 base64_0 = new Base64(4, byteArray0, true);
      assertEquals(95, byteArray0.length);
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertTrue(base64_0.isUrlSafe());
      
      base64_0.encode(byteArray0, 4, 76);
      assertEquals(95, byteArray0.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertTrue(base64_0.isUrlSafe());
      
      base64_0.decode(byteArray0, 4, 4);
      assertEquals(95, byteArray0.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertTrue(base64_0.isUrlSafe());
      
      base64_0.encode(byteArray0, 4, 4);
      assertEquals(95, byteArray0.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertTrue(base64_0.isUrlSafe());
      
      base64_0.encode(byteArray0, 4, 4);
      assertEquals(95, byteArray0.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertTrue(base64_0.isUrlSafe());
      
      base64_0.encode(byteArray0, 4, 75);
      assertEquals(95, byteArray0.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertTrue(base64_0.isUrlSafe());
      
      base64_0.encode(byteArray0, 4, (-175));
      assertEquals(95, byteArray0.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[108];
      Base64 base64_0 = new Base64(4, byteArray0, false);
      assertEquals(108, byteArray0.length);
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      base64_0.encode(byteArray0, 4, 76);
      assertEquals(108, byteArray0.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      base64_0.encode(byteArray0, 76, 4);
      assertEquals(108, byteArray0.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      base64_0.decode(byteArray0, 4, 4);
      assertEquals(108, byteArray0.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      base64_0.encode(byteArray0, 4, 75);
      assertEquals(108, byteArray0.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      base64_0.encode(byteArray0, 4, 67);
      assertEquals(108, byteArray0.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals(108, byteArray0.length);
      assertNotNull(string0);
      assertEquals("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[97];
      Base64 base64_0 = new Base64(true);
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertTrue(base64_0.isUrlSafe());
      
      base64_0.encode(byteArray0, 4, 4);
      assertEquals(97, byteArray0.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertTrue(base64_0.isUrlSafe());
      
      base64_0.encode(byteArray0, 4, 4);
      assertEquals(97, byteArray0.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertTrue(base64_0.isUrlSafe());
      
      base64_0.encode(byteArray0, 86, (-387));
      assertEquals(97, byteArray0.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[106];
      Base64 base64_0 = new Base64(4, byteArray0, false);
      assertEquals(106, byteArray0.length);
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      base64_0.encode(byteArray0, 4, 76);
      assertEquals(106, byteArray0.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      String string0 = Base64.encodeBase64String(byteArray1);
      assertEquals(8, byteArray1.length);
      assertNotNull(string0);
      assertEquals("AAAAAAAAAAA=", string0);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[1] = (byte)114;
      byteArray1[2] = (byte)54;
      byteArray1[3] = (byte) (-2);
      byteArray1[4] = (byte)61;
      byteArray1[6] = (byte)37;
      byte[] byteArray2 = Base64.decodeBase64("AAAAAAAAAAA=");
      assertEquals(8, byteArray2.length);
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray1[7] = (byte) (-1);
      base64_0.decode(byteArray1, 1, (int) (byte)37);
      assertEquals(106, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)114, (byte)54, (byte) (-2), (byte)61, (byte)0, (byte)37, (byte) (-1)}, byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      assertEquals(8, byteArray2.length);
      assertEquals(8, byteArray3.length);
      assertNotNull(byteArray3);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray3);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[106];
      Base64 base64_0 = new Base64(4, byteArray0, false);
      assertEquals(106, byteArray0.length);
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      base64_0.encode(byteArray0, 4, 76);
      assertEquals(106, byteArray0.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-3);
      byte[] byteArray2 = new byte[2];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = (byte) (-3);
      byteArray2[1] = (byte) (-3);
      String string0 = Base64.encodeBase64String(byteArray2);
      assertEquals(2, byteArray2.length);
      assertNotNull(string0);
      assertEquals("/f0=", string0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-3), (byte) (-3)}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray1[1] = (byte)96;
      byteArray1[2] = (byte)54;
      byteArray1[3] = (byte) (-2);
      byteArray1[4] = (byte)61;
      byteArray1[5] = (byte)46;
      byteArray1[6] = (byte)37;
      byte[] byteArray3 = Base64.decodeBase64("/f0=");
      assertEquals(2, byteArray3.length);
      assertNotNull(byteArray3);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-3), (byte) (-3)}, byteArray3);
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      
      byteArray1[7] = (byte) (-1);
      base64_0.decode(byteArray1, 1, 2876);
      assertEquals(106, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-3), (byte)96, (byte)54, (byte) (-2), (byte)61, (byte)46, (byte)37, (byte) (-1)}, byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      
      String string1 = Base64.encodeBase64String(byteArray1);
      assertEquals(8, byteArray1.length);
      assertNotNull(string1);
      assertEquals("/WA2/j0uJf8=", string1);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-3), (byte)96, (byte)54, (byte) (-2), (byte)61, (byte)46, (byte)37, (byte) (-1)}, byteArray1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      
      int int0 = base64_0.readResults(byteArray0, 61, 0);
      assertEquals(106, byteArray0.length);
      assertEquals(0, int0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      try { 
        base64_0.encode((Object) "/WA2/j0uJf8=");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[89];
      Base64 base64_0 = new Base64(4, byteArray0, false);
      assertEquals(89, byteArray0.length);
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      base64_0.encode(byteArray0, 4, 76);
      assertEquals(89, byteArray0.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals(89, byteArray0.length);
      assertNotNull(string0);
      assertEquals("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=", string0);
      
      base64_0.encode(byteArray0, 4, 4);
      assertEquals(89, byteArray0.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      base64_0.encode(byteArray0, 4, (-644));
      assertEquals(89, byteArray0.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[74];
      Base64 base64_0 = new Base64(10, byteArray0, true);
      //  // Unstable assertion: assertEquals(74, byteArray0.length);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-98), (byte) (-94)}, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = base64_0.encode(byteArray0);
      //  // Unstable assertion: assertEquals(74, byteArray0.length);
      //  // Unstable assertion: assertEquals(1061, byteArray2.length);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray2);
      //  // Unstable assertion: assertEquals(74, byteArray0.length);
      //  // Unstable assertion: assertEquals(1061, byteArray2.length);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      
      byte[] byteArray3 = base64_0.encode(byteArray2);
      //  // Unstable assertion: assertEquals(74, byteArray0.length);
      //  // Unstable assertion: assertEquals(1061, byteArray2.length);
      //  // Unstable assertion: assertEquals(14513, byteArray3.length);
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      
      Object object0 = new Object();
      //  // Unstable assertion: assertNotNull(object0);
      
      Object object1 = base64_0.decode((Object) string0);
      //  // Unstable assertion: assertEquals(74, byteArray0.length);
      //  // Unstable assertion: assertEquals(1061, byteArray2.length);
      //  // Unstable assertion: assertNotNull(object1);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, object1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, object1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(object1.equals((Object)object0));
      
      Object object2 = base64_0.decode(object1);
      //  // Unstable assertion: assertEquals(74, byteArray0.length);
      //  // Unstable assertion: assertEquals(1061, byteArray2.length);
      //  // Unstable assertion: assertNotNull(object2);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, object2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, object1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, object1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, object2);
      //  // Unstable assertion: assertNotSame(object1, object2);
      //  // Unstable assertion: assertNotSame(object2, object1);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)object1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)object1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(object1.equals((Object)object0));
      //  // Unstable assertion: assertFalse(object2.equals((Object)object1));
      //  // Unstable assertion: assertFalse(object2.equals((Object)object0));
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      //  // Unstable assertion: assertEquals(74, byteArray0.length);
      //  // Unstable assertion: assertNotNull(bigInteger0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, object2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, object1);
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)object2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)object1));
      
      // Undeclared exception!
      base64_0.decode(byteArray3);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[74];
      Base64 base64_0 = new Base64(10);
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      assertEquals(74, byteArray0.length);
      assertEquals(100, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      base64_0.encode(byteArray1, 76, 1);
      assertEquals(74, byteArray0.length);
      assertEquals(100, byteArray1.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      base64_0.encode(byteArray0, 64, (-3793));
      assertEquals(74, byteArray0.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertEquals(74, byteArray0.length);
      assertFalse(boolean0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      int int0 = base64_0.readResults(byteArray0, 47, 1);
      assertEquals(74, byteArray0.length);
      assertEquals(1, int0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(0, byteArray2.length);
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray2);
      assertEquals(0, byteArray2.length);
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(bigInteger1, bigInteger0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertTrue(bigInteger1.equals((Object)bigInteger0));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[74];
      Base64 base64_0 = new Base64(10, byteArray0, true);
      //  // Unstable assertion: assertEquals(74, byteArray0.length);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-98), (byte) (-94)}, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = base64_0.encode(byteArray0);
      //  // Unstable assertion: assertEquals(74, byteArray0.length);
      //  // Unstable assertion: assertEquals(1061, byteArray2.length);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray2);
      //  // Unstable assertion: assertEquals(74, byteArray0.length);
      //  // Unstable assertion: assertEquals(1061, byteArray2.length);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      
      byte[] byteArray3 = base64_0.encode(byteArray2);
      //  // Unstable assertion: assertEquals(74, byteArray0.length);
      //  // Unstable assertion: assertEquals(1061, byteArray2.length);
      //  // Unstable assertion: assertEquals(14513, byteArray3.length);
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      
      // Undeclared exception!
      Base64.encodeBase64(byteArray3, true);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[74];
      Base64 base64_0 = new Base64(10, byteArray0, true);
      //  // Unstable assertion: assertEquals(74, byteArray0.length);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-98), (byte) (-94)}, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = base64_0.encode(byteArray0);
      //  // Unstable assertion: assertEquals(74, byteArray0.length);
      //  // Unstable assertion: assertEquals(1061, byteArray2.length);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray2);
      //  // Unstable assertion: assertEquals(74, byteArray0.length);
      //  // Unstable assertion: assertEquals(1061, byteArray2.length);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      
      String string1 = Base64.encodeBase64String(byteArray2);
      //  // Unstable assertion: assertEquals(74, byteArray0.length);
      //  // Unstable assertion: assertEquals(1061, byteArray2.length);
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      
      byte[] byteArray3 = base64_0.encode(byteArray2);
      //  // Unstable assertion: assertEquals(74, byteArray0.length);
      //  // Unstable assertion: assertEquals(1061, byteArray2.length);
      //  // Unstable assertion: assertEquals(14513, byteArray3.length);
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      
      // Undeclared exception!
      Base64.decodeBase64(byteArray3);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 941);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(bigInteger0);
      assertSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      boolean boolean0 = bigInteger0.isProbablePrime(941);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean0);
      assertSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      Base64 base64_0 = new Base64(1, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertNotNull(byteArray2);
      assertSame(byteArray0, byteArray2);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray2, byteArray0);
      assertSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      
      int int0 = base64_0.readResults(byteArray0, 941, 941);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, int0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertSame(byteArray0, byteArray2);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray2);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(base64_0.isUrlSafe());
      
      boolean boolean1 = Base64.isBase64((byte)127);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = base64_0.encodeToString(byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertSame(byteArray0, byteArray2);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray2);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray2, byteArray0);
      assertSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertFalse(base64_0.isUrlSafe());
      
      int int1 = base64_0.readResults(byteArray0, (-379), 99);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, int1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertSame(byteArray0, byteArray2);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray2);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertTrue(int1 == int0);
      
      byte[] byteArray3 = new byte[7];
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      
      byte[] byteArray4 = base64_0.encode(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray4.length);
      assertNotNull(byteArray4);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertSame(byteArray0, byteArray4);
      assertSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray4);
      assertSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray4, byteArray0);
      assertSame(byteArray4, byteArray1);
      assertSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray3);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray4);
      assertFalse(base64_0.isUrlSafe());
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray3));
      
      byteArray3[0] = (byte)127;
      byteArray3[1] = (byte)127;
      byte[] byteArray5 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray5.length);
      assertNotNull(byteArray5);
      assertSame(byteArray0, byteArray4);
      assertSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray3);
      assertSame(byteArray0, byteArray1);
      assertNotSame(byteArray5, byteArray0);
      assertNotSame(byteArray5, byteArray1);
      assertNotSame(byteArray5, byteArray4);
      assertNotSame(byteArray5, byteArray2);
      assertNotSame(byteArray5, byteArray3);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray5);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray0));
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray3));
      
      byteArray3[2] = (byte)127;
      byteArray3[3] = (byte)127;
      byteArray3[4] = (byte)1;
      byteArray3[5] = (byte)127;
      byteArray3[6] = (byte)127;
      base64_0.decode(byteArray3, 1, 3);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(7, byteArray3.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertSame(byteArray0, byteArray4);
      assertSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray3);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray4);
      assertSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray5);
      assertNotSame(byteArray1, byteArray3);
      assertSame(byteArray1, byteArray0);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray5);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)127, (byte)127, (byte)127, (byte)127, (byte)1, (byte)127, (byte)127}, byteArray3);
      assertFalse(base64_0.isUrlSafe());
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray5));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray3.equals((Object)byteArray4));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray5));
      
      Object object0 = base64_0.decode((Object) "");
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(object0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertSame(byteArray0, byteArray4);
      assertSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, object0);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray3);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, object0);
      assertSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray5);
      assertNotSame(byteArray1, byteArray3);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray5));
      assertFalse(byteArray1.equals((Object)byteArray3));
      
      Object object1 = base64_0.encode(object0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(object1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertSame(byteArray0, byteArray4);
      assertSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, object0);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray3);
      assertSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, object1);
      assertSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, object0);
      assertSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray5);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, object1);
      assertSame(byteArray1, byteArray0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertFalse(byteArray0.equals((Object)object0));
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)object0));
      assertFalse(byteArray1.equals((Object)byteArray5));
      assertFalse(byteArray1.equals((Object)byteArray3));
      
      Object object2 = base64_0.encode(object1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(object2);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, object2);
      assertSame(byteArray0, byteArray4);
      assertSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, object0);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray3);
      assertSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, object1);
      assertSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, object2);
      assertNotSame(byteArray1, object0);
      assertSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray5);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, object1);
      assertSame(byteArray1, byteArray0);
      assertSame(object0, object1);
      assertSame(object0, object2);
      assertSame(object1, object0);
      assertSame(object1, object2);
      assertSame(object2, object1);
      assertSame(object2, object0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertFalse(byteArray0.equals((Object)object0));
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)object1));
      assertFalse(byteArray1.equals((Object)object0));
      assertFalse(byteArray1.equals((Object)byteArray5));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)object1));
      
      byte[] byteArray6 = Base64.encodeInteger(bigInteger0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray6.length);
      assertNotNull(byteArray6);
      assertNotSame(byteArray0, object2);
      assertSame(byteArray0, byteArray4);
      assertSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, object0);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray6);
      assertSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, object1);
      assertNotSame(byteArray6, byteArray2);
      assertNotSame(byteArray6, byteArray0);
      assertNotSame(byteArray6, object2);
      assertNotSame(byteArray6, byteArray1);
      assertNotSame(byteArray6, object0);
      assertNotSame(byteArray6, byteArray5);
      assertNotSame(byteArray6, object1);
      assertNotSame(byteArray6, byteArray3);
      assertNotSame(byteArray6, byteArray4);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray6);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(byteArray0.equals((Object)object2));
      assertFalse(byteArray0.equals((Object)object0));
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)object1));
      assertFalse(byteArray6.equals((Object)byteArray2));
      assertFalse(byteArray6.equals((Object)byteArray0));
      assertFalse(byteArray6.equals((Object)object2));
      assertFalse(byteArray6.equals((Object)byteArray1));
      assertFalse(byteArray6.equals((Object)object0));
      assertFalse(byteArray6.equals((Object)byteArray5));
      assertFalse(byteArray6.equals((Object)object1));
      assertFalse(byteArray6.equals((Object)byteArray3));
      assertFalse(byteArray6.equals((Object)byteArray4));
      
      byte[] byteArray7 = Base64.encodeInteger(bigInteger0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray7.length);
      assertNotNull(byteArray7);
      assertNotSame(byteArray0, object2);
      assertSame(byteArray0, byteArray4);
      assertSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, object0);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray7);
      assertNotSame(byteArray0, byteArray6);
      assertSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, object1);
      assertNotSame(byteArray7, byteArray6);
      assertNotSame(byteArray7, byteArray3);
      assertNotSame(byteArray7, object1);
      assertNotSame(byteArray7, byteArray4);
      assertNotSame(byteArray7, byteArray5);
      assertNotSame(byteArray7, byteArray0);
      assertNotSame(byteArray7, byteArray1);
      assertNotSame(byteArray7, object2);
      assertNotSame(byteArray7, byteArray2);
      assertNotSame(byteArray7, object0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray7);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(byteArray0.equals((Object)object2));
      assertFalse(byteArray0.equals((Object)object0));
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray6));
      assertFalse(byteArray0.equals((Object)object1));
      assertFalse(byteArray7.equals((Object)byteArray6));
      assertFalse(byteArray7.equals((Object)byteArray3));
      assertFalse(byteArray7.equals((Object)object1));
      assertFalse(byteArray7.equals((Object)byteArray4));
      assertFalse(byteArray7.equals((Object)byteArray5));
      assertFalse(byteArray7.equals((Object)byteArray0));
      assertFalse(byteArray7.equals((Object)byteArray1));
      assertFalse(byteArray7.equals((Object)object2));
      assertFalse(byteArray7.equals((Object)byteArray2));
      assertFalse(byteArray7.equals((Object)object0));
      
      boolean boolean2 = Base64.isBase64(byteArray7);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray7.length);
      assertTrue(boolean2);
      assertNotSame(byteArray0, object2);
      assertSame(byteArray0, byteArray4);
      assertSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, object0);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray7);
      assertNotSame(byteArray0, byteArray6);
      assertSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, object1);
      assertNotSame(byteArray7, byteArray6);
      assertNotSame(byteArray7, byteArray3);
      assertNotSame(byteArray7, object1);
      assertNotSame(byteArray7, byteArray4);
      assertNotSame(byteArray7, byteArray5);
      assertNotSame(byteArray7, byteArray0);
      assertNotSame(byteArray7, byteArray1);
      assertNotSame(byteArray7, object2);
      assertNotSame(byteArray7, byteArray2);
      assertNotSame(byteArray7, object0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray7);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(byteArray0.equals((Object)object2));
      assertFalse(byteArray0.equals((Object)object0));
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray7));
      assertFalse(byteArray0.equals((Object)byteArray6));
      assertFalse(byteArray0.equals((Object)object1));
      assertFalse(byteArray7.equals((Object)byteArray6));
      assertFalse(byteArray7.equals((Object)byteArray3));
      assertFalse(byteArray7.equals((Object)object1));
      assertFalse(byteArray7.equals((Object)byteArray4));
      assertFalse(byteArray7.equals((Object)byteArray5));
      assertFalse(byteArray7.equals((Object)byteArray0));
      assertFalse(byteArray7.equals((Object)byteArray1));
      assertFalse(byteArray7.equals((Object)object2));
      assertFalse(byteArray7.equals((Object)byteArray2));
      assertFalse(byteArray7.equals((Object)object0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      byte[] byteArray8 = base64_0.decode(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray8.length);
      assertNotNull(byteArray8);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, object2);
      assertSame(byteArray0, byteArray4);
      assertSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, object0);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray7);
      assertNotSame(byteArray0, byteArray6);
      assertSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, object1);
      assertSame(byteArray0, byteArray8);
      assertSame(byteArray1, byteArray4);
      assertSame(byteArray1, byteArray8);
      assertNotSame(byteArray1, object2);
      assertNotSame(byteArray1, object0);
      assertSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray5);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray7);
      assertNotSame(byteArray1, object1);
      assertNotSame(byteArray1, byteArray6);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray8, byteArray2);
      assertSame(byteArray8, byteArray0);
      assertSame(byteArray8, byteArray1);
      assertNotSame(byteArray8, byteArray5);
      assertNotSame(byteArray8, object1);
      assertSame(byteArray8, byteArray4);
      assertNotSame(byteArray8, object2);
      assertNotSame(byteArray8, byteArray6);
      assertNotSame(byteArray8, byteArray3);
      assertNotSame(byteArray8, object0);
      assertNotSame(byteArray8, byteArray7);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray8);
      assertFalse(base64_0.isUrlSafe());
      assertFalse(byteArray0.equals((Object)object2));
      assertFalse(byteArray0.equals((Object)object0));
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray7));
      assertFalse(byteArray0.equals((Object)byteArray6));
      assertFalse(byteArray0.equals((Object)object1));
      assertFalse(byteArray1.equals((Object)object2));
      assertFalse(byteArray1.equals((Object)object0));
      assertFalse(byteArray1.equals((Object)byteArray5));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray7));
      assertFalse(byteArray1.equals((Object)object1));
      assertFalse(byteArray1.equals((Object)byteArray6));
      assertFalse(byteArray8.equals((Object)byteArray5));
      assertFalse(byteArray8.equals((Object)object1));
      assertFalse(byteArray8.equals((Object)object2));
      assertFalse(byteArray8.equals((Object)byteArray6));
      assertFalse(byteArray8.equals((Object)byteArray3));
      assertFalse(byteArray8.equals((Object)object0));
      assertFalse(byteArray8.equals((Object)byteArray7));
      
      byte[] byteArray9 = Base64.encodeBase64(byteArray2, true, false, 1464);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray9.length);
      assertNotNull(byteArray9);
      assertNotSame(byteArray0, object2);
      assertSame(byteArray0, byteArray4);
      assertSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, object0);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray7);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray6);
      assertSame(byteArray0, byteArray9);
      assertNotSame(byteArray0, object1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray0, byteArray8);
      assertNotSame(byteArray2, byteArray7);
      assertNotSame(byteArray2, byteArray3);
      assertSame(byteArray2, byteArray9);
      assertNotSame(byteArray2, byteArray6);
      assertNotSame(byteArray2, object0);
      assertSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray5);
      assertSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, object1);
      assertSame(byteArray2, byteArray8);
      assertNotSame(byteArray2, object2);
      assertSame(byteArray2, byteArray4);
      assertNotSame(byteArray9, byteArray6);
      assertNotSame(byteArray9, byteArray3);
      assertNotSame(byteArray9, object1);
      assertNotSame(byteArray9, byteArray7);
      assertSame(byteArray9, byteArray2);
      assertNotSame(byteArray9, byteArray5);
      assertNotSame(byteArray9, object2);
      assertSame(byteArray9, byteArray4);
      assertNotSame(byteArray9, object0);
      assertSame(byteArray9, byteArray8);
      assertSame(byteArray9, byteArray0);
      assertSame(byteArray9, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertArrayEquals(new byte[] {}, byteArray9);
      assertFalse(byteArray0.equals((Object)object2));
      assertFalse(byteArray0.equals((Object)object0));
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray7));
      assertFalse(byteArray0.equals((Object)byteArray6));
      assertFalse(byteArray0.equals((Object)object1));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray7));
      assertFalse(byteArray2.equals((Object)byteArray6));
      assertFalse(byteArray2.equals((Object)object0));
      assertFalse(byteArray2.equals((Object)byteArray5));
      assertFalse(byteArray2.equals((Object)object1));
      assertFalse(byteArray2.equals((Object)object2));
      assertFalse(byteArray9.equals((Object)byteArray6));
      assertFalse(byteArray9.equals((Object)byteArray3));
      assertFalse(byteArray9.equals((Object)object1));
      assertFalse(byteArray9.equals((Object)byteArray7));
      assertFalse(byteArray9.equals((Object)byteArray5));
      assertFalse(byteArray9.equals((Object)object2));
      assertFalse(byteArray9.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[74];
      Base64 base64_0 = new Base64(10, byteArray0, true);
      assertEquals(74, byteArray0.length);
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertTrue(base64_0.isUrlSafe());
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      assertEquals(74, byteArray0.length);
      assertEquals(104, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      base64_0.encode(byteArray1, 76, 1);
      assertEquals(74, byteArray0.length);
      assertEquals(104, byteArray1.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertTrue(base64_0.isUrlSafe());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = new byte[5];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = (byte)16;
      byteArray2[1] = (byte)18;
      base64_0.encode(byteArray2, (int) (byte)18, (-3793));
      assertEquals(74, byteArray0.length);
      assertEquals(5, byteArray2.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)16, (byte)18, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertTrue(base64_0.isUrlSafe());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      assertEquals(0, byteArray3.length);
      assertNotNull(byteArray3);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[74];
      Base64 base64_0 = new Base64(10, byteArray0, true);
      assertEquals(74, byteArray0.length);
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertTrue(base64_0.isUrlSafe());
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      assertEquals(74, byteArray0.length);
      assertEquals(104, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = base64_0.encode(byteArray0);
      assertEquals(74, byteArray0.length);
      assertEquals(1061, byteArray2.length);
      assertNotNull(byteArray2);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertTrue(base64_0.isUrlSafe());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray2);
      assertEquals(74, byteArray0.length);
      assertEquals(1061, byteArray2.length);
      assertNotNull(string0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertTrue(base64_0.isUrlSafe());
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray0);
      assertEquals(74, byteArray0.length);
      assertEquals(100, byteArray3.length);
      assertNotNull(byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      
      String string1 = Base64.encodeBase64String(byteArray2);
      assertEquals(74, byteArray0.length);
      assertEquals(1061, byteArray2.length);
      assertNotNull(string1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray3);
      assertTrue(base64_0.isUrlSafe());
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(string1.equals((Object)string0));
      
      byte[] byteArray4 = base64_0.encode(byteArray2);
      assertEquals(74, byteArray0.length);
      assertEquals(1061, byteArray2.length);
      assertEquals(14513, byteArray4.length);
      assertNotNull(byteArray4);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray0);
      assertTrue(base64_0.isUrlSafe());
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray0));
      
      // Undeclared exception!
      base64_0.encode(byteArray4);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[74];
      Base64 base64_0 = new Base64(11, byteArray0, false);
      //  // Unstable assertion: assertEquals(74, byteArray0.length);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-98), (byte) (-94)}, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = base64_0.encode(byteArray0);
      //  // Unstable assertion: assertEquals(74, byteArray0.length);
      //  // Unstable assertion: assertEquals(1062, byteArray2.length);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray2);
      //  // Unstable assertion: assertEquals(74, byteArray0.length);
      //  // Unstable assertion: assertEquals(1062, byteArray2.length);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray0);
      //  // Unstable assertion: assertEquals(74, byteArray0.length);
      //  // Unstable assertion: assertEquals(100, byteArray3.length);
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      
      String string1 = Base64.encodeBase64String(byteArray2);
      //  // Unstable assertion: assertEquals(74, byteArray0.length);
      //  // Unstable assertion: assertEquals(1062, byteArray2.length);
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertTrue(string1.equals((Object)string0));
      
      byte[] byteArray4 = base64_0.encode(byteArray2);
      //  // Unstable assertion: assertEquals(74, byteArray0.length);
      //  // Unstable assertion: assertEquals(1062, byteArray2.length);
      //  // Unstable assertion: assertEquals(14514, byteArray4.length);
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      
      Object object0 = new Object();
      //  // Unstable assertion: assertNotNull(object0);
      
      // Undeclared exception!
      Base64.encodeBase64String(byteArray4);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[74];
      Base64 base64_0 = new Base64(10, byteArray0, false);
      assertEquals(74, byteArray0.length);
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      assertEquals(74, byteArray0.length);
      assertEquals(100, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Base64 base64_1 = new Base64();
      assertNotNull(base64_1);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_1.isUrlSafe());
      assertFalse(base64_1.equals((Object)base64_0));
      
      base64_0.encode(byteArray1, 76, 1);
      assertEquals(74, byteArray0.length);
      assertEquals(100, byteArray1.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(base64_0, base64_1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = new byte[5];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)16;
      byteArray2[1] = (byte)18;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte) (-128);
      byteArray2[4] = (byte) (-1);
      base64_0.encode(byteArray2, (-1844), (-491));
      assertEquals(74, byteArray0.length);
      assertEquals(5, byteArray2.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(base64_0, base64_1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)16, (byte)18, (byte)0, (byte) (-128), (byte) (-1)}, byteArray2);
      assertFalse(base64_0.isUrlSafe());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray2);
      assertEquals(5, byteArray2.length);
      assertNotNull(bigInteger0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)16, (byte)18, (byte)0, (byte) (-128), (byte) (-1)}, byteArray2);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[56];
      Base64 base64_0 = new Base64();
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      base64_0.encode(byteArray0, (int) (byte)3, (int) (byte)1);
      assertEquals(56, byteArray0.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      base64_0.decode(byteArray0, 328, (-4220));
      assertEquals(56, byteArray0.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[74];
      Base64 base64_0 = new Base64(10, byteArray0, false);
      assertEquals(74, byteArray0.length);
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      assertEquals(74, byteArray0.length);
      assertEquals(100, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = base64_0.encode(byteArray0);
      assertEquals(74, byteArray0.length);
      assertEquals(1062, byteArray2.length);
      assertNotNull(byteArray2);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray2);
      assertEquals(74, byteArray0.length);
      assertEquals(1062, byteArray2.length);
      assertNotNull(string0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray0);
      assertEquals(74, byteArray0.length);
      assertEquals(100, byteArray3.length);
      assertNotNull(byteArray3);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      
      String string1 = Base64.encodeBase64String(byteArray2);
      assertEquals(74, byteArray0.length);
      assertEquals(1062, byteArray2.length);
      assertNotNull(string1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertTrue(string1.equals((Object)string0));
      
      byte[] byteArray4 = base64_0.encode(byteArray2);
      assertEquals(74, byteArray0.length);
      assertEquals(1062, byteArray2.length);
      assertEquals(14514, byteArray4.length);
      assertNotNull(byteArray4);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray2);
      assertFalse(base64_0.isUrlSafe());
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray2));
      
      base64_0.encode(byteArray2, 33, 1717986918);
      assertEquals(74, byteArray0.length);
      assertEquals(1062, byteArray2.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray4));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byte[] byteArray5 = base64_0.encode(byteArray2);
      assertEquals(74, byteArray0.length);
      assertEquals(1062, byteArray2.length);
      assertEquals(14514, byteArray5.length);
      assertNotNull(byteArray5);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray2, byteArray5);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray5, byteArray3);
      assertNotSame(byteArray5, byteArray0);
      assertNotSame(byteArray5, byteArray4);
      assertNotSame(byteArray5, byteArray1);
      assertNotSame(byteArray5, byteArray2);
      assertFalse(base64_0.isUrlSafe());
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray4));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray0));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertFalse(byteArray5.equals((Object)byteArray2));
      
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray3, true, false, 52);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (140) than the specified maxium size of 52
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[56];
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals(56, byteArray0.length);
      assertNotNull(string0);
      assertEquals("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=", string0);
      
      Base64 base64_0 = new Base64(true);
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertTrue(base64_0.isUrlSafe());
      
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)123;
      byteArray1[1] = (byte)20;
      byteArray1[2] = (byte) (-24);
      byteArray1[3] = (byte) (-54);
      byteArray1[4] = (byte) (-121);
      byteArray1[5] = (byte) (-20);
      byteArray1[6] = (byte)1;
      byteArray1[7] = (byte)124;
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      assertEquals(8, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotNull(byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)123, (byte)20, (byte) (-24), (byte) (-54), (byte) (-121), (byte) (-20), (byte)1, (byte)124}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      Base64 base64_1 = new Base64(52, byteArray0);
      assertEquals(56, byteArray0.length);
      assertNotNull(base64_1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_1.isUrlSafe());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(base64_1.equals((Object)base64_0));
      
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray0, 1, 1463);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 56
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)3;
      base64_0.encode(byteArray0, (int) (byte)0, (int) (byte)1);
      assertEquals(8, byteArray0.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)3, (byte)3, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      
      byteArray0[6] = (byte)67;
      base64_0.encode(byteArray0, (int) (byte)3, (-2650));
      assertEquals(8, byteArray0.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)3, (byte)3, (byte)0, (byte)0, (byte)67, (byte)0}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      
      int int0 = base64_0.avail();
      assertEquals(4, int0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      base64_0.encode(byteArray0, (int) (byte)67, (int) (byte)1);
      assertEquals(8, byteArray0.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)3, (byte)3, (byte)0, (byte)0, (byte)67, (byte)0}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertTrue(base64_0.isUrlSafe());
      
      base64_0.encode((byte[]) null, (-1), (-1));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertTrue(base64_0.isUrlSafe());
      
      byte[] byteArray0 = Base64.encodeBase64Chunked((byte[]) null);
      assertNull(byteArray0);
      
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, (-2556), (-1345));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Base64 base64_0 = new Base64(true);
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertTrue(base64_0.isUrlSafe());
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false, 14);
      assertEquals(8, byteArray0.length);
      assertEquals(14, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte) (-21);
      byteArray0[4] = (byte)33;
      byteArray0[5] = (byte)123;
      base64_0.encode(byteArray0, (int) (byte)1, (int) (byte)1);
      assertEquals(8, byteArray0.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte)1, (byte)37, (byte)26, (byte) (-21), (byte)33, (byte)123, (byte)0, (byte)0}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      
      byteArray0[6] = (byte)48;
      byteArray0[7] = (byte) (-51);
      base64_0.encode(byteArray0, (int) (byte)26, (-1));
      assertEquals(8, byteArray0.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte)1, (byte)37, (byte)26, (byte) (-21), (byte)33, (byte)123, (byte)48, (byte) (-51)}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)45;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)116;
      byteArray1[3] = (byte)98;
      byteArray1[4] = (byte)42;
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      assertEquals(5, byteArray2.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)45, (byte)0, (byte)116, (byte)98, (byte)42}, byteArray2);
      assertArrayEquals(new byte[] {(byte)45, (byte)0, (byte)116, (byte)98, (byte)42}, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte byte0 = (byte) (-109);
      byte byte1 = (byte)6;
      Base64 base64_0 = new Base64((byte) (-109));
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte) (-109);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)48;
      byteArray0[7] = (byte)48;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 0, (int) (byte)48);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Base64 base64_0 = new Base64();
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      String string0 = "`!G${{pO{IK";
      byte[] byteArray0 = Base64.decodeBase64("`!G${{pO{IK");
      //  // Unstable assertion: assertEquals(3, byteArray0.length);
      //  // Unstable assertion: assertNotNull(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)26, (byte) (-109), (byte) (-120)}, byteArray0);
      
      byte[] byteArray1 = new byte[56];
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      
      Base64 base64_1 = new Base64();
      //  // Unstable assertion: assertNotNull(base64_1);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertEquals(2, byteArray2.length);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-98), (byte) (-94)}, byteArray2);
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, false, true);
      //  // Unstable assertion: assertEquals(56, byteArray1.length);
      //  // Unstable assertion: assertEquals(75, byteArray3.length);
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      
      Base64 base64_2 = new Base64(64);
      //  // Unstable assertion: assertNotNull(base64_2);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(base64_2.isUrlSafe());
      //  // Unstable assertion: assertFalse(base64_2.equals((Object)base64_0));
      //  // Unstable assertion: assertFalse(base64_2.equals((Object)base64_1));
      
      try { 
        base64_1.encode((Object) base64_2);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)11;
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-98), (byte) (-94)}, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean0 = Base64.isBase64(byteArray0);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)11, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertEquals(2, byteArray2.length);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-98), (byte) (-94)}, byteArray2);
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      
      byte[] byteArray3 = new byte[3];
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      
      byteArray3[0] = (byte)11;
      byteArray3[1] = (byte)11;
      byteArray3[2] = (byte)11;
      Base64 base64_0 = new Base64((byte)11, byteArray3, true);
      //  // Unstable assertion: assertEquals(3, byteArray3.length);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)11, (byte)11, (byte)11}, byteArray3);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      
      Object object0 = base64_0.decode((Object) "Parameter supplied to Base64 encode is not a byte[]");
      //  // Unstable assertion: assertEquals(3, byteArray3.length);
      //  // Unstable assertion: assertNotNull(object0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray3, object0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)11, (byte)11, (byte)11}, byteArray3);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      
      Object object1 = base64_0.encode(object0);
      //  // Unstable assertion: assertEquals(3, byteArray3.length);
      //  // Unstable assertion: assertNotNull(object1);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray3, object0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, object1);
      //  // Unstable assertion: assertNotSame(object0, object1);
      //  // Unstable assertion: assertNotSame(object1, object0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)11, (byte)11, (byte)11}, byteArray3);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)object0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(object1.equals((Object)object0));
      
      Base64 base64_1 = new Base64((byte)11, byteArray2, false);
      //  // Unstable assertion: assertEquals(2, byteArray2.length);
      //  // Unstable assertion: assertNotNull(base64_1);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-98), (byte) (-94)}, byteArray2);
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)object1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)object0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      
      String string0 = Base64.encodeBase64String(byteArray2);
      //  // Unstable assertion: assertEquals(2, byteArray2.length);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("nqI=", string0);
      //  // Unstable assertion: assertSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, object1);
      //  // Unstable assertion: assertNotSame(byteArray2, object0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-98), (byte) (-94)}, byteArray2);
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)object1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)object0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      
      base64_0.encode(byteArray2, (int) (byte)11, 76);
      //  // Unstable assertion: assertEquals(2, byteArray2.length);
      //  // Unstable assertion: assertEquals(3, byteArray3.length);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, object1);
      //  // Unstable assertion: assertNotSame(byteArray2, object0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, object0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, object1);
      //  // Unstable assertion: assertNotSame(base64_0, base64_1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-98), (byte) (-94)}, byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)11, (byte)11, (byte)11}, byteArray3);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)object1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)object0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)object0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)object1));
      //  // Unstable assertion: assertFalse(base64_0.equals((Object)base64_1));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-108);
      byteArray0[3] = (byte) (-108);
      byte[] byteArray1 = new byte[0];
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      
      Base64 base64_0 = new Base64(1935, byteArray1, true);
      //  // Unstable assertion: assertEquals(0, byteArray1.length);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray1);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      
      base64_0.decode(byteArray0, 1247, (-1613));
      //  // Unstable assertion: assertEquals(6, byteArray0.length);
      //  // Unstable assertion: assertEquals(0, byteArray1.length);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-108), (byte)0, (byte)0, (byte) (-108), (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray1);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean0 = base64_0.hasData();
      //  // Unstable assertion: assertEquals(0, byteArray1.length);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray1);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertEquals(2, byteArray2.length);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-98), (byte) (-94)}, byteArray2);
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      
      boolean boolean1 = Base64.isBase64(byteArray2);
      //  // Unstable assertion: assertEquals(2, byteArray2.length);
      //  // Unstable assertion: assertFalse(boolean1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-98), (byte) (-94)}, byteArray2);
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      
      byte[] byteArray3 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertEquals(2, byteArray3.length);
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-98), (byte) (-94)}, byteArray3);
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      
      Object object0 = base64_0.decode((Object) "Parameter supplied to Base64 encode is not a byte[]");
      //  // Unstable assertion: assertEquals(0, byteArray1.length);
      //  // Unstable assertion: assertNotNull(object0);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, object0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray1);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      
      // Undeclared exception!
      try { 
        base64_0.encode(object0);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      Base64 base64_0 = new Base64();
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      base64_0.decode(byteArray0, 2, 2);
      assertEquals(15, byteArray0.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      base64_0.encode(byteArray0, (-3448), (-3448));
      assertEquals(15, byteArray0.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      base64_0.encode(byteArray0, 2, 2);
      assertEquals(15, byteArray0.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      boolean boolean0 = Base64.isBase64("");
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte)83;
      byteArray0[6] = (byte) (-119);
      byteArray0[7] = (byte)88;
      byteArray0[8] = (byte)10;
      BigInteger bigInteger0 = new BigInteger(1, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-3), (byte) (-80), (byte) (-1), (byte)121, (byte)83, (byte) (-119), (byte)88, (byte)10}, byteArray0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)22538, bigInteger0.shortValue());
      
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-3), (byte) (-80), (byte) (-1), (byte)121, (byte)83, (byte) (-119), (byte)88, (byte)10}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-3), (byte) (-80), (byte) (-1), (byte)121, (byte)83, (byte) (-119), (byte)88, (byte)10}, byteArray1);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)22538, bigInteger0.shortValue());
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-296), byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD\uFFFD\uFFFD\uFFFDyS\uFFFDX
         // ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(0, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte byte0 = (byte) (-53);
      byteArray1[0] = (byte) (-53);
      byteArray1[1] = (byte) (-7);
      byte byte1 = (byte)21;
      byteArray1[2] = (byte)21;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-108);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)123;
      byteArray0[5] = (byte)59;
      Base64 base64_0 = new Base64(1269, byteArray0, false);
      //  // Unstable assertion: assertEquals(6, byteArray0.length);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-108), (byte)0, (byte)0, (byte)123, (byte)0, (byte)59}, byteArray0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray1 = base64_0.decode(byteArray0);
      //  // Unstable assertion: assertEquals(6, byteArray0.length);
      //  // Unstable assertion: assertEquals(0, byteArray1.length);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-108), (byte)0, (byte)0, (byte)123, (byte)0, (byte)59}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray1);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      
      base64_0.decode(byteArray1, (int) (byte)0, (int) (byte) (-107));
      //  // Unstable assertion: assertEquals(6, byteArray0.length);
      //  // Unstable assertion: assertEquals(0, byteArray1.length);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-108), (byte)0, (byte)0, (byte)123, (byte)0, (byte)59}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray1);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean0 = base64_0.hasData();
      //  // Unstable assertion: assertEquals(6, byteArray0.length);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-108), (byte)0, (byte)0, (byte)123, (byte)0, (byte)59}, byteArray0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      
      byte[] byteArray2 = Base64.decodeBase64("Parameter supplied to Base64 encode is not a byte[]");
      //  // Unstable assertion: assertEquals(30, byteArray2.length);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      
      Object object0 = base64_0.decode((Object) "Parameter supplied to Base64 encode is not a byte[]");
      //  // Unstable assertion: assertEquals(6, byteArray0.length);
      //  // Unstable assertion: assertNotNull(object0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, object0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-108), (byte)0, (byte)0, (byte)123, (byte)0, (byte)59}, byteArray0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      
      Object object1 = base64_0.decode(object0);
      //  // Unstable assertion: assertEquals(6, byteArray0.length);
      //  // Unstable assertion: assertNotNull(object1);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, object0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, object1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(object0, object1);
      //  // Unstable assertion: assertNotSame(object1, object0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-108), (byte)0, (byte)0, (byte)123, (byte)0, (byte)59}, byteArray0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)object0));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(object1.equals((Object)object0));
      
      boolean boolean1 = Base64.isBase64(byteArray0);
      //  // Unstable assertion: assertEquals(6, byteArray0.length);
      //  // Unstable assertion: assertFalse(boolean1);
      //  // Unstable assertion: assertNotSame(byteArray0, object0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, object1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-108), (byte)0, (byte)0, (byte)123, (byte)0, (byte)59}, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)object0));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)object1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      //  // Unstable assertion: assertEquals(30, byteArray2.length);
      //  // Unstable assertion: assertEquals(30, byteArray3.length);
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, object1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, object0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, object1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, object0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)object1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)object0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)object1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)object0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      
      byte[] byteArray4 = Base64.discardWhitespace(byteArray2);
      //  // Unstable assertion: assertEquals(30, byteArray2.length);
      //  // Unstable assertion: assertEquals(30, byteArray4.length);
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, object1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, object0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, object0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, object1);
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)object1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)object0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)object0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)object1));
      
      byte[] byteArray5 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertEquals(2, byteArray5.length);
      //  // Unstable assertion: assertNotNull(byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray5, object1);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray5, object0);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-98), (byte) (-94)}, byteArray5);
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)object1));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)object0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray0));
      
      base64_0.decode(byteArray3, (int) (byte)0, (int) (byte)123);
      //  // Unstable assertion: assertEquals(6, byteArray0.length);
      //  // Unstable assertion: assertEquals(30, byteArray2.length);
      //  // Unstable assertion: assertEquals(30, byteArray3.length);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, object0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, object1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray2, object1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, object0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, object1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, object0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray4);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-108), (byte)0, (byte)0, (byte)123, (byte)0, (byte)59}, byteArray0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)object0));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)object1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)object1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)object0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)object1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)object0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray4));
      
      byte[] byteArray6 = Base64.encodeBase64URLSafe(byteArray2);
      //  // Unstable assertion: assertEquals(40, byteArray6.length);
      //  // Unstable assertion: assertEquals(30, byteArray2.length);
      //  // Unstable assertion: assertNotNull(byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray6, object1);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray6, object0);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray2, object1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, object0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)object1));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)object0));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)object1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)object0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      
      String string0 = base64_0.encodeToString(byteArray6);
      //  // Unstable assertion: assertEquals(6, byteArray0.length);
      //  // Unstable assertion: assertEquals(40, byteArray6.length);
      //  // Unstable assertion: assertEquals(30, byteArray2.length);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("UGFyYW1ldGVyc3VwcGxpZWR0b0Jhc2U2NGVuY29kZWlzbm90YWJ5dA==\uFFFD\u0000\u0000{\u0000;", string0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, object0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, object1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray6, object1);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray6, object0);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray2, object1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, object0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-108), (byte)0, (byte)0, (byte)123, (byte)0, (byte)59}, byteArray0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)object0));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)object1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)object1));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)object0));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)object1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)object0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      
      BigInteger bigInteger0 = new BigInteger(byteArray6);
      //  // Unstable assertion: assertEquals(40, byteArray6.length);
      //  // Unstable assertion: assertEquals(30, byteArray2.length);
      //  // Unstable assertion: assertNotNull(bigInteger0);
      //  // Unstable assertion: assertEquals((byte)116, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)31092, bigInteger0.shortValue());
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)object1));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)object0));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)object1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)object0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      
      boolean boolean2 = Base64.isBase64((byte)61);
      //  // Unstable assertion: assertTrue(boolean2);
      //  // Unstable assertion: assertFalse(boolean2 == boolean1);
      //  // Unstable assertion: assertFalse(boolean2 == boolean0);
      
      byte[] byteArray7 = new byte[2];
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)object0));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)object1));
      
      byteArray7[0] = (byte) (-107);
      byteArray7[1] = (byte)61;
      byte[] byteArray8 = Base64.discardWhitespace(byteArray7);
      //  // Unstable assertion: assertEquals(2, byteArray7.length);
      //  // Unstable assertion: assertEquals(2, byteArray8.length);
      //  // Unstable assertion: assertNotNull(byteArray8);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray8);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray7, object0);
      //  // Unstable assertion: assertNotSame(byteArray7, object1);
      //  // Unstable assertion: assertNotSame(byteArray8, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray8, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray8, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray8, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray8, byteArray7);
      //  // Unstable assertion: assertNotSame(byteArray8, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray8, object1);
      //  // Unstable assertion: assertNotSame(byteArray8, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray8, object0);
      //  // Unstable assertion: assertNotSame(byteArray8, byteArray5);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-107), (byte)61}, byteArray7);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-107), (byte)61}, byteArray8);
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)object0));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)object1));
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)byteArray7));
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)object1));
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)object0));
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)byteArray5));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertTrue(base64_0.isUrlSafe());
      
      byte[] byteArray0 = null;
      byte byte0 = (byte)43;
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-108);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)123;
      byteArray0[5] = (byte)59;
      Base64 base64_0 = new Base64(1269, byteArray0, false);
      //  // Unstable assertion: assertEquals(6, byteArray0.length);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-108), (byte)0, (byte)0, (byte)123, (byte)0, (byte)59}, byteArray0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray1 = base64_0.decode(byteArray0);
      //  // Unstable assertion: assertEquals(6, byteArray0.length);
      //  // Unstable assertion: assertEquals(0, byteArray1.length);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-108), (byte)0, (byte)0, (byte)123, (byte)0, (byte)59}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray1);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      
      base64_0.decode(byteArray1, (int) (byte)0, (int) (byte)123);
      //  // Unstable assertion: assertEquals(6, byteArray0.length);
      //  // Unstable assertion: assertEquals(0, byteArray1.length);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-108), (byte)0, (byte)0, (byte)123, (byte)0, (byte)59}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray1);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean0 = Base64.isBase64((byte) (-108));
      //  // Unstable assertion: assertFalse(boolean0);
      
      byte[] byteArray2 = Base64.decodeBase64("Parameter supplied to Base64 encode is not a byte[]");
      //  // Unstable assertion: assertEquals(30, byteArray2.length);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      
      boolean boolean1 = Base64.isBase64(byteArray0);
      //  // Unstable assertion: assertEquals(6, byteArray0.length);
      //  // Unstable assertion: assertFalse(boolean1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-108), (byte)0, (byte)0, (byte)123, (byte)0, (byte)59}, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      //  // Unstable assertion: assertEquals(30, byteArray2.length);
      //  // Unstable assertion: assertEquals(30, byteArray3.length);
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      
      byte[] byteArray4 = Base64.discardWhitespace(byteArray2);
      //  // Unstable assertion: assertEquals(30, byteArray2.length);
      //  // Unstable assertion: assertEquals(30, byteArray4.length);
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      
      byte[] byteArray5 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertEquals(2, byteArray5.length);
      //  // Unstable assertion: assertNotNull(byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-98), (byte) (-94)}, byteArray5);
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray0));
      
      base64_0.decode(byteArray3, (int) (byte)0, (int) (byte)123);
      //  // Unstable assertion: assertEquals(6, byteArray0.length);
      //  // Unstable assertion: assertEquals(30, byteArray2.length);
      //  // Unstable assertion: assertEquals(30, byteArray3.length);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-108), (byte)0, (byte)0, (byte)123, (byte)0, (byte)59}, byteArray0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      
      byte[] byteArray6 = Base64.encodeBase64URLSafe((byte[]) null);
      //  // Unstable assertion: assertNull(byteArray6);
      
      String string0 = base64_0.encodeToString((byte[]) null);
      //  // Unstable assertion: assertEquals(6, byteArray0.length);
      //  // Unstable assertion: assertNull(string0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-108), (byte)0, (byte)0, (byte)123, (byte)0, (byte)59}, byteArray0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      
      base64_0.decode(byteArray3, (int) (byte)0, (int) (byte)123);
      //  // Unstable assertion: assertEquals(6, byteArray0.length);
      //  // Unstable assertion: assertEquals(30, byteArray2.length);
      //  // Unstable assertion: assertEquals(30, byteArray3.length);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-108), (byte)0, (byte)0, (byte)123, (byte)0, (byte)59}, byteArray0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte) (-121);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(17, byteArray0.length);
      assertEquals(17, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Base64 base64_0 = new Base64();
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      Base64 base64_1 = new Base64(true);
      assertNotNull(base64_1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertTrue(base64_1.isUrlSafe());
      assertFalse(base64_1.equals((Object)base64_0));
      
      byte[] byteArray2 = base64_1.decode("[93PC6-,wD-#EwD9X>-q");
      assertEquals(12, byteArray2.length);
      assertNotNull(byteArray2);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(base64_1, base64_0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertTrue(base64_1.isUrlSafe());
      assertFalse(base64_1.equals((Object)base64_0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byte[] byteArray3 = Base64.encodeBase64Chunked((byte[]) null);
      assertNull(byteArray3);
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      assertEquals(17, byteArray0.length);
      assertEquals(17, byteArray1.length);
      assertNotNull(bigInteger0);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals(17, byteArray0.length);
      assertNotNull(string0);
      assertEquals("Cy0LwYcAAAAAAAAAAAAAAAA=", string0);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      int int0 = base64_0.readResults(byteArray1, (byte)11, (-609));
      assertEquals(17, byteArray0.length);
      assertEquals(17, byteArray1.length);
      assertEquals(0, int0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(base64_0, base64_1);
      assertFalse(base64_0.isUrlSafe());
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(base64_0.equals((Object)base64_1));
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray2, true, true);
      assertEquals(12, byteArray2.length);
      assertEquals(18, byteArray4.length);
      assertNotNull(byteArray4);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(base64_1, base64_0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray0);
      assertTrue(base64_1.isUrlSafe());
      assertFalse(base64_1.equals((Object)base64_0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray0));
      
      String string1 = Base64.encodeBase64URLSafeString((byte[]) null);
      assertNull(string1);
      
      Base64 base64_2 = new Base64();
      assertNotNull(base64_2);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_2.isUrlSafe());
      assertFalse(base64_2.equals((Object)base64_1));
      assertFalse(base64_2.equals((Object)base64_0));
      
      String string2 = base64_2.encodeToString(byteArray1);
      assertEquals(17, byteArray0.length);
      assertEquals(17, byteArray1.length);
      assertNotNull(string2);
      assertEquals("Cy0LwYcAAAAAAAAAAAAAAAA=", string2);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(base64_2, base64_1);
      assertNotSame(base64_2, base64_0);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertFalse(base64_2.isUrlSafe());
      assertFalse(base64_2.equals((Object)base64_1));
      assertFalse(base64_2.equals((Object)base64_0));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(string2.equals((Object)string0));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      
      base64_2.decode(byteArray1, (int) (byte) (-121), (int) (byte) (-121));
      assertEquals(17, byteArray0.length);
      assertEquals(17, byteArray1.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(base64_2, base64_1);
      assertNotSame(base64_2, base64_0);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertFalse(base64_2.isUrlSafe());
      assertFalse(base64_2.equals((Object)base64_1));
      assertFalse(base64_2.equals((Object)base64_0));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)11;
      byte[] byteArray1 = Base64.decodeBase64((byte[]) null);
      assertNull(byteArray1);
      
      Base64 base64_0 = new Base64((byte)11, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte)11, (byte)11, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      
      String string0 = base64_0.encodeToString((byte[]) null);
      assertEquals(5, byteArray0.length);
      assertNull(string0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte)11, (byte)11, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = Base64.encodeBase64String(byteArray0);
      //  // Unstable assertion: assertEquals(0, byteArray0.length);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("", string0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray0);
      
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertEquals(0, byteArray0.length);
      //  // Unstable assertion: assertEquals(0, byteArray1.length);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray1);
      
      byte[] byteArray2 = Base64.encodeBase64((byte[]) null, false, false, (-248));
      //  // Unstable assertion: assertNull(byteArray2);
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, false, true);
      //  // Unstable assertion: assertEquals(0, byteArray0.length);
      //  // Unstable assertion: assertEquals(0, byteArray3.length);
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray3);
      
      byte[] byteArray4 = Base64.decodeBase64(" XqRKxEFW5");
      //  // Unstable assertion: assertEquals(6, byteArray4.length);
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)94, (byte) (-92), (byte)74, (byte) (-60), (byte)65, (byte)86}, byteArray4);
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      
      byte[] byteArray5 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertEquals(2, byteArray5.length);
      //  // Unstable assertion: assertNotNull(byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray4);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-98), (byte) (-94)}, byteArray5);
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray4));
      
      byte[] byteArray6 = Base64.encodeBase64((byte[]) null, true);
      //  // Unstable assertion: assertNull(byteArray6);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertNotNull(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-98), (byte) (-94)}, byteArray0);
      
      byte[] byteArray1 = new byte[7];
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte)28;
      byteArray1[2] = (byte)32;
      byteArray1[3] = (byte)28;
      byteArray1[4] = (byte)28;
      byteArray1[5] = (byte)28;
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      //  // Unstable assertion: assertEquals(7, byteArray1.length);
      //  // Unstable assertion: assertEquals(6, byteArray2.length);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)1, (byte)28, (byte)32, (byte)28, (byte)28, (byte)28, (byte)0}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)1, (byte)28, (byte)28, (byte)28, (byte)28, (byte)0}, byteArray2);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      
      Base64 base64_0 = new Base64(1, byteArray1);
      //  // Unstable assertion: assertEquals(7, byteArray1.length);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)1, (byte)28, (byte)32, (byte)28, (byte)28, (byte)28, (byte)0}, byteArray1);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 1, (int) (byte)32);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertEquals(0, byteArray0.length);
      //  // Unstable assertion: assertEquals(0, byteArray1.length);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray1);
      
      boolean boolean0 = Base64.isBase64((byte)123);
      //  // Unstable assertion: assertFalse(boolean0);
      
      byte[] byteArray2 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      //  // Unstable assertion: assertEquals(37, byteArray2.length);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      
      byte[] byteArray3 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertEquals(2, byteArray3.length);
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-98), (byte) (-94)}, byteArray3);
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray0, false);
      //  // Unstable assertion: assertEquals(0, byteArray0.length);
      //  // Unstable assertion: assertEquals(0, byteArray4.length);
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray4);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray0 = Base64.decodeBase64("");
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean boolean0 = Base64.isBase64((byte)42);
      assertFalse(boolean0);
      
      Base64 base64_1 = new Base64(76);
      assertNotNull(base64_1);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_1.isUrlSafe());
      assertFalse(base64_1.equals((Object)base64_0));
      
      byte[] byteArray1 = Base64.decodeBase64("");
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = base64_1.encode(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertNotNull(byteArray2);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(base64_1, base64_0);
      assertSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertFalse(base64_1.isUrlSafe());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(base64_1.equals((Object)base64_0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray3.length);
      assertNotNull(byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertSame(byteArray1, byteArray3);
      assertSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      
      String string0 = base64_0.encodeToString(byteArray3);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray3.length);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(base64_0, base64_1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertSame(byteArray1, byteArray3);
      assertSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertFalse(base64_0.isUrlSafe());
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      assertEquals(1, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Base64 base64_0 = new Base64();
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      boolean boolean0 = base64_0.isUrlSafe();
      assertFalse(boolean0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      boolean boolean1 = Base64.isBase64(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertTrue(boolean1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray2 = base64_0.encode(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertEquals(8, byteArray2.length);
      assertNotNull(byteArray2);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61}, byteArray1);
      assertArrayEquals(new byte[] {(byte)81, (byte)85, (byte)69, (byte)57, (byte)80, (byte)81, (byte)61, (byte)61}, byteArray2);
      assertFalse(base64_0.isUrlSafe());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      base64_0.encode(byteArray1, 35, (-2121));
      assertEquals(1, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61}, byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("AA", string0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertEquals(4, byteArray1.length);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61}, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertEquals(4, byteArray1.length);
      //  // Unstable assertion: assertEquals(10, byteArray2.length);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)81, (byte)85, (byte)69, (byte)57, (byte)80, (byte)81, (byte)61, (byte)61, (byte) (-98), (byte) (-94)}, byteArray2);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      
      byte byte0 = (byte)43;
      boolean boolean0 = Base64.isBase64((byte)43);
      //  // Unstable assertion: assertTrue(boolean0);
      
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertEquals(4, byteArray1.length);
      //  // Unstable assertion: assertEquals(10, byteArray2.length);
      //  // Unstable assertion: assertEquals(10, byteArray3.length);
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)81, (byte)85, (byte)69, (byte)57, (byte)80, (byte)81, (byte)61, (byte)61, (byte) (-98), (byte) (-94)}, byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)81, (byte)85, (byte)69, (byte)57, (byte)80, (byte)81, (byte)61, (byte)61, (byte) (-98), (byte) (-94)}, byteArray3);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      
      Base64 base64_0 = new Base64();
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      int int0 = 597;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 597, (int) (byte)43);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 597
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)9;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)9}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Base64 base64_0 = new Base64();
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)9}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byte[] byteArray3 = new byte[7];
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      
      byteArray3[0] = (byte)12;
      byteArray3[1] = (byte)9;
      byteArray3[2] = (byte)9;
      byteArray3[3] = (byte)9;
      byteArray3[4] = (byte)9;
      byteArray3[5] = (byte)9;
      byteArray3[6] = (byte)63;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray3);
      assertEquals(7, byteArray3.length);
      assertNotNull(bigInteger0);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertArrayEquals(new byte[] {(byte)12, (byte)9, (byte)9, (byte)9, (byte)9, (byte)9, (byte)63}, byteArray3);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray0, false, false);
      assertEquals(1, byteArray0.length);
      assertEquals(4, byteArray4.length);
      assertNotNull(byteArray4);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray3);
      assertArrayEquals(new byte[] {(byte)9}, byteArray0);
      assertArrayEquals(new byte[] {(byte)67, (byte)81, (byte)61, (byte)61}, byteArray4);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray3));
      
      byte[] byteArray5 = base64_0.encode(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(4, byteArray5.length);
      assertNotNull(byteArray5);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray5, byteArray4);
      assertNotSame(byteArray5, byteArray2);
      assertNotSame(byteArray5, byteArray0);
      assertNotSame(byteArray5, byteArray1);
      assertNotSame(byteArray5, byteArray3);
      assertArrayEquals(new byte[] {(byte)9}, byteArray0);
      assertArrayEquals(new byte[] {(byte)67, (byte)81, (byte)61, (byte)61}, byteArray5);
      assertFalse(base64_0.isUrlSafe());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray0));
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertFalse(byteArray5.equals((Object)byteArray3));
      
      base64_0.decode(byteArray1, (int) (byte)9, (int) (byte)9);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray1, byteArray5);
      assertNotSame(byteArray1, byteArray4);
      assertSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)9}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray1.equals((Object)byteArray5));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      base64_0.encode(byteArray4, (-1248), 2);
      assertEquals(1, byteArray0.length);
      assertEquals(4, byteArray4.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray5);
      assertNotSame(byteArray4, byteArray3);
      assertArrayEquals(new byte[] {(byte)9}, byteArray0);
      assertArrayEquals(new byte[] {(byte)67, (byte)81, (byte)61, (byte)61}, byteArray4);
      assertFalse(base64_0.isUrlSafe());
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray5));
      assertFalse(byteArray4.equals((Object)byteArray3));
      
      boolean boolean0 = Base64.isBase64("");
      assertTrue(boolean0);
      
      int int0 = base64_0.avail();
      assertEquals(0, int0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(bigInteger1);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(bigInteger1, bigInteger0);
      assertArrayEquals(new byte[] {(byte)9}, byteArray0);
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      
      int int1 = base64_0.avail();
      assertEquals(0, int1);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      assertTrue(int1 == int0);
      
      boolean boolean1 = Base64.isBase64(byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean1);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray4);
      assertArrayEquals(new byte[] {(byte)9}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertTrue(boolean1 == boolean0);
      
      base64_0.decode(byteArray1, (int) (byte)9, 0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray1, byteArray5);
      assertNotSame(byteArray1, byteArray4);
      assertSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)9}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray1.equals((Object)byteArray5));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Random.setNextRandom(1593);
      try { 
        base64_0.decode((Object) bigInteger1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte) (-121);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)11, (byte)45, (byte)11, (byte) (-63), (byte) (-121)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)11, (byte)45, (byte)11, (byte) (-63), (byte) (-121)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Base64 base64_0 = new Base64();
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      base64_0.encode(byteArray1, 1784, (int) (byte) (-63));
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)11, (byte)45, (byte)11, (byte) (-63), (byte) (-121)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)11, (byte)45, (byte)11, (byte) (-63), (byte) (-121)}, byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = base64_0.encode(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertEquals(8, byteArray2.length);
      assertNotNull(byteArray2);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)11, (byte)45, (byte)11, (byte) (-63), (byte) (-121)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)11, (byte)45, (byte)11, (byte) (-63), (byte) (-121)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)67, (byte)121, (byte)48, (byte)76, (byte)119, (byte)89, (byte)99, (byte)61}, byteArray2);
      assertFalse(base64_0.isUrlSafe());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byte[] byteArray3 = Base64.decodeBase64(": ");
      assertEquals(0, byteArray3.length);
      assertNotNull(byteArray3);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      
      Base64 base64_1 = new Base64(335, byteArray3);
      assertEquals(0, byteArray3.length);
      assertNotNull(base64_1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertFalse(base64_1.isUrlSafe());
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(base64_1.equals((Object)base64_0));
      
      // Undeclared exception!
      try { 
        base64_1.decode(byteArray0, 1, 2069);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      
      boolean boolean0 = Base64.isBase64((byte)43);
      //  // Unstable assertion: assertTrue(boolean0);
      
      Base64 base64_1 = new Base64(2530);
      //  // Unstable assertion: assertNotNull(base64_1);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      
      byte[] byteArray0 = Base64.decodeBase64(") than the specified maxium size of ");
      //  // Unstable assertion: assertEquals(21, byteArray0.length);
      //  // Unstable assertion: assertNotNull(byteArray0);
      
      byte[] byteArray1 = base64_0.encode(byteArray0);
      //  // Unstable assertion: assertEquals(21, byteArray0.length);
      //  // Unstable assertion: assertEquals(30, byteArray1.length);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(base64_0, base64_1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertFalse(base64_0.equals((Object)base64_1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertEquals(21, byteArray0.length);
      //  // Unstable assertion: assertEquals(30, byteArray2.length);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      
      byte[] byteArray3 = Base64.encodeBase64((byte[]) null, false, true);
      //  // Unstable assertion: assertNull(byteArray3);
      
      boolean boolean1 = base64_1.isUrlSafe();
      //  // Unstable assertion: assertFalse(boolean1);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(base64_1, base64_0);
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = Base64.isBase64(byteArray1);
      //  // Unstable assertion: assertEquals(21, byteArray0.length);
      //  // Unstable assertion: assertEquals(30, byteArray1.length);
      //  // Unstable assertion: assertFalse(boolean2);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(base64_0, base64_1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertFalse(base64_0.equals((Object)base64_1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertTrue(boolean2 == boolean1);
      //  // Unstable assertion: assertFalse(boolean2 == boolean0);
      
      base64_0.encode((byte[]) null, 3, 696);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(base64_0, base64_1);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertFalse(base64_0.equals((Object)base64_1));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte) (-107);
      byteArray0[5] = (byte)59;
      Base64 base64_0 = new Base64(1269, byteArray0, false);
      assertEquals(6, byteArray0.length);
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte) (-108), (byte) (-7), (byte)0, (byte)123, (byte) (-107), (byte)59}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray1 = base64_0.decode(byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-108), (byte) (-7), (byte)0, (byte)123, (byte) (-107), (byte)59}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Base64 base64_1 = new Base64((-733), byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(base64_1);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte) (-108), (byte) (-7), (byte)0, (byte)123, (byte) (-107), (byte)59}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertFalse(base64_1.isUrlSafe());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(base64_1.equals((Object)base64_0));
      
      int int0 = (-590);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(bigInteger0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(base64_0, base64_1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-108), (byte) (-7), (byte)0, (byte)123, (byte) (-107), (byte)59}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray0, (int) (byte)0, Integer.MAX_VALUE);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64(true);
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertTrue(base64_0.isUrlSafe());
      
      Object object0 = base64_0.decode((Object) "");
      assertNotNull(object0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertTrue(base64_0.isUrlSafe());
      
      Object object1 = base64_0.decode(object0);
      assertNotNull(object1);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertTrue(base64_0.isUrlSafe());
      
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(string0);
      assertEquals("AA==", string0);
      assertNotSame(byteArray0, object0);
      assertNotSame(byteArray0, object1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(byteArray0.equals((Object)object0));
      assertFalse(byteArray0.equals((Object)object1));
      
      Base64 base64_1 = new Base64(1073741824, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(base64_1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(base64_1.isUrlSafe());
      assertFalse(byteArray0.equals((Object)object0));
      assertFalse(byteArray0.equals((Object)object1));
      assertFalse(base64_1.equals((Object)base64_0));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Base64 base64_0 = new Base64(false);
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte byte0 = (byte)0;
      byte byte1 = (byte) (-107);
      Base64 base64_1 = new Base64((byte)59, byteArray0, false);
      assertEquals(8, byteArray0.length);
      assertNotNull(base64_1);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(base64_1.isUrlSafe());
      assertFalse(base64_1.equals((Object)base64_0));
      
      byte[] byteArray1 = base64_0.decode(byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(base64_0, base64_1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int int0 = base64_0.readResults(byteArray1, 690, (byte)123);
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals((-1), int0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(base64_0, base64_1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(string0);
      assertEquals("AAAAAAAAAAA", string0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      String string1 = Base64.encodeBase64String(byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(string1);
      assertEquals("AAAAAAAAAAA=", string1);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(string1.equals((Object)string0));
      
      int int1 = base64_1.readResults(byteArray0, (byte)123, 2694);
      assertEquals(8, byteArray0.length);
      assertEquals(0, int1);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(base64_1, base64_0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(base64_1.isUrlSafe());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(base64_1.equals((Object)base64_0));
      assertFalse(int1 == int0);
      
      Base64 base64_2 = new Base64();
      assertNotNull(base64_2);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_2.isUrlSafe());
      assertFalse(base64_2.equals((Object)base64_0));
      assertFalse(base64_2.equals((Object)base64_1));
      
      base64_2.decode(byteArray1, (-969), (int) (byte) (-107));
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(base64_0, base64_2);
      assertNotSame(base64_0, base64_1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(base64_2, base64_0);
      assertNotSame(base64_2, base64_1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertFalse(base64_2.isUrlSafe());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(base64_0.equals((Object)base64_2));
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(base64_2.equals((Object)base64_0));
      assertFalse(base64_2.equals((Object)base64_1));
      
      boolean boolean0 = base64_0.hasData();
      assertFalse(boolean0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(base64_0, base64_2);
      assertNotSame(base64_0, base64_1);
      assertFalse(base64_0.isUrlSafe());
      assertFalse(base64_0.equals((Object)base64_2));
      assertFalse(base64_0.equals((Object)base64_1));
      
      byte[] byteArray2 = base64_2.decode("");
      assertEquals(0, byteArray2.length);
      assertNotNull(byteArray2);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(base64_2, base64_0);
      assertNotSame(base64_2, base64_1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertFalse(base64_2.isUrlSafe());
      assertFalse(base64_2.equals((Object)base64_0));
      assertFalse(base64_2.equals((Object)base64_1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      String string2 = base64_0.encodeToString(byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(base64_0, base64_2);
      assertNotSame(base64_0, base64_1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(base64_0.equals((Object)base64_2));
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean1 = Base64.isBase64(byteArray0);
      assertEquals(8, byteArray0.length);
      assertFalse(boolean1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray3 = Base64.decodeBase64("");
      assertEquals(0, byteArray3.length);
      assertNotNull(byteArray3);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArray4.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray4);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray3);
      assertSame(byteArray4, byteArray1);
      assertNotSame(base64_0, base64_2);
      assertNotSame(base64_0, base64_1);
      assertSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray4);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(base64_0.equals((Object)base64_2));
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray5 = Base64.discardWhitespace(byteArray2);
      assertEquals(0, byteArray5.length);
      assertEquals(0, byteArray2.length);
      assertNotNull(byteArray5);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray5, byteArray2);
      assertNotSame(byteArray5, byteArray3);
      assertNotSame(byteArray5, byteArray0);
      assertNotSame(byteArray5, byteArray4);
      assertNotSame(byteArray5, byteArray1);
      assertNotSame(base64_2, base64_0);
      assertNotSame(base64_2, base64_1);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray5);
      assertArrayEquals(new byte[] {}, byteArray5);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertFalse(base64_2.isUrlSafe());
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray0));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertFalse(base64_2.equals((Object)base64_0));
      assertFalse(base64_2.equals((Object)base64_1));
      assertFalse(byteArray2.equals((Object)byteArray4));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray3));
      
      byte[] byteArray6 = Base64.discardWhitespace(byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray6.length);
      assertNotNull(byteArray6);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray6);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray6, byteArray0);
      assertNotSame(byteArray6, byteArray2);
      assertNotSame(byteArray6, byteArray3);
      assertNotSame(byteArray6, byteArray4);
      assertNotSame(byteArray6, byteArray1);
      assertNotSame(byteArray6, byteArray5);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray6);
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray6.equals((Object)byteArray0));
      assertFalse(byteArray6.equals((Object)byteArray2));
      assertFalse(byteArray6.equals((Object)byteArray3));
      assertFalse(byteArray6.equals((Object)byteArray4));
      assertFalse(byteArray6.equals((Object)byteArray1));
      assertFalse(byteArray6.equals((Object)byteArray5));
      
      byte[] byteArray7 = Base64.encodeBase64(byteArray6, true, true);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray6.length);
      assertEquals(13, byteArray7.length);
      assertNotNull(byteArray7);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray7);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray6);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray6, byteArray7);
      assertNotSame(byteArray6, byteArray0);
      assertNotSame(byteArray6, byteArray2);
      assertNotSame(byteArray6, byteArray3);
      assertNotSame(byteArray6, byteArray4);
      assertNotSame(byteArray6, byteArray1);
      assertNotSame(byteArray6, byteArray5);
      assertNotSame(byteArray7, byteArray6);
      assertNotSame(byteArray7, byteArray1);
      assertNotSame(byteArray7, byteArray5);
      assertNotSame(byteArray7, byteArray0);
      assertNotSame(byteArray7, byteArray4);
      assertNotSame(byteArray7, byteArray2);
      assertNotSame(byteArray7, byteArray3);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray6);
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray6));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray6.equals((Object)byteArray0));
      assertFalse(byteArray6.equals((Object)byteArray2));
      assertFalse(byteArray6.equals((Object)byteArray3));
      assertFalse(byteArray6.equals((Object)byteArray4));
      assertFalse(byteArray6.equals((Object)byteArray1));
      assertFalse(byteArray6.equals((Object)byteArray5));
      assertFalse(byteArray7.equals((Object)byteArray6));
      assertFalse(byteArray7.equals((Object)byteArray1));
      assertFalse(byteArray7.equals((Object)byteArray5));
      assertFalse(byteArray7.equals((Object)byteArray0));
      assertFalse(byteArray7.equals((Object)byteArray4));
      assertFalse(byteArray7.equals((Object)byteArray2));
      assertFalse(byteArray7.equals((Object)byteArray3));
      
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray5, 64, 65);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 64
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte) (-121);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)11, (byte)16, (byte) (-2), (byte) (-63), (byte) (-121)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)11, (byte)16, (byte) (-2), (byte) (-63), (byte) (-121)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Random.setNextRandom((byte) (-63));
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false, false, (int) (byte)11);
      assertEquals(5, byteArray0.length);
      assertEquals(8, byteArray2.length);
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)11, (byte)16, (byte) (-2), (byte) (-63), (byte) (-121)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)67, (byte)120, (byte)68, (byte)43, (byte)119, (byte)89, (byte)99, (byte)61}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      Base64 base64_0 = new Base64((byte)11, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte)11, (byte)16, (byte) (-2), (byte) (-63), (byte) (-121)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)11, (byte)16, (byte) (-2), (byte) (-63), (byte) (-121)}, byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray3 = new byte[2];
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      
      byteArray3[0] = (byte)11;
      byteArray3[1] = (byte) (-63);
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray3);
      assertEquals(2, byteArray3.length);
      assertEquals(6, byteArray4.length);
      assertNotNull(byteArray4);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray0);
      assertArrayEquals(new byte[] {(byte)11, (byte) (-63)}, byteArray3);
      assertArrayEquals(new byte[] {(byte)67, (byte)56, (byte)69, (byte)61, (byte) (-98), (byte) (-94)}, byteArray4);
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray0));
      
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 1, 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Base64 base64_0 = new Base64(false);
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)42;
      byteArray1[1] = (byte) (-58);
      byteArray1[2] = (byte)91;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)42;
      byteArray1[6] = (byte)42;
      Base64 base64_1 = new Base64((byte)42, byteArray1);
      assertEquals(7, byteArray1.length);
      assertNotNull(base64_1);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte)42, (byte) (-58), (byte)91, (byte)0, (byte)0, (byte)42, (byte)42}, byteArray1);
      assertFalse(base64_1.isUrlSafe());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(base64_1.equals((Object)base64_0));
      
      base64_1.encode(byteArray0, (int) (byte)91, (-590));
      assertEquals(8, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(base64_1, base64_0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)42, (byte) (-58), (byte)91, (byte)0, (byte)0, (byte)42, (byte)42}, byteArray1);
      assertFalse(base64_1.isUrlSafe());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(base64_1.equals((Object)base64_0));
      
      byte[] byteArray2 = base64_0.encode(byteArray1);
      assertEquals(7, byteArray1.length);
      assertEquals(14, byteArray2.length);
      assertNotNull(byteArray2);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(base64_0, base64_1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)42, (byte) (-58), (byte)91, (byte)0, (byte)0, (byte)42, (byte)42}, byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byte[] byteArray3 = Base64.decodeBase64("{40]1)%lj)xcXDI");
      assertEquals(7, byteArray3.length);
      assertNotNull(byteArray3);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-29), (byte)77, (byte)101, (byte) (-113), (byte)23, (byte)23, (byte)12}, byteArray3);
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      
      base64_1.decode(byteArray3, (int) (byte) (-58), 1633);
      assertEquals(7, byteArray1.length);
      assertEquals(7, byteArray3.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(base64_1, base64_0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertArrayEquals(new byte[] {(byte)42, (byte) (-58), (byte)91, (byte)0, (byte)0, (byte)42, (byte)42}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-29), (byte)77, (byte)101, (byte) (-113), (byte)23, (byte)23, (byte)12}, byteArray3);
      assertFalse(base64_1.isUrlSafe());
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(base64_1.equals((Object)base64_0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean boolean1 = Base64.isBase64(")3Q3O;d ");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-108);
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int int0 = (-238);
      Base64 base64_0 = new Base64(1269, byteArray1, true);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertTrue(base64_0.isUrlSafe());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(string0);
      assertEquals("lAAAAAAA", string0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      String string1 = base64_0.encodeToString(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertTrue(base64_0.isUrlSafe());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(string1.equals((Object)string0));
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, false);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray3.length);
      assertNotNull(byteArray3);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      
      int int1 = base64_0.readResults(byteArray3, 1269, 105);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray3.length);
      assertEquals(0, int1);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertTrue(base64_0.isUrlSafe());
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(int1 == int0);
      
      byte[] byteArray4 = new byte[8];
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray2));
      
      byteArray4[0] = (byte) (-108);
      byteArray4[1] = (byte) (-108);
      byte byte1 = (byte)4;
      byteArray4[2] = (byte)4;
      byteArray4[3] = (byte)0;
      byteArray4[4] = (byte) (-108);
      byteArray4[5] = (byte) (-108);
      byteArray4[6] = (byte) (-108);
      byteArray4[7] = (byte) (-108);
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = null;
      byte[] byteArray1 = Base64.encodeBase64((byte[]) null);
      assertNull(byteArray1);
      
      Base64 base64_0 = new Base64(false);
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray2 = Base64.encodeBase64URLSafe((byte[]) null);
      assertNull(byteArray2);
      
      int int0 = 638;
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, (-955), 638);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-37);
      byte[] byteArray1 = new byte[2];
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-37);
      byteArray1[1] = (byte) (-37);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      //  // Unstable assertion: assertEquals(6, byteArray2.length);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-37), (byte) (-37)}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)50, (byte)57, (byte)115, (byte)61, (byte) (-98), (byte) (-94)}, byteArray2);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      
      boolean boolean0 = Base64.isBase64((byte) (-37));
      //  // Unstable assertion: assertFalse(boolean0);
      
      Base64 base64_0 = new Base64((byte) (-37));
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray3 = Base64.decodeBase64("d)mM`q22");
      //  // Unstable assertion: assertEquals(4, byteArray3.length);
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)118, (byte)99, (byte)42, (byte) (-37)}, byteArray3);
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      
      byte[] byteArray4 = new byte[0];
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      
      byte[] byteArray5 = base64_0.encode(byteArray4);
      //  // Unstable assertion: assertEquals(0, byteArray4.length);
      //  // Unstable assertion: assertEquals(0, byteArray5.length);
      //  // Unstable assertion: assertNotNull(byteArray5);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertSame(byteArray4, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertSame(byteArray5, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray4);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray5);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray3));
      
      byte[] byteArray6 = Base64.encodeBase64Chunked(byteArray1);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      //  // Unstable assertion: assertEquals(6, byteArray6.length);
      //  // Unstable assertion: assertNotNull(byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray4);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-37), (byte) (-37)}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)50, (byte)57, (byte)115, (byte)61, (byte) (-98), (byte) (-94)}, byteArray6);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray4));
      
      byte[] byteArray7 = Base64.encodeBase64(byteArray6, false, true);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      //  // Unstable assertion: assertEquals(6, byteArray6.length);
      //  // Unstable assertion: assertEquals(8, byteArray7.length);
      //  // Unstable assertion: assertNotNull(byteArray7);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray7);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray7);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray5);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-37), (byte) (-37)}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)50, (byte)57, (byte)115, (byte)61, (byte) (-98), (byte) (-94)}, byteArray6);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)77, (byte)106, (byte)108, (byte)122, (byte)80, (byte)90, (byte)54, (byte)105}, byteArray7);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray5));
      
      boolean boolean1 = base64_0.isUrlSafe();
      //  // Unstable assertion: assertFalse(boolean1);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = Base64.isBase64(byteArray2);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      //  // Unstable assertion: assertEquals(6, byteArray2.length);
      //  // Unstable assertion: assertFalse(boolean2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray7);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray7);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-37), (byte) (-37)}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)50, (byte)57, (byte)115, (byte)61, (byte) (-98), (byte) (-94)}, byteArray2);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray7));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray7));
      //  // Unstable assertion: assertTrue(boolean2 == boolean1);
      //  // Unstable assertion: assertTrue(boolean2 == boolean0);
      
      byte[] byteArray8 = Base64.decodeBase64("d)mM`q22");
      //  // Unstable assertion: assertEquals(4, byteArray8.length);
      //  // Unstable assertion: assertNotNull(byteArray8);
      //  // Unstable assertion: assertNotSame(byteArray8, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray8, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray8, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray8, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray8, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray8, byteArray7);
      //  // Unstable assertion: assertNotSame(byteArray8, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray8, byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)118, (byte)99, (byte)42, (byte) (-37)}, byteArray8);
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)byteArray7));
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)byteArray3));
      
      base64_0.encode(byteArray8, 696, (-950));
      //  // Unstable assertion: assertEquals(4, byteArray8.length);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray8, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray8, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray8, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray8, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray8, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray8, byteArray7);
      //  // Unstable assertion: assertNotSame(byteArray8, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray8, byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)118, (byte)99, (byte)42, (byte) (-37)}, byteArray8);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)byteArray7));
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)byteArray3));
      
      byte[] byteArray9 = new byte[9];
      //  // Unstable assertion: assertFalse(byteArray9.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray9.equals((Object)byteArray7));
      //  // Unstable assertion: assertFalse(byteArray9.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray9.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray9.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray9.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray9.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray9.equals((Object)byteArray8));
      //  // Unstable assertion: assertFalse(byteArray9.equals((Object)byteArray0));
      
      byteArray9[0] = (byte) (-37);
      byteArray9[1] = (byte) (-37);
      byteArray9[2] = (byte) (-37);
      byteArray9[3] = (byte) (-37);
      byteArray9[4] = (byte) (-37);
      byteArray9[5] = (byte) (-37);
      byteArray9[6] = (byte) (-37);
      byteArray9[7] = (byte) (-37);
      byteArray9[8] = (byte) (-37);
      byte[] byteArray10 = Base64.decodeBase64(byteArray9);
      //  // Unstable assertion: assertEquals(9, byteArray9.length);
      //  // Unstable assertion: assertEquals(0, byteArray10.length);
      //  // Unstable assertion: assertNotNull(byteArray10);
      //  // Unstable assertion: assertNotSame(byteArray9, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray9, byteArray7);
      //  // Unstable assertion: assertNotSame(byteArray9, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray9, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray9, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray9, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray9, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray9, byteArray8);
      //  // Unstable assertion: assertNotSame(byteArray9, byteArray10);
      //  // Unstable assertion: assertNotSame(byteArray9, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray10, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray10, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray10, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray10, byteArray8);
      //  // Unstable assertion: assertNotSame(byteArray10, byteArray9);
      //  // Unstable assertion: assertNotSame(byteArray10, byteArray7);
      //  // Unstable assertion: assertNotSame(byteArray10, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray10, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray10, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray10, byteArray4);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-37), (byte) (-37), (byte) (-37), (byte) (-37), (byte) (-37), (byte) (-37), (byte) (-37), (byte) (-37), (byte) (-37)}, byteArray9);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray10);
      //  // Unstable assertion: assertFalse(byteArray9.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray9.equals((Object)byteArray7));
      //  // Unstable assertion: assertFalse(byteArray9.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray9.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray9.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray9.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray9.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray9.equals((Object)byteArray8));
      //  // Unstable assertion: assertFalse(byteArray9.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray10.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray10.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray10.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray10.equals((Object)byteArray8));
      //  // Unstable assertion: assertFalse(byteArray10.equals((Object)byteArray9));
      //  // Unstable assertion: assertFalse(byteArray10.equals((Object)byteArray7));
      //  // Unstable assertion: assertFalse(byteArray10.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray10.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray10.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray10.equals((Object)byteArray4));
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      //  // Unstable assertion: assertNotNull(bigInteger0);
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      
      byte[] byteArray11 = Base64.encodeInteger(bigInteger0);
      //  // Unstable assertion: assertEquals(0, byteArray11.length);
      //  // Unstable assertion: assertNotNull(byteArray11);
      //  // Unstable assertion: assertNotSame(byteArray11, byteArray9);
      //  // Unstable assertion: assertNotSame(byteArray11, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray11, byteArray10);
      //  // Unstable assertion: assertNotSame(byteArray11, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray11, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray11, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray11, byteArray7);
      //  // Unstable assertion: assertNotSame(byteArray11, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray11, byteArray8);
      //  // Unstable assertion: assertNotSame(byteArray11, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray11, byteArray6);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray11);
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertFalse(byteArray11.equals((Object)byteArray9));
      //  // Unstable assertion: assertFalse(byteArray11.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray11.equals((Object)byteArray10));
      //  // Unstable assertion: assertFalse(byteArray11.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray11.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray11.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray11.equals((Object)byteArray7));
      //  // Unstable assertion: assertFalse(byteArray11.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray11.equals((Object)byteArray8));
      //  // Unstable assertion: assertFalse(byteArray11.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray11.equals((Object)byteArray6));
      
      boolean boolean3 = base64_0.hasData();
      //  // Unstable assertion: assertTrue(boolean3);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertFalse(boolean3 == boolean1);
      //  // Unstable assertion: assertFalse(boolean3 == boolean2);
      //  // Unstable assertion: assertFalse(boolean3 == boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-86);
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = BigInteger.ONE;
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      BigInteger bigInteger2 = bigInteger0.andNot(bigInteger1);
      assertNotNull(bigInteger2);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte)10, bigInteger2.byteValue());
      assertEquals((short)10, bigInteger2.shortValue());
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertTrue(bigInteger2.equals((Object)bigInteger0));
      
      boolean boolean0 = bigInteger2.testBit((byte)1);
      assertTrue(boolean0);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte)10, bigInteger2.byteValue());
      assertEquals((short)10, bigInteger2.shortValue());
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertTrue(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertTrue(bigInteger2.equals((Object)bigInteger0));
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      assertEquals(8, byteArray0.length);
      assertEquals(14, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-86), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Base64 base64_0 = new Base64();
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      base64_0.encode(byteArray1, 49, (-221));
      assertEquals(8, byteArray0.length);
      assertEquals(14, byteArray1.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-86), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Base64 base64_1 = new Base64(53);
      assertNotNull(base64_1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_1.isUrlSafe());
      assertFalse(base64_1.equals((Object)base64_0));
      
      byte[] byteArray2 = base64_1.decode(byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(14, byteArray1.length);
      assertEquals(8, byteArray2.length);
      assertNotNull(byteArray2);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(base64_1, base64_0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-86), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-86), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertFalse(base64_1.isUrlSafe());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(base64_1.equals((Object)base64_0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      boolean boolean1 = base64_1.isUrlSafe();
      assertFalse(boolean1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(base64_1, base64_0);
      assertFalse(base64_1.isUrlSafe());
      assertFalse(base64_1.equals((Object)base64_0));
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = Base64.isBase64(byteArray2);
      assertEquals(8, byteArray0.length);
      assertEquals(14, byteArray1.length);
      assertEquals(8, byteArray2.length);
      assertFalse(boolean2);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(base64_1, base64_0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-86), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-86), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertFalse(base64_1.isUrlSafe());
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(base64_1.equals((Object)base64_0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = Base64.isBase64((byte)22);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray2);
      assertEquals(8, byteArray0.length);
      assertEquals(14, byteArray1.length);
      assertEquals(8, byteArray2.length);
      assertEquals(11, byteArray3.length);
      assertNotNull(byteArray3);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(base64_1, base64_0);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-86), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-86), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertFalse(base64_1.isUrlSafe());
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(base64_1.equals((Object)base64_0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      
      BigInteger bigInteger3 = BigInteger.ZERO;
      assertNotNull(bigInteger3);
      assertNotSame(bigInteger3, bigInteger0);
      assertNotSame(bigInteger3, bigInteger2);
      assertNotSame(bigInteger3, bigInteger1);
      assertEquals((byte)0, bigInteger3.byteValue());
      assertEquals((short)0, bigInteger3.shortValue());
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      
      byte[] byteArray4 = Base64.toIntegerBytes(bigInteger2);
      assertEquals(1, byteArray4.length);
      assertNotNull(byteArray4);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger3);
      assertNotSame(bigInteger2, bigInteger0);
      assertArrayEquals(new byte[] {(byte)10}, byteArray4);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte)10, bigInteger2.byteValue());
      assertEquals((short)10, bigInteger2.shortValue());
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertTrue(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger3));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertTrue(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger3));
      
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray3, 53, (-77));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64((-1), byteArray0, true);
      base64_0.avail();
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.bitCount();
      bigInteger1.byteValueExact();
      bigInteger1.min(bigInteger0);
      bigInteger0.andNot(bigInteger1);
      bigInteger0.testBit(1751);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      base64_0.encode(byteArray0, 53, 0);
      base64_0.decode(byteArray0);
      base64_0.isUrlSafe();
      boolean boolean0 = Base64.isBase64(byteArray0);
      Base64.isBase64((byte)101);
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)101;
      Base64.encodeBase64URLSafe(byteArray2);
      BigInteger bigInteger2 = BigInteger.ZERO;
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger2);
      assertEquals(0, byteArray3.length);
      
      int int0 = base64_0.readResults(byteArray1, 0, (byte)101);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray1);
      
      byte[] byteArray4 = new byte[7];
      byteArray4[0] = (byte)20;
      byteArray4[1] = (byte)101;
      byteArray4[2] = (byte)101;
      byteArray4[3] = (byte)101;
      byteArray4[4] = (byte)1;
      byteArray4[5] = (byte)101;
      byteArray4[6] = (byte)101;
      byte[] byteArray5 = Base64.encodeBase64URLSafe(byteArray4);
      assertArrayEquals(new byte[] {(byte)70, (byte)71, (byte)86, (byte)108, (byte)90, (byte)81, (byte)70, (byte)108, (byte)90, (byte)81}, byteArray5);
      assertEquals(10, byteArray5.length);
      
      boolean boolean1 = base64_0.isUrlSafe();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Base64 base64_0 = new Base64(7);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)71;
      String string0 = Base64.encodeBase64String(byteArray0);
      //  // Unstable assertion: assertEquals("NVdHAA==", string0);
      
      base64_0.encode(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertEquals(10, byteArray1.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)78, (byte)86, (byte)100, (byte)72, (byte)65, (byte)65, (byte)61, (byte)61, (byte) (-98), (byte) (-94)}, byteArray1);
      
      byteArray0[3] = (byte)25;
      int int0 = base64_0.readResults(byteArray0, (byte)25, 1);
      //  // Unstable assertion: assertEquals((-1), int0);
      
      byte[] byteArray2 = base64_0.encode(byteArray0);
      //  // Unstable assertion: assertEquals(12, byteArray2.length);
      
      base64_0.decode(byteArray0, (int) (byte)25, 541);
      int int1 = base64_0.avail();
      //  // Unstable assertion: assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64Chunked((byte[]) null);
      base64_0.decode((byte[]) null);
      base64_0.decode("yV8DDRhS");
      Base64.encodeBase64((byte[]) null, true);
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.encodeBase64String((byte[]) null);
      Base64.decodeBase64((String) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger0);
      try { 
        base64_0.encode((Object) "yV8DDRhS");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64Chunked((byte[]) null);
      base64_0.decode((byte[]) null);
      Base64.encodeBase64((byte[]) null, true);
      base64_0.decode((Object) "");
      Base64.encodeBase64String((byte[]) null);
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-122);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-116);
      base64_0.decode((byte[]) null, (int) (byte) (-122), (int) (byte)0);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, true, true, (int) (byte) (-122));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of -122
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)110;
      Base64.encodeBase64URLSafeString(byteArray0);
      byteArray0[3] = (byte) (-1);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      //  // Unstable assertion: assertEquals(1, byteArray1.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)102}, byteArray1);
      
      byteArray0[4] = (byte) (-48);
      byteArray0[5] = (byte)98;
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)87, (byte)106, (byte)120, (byte)117, (byte)47, (byte)57, (byte)66, (byte)105, (byte) (-37), (byte) (-94)}, byteArray2);
      
      base64_0.encode(byteArray0, 0, 0);
      byte[] byteArray3 = new byte[1];
      byteArray3[0] = (byte) (-1);
      byte[] byteArray4 = Base64.encodeBase64(byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)47, (byte)119, (byte)61, (byte)61}, byteArray4);
      //  // Unstable assertion: assertEquals(4, byteArray4.length);
      
      Base64.decodeInteger(byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)90, (byte)60, (byte)110, (byte) (-1), (byte) (-48), (byte)98}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)87, (byte)106, (byte)120, (byte)117, (byte)47, (byte)57, (byte)66, (byte)105, (byte) (-98), (byte) (-94)}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64(0, byteArray1, true);
      byte[] byteArray2 = base64_0.decode("D%=");
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false);
      base64_0.decode((Object) "D%=");
      String string0 = Base64.encodeBase64String(byteArray2);
      assertEquals("", string0);
      
      byte[] byteArray4 = new byte[3];
      byteArray4[0] = (byte) (-122);
      byteArray4[1] = (byte) (-122);
      byteArray4[2] = (byte) (-122);
      byte[] byteArray5 = Base64.decodeBase64(byteArray4);
      Base64.encodeBase64(byteArray3, false, true, (int) (byte) (-122));
      String string1 = Base64.encodeBase64String(byteArray0);
      assertEquals("AQ==", string1);
      
      Base64 base64_1 = new Base64(true);
      Base64.decodeBase64(byteArray5);
      byte[] byteArray6 = base64_1.decode(byteArray1);
      assertEquals(0, byteArray6.length);
      
      byte[] byteArray7 = Base64.decodeBase64("yV8DDRhS");
      assertArrayEquals(new byte[] {(byte) (-55), (byte)95, (byte)3, (byte)13, (byte)24, (byte)82}, byteArray7);
      
      BigInteger bigInteger1 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger1);
      byte[] byteArray8 = new byte[4];
      byteArray8[0] = (byte) (-122);
      byteArray8[1] = (byte) (-122);
      byteArray8[2] = (byte) (-122);
      byteArray8[3] = (byte) (-122);
      boolean boolean0 = Base64.isArrayByteBase64(byteArray8);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)110;
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64("org.apache.commons.codec.EncoderException");
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.longValue();
      MockRandom mockRandom0 = new MockRandom();
      BigInteger.probablePrime(76, mockRandom0);
      bigInteger0.signum();
      Base64.encodeBase64(byteArray1, false, false, 14);
      BigInteger.valueOf((byte)110);
      bigInteger0.toString((int) (byte)90);
      Base64.toIntegerBytes(bigInteger0);
      base64_0.encode(byteArray2, (int) (byte) (-1), (int) (byte) (-1));
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger1);
      assertEquals(0, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte) (-94);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64((-238), byteArray0, true);
      Base64.encodeBase64String(byteArray1);
      Base64.decodeBase64(byteArray0);
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("26I", string0);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      int int0 = base64_0.readResults(byteArray2, (-3023), 105);
      assertEquals((-1), int0);
      
      base64_0.encodeToString(byteArray2);
      byte[] byteArray3 = Base64.decodeBase64(byteArray2);
      Base64.encodeBase64Chunked(byteArray3);
      base64_0.encode(byteArray2, (-1), (-1));
      byte[] byteArray4 = Base64.encodeBase64(byteArray2);
      assertEquals(0, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      //  // Unstable assertion: assertEquals("AA", string0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      boolean boolean0 = Base64.isBase64((byte)43);
      //  // Unstable assertion: assertTrue(boolean0);
      
      Base64 base64_0 = new Base64((-1157));
      byte[] byteArray3 = Base64.decodeBase64("AA");
      //  // Unstable assertion: assertEquals(1, byteArray3.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0}, byteArray3);
      
      byte[] byteArray4 = base64_0.encode(byteArray2);
      Base64.encodeBase64Chunked(byteArray4);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)81, (byte)85, (byte)69, (byte)57, (byte)80, (byte)81, (byte)61, (byte)61, (byte) (-98), (byte) (-94)}, byteArray2);
      
      byte[] byteArray5 = new byte[1];
      byteArray5[0] = (byte)43;
      Base64.encodeBase64(byteArray5, true, false);
      base64_0.isUrlSafe();
      boolean boolean1 = Base64.isBase64(byteArray1);
      //  // Unstable assertion: assertTrue(boolean1);
      
      byte[] byteArray6 = Base64.decodeBase64("");
      base64_0.encode(byteArray6, (-1157), 696);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64((byte[]) null);
      Base64 base64_0 = new Base64((-955), (byte[]) null, false);
      Base64.encodeBase64String((byte[]) null);
      base64_0.encodeToString((byte[]) null);
      Base64.encodeBase64((byte[]) null, true);
      base64_0.encode((byte[]) null);
      base64_0.decode((String) null);
      Base64.encodeBase64Chunked((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)42;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, 79);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)110;
      Base64.encodeBase64(byteArray0, true, true, (int) (byte)110);
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)110;
      Base64.decodeInteger(byteArray0);
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte) (-6);
      byteArray0[6] = (byte)90;
      byteArray0[7] = (byte)0;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (-3256), (int) (byte)110);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3256
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte byte0 = (byte) (-15);
      Base64.isBase64((byte) (-15));
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = null;
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.encodeBase64String((byte[]) null);
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, 73, 61);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(0, byteArray0);
      base64_0.decode("org.apache.commons.codec.DecoderException");
      base64_0.encode(byteArray0);
      base64_0.decode(byteArray0);
      try { 
        base64_0.encode((Object) "org.apache.commons.codec.DecoderException");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-1);
      boolean boolean0 = Base64.isBase64("As}0jf%75~f");
      assertFalse(boolean0);
      
      byteArray0[2] = (byte)29;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)29;
      byteArray1[1] = (byte)42;
      byteArray1[2] = (byte)29;
      byteArray1[3] = (byte)29;
      String string0 = base64_0.encodeToString(byteArray1);
      assertEquals("HSodHQ==", string0);
      
      byte[] byteArray2 = base64_0.decode(byteArray0);
      assertEquals(0, byteArray2.length);
      
      boolean boolean1 = base64_0.isUrlSafe();
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(false);
      Base64.decodeBase64("cTs s");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)108;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)108;
      byteArray1[1] = (byte)108;
      byteArray1[2] = (byte)50;
      byteArray1[3] = (byte)108;
      Base64.isBase64("cTs s");
      byteArray1[4] = (byte)50;
      byteArray1[5] = (byte)50;
      byteArray1[6] = (byte)108;
      byteArray1[7] = (byte)50;
      base64_0.readResults(byteArray1, (-1), 940);
      byteArray0[2] = (byte) (-36);
      byte[] byteArray2 = new byte[0];
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray2, (-1), 521);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)16;
      byte byte0 = (byte) (-127);
      byteArray0[1] = (byte) (-127);
      byte byte1 = (byte)0;
      byteArray0[2] = (byte)0;
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64(byteArray0, false);
      base64_0.avail();
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-127);
      byteArray1[1] = (byte)16;
      base64_0.encode(byteArray1);
      bigInteger0.isProbablePrime(713);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64("Hlp6BSi\"");
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte) (-107);
      byteArray0[5] = (byte)59;
      Base64 base64_0 = new Base64(1269, byteArray0, false);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      int int0 = base64_0.readResults(byteArray0, 1043, 0);
      assertEquals((-1), int0);
      
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64String(byteArray0);
      base64_0.decode(byteArray1, 1043, (int) (byte) (-107));
      boolean boolean0 = base64_0.hasData();
      assertFalse(boolean0);
      
      byte[] byteArray2 = base64_0.decode("Parameter supplied to Base64 encode is not a byte[]");
      Base64.isBase64(byteArray0);
      byte[] byteArray3 = Base64.decodeBase64("lAAAe5U7");
      assertEquals(6, byteArray3.length);
      
      byte[] byteArray4 = Base64.discardWhitespace(byteArray2);
      Base64.discardWhitespace(byteArray2);
      byte[] byteArray5 = Base64.encodeBase64(byteArray4, false, true);
      base64_0.decode(byteArray4, (int) (byte)0, (int) (byte)123);
      Base64.decodeBase64(byteArray0);
      byte[] byteArray6 = Base64.encodeBase64URLSafe(byteArray2);
      base64_0.decode(byteArray6, 1884, (-2079));
      String string0 = Base64.encodeBase64URLSafeString(byteArray5);
      assertEquals("UGFyYW1ldGVyc3VwcGxpZWR0b0Jhc2U2NGVuY29kZWlzbm90YWJ5dA", string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64((byte[]) null);
      Base64 base64_0 = new Base64((-955), (byte[]) null, false);
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, (-955), 638);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64.isBase64((byte)43);
      Base64 base64_0 = new Base64((-1157));
      Base64.decodeBase64("");
      byte[] byteArray3 = base64_0.encode(byteArray2);
      Base64.encodeBase64Chunked(byteArray3);
      byte[] byteArray4 = new byte[1];
      byteArray4[0] = (byte)43;
      Base64.encodeBase64(byteArray4, true, false);
      base64_0.isUrlSafe();
      Base64.isBase64(byteArray1);
      byte[] byteArray5 = Base64.decodeBase64("");
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray5, (-1157), 696);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1157
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)1;
      byteArray0[0] = (byte)1;
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte2 = (byte)0;
      byteArray0[2] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray0);
      byte byte3 = (byte) (-111);
      byteArray0[3] = (byte) (-111);
      base64_0.decode("");
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (-722), 33);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -722
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Base64.isBase64((byte) (-15));
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.encodeBase64String((byte[]) null);
      Base64.decodeBase64("");
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger0);
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)0;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64.isBase64("&jze");
      Base64 base64_0 = new Base64((byte)0, byteArray0);
      bigInteger0.getLowestSetBit();
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.encodeToString(byteArray0);
      base64_0.encode(byteArray0);
      Base64.encodeBase64(byteArray0);
      Base64.decodeInteger(byteArray1);
      base64_0.encode(byteArray0);
      try { 
        base64_0.encode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)52;
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("AAEyugA0", string0);
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((short)219, bigInteger0.shortValue());
      
      Base64 base64_0 = new Base64((byte)50);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)69, (byte)121, (byte)117, (byte)103, (byte)65, (byte)48}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)121;
      byte[] byteArray1 = base64_0.encode(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)103, (byte)65, (byte)65, (byte)73, (byte)101, (byte)81, (byte) (-37), (byte) (-94)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-1762), byteArray0);
      base64_0.encode(byteArray0);
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("", string0);
      assertFalse(base64_0.isUrlSafe());
      
      boolean boolean0 = Base64.isBase64("");
      assertTrue(boolean0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte byte0 = (byte)43;
      Base64.isBase64((byte)43);
      Base64 base64_0 = new Base64((byte)43);
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Base64 base64_0 = new Base64(0, (byte[]) null);
      base64_0.encode((byte[]) null);
      Base64.decodeBase64(")^v.rhbw.BO");
      Base64.encodeBase64String((byte[]) null);
      base64_0.readResults((byte[]) null, (-1952), (-1952));
      base64_0.decode((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64(0, byteArray1, true);
      byte[] byteArray2 = new byte[0];
      Base64.encodeBase64(byteArray2);
      byte[] byteArray3 = new byte[3];
      byteArray3[0] = (byte)116;
      byteArray3[1] = (byte) (-123);
      bigInteger0.bitLength();
      bigInteger0.getLowestSetBit();
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.subtract(bigInteger0);
      bigInteger0.remainder(bigInteger1);
      byteArray3[2] = (byte)1;
      Base64.encodeBase64URLSafeString(byteArray3);
      base64_0.hasData();
      Base64.encodeBase64(byteArray2, true);
      byte[] byteArray4 = Base64.encodeBase64URLSafe(byteArray2);
      assertNotSame(byteArray4, byteArray3);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Base64 base64_0 = new Base64(1365);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)119;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)119;
      byte[] byteArray2 = base64_0.decode("encodeInteger called with null parameter");
      //  // Unstable assertion: assertEquals(27, byteArray2.length);
      
      Base64.decodeInteger(byteArray0);
      byteArray1[1] = (byte)119;
      byteArray1[2] = (byte)119;
      byteArray1[3] = (byte)119;
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray1);
      //  // Unstable assertion: assertEquals(6, byteArray3.length);
      
      byte[] byteArray4 = Base64.decodeBase64("c4;$zW#EZ85`~XH(");
      //  // Unstable assertion: assertEquals(7, byteArray4.length);
      
      byteArray0[1] = (byte)36;
      Object object0 = base64_0.decode((Object) "c4;$zW#EZ85`~XH(");
      byteArray0[2] = (byte)33;
      base64_0.encode(byteArray0);
      byte[] byteArray5 = Base64.encodeBase64Chunked(byteArray1);
      boolean boolean0 = Base64.isBase64(byteArray5);
      base64_0.encode(object0);
      Base64.encodeBase64(byteArray0);
      boolean boolean1 = base64_0.hasData();
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      
      String string0 = Base64.encodeBase64String(byteArray5);
      //  // Unstable assertion: assertEquals("ZDNkM2R3PT3bog==", string0);
      
      byte[] byteArray6 = Base64.decodeBase64(byteArray5);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)119, (byte)119, (byte)119, (byte)119}, byteArray6);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte) (-95);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 85, (int) (byte)110);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 85
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Base64.isBase64((byte)0);
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64(byteArray0, true);
      base64_0.isUrlSafe();
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byte byte0 = (byte) (-59);
      byteArray1[3] = (byte) (-59);
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)0;
      Base64.encodeBase64(byteArray2, true);
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)83;
      byteArray2[6] = (byte)0;
      base64_0.readResults(byteArray2, 1161, (byte)0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false, false);
      base64_0.encode(byteArray3, 0, 0);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-83);
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      //  // Unstable assertion: assertEquals("AACt", string0);
      
      boolean boolean0 = Base64.isBase64("AACt");
      //  // Unstable assertion: assertTrue(boolean0);
      
      Base64 base64_0 = new Base64(1279);
      Base64.encodeBase64(byteArray0, true, false);
      base64_0.encodeToString(byteArray0);
      Base64.encodeBase64(byteArray0, true);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-83);
      byteArray1[2] = (byte)0;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.max(bigInteger1);
      Base64.encodeInteger(bigInteger0);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)22;
      String string1 = base64_0.encodeToString(byteArray1);
      //  // Unstable assertion: assertEquals("AK0AAAAAFg==\u06E2", string1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-37);
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte) (-94);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64((-238), byteArray0, true);
      Base64.encodeBase64String(byteArray1);
      Base64.decodeBase64(byteArray0);
      base64_0.encodeToString(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      int int0 = (-3023);
      base64_0.readResults(byteArray2, (-3023), 105);
      base64_0.encodeToString(byteArray2);
      base64_0.decode((byte[]) null);
      Base64.decodeBase64("");
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.longValue();
      bigInteger0.signum();
      byte[] byteArray3 = new byte[7];
      byteArray3[0] = (byte) (-37);
      byteArray3[1] = (byte) (-94);
      byteArray3[2] = (byte) (-94);
      byteArray3[3] = (byte) (-94);
      byteArray3[4] = (byte) (-37);
      byteArray3[5] = (byte) (-94);
      byteArray3[6] = (byte) (-37);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray3, true, false, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-33);
      Base64 base64_0 = new Base64((-964), byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      assertArrayEquals(new byte[] {(byte)51, (byte)119, (byte)61, (byte)61, (byte)13, (byte)10}, byteArray1);
      assertEquals(6, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)66;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)73, (byte)103, (byte)67, (byte)112, (byte)65, (byte)72, (byte)112, (byte)67}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-120);
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte) (-1);
      byte byte1 = (byte)110;
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-76);
      byteArray0[6] = (byte)107;
      byteArray0[7] = (byte)99;
      byteArray0[8] = (byte)0;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-1), byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD\uFFFD\uFFFDn\u0000\uFFFDkc\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)52;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byte byte1 = (byte)0;
      byteArray0[6] = (byte)0;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-640), byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u00004~\u0012\uFFFD\u0000\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64((byte[]) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = null;
      try {
        bigInteger1 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-106);
      byteArray0[5] = (byte)38;
      byteArray0[6] = (byte)112;
      byteArray0[7] = (byte)90;
      byteArray0[8] = (byte) (-15);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFDe\uFFFD\uFFFD\uFFFD&pZ\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-45);
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte)105;
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-84);
      byteArray1[1] = (byte)42;
      byteArray1[2] = (byte)92;
      byteArray1[3] = (byte) (-1);
      base64_0.decode(byteArray1, 0, (int) (byte) (-84));
      String string0 = base64_0.encodeToString(byteArray1);
      assertEquals("rCpc/wAAAAAA\r\n", string0);
      
      byteArray1[4] = (byte)1;
      byteArray1[5] = (byte)36;
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte)0;
      byteArray1[8] = (byte)0;
      String string1 = Base64.encodeBase64URLSafeString(byteArray1);
      assertEquals("rCpc_wEkAAAA", string1);
      
      Base64.encodeBase64(byteArray1, false, true);
      boolean boolean0 = base64_0.hasData();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64Chunked((byte[]) null);
      base64_0.decode((byte[]) null);
      String string0 = "yV8DDRhS";
      base64_0.decode("yV8DDRhS");
      Base64.encodeBase64((byte[]) null, true);
      base64_0.decode((Object) "");
      Base64.encodeBase64String((byte[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-116);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, true, (int) (byte) (-122));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of -122
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)69, (byte)109, (byte)73, (byte)110, (byte)97, (byte)103, (byte)65, (byte)61}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte1 = (byte) (-114);
      byteArray0[2] = (byte) (-114);
      byte byte2 = (byte)0;
      byteArray0[3] = (byte)0;
      byte byte3 = (byte)0;
      byteArray0[4] = (byte)0;
      byte byte4 = (byte)34;
      byteArray0[5] = (byte)34;
      byteArray0[6] = (byte) (-81);
      byte byte5 = (byte)5;
      byteArray0[7] = (byte)5;
      Base64 base64_0 = new Base64(0, byteArray0, true);
      Base64.decodeInteger(byteArray0);
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }
}
