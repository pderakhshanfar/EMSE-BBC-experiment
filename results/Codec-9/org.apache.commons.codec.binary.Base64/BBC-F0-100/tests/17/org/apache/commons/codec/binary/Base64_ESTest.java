/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 01:06:14 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      int int0 = 3455;
      bigInteger0.longValueExact();
      BigInteger bigInteger1 = bigInteger0.pow(3455);
      bigInteger0.flipBit(3455);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      bigInteger0.longValue();
      Base64 base64_0 = new Base64(3455, byteArray0, false);
      Base64.decodeBase64(byteArray1);
      base64_0.encode(byteArray1, 585, 3455);
      // Undeclared exception!
      Base64.decodeBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.longValueExact();
      BigInteger bigInteger1 = bigInteger0.pow(3455);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      bigInteger0.longValue();
      Base64 base64_0 = new Base64(3455, byteArray0, false);
      Base64.decodeBase64(byteArray1);
      base64_0.encode(byteArray1, 585, 3455);
      // Undeclared exception!
      Base64.decodeInteger(byteArray1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(1179);
      Base64.encodeBase64(byteArray0, true, false, 1179);
      int int0 = 165;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (-3016), 165);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3016
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      int int0 = 3453;
      bigInteger0.longValueExact();
      BigInteger bigInteger1 = bigInteger0.pow(3453);
      bigInteger1.min(bigInteger0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      bigInteger0.longValue();
      bigInteger1.setBit(120);
      Base64 base64_0 = new Base64(3453);
      Base64.encodeBase64(byteArray1, false);
      // Undeclared exception!
      base64_0.encode(byteArray1, int0, int0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Base64.isBase64((byte)123);
      Base64.encodeBase64((byte[]) null, false, false, (-644));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.pow(1892);
      bigInteger1.mod(bigInteger0);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger1);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger1);
      Base64 base64_0 = new Base64(1892);
      bigInteger1.pow(0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true, 1892);
      base64_0.decode(byteArray2, 158, 158);
      base64_0.encode(byteArray1, 2155, (-2542));
      Object object0 = new Object();
      base64_0.readResults(byteArray0, 1, 1);
      Random.setNextRandom(64);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.pow(3421);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true, 3421);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      mockRandom0.ints();
      BigInteger.probablePrime(149, mockRandom0);
      bigInteger1.clearBit(0);
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray2);
      String string0 = base64_0.encodeToString(byteArray3);
      base64_0.avail();
      base64_0.decode((Object) string0);
      // Undeclared exception!
      Base64.encodeBase64URLSafeString(byteArray3);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      int int0 = 3421;
      BigInteger bigInteger1 = bigInteger0.pow(3421);
      Base64.toIntegerBytes(bigInteger1);
      BigInteger bigInteger2 = bigInteger1.pow(73);
      Base64.encodeInteger(bigInteger1);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger2);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.pow(1892);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger1);
      Base64 base64_0 = new Base64(1892);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 1892);
      base64_0.decode(byteArray1, 165, 165);
      Base64.encodeBase64String(byteArray1);
      Base64.decodeInteger(byteArray0);
      base64_0.encode(byteArray0, 76, (-2542));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.pow(3421);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(3421);
      Base64.decodeBase64(byteArray0);
      bigInteger1.shiftRight(76);
      bigInteger1.shiftRight(3421);
      base64_0.decode(byteArray1, 151, 151);
      base64_0.encode(byteArray0, 76, 1797);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, true, true, 151);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (3462) than the specified maxium size of 151
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.pow(1892);
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger1);
      Base64 base64_0 = new Base64(2434);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 1892);
      base64_0.decode(byteArray0, 158, 158);
      base64_0.encode(byteArray1, (-2542), 158);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.pow(1892);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger1);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger1);
      Base64 base64_0 = new Base64(1892);
      bigInteger1.pow(0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true, 1892);
      base64_0.decode(byteArray2, 158, 158);
      base64_0.encode(byteArray1, 2155, (-2542));
      Object object0 = new Object();
      base64_0.readResults(byteArray0, 1, 1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.pow(3421);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64((-328));
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true, 3421);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      mockRandom0.ints();
      BigInteger.probablePrime(149, mockRandom0);
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray2);
      String string0 = base64_0.encodeToString(byteArray3);
      base64_0.avail();
      base64_0.decode((Object) string0);
      Base64.decodeInteger(byteArray2);
      byte[] byteArray4 = new byte[8];
      byteArray4[0] = (byte)82;
      byteArray4[1] = (byte)108;
      byteArray4[2] = (byte)106;
      base64_0.decode(byteArray1, (-2895), 76);
      // Undeclared exception!
      base64_0.encode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.pow(3421);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64((-328));
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true, 3421);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints();
      BigInteger.probablePrime(149, mockRandom0);
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray2);
      bigInteger1.doubleValue();
      String string0 = base64_0.encodeToString(byteArray3);
      base64_0.avail();
      base64_0.decode((Object) string0);
      base64_0.decode(byteArray3);
      Base64.toIntegerBytes(bigInteger0);
      // Undeclared exception!
      base64_0.decode(byteArray3);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.pow(3421);
      bigInteger0.divide(bigInteger1);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(3421);
      Base64.decodeBase64(byteArray0);
      bigInteger1.shiftRight(76);
      bigInteger1.shiftRight(3421);
      base64_0.decode(byteArray1, 151, 151);
      base64_0.readResults(byteArray0, 151, 1890);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte) (-30);
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)81;
      byteArray2[3] = (byte) (-111);
      byteArray2[4] = (byte)48;
      Base64.isArrayByteBase64(byteArray2);
      base64_0.hasData();
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.pow(3421);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64((-328));
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true, 3421);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      Base64.decodeBase64("u'W$Dvu1");
      mockRandom0.nextLong();
      mockRandom0.ints();
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray2);
      base64_0.encodeToString(byteArray3);
      // Undeclared exception!
      Base64.encodeBase64URLSafe(byteArray2);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.pow(3421);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(3421);
      Base64.decodeBase64(byteArray0);
      bigInteger1.shiftRight((-1));
      bigInteger0.shiftRight(64);
      base64_0.decode(byteArray0, 3, 119);
      base64_0.encode(byteArray1, 1797, 3);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.pow(3425);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger1);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(3425);
      Base64.decodeBase64(byteArray0);
      bigInteger1.shiftRight(76);
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.pow(3421);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(3421);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true, 3421);
      base64_0.decode(byteArray2, 158, 158);
      base64_0.encode(byteArray1, 2155, (-2542));
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.pow(3421);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64((-328));
      boolean boolean0 = true;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true, 3421);
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray2);
      base64_0.encodeToString(byteArray3);
      Base64.toIntegerBytes(bigInteger1);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.pow(3421);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(3421);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true, 3421);
      base64_0.decode(byteArray2, 119, 119);
      base64_0.encode(byteArray1, 2191, (-2542));
      try { 
        base64_0.encode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.pow(3421);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64((-328));
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true, 3421);
      base64_0.decode(byteArray2, 119, 119);
      base64_0.encode(byteArray2, (-2147483646), (-328));
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      int int0 = 33;
      Base64 base64_0 = new Base64(33);
      Base64.isBase64("={?k{0_8 ");
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 1892, 33);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1892
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.pow(3421);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64((-328));
      base64_0.encode(byteArray1, 503, 503);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true, 3421);
      Base64.encodeBase64URLSafe(byteArray2);
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray2);
      // Undeclared exception!
      base64_0.encodeToString(byteArray3);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64(33);
      Base64 base64_1 = new Base64(true);
      Base64.decodeBase64((String) null);
      base64_1.encodeToString(byteArray0);
      Base64.encodeBase64(byteArray0, true, true, 6);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.discardWhitespace(byteArray1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0, 0, 3434);
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.pow(3421);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertEquals(1895, byteArray1.length);
      
      Base64 base64_0 = new Base64((-328));
      bigInteger1.gcd(bigInteger0);
      base64_0.decode(byteArray0, 61, 17);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      int int0 = base64_0.avail();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.pow(3421);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger1);
      BigInteger bigInteger2 = BigInteger.ZERO;
      BigInteger bigInteger3 = BigInteger.ZERO;
      bigInteger0.multiply(bigInteger3);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(1421, byteArray0.length);
      assertEquals(1405, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.pow(3434);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0, 985, 593);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)109;
      Base64 base64_0 = new Base64(true);
      base64_0.avail();
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)109;
      byteArray1[1] = (byte)109;
      byteArray1[2] = (byte)109;
      byteArray1[3] = (byte)109;
      byteArray1[4] = (byte)109;
      byteArray1[5] = (byte)75;
      byteArray1[6] = (byte)109;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)109;
      byteArray2[1] = (byte)109;
      byteArray2[2] = (byte)109;
      byteArray2[3] = (byte)75;
      byteArray2[4] = (byte)109;
      byteArray2[5] = (byte)109;
      byteArray2[6] = (byte)109;
      Base64.encodeBase64URLSafe(byteArray2);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray2, 0, (int) (byte)109);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      Base64 base64_1 = new Base64(61);
      Base64 base64_2 = new Base64(3443);
      base64_1.decode((Object) "");
      base64_0.decode("");
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        base64_1.encode((byte[]) null, 61, 61);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)1;
      Base64.isBase64(byteArray0);
      Base64.discardWhitespace(byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)28;
      Base64 base64_0 = new Base64((-3013), byteArray1);
      Base64.encodeBase64String(byteArray0);
      Base64.decodeInteger(byteArray1);
      base64_0.avail();
      Base64.decodeInteger(byteArray1);
      Base64.encodeBase64URLSafe((byte[]) null);
      base64_0.readResults((byte[]) null, (byte) (-6), 27);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte) (-6), 8188);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -6
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)11;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)67, (byte)119, (byte)61, (byte)61}, byteArray1);
      //  // Unstable assertion: assertEquals(4, byteArray1.length);
      
      Base64 base64_0 = new Base64(9);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)11;
      byteArray2[1] = (byte)11;
      byteArray2[2] = (byte)11;
      byteArray2[3] = (byte)11;
      byteArray2[4] = (byte)11;
      byteArray2[5] = (byte)11;
      String string0 = base64_0.encodeToString(byteArray2);
      //  // Unstable assertion: assertEquals("CwsLCwsL>\u001C", string0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      //  // Unstable assertion: assertEquals(0, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64(byteArray0, false);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)59;
      byteArray1[1] = (byte)76;
      Base64.isBase64(byteArray1);
      Base64.encodeBase64(byteArray1);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = new BigInteger(byteArray1);
      BigInteger bigInteger2 = bigInteger1.pow(4205);
      bigInteger2.or(bigInteger0);
      bigInteger1.intValue();
      byte[] byteArray2 = Base64.encodeInteger(bigInteger2);
      // Undeclared exception!
      Base64.encodeBase64String(byteArray2);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)11;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64(byteArray0, true);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, true);
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64.isBase64(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray1);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64 base64_0 = new Base64(false);
      base64_0.decode((byte[]) null);
      base64_0.encode(byteArray3);
      byte[] byteArray4 = Base64.encodeBase64Chunked((byte[]) null);
      assertNull(byteArray4);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)28;
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64((-112), byteArray1);
      Base64.encodeBase64String(byteArray1);
      Base64.decodeInteger(byteArray1);
      base64_0.avail();
      Base64.decodeInteger(byteArray1);
      Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)10;
      byteArray2[1] = (byte)10;
      byteArray2[2] = (byte)45;
      byteArray2[3] = (byte)9;
      byteArray2[4] = (byte)10;
      byteArray2[5] = (byte)10;
      byteArray2[6] = (byte)9;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray2, 1, (int) (byte)9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)109;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      Base64.decodeBase64(byteArray1);
      byte[] byteArray2 = new byte[0];
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, true);
      Base64.encodeBase64URLSafeString(byteArray3);
      Base64.isBase64(byteArray3);
      byte[] byteArray4 = Base64.encodeBase64(byteArray1);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.pow(665);
      byte[] byteArray5 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray6 = new byte[6];
      byteArray6[0] = (byte)109;
      byteArray6[1] = (byte)109;
      byteArray6[2] = (byte)12;
      byteArray6[3] = (byte)109;
      byteArray6[4] = (byte)12;
      byteArray6[5] = (byte)12;
      Base64.encodeBase64Chunked(byteArray4);
      Base64.decodeInteger(byteArray5);
      Base64.encodeInteger(bigInteger0);
      base64_0.decode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("+~fGF+lO");
      Base64.isBase64((byte)118);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64((byte)125);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64Chunked(byteArray1);
      Base64.isBase64(byteArray0);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)109;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      base64_0.decode(byteArray0, 0, (int) (byte)1);
      Base64.encodeBase64(byteArray1, false, true, 76);
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)109;
      byteArray2[2] = (byte)1;
      byteArray2[3] = (byte)1;
      byteArray2[4] = (byte)1;
      byteArray2[5] = (byte)1;
      byteArray2[6] = (byte)1;
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      base64_0.encodeToString(byteArray1);
      Base64.encodeBase64Chunked(byteArray3);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Base64.isBase64("Input array too big, the output array would be bigger (");
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-97);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, true);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.isBase64(byteArray1);
      Base64.encodeBase64(byteArray1);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.pow(1);
      bigInteger1.modPow(bigInteger0, bigInteger0);
      bigInteger0.intValue();
      Base64.encodeInteger(bigInteger1);
      Base64.encodeBase64String(byteArray2);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray0);
      Base64.decodeInteger(byteArray0);
      Base64.discardWhitespace(byteArray3);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(false);
      base64_0.decode(byteArray0, (int) (byte) (-42), (int) (byte) (-42));
      byte[] byteArray1 = new byte[0];
      Base64.encodeBase64(byteArray1, true, true, 5);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte) (-42);
      byteArray2[1] = (byte) (-22);
      byteArray2[2] = (byte) (-22);
      byteArray2[3] = (byte)1;
      byteArray2[4] = (byte)13;
      Base64.encodeBase64(byteArray2, false);
      Object object0 = new Object();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.doubleValue();
      BigInteger bigInteger1 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger1);
      Object object1 = base64_0.decode((Object) "");
      Object object2 = base64_0.encode(object1);
      base64_0.decode(object2);
      try { 
        base64_0.decode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Base64.isBase64("Input array too big, the output array would be bigger (");
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)1;
      byteArray0[2] = (byte)1;
      base64_0.decode(byteArray0, (int) (byte)1, (int) (byte)1);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, (int) (byte)1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (30) than the specified maxium size of 1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)11;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64(byteArray0, true);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, true);
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64.isBase64(byteArray1);
      Base64.encodeBase64(byteArray1);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.pow(665);
      bigInteger0.intValue();
      byte[] byteArray3 = Base64.encodeInteger(bigInteger1);
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray3);
      Base64.decodeInteger(byteArray4);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Base64.isBase64("Input array too big, the output array would be bigger (");
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)1;
      base64_0.decode(byteArray0, (int) (byte)1, (int) (byte)1);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, (int) (byte)1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of 1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)11;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false);
      Base64 base64_0 = new Base64();
      base64_0.encodeToString(byteArray2);
      Base64.encodeBase64((byte[]) null, false);
      byte[] byteArray3 = new byte[5];
      byteArray3[0] = (byte)11;
      Base64.encodeBase64(byteArray3, false, false, (int) (byte)11);
      base64_0.avail();
      Base64.isArrayByteBase64(byteArray0);
      byte[] byteArray4 = Base64.encodeBase64(byteArray0);
      Base64.isBase64(byteArray1);
      byte[] byteArray5 = Base64.encodeBase64(byteArray3);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.pow((byte)11);
      Base64.encodeBase64String(byteArray1);
      bigInteger1.intValue();
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64String(byteArray5);
      byte[] byteArray6 = Base64.discardWhitespace(byteArray4);
      base64_0.encode(byteArray6, (int) (byte)11, 46);
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Base64 base64_0 = new Base64(101);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)26;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)114;
      byteArray1[1] = (byte)1;
      byteArray1[2] = (byte)1;
      byteArray1[3] = (byte)1;
      byteArray1[4] = (byte)29;
      byteArray1[5] = (byte)114;
      byteArray1[6] = (byte)103;
      Base64.encodeBase64URLSafeString(byteArray1);
      byteArray0[5] = (byte)39;
      Base64.encodeBase64URLSafe(byteArray0);
      byteArray0[6] = (byte)94;
      base64_0.readResults(byteArray0, 49, (byte)29);
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 0, 105);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-35);
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte) (-35);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      byte byte1 = (byte) (-26);
      Base64 base64_0 = new Base64((byte) (-35), byteArray2);
      base64_0.decode("UTF-8");
      byte byte2 = (byte) (-1);
      byte byte3 = (byte)0;
      Base64 base64_1 = new Base64((byte)0, byteArray1);
      base64_1.encodeToString(byteArray2);
      byte[] byteArray3 = new byte[4];
      byteArray3[0] = (byte) (-26);
      byteArray3[1] = (byte) (-1);
      byteArray3[2] = (byte) (-26);
      byteArray3[3] = (byte)0;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)53;
      Base64.encodeBase64(byteArray0, true, true);
      base64_0.decode((Object) "'s<np{R;=Wz5\"O");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte) (-35);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64(637, byteArray0, false);
      Base64.isBase64(byteArray1);
      Base64.encodeBase64(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.pow(76);
      Base64.encodeBase64String(byteArray0);
      bigInteger0.intValue();
      Base64.encodeInteger(bigInteger1);
      Base64.encodeBase64String(byteArray0);
      Base64.discardWhitespace(byteArray1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64((byte) (-87), byteArray0, true);
      base64_0.readResults(byteArray2, 713, 713);
      byte[] byteArray3 = Base64.decodeBase64(byteArray0);
      byte[] byteArray4 = base64_0.decode("");
      base64_0.encodeToString(byteArray4);
      Base64 base64_1 = new Base64((byte) (-1));
      base64_1.encode(byteArray4);
      base64_1.readResults(byteArray2, 122, 6);
      Base64.isArrayByteBase64(byteArray1);
      base64_0.hasData();
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64String(byteArray3);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(31);
      base64_0.encode(byteArray0, (int) (byte)1, (-895));
      byte[] byteArray1 = new byte[4];
      Base64.encodeBase64(byteArray1);
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.encodeBase64Chunked((byte[]) null);
      base64_0.encodeToString((byte[]) null);
      Base64.encodeBase64Chunked(byteArray1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[9];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      byteArray0[0] = (byte)13;
      base64_0.readResults(byteArray1, 122, 122);
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      byteArray0[1] = (byte) (-87);
      byte[] byteArray3 = base64_0.decode("UTF-8");
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      base64_0.encodeToString(byteArray2);
      base64_0.encode(byteArray3);
      base64_0.readResults(byteArray2, (byte) (-26), (byte) (-87));
      Base64.isArrayByteBase64(byteArray0);
      base64_0.hasData();
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(0);
      base64_0.encode(byteArray0);
      base64_0.decode(byteArray0, (int) (byte)0, (int) (byte)0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true, 255);
      Base64.encodeBase64URLSafe(byteArray2);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64 base64_0 = new Base64(14);
      base64_0.encodeToString(byteArray1);
      Object object0 = base64_0.decode((Object) "");
      Object object1 = base64_0.decode((Object) "");
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)51;
      byteArray2[1] = (byte)76;
      base64_0.encodeToString(byteArray2);
      base64_0.decode(byteArray2, (int) (byte)76, (-692));
      Base64.isBase64(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.isBase64(byteArray1);
      Base64.discardWhitespace(byteArray1);
      base64_0.encode((byte[]) null);
      base64_0.decode(object0);
      base64_0.decode(object1);
      base64_0.decode(object1);
      Base64.encodeBase64((byte[]) null, true, true);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray2, (int) (byte) (-1), (int) (byte)51);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-55);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64(595, byteArray0);
      Base64.encodeBase64String(byteArray0);
      base64_0.decode(byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.nextProbablePrime();
      bigInteger0.longValue();
      Object object0 = new Object();
      bigInteger0.equals(object0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte) (-55);
      byteArray2[1] = (byte) (-55);
      byteArray2[2] = (byte) (-55);
      byteArray2[3] = (byte) (-55);
      byteArray2[4] = (byte) (-55);
      byteArray2[5] = (byte) (-55);
      byteArray2[6] = (byte) (-55);
      byteArray2[7] = (byte) (-55);
      byteArray2[8] = (byte) (-55);
      Base64.isBase64("NC.z8e<lRTH{*l=Za");
      base64_0.encode(byteArray2, 39, 4416);
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64.decodeBase64("yck");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Base64.encodeBase64String((byte[]) null);
      Base64 base64_0 = new Base64((-36), (byte[]) null);
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64 base64_0 = new Base64((-1), (byte[]) null);
      base64_0.encode((byte[]) null, (-1), (-1));
      base64_0.hasData();
      base64_0.encode((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[9];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.encodeInteger(bigInteger0);
      byteArray0[0] = (byte)13;
      Base64.decodeBase64(byteArray0);
      byteArray0[1] = (byte) (-87);
      base64_0.decode("UTF-8");
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte)22;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-8);
      base64_0.encodeToString(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)102;
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)25;
      base64_0.decode(": ");
      byteArray0[3] = (byte) (-25);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-25);
      base64_0.encode(byteArray0, 0, (int) (byte)25);
      byte[] byteArray1 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.encodeBase64String(byteArray1);
      Base64.discardWhitespace(byteArray1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)109;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      byte[] byteArray3 = new byte[0];
      byte[] byteArray4 = Base64.encodeBase64(byteArray2, true, false);
      byte[] byteArray5 = new byte[7];
      byteArray5[0] = (byte)109;
      byteArray5[1] = (byte)109;
      byteArray5[2] = (byte)109;
      byteArray5[3] = (byte)109;
      byteArray5[4] = (byte)109;
      byteArray5[5] = (byte)109;
      byteArray5[6] = (byte)12;
      Base64.encodeBase64URLSafeString(byteArray5);
      Base64.isBase64(byteArray4);
      Base64.encodeBase64(byteArray3);
      Base64.isArrayByteBase64(byteArray3);
      Base64 base64_1 = new Base64(4156);
      base64_1.hasData();
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64String(byteArray3);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(false);
      Object object0 = new Object();
      Base64.discardWhitespace(byteArray1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte)22;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)0;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)1, 2869);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte) (-25);
      base64_0.encode(byteArray0, (int) (byte)1, (-1249));
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.decodeBase64("");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)109;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      Base64.decodeBase64(byteArray1);
      byte[] byteArray2 = new byte[0];
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false, true);
      Base64.encodeBase64URLSafeString(byteArray3);
      Base64.isBase64(byteArray3);
      Base64.encodeBase64(byteArray1);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.pow(662);
      bigInteger0.intValue();
      byte[] byteArray4 = Base64.encodeInteger(bigInteger1);
      Base64.encodeBase64String(byteArray4);
      byte[] byteArray5 = new byte[6];
      byteArray5[0] = (byte)109;
      byteArray5[1] = (byte)109;
      byteArray5[2] = (byte)12;
      byteArray5[3] = (byte)109;
      byteArray5[4] = (byte)12;
      byteArray5[5] = (byte)12;
      Base64.discardWhitespace(byteArray5);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64 base64_0 = new Base64((-1), (byte[]) null);
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64(byteArray1, true);
      Base64 base64_0 = new Base64(1206);
      base64_0.encodeToString(byteArray1);
      boolean boolean0 = false;
      Base64.encodeBase64((byte[]) null, false);
      boolean boolean1 = true;
      Base64.encodeBase64((byte[]) null, false, true, (int) (byte)0);
      base64_0.avail();
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte) (-25);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-25);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 0, (int) (byte)25);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(31);
      byte byte0 = (byte) (-25);
      base64_0.encode(byteArray0, (int) (byte)1, (-895));
      byte[] byteArray1 = new byte[4];
      Base64.encodeBase64(byteArray1);
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.encodeBase64Chunked((byte[]) null);
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray1, (byte) (-13), (byte)1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[2];
      Base64.decodeBase64((String) null);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)102;
      byteArray1[1] = (byte)110;
      byteArray1[2] = (byte)22;
      byteArray1[3] = (byte)85;
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64.encodeInteger(bigInteger0);
      int int0 = 0;
      Base64 base64_0 = new Base64(0);
      base64_0.encode(byteArray0);
      Base64.isBase64((byte)61);
      Base64.decodeBase64(byteArray0);
      boolean boolean0 = true;
      boolean boolean1 = false;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.and(bigInteger0);
      int int1 = Base64.PEM_CHUNK_SIZE;
      // Undeclared exception!
      try { 
        bigInteger0.mod(bigInteger1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)109;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      byte[] byteArray3 = new byte[0];
      byte[] byteArray4 = Base64.encodeBase64(byteArray2, true, false);
      byte[] byteArray5 = new byte[7];
      byteArray5[0] = (byte)109;
      byteArray5[1] = (byte)109;
      byteArray5[2] = (byte)109;
      byteArray5[3] = (byte)109;
      byteArray5[4] = (byte)109;
      byteArray5[5] = (byte)109;
      byteArray5[6] = (byte)12;
      Base64.encodeBase64URLSafeString(byteArray5);
      Base64.isBase64(byteArray4);
      Base64.encodeBase64(byteArray3);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.intValue();
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64String(byteArray1);
      Base64 base64_1 = new Base64((-806), byteArray3, true);
      // Undeclared exception!
      try { 
        base64_1.encodeToString(byteArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)69;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.isBase64(byteArray1);
      Base64.encodeBase64(byteArray1);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.toString(55);
      bigInteger0.intValue();
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64String(byteArray1);
      bigInteger0.negate();
      Base64 base64_0 = new Base64((-2126834765));
      byte[] byteArray2 = new byte[0];
      Base64.encodeBase64URLSafe(byteArray1);
      base64_0.encodeToString(byteArray2);
      Base64.isBase64((byte)76);
      Base64.encodeInteger(bigInteger0);
      Base64.isBase64("");
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)85;
      Base64.encodeBase64(byteArray0);
      Base64.encodeBase64Chunked((byte[]) null);
      byte[] byteArray1 = new byte[1];
      Base64.encodeBase64Chunked((byte[]) null);
      byteArray1[0] = (byte)90;
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.intValue();
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64String(byteArray2);
      base64_0.encodeToString(byteArray1);
      Base64.isBase64((byte)90);
      BigInteger bigInteger1 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger1);
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-35);
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte)35;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64(637, byteArray0, false);
      base64_0.hasData();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = null;
      int int0 = (-3412);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, (int) (byte) (-35), 21);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -35
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-25);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)1;
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte)25;
      base64_0.encodeToString(byteArray1);
      Base64.isBase64((byte)25);
      Base64.isBase64("");
      try { 
        base64_0.encode((Object) "ARk=");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-59);
      Base64.encodeBase64(byteArray0, false, false, 3717);
      base64_0.decode("org.apache.commons.codec.DecoderException");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte)1;
      Base64.decodeBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Base64.isBase64("Input array too big, the output array would be bigger (");
      Base64 base64_0 = new Base64(true);
      base64_0.decode((Object) "Input array too big, the output array would be bigger (");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)105;
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)15;
      boolean boolean0 = false;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true);
      Base64.encodeBase64String(byteArray1);
      Base64.decodeInteger(byteArray1);
      BigInteger bigInteger0 = BigInteger.TEN;
      int int0 = (-1181);
      MockRandom mockRandom0 = new MockRandom((-1181));
      // Undeclared exception!
      try { 
        mockRandom0.longs((-1L), (long) (byte)23, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size must be non-negative
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)0;
      byte byte0 = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byte byte1 = (byte) (-18);
      byteArray0[4] = (byte) (-18);
      byteArray0[5] = (byte) (-64);
      byte byte2 = (byte)127;
      byteArray0[6] = (byte)127;
      byte byte3 = (byte) (-62);
      byteArray0[7] = (byte) (-62);
      byteArray0[8] = (byte) (-106);
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.setBit(123);
      bigInteger0.abs();
      Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte) (-18), byteArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [SAAAAO7Af8KW]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64 base64_0 = new Base64(0, byteArray0, true);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      base64_0.avail();
      byte[] byteArray3 = Base64.encodeBase64(byteArray1);
      Base64.encodeBase64(byteArray3, true);
      byte[] byteArray4 = Base64.encodeBase64(byteArray2, true);
      base64_0.avail();
      Base64.encodeBase64URLSafe(byteArray2);
      Base64.encodeBase64(byteArray1, true, true, 64);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray4);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Base64.isBase64("org.apache.commons.codec.EncoderException");
      byte[] byteArray0 = null;
      Base64.decodeBase64((byte[]) null);
      byte byte0 = (byte)71;
      Base64.isBase64((byte)71);
      Base64 base64_0 = new Base64();
      try { 
        base64_0.encode((Object) "org.apache.commons.codec.EncoderException");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte) (-13);
      byteArray0[5] = (byte) (-1);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0019v\u0000d\uFFFD\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte1 = (byte)0;
      byteArray0[2] = (byte)0;
      byte byte2 = (byte) (-81);
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte)19;
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-81);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-81);
      Base64.encodeBase64URLSafe(byteArray1);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      Base64.decodeInteger(byteArray2);
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-25);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-13);
      base64_0.encode(byteArray0, 0, (int) (byte)0);
      byte[] byteArray1 = new byte[0];
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 0, 547);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64.encodeInteger(bigInteger0);
      int int0 = 0;
      Base64 base64_0 = new Base64(0);
      base64_0.encode(byteArray0);
      Base64.isBase64((byte)0);
      Base64.decodeBase64(byteArray0);
      boolean boolean0 = true;
      boolean boolean1 = false;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.and(bigInteger0);
      bigInteger1.signum();
      // Undeclared exception!
      try { 
        bigInteger0.mod(bigInteger1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Base64 base64_0 = new Base64(402);
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)122;
      Base64.encodeBase64URLSafeString(byteArray1);
      byteArray0[2] = (byte)0;
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray2);
      byteArray0[3] = (byte)26;
      Base64.encodeBase64URLSafeString(byteArray2);
      byte[] byteArray3 = base64_0.encode(byteArray0);
      base64_0.decode(byteArray1, (-1748), (int) (byte)26);
      base64_0.encodeToString(byteArray3);
      Base64.encodeBase64(byteArray1, false, false);
      Base64.encodeBase64(byteArray2, false, false, 74);
      base64_0.encodeToString(byteArray3);
      Base64.encodeBase64Chunked(byteArray1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      Base64.discardWhitespace(byteArray0);
      boolean boolean0 = true;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64((byte)0);
      base64_0.encodeToString(byteArray0);
      Base64.encodeBase64((byte[]) null, true);
      Base64.encodeBase64(byteArray1, true, true, 64);
      base64_0.avail();
      Base64.isArrayByteBase64(byteArray0);
      Base64.encodeBase64(byteArray1);
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      base64_0.decode((String) null);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)1;
      base64_0.encodeToString(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      byteArray0[4] = (byte)112;
      byte[] byteArray3 = new byte[1];
      byteArray3[0] = (byte)112;
      base64_0.decode(byteArray3);
      byteArray0[5] = (byte) (-1);
      base64_0.encode(byteArray2);
      byteArray0[6] = (byte)0;
      base64_0.decode(byteArray0, (int) (byte)112, (int) (byte)0);
      Base64.encodeBase64Chunked(byteArray0);
      base64_0.isUrlSafe();
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64(byteArray0, true);
      byte[] byteArray1 = Base64.decodeBase64("");
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      byte[] byteArray3 = new byte[1];
      byteArray3[0] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray3);
      base64_0.readResults(byteArray0, 46, 46);
      Base64.isBase64("");
      Base64.encodeBase64URLSafe(byteArray2);
      byte[] byteArray4 = base64_0.encode(byteArray0);
      Base64.encodeBase64(byteArray0, true, false);
      byte[] byteArray5 = Base64.encodeBase64(byteArray0, true);
      Base64.encodeBase64String(byteArray4);
      Base64.isBase64(byteArray5);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("+~fGF+lO");
      Base64 base64_0 = new Base64();
      base64_0.encodeToString(byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-116);
      Base64.encodeBase64(byteArray1, false, false);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.isBase64(byteArray0);
      Base64.encodeBase64(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.intValue();
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64String(byteArray0);
      base64_0.encodeToString(byteArray2);
      Base64.isBase64((byte) (-116));
      Base64.encodeInteger(bigInteger0);
      Base64.isBase64("?)}LEwLW?J[Z");
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      base64_0.decode((Object) "Input array too big, the output array would be bigger (");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-70);
      byte byte0 = (byte)1;
      byteArray0[1] = (byte)1;
      byte byte1 = (byte)0;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      Base64 base64_0 = new Base64((-16), byteArray0, true);
      base64_0.hasData();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = null;
      base64_0.decode(byteArray2, 0, (-3412));
      // Undeclared exception!
      try { 
        bigInteger0.xor((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Base64.encodeBase64((byte[]) null);
      Base64.decodeBase64("");
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte)0;
      Base64.encodeBase64(byteArray0, true, false, 76);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)77;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger0.remainder(bigInteger1);
      base64_0.avail();
      base64_0.avail();
      bigInteger0.toString();
      base64_0.readResults(byteArray1, 1, (byte)77);
      Base64.decodeBase64("-7696581392051");
      base64_0.avail();
      Base64.isArrayByteBase64(byteArray0);
      Base64.decodeBase64("-7696581392051");
      Base64.encodeBase64Chunked(byteArray0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)84;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-1719), byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u000BQT]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.decodeBase64((byte[]) null);
      Base64.encodeBase64((byte[]) null);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = new byte[3];
      base64_0.encode((byte[]) null);
      byte byte0 = (byte)0;
      base64_0.encode(byteArray1);
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-15);
      byte byte1 = (byte)124;
      byteArray1[2] = (byte)124;
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      int int0 = 989;
      base64_0.encode((byte[]) null, 0, 989);
      base64_0.readResults(byteArray2, 989, 28);
      try { 
        base64_0.encode((Object) "Md*;~r{,|3k");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte)111;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      Base64.encodeBase64Chunked(byteArray0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      Base64 base64_0 = new Base64(1738, byteArray0);
      base64_0.encodeToString(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.encodeInteger(bigInteger0);
      base64_0.decode(byteArray1);
      Base64.encodeBase64(byteArray0, true, true);
      Base64.encodeBase64Chunked(byteArray0);
      base64_0.encode(byteArray0);
      Base64.decodeBase64("'N'Yuj5u1gmV&t74gPe");
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)109;
      byteArray0[0] = (byte)109;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      Base64.decodeBase64(byteArray1);
      byte[] byteArray2 = new byte[0];
      Base64.encodeBase64(byteArray1, true, false, 64);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64(byteArray2, true);
      Base64.encodeBase64(byteArray1, true, true, (int) (byte)109);
      Base64.isBase64("");
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      base64_0.isUrlSafe();
      base64_0.avail();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte)74;
      Base64.encodeBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Base64.isBase64((byte)0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      Base64 base64_0 = new Base64(716, byteArray0);
      byte[] byteArray1 = new byte[7];
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)104;
      Base64.encodeBase64URLSafe(byteArray2);
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)1;
      byteArray1[4] = (byte)1;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)0;
      base64_0.encode(byteArray1, (int) (byte)0, (int) (byte)0);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, true, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of 1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)102;
      byteArray1[1] = (byte)110;
      byteArray1[2] = (byte)22;
      byteArray1[3] = (byte)85;
      Base64.encodeBase64(byteArray1);
      Base64.encodeBase64Chunked((byte[]) null);
      byte[] byteArray2 = new byte[1];
      Base64.encodeBase64Chunked((byte[]) null);
      byteArray2[0] = (byte)90;
      base64_0.readResults(byteArray2, 0, 0);
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)0;
      base64_0.encodeToString(byteArray0);
      base64_0.encode(byteArray2);
      base64_0.readResults(byteArray0, 0, 0);
      base64_0.encode(byteArray0);
      Object object0 = null;
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }
}
