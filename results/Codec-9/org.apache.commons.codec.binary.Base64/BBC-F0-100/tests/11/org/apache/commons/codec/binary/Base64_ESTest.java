/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 01:04:37 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)125);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray0 = base64_0.decode("O c0Xa{mf");
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)57, (byte) (-51), (byte)23, (byte)106, (byte)103}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      assertTrue(base64_0.isUrlSafe());
      
      byte[] byteArray0 = base64_0.decode("Kf42/;2k&%:,wC*P");
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)41, (byte) (-2), (byte)54, (byte) (-1), (byte)105, (byte)48, (byte)8}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertTrue(base64_0.isUrlSafe());
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)41, (byte) (-2), (byte)54, (byte) (-1), (byte)105, (byte)48, (byte)8}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(12, byteArray1.length);
      assertTrue(base64_0.isUrlSafe());
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      boolean boolean0 = Base64.isBase64("AA");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      
      String string0 = base64_0.encodeToString((byte[]) null);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNull(string0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64(": ");
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      Base64 base64_0 = new Base64();
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals("", string0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals("AAA", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64(": ");
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray1);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals("", string0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = Base64.encodeBase64URLSafe((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64(": ");
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = Base64.encodeBase64String((byte[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = Base64.encodeBase64Chunked((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null, true, true);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null, false);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61, (byte)0, (byte)0}, byteArray1);
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArray1.length);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64((byte)5);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray1 = base64_0.decode(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(base64_0.isUrlSafe());
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(base64_0.isUrlSafe());
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertSame(byteArray2, byteArray1);
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray3.length);
      assertFalse(base64_0.isUrlSafe());
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertSame(byteArray1, byteArray2);
      assertSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertSame(byteArray2, byteArray1);
      assertSame(byteArray3, byteArray2);
      assertSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte)108;
      byteArray0[6] = (byte)108;
      byteArray0[7] = (byte)108;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)108, (byte)0, (byte)0, (byte)108, (byte)108}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals((short) (-27047), bigInteger0.shortValue());
      assertEquals((byte)89, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray0);
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)82;
      byteArray0[3] = (byte)77;
      byteArray0[6] = (byte)85;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte)0, (byte)82, (byte)0, (byte)77, (byte)0, (byte)0, (byte)85}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals((byte) (-59), bigInteger0.byteValue());
      assertEquals((short)17605, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)108;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)108, (byte)108, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-106)}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64(": ");
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      byte[] byteArray1 = base64_0.decode(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray0);
      assertArrayEquals(new byte[] {(byte)10}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(base64_0.isUrlSafe());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray0 = base64_0.decode((String) null);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNull(byteArray0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray0 = base64_0.decode("");
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      Base64 base64_0 = new Base64(true);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      assertTrue(base64_0.isUrlSafe());
      
      base64_0.encode(byteArray0, (-2416), (-2416));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(12, byteArray0.length);
      assertTrue(base64_0.isUrlSafe());
      
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, (-2416), 16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Base64 base64_0 = new Base64(48, (byte[]) null);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, 48, 48);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 385, 43);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-740), byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [AQ==]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64((byte)5);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray1 = base64_0.decode(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(base64_0.isUrlSafe());
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(base64_0.isUrlSafe());
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertSame(byteArray2, byteArray1);
      
      byte[] byteArray3 = base64_0.encode(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray3.length);
      assertFalse(base64_0.isUrlSafe());
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertSame(byteArray1, byteArray3);
      assertSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertSame(byteArray2, byteArray3);
      assertSame(byteArray2, byteArray1);
      assertSame(byteArray3, byteArray2);
      assertSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      boolean boolean0 = Base64.isBase64("uw==\u0000\u0000");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[4] = (byte)13;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)13, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)10}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)10}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64((byte)5);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray1 = base64_0.decode(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(base64_0.isUrlSafe());
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false, 87);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(base64_0.isUrlSafe());
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertSame(byteArray2, byteArray1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null, false, true, 64);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Base64 base64_0 = new Base64(0, (byte[]) null, true);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      assertTrue(base64_0.isUrlSafe());
      
      byte[] byteArray0 = base64_0.decode((byte[]) null);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNull(byteArray0);
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Base64 base64_0 = new Base64(1);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = base64_0.decode(byteArray0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(base64_0.isUrlSafe());
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)104);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)6);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte) (-127));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Input array too big, the output array would be bigger (");
      assertNotNull(byteArray0);
      assertEquals(32, byteArray0.length);
      
      Base64 base64_0 = new Base64();
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      
      base64_0.decode(byteArray0, (-92), 0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(32, byteArray0.length);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte) (-101);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 1, 1425);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      assertTrue(base64_0.isUrlSafe());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)126;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)1, (int) (byte)76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      Base64 base64_0 = new Base64();
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(16, byteArray0.length);
      assertEquals(24, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      base64_0.decode(byteArray1, 14, 14);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(16, byteArray0.length);
      assertEquals(24, byteArray1.length);
      assertFalse(base64_0.isUrlSafe());
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      
      base64_0.decode((byte[]) null, (-2573), (-2573));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64((byte)5);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray1 = base64_0.decode(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(base64_0.isUrlSafe());
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      base64_0.decode(byteArray0, (int) (byte)5, 66);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(base64_0.isUrlSafe());
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Base64 base64_0 = new Base64(1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte) (-1);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)1, 56);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64 base64_0 = new Base64((byte)0, byteArray0, false);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(base64_0.isUrlSafe());
      
      base64_0.encode(byteArray0, (int) (byte)0, (int) (byte)0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base64 base64_0 = new Base64(9, byteArray0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(base64_0.isUrlSafe());
      
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, 1908874353);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = BigInteger.probablePrime(2064, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertEquals(344, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      Base64 base64_0 = new Base64(23, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false);
      assertEquals(76, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Base64 base64_0 = new Base64(977, (byte[]) null, false);
      byte[] byteArray0 = base64_0.encode((byte[]) null);
      assertNull(byteArray0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      Object object0 = base64_0.decode((Object) "");
      Object object1 = base64_0.encode(object0);
      assertTrue(base64_0.isUrlSafe());
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      boolean boolean0 = Base64.isBase64("lineSeperator must not contain base64 characters: [");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)5;
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)32;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)32, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(5, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[5] = (byte)9;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)9, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, (int) (byte) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)123);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte) (-23);
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false, 64);
      boolean boolean0 = Base64.isBase64(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61, (byte)41, (byte)10}, byteArray1);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertEquals(6, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Base64 base64_0 = new Base64((byte)5);
      Object object0 = base64_0.decode((Object) "J");
      Object object1 = base64_0.decode(object0);
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-20);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte) (-74);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true, (int) (byte)6);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)67, (byte)50}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base64 base64_0 = new Base64(14, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertEquals(21, byteArray1.length);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertEquals(22, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0, (-2416), (-2416));
      base64_0.encode(byteArray0, (-2416), (-2416));
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = base64_0.decode("Kf42/;2k&%:,wC*P");
      assertEquals(7, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)41, (byte) (-2), (byte)54, (byte) (-1), (byte)105, (byte)48, (byte)8}, byteArray1);
      
      int int0 = base64_0.readResults(byteArray0, 8165, (-939));
      assertTrue(base64_0.isUrlSafe());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("#nh #t");
      Base64 base64_0 = new Base64();
      int int0 = base64_0.readResults(byteArray0, (-135), 2582);
      assertArrayEquals(new byte[] {(byte) (-98), (byte)27}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(0, int0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      base64_0.encode(byteArray0, (int) (byte)10, (int) (byte) (-115));
      boolean boolean0 = base64_0.hasData();
      assertTrue(boolean0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Base64 base64_0 = new Base64();
      boolean boolean0 = base64_0.hasData();
      assertFalse(boolean0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      boolean boolean0 = base64_0.isUrlSafe();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Base64 base64_0 = new Base64();
      boolean boolean0 = base64_0.isUrlSafe();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)82;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte) (-101), byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [R\u0000\u0000\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Base64 base64_0 = new Base64(977, (byte[]) null, false);
      int int0 = base64_0.avail();
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(14, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[0];
      base64_0.encode(byteArray0, (-2336), (-43));
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, 0, (-2336));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      boolean boolean0 = Base64.isBase64(byteArray1);
      assertArrayEquals(new byte[] {(byte)68, (byte)81, (byte)111}, byteArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      String string0 = Base64.encodeBase64URLSafeString((byte[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64((String) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("AAAAAAAAAAAAAAAAAAAAAA==", string0);
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64(364, byteArray0, false);
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("DQo=\r\n", string0);
  }

  @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }
}
