/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 14:24:46 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      base64_0.decode(byteArray1, (int) (byte)1, (int) (byte)1);
      base64_0.decode(byteArray1, (int) (byte)1, 1);
      base64_0.encode(byteArray0, 11, (-1253));
      base64_0.decode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-603L));
      BigInteger bigInteger0 = BigInteger.probablePrime(3677, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0);
      byte[] byteArray1 = new byte[0];
      Base64 base64_1 = new Base64(1, byteArray1);
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Base64 base64_0 = new Base64(15);
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-32);
      byteArray0[0] = (byte) (-32);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 0, 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1L));
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)42;
      byte byte0 = (byte)2;
      byteArray0[1] = (byte)2;
      byte byte1 = (byte)115;
      byteArray0[2] = (byte)115;
      base64_0.readResults(byteArray0, (-115), (byte)115);
      byte byte2 = (byte) (-111);
      byteArray0[3] = (byte) (-111);
      byte byte3 = (byte)111;
      byteArray0[4] = (byte)111;
      byte byte4 = (byte)25;
      byteArray0[5] = (byte)25;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)2, (int) (byte)42);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1L));
      BigInteger.probablePrime(2127, mockRandom0);
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)8;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)55, (byte)103, (byte)103, (byte)61, (byte) (-21), (byte) (-72)}, byteArray1);
      
      boolean boolean0 = Base64.isBase64((byte)61);
      //  // Unstable assertion: assertTrue(boolean0);
      
      byte[] byteArray2 = base64_0.encode(byteArray0);
      //  // Unstable assertion: assertEquals(4, byteArray2.length);
      
      int int0 = base64_0.avail();
      //  // Unstable assertion: assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false, true);
      base64_0.decode(byteArray1, 0, 123);
      base64_0.encode(byteArray2, (-4427), (int) (byte)1);
      byte[] byteArray3 = base64_0.decode(byteArray0);
      assertNotSame(byteArray3, byteArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[5];
      base64_0.encodeToString(byteArray0);
      byteArray0[0] = (byte) (-32);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      base64_0.decode(byteArray1, 0, 106);
      assertArrayEquals(new byte[] {(byte)52, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61}, byteArray1);
      
      Base64 base64_1 = new Base64(false);
      MockRandom mockRandom0 = new MockRandom();
      Base64.isBase64((byte) (-32));
      boolean boolean0 = Base64.isBase64((byte)123);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-32);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 0, 106);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)9;
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)9);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      String string0 = Base64.encodeBase64URLSafeString(byteArray1);
      assertEquals("Q1E9PQ", string0);
      
      byte[] byteArray2 = new byte[7];
      Object object0 = base64_0.decode((Object) "Q1E9PQ");
      base64_0.decode(object0);
      Base64.encodeBase64(byteArray1, false, false);
      base64_0.decode(byteArray2, (int) (byte)9, (int) (byte)9);
      Base64.isBase64((byte)9);
      Base64.encodeBase64Chunked(byteArray2);
      boolean boolean0 = Base64.isBase64(byteArray2);
      assertFalse(boolean0);
      
      int int0 = base64_0.readResults(byteArray2, (-1733), (-1733));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(7);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      base64_0.decode(byteArray1, 0, (int) (byte)1);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 0, 18);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      Base64.isBase64((byte)1);
      Base64 base64_0 = new Base64((byte)1);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, true);
      base64_0.encode(byteArray2, (int) (byte)1, (int) (byte)1);
      base64_0.decode(byteArray0, (-3117), (-3117));
      Base64.discardWhitespace(byteArray2);
      Object object0 = new Object();
      Base64 base64_1 = new Base64();
      try { 
        base64_1.encode((Object) base64_0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(7);
      Base64.encodeBase64(byteArray0, true);
      Base64 base64_1 = new Base64(76, byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte)1;
      Base64.encodeBase64(byteArray1, true, false, 6);
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte) (-1);
      byteArray2[1] = (byte) (-1);
      byteArray2[2] = (byte) (-1);
      Base64.encodeBase64URLSafeString(byteArray2);
      boolean boolean1 = Base64.isBase64((byte)1);
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertEquals(6, byteArray3.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61, (byte) (-21), (byte) (-72)}, byteArray3);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = base64_0.decode("");
      MockRandom mockRandom0 = new MockRandom();
      BigInteger.probablePrime(1199, mockRandom0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_1 = new Base64(1199);
      Base64 base64_2 = new Base64(95);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      assertSame(byteArray2, byteArray1);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = (-1377);
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64((-1377), (byte[]) null);
      base64_0.encode((byte[]) null, (-1377), (-1377));
      Object object0 = new Object();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, (-1529), (-1377));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-32);
      Base64 base64_0 = new Base64(45, byteArray0, false);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertEquals(6, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)52, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65}, byteArray1);
      
      base64_0.decode((Object) "Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64 base64_1 = new Base64(false);
      byte[] byteArray2 = base64_1.decode("}iDrSU H^D:UV3");
      boolean boolean0 = base64_1.hasData();
      assertFalse(boolean0);
      
      byte[] byteArray3 = new byte[5];
      byteArray3[0] = (byte) (-32);
      byteArray3[1] = (byte) (-32);
      byteArray3[2] = (byte)72;
      byteArray3[3] = (byte) (-32);
      byteArray3[4] = (byte) (-32);
      Base64.decodeInteger(byteArray3);
      byte[] byteArray4 = base64_1.decode(">q|v&D {=VbE:VA");
      assertArrayEquals(new byte[] {(byte) (-86), (byte) (-16)}, byteArray4);
      
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      BigInteger bigInteger0 = BigInteger.probablePrime(45, mockRandom0);
      base64_1.isUrlSafe();
      Base64.encodeInteger(bigInteger0);
      int int0 = base64_0.readResults(byteArray2, 98, 997);
      assertEquals(7, byteArray2.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte)25;
      byteArray0[7] = (byte)46;
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(1910, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0005O\u0001\u0000 3\u0019.]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(7);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      //  // Unstable assertion: assertEquals(1, byteArray2.length);
      
      Base64 base64_1 = new Base64(7);
      Base64 base64_2 = new Base64((-4496));
      byte[] byteArray3 = base64_1.encode(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61, (byte) (-21), (byte) (-72)}, byteArray1);
      //  // Unstable assertion: assertEquals(12, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      Base64 base64_0 = new Base64(22, byteArray0);
      boolean boolean0 = Base64.isBase64("'m");
      byte[] byteArray1 = base64_0.decode("");
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false);
      base64_0.encode(byteArray1, 1039, (-2295));
      Base64.decodeInteger(byteArray1);
      assertSame(byteArray1, byteArray2);
      
      boolean boolean1 = base64_0.hasData();
      assertFalse(boolean1 == boolean0);
      assertFalse(base64_0.isUrlSafe());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 2263;
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(2263, byteArray0);
      base64_0.readResults(byteArray0, (-558), (-558));
      base64_0.encodeToString(byteArray0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.remainder(bigInteger1);
      Random.setNextRandom(0);
      Base64.encodeInteger(bigInteger0);
      base64_0.readResults(byteArray0, 0, (-525));
      try { 
        base64_0.encode((Object) ": ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)12;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)12;
      byteArray1[1] = (byte)7;
      byteArray1[2] = (byte)12;
      byteArray1[3] = (byte)7;
      byteArray1[4] = (byte)12;
      byteArray1[5] = (byte)7;
      byteArray1[6] = (byte)7;
      byteArray1[7] = (byte)12;
      Base64 base64_0 = new Base64(22, byteArray1);
      Base64.isBase64("lineSeperator must nt containbase64 characters: [");
      byte[] byteArray2 = base64_0.decode("lineSeperator must nt containbase64 characters: [");
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, true, true);
      byte[] byteArray4 = new byte[3];
      byteArray4[0] = (byte)12;
      byteArray4[1] = (byte)7;
      byteArray4[2] = (byte)7;
      byte[] byteArray5 = Base64.encodeBase64(byteArray4, false, false);
      assertEquals(4, byteArray5.length);
      
      base64_0.encode(byteArray3, (int) (byte)12, (-2295));
      Base64.decodeInteger(byteArray1);
      String string0 = base64_0.encodeToString(byteArray2);
      assertEquals("lineSeperatormustntc\f\u0007\f\u0007\f\u0007\u0007\f\u0000ontainbase64characte\f\u0007\f\u0007\f\u0007\u0007\f\u0000rg==\f\u0007\f\u0007\f\u0007\u0007\f\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      //  // Unstable assertion: assertFalse(boolean0);
      
      Base64 base64_0 = new Base64(7);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false);
      base64_0.decode(byteArray2, (int) (byte)1, (int) (byte)1);
      base64_0.encode(byteArray2, 7, (-1253));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61, (byte) (-21), (byte) (-72)}, byteArray1);
      //  // Unstable assertion: assertEquals(8, byteArray2.length);
      
      byte[] byteArray3 = base64_0.decode(byteArray0);
      //  // Unstable assertion: assertEquals(0, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Base64 base64_0 = new Base64((-2375));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-108);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      base64_0.decode((Object) "Parameter supplied to Base64 decode is not a byte[] or a String");
      byte[] byteArray2 = base64_0.decode("VL'4OEhU");
      assertArrayEquals(new byte[] {(byte)84, (byte) (-66), (byte)14, (byte)18, (byte)21}, byteArray2);
      
      boolean boolean0 = base64_0.hasData();
      assertFalse(boolean0);
      
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      BigInteger bigInteger1 = BigInteger.probablePrime(444, mockRandom0);
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      assertEquals(4, byteArray3.length);
      assertArrayEquals(new byte[] {(byte)108, (byte)65, (byte)61, (byte)61}, byteArray3);
      
      base64_0.isUrlSafe();
      byte[] byteArray4 = Base64.encodeInteger(bigInteger1);
      assertEquals(76, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)25;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)75;
      int int0 = 20;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, true, 20);
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64 base64_0 = new Base64();
      Object object0 = base64_0.decode((Object) "UkVGaldrRkJRVUZCUVE");
      base64_0.encode(object0);
      Object object1 = null;
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)7;
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(false);
      int int0 = (-40);
      base64_0.encode(byteArray0, 155, (-40));
      try { 
        base64_0.encode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)12;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)12;
      byteArray1[1] = (byte)7;
      byteArray1[2] = (byte)12;
      byteArray1[3] = (byte)7;
      byteArray1[4] = (byte)12;
      byteArray1[5] = (byte)7;
      byteArray1[6] = (byte)7;
      byteArray1[7] = (byte)12;
      Base64 base64_0 = new Base64(22, byteArray1);
      boolean boolean0 = Base64.isBase64("lineSeperator must not contain base64 characters: [");
      assertFalse(boolean0);
      
      byte[] byteArray2 = base64_0.decode("lineSeperator must not contain base64 characters: [");
      assertEquals(32, byteArray2.length);
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, false, false);
      base64_0.encode(byteArray3, (int) (byte)12, (-2295));
      assertEquals(12, byteArray3.length);
      assertFalse(base64_0.isUrlSafe());
      
      Base64.decodeInteger(byteArray1);
      assertNotSame(byteArray1, byteArray3);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Base64 base64_0 = new Base64((-88), (byte[]) null);
      Base64 base64_1 = new Base64(1);
      Base64.encodeBase64((byte[]) null, false);
      Base64.encodeBase64((byte[]) null, true, true);
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, (-88), 64);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)84;
      base64_0.decode(byteArray0, (-2036), (-1429));
      int int0 = base64_0.readResults(byteArray0, (byte)84, (-2036));
      //  // Unstable assertion: assertEquals((-1), int0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      base64_0.decode((Object) "Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64 base64_1 = new Base64(true);
      byte[] byteArray2 = base64_1.decode("Y");
      boolean boolean0 = base64_0.hasData();
      //  // Unstable assertion: assertFalse(boolean0);
      
      byte[] byteArray3 = Base64.discardWhitespace(byteArray1);
      String string0 = Base64.encodeBase64String(byteArray3);
      //  // Unstable assertion: assertEquals("VkHruA==", string0);
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray2);
      String string1 = Base64.encodeBase64String(byteArray4);
      //  // Unstable assertion: assertEquals("", string1);
      
      byte[] byteArray5 = Base64.discardWhitespace(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)84}, byteArray5);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Base64 base64_0 = new Base64(42);
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = base64_0.decode("");
      base64_0.encodeToString(byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      byteArray0[0] = (byte)0;
      byte[] byteArray3 = Base64.encodeBase64(byteArray2);
      Base64.encodeBase64String(byteArray3);
      byte[] byteArray4 = Base64.discardWhitespace(byteArray0);
      assertNotSame(byteArray4, byteArray1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 encode is not a byte[]");
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertEquals(40, byteArray1.length);
      
      base64_0.decode((Object) "UTF-16");
      Random.setNextRandom((-4073));
      Random.setNextRandom((-1324));
      byte[] byteArray2 = new byte[0];
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true);
      assertEquals(0, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64((byte[]) null, false, false, (-484));
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.encodeBase64((byte[]) null);
      Base64 base64_1 = new Base64();
      Base64.encodeBase64((byte[]) null, false, false);
      Base64.encodeBase64((byte[]) null, false, true, 76);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.isBase64((byte)64);
      Base64.encodeBase64Chunked((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = "' ";
      byte[] byteArray0 = Base64.decodeBase64("' ");
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-111);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)117;
      byteArray1[5] = (byte) (-57);
      byteArray1[6] = (byte)104;
      Base64.encodeBase64(byteArray0, true, true, (int) (byte) (-57));
      byteArray1[7] = (byte)28;
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)9;
      Base64.discardWhitespace(byteArray0);
      boolean boolean0 = true;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte) (-1), byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD\u0000A\t]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      boolean boolean0 = Base64.isBase64((byte)0);
      assertFalse(boolean0);
      
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(123, byteArray1, false);
      base64_0.decode("");
      assertEquals(0, byteArray1.length);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)99;
      base64_0.decode(byteArray0, (-2036), (-1429));
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)99;
      byteArray2[1] = (byte)99;
      byteArray2[2] = (byte)99;
      byteArray2[3] = (byte)99;
      byteArray2[4] = (byte)99;
      byteArray2[5] = (byte)99;
      byteArray2[6] = (byte)99;
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray2);
      assertEquals((short)29127, bigInteger1.shortValue());
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, true, true, (int) (byte)99);
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("Yw", string0);
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray2);
      Base64 base64_1 = new Base64();
      Base64.encodeBase64(byteArray1, false, true);
      Base64.encodeBase64(byteArray3, true, false, (-1));
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.isBase64("");
      byte[] byteArray5 = Base64.encodeBase64Chunked(byteArray2);
      assertEquals(14, byteArray5.length);
      
      boolean boolean0 = Base64.isBase64(byteArray4);
      assertTrue(boolean0);
      
      BigInteger bigInteger2 = BigInteger.TEN;
      byte[] byteArray6 = Base64.encodeInteger(bigInteger2);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray6);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-32);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      base64_0.decode(byteArray1, 0, 98);
      Object object0 = null;
      Object object1 = new Object();
      try { 
        base64_0.decode(object1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)25;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)75;
      byteArray0[6] = (byte) (-116);
      Base64.discardWhitespace(byteArray1);
      Base64.encodeBase64(byteArray1, true, true, 1794);
      byte[] byteArray2 = Base64.encodeBase64Chunked((byte[]) null);
      assertNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Base64 base64_0 = new Base64(1826);
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)0;
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true, true, 1826);
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64.encodeBase64(byteArray2);
      Base64 base64_1 = new Base64();
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, false, false);
      byte[] byteArray4 = Base64.encodeBase64(byteArray3, false, false, 76);
      String string0 = Base64.encodeBase64URLSafeString(byteArray4);
      //  // Unstable assertion: assertEquals("UVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVFPQ", string0);
      
      Base64.isBase64((byte)64);
      byte[] byteArray5 = Base64.encodeBase64Chunked(byteArray2);
      //  // Unstable assertion: assertEquals(34, byteArray5.length);
      
      boolean boolean0 = Base64.isBase64(byteArray2);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte) (-48);
      byteArray1[2] = (byte)77;
      byteArray1[3] = (byte) (-18);
      byteArray1[4] = (byte) (-1);
      byteArray1[5] = (byte)91;
      byteArray1[6] = (byte)31;
      String string0 = base64_0.encodeToString(byteArray1);
      //  // Unstable assertion: assertEquals("AdBN7v9bHw==\uFFFD", string0);
      
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-24);
      Base64.encodeBase64(byteArray0, true, false);
      byteArray0[2] = (byte)41;
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)102, (byte)101, (byte)103, (byte)112, (byte)65, (byte)65, (byte)61, (byte)61}, byteArray2);
      
      byteArray0[3] = (byte)72;
      base64_0.decode(byteArray0);
      Base64.isBase64(byteArray0);
      Object object0 = base64_0.decode((Object) "AdBN7v9bHw==\u0000\u0000");
      Object object1 = base64_0.decode(object0);
      //  // Unstable assertion: assertNotSame(object1, object0);
      
      byte[] byteArray3 = base64_0.decode(byteArray0);
      //  // Unstable assertion: assertEquals(0, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)84;
      base64_0.decode(byteArray0, (-2036), (-1429));
      base64_0.readResults(byteArray0, (byte)84, (-2036));
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      base64_0.decode((Object) "Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64 base64_1 = new Base64(true);
      base64_1.decode("Y");
      boolean boolean0 = base64_0.hasData();
      //  // Unstable assertion: assertFalse(boolean0);
      
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)86, (byte)107, (byte)72, (byte)114, (byte)117, (byte)65, (byte)61, (byte)61}, byteArray2);
      
      byte[] byteArray3 = base64_0.decode(byteArray0);
      Base64.isBase64(byteArray0);
      Base64.encodeBase64(byteArray0, true, true, 1581);
      String string0 = Base64.encodeBase64URLSafeString(byteArray3);
      //  // Unstable assertion: assertEquals("", string0);
      
      Base64.isBase64((byte)59);
      byte[] byteArray4 = new byte[1];
      byteArray4[0] = (byte)72;
      byte[] byteArray5 = Base64.toIntegerBytes(bigInteger0);
      //  // Unstable assertion: assertEquals(4, byteArray5.length);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      byte[] byteArray2 = new byte[7];
      Base64.encodeBase64(byteArray1, false, false);
      base64_0.decode(byteArray2, (int) (byte)1, (int) (byte)1);
      Object object0 = null;
      Object object1 = new Object();
      try { 
        base64_0.decode(object1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[1];
      base64_0.decode(byteArray0, (int) (byte)99, (-1));
      byteArray0[0] = (byte)99;
      base64_0.decode((String) null);
      base64_0.decode(byteArray0, (-2036), (-1429));
      base64_0.readResults(byteArray0, (byte)99, (-2036));
      boolean boolean0 = Base64.isBase64((byte)103);
      assertTrue(boolean0);
      
      Base64.discardWhitespace(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)99;
      byteArray1[1] = (byte)103;
      byteArray1[2] = (byte)103;
      byteArray1[3] = (byte)99;
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      String string0 = Base64.encodeBase64String(byteArray1);
      assertEquals("Y2dnYw==", string0);
      
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      assertArrayEquals(new byte[] {(byte)89, (byte)119, (byte)61, (byte)61}, byteArray3);
      assertNotSame(byteArray3, byteArray2);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      base64_0.encode(byteArray0, 5634, (int) (byte) (-1));
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, 77, (byte) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte)45;
      Base64.isBase64((byte)127);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-14);
      byteArray1[1] = (byte) (-32);
      byteArray1[2] = (byte)127;
      byteArray1[3] = (byte) (-14);
      byteArray1[4] = (byte) (-14);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray2, true, false, (int) (byte) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Base64.encodeBase64URLSafe(byteArray0);
      int int0 = 2089;
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-32);
      byteArray0[0] = (byte) (-32);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 0, 155);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-2);
      byteArray0[0] = (byte) (-66);
      Base64 base64_0 = new Base64((-1), byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.decode(byteArray0, 732, 983);
      String string0 = base64_0.encodeToString(byteArray1);
      assertEquals("dmdBQQ==", string0);
      
      Base64.encodeBase64(byteArray0, true);
      byte[] byteArray2 = base64_0.decode("dmdBQQ==");
      assertArrayEquals(new byte[] {(byte)118, (byte)103, (byte)65, (byte)65}, byteArray2);
      
      base64_0.encode(byteArray0, 0, 0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray4 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray5 = Base64.encodeBase64(byteArray4);
      assertArrayEquals(new byte[] {(byte)100, (byte)109, (byte)100, (byte)66, (byte)81, (byte)81, (byte)61, (byte)61}, byteArray5);
      
      byte[] byteArray6 = Base64.encodeBase64URLSafe(byteArray3);
      assertEquals(0, byteArray6.length);
      
      boolean boolean0 = Base64.isArrayByteBase64(byteArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte) (-48);
      byteArray1[2] = (byte)77;
      byteArray1[3] = (byte) (-18);
      byteArray1[4] = (byte) (-1);
      byteArray1[5] = (byte)91;
      byteArray1[6] = (byte)31;
      String string0 = base64_0.encodeToString(byteArray1);
      //  // Unstable assertion: assertEquals("AdBN7v9bHw==\uFFFD", string0);
      
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-24);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true, false);
      byteArray0[2] = (byte)41;
      Base64.encodeBase64(byteArray0);
      byteArray0[3] = (byte)72;
      byte[] byteArray3 = base64_0.decode(byteArray0);
      //  // Unstable assertion: assertEquals(0, byteArray3.length);
      
      boolean boolean0 = Base64.isBase64(byteArray0);
      Base64.encodeBase64(byteArray0, true, false, (int) (byte)125);
      String string1 = Base64.encodeBase64URLSafeString(byteArray2);
      //  // Unstable assertion: assertEquals("ZmVnQUFBPT3ruA", string1);
      
      boolean boolean1 = Base64.isBase64((byte)121);
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)102, (byte)101, (byte)103, (byte)112, (byte)83, (byte)65, (byte)61, (byte)61, (byte) (-21), (byte) (-72)}, byteArray4);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.toByteArray();
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      bigInteger0.negate();
      byteArray0[1] = (byte)0;
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte) (-66);
      Base64 base64_0 = new Base64((-1), byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.decode(byteArray0, 732, 983);
      String string0 = base64_0.encodeToString(byteArray1);
      //  // Unstable assertion: assertEquals("R0pLKw==", string0);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true);
      base64_0.decode("R0pLKw==");
      base64_0.encode(byteArray0, 0, 0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray3 = base64_0.decode("lineSeperator must not contain base64 characters: [");
      //  // Unstable assertion: assertEquals(32, byteArray3.length);
      
      base64_0.decode(byteArray2, 1770, (-2932));
      byte[] byteArray4 = Base64.decodeBase64(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)24, (byte) (-110), (byte) (-66)}, byteArray4);
      
      byte[] byteArray5 = new byte[0];
      Base64.encodeBase64Chunked(byteArray5);
      Base64.decodeBase64("QNG%(oGBwx");
      byte[] byteArray6 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)71, (byte)74, (byte)75, (byte)43, (byte) (-21), (byte) (-72)}, byteArray6);
      
      byte[] byteArray7 = new byte[3];
      byteArray7[0] = (byte) (-66);
      byteArray7[1] = (byte) (-110);
      byteArray7[2] = (byte)24;
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray7);
      //  // Unstable assertion: assertTrue(bigInteger1.equals((Object)bigInteger0));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)25;
      Base64.encodeBase64URLSafe(byteArray0);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-1);
      Base64.decodeBase64(byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.decodeBase64("lineSeperator must not contain base64 characters: [");
      Base64.encodeBase64Chunked(byteArray0);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte)45;
      Base64.isBase64((byte) (-128));
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("4P/yLQ==", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte) (-59);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64((byte[]) null);
      Base64 base64_0 = new Base64(0);
      base64_0.encodeToString(byteArray0);
      base64_0.decode((Object) "6zWdUAAAAsU");
      byte[] byteArray1 = Base64.decodeBase64((byte[]) null);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-52);
      byteArray0[0] = (byte) (-1);
      Base64.encodeBase64String(byteArray0);
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.EncoderException");
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64.isBase64((byte)0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(3, byteArray2.length);
      
      Base64.encodeBase64String(byteArray1);
      Base64.encodeBase64(byteArray0);
      String string0 = Base64.encodeBase64String(byteArray1);
      assertEquals("orgapachecommonscodecEncoderExceptio", string0);
      
      Base64.discardWhitespace(byteArray0);
      assertEquals(27, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)25;
      Base64.encodeBase64URLSafe(byteArray0);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-1);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Base64.encodeBase64((byte[]) null, true, false);
      base64_0.decode((byte[]) null, (int) (byte)25, (int) (byte)0);
      Base64.encodeBase64(byteArray1);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("' ");
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-111);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)117;
      byteArray1[5] = (byte) (-57);
      byteArray1[6] = (byte)104;
      Base64.encodeBase64(byteArray0, true, true, (int) (byte) (-57));
      byteArray1[7] = (byte)28;
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      Base64.toIntegerBytes(bigInteger0);
      try { 
        base64_0.encode((Object) "' ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)63;
      byteArray0[0] = (byte)63;
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64((-1698), byteArray0, true);
      Base64.decodeInteger(byteArray1);
      Base64.encodeBase64Chunked(byteArray1);
      base64_0.decode(byteArray1);
      Base64.encodeBase64(byteArray0, false);
      try { 
        base64_0.encode((Object) "6b\"Ldy0$");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-110);
      byteArray0[4] = (byte)46;
      base64_0.encode(byteArray0, (int) (byte)0, (int) (byte)0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = null;
      Base64.decodeBase64((String) null);
      byte byte0 = (byte)0;
      Base64.isBase64((byte)0);
      Base64 base64_0 = new Base64();
      base64_0.encode((byte[]) null);
      byte[] byteArray0 = new byte[9];
      Base64.encodeBase64String((byte[]) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      byteArray0[0] = (byte)0;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.add(bigInteger1);
      Base64.encodeBase64((byte[]) null);
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 0, 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)107;
      byteArray0[4] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)14;
      byteArray1[1] = (byte)14;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)107;
      byteArray1[7] = (byte)14;
      Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      byte[] byteArray3 = base64_0.decode("AQAOawA");
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.toByteArray();
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger1.signum();
      bigInteger1.gcd(bigInteger0);
      base64_0.decode("AQAOawA");
      bigInteger0.andNot(bigInteger1);
      bigInteger1.doubleValue();
      bigInteger0.subtract(bigInteger1);
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray4 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray5 = Base64.encodeBase64Chunked(byteArray4);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)65, (byte)79, (byte)97, (byte)119, (byte)65, (byte)61, (byte)13, (byte)10}, byteArray5);
      
      byte[] byteArray6 = Base64.encodeBase64(byteArray3);
      Base64.encodeBase64(byteArray3);
      Base64.encodeBase64URLSafe(byteArray3);
      Base64.isArrayByteBase64(byteArray6);
      assertEquals(5, byteArray3.length);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)65, (byte)79, (byte)97, (byte)119, (byte)65, (byte)61}, byteArray6);
      
      boolean boolean0 = Base64.isArrayByteBase64(byteArray2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)1);
      boolean boolean0 = false;
      Base64.encodeBase64(byteArray0, false);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte)1;
      byteArray1[2] = (byte)1;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)1;
      byteArray1[5] = (byte)1;
      byteArray1[6] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray1);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.doubleValue();
      try { 
        base64_0.encode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)99;
      base64_0.decode(byteArray0, (-2036), (-1429));
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertEquals(0, byteArray1.length);
      
      base64_0.encode(byteArray0, 2019, (-887));
      base64_0.decode((byte[]) null);
      boolean boolean0 = Base64.isBase64("org.apache.commons.codec.EncoderException");
      Base64.encodeBase64URLSafe((byte[]) null);
      base64_0.readResults((byte[]) null, 0, 1);
      base64_0.encodeToString((byte[]) null);
      base64_0.encodeToString((byte[]) null);
      base64_0.encodeToString((byte[]) null);
      assertFalse(base64_0.isUrlSafe());
      
      Base64.encodeBase64((byte[]) null, true, true);
      boolean boolean1 = Base64.isBase64((byte)99);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)15;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.nextProbablePrime();
      bigInteger1.longValueExact();
      bigInteger1.gcd(bigInteger0);
      bigInteger1.subtract(bigInteger0);
      bigInteger0.min(bigInteger1);
      bigInteger0.toString(0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray2 = base64_0.decode(byteArray1);
      assertEquals(6, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)94, (byte)39, (byte)65, (byte)64, (byte)10, (byte)15}, byteArray2);
      assertEquals(8, byteArray1.length);
      
      Base64.encodeBase64(byteArray0, false, false);
      int int0 = base64_0.avail();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)25;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertArrayEquals(new byte[] {(byte)68, (byte)65, (byte)99, (byte)90, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65}, byteArray1);
      assertEquals(10, byteArray1.length);
      
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-1);
      byte[] byteArray2 = base64_0.decode(byteArray0);
      assertEquals(0, byteArray2.length);
      
      base64_0.decode((byte[]) null, 1, 2089);
      byte[] byteArray3 = new byte[2];
      byteArray3[0] = (byte)75;
      byteArray3[1] = (byte)7;
      byte[] byteArray4 = Base64.discardWhitespace(byteArray3);
      assertEquals(2, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Base64 base64_0 = new Base64((-1880), (byte[]) null);
      base64_0.encode((byte[]) null);
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, (-1880), 2040);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)65;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64(105, byteArray1);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)65;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)65;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)65;
      byteArray2[5] = (byte) (-118);
      String string0 = Base64.encodeBase64String(byteArray2);
      assertEquals("QQBBAEGK", string0);
      
      Base64.decodeBase64(byteArray0);
      byte[] byteArray3 = base64_0.decode("org.apache.commons.codec.EncoderException");
      assertEquals(27, byteArray3.length);
      
      boolean boolean0 = base64_0.hasData();
      assertFalse(base64_0.isUrlSafe());
      assertFalse(boolean0);
      
      boolean boolean1 = Base64.isBase64((byte)0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte byte0 = (byte)0;
      Base64.isBase64((byte)0);
      String string0 = "org.apache.commons.codec.EncoderException";
      byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.EncoderException");
      int int0 = 0;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD\uFFFD\u001A\uFFFD\uFFFD!y\uFFFD&\uFFFD\uFFFD\uFFFDr\uFFFD^pI\u0721\u05EB\u0013\u0017\u001E\uFFFD\u0628]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.toByteArray();
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      bigInteger0.negate();
      byteArray0[1] = (byte)0;
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)0;
      bigInteger0.pow((byte)0);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byte[] byteArray2 = bigInteger0.toByteArray();
      Base64 base64_0 = new Base64(751, byteArray1);
      BigInteger bigInteger1 = BigInteger.ONE;
      base64_0.decode(byteArray2, (int) (byte)0, (int) (byte)0);
      bigInteger0.divide(bigInteger1);
      try { 
        base64_0.decode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Base64.isBase64("Fs9C=h");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)15;
      byte byte0 = (byte) (-27);
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte) (-128);
      Base64 base64_0 = new Base64(0, byteArray0, true);
      Base64.decodeBase64(byteArray0);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64((-1377), (byte[]) null);
      base64_0.encode((byte[]) null, (-1377), (-1377));
      Object object0 = new Object();
      boolean boolean0 = false;
      boolean boolean1 = false;
      Base64.encodeBase64((byte[]) null, false, false, (-1377));
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte) (-66);
      Base64 base64_0 = new Base64((-1), byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.decode(byteArray0, 732, 983);
      String string0 = base64_0.encodeToString(byteArray1);
      assertEquals("R0pLKw==", string0);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true);
      assertEquals(6, byteArray2.length);
      
      byte[] byteArray3 = base64_0.decode("R0pLKw==");
      assertEquals(4, byteArray3.length);
      assertArrayEquals(new byte[] {(byte)71, (byte)74, (byte)75, (byte)43}, byteArray3);
      
      base64_0.encode(byteArray0, 0, 0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.longValue();
      Base64.toIntegerBytes(bigInteger0);
      base64_0.readResults(byteArray1, 0, (-1));
      assertEquals(4, byteArray1.length);
      
      Base64.encodeBase64URLSafe(byteArray0);
      base64_0.encode(byteArray0, (-1), 983);
      byte[] byteArray4 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(0, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)39;
      Base64.encodeBase64(byteArray0, false, true);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, true, (-2617));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of -2617
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Base64 base64_0 = new Base64(17);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)110;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((short)158, bigInteger0.shortValue());
      
      byte[] byteArray1 = base64_0.decode("org.apache.commons.codec.EncoderException");
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertEquals((short) (-17848), bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)102;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)102, 1746);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 102
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)54;
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)0;
      Base64.encodeBase64String(byteArray1);
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.isUrlSafe();
      try { 
        base64_0.encode((Object) "AA==");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)22;
      byteArray0[0] = (byte)22;
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte2 = (byte) (-92);
      byteArray0[2] = (byte) (-92);
      byte byte3 = (byte)0;
      byteArray0[3] = (byte)0;
      Base64.encodeBase64(byteArray0, false, false);
      Base64 base64_0 = new Base64(false);
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      assertTrue(base64_0.isUrlSafe());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)61;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(14, byteArray1.length);
      
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte)0;
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("Pa0ZAAAAAA", string0);
      
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      base64_0.readResults(byteArray0, 57, 19);
      base64_0.readResults(byteArray0, 0, 97);
      boolean boolean0 = base64_0.hasData();
      assertFalse(boolean0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(1, byteArray2.length);
      
      boolean boolean1 = base64_0.isUrlSafe();
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Base64 base64_0 = new Base64((-2375));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)119;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false);
      assertEquals(6, byteArray1.length);
      
      base64_0.decode((Object) "Parameter supplied to Base64 decode is not a byte[] or a String");
      byte[] byteArray2 = base64_0.decode("VL'4OEhU");
      assertArrayEquals(new byte[] {(byte)84, (byte) (-66), (byte)14, (byte)18, (byte)21}, byteArray2);
      assertEquals(5, byteArray2.length);
      
      boolean boolean0 = base64_0.hasData();
      assertFalse(boolean0);
      
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      BigInteger bigInteger1 = BigInteger.probablePrime(444, mockRandom0);
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      assertEquals(4, byteArray3.length);
      assertArrayEquals(new byte[] {(byte)100, (byte)119, (byte)61, (byte)61}, byteArray3);
      
      base64_0.isUrlSafe();
      byte[] byteArray4 = Base64.encodeInteger(bigInteger1);
      assertEquals(76, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Base64 base64_0 = new Base64(1826);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 1826);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)33;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)104;
      byteArray2[5] = (byte)22;
      byte[] byteArray3 = Base64.decodeBase64(byteArray2);
      base64_0.avail();
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      Base64.encodeInteger(bigInteger0);
      String string0 = "";
      base64_0.decode("");
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray3, (int) (byte)0, 1826);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)79;
      byte byte0 = (byte)34;
      byteArray0[2] = (byte)34;
      byte byte1 = (byte)86;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)19;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [BO\"V\uFFFD\u0013]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
  }
}
