/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 01:05:46 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.util.stream.LongStream;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      BigInteger bigInteger0 = new BigInteger(8215, mockRandom0);
      assertEquals((short)256, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertEquals((short)256, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(1372, byteArray0.length);
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 8194);
      assertEquals((short)256, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(1372, byteArray0.length);
      assertEquals(1880, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      BigInteger bigInteger1 = BigInteger.TEN;
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals((byte)10, bigInteger1.byteValue());
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.8, double0, 0.01);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true, 8194);
      assertEquals((short)256, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(1372, byteArray0.length);
      assertEquals(1880, byteArray1.length);
      assertEquals(2573, byteArray2.length);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray2);
      assertEquals((short)256, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(1372, byteArray0.length);
      assertEquals(1880, byteArray1.length);
      assertEquals(2573, byteArray2.length);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(string0);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      String string1 = base64_0.encodeToString(byteArray2);
      assertEquals((short)256, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(1372, byteArray0.length);
      assertEquals(1880, byteArray1.length);
      assertEquals(2573, byteArray2.length);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      // Undeclared exception!
      Base64.encodeBase64Chunked(byteArray2);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      BigInteger bigInteger0 = new BigInteger(8215, mockRandom0);
      assertEquals((short)256, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertEquals((short)256, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(1372, byteArray0.length);
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 8188);
      assertEquals((short)256, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(1372, byteArray0.length);
      assertEquals(1880, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      BigInteger bigInteger1 = BigInteger.TEN;
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals((byte)10, bigInteger1.byteValue());
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.8, double0, 0.01);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true, 8188);
      assertEquals((short)256, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(1372, byteArray0.length);
      assertEquals(1880, byteArray1.length);
      assertEquals(2573, byteArray2.length);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      
      Base64 base64_0 = new Base64(8188);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      String string0 = base64_0.encodeToString(byteArray2);
      assertEquals((short)256, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(1372, byteArray0.length);
      assertEquals(1880, byteArray1.length);
      assertEquals(2573, byteArray2.length);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(string0);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      assertEquals((short)256, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(1372, byteArray0.length);
      assertEquals(1880, byteArray1.length);
      assertEquals(2573, byteArray2.length);
      assertEquals(3524, byteArray3.length);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertNotNull(byteArray3);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      
      byte[] byteArray4 = Base64.decodeBase64(string0);
      assertEquals((short)256, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(1372, byteArray0.length);
      assertEquals(1880, byteArray1.length);
      assertEquals(2573, byteArray2.length);
      assertEquals(2573, byteArray4.length);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertNotNull(byteArray4);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray3);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      // Undeclared exception!
      Base64.encodeBase64URLSafe(byteArray3);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      BigInteger bigInteger0 = new BigInteger(8215, mockRandom0);
      assertEquals((short)256, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertEquals((short)256, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(1372, byteArray0.length);
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 8188);
      assertEquals((short)256, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(1372, byteArray0.length);
      assertEquals(1880, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      BigInteger bigInteger1 = BigInteger.TEN;
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals((byte)10, bigInteger1.byteValue());
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.8, double0, 0.01);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true, 8188);
      assertEquals((short)256, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(1372, byteArray0.length);
      assertEquals(1880, byteArray1.length);
      assertEquals(2573, byteArray2.length);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      
      Base64 base64_0 = new Base64(8188);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      String string0 = base64_0.encodeToString(byteArray2);
      assertEquals((short)256, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(1372, byteArray0.length);
      assertEquals(1880, byteArray1.length);
      assertEquals(2573, byteArray2.length);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(string0);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      assertEquals((short)256, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(1372, byteArray0.length);
      assertEquals(1880, byteArray1.length);
      assertEquals(2573, byteArray2.length);
      assertEquals(3524, byteArray3.length);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertNotNull(byteArray3);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      
      byte[] byteArray4 = Base64.decodeBase64("UTF-16LE");
      assertEquals(6, byteArray4.length);
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertNotNull(byteArray4);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray2);
      assertArrayEquals(new byte[] {(byte)81, (byte)49, (byte)126, (byte) (-41), (byte) (-94), (byte) (-60)}, byteArray4);
      
      base64_0.encode(byteArray0, 8188, 8215);
      assertEquals((short)256, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(1372, byteArray0.length);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      // Undeclared exception!
      Base64.encodeBase64(byteArray0, true, true, 8188);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      BigInteger bigInteger0 = new BigInteger(8215, mockRandom0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)256, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)256, bigInteger0.shortValue());
      assertEquals(1372, byteArray0.length);
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 8188);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)256, bigInteger0.shortValue());
      assertEquals(1372, byteArray0.length);
      assertEquals(1880, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      BigInteger bigInteger1 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.8, double0, 0.01);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true, 8188);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)256, bigInteger0.shortValue());
      assertEquals(1372, byteArray0.length);
      assertEquals(1880, byteArray1.length);
      assertEquals(2573, byteArray2.length);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      
      Base64 base64_0 = new Base64(8188);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      String string0 = base64_0.encodeToString(byteArray2);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)256, bigInteger0.shortValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(1372, byteArray0.length);
      assertEquals(1880, byteArray1.length);
      assertEquals(2573, byteArray2.length);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(string0);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)256, bigInteger0.shortValue());
      assertEquals(1372, byteArray0.length);
      assertEquals(1880, byteArray1.length);
      assertEquals(2573, byteArray2.length);
      assertEquals(3524, byteArray3.length);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertNotNull(byteArray3);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      
      byte[] byteArray4 = new byte[6];
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray0));
      
      byteArray4[0] = (byte) (-1);
      byte byte0 = (byte) (-51);
      // Undeclared exception!
      Base64.encodeBase64(byteArray3);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      BigInteger bigInteger0 = new BigInteger(8188, mockRandom0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals(1368, byteArray0.length);
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 8188);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals(1368, byteArray0.length);
      assertEquals(1872, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      BigInteger bigInteger1 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true, 8188);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals(1368, byteArray0.length);
      assertEquals(1872, byteArray1.length);
      assertEquals(2562, byteArray2.length);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      Base64 base64_0 = new Base64(8188);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray2);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals(1368, byteArray0.length);
      assertEquals(1872, byteArray1.length);
      assertEquals(2562, byteArray2.length);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(string0);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals(1368, byteArray3.length);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertNotNull(byteArray3);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      
      // Undeclared exception!
      base64_0.encode(byteArray2, 39, 8188);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      BigInteger bigInteger0 = new BigInteger(8188, mockRandom0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals(1368, byteArray0.length);
      assertNotNull(byteArray0);
      
      BigInteger bigInteger1 = new BigInteger(1, mockRandom0);
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals(1368, byteArray1.length);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray1, byteArray0);
      
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      base64_0.decode(byteArray1, 1, 53);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(1368, byteArray1.length);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger1);
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals(1, byteArray2.length);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)1}, byteArray2);
      
      int int0 = base64_0.readResults(byteArray0, 53, 53);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(1368, byteArray0.length);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(39, int0);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = 8188;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      BigInteger bigInteger0 = new BigInteger(8188, mockRandom0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      LongStream longStream0 = mockRandom0.longs(0L, 3388L);
      assertNotNull(longStream0);
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(1368, byteArray0.length);
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 8188);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(1368, byteArray0.length);
      assertEquals(1872, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, false, 8188);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(1368, byteArray0.length);
      assertEquals(1872, byteArray1.length);
      assertEquals(2562, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      
      Base64 base64_0 = new Base64(8188);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(1368, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(string0);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      
      String string1 = Base64.encodeBase64URLSafeString(byteArray2);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(1368, byteArray0.length);
      assertEquals(1872, byteArray1.length);
      assertEquals(2562, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      
      byte[] byteArray3 = Base64.decodeBase64(string1);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(1368, byteArray0.length);
      assertEquals(1872, byteArray1.length);
      assertEquals(2562, byteArray2.length);
      assertEquals(2562, byteArray3.length);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertNotNull(byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      
      // Undeclared exception!
      base64_0.encode(byteArray3);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = new BigInteger(8163, mockRandom0);
      assertEquals((byte) (-1), bigInteger0.byteValue());
      assertEquals((short)255, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertEquals((byte) (-1), bigInteger0.byteValue());
      assertEquals((short)255, bigInteger0.shortValue());
      assertEquals(1356, byteArray0.length);
      assertNotNull(byteArray0);
      
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertEquals((byte) (-1), bigInteger0.byteValue());
      assertEquals((short)255, bigInteger0.shortValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(1356, byteArray0.length);
      assertEquals(1808, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      assertEquals((byte) (-1), bigInteger0.byteValue());
      assertEquals((short)255, bigInteger0.shortValue());
      assertEquals(1356, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      BigInteger bigInteger0 = new BigInteger(8188, mockRandom0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(1368, byteArray0.length);
      assertNotNull(byteArray0);
      
      long long1 = mockRandom0.nextLong();
      assertFalse(long1 == long0);
      assertEquals(257L, long1);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 8188);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(1368, byteArray0.length);
      assertEquals(1872, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, false, 8188);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(1368, byteArray0.length);
      assertEquals(1872, byteArray1.length);
      assertEquals(2562, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      Base64 base64_0 = new Base64(8188);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray1);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(1368, byteArray0.length);
      assertEquals(1872, byteArray1.length);
      assertEquals(2496, byteArray3.length);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertNotNull(byteArray3);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      
      byte[] byteArray4 = base64_0.encode(byteArray1);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(1368, byteArray0.length);
      assertEquals(1872, byteArray1.length);
      assertEquals(2498, byteArray4.length);
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertNotNull(byteArray4);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray2);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      // Undeclared exception!
      Base64.encodeBase64URLSafeString(byteArray2);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Random.setNextRandom(1825);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)61;
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertEquals(2, byteArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)9, (byte)61}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      BigInteger bigInteger0 = new BigInteger(8165, mockRandom0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals(1364, byteArray0.length);
      assertNotNull(byteArray0);
      
      Base64 base64_0 = new Base64(8165);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals(1364, byteArray0.length);
      assertEquals(1868, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      base64_0.decode(byteArray1, 1361, 90);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(1364, byteArray0.length);
      assertEquals(1868, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      String string0 = Base64.encodeBase64String(byteArray1);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals(1364, byteArray0.length);
      assertEquals(1868, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(string0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int int0 = base64_0.readResults(byteArray1, 757, 0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(1364, byteArray0.length);
      assertEquals(1868, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, int0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      base64_0.encode(byteArray0, 0, 123);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(1364, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      BigInteger bigInteger0 = new BigInteger(8165, mockRandom0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals(1364, byteArray0.length);
      assertNotNull(byteArray0);
      
      BigInteger bigInteger1 = bigInteger0.shiftRight(8165);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 8165);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals(1364, byteArray0.length);
      assertEquals(1820, byteArray1.length);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      String string0 = Base64.encodeBase64String(byteArray1);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals(1364, byteArray0.length);
      assertEquals(1820, byteArray1.length);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(string0);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Base64 base64_0 = new Base64(true);
      assertTrue(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray2 = Base64.encodeInteger(bigInteger1);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals(0, byteArray2.length);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      
      byte[] byteArray3 = base64_0.decode(string0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertTrue(base64_0.isUrlSafe());
      assertEquals(1364, byteArray0.length);
      assertEquals(1820, byteArray1.length);
      assertEquals(1820, byteArray3.length);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertNotNull(byteArray3);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray4 = Base64.discardWhitespace(byteArray1);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals(1364, byteArray0.length);
      assertEquals(1820, byteArray1.length);
      assertEquals(1820, byteArray4.length);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertNotNull(byteArray4);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray1);
      
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      BigInteger bigInteger0 = new BigInteger(8163, mockRandom0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(1364, byteArray0.length);
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 8163);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(1364, byteArray0.length);
      assertEquals(1820, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Base64 base64_0 = new Base64(false);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      base64_0.decode(byteArray0, 44, 2006);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(1364, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      int int0 = bigInteger0.getLowestSetBit();
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(32, int0);
      
      base64_0.decode(byteArray1, 2006, (-1502));
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(1364, byteArray0.length);
      assertEquals(1820, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, 6374, 2006);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      BigInteger bigInteger0 = new BigInteger(8165, mockRandom0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(1364, byteArray0.length);
      assertNotNull(byteArray0);
      
      boolean boolean0 = Base64.isBase64((byte)61);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1431655765);
      assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = new BigInteger(1431655765, mockRandom0);
      assertEquals((byte) (-86), bigInteger0.byteValue());
      assertEquals((short) (-21846), bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      // Undeclared exception!
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = new BigInteger(473, mockRandom0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(76, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray2 = base64_0.decode(byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      assertEquals(22, byteArray0.length);
      assertEquals(32, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Base64 base64_0 = new Base64(false);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      Base64 base64_1 = new Base64((-849), byteArray0, false);
      assertFalse(base64_1.isUrlSafe());
      assertEquals(22, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(base64_1.equals((Object)base64_0));
      assertNotNull(base64_1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      base64_1.decode(byteArray1, 11, 2753);
      assertFalse(base64_1.isUrlSafe());
      assertEquals(22, byteArray0.length);
      assertEquals(32, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(base64_1.equals((Object)base64_0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(base64_1, base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)4;
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      base64_0.encode(byteArray0, (int) (byte)4, (int) (byte)4);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(9, byteArray0.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte)4, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      Base64 base64_0 = new Base64((-3663), byteArray0, true);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(0, byteArray0.length);
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Object object0 = base64_0.decode((Object) "Wud\"T\"ma{Xr^L^");
      assertTrue(base64_0.isUrlSafe());
      assertEquals(0, byteArray0.length);
      assertNotNull(object0);
      assertSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, object0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      // Undeclared exception!
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)4;
      Base64 base64_0 = new Base64((byte)4, byteArray0, false);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(9, byteArray0.length);
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte)4, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      assertEquals(9, byteArray0.length);
      assertEquals(14, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)4, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      base64_0.encode(byteArray0, 3, (int) (byte)4);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(9, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte)4, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int0 = base64_0.avail();
      assertFalse(base64_0.isUrlSafe());
      assertEquals(9, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(13, int0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte)4, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      assertTrue(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray0 = base64_0.decode("ILput array too big, ^he output array would be bigger (");
      assertTrue(base64_0.isUrlSafe());
      assertEquals(31, byteArray0.length);
      assertNotNull(byteArray0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(31, byteArray0.length);
      assertEquals(28, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray2 = Base64.decodeBase64("ILput array too big, ^he output array would be bigger (");
      assertEquals(31, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)12;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      assertEquals(16, byteArray0.length);
      assertEquals(24, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals(16, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals("DAwAAAAAAAAAAAAAAAAAAA==", string0);
      assertNotNull(string0);
      assertNotSame(byteArray0, byteArray1);
      
      Base64 base64_0 = new Base64(false);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      base64_0.decode(byteArray1, (int) (byte)12, (int) (byte)12);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(16, byteArray0.length);
      assertEquals(24, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      boolean boolean0 = Base64.isBase64((byte) (-1));
      assertFalse(boolean0);
      
      boolean boolean1 = Base64.isBase64(byteArray0);
      assertEquals(16, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(byteArray0, byteArray1);
      
      base64_0.decode(byteArray0, (int) (byte) (-1), (int) (byte)12);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(16, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(1530, byteArray0, false);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, byteArray0.length);
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray1 = base64_0.decode("UTF-16");
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)81, (byte)49, (byte)126, (byte) (-41)}, byteArray1);
      
      int int0 = base64_0.readResults(byteArray0, 1530, 882);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals((-1), int0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-1), (byte)92}, byteArray1);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      //  // Unstable assertion: assertEquals((short)1, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)1, bigInteger0.byteValue());
      //  // Unstable assertion: assertNotNull(bigInteger0);
      
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      //  // Unstable assertion: assertEquals((short)1, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)1, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals(1, byteArray2.length);
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)1}, byteArray2);
      
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      //  // Unstable assertion: assertEquals((short)1, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)1, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals(4, byteArray3.length);
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray3);
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray0, true, false, (int) (byte)22);
      //  // Unstable assertion: assertEquals(15, byteArray0.length);
      //  // Unstable assertion: assertEquals(22, byteArray4.length);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)22, byteArray4, false);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [AAAAAAAAAAAAAAAAAAAA\uFFFD\\]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)121;
      byteArray0[6] = (byte) (-80);
      byteArray0[7] = (byte)72;
      byteArray0[8] = (byte)56;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      //  // Unstable assertion: assertEquals(9, byteArray0.length);
      //  // Unstable assertion: assertEquals(3, byteArray1.length);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)30, (byte)6, (byte)47, (byte)121, (byte) (-80), (byte)72, (byte)56}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-1), (byte)33, (byte) (-4)}, byteArray1);
      
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertEquals(2, byteArray2.length);
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-1), (byte)92}, byteArray2);
      
      byte[] byteArray3 = new byte[2];
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte)9;
      byte[] byteArray4 = Base64.discardWhitespace(byteArray3);
      //  // Unstable assertion: assertEquals(1, byteArray4.length);
      //  // Unstable assertion: assertEquals(2, byteArray3.length);
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray4);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0}, byteArray4);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)9}, byteArray3);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      Base64 base64_0 = new Base64((byte)22, byteArray0, false);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(15, byteArray0.length);
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray1 = base64_0.decode("lineSeperator must not contain base64 characters: [");
      assertFalse(base64_0.isUrlSafe());
      assertEquals(15, byteArray0.length);
      assertEquals(32, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray2 = base64_0.encode(byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(15, byteArray0.length);
      assertEquals(32, byteArray1.length);
      assertEquals(89, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, false, false, 44);
      assertEquals(15, byteArray0.length);
      assertEquals(20, byteArray3.length);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertNotNull(byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray2, false, false, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (124) than the specified maxium size of -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)12;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)12, (byte)12}, byteArray0);
      assertArrayEquals(new byte[] {(byte)68, (byte)65, (byte)119, (byte)61}, byteArray1);
      
      String string0 = Base64.encodeBase64String(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals("REF3PQ==", string0);
      assertNotNull(string0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)12, (byte)12}, byteArray0);
      assertArrayEquals(new byte[] {(byte)68, (byte)65, (byte)119, (byte)61}, byteArray1);
      
      Base64 base64_0 = new Base64(false);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      base64_0.decode(byteArray1, (int) (byte)2, (int) (byte)12);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte)12, (byte)12}, byteArray0);
      assertArrayEquals(new byte[] {(byte)68, (byte)65, (byte)119, (byte)61}, byteArray1);
      
      boolean boolean0 = Base64.isBase64((byte)38);
      assertFalse(boolean0);
      
      boolean boolean1 = Base64.isBase64(byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)12, (byte)12}, byteArray0);
      
      base64_0.decode(byteArray0, (int) (byte)38, (-4549));
      assertFalse(base64_0.isUrlSafe());
      assertEquals(2, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte)12, (byte)12}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)2;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      assertEquals(4, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)26, (byte)45, (byte) (-1), (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {(byte)71, (byte)105, (byte)51, (byte)47, (byte)65, (byte)103, (byte)61, (byte)61}, byteArray1);
      
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals(4, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals("Gi3/Ag==", string0);
      assertNotNull(string0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)26, (byte)45, (byte) (-1), (byte)2}, byteArray0);
      
      Base64 base64_0 = new Base64(true);
      assertTrue(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      boolean boolean0 = Base64.isBase64("");
      assertTrue(boolean0);
      
      base64_0.decode(byteArray1, (int) (byte)2, (int) (byte)45);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(4, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte)26, (byte)45, (byte) (-1), (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {(byte)71, (byte)105, (byte)51, (byte)47, (byte)65, (byte)103, (byte)61, (byte)61}, byteArray1);
      
      byte[] byteArray2 = new byte[2];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = (byte)2;
      byteArray2[1] = (byte)26;
      boolean boolean1 = Base64.isBase64(byteArray2);
      assertEquals(2, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte)26}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)25;
      Base64 base64_0 = new Base64((byte)25, byteArray0, false);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(9, byteArray0.length);
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte)25, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(14, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)25, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(14, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)25, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 1, (int) (byte)25);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      Base64 base64_0 = new Base64((byte)22, byteArray0, false);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(15, byteArray0.length);
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      Base64 base64_1 = new Base64(64, byteArray0, false);
      assertFalse(base64_1.isUrlSafe());
      assertEquals(15, byteArray0.length);
      assertFalse(base64_1.equals((Object)base64_0));
      assertNotNull(base64_1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(15, byteArray0.length);
      assertEquals(35, byteArray1.length);
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(base64_0, base64_1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null, false, true);
      assertNull(byteArray0);
      
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      String string0 = Base64.encodeBase64URLSafeString((byte[]) null);
      assertNull(string0);
      
      byte[] byteArray1 = Base64.encodeBase64((byte[]) null, false, false);
      assertNull(byteArray1);
      
      byte[] byteArray2 = Base64.encodeBase64URLSafe((byte[]) null);
      assertNull(byteArray2);
      
      byte[] byteArray3 = new byte[5];
      byteArray3[0] = (byte) (-1);
      byteArray3[1] = (byte)99;
      byteArray3[2] = (byte) (-1);
      byteArray3[3] = (byte)99;
      byteArray3[4] = (byte)99;
      byte[] byteArray4 = base64_0.decode(byteArray3);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(5, byteArray3.length);
      assertEquals(2, byteArray4.length);
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertNotNull(byteArray4);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray4, byteArray3);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)99, (byte) (-1), (byte)99, (byte)99}, byteArray3);
      assertArrayEquals(new byte[] {(byte)113, (byte) (-57)}, byteArray4);
      
      byte[] byteArray5 = Base64.encodeBase64((byte[]) null, false, false, (int) (byte) (-1));
      assertNull(byteArray5);
      
      byte[] byteArray6 = Base64.decodeBase64((byte[]) null);
      assertNull(byteArray6);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-38);
      byteArray0[0] = (byte) (-38);
      Base64 base64_0 = new Base64(1, byteArray0, true);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-38)}, byteArray0);
      
      byte[] byteArray1 = new byte[7];
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-8);
      byteArray1[1] = (byte) (-38);
      byteArray1[2] = (byte) (-38);
      byteArray1[3] = (byte) (-38);
      byteArray1[4] = (byte) (-38);
      byteArray1[5] = (byte) (-38);
      byteArray1[6] = (byte) (-38);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals(7, byteArray1.length);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotNull(bigInteger0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-8), (byte) (-38), (byte) (-38), (byte) (-38), (byte) (-38), (byte) (-38), (byte) (-38)}, byteArray1);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true);
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArray2.length);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-38)}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)50, (byte)103, (byte)61, (byte)61, (byte) (-1), (byte)92}, byteArray2);
      
      base64_0.encode(byteArray0, 41, (-1106));
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-38)}, byteArray0);
      
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, 1, (byte) (-38));
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)35;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-16);
      byteArray0[6] = (byte)28;
      Base64 base64_0 = new Base64((-1397), byteArray0, false);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(7, byteArray0.length);
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte)42, (byte) (-26), (byte)123, (byte)35, (byte) (-1), (byte) (-16), (byte)28}, byteArray0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      assertEquals(7, byteArray0.length);
      assertEquals(12, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)42, (byte) (-26), (byte)123, (byte)35, (byte) (-1), (byte) (-16), (byte)28}, byteArray0);
      
      byte[] byteArray2 = base64_0.encode(byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(7, byteArray0.length);
      assertEquals(12, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte)42, (byte) (-26), (byte)123, (byte)35, (byte) (-1), (byte) (-16), (byte)28}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)117;
      byteArray0[0] = (byte)117;
      byte byte1 = (byte)115;
      byteArray0[1] = (byte)115;
      byte byte2 = (byte)121;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)47;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((byte) (-65), bigInteger0.byteValue());
      assertEquals((short) (-13121), bigInteger0.shortValue());
      assertEquals(4, byteArray0.length);
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte)117, (byte)115, (byte)121, (byte)47}, byteArray0);
      
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)121, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [usy/]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      assertTrue(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      base64_0.encode((byte[]) null, (-12), (-12));
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray0 = base64_0.decode("Input array too big, the output array would be bigger (");
      assertFalse(base64_0.isUrlSafe());
      assertEquals(32, byteArray0.length);
      assertNotNull(byteArray0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(32, byteArray0.length);
      assertEquals(45, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      String string0 = Base64.encodeBase64String((byte[]) null);
      assertNull(string0);
      
      Base64 base64_1 = new Base64(true);
      assertTrue(base64_1.isUrlSafe());
      assertFalse(base64_1.equals((Object)base64_0));
      assertNotNull(base64_1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      base64_0.decode(byteArray0, (-2582), 8188);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(32, byteArray0.length);
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(base64_0, base64_1);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)12;
      byte[] byteArray1 = Base64.decodeBase64("Input array too big, the output array would be bigger (");
      assertEquals(32, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean0 = Base64.isBase64("Input array too big, the output array would be bigger (");
      assertFalse(boolean0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(0, byteArray3.length);
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertNotNull(byteArray3);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray3);
      
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, (int) (byte)12, 8192);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(false);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray0 = base64_0.encode((byte[]) null);
      assertFalse(base64_0.isUrlSafe());
      assertNull(byteArray0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray1 = Base64.decodeBase64((String) null);
      assertNull(byteArray1);
      
      byte[] byteArray2 = null;
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)4;
      Base64 base64_0 = new Base64((byte)4, byteArray0, false);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(12, byteArray0.length);
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(12, byteArray0.length);
      assertEquals(18, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      base64_0.encode(byteArray0, 1, (int) (byte)4);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(12, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray0 = base64_0.decode("Input array too big, the output array would be bigger (");
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(32, byteArray0.length);
      //  // Unstable assertion: assertNotNull(byteArray0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(32, byteArray0.length);
      //  // Unstable assertion: assertEquals(46, byteArray1.length);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, true);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(32, byteArray0.length);
      //  // Unstable assertion: assertEquals(46, byteArray1.length);
      //  // Unstable assertion: assertEquals(62, byteArray2.length);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      base64_0.encode(byteArray1, (-1531), (int) (byte) (-96));
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(32, byteArray0.length);
      //  // Unstable assertion: assertEquals(46, byteArray1.length);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      String string0 = base64_0.encodeToString(byteArray2);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(32, byteArray0.length);
      //  // Unstable assertion: assertEquals(46, byteArray1.length);
      //  // Unstable assertion: assertEquals(62, byteArray2.length);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals("U1c1d2RYUmhjbkpoZVhSdmIySnBaM1JvWlc5MWRIQjFkR0Z5Y21GNWQyOTFiR1JpWldKcFoyZGxi\uFFFD\\ejNfWEE\uFFFD\\", string0);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray0 = base64_0.decode("Input array too big, the output array would be bigger (");
      assertFalse(base64_0.isUrlSafe());
      assertEquals(32, byteArray0.length);
      assertNotNull(byteArray0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(32, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte) (-50), (byte)121, (byte)62, (byte) (-122), (byte)121, (byte)22}, byteArray1);
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertEquals((byte) (-53), bigInteger0.byteValue());
      assertEquals((short)203, bigInteger0.shortValue());
      assertEquals(32, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(bigInteger0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte) (-50), (byte)121, (byte)62, (byte) (-122), (byte)121, (byte)22}, byteArray1);
      
      boolean boolean0 = Base64.isBase64((byte)124);
      assertFalse(boolean0);
      
      Base64 base64_1 = new Base64();
      assertFalse(base64_1.isUrlSafe());
      assertFalse(base64_1.equals((Object)base64_0));
      assertNotNull(base64_1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      base64_1.decode(byteArray0, 440, (-313));
      assertFalse(base64_0.isUrlSafe());
      assertFalse(base64_1.isUrlSafe());
      assertEquals(32, byteArray0.length);
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(base64_1.equals((Object)base64_0));
      assertNotSame(base64_0, base64_1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(base64_1, base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(32, byteArray0.length);
      assertEquals(46, byteArray2.length);
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertNotSame(base64_0, base64_1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      Object object0 = base64_1.decode((Object) "Input array too big, the output array would be bigger (");
      assertFalse(base64_1.isUrlSafe());
      assertFalse(base64_1.equals((Object)base64_0));
      assertNotNull(object0);
      assertNotSame(base64_1, base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      base64_1.decode(byteArray1, (int) (byte)124, 440);
      assertFalse(base64_0.isUrlSafe());
      assertFalse(base64_1.isUrlSafe());
      assertEquals(32, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)object0));
      assertFalse(byteArray1.equals((Object)object0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(base64_1.equals((Object)base64_0));
      assertNotSame(base64_0, base64_1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, object0);
      assertNotSame(byteArray1, object0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(base64_1, base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte) (-50), (byte)121, (byte)62, (byte) (-122), (byte)121, (byte)22}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      assertTrue(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte)31;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)1, 63);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Base64 base64_0 = new Base64((-2873), (byte[]) null);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray0 = base64_0.decode((byte[]) null);
      assertFalse(base64_0.isUrlSafe());
      assertNull(byteArray0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray1 = Base64.encodeBase64((byte[]) null);
      assertNull(byteArray1);
      
      byte byte0 = (byte)67;
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      assertTrue(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray0 = Base64.decodeBase64((String) null);
      assertNull(byteArray0);
      
      byte[] byteArray1 = Base64.encodeBase64((byte[]) null, true);
      assertNull(byteArray1);
      
      byte byte0 = (byte)117;
      Base64 base64_1 = new Base64(815, (byte[]) null);
      assertFalse(base64_1.isUrlSafe());
      assertFalse(base64_1.equals((Object)base64_0));
      assertNotNull(base64_1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray2 = base64_1.decode((byte[]) null);
      assertFalse(base64_1.isUrlSafe());
      assertFalse(base64_1.equals((Object)base64_0));
      assertNull(byteArray2);
      assertNotSame(base64_1, base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      assertTrue(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray0 = null;
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = bigInteger0.nextProbablePrime();
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)2, bigInteger1.byteValue());
      assertEquals((short)2, bigInteger1.shortValue());
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      
      BigInteger bigInteger2 = BigInteger.ONE;
      assertEquals((short)1, bigInteger2.shortValue());
      assertEquals((byte)1, bigInteger2.byteValue());
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertNotNull(bigInteger2);
      assertSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      
      int int0 = bigInteger0.intValueExact();
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertEquals(1, int0);
      assertNotSame(bigInteger0, bigInteger1);
      assertSame(bigInteger0, bigInteger2);
      
      int int1 = 33;
      Base64 base64_1 = new Base64(33, (byte[]) null);
      assertFalse(base64_1.isUrlSafe());
      assertFalse(base64_1.equals((Object)base64_0));
      assertNotNull(base64_1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      // Undeclared exception!
      try { 
        base64_1.decode((byte[]) null, 76, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[5] = (byte) (-40);
      byteArray0[6] = (byte) (-18);
      byteArray0[7] = (byte)42;
      byteArray0[8] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      //  // Unstable assertion: assertEquals(9, byteArray0.length);
      //  // Unstable assertion: assertEquals(14, byteArray1.length);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)12, (byte)22, (byte)0, (byte)0, (byte)0, (byte) (-40), (byte) (-18), (byte)42, (byte)0}, byteArray0);
      
      Base64 base64_0 = new Base64((byte)0, byteArray0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(9, byteArray0.length);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)12, (byte)22, (byte)0, (byte)0, (byte)0, (byte) (-40), (byte) (-18), (byte)42, (byte)0}, byteArray0);
      
      base64_0.encode(byteArray0, 1855, (int) (byte)0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(9, byteArray0.length);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)12, (byte)22, (byte)0, (byte)0, (byte)0, (byte) (-40), (byte) (-18), (byte)42, (byte)0}, byteArray0);
      
      String string0 = base64_0.encodeToString(byteArray0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(9, byteArray0.length);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertEquals("DBYAAADY7ioA", string0);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)12, (byte)22, (byte)0, (byte)0, (byte)0, (byte) (-40), (byte) (-18), (byte)42, (byte)0}, byteArray0);
      
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertEquals(9, byteArray0.length);
      //  // Unstable assertion: assertEquals(14, byteArray2.length);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)12, (byte)22, (byte)0, (byte)0, (byte)0, (byte) (-40), (byte) (-18), (byte)42, (byte)0}, byteArray0);
      
      boolean boolean0 = Base64.isBase64(byteArray1);
      //  // Unstable assertion: assertEquals(9, byteArray0.length);
      //  // Unstable assertion: assertEquals(14, byteArray1.length);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)12, (byte)22, (byte)0, (byte)0, (byte)0, (byte) (-40), (byte) (-18), (byte)42, (byte)0}, byteArray0);
      
      int int0 = base64_0.avail();
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(9, byteArray0.length);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertEquals(0, int0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)12, (byte)22, (byte)0, (byte)0, (byte)0, (byte) (-40), (byte) (-18), (byte)42, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)12;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      assertEquals(12, byteArray0.length);
      assertEquals(18, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean0 = Base64.isBase64("Input array too big, the output array would be bigger (");
      assertFalse(boolean0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(0, byteArray3.length);
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertNotNull(byteArray3);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray3);
      
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, (int) (byte)12, 8192);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 18
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Base64 base64_0 = new Base64((-2873), (byte[]) null);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray0 = base64_0.decode((byte[]) null);
      assertFalse(base64_0.isUrlSafe());
      assertNull(byteArray0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      boolean boolean0 = Base64.isBase64((byte)67);
      assertTrue(boolean0);
      
      Base64 base64_1 = new Base64((-2873), (byte[]) null, false);
      assertFalse(base64_1.isUrlSafe());
      assertFalse(base64_1.equals((Object)base64_0));
      assertNotNull(base64_1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray1 = base64_0.decode("N8ka&TY");
      assertFalse(base64_0.isUrlSafe());
      assertEquals(4, byteArray1.length);
      assertFalse(base64_0.equals((Object)base64_1));
      assertNotNull(byteArray1);
      assertNotSame(base64_0, base64_1);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte)55, (byte) (-55), (byte)26, (byte)77}, byteArray1);
      
      base64_0.encode((byte[]) null, (-1221), (int) (byte)67);
      assertFalse(base64_0.isUrlSafe());
      assertFalse(base64_0.equals((Object)base64_1));
      assertNotSame(base64_0, base64_1);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray2 = Base64.encodeBase64URLSafe((byte[]) null);
      assertNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      assertTrue(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      String string0 = "";
      byte[] byteArray0 = Base64.decodeBase64("");
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      assertTrue(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray0 = Base64.decodeBase64("");
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      boolean boolean0 = Base64.isBase64("");
      assertTrue(boolean0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray3.length);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertNotNull(byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertSame(byteArray0, byteArray3);
      assertSame(byteArray0, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertSame(byteArray3, byteArray0);
      assertSame(byteArray3, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray3);
      
      byte[] byteArray4 = base64_0.decode("");
      assertTrue(base64_0.isUrlSafe());
      assertEquals(0, byteArray4.length);
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertNotNull(byteArray4);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray3);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {}, byteArray4);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true);
      assertEquals(3, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)12, (byte)2, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)68, (byte)65, (byte)76, (byte)95}, byteArray1);
      
      String string0 = Base64.encodeBase64String(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals("REFMXw==", string0);
      assertNotNull(string0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)12, (byte)2, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)68, (byte)65, (byte)76, (byte)95}, byteArray1);
      
      Base64 base64_0 = new Base64(false);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, (int) (byte)2, 2681);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      assertTrue(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      String string0 = base64_0.encodeToString((byte[]) null);
      assertTrue(base64_0.isUrlSafe());
      assertNull(string0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      Base64 base64_1 = new Base64(105, (byte[]) null, true);
      assertTrue(base64_1.isUrlSafe());
      assertFalse(base64_1.equals((Object)base64_0));
      assertNotNull(base64_1);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray0 = Base64.encodeBase64Chunked((byte[]) null);
      assertNull(byteArray0);
      
      byte[] byteArray1 = base64_1.encode((byte[]) null);
      assertTrue(base64_1.isUrlSafe());
      assertFalse(base64_1.equals((Object)base64_0));
      assertNull(byteArray1);
      assertNotSame(base64_1, base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      int int0 = 2;
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, 64, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      String string0 = "org.apache.commons.codec.binary.Base64";
      byte[] byteArray0 = base64_0.decode("org.apache.commons.codec.binary.Base64");
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(24, byteArray0.length);
      //  // Unstable assertion: assertNotNull(byteArray0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray1 = base64_0.decode(byteArray0);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(24, byteArray0.length);
      //  // Unstable assertion: assertEquals(3, byteArray1.length);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-54), (byte) (-70), (byte) (-93)}, byteArray1);
      
      byte[] byteArray2 = base64_0.decode("org.apache.commons.codec.binary.Base64");
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(24, byteArray2.length);
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(24, byteArray2.length);
      //  // Unstable assertion: assertEquals(34, byteArray3.length);
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray3, true, false);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(24, byteArray2.length);
      //  // Unstable assertion: assertEquals(34, byteArray3.length);
      //  // Unstable assertion: assertEquals(50, byteArray4.length);
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray5 = Base64.discardWhitespace(byteArray3);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(24, byteArray2.length);
      //  // Unstable assertion: assertEquals(34, byteArray3.length);
      //  // Unstable assertion: assertEquals(34, byteArray5.length);
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotNull(byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray1);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      Base64 base64_1 = null;
      try {
        base64_1 = new Base64(3519, byteArray3);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [orgapachecommonscodecbinaryBase6\uFFFD\\]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(7, byteArray0.length);
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = Base64.isBase64((byte)10);
      assertFalse(boolean0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 1079);
      assertEquals(7, byteArray0.length);
      assertEquals(12, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray0);
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals(7, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(bigInteger1, bigInteger0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(7, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = false;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      Base64 base64_0 = new Base64(91);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      int int0 = base64_0.readResults(byteArray0, 91, 91);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, byteArray0.length);
      assertEquals(0, int0);
      assertSame(byteArray0, byteArray1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = Base64.isBase64("dDV1X}VSsv7-x");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Base64 base64_0 = new Base64(65);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray0 = new byte[0];
      int int0 = base64_0.readResults(byteArray0, 65, 65);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, byteArray0.length);
      assertEquals(0, int0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertSame(byteArray1, byteArray2);
      assertSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      long long0 = bigInteger0.longValue();
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(0L, long0);
      
      String string0 = bigInteger0.toString();
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals("0", string0);
      assertNotNull(string0);
      
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(0, byteArray3.length);
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertNotNull(byteArray3);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertArrayEquals(new byte[] {}, byteArray3);
      
      boolean boolean0 = Base64.isBase64(byteArray3);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(0, byteArray3.length);
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertTrue(boolean0);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertArrayEquals(new byte[] {}, byteArray3);
      
      byte[] byteArray4 = Base64.discardWhitespace(byteArray2);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray4.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertNotNull(byteArray4);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray3);
      assertSame(byteArray1, byteArray2);
      assertSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray2);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertArrayEquals(new byte[] {}, byteArray4);
      
      Base64 base64_1 = new Base64((-711), byteArray3);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_1.isUrlSafe());
      assertEquals(0, byteArray3.length);
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray4));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(base64_1.equals((Object)base64_0));
      assertNotNull(base64_1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {}, byteArray3);
      
      byte[] byteArray5 = base64_1.decode("0");
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_1.isUrlSafe());
      assertEquals(0, byteArray3.length);
      assertEquals(0, byteArray5.length);
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray4));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(base64_1.equals((Object)base64_0));
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray0));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertNotNull(byteArray5);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray5);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(base64_1, base64_0);
      assertNotSame(byteArray5, byteArray1);
      assertNotSame(byteArray5, byteArray4);
      assertNotSame(byteArray5, byteArray3);
      assertNotSame(byteArray5, byteArray0);
      assertNotSame(byteArray5, byteArray2);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertArrayEquals(new byte[] {}, byteArray5);
      
      String string1 = "+^";
      try { 
        base64_1.decode((Object) base64_0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = 65;
      Base64 base64_0 = new Base64(65);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray0 = new byte[0];
      int int1 = base64_0.readResults(byteArray0, 65, 65);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(0, byteArray0.length);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals(0, int1);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray0);
      
      byte[] byteArray1 = new byte[0];
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      //  // Unstable assertion: assertEquals(0, byteArray1.length);
      //  // Unstable assertion: assertEquals(0, byteArray2.length);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray2);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertNotNull(bigInteger0);
      
      long long0 = bigInteger0.longValue();
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals(0L, long0);
      
      String string0 = bigInteger0.toString();
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals("0", string0);
      //  // Unstable assertion: assertNotNull(string0);
      
      byte[] byteArray3 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertEquals(2, byteArray3.length);
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-1), (byte)92}, byteArray3);
      
      boolean boolean0 = Base64.isBase64(byteArray3);
      //  // Unstable assertion: assertEquals(2, byteArray3.length);
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-1), (byte)92}, byteArray3);
      
      BigInteger bigInteger1 = BigInteger.TEN;
      //  // Unstable assertion: assertEquals((short)10, bigInteger1.shortValue());
      //  // Unstable assertion: assertEquals((byte)10, bigInteger1.byteValue());
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger0));
      //  // Unstable assertion: assertNotNull(bigInteger1);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger0);
      
      Base64 base64_1 = new Base64(0, byteArray3);
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      //  // Unstable assertion: assertEquals(2, byteArray3.length);
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertNotNull(base64_1);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-1), (byte)92}, byteArray3);
      
      byte[] byteArray4 = base64_0.decode("]");
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(0, byteArray4.length);
      //  // Unstable assertion: assertFalse(base64_0.equals((Object)base64_1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertNotSame(base64_0, base64_1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray4);
      
      try { 
        base64_0.decode((Object) base64_1);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(0, byteArray0.length);
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)81;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)0;
      boolean boolean0 = Base64.isBase64((byte)0);
      assertFalse(boolean0);
      
      Base64 base64_0 = new Base64((byte)81, byteArray0, false);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-40);
      byteArray0[6] = (byte) (-18);
      byteArray0[7] = (byte)42;
      byteArray0[8] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true);
      assertEquals(9, byteArray0.length);
      assertEquals(12, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)12, (byte)22, (byte)0, (byte)0, (byte)0, (byte) (-40), (byte) (-18), (byte)42, (byte)0}, byteArray0);
      
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals("DBYAAADY7ioA", string0);
      assertNotNull(string0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)12, (byte)22, (byte)0, (byte)0, (byte)0, (byte) (-40), (byte) (-18), (byte)42, (byte)0}, byteArray0);
      
      Base64 base64_0 = new Base64(false);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (-147), (int) (byte)12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -147
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-85);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 2278);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.longValue();
      bigInteger0.toString(19);
      bigInteger0.toString();
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      Base64.isBase64(byteArray3);
      BigInteger bigInteger1 = BigInteger.TEN;
      byte[] byteArray4 = Base64.toIntegerBytes(bigInteger0);
      String string0 = base64_0.encodeToString(byteArray2);
      assertEquals("Y1hkQlFVRkJRVUZCUWY5Yw\uFFFD\\", string0);
      
      byte[] byteArray5 = Base64.encodeInteger(bigInteger1);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray5);
      assertEquals(4, byteArray5.length);
      
      String string1 = Base64.encodeBase64String(byteArray3);
      assertEquals("", string1);
      
      bigInteger0.abs();
      Base64.decodeBase64(byteArray0);
      byte[] byteArray6 = base64_0.decode(byteArray0);
      assertEquals(0, byteArray6.length);
      
      boolean boolean0 = base64_0.isUrlSafe();
      assertTrue(boolean0);
      
      byte[] byteArray7 = Base64.encodeBase64(byteArray4);
      assertSame(byteArray7, byteArray4);
      
      Base64.isBase64((byte) (-85));
      Base64.decodeInteger(byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Base64 base64_0 = new Base64(3628);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.longValue();
      bigInteger0.toString();
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      boolean boolean0 = Base64.isBase64(byteArray0);
      //  // Unstable assertion: assertFalse(boolean0);
      
      BigInteger bigInteger1 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger1);
      String string0 = base64_0.encodeToString(byteArray1);
      //  // Unstable assertion: assertEquals("Q2dBQUFBQUFBQT09\uFFFD\\", string0);
      
      String string1 = Base64.encodeBase64String(byteArray2);
      //  // Unstable assertion: assertEquals("", string1);
      
      BigInteger bigInteger2 = BigInteger.TEN;
      bigInteger2.abs();
      Base64.decodeBase64(byteArray2);
      byte[] byteArray3 = new byte[0];
      Base64.encodeBase64(byteArray3, false, true);
      base64_0.decode(byteArray1, 2340, (-591));
      //  // Unstable assertion: assertEquals(12, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Base64 base64_0 = new Base64(8);
      byte[] byteArray0 = null;
      base64_0.decode((byte[]) null);
      Object object0 = base64_0.decode((Object) "*9k)X0u'Ow");
      base64_0.decode(object0);
      base64_0.decode((byte[]) null, (int) (byte)0, 98);
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = base64_0.decode("Input array too big, the output array would be bigger (");
      byte[] byteArray1 = base64_0.decode(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-50), (byte)121, (byte)62, (byte) (-122), (byte)121, (byte)22}, byteArray1);
      assertEquals(6, byteArray1.length);
      assertEquals(32, byteArray0.length);
      
      byte[] byteArray2 = base64_0.decode("Parameter supplied to Base64 encode is not a byte[]");
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      byte[] byteArray4 = Base64.encodeBase64(byteArray3, false, true);
      assertEquals(56, byteArray4.length);
      
      base64_0.encode(byteArray3, (-1531), (int) (byte) (-96));
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)12;
      Base64 base64_0 = new Base64((byte)12, byteArray0, false);
      base64_0.decode("Input array too big, the output array would be bigger (");
      String string0 = "Parameter supplied to Base64 encode is not a byte[]";
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)12;
      byteArray1[1] = (byte)22;
      byteArray1[2] = (byte)12;
      byteArray1[3] = (byte)12;
      base64_0.decode(byteArray1);
      base64_0.decode("X*tGAG\u0006[^y9%)");
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.isBase64(byteArray1);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = base64_0.decode("Input array too big, the output array would be bigger (");
      byte[] byteArray1 = base64_0.decode(byteArray0);
      byte[] byteArray2 = base64_0.decode("Parameter supplied to Base64 encode is not a byte[]");
      String string0 = Base64.encodeBase64URLSafeString(byteArray1);
      //  // Unstable assertion: assertEquals("znk-hnkW", string0);
      
      boolean boolean0 = Base64.isBase64(byteArray2);
      Base64.isBase64(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, true, false);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)122, (byte)110, (byte)107, (byte)43, (byte)104, (byte)110, (byte)107, (byte)87, (byte) (-1), (byte)92}, byteArray3);
      //  // Unstable assertion: assertEquals(32, byteArray0.length);
      
      Base64.isArrayByteBase64(byteArray2);
      boolean boolean1 = Base64.isBase64("!rkSm>.Zc]");
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)0;
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("hgA", string0);
      
      boolean boolean0 = Base64.isBase64(byteArray0);
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      Base64.isArrayByteBase64(byteArray1);
      assertEquals(4, byteArray1.length);
      
      boolean boolean1 = Base64.isBase64("hgA");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-122);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-122);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte) (-122);
      byteArray1[7] = (byte) (-122);
      byteArray1[8] = (byte)0;
      Base64.encodeBase64(byteArray1);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray2 = base64_0.decode(byteArray1);
      Base64.encodeBase64String(byteArray2);
      Base64.isBase64((byte)81);
      base64_0.hasData();
      Base64.decodeBase64("");
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Base64 base64_0 = new Base64(957);
      Base64.encodeBase64((byte[]) null, false, false, 730);
      base64_0.decode("");
      String string0 = Base64.encodeBase64URLSafeString((byte[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-79);
      Base64 base64_0 = new Base64(1857, byteArray0);
      base64_0.decode(byteArray0, 134, (int) (byte)0);
      base64_0.encodeToString(byteArray0);
      int int0 = base64_0.readResults(byteArray0, (byte) (-79), (byte) (-79));
      //  // Unstable assertion: assertEquals((-1), int0);
      
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64("*OvUNr^*'+FxK");
      String string0 = Base64.encodeBase64String(byteArray2);
      //  // Unstable assertion: assertEquals("OvUNr+Fx", string0);
      
      base64_0.encode(byteArray2);
      Object object0 = base64_0.decode((Object) "{/o8L77DQ#vm");
      base64_0.encode(object0);
      base64_0.decode(object0);
      Base64.encodeBase64URLSafe(byteArray2);
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, true);
      //  // Unstable assertion: assertEquals(10, byteArray3.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)81, (byte)85, (byte)70, (byte)72, (byte)101, (byte)65, (byte)61, (byte)61, (byte) (-1), (byte)92}, byteArray3);
      
      base64_0.decode((byte[]) null, (int) (byte)1, (-127));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte) (-1);
      Base64 base64_0 = new Base64((byte) (-118));
      byte[] byteArray1 = base64_0.decode((String) null);
      assertNull(byteArray1);
      
      byte[] byteArray2 = Base64.encodeBase64Chunked((byte[]) null);
      assertNull(byteArray2);
      
      Base64.encodeBase64((byte[]) null, false, false);
      base64_0.decode((byte[]) null, 10, (int) (byte)0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = base64_0.decode("Input array too big, the output array would be bigger (");
      byte[] byteArray1 = base64_0.decode(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-50), (byte)121, (byte)62, (byte) (-122), (byte)121, (byte)22}, byteArray1);
      
      byte[] byteArray2 = base64_0.decode("Parameter supplied to Base64 encode is not a byte[]");
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      assertEquals(42, byteArray3.length);
      
      byte[] byteArray4 = new byte[5];
      byteArray4[0] = (byte)58;
      byteArray4[1] = (byte)0;
      byteArray4[2] = (byte) (-96);
      byteArray4[3] = (byte)117;
      base64_0.decode(byteArray2);
      boolean boolean0 = base64_0.isUrlSafe();
      assertTrue(boolean0);
      
      byte[] byteArray5 = Base64.encodeBase64(byteArray0);
      assertEquals(44, byteArray5.length);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Base64 base64_0 = new Base64(65);
      byte[] byteArray0 = new byte[0];
      int int0 = base64_0.readResults(byteArray0, 65, 65);
      assertEquals(0, int0);
      
      byte[] byteArray1 = new byte[0];
      Base64.encodeBase64(byteArray1, false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.longValue();
      bigInteger0.toString();
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      Base64.isBase64(byteArray2);
      BigInteger bigInteger1 = BigInteger.TEN;
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger1);
      base64_0.encodeToString(byteArray2);
      String string0 = Base64.encodeBase64String(byteArray3);
      assertEquals("Cg==", string0);
      
      bigInteger1.abs();
      byte[] byteArray4 = Base64.decodeBase64(byteArray1);
      byte[] byteArray5 = Base64.encodeBase64(byteArray1, true, true);
      base64_0.decode(byteArray5, (-2398), (-2398));
      assertSame(byteArray1, byteArray4);
      assertSame(byteArray5, byteArray4);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.and(bigInteger1);
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      bigInteger0.add(bigInteger2);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray1);
      assertEquals(4, byteArray1.length);
      
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte)104;
      byteArray0[6] = (byte)106;
      byte[] byteArray2 = base64_0.decode(byteArray0);
      int int0 = base64_0.avail();
      assertEquals(0, int0);
      
      Base64.isBase64((byte)8);
      Base64.encodeBase64(byteArray0, false, true);
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("q_X_AB5oag", string0);
      
      boolean boolean0 = Base64.isArrayByteBase64(byteArray2);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-122)}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)0;
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("hgA", string0);
      
      boolean boolean0 = Base64.isBase64(byteArray0);
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true);
      Base64.isArrayByteBase64(byteArray1);
      boolean boolean1 = Base64.isBase64("hgA");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, (-498));
      Base64.encodeBase64String(byteArray1);
      Base64 base64_0 = new Base64((-498), byteArray0, true);
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = base64_0.decode("");
      base64_0.encode(byteArray1);
      Base64.decodeInteger(byteArray0);
      base64_0.readResults(byteArray2, 0, (-498));
      byte[] byteArray3 = Base64.encodeBase64(byteArray1);
      byte[] byteArray4 = new byte[7];
      byteArray4[0] = (byte)81;
      byteArray4[1] = (byte)0;
      byteArray4[2] = (byte)0;
      byteArray4[3] = (byte)0;
      byteArray4[4] = (byte)0;
      byteArray4[5] = (byte)0;
      byteArray4[6] = (byte)0;
      base64_0.decode(byteArray4);
      Base64.encodeBase64String(byteArray3);
      Base64.isBase64((byte)0);
      base64_0.hasData();
      Base64.decodeBase64("");
      Base64.isBase64("");
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64((-772), (byte[]) null);
      Object object0 = new Object();
      base64_0.encode((byte[]) null);
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("uvnJ4Da[iV\u0004w");
      Base64.decodeBase64(byteArray0);
      int int0 = 1015;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(1015, byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD\uFFFD\uFFFD\uFFFD6\uFFFDW]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertTrue(boolean0);
      
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)1;
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      assertEquals(1, byteArray2.length);
      
      Base64 base64_0 = new Base64((-264));
      byte[] byteArray3 = new byte[3];
      byteArray3[0] = (byte)1;
      byteArray3[1] = (byte)1;
      byteArray3[2] = (byte)1;
      Base64.encodeBase64(byteArray3);
      byte[] byteArray4 = Base64.decodeBase64("]");
      byte[] byteArray5 = base64_0.decode(byteArray4);
      assertEquals(0, byteArray5.length);
      
      String string0 = base64_0.encodeToString(byteArray1);
      assertEquals("AQ==", string0);
      
      Base64.decodeBase64(byteArray0);
      byte[] byteArray6 = base64_0.encode(byteArray1);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray6);
      
      String string1 = Base64.encodeBase64String(byteArray1);
      assertEquals("AQ==", string1);
      
      base64_0.decode(byteArray0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte) (-42);
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)66;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      bigInteger0.shiftRight((byte)66);
      bigInteger0.doubleValue();
      byte[] byteArray1 = new byte[0];
      Base64.isArrayByteBase64(byteArray1);
      int int0 = base64_0.avail();
      assertEquals(0, int0);
      
      Base64.decodeInteger(byteArray0);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      assertArrayEquals(new byte[] {(byte)122, (byte)65, (byte)61, (byte)61}, byteArray2);
      
      Base64.isBase64((byte)0);
      byte[] byteArray3 = new byte[5];
      byteArray3[0] = (byte) (-123);
      byteArray3[1] = (byte)66;
      byteArray3[2] = (byte)122;
      byteArray3[3] = (byte) (-57);
      byteArray3[4] = (byte)31;
      base64_0.encodeToString(byteArray3);
      byte[] byteArray4 = base64_0.decode("hUJ6xx8=");
      assertEquals(5, byteArray4.length);
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("x4Uf1npCAAA", string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Base64 base64_0 = new Base64(65);
      byte[] byteArray0 = new byte[0];
      base64_0.readResults(byteArray0, 65, 65);
      Base64.encodeBase64(byteArray0, true, true, (-404));
      byte[] byteArray1 = new byte[0];
      Base64.encodeBase64(byteArray1, false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.longValue();
      bigInteger0.toString();
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      Base64.isBase64(byteArray2);
      BigInteger bigInteger1 = BigInteger.TEN;
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger1);
      base64_0.encodeToString(byteArray2);
      byte[] byteArray4 = Base64.encodeInteger(bigInteger1);
      String string0 = Base64.encodeBase64String(byteArray3);
      assertEquals("Cg==", string0);
      
      bigInteger1.abs();
      byte[] byteArray5 = Base64.decodeBase64(byteArray1);
      byte[] byteArray6 = base64_0.decode(byteArray4);
      assertEquals(1, byteArray6.length);
      assertArrayEquals(new byte[] {(byte)10}, byteArray6);
      
      base64_0.isUrlSafe();
      byte[] byteArray7 = Base64.encodeBase64(byteArray5);
      assertSame(byteArray1, byteArray7);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(true);
      bigInteger0.nextProbablePrime();
      base64_0.decode(byteArray1);
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      base64_0.encode(byteArray0);
      Base64.encodeBase64(byteArray2, true);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)48;
      byteArray0[0] = (byte)48;
      boolean boolean0 = false;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true);
      Base64 base64_0 = new Base64((byte)48);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (int) (byte)48, (int) (byte)48);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 48
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte)54;
      byteArray0[7] = (byte)14;
      base64_0.encode(byteArray0, (-553), (int) (byte) (-22));
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      Base64 base64_0 = new Base64((-2878), byteArray0);
      Base64.encodeBase64(byteArray0, true, true);
      base64_0.decode("");
      base64_0.decode("org.apache.commons.codec.EncoderException");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte) (-18);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)37;
      byteArray0[7] = (byte)46;
      byteArray0[8] = (byte)0;
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)46;
      byteArray1[1] = (byte)22;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-18);
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)46;
      Base64 base64_0 = new Base64(0, byteArray1);
      base64_0.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = (-5245);
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-5245), byteArray0);
      Base64.isBase64("");
      Base64.encodeBase64String(byteArray0);
      base64_0.decode("IC_[J_{ 8K");
      Base64.encodeBase64(byteArray0, true, false, 76);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true, 1568);
      Base64.encodeBase64(byteArray0, true, true, 1657);
      Base64.encodeBase64(byteArray1, true);
      Base64.isBase64("H$");
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)115;
      byteArray0[0] = (byte)115;
      byte byte1 = (byte) (-6);
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-118);
      boolean boolean0 = false;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(2943, byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [s\uFFFD\uFFFD\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, (-1));
      Base64 base64_0 = new Base64((-1), byteArray1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      base64_0.decode((Object) "");
      base64_0.encodeToString(byteArray1);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.byteValueExact();
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger1);
      Base64.encodeBase64Chunked(byteArray1);
      base64_0.decode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte) (-107);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)118;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-1);
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)0;
      base64_0.encode(byteArray0, (-1531), (-1531));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)0;
      Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = null;
      base64_0.encode((byte[]) null);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.shortValueExact();
      BigInteger bigInteger2 = bigInteger0.or(bigInteger1);
      BigInteger bigInteger3 = bigInteger0.andNot(bigInteger1);
      bigInteger0.intValue();
      BigInteger bigInteger4 = bigInteger0.andNot(bigInteger2);
      // Undeclared exception!
      try { 
        bigInteger4.remainder(bigInteger3);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger divide by zero
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      Base64 base64_0 = new Base64(0, byteArray0, true);
      byte[] byteArray1 = base64_0.decode("fz+;KTOhw,a#pG");
      base64_0.encodeToString(byteArray0);
      String string0 = base64_0.encodeToString(byteArray1);
      assertEquals("fz-KTOhwapE", string0);
      
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      assertNotSame(byteArray2, byteArray1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      base64_0.hasData();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte) (-5);
      byteArray0[4] = (byte)96;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)103;
      byteArray0[7] = (byte) (-45);
      byteArray0[8] = (byte)92;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte) (-28);
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte) (-86);
      byteArray2[3] = (byte) (-1);
      byteArray2[4] = (byte)1;
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false);
      Base64.encodeBase64(byteArray3);
      assertArrayEquals(new byte[] {(byte)53, (byte)65, (byte)67, (byte)113, (byte)47, (byte)119, (byte)69, (byte)61}, byteArray3);
      
      boolean boolean0 = Base64.isBase64((byte)1);
      assertFalse(boolean0);
      
      base64_0.decode(byteArray2, (int) (byte) (-28), (int) (byte)0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray4 = Base64.encodeInteger(bigInteger0);
      assertEquals(0, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)83, (byte)81, (byte)65, (byte)13, (byte)10}, byteArray1);
      
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte) (-75);
      byteArray2[2] = (byte) (-1);
      byteArray2[3] = (byte)37;
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)0;
      Base64.decodeInteger(byteArray2);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray2);
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(false);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.encodeInteger(bigInteger0);
      boolean boolean0 = Base64.isBase64("3a*s|^");
      assertFalse(boolean0);
      
      base64_0.decode(byteArray0, (-82), (int) (byte)0);
      String string0 = Base64.encodeBase64String(byteArray1);
      assertEquals("/wAAAA==", string0);
      
      Base64.decodeBase64((String) null);
      byte[] byteArray2 = base64_0.decode(byteArray0);
      assertEquals(0, byteArray2.length);
      
      int int0 = base64_0.readResults(byteArray0, 0, (-1));
      assertEquals((-1), int0);
      
      Base64.encodeBase64(byteArray0);
      Base64.discardWhitespace(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray3 = new byte[4];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte) (-1);
      byteArray3[2] = (byte)0;
      byteArray3[3] = (byte)0;
      BigInteger bigInteger1 = new BigInteger(byteArray3);
      byte[] byteArray4 = Base64.encodeInteger(bigInteger1);
      assertArrayEquals(new byte[] {(byte)47, (byte)119, (byte)65, (byte)65}, byteArray4);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Base64 base64_0 = new Base64(3628);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = base64_0.decode(byteArray0);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)9;
      Object object0 = base64_0.decode((Object) "*9k)X0u'Ow");
      base64_0.decode(object0);
      base64_0.decode(byteArray0, (-2081), 646);
      Base64.isArrayByteBase64(byteArray0);
      base64_0.decode((Object) "L?xE?F\u0002(Dh-");
      Base64.isArrayByteBase64(byteArray1);
      Object object1 = new Object();
      try { 
        base64_0.encode(object1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-21);
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)0;
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("UAH_6yAA", string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Base64 base64_0 = new Base64((-971));
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-34);
      byteArray0[0] = (byte) (-34);
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte2 = (byte)35;
      byteArray0[2] = (byte)35;
      byte byte3 = (byte) (-1);
      Base64.isBase64(":qvh}B{5F`PAmd#_NE");
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)85;
      byte byte4 = (byte) (-5);
      byteArray0[5] = (byte) (-5);
      try { 
        base64_0.encode((Object) "lineSeperator must not contain base64 characters: [");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte)11;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(1353, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0015m\u0001\uFFFD\u000B]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)111;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, true, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(62, byteArray0, true);
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray0);
      bigInteger0.xor(bigInteger1);
      bigInteger0.equals((Object) null);
      bigInteger0.longValue();
      try { 
        base64_0.encode((Object) "<rTm!R5H7V)ENnF:1>B");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }
}
