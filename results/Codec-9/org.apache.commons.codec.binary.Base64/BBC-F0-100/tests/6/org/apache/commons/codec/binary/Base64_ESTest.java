/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 14:23:50 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64 base64_0 = new Base64((byte)12);
      Base64 base64_1 = new Base64(3588);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)12;
      base64_1.encodeToString(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64("e,3+");
      Base64 base64_2 = new Base64(45, byteArray1);
      Base64.decodeBase64("qQ*+45\"Dg ");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)0;
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte) (-73);
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)3;
      byteArray2[6] = (byte)3;
      byteArray2[7] = (byte)0;
      Base64.encodeBase64URLSafe(byteArray2);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray3 = new byte[8];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte)0;
      byteArray3[2] = (byte)0;
      byteArray3[3] = (byte)0;
      byteArray3[4] = (byte)0;
      byteArray3[5] = (byte)0;
      byteArray3[6] = (byte) (-73);
      byteArray3[7] = (byte)0;
      Base64.encodeBase64(byteArray3, true, false);
      base64_0.encode(byteArray1, (int) (byte)0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64(1, byteArray0);
      base64_0.encode(byteArray0, 1, 1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      base64_0.encode(byteArray1, (-1651), (-1651));
      base64_0.readResults(byteArray1, 1, 1);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte) (-62);
      byteArray0[5] = (byte)99;
      byteArray0[6] = (byte) (-4);
      byteArray0[7] = (byte) (-52);
      byteArray0[8] = (byte)0;
      base64_0.decode(byteArray0, (int) (byte)0, (-3189));
      Base64.encodeBase64String(byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Base64.encodeBase64String((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64 base64_0 = new Base64(1, byteArray0, true);
      byte[] byteArray1 = base64_0.decode("]");
      Base64.encodeBase64String(byteArray1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)1;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)1;
      byteArray1[5] = (byte)1;
      byteArray1[6] = (byte)1;
      byteArray1[7] = (byte)0;
      Base64.encodeBase64(byteArray1, true);
      base64_0.decode(byteArray0, (int) (byte)0, 5);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)1;
      byteArray2[5] = (byte) (-67);
      BigInteger bigInteger0 = new BigInteger(byteArray2);
      Base64.encodeInteger(bigInteger0);
      base64_0.decode((String) null);
      base64_0.decode(byteArray0, (int) (byte)0, (int) (byte)1);
      Base64.decodeBase64((String) null);
      Base64.encodeBase64((byte[]) null, false, false);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)21;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      Base64.isBase64(byteArray1);
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)47;
      byteArray2[2] = (byte)21;
      byteArray2[3] = (byte)21;
      byte[] byteArray3 = Base64.decodeBase64(byteArray2);
      Base64.encodeBase64(byteArray3);
      byte[] byteArray4 = new byte[1];
      byteArray4[0] = (byte)47;
      Base64.encodeBase64URLSafe(byteArray4);
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64(byteArray2, false, false);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 58, 648);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 58
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Base64 base64_0 = new Base64((-1));
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-61);
      base64_0.decode(">dW5u_YUsHe-");
      Object object0 = base64_0.decode((Object) ">dW5u_YUsHe-");
      Object object1 = base64_0.encode(object0);
      base64_0.encode(object1);
      byteArray0[6] = (byte) (-1);
      Base64.decodeInteger(byteArray0);
      base64_0.decode(byteArray0, (int) (byte)37, 8188);
      byteArray0[7] = (byte)73;
      byteArray0[8] = (byte)0;
      base64_0.decode(byteArray0, 0, (-27));
      Base64.decodeBase64("");
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)0;
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte) (-12);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.encodeBase64(byteArray0, true);
      Base64.encodeBase64((byte[]) null, true);
      Base64.decodeBase64((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-61);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)101;
      byteArray1[1] = (byte)1;
      Base64.encodeBase64(byteArray0);
      Base64.decodeBase64((String) null);
      Base64.encodeBase64URLSafe((byte[]) null);
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger0);
      Base64.encodeInteger(bigInteger0);
      Base64.discardWhitespace(byteArray2);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      String string0 = ">dW5u_YUsHe-";
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0, (int) (byte) (-61), (int) (byte)0);
      base64_0.decode((String) null);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)1, (int) (byte)73);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Base64 base64_0 = new Base64((-1401), byteArray0);
      base64_0.encode(byteArray0, (int) (byte) (-17), (int) (byte) (-17));
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, (byte)0, (byte) (-41));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = new byte[0];
      Base64 base64_0 = new Base64((-1464), byteArray1);
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(10021, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(10021);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      Base64 base64_1 = new Base64(64);
      byte[] byteArray3 = base64_1.encode(byteArray2);
      byte[] byteArray4 = base64_0.decode(byteArray3);
      // Undeclared exception!
      Base64.encodeBase64URLSafe(byteArray4);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(10021, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      mockRandom0.ints((long) 64);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      Base64 base64_1 = new Base64();
      Base64.encodeBase64URLSafe(byteArray2);
      // Undeclared exception!
      Base64.encodeBase64(byteArray1, true, true);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(10021, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(10021);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      mockRandom0.doubles(0.0, (double) 64);
      Base64 base64_1 = new Base64(64);
      byte[] byteArray3 = base64_1.encode(byteArray2);
      base64_0.decode(byteArray3);
      // Undeclared exception!
      Base64.encodeBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(10021, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(10021);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      Base64 base64_1 = new Base64(64);
      Base64.decodeBase64("mnsR");
      bigInteger0.toString(76);
      base64_1.encode(byteArray2);
      // Undeclared exception!
      base64_0.encode(byteArray2, 64, 10021);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(10021, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      mockRandom0.ints((long) 64);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64(byteArray1, true);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      // Undeclared exception!
      base64_0.encode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte) (-1);
      byte byte0 = (byte)38;
      byteArray0[4] = (byte)38;
      byteArray0[5] = (byte)120;
      byteArray0[6] = (byte) (-127);
      byteArray0[7] = (byte) (-15);
      byteArray0[8] = (byte) (-1);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.encodeBase64(byteArray0, true, true);
      byte[] byteArray2 = new byte[0];
      Base64 base64_0 = new Base64((byte)26, byteArray2, false);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[3] = (byte)121;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-976), byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000\u0000\u0000y\u0000\u0000\u0000\u0000\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Base64.isBase64((byte) (-26));
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false, false);
      byte[] byteArray3 = new byte[6];
      byteArray3[0] = (byte)86;
      byteArray3[1] = (byte) (-26);
      byteArray3[2] = (byte) (-26);
      byteArray3[4] = (byte) (-26);
      byteArray3[5] = (byte) (-26);
      base64_0.encode(byteArray2);
      Base64.encodeBase64(byteArray2, false);
      Base64.decodeBase64("");
      base64_0.encode(byteArray3, 0, 1);
      byte[] byteArray4 = Base64.encodeBase64(byteArray3);
      base64_0.decode((Object) "");
      Base64.decodeInteger(byteArray4);
      Base64.decodeBase64("e,3+");
      base64_0.decode(byteArray2, 1, (int) (byte) (-26));
      Base64.decodeBase64("");
      base64_0.encode((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-82);
      Base64 base64_0 = new Base64(1595);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)118;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true);
      base64_0.encode(byteArray0, (int) (byte)0, (int) (byte) (-82));
      byte[] byteArray4 = Base64.encodeBase64(byteArray3);
      Base64.decodeBase64("e,3+");
      byte[] byteArray5 = Base64.encodeBase64URLSafe(byteArray3);
      Base64.discardWhitespace(byteArray2);
      byte[] byteArray6 = Base64.encodeBase64Chunked(byteArray3);
      base64_0.decode(byteArray4);
      Base64.isArrayByteBase64(byteArray6);
      Base64.encodeBase64(byteArray6, false);
      base64_0.encodeToString(byteArray5);
      Base64.encodeBase64(byteArray4, false);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64.encodeBase64(byteArray0, false, false, 936);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64(byteArray0, false, true, 0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Base64 base64_0 = new Base64(101);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte) (-12);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64("XPeBIm~00FI(o2");
      Base64.encodeBase64URLSafeString((byte[]) null);
      base64_0.decode("hv'-Jnv\"i$\"2ns");
      Base64.encodeBase64((byte[]) null, false, false, 0);
      Base64.encodeBase64Chunked((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Base64.isBase64((byte)0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false, false);
      byte[] byteArray3 = new byte[6];
      byteArray3[0] = (byte)86;
      byteArray3[1] = (byte)0;
      byteArray3[2] = (byte)0;
      byteArray3[3] = (byte)0;
      byteArray3[4] = (byte)0;
      byteArray3[5] = (byte)0;
      base64_0.encode(byteArray2);
      Base64.encodeBase64(byteArray2, false);
      base64_0.encode(byteArray3, 0, 1);
      Base64.encodeBase64(byteArray3);
      Base64.decodeBase64("e,3+");
      byte[] byteArray4 = Base64.encodeBase64URLSafe(byteArray2);
      byte[] byteArray5 = Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64Chunked(byteArray5);
      base64_0.decode(byteArray0);
      Base64.isArrayByteBase64(byteArray5);
      Base64.encodeBase64(byteArray2, false);
      base64_0.encodeToString(byteArray4);
      Base64.encodeBase64(byteArray3, false);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      Base64 base64_0 = new Base64((byte)73);
      base64_0.encode(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      base64_0.readResults(byteArray1, 8180, 8180);
      byte[] byteArray3 = new byte[8];
      byteArray3[0] = (byte)73;
      Base64.decodeInteger(byteArray2);
      byteArray3[1] = (byte) (-66);
      byteArray3[2] = (byte)73;
      byteArray3[3] = (byte)73;
      byteArray3[4] = (byte)86;
      byteArray3[5] = (byte)0;
      byteArray3[6] = (byte)0;
      byteArray3[7] = (byte)73;
      base64_0.encode(byteArray3, (int) (byte) (-66), 16);
      Base64.encodeBase64(byteArray2);
      Base64.decodeBase64("e,3+");
      Base64.isBase64((byte)0);
      Base64.isBase64((byte)61);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Base64.isBase64((byte) (-26));
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false, false);
      byte[] byteArray3 = new byte[6];
      byteArray3[0] = (byte)86;
      byteArray3[1] = (byte) (-26);
      byteArray3[2] = (byte) (-26);
      byteArray3[3] = (byte) (-26);
      byteArray3[4] = (byte) (-26);
      byteArray3[5] = (byte) (-26);
      base64_0.encode(byteArray2);
      Base64.encodeBase64(byteArray2, false);
      base64_0.encode(byteArray3, 0, 1);
      Base64.encodeBase64(byteArray3);
      Base64.decodeBase64("e,3+");
      base64_0.decode(byteArray2, 1, (int) (byte) (-26));
      Base64.decodeBase64("");
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      base64_0.encode(byteArray1, 0, 41);
      base64_0.decode(byteArray1, 41, (-1));
      Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      Random.setNextRandom(65);
      base64_0.encode(byteArray1);
      base64_0.decode(byteArray0, (-1), 0);
      base64_0.encode(byteArray1, (-1), 65);
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte) (-112);
      byteArray2[1] = (byte)1;
      byteArray2[2] = (byte) (-4);
      byteArray2[3] = (byte)33;
      byteArray2[4] = (byte)113;
      byteArray2[5] = (byte)82;
      byteArray2[6] = (byte) (-10);
      byteArray2[7] = (byte)11;
      Base64.isBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte) (-82);
      byteArray0[6] = (byte)123;
      byteArray0[7] = (byte) (-75);
      byteArray0[8] = (byte)109;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 1, (int) (byte)123);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Base64 base64_0 = new Base64((-1));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte)37;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      base64_0.decode(byteArray1, 0, (-1));
      base64_0.encode(byteArray1, 117, 0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.isBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-8);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)8;
      byteArray1[1] = (byte)8;
      byteArray1[2] = (byte) (-8);
      byteArray1[3] = (byte) (-8);
      byteArray1[4] = (byte) (-8);
      byteArray1[5] = (byte)8;
      byteArray1[6] = (byte) (-8);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      Base64 base64_0 = new Base64((byte)8);
      base64_0.encode(byteArray2, 1, (int) (byte)8);
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray0);
      Base64.toIntegerBytes(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      base64_0.encode(byteArray1, 4, 4);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      base64_0.decode(byteArray2, 4, 2234);
      Base64.isBase64((byte)98);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)21;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)31;
      Base64 base64_0 = new Base64((-1), byteArray1);
      base64_0.encodeToString(byteArray1);
      byte[] byteArray2 = base64_0.decode("??wS|]}");
      boolean boolean0 = true;
      Base64 base64_1 = new Base64(true);
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray2, (int) (byte)0, 3855);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      base64_0.encode(byteArray1, 4, 41);
      base64_0.encode(byteArray0, 1067, (-1487));
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      Base64.decodeInteger(byteArray2);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter su=plied to Base64 decode is notha byte[] or a String");
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      base64_0.encode(byteArray1, 4, 4);
      Base64.encodeBase64(byteArray0);
      base64_0.encode(byteArray0, (-1651), (-1651));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      mockRandom0.nextFloat();
      BigInteger bigInteger0 = new BigInteger(1431655765, mockRandom0);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)29;
      base64_0.encode(byteArray0);
      base64_0.encodeToString((byte[]) null);
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(5, byteArray0, true);
      Object object0 = base64_0.decode((Object) "'<6MHT!mHqgpvx");
      // Undeclared exception!
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)21;
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64.encodeBase64(byteArray0, false, false);
      Base64 base64_0 = new Base64(5, byteArray0);
      base64_0.decode(byteArray2);
      Base64.isBase64("#f3fPm+3E[;G>9M8Huh");
      base64_0.decode("");
      Base64.encodeBase64(byteArray0, false);
      Base64.discardWhitespace(byteArray1);
      Base64.isBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      Random.setNextRandom(76);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)32;
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64 base64_1 = new Base64();
      byte[] byteArray2 = base64_1.encode(byteArray1);
      Base64 base64_2 = new Base64(64);
      base64_1.encode(byteArray2, 76, 76);
      Base64.isBase64(byteArray1);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray2, true, false, 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (100) than the specified maxium size of 6
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Base64 base64_0 = new Base64((-1));
      base64_0.decode((byte[]) null);
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, (-1), 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.isBase64((byte)127);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64(byteArray1, true, true, 6);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0, (int) (byte) (-61), (int) (byte)0);
      Base64 base64_1 = new Base64(17);
      Base64 base64_2 = new Base64(2313, byteArray0);
      Object object0 = base64_2.decode((Object) ">dW5u_YUsHe-");
      base64_1.encode(byteArray0);
      base64_1.decode(object0);
      Object object1 = new Object();
      base64_2.decode(object0);
      boolean boolean0 = true;
      Base64 base64_3 = new Base64(true);
      // Undeclared exception!
      try { 
        base64_3.encode(byteArray0, 40, 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 40
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-52);
      Base64.decodeBase64(byteArray0);
      Base64.isBase64("");
      Base64 base64_0 = new Base64();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)4;
      Base64 base64_0 = new Base64((byte)4);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false);
      base64_0.encode(byteArray2, (int) (byte)0, 28);
      Base64.encodeBase64(byteArray1);
      Random.setNextRandom((byte)73);
      byte[] byteArray3 = new byte[2];
      byteArray3[0] = (byte)73;
      byteArray3[1] = (byte)4;
      base64_0.encode(byteArray3, (-1), 5);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.isBase64((byte)9);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64(1342, byteArray1, false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      base64_0.encode(byteArray1, 1, (-130));
      Base64.encodeInteger(bigInteger0);
      base64_0.decode((Object) "Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64.discardWhitespace(byteArray1);
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)9;
      byteArray2[1] = (byte)9;
      byteArray2[2] = (byte)76;
      byteArray2[3] = (byte)9;
      byteArray2[4] = (byte)9;
      byteArray2[5] = (byte)9;
      byteArray2[6] = (byte)9;
      byteArray2[7] = (byte)9;
      Base64.isBase64(byteArray2);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      base64_0.encode(byteArray1, 0, 41);
      base64_0.encode(byteArray0, 1067, (-1487));
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      base64_0.encode(byteArray0, (-2641), (-2533));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64 base64_0 = new Base64(992, byteArray0, true);
      base64_0.readResults(byteArray0, (byte)23, (-3229));
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      BigInteger bigInteger0 = new BigInteger(1431655765, mockRandom0);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64 base64_0 = new Base64(1, byteArray0, true);
      int int0 = base64_0.avail();
      assertTrue(base64_0.isUrlSafe());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[6];
      base64_0.encode(byteArray0, 0, 1);
      boolean boolean0 = base64_0.hasData();
      assertFalse(base64_0.isUrlSafe());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64 base64_0 = new Base64(1, byteArray0, true);
      boolean boolean0 = base64_0.hasData();
      assertFalse(boolean0);
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64 base64_0 = new Base64(992, byteArray0, true);
      boolean boolean0 = base64_0.isUrlSafe();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Base64 base64_0 = new Base64((-1401), byteArray0);
      boolean boolean0 = base64_0.isUrlSafe();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Base64 base64_0 = new Base64((-2218), (byte[]) null, true);
      base64_0.encode((byte[]) null, 4, (-1311));
      Base64.encodeBase64((byte[]) null);
      Random.setNextRandom(1);
      base64_0.decode((byte[]) null, (-1789), 0);
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, (-1410), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, 1431655765, 1431655765);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }
}
