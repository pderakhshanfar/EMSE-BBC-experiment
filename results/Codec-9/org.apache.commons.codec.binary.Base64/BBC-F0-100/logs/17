* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-100
* Going to generate test cases for class: org.apache.commons.codec.binary.Base64
* Starting Client-0
* Connecting to master process on port 7146
* Analyzing classpath: 
  - subjects/buggy-versions/Codec-9/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.codec.binary.Base64
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1539
* Using seed 2120917752
* Starting evolution
bbc usage percentage is: 100%
* Initial Number of Goals in DynaMOSA = 419 / 1539
Number of times BBC is called, activated, and useful for org.apache.commons.codec.binary.Base64.discardWhitespace([B)[B: I24 Branch 67 LOOKUPSWITCH L874 Case 9 - true: 186,0,0| Number of FF evals: 1135
Number of times BBC is called, activated, and useful for org.apache.commons.codec.binary.Base64.encode([BII)V: I30 Branch 16 IF_ICMPGE L445 - false: 4334,3528,519| Number of FF evals: 30453
Number of times BBC is called, activated, and useful for org.apache.commons.codec.binary.Base64.decode([BII)V: I180 Branch 44 IFNULL L562 - true: 15117,10680,1997| Number of FF evals: 30453
Number of times BBC is called, activated, and useful for org.apache.commons.codec.binary.Base64.resizeBuffer()V: I4 Branch 9 IFNONNULL L383 - true: 5000,0,0| Number of FF evals: 3387
Number of times BBC is called, activated, and useful for org.apache.commons.codec.binary.Base64.encode([BII)V: I224 Branch 24 IF_ICMPEQ L472 - true: 446,0,0| Number of FF evals: 3551
Number of times BBC is called, activated, and useful for org.apache.commons.codec.binary.Base64.decode([BII)V: I38 Branch 36 IF_ICMPGE L534 - false: 4649,3429,91| Number of FF evals: 30453
Number of times BBC is called, activated, and useful for org.apache.commons.codec.binary.Base64.readResults([BII)I: I36 Branch 11 IF_ICMPLT L411 - true: 35627,25335,11257| Number of FF evals: 30453
Number of times BBC is called, activated, and useful for org.apache.commons.codec.binary.Base64.getEncodeLength([BI[B)J: I73 Branch 83 IFNE L981 - true: 2862,0,0| Number of FF evals: 3127
Number of times BBC is called, activated, and useful for org.apache.commons.codec.binary.Base64.encodeInteger(Ljava/math/BigInteger;)[B: I3 Branch 84 IFNONNULL L1012 - false: 53,0,0| Number of FF evals: 519
Number of times BBC is called, activated, and useful for org.apache.commons.codec.binary.Base64.isBase64(B)Z: I4 Branch 49 IF_ICMPEQ L593 - true: 6,0,0| Number of FF evals: 551
Number of times BBC is called, activated, and useful for org.apache.commons.codec.binary.Base64.<init>(I[BZ)V: I7 Branch 1 IFNONNULL L333 - false: 144,0,0| Number of FF evals: 357
Number of times BBC is called, activated, and useful for org.apache.commons.codec.binary.Base64.discardWhitespace([B)[B: I24 Branch 68 LOOKUPSWITCH L874 Case 10 - true: 64,0,0| Number of FF evals: 631
Number of times BBC is called, activated, and useful for org.apache.commons.codec.binary.Base64.encode([BII)V: I215 Branch 23 IFLE L472 - true: 7,0,0| Number of FF evals: 1508
Number of times BBC is called, activated, and useful for org.apache.commons.codec.binary.Base64.decode([BII)V: I189 Branch 45 IF_ICMPGE L562 - false: 4626,3519,90| Number of FF evals: 30453
Number of times BBC is called, activated, and useful for org.apache.commons.codec.binary.Base64.encode([BII)V: I21 Branch 15 IFNULL L445 - true: 25,0,0| Number of FF evals: 2309
Number of times BBC is called, activated, and useful for org.apache.commons.codec.binary.Base64.hasData()Z: I4 Branch 7 IFNULL L369 - false: 33,0,0| Number of FF evals: 186
Number of times BBC is called, activated, and useful for org.apache.commons.codec.binary.Base64.decode(Ljava/lang/Object;)Ljava/lang/Object;: I4 Branch 58 IFEQ L733 - false: 5,0,0| Number of FF evals: 169
Number of times BBC is called, activated, and useful for org.apache.commons.codec.binary.Base64.isWhiteSpace(B)Z: I3 Branch 73 LOOKUPSWITCH L897 Case 10 - true: 19,0,0| Number of FF evals: 277
Number of times BBC is called, activated, and useful for org.apache.commons.codec.binary.Base64.discardWhitespace([B)[B: I24 Branch 69 LOOKUPSWITCH L874 Case 13 - true: 72,0,0| Number of FF evals: 518
Number of times BBC is called, activated, and useful for org.apache.commons.codec.binary.Base64.discardWhitespace([B)[B: I24 Branch 70 LOOKUPSWITCH L874 Case 32 - true: 232,0,0| Number of FF evals: 1797
Number of times BBC is called, activated, and useful for org.apache.commons.codec.binary.Base64.isWhiteSpace(B)Z: I3 Branch 72 LOOKUPSWITCH L897 Case 9 - true: 530,0,0| Number of FF evals: 3123
Number of times BBC is called, activated, and useful for org.apache.commons.codec.binary.Base64.getEncodeLength([BI[B)J: I50 Branch 82 IFNE L979 - false: 2023,0,0| Number of FF evals: 3127
Number of times BBC is called, activated, and useful for org.apache.commons.codec.binary.Base64.encode([BII)V: I272 Branch 27 IF_ICMPGE L478 - false: 260,0,0| Number of FF evals: 3387
Number of times BBC is called, activated, and useful for org.apache.commons.codec.binary.Base64.toIntegerBytes(Ljava/math/BigInteger;)[B: I56 Branch 87 IFNE L1039 - true: 3279,1014,299| Number of FF evals: 11042
Number of times BBC is called, activated, and useful for org.apache.commons.codec.binary.Base64.discardWhitespace([B)[B: I24 Branch 71 LOOKUPSWITCH L874 Default-Case - false: 88,0,0| Number of FF evals: 714
Number of times BBC is called, activated, and useful for org.apache.commons.codec.binary.Base64.isBase64(B)Z: I10 Branch 51 IF_ICMPGE L593 - true: 32,0,0| Number of FF evals: 349
Number of times BBC is called, activated, and useful for org.apache.commons.codec.binary.Base64.getEncodeLength([BI[B)J: I41 Branch 81 IFLE L978 - true: 30643,21755,1105| Number of FF evals: 30453
Number of times BBC is called, activated, and useful for org.apache.commons.codec.binary.Base64.encode([BII)V: I419 Branch 31 IF_ICMPGT L493 - false: 62,0,0| Number of FF evals: 3296
Number of times BBC is called, activated, and useful for org.apache.commons.codec.binary.Base64.isWhiteSpace(B)Z: I3 Branch 74 LOOKUPSWITCH L897 Case 13 - true: 169,0,0| Number of FF evals: 1127
Number of times BBC is called, activated, and useful for org.apache.commons.codec.binary.Base64.toIntegerBytes(Ljava/math/BigInteger;)[B: I36 Branch 86 IF_ICMPNE L1031 - true: 9398,2017,706| Number of FF evals: 11042
Number of times BBC is called, activated, and useful for org.apache.commons.codec.binary.Base64.encode(Ljava/lang/Object;)Ljava/lang/Object;: I4 Branch 77 IFNE L921 - true: 69,0,0| Number of FF evals: 315
* Search finished after 602s and 604 generations, 316343 statements, best individual has fitness: 85.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 100%
* Total number of goals: 216
* Number of covered goals: 215
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 96%
* Total number of goals: 193
* Number of covered goals: 185
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 28
* Number of covered goals: 28
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 97%
* Total number of goals: 787
* Number of covered goals: 762
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 90%
* Total number of goals: 80
* Number of covered goals: 72
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 35
* Number of covered goals: 35
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 35
* Number of covered goals: 35
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 89%
* Total number of goals: 193
* Number of covered goals: 172
* Generated 101 tests with total length 291
* Resulting test suite's coverage: 91% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 14:24:09.172 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.8365833333333333% of time used, but only 40/101 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 32%
* Compiling and checking tests
[MASTER] 14:24:15.726 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:15.771 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:15.836 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:15.874 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:15.912 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:15.947 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:15.981 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:16.032 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:16.068 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:16.097 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:16.143 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:16.176 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:16.207 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:16.357 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:16.407 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:16.441 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:16.470 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:16.498 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:16.532 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:16.567 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:16.615 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:16.639 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:16.700 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:16.729 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:16.767 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:16.801 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:16.844 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:16.872 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:16.904 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:16.956 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:16.960 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: array lengths differed, expected.length=4 actual.length=2; arrays first differed at element [2]; expected:<0> but was:<end of array>
[MASTER] 14:24:16.960 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[1];
byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 15);
byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)0, (byte)0}, byteArray2);
assertEquals(4, byteArray2.length);


[MASTER] 14:24:16.991 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:17.022 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:17.060 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:17.087 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:17.117 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:17.149 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:17.188 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:17.216 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:17.243 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:18.248 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:18.284 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:18.328 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:18.365 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:18.388 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:18.413 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:18.413 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [0]; expected:<0> but was:<13>
[MASTER] 14:24:18.414 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64 base64_0 = new Base64();
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertFalse(base64_0.isUrlSafe());
assertNotNull(base64_0);

byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
assertNotNull(byteArray0);
assertEquals(2, byteArray0.length);

byte[] byteArray1 = Base64.encodeBase64(byteArray0);
assertFalse(byteArray1.equals((Object)byteArray0));
assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)61}, byteArray1);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertNotNull(byteArray1);
assertEquals(2, byteArray0.length);
assertEquals(4, byteArray1.length);

base64_0.decode(byteArray1, 0, (int) (byte)4);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)61}, byteArray1);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertFalse(base64_0.isUrlSafe());
assertEquals(2, byteArray0.length);
assertEquals(4, byteArray1.length);


[MASTER] 14:24:18.449 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:18.478 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:18.506 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:18.535 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:18.536 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [0]; expected:<0> but was:<13>
[MASTER] 14:24:18.536 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64 base64_0 = new Base64();
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(base64_0.isUrlSafe());
assertNotNull(base64_0);

byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
assertNotNull(byteArray0);
assertEquals(2, byteArray0.length);

byte[] byteArray1 = Base64.encodeBase64(byteArray0);
assertFalse(byteArray1.equals((Object)byteArray0));
assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)61}, byteArray1);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertNotNull(byteArray1);
assertEquals(2, byteArray0.length);
assertEquals(4, byteArray1.length);

byteArray1[2] = (byte)5;
base64_0.decode(byteArray1, 1, (int) (byte)5);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)5, (byte)61}, byteArray1);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertFalse(base64_0.isUrlSafe());
assertEquals(2, byteArray0.length);
assertEquals(4, byteArray1.length);


[MASTER] 14:24:18.562 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:18.583 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:18.622 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:18.648 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:18.677 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:18.701 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:18.731 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:18.764 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:18.804 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:18.840 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:18.866 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:18.891 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:19.469 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:19.469 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<0> but was:<10>
[MASTER] 14:24:19.475 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BigInteger bigInteger0 = BigInteger.TEN;
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((byte)10, bigInteger0.byteValue());
assertNotNull(bigInteger0);

BigInteger bigInteger1 = bigInteger0.shiftRight((-4813));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger0);
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertNotNull(bigInteger1);

BigInteger bigInteger2 = bigInteger1.shiftRight((-4813));
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertFalse(bigInteger2.equals((Object)bigInteger1));
assertFalse(bigInteger2.equals((Object)bigInteger0));
assertNotSame(bigInteger0, bigInteger2);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger2);
assertNotSame(bigInteger1, bigInteger0);
assertNotSame(bigInteger2, bigInteger1);
assertNotSame(bigInteger2, bigInteger0);
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertEquals((byte)0, bigInteger2.byteValue());
assertEquals((short)0, bigInteger2.shortValue());
assertNotNull(bigInteger2);

BigInteger bigInteger3 = bigInteger2.shiftRight((-4813));
assertFalse(bigInteger0.equals((Object)bigInteger2));
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger1.equals((Object)bigInteger2));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertFalse(bigInteger2.equals((Object)bigInteger1));
assertFalse(bigInteger2.equals((Object)bigInteger0));
assertFalse(bigInteger3.equals((Object)bigInteger0));
assertFalse(bigInteger3.equals((Object)bigInteger2));
assertFalse(bigInteger3.equals((Object)bigInteger1));
assertNotSame(bigInteger0, bigInteger3);
assertNotSame(bigInteger0, bigInteger2);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger2);
assertNotSame(bigInteger1, bigInteger0);
assertNotSame(bigInteger1, bigInteger3);
assertNotSame(bigInteger2, bigInteger1);
assertNotSame(bigInteger2, bigInteger0);
assertNotSame(bigInteger2, bigInteger3);
assertNotSame(bigInteger3, bigInteger0);
assertNotSame(bigInteger3, bigInteger2);
assertNotSame(bigInteger3, bigInteger1);
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertEquals((byte)0, bigInteger2.byteValue());
assertEquals((short)0, bigInteger2.shortValue());
assertEquals((byte)0, bigInteger3.byteValue());
assertEquals((short)0, bigInteger3.shortValue());
assertNotNull(bigInteger3);

byte[] byteArray0 = Base64.encodeInteger(bigInteger3);
assertFalse(bigInteger0.equals((Object)bigInteger3));
assertFalse(bigInteger0.equals((Object)bigInteger2));
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger1.equals((Object)bigInteger2));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertFalse(bigInteger1.equals((Object)bigInteger3));
assertFalse(bigInteger2.equals((Object)bigInteger1));
assertFalse(bigInteger2.equals((Object)bigInteger0));
assertFalse(bigInteger2.equals((Object)bigInteger3));
assertFalse(bigInteger3.equals((Object)bigInteger0));
assertFalse(bigInteger3.equals((Object)bigInteger2));
assertFalse(bigInteger3.equals((Object)bigInteger1));
assertNotSame(bigInteger0, bigInteger3);
assertNotSame(bigInteger0, bigInteger2);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger2);
assertNotSame(bigInteger1, bigInteger0);
assertNotSame(bigInteger1, bigInteger3);
assertNotSame(bigInteger2, bigInteger1);
assertNotSame(bigInteger2, bigInteger0);
assertNotSame(bigInteger2, bigInteger3);
assertNotSame(bigInteger3, bigInteger0);
assertNotSame(bigInteger3, bigInteger2);
assertNotSame(bigInteger3, bigInteger1);
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertEquals((byte)0, bigInteger2.byteValue());
assertEquals((short)0, bigInteger2.shortValue());
assertEquals((byte)0, bigInteger3.byteValue());
assertEquals((short)0, bigInteger3.shortValue());
assertNotNull(byteArray0);
assertEquals(2408, byteArray0.length);

Base64 base64_0 = new Base64(4);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertFalse(base64_0.isUrlSafe());
assertNotNull(base64_0);

byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false);
assertFalse(bigInteger0.equals((Object)bigInteger3));
assertFalse(bigInteger0.equals((Object)bigInteger2));
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger1.equals((Object)bigInteger2));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertFalse(bigInteger1.equals((Object)bigInteger3));
assertFalse(bigInteger2.equals((Object)bigInteger1));
assertFalse(bigInteger2.equals((Object)bigInteger0));
assertFalse(bigInteger2.equals((Object)bigInteger3));
assertFalse(bigInteger3.equals((Object)bigInteger0));
assertFalse(bigInteger3.equals((Object)bigInteger2));
assertFalse(bigInteger3.equals((Object)bigInteger1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertNotSame(bigInteger0, bigInteger3);
assertNotSame(bigInteger0, bigInteger2);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger2);
assertNotSame(bigInteger1, bigInteger0);
assertNotSame(bigInteger1, bigInteger3);
assertNotSame(bigInteger2, bigInteger1);
assertNotSame(bigInteger2, bigInteger0);
assertNotSame(bigInteger2, bigInteger3);
assertNotSame(bigInteger3, bigInteger0);
assertNotSame(bigInteger3, bigInteger2);
assertNotSame(bigInteger3, bigInteger1);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertEquals((byte)0, bigInteger2.byteValue());
assertEquals((short)0, bigInteger2.shortValue());
assertEquals((byte)0, bigInteger3.byteValue());
assertEquals((short)0, bigInteger3.shortValue());
assertNotNull(byteArray1);
assertEquals(2408, byteArray0.length);
assertEquals(3298, byteArray1.length);

byte[] byteArray2 = base64_0.decode(byteArray0);
assertFalse(bigInteger0.equals((Object)bigInteger3));
assertFalse(bigInteger0.equals((Object)bigInteger2));
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger1.equals((Object)bigInteger2));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertFalse(bigInteger1.equals((Object)bigInteger3));
assertFalse(bigInteger2.equals((Object)bigInteger1));
assertFalse(bigInteger2.equals((Object)bigInteger0));
assertFalse(bigInteger2.equals((Object)bigInteger3));
assertFalse(bigInteger3.equals((Object)bigInteger0));
assertFalse(bigInteger3.equals((Object)bigInteger2));
assertFalse(bigInteger3.equals((Object)bigInteger1));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertNotSame(bigInteger0, bigInteger3);
assertNotSame(bigInteger0, bigInteger2);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger2);
assertNotSame(bigInteger1, bigInteger0);
assertNotSame(bigInteger1, bigInteger3);
assertNotSame(bigInteger2, bigInteger1);
assertNotSame(bigInteger2, bigInteger0);
assertNotSame(bigInteger2, bigInteger3);
assertNotSame(bigInteger3, bigInteger0);
assertNotSame(bigInteger3, bigInteger2);
assertNotSame(bigInteger3, bigInteger1);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray1);
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertEquals((byte)0, bigInteger2.byteValue());
assertEquals((short)0, bigInteger2.shortValue());
assertEquals((byte)0, bigInteger3.byteValue());
assertEquals((short)0, bigInteger3.shortValue());
assertFalse(base64_0.isUrlSafe());
assertNotNull(byteArray2);
assertEquals(2408, byteArray0.length);
assertEquals(1806, byteArray2.length);

byte[] byteArray3 = base64_0.encode(byteArray1);
assertFalse(bigInteger0.equals((Object)bigInteger3));
assertFalse(bigInteger0.equals((Object)bigInteger2));
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger1.equals((Object)bigInteger2));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertFalse(bigInteger1.equals((Object)bigInteger3));
assertFalse(bigInteger2.equals((Object)bigInteger1));
assertFalse(bigInteger2.equals((Object)bigInteger0));
assertFalse(bigInteger2.equals((Object)bigInteger3));
assertFalse(bigInteger3.equals((Object)bigInteger0));
assertFalse(bigInteger3.equals((Object)bigInteger2));
assertFalse(bigInteger3.equals((Object)bigInteger1));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray2));
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertNotSame(bigInteger0, bigInteger3);
assertNotSame(bigInteger0, bigInteger2);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger2);
assertNotSame(bigInteger1, bigInteger0);
assertNotSame(bigInteger1, bigInteger3);
assertNotSame(bigInteger2, bigInteger1);
assertNotSame(bigInteger2, bigInteger0);
assertNotSame(bigInteger2, bigInteger3);
assertNotSame(bigInteger3, bigInteger0);
assertNotSame(bigInteger3, bigInteger2);
assertNotSame(bigInteger3, bigInteger1);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray2);
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertEquals((byte)0, bigInteger2.byteValue());
assertEquals((short)0, bigInteger2.shortValue());
assertEquals((byte)0, bigInteger3.byteValue());
assertEquals((short)0, bigInteger3.shortValue());
assertFalse(base64_0.isUrlSafe());
assertNotNull(byteArray3);
assertEquals(2408, byteArray0.length);
assertEquals(3298, byteArray1.length);
assertEquals(6600, byteArray3.length);

BigInteger bigInteger4 = Base64.decodeInteger(byteArray3);
assertFalse(bigInteger0.equals((Object)bigInteger3));
assertFalse(bigInteger0.equals((Object)bigInteger2));
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger1.equals((Object)bigInteger2));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertFalse(bigInteger1.equals((Object)bigInteger3));
assertFalse(bigInteger2.equals((Object)bigInteger1));
assertFalse(bigInteger2.equals((Object)bigInteger0));
assertFalse(bigInteger2.equals((Object)bigInteger3));
assertFalse(bigInteger3.equals((Object)bigInteger0));
assertFalse(bigInteger3.equals((Object)bigInteger2));
assertFalse(bigInteger3.equals((Object)bigInteger1));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(bigInteger4.equals((Object)bigInteger1));
assertFalse(bigInteger4.equals((Object)bigInteger2));
assertFalse(bigInteger4.equals((Object)bigInteger3));
assertFalse(bigInteger4.equals((Object)bigInteger0));
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertNotSame(bigInteger0, bigInteger3);
assertNotSame(bigInteger0, bigInteger4);
assertNotSame(bigInteger0, bigInteger2);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger2);
assertNotSame(bigInteger1, bigInteger0);
assertNotSame(bigInteger1, bigInteger3);
assertNotSame(bigInteger1, bigInteger4);
assertNotSame(bigInteger2, bigInteger1);
assertNotSame(bigInteger2, bigInteger0);
assertNotSame(bigInteger2, bigInteger3);
assertNotSame(bigInteger2, bigInteger4);
assertNotSame(bigInteger3, bigInteger4);
assertNotSame(bigInteger3, bigInteger0);
assertNotSame(bigInteger3, bigInteger2);
assertNotSame(bigInteger3, bigInteger1);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray2);
assertNotSame(bigInteger4, bigInteger1);
assertNotSame(bigInteger4, bigInteger2);
assertNotSame(bigInteger4, bigInteger3);
assertNotSame(bigInteger4, bigInteger0);
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertEquals((byte)0, bigInteger2.byteValue());
assertEquals((short)0, bigInteger2.shortValue());
assertEquals((byte)0, bigInteger3.byteValue());
assertEquals((short)0, bigInteger3.shortValue());
assertFalse(base64_0.isUrlSafe());
assertEquals((byte)0, bigInteger4.byteValue());
assertEquals((short)0, bigInteger4.shortValue());
assertNotNull(bigInteger4);
assertEquals(2408, byteArray0.length);
assertEquals(3298, byteArray1.length);
assertEquals(6600, byteArray3.length);

Base64.decodeInteger(byteArray0);

[MASTER] 14:24:19.498 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:19.528 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:19.765 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:19.796 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:19.962 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:20.187 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:20.353 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:20.379 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:20.402 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:20.440 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:20.475 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:20.507 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:20.528 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:20.559 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:20.583 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:20.612 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:20.647 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:20.671 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:20.703 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:20.727 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:20.754 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:20.785 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:20.819 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:20.853 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:20.886 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:20.920 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:20.950 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:20.986 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:21.055 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:21.099 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:21.459 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:21.489 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:21.513 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:21.545 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:21.580 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:21.602 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:21.626 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:21.650 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:21.687 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:21.688 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [2]; expected:<0> but was:<13>
[MASTER] 14:24:21.688 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[1];
byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
assertFalse(byteArray1.equals((Object)byteArray0));
assertArrayEquals(new byte[] {(byte)0}, byteArray0);
assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)0, (byte)0}, byteArray1);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertNotNull(byteArray1);
assertEquals(1, byteArray0.length);
assertEquals(4, byteArray1.length);

byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false, 10);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertArrayEquals(new byte[] {(byte)0}, byteArray0);
assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)0, (byte)0}, byteArray1);
assertArrayEquals(new byte[] {(byte)81, (byte)85, (byte)69, (byte)65, (byte)65, (byte)65, (byte)61, (byte)61}, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray1);
assertNotNull(byteArray2);
assertEquals(1, byteArray0.length);
assertEquals(4, byteArray1.length);
assertEquals(8, byteArray2.length);


[MASTER] 14:24:24.296 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 14:24:27.043 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'Base64_ESTest' to results/Codec-9/org.apache.commons.codec.binary.Base64/BBC-F0-100/tests/17
* Done!

* Computation finished
