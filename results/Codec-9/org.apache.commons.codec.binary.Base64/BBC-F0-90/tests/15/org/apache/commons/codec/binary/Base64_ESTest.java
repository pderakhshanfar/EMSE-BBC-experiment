/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:07:09 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)124;
      byteArray0[4] = (byte)9;
      boolean boolean1 = Base64.isBase64(byteArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-61), (byte)0, (byte)124, (byte)0, (byte)9}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(boolean1);
      
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C
         // ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 2767;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      BigInteger bigInteger0 = new BigInteger(2767, 2767, mockRandom0);
      assertNotNull(bigInteger0);
      assertEquals((short)23999, bigInteger0.shortValue());
      assertEquals((byte) (-65), bigInteger0.byteValue());
      
      // Undeclared exception!
      try { 
        Base64.encodeInteger(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C
         // ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byteArray0[8] = (byte) (-75);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64();
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C
         // ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)43;
      byteArray0[8] = (byte) (-75);
      byteArray0[4] = (byte)0;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(true);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C
         // ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      //  // Unstable assertion: assertNotNull(bigInteger0);
      //  // Unstable assertion: assertEquals((byte)1, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)1, bigInteger0.shortValue());
      
      // Undeclared exception!
      try { 
        Base64.encodeInteger(bigInteger0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C
         // ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64();
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C
         // ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(false);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C
         // ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      Base64 base64_0 = new Base64(34, byteArray0, false);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(18, byteArray0.length);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      // Undeclared exception!
      try { 
        Base64.encodeBase64URLSafeString(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C
         // ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)26;
      byteArray0[8] = (byte) (-75);
      byteArray0[4] = (byte)26;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(true);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C
         // ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64();
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C
         // ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C
         // ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-16);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)32, (byte) (-16)}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-16)}, byteArray1);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals(1, byteArray1.length);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = new byte[4];
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = (byte) (-16);
      byteArray2[1] = (byte)32;
      byteArray2[2] = (byte) (-16);
      byteArray2[3] = (byte) (-16);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray2, true, true, 3495);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C
         // ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[7] = (byte)34;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte)0;
      BigInteger bigInteger0 = BigInteger.ONE;
      //  // Unstable assertion: assertNotNull(bigInteger0);
      //  // Unstable assertion: assertEquals((short)1, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)1, bigInteger0.byteValue());
      
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C
         // ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-103);
      byteArray0[5] = (byte) (-1);
      Base64 base64_0 = new Base64(0, byteArray0, true);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-75), (byte)123, (byte)23, (byte)0, (byte) (-103), (byte) (-1)}, byteArray0);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(6, byteArray0.length);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      
      base64_0.encode(byteArray0, 61, (int) (byte)0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-75), (byte)123, (byte)23, (byte)0, (byte) (-103), (byte) (-1)}, byteArray0);
      //  // Unstable assertion: assertEquals(6, byteArray0.length);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      
      byte[] byteArray1 = new byte[8];
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)23;
      byteArray1[1] = (byte)97;
      byteArray1[2] = (byte) (-75);
      byteArray1[3] = (byte)23;
      byteArray1[4] = (byte) (-75);
      byteArray1[5] = (byte) (-75);
      byteArray1[6] = (byte) (-75);
      // Undeclared exception!
      try { 
        Base64.encodeBase64URLSafeString(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C
         // ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte)0;
      Base64 base64_0 = new Base64((-3160), byteArray0, true);
      assertArrayEquals(new byte[] {(byte)34, (byte)34, (byte)26, (byte) (-75), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(base64_0);
      assertEquals(9, byteArray0.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertTrue(base64_0.isUrlSafe());
      
      base64_0.encode(byteArray0, (int) (byte)0, 1);
      assertArrayEquals(new byte[] {(byte)34, (byte)34, (byte)26, (byte) (-75), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertTrue(base64_0.isUrlSafe());
      
      base64_0.encode(byteArray0, (int) (byte) (-75), (-1));
      assertArrayEquals(new byte[] {(byte)34, (byte)34, (byte)26, (byte) (-75), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      //  // Unstable assertion: assertNotNull(bigInteger0);
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)10, bigInteger0.shortValue());
      
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(false);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C
         // ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      boolean boolean0 = true;
      byte byte0 = (byte)0;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      Base64 base64_0 = new Base64(4, byteArray0, false);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(base64_0);
      assertEquals(6, byteArray0.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, 2829);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byte byte0 = (byte)70;
      Base64 base64_0 = new Base64(4317, byteArray0, true);
      assertNotNull(base64_0);
      assertEquals(13, byteArray0.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertTrue(base64_0.isUrlSafe());
      
      int int0 = 1;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 1, 123);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64 base64_0 = new Base64(34, byteArray0, false);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      // Undeclared exception!
      try { 
        Base64.encodeBase64URLSafeString(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C
         // ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte) (-61);
      Base64 base64_0 = new Base64((byte)26, byteArray0);
      assertArrayEquals(new byte[] {(byte)34, (byte)34, (byte)26, (byte) (-61), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(base64_0);
      assertEquals(9, byteArray0.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      base64_0.encode(byteArray0, (int) (byte)26, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)34, (byte)34, (byte)26, (byte) (-61), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertArrayEquals(new byte[] {(byte)34, (byte)34, (byte)26, (byte) (-61), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray1 = base64_0.decode(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)34, (byte)34, (byte)26, (byte) (-61), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Object object0 = new Object();
      //  // Unstable assertion: assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        Base64.decodeBase64("");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C
         // ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(77);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C
         // ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte)0;
      Base64 base64_0 = new Base64((-3160), byteArray0, false);
      assertArrayEquals(new byte[] {(byte)0, (byte)34, (byte)26, (byte) (-75), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(base64_0);
      assertEquals(9, byteArray0.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, 2767);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte byte0 = (byte) (-1);
      byte byte1 = (byte)34;
      byte byte2 = (byte)102;
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray0);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals(0, byteArray0.length);
      //  // Unstable assertion: assertEquals("", string0);
      
      // Undeclared exception!
      try { 
        Base64.decodeInteger(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C
         // ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = null;
      boolean boolean0 = false;
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      BigInteger bigInteger1 = BigInteger.TEN;
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals((byte)10, bigInteger1.byteValue());
      assertNotSame(bigInteger1, bigInteger0);
      
      int int0 = bigInteger0.compareTo(bigInteger1);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((-1), int0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals((byte)10, bigInteger1.byteValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      
      String string0 = Base64.encodeBase64URLSafeString((byte[]) null);
      assertNull(string0);
      
      String string1 = Base64.encodeBase64String((byte[]) null);
      assertNull(string1);
      
      byte[] byteArray1 = Base64.encodeBase64((byte[]) null, false, true, 1664);
      assertNull(byteArray1);
      
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64 base64_0 = new Base64(101, byteArray0, false);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      base64_0.decode(byteArray0, (-3606), (-1432));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      MockRandom mockRandom0 = new MockRandom();
      //  // Unstable assertion: assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = new BigInteger(1880, (-1432), mockRandom0);
      //  // Unstable assertion: assertNotNull(bigInteger0);
      //  // Unstable assertion: assertEquals((byte)53, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)53, bigInteger0.shortValue());
      
      // Undeclared exception!
      try { 
        Base64.encodeInteger(bigInteger0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C
         // ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = (-1);
      byte[] byteArray0 = Base64.encodeBase64URLSafe((byte[]) null);
      //  // Unstable assertion: assertNull(byteArray0);
      
      int int1 = 1008;
      byte[] byteArray1 = Base64.encodeBase64((byte[]) null, true, true, 1008);
      //  // Unstable assertion: assertNull(byteArray1);
      
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64();
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C
         // ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte) (-102);
      // Undeclared exception!
      try { 
        Base64.encodeBase64URLSafeString(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C
         // ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = null;
      byte[] byteArray1 = Base64.encodeBase64((byte[]) null, false);
      //  // Unstable assertion: assertNull(byteArray1);
      
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(true);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C
         // ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)67, (byte)10}, byteArray0);
      //  // Unstable assertion: assertNotNull(byteArray0);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C
         // ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte)0;
      Base64 base64_0 = new Base64((-3160), byteArray0, false);
      assertArrayEquals(new byte[] {(byte)34, (byte)34, (byte)26, (byte) (-75), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(base64_0);
      assertEquals(9, byteArray0.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      base64_0.encode(byteArray0, (int) (byte)0, 1);
      assertArrayEquals(new byte[] {(byte)34, (byte)34, (byte)26, (byte) (-75), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      base64_0.encode(byteArray0, (int) (byte) (-75), (-1));
      assertArrayEquals(new byte[] {(byte)34, (byte)34, (byte)26, (byte) (-75), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray1);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertEquals(0, byteArray0.length);
      //  // Unstable assertion: assertEquals(0, byteArray1.length);
      //  // Unstable assertion: assertSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray2);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertEquals(0, byteArray0.length);
      //  // Unstable assertion: assertEquals(0, byteArray2.length);
      //  // Unstable assertion: assertSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertSame(byteArray2, byteArray1);
      
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-786));
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C
         // ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)4;
      // Undeclared exception!
      try { 
        Base64.encodeBase64URLSafe(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C
         // ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = (-1);
      byte[] byteArray0 = null;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64();
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C
         // ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64 base64_0 = new Base64(101, byteArray0, false);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(base64_0);
      assertEquals(5, byteArray0.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      base64_0.encode(byteArray0, 866, (-1840));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      base64_0.encode(byteArray0, 2105, 101);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte) (-11));
      //  // Unstable assertion: assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Base64.decodeBase64((byte[]) null);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C
         // ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)1;
      Base64 base64_0 = new Base64(0, byteArray0, false);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-63), (byte) (-73), (byte)0, (byte)92, (byte)1}, byteArray0);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      base64_0.encode(byteArray0, 3603, (int) (byte) (-73));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-63), (byte) (-73), (byte)0, (byte)92, (byte)1}, byteArray0);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C
         // ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(string0);
      assertEquals(0, byteArray0.length);
      assertEquals("", string0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      String string1 = Base64.encodeBase64String(byteArray0);
      assertTrue(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(string1);
      assertEquals(0, byteArray0.length);
      assertEquals("", string1);
      assertSame(byteArray0, byteArray1);
      
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(241, byteArray0, true);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(base64_0);
      assertEquals(0, byteArray0.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertTrue(base64_0.isUrlSafe());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray2.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      base64_0.decode(byteArray0, 241, 0);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertTrue(base64_0.isUrlSafe());
      assertSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertNotNull(byteArray3);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray3.length);
      assertSame(byteArray0, byteArray3);
      assertSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertSame(byteArray3, byteArray0);
      assertSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      
      int int0 = base64_0.readResults(byteArray0, 0, 241);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, int0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertTrue(base64_0.isUrlSafe());
      assertSame(byteArray0, byteArray3);
      assertSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-3049));
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C
         // ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte) (-94);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C
         // ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Base64.decodeInteger(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C
         // ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(67);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C
         // ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64URLSafe((byte[]) null);
      byte byte0 = (byte)0;
      Base64.isBase64((byte)0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(84, (byte[]) null, false);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C
         // ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-1979));
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C
         // ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte)0;
      // Undeclared exception!
      try { 
        Base64.decodeBase64(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C
         // ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(true);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C
         // ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C
         // ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)37;
      byte byte0 = (byte) (-37);
      byteArray0[1] = (byte) (-37);
      byte byte1 = (byte)81;
      byteArray0[2] = (byte)81;
      byte byte2 = (byte) (-67);
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte)4;
      byte byte3 = (byte)1;
      byteArray0[5] = (byte)1;
      // Undeclared exception!
      try { 
        Base64.encodeBase64String(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C
         // ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      Base64 base64_0 = new Base64((-1692), byteArray0);
      Base64 base64_1 = new Base64((byte)60, byteArray0);
      try { 
        base64_1.encode((Object) base64_0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-1760), (byte[]) null, false);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C
         // ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Base64.isBase64((byte)0);
      // Undeclared exception!
      try { 
        Base64.decodeBase64((byte[]) null);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C
         // ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-95);
      Base64 base64_0 = new Base64(1932, byteArray0);
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("oQ==\uFFFD", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte)68;
      // Undeclared exception!
      try { 
        Base64.encodeBase64Chunked(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C
         // ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-78);
      byteArray0[6] = (byte) (-105);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, (int) (byte) (-87));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of -87
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      // Undeclared exception!
      try { 
        Base64.encodeBase64String(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C
         // ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)34;
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)26;
      byte byte1 = (byte) (-75);
      byteArray0[3] = (byte) (-75);
      byte byte2 = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byte byte3 = (byte)12;
      byteArray0[6] = (byte)12;
      byte byte4 = (byte) (-75);
      byteArray0[7] = (byte) (-75);
      byte byte5 = (byte)47;
      byteArray0[8] = (byte)47;
      // Undeclared exception!
      try { 
        Base64.encodeBase64Chunked(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C
         // ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-101);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C
         // ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = (-3322);
      byte[] byteArray0 = null;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-3322), (byte[]) null);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C
         // ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      // Undeclared exception!
      try { 
        Base64.decodeBase64(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [C
         // ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }
}
