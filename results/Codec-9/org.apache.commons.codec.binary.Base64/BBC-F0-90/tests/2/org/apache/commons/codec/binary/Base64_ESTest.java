/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:02:28 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      BigInteger bigInteger0 = new BigInteger(7825, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.divideAndRemainder(bigInteger1);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      BigInteger bigInteger2 = BigInteger.ONE;
      bigInteger2.bitLength();
      bigInteger0.divideAndRemainder(bigInteger2);
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray3);
      Base64.decodeInteger(byteArray4);
      Base64.decodeInteger(byteArray0);
      Base64.decodeInteger(byteArray3);
      Base64 base64_0 = new Base64((-982));
      // Undeclared exception!
      base64_0.decode(byteArray3);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      BigInteger bigInteger0 = new BigInteger(7852, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray3, 0, 153);
      base64_0.readResults(byteArray2, 100, 53);
      Base64.decodeInteger(byteArray2);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(7825, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray3);
      Base64.decodeInteger(byteArray4);
      Base64.decodeInteger(byteArray3);
      // Undeclared exception!
      Base64.decodeInteger(byteArray4);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      BigInteger bigInteger0 = new BigInteger(7825, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      Base64.encodeInteger(bigInteger0);
      // Undeclared exception!
      Base64.encodeBase64(byteArray3, true, true, 7825);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      BigInteger bigInteger0 = new BigInteger(7825, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64URLSafe(byteArray3);
      // Undeclared exception!
      base64_0.encode(byteArray3, 2, 7825);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      BigInteger bigInteger0 = new BigInteger(7818, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      Base64.encodeBase64Chunked(byteArray3);
      Base64 base64_0 = new Base64(true);
      // Undeclared exception!
      Base64.encodeBase64(byteArray2, false, false);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      int int0 = Base64.PEM_CHUNK_SIZE;
      BigInteger bigInteger0 = new BigInteger(7818, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      Base64.encodeBase64Chunked(byteArray2);
      // Undeclared exception!
      Base64.encodeBase64Chunked(byteArray3);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(62L);
      int int0 = Base64.PEM_CHUNK_SIZE;
      BigInteger bigInteger0 = new BigInteger(7818, mockRandom0);
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      Base64.encodeBase64(byteArray3);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(24L);
      mockRandom0.nextInt();
      BigInteger bigInteger0 = new BigInteger(7772, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      bigInteger0.doubleValue();
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64(byteArray2, false, false);
      Base64.encodeBase64(byteArray1, true);
      // Undeclared exception!
      base64_0.encode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(1982292598, mockRandom0);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      MockRandom mockRandom0 = new MockRandom((-2502L));
      mockRandom0.ints();
      int int0 = 7772;
      BigInteger bigInteger0 = new BigInteger(7772, mockRandom0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      bigInteger0.doubleValue();
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64Chunked(byteArray2);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(7772, byteArray1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [AQAAAAIAAAADAAAABAAAAAUAAAAGAAAABwAAAAgAAAAJAAAACgAAAAsAAAAMAAAADQAAAA4AAAAPAAAAEAAAABEAAAASAAAAEwAAABQAAAAVAAAAFgAAABcAAAAYAAAAGQAAABoAAAAbAAAAHAAAAB0AAAAeAAAAHwAAACAAAAAhAAAAIgAAACMAAAAkAAAAJQAAACYAAAAnAAAAKAAAACkAAAAqAAAAKwAAACwAAAAtAAAALgAAAC8AAAAwAAAAMQAAADIAAAAzAAAANAAAADUAAAA2AAAANwAAADgAAAA5AAAAOgAAADsAAAA8AAAAPQAAAD4AAAA/AAAAQAAAAEEAAABCAAAAQwAAAEQAAABFAAAARgAAAEcAAABIAAAASQAAAEoAAABLAAAATAAAAE0AAABOAAAATwAAAFAAAABRAAAAUgAAAFMAAABUAAAAVQAAAFYAAABXAAAAWAAAAFkAAABaAAAAWwAAAFwAAABdAAAAXgAAAF8AAABgAAAAYQAAAGIAAABjAAAAZAAAAGUAAABmAAAAZwAAAGgAAABpAAAAagAAAGsAAABsAAAAbQAAAG4AAABvAAAAcAAAAHEAAAByAAAAcwAAAHQAAAB1AAAAdgAAAHcAAAB4AAAAeQAAAHoAAAB7AAAAfAAAAH0AAAB+AAAAfwAAAIAAAACBAAAAggAAAIMAAACEAAAAhQAAAIYAAACHAAAAiAAAAIkAAACKAAAAiwAAAIwAAACNAAAAjgAAAI8AAACQAAAAkQAAAJIAAACTAAAAlAAAAJUAAACWAAAAlwAAAJgAAACZAAAAmgAAAJsAAACcAAAAnQAAAJ4AAACfAAAAoAAAAKEAAACiAAAAowAAAKQAAAClAAAApgAAAKcAAACoAAAAqQAAAKoAAACrAAAArAAAAK0AAACuAAAArwAAALAAAACxAAAAsgAAALMAAAC0AAAAtQAAALYAAAC3AAAAuAAAALkAAAC6AAAAuwAAALwAAAC9AAAAvgAAAL8AAADAAAAAwQAAAMIAAADDAAAAxAAAAMUAAADGAAAAxwAAAMgAAADJAAAAygAAAMsAAADMAAAAzQAAAM4AAADPAAAA0AAAANEAAADSAAAA0wAAANQAAADVAAAA1gAAANcAAADYAAAA2QAAANoAAADbAAAA3AAAAN0AAADeAAAA3wAAAOAAAADhAAAA4gAAAOMAAADkAAAA5QAAAOYAAADnAAAA6AAAAOkAAADqAAAA6wAAAOwAAADtAAAA7gAAAO8AAADwAAAA8QAAAPIAAAA=]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[30];
      Base64 base64_0 = new Base64(40);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeBase64Chunked(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 0, 2021161080);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 30
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.decode((Object) "");
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true, 76);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2);
      Base64.encodeBase64(byteArray0, true, false, 76);
      byte[] byteArray4 = Base64.encodeBase64(byteArray3, true);
      byte[] byteArray5 = base64_0.encode(byteArray4);
      base64_0.encode(byteArray5);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray4, true, true, 76);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (92) than the specified maxium size of 76
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)0;
      byteArray0[5] = (byte)61;
      byteArray0[6] = (byte)61;
      byteArray0[7] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.setBit((byte)61);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      base64_0.decode((Object) "");
      base64_0.decode(byteArray1, (int) (byte)0, (int) (byte)88);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-1835), byteArray0, false);
      Base64 base64_1 = new Base64(73);
      Object object0 = base64_1.decode((Object) "UTF-16LE");
      // Undeclared exception!
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64URLSafeString((byte[]) null);
      base64_0.encode((byte[]) null, (-5027), (-5027));
      base64_0.decode((byte[]) null, (-5027), (-5027));
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, (-28), (-5027));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte)0;
      Base64.encodeBase64Chunked(byteArray0);
      byteArray0[5] = (byte)61;
      byteArray0[6] = (byte)61;
      byteArray0[7] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Object object0 = base64_0.decode((Object) "");
      base64_0.encode(object0);
      base64_0.decode(byteArray1, (int) (byte)0, (int) (byte)88);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Base64 base64_0 = new Base64(14);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.decode((Object) "");
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true, 4087);
      Base64.encodeBase64(byteArray2);
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, true);
      Base64.encodeBase64(byteArray1, true, false);
      base64_0.encode(byteArray2);
      base64_0.encode(byteArray3);
      Base64.isArrayByteBase64(byteArray3);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)61;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Object object0 = base64_0.decode((Object) "");
      base64_0.encode(object0);
      base64_0.decode(byteArray1, (int) (byte)0, (int) (byte)88);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      base64_0.decode(byteArray1);
      base64_0.decode(byteArray0, 1, 18);
      Base64.isBase64((byte)61);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)61;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)97;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Object object0 = base64_0.decode((Object) "");
      base64_0.encode(object0);
      base64_0.decode(byteArray1, (int) (byte)0, 1017);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)88;
      byteArray0[0] = (byte)88;
      Base64.decodeBase64(byteArray0);
      base64_0.readResults(byteArray0, (byte)88, (byte)88);
      byte byte1 = (byte)123;
      Base64.isBase64((byte)123);
      Base64 base64_1 = null;
      try {
        base64_1 = new Base64((-1258), byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [X]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)97;
      byteArray1[1] = (byte)97;
      byteArray1[2] = (byte)97;
      byteArray1[3] = (byte)97;
      Base64.encodeBase64URLSafe(byteArray0);
      byteArray1[4] = (byte)97;
      byteArray1[5] = (byte)97;
      byteArray1[6] = (byte)97;
      byteArray1[7] = (byte)97;
      byteArray1[8] = (byte)97;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, 1, 54);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      Base64.isArrayByteBase64(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, 2102);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64(295, byteArray0, true);
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)89;
      byteArray1[1] = (byte)103;
      byteArray1[2] = (byte)9;
      byteArray1[3] = (byte)22;
      byteArray1[4] = (byte)73;
      byteArray1[5] = (byte) (-8);
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte) (-27);
      Base64.encodeBase64Chunked(byteArray1);
      Base64.isArrayByteBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Base64 base64_0 = new Base64(282, (byte[]) null);
      Base64.decodeBase64((byte[]) null);
      base64_0.decode((byte[]) null, 282, (-875));
      Base64.isBase64((byte)42);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)32;
      byte byte0 = (byte)52;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte) (-68);
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)56;
      byteArray0[6] = (byte)37;
      byteArray0[7] = (byte)37;
      byteArray0[8] = (byte)117;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64(37, byteArray1);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 0, (int) (byte)32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      base64_0.encode((byte[]) null, (-1178), (-1));
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64(byteArray0, false, false, 14);
      base64_0.encode(byteArray0, 60, (-33));
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      Base64 base64_0 = new Base64(15, byteArray0, true);
      base64_0.readResults(byteArray0, 15, 2969);
      base64_0.encode(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      Base64.discardWhitespace(byteArray1);
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Base64 base64_0 = new Base64(282, (byte[]) null);
      Base64.encodeBase64((byte[]) null, true, false);
      base64_0.decode((byte[]) null, 282, (-897));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)123;
      Base64.isBase64("S c8>GJ,");
      byteArray0[5] = (byte) (-7);
      Base64.discardWhitespace(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 0, 295);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte) (-7);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 0, 295);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 123, 2644);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[1] = (byte) (-19);
      Base64 base64_0 = new Base64();
      base64_0.readResults(byteArray0, 1380, (-1));
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.longValue();
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger1.multiply(bigInteger0);
      BigInteger bigInteger2 = BigInteger.TEN;
      bigInteger2.toString();
      Base64.encodeInteger(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(3255, mockRandom0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)96;
      byteArray0[5] = (byte) (-7);
      byteArray0[6] = (byte) (-8);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger0.compareTo(bigInteger1);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(false);
      BigInteger bigInteger2 = BigInteger.TEN;
      byte[] byteArray2 = Base64.encodeInteger(bigInteger2);
      base64_0.avail();
      Base64.discardWhitespace(byteArray1);
      Base64.isBase64(byteArray1);
      Base64.toIntegerBytes(bigInteger2);
      Base64.encodeBase64(byteArray2, false, true);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[3];
      Base64.isBase64("kA5|sf`WN?@[");
      byteArray0[0] = (byte) (-120);
      base64_0.encode(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)3;
      byteArray1[1] = (byte) (-120);
      base64_0.readResults(byteArray1, (byte)3, (-29));
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-34);
      base64_0.readResults(byteArray0, 106, 9);
      byte[] byteArray2 = base64_0.decode(byteArray0);
      base64_0.encode(byteArray2, 9, (-1));
      Base64.isBase64((byte)3);
      Object object0 = base64_0.decode((Object) "kA5|sf`WN?@[");
      base64_0.encode(byteArray2, (-901), (-2051));
      base64_0.decode(object0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeBase64(byteArray0, true);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 1, 18);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[5];
      base64_0.encode(byteArray0, 1, 1);
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, (-2109), 1793);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Base64.encodeBase64String((byte[]) null);
      Base64 base64_0 = new Base64();
      base64_0.encode((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)27;
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64.encodeBase64Chunked(byteArray1);
      Base64.isArrayByteBase64(byteArray0);
      Random.setNextRandom((byte)27);
      Base64 base64_0 = new Base64((byte)27, byteArray0);
      base64_0.avail();
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)27;
      byteArray2[1] = (byte)27;
      byteArray2[2] = (byte)27;
      byteArray2[3] = (byte)27;
      byteArray2[4] = (byte)27;
      byteArray2[5] = (byte)27;
      BigInteger bigInteger0 = new BigInteger(byteArray2);
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)91;
      byte byte1 = (byte) (-118);
      Base64.isBase64((byte)91);
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64String(byteArray0);
      base64_0.decode(byteArray0, (-2060), (int) (byte) (-118));
      Base64.encodeBase64Chunked((byte[]) null);
      Object object0 = base64_0.decode((Object) "%");
      base64_0.encode(object0);
      Base64.encodeBase64(byteArray0, false, true, 76);
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, 19, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-19);
      Base64 base64_0 = new Base64();
      base64_0.readResults(byteArray0, 1380, (-1));
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.decode((Object) "Sc=");
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, true, 561);
      byte[] byteArray3 = Base64.CHUNK_SEPARATOR;
      Base64.encodeBase64URLSafe(byteArray2);
      Base64.isArrayByteBase64(byteArray1);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Object object0 = base64_0.decode((Object) "org.apache.commons.codec.binary.StringUtils");
      base64_0.encode(object0);
      byte[] byteArray0 = new byte[0];
      base64_0.encodeToString(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = new byte[0];
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      base64_0.encode(byteArray1);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.shiftRight(64);
      bigInteger1.negate();
      BigInteger bigInteger2 = bigInteger0.nextProbablePrime();
      Base64.encodeInteger(bigInteger2);
      Base64.decodeBase64((String) null);
      Base64.encodeBase64String(byteArray1);
      Base64 base64_1 = new Base64(true);
      base64_1.decode(byteArray0);
      Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64Chunked(byteArray2);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[7];
      base64_0.decode((String) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeBase64(byteArray0, true);
      Base64.encodeBase64Chunked(byteArray0);
      base64_0.decode((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Base64 base64_0 = new Base64(1558);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-1);
      base64_0.readResults(byteArray0, (-167), 541);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      base64_0.decode((Object) "");
      byte[] byteArray3 = Base64.encodeBase64(byteArray2);
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray2);
      bigInteger1.modPow(bigInteger0, bigInteger0);
      base64_0.hasData();
      bigInteger1.clearBit((byte)99);
      Base64.encodeBase64(byteArray1);
      Base64.toIntegerBytes(bigInteger1);
      base64_0.decode(byteArray3);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[7];
      Base64 base64_0 = new Base64();
      base64_0.readResults(byteArray0, 1380, 1380);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.decode((Object) "");
      Base64.encodeBase64(byteArray0, true, true, 8192);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true, true, 4533);
      Base64.encodeBase64(byteArray1);
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray0);
      base64_0.hasData();
      Base64.encodeBase64((byte[]) null);
      Base64.decodeBase64((String) null);
      Base64.encodeBase64String(byteArray2);
      Base64.toIntegerBytes(bigInteger1);
      Base64.encodeBase64URLSafe((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-99);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byteArray0[5] = (byte) (-23);
      byteArray0[6] = (byte)14;
      byte[] byteArray2 = base64_0.decode("nwcY]N^c{{zh_ZF");
      Base64.encodeBase64String(byteArray2);
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Object object0 = base64_0.decode((Object) "org.apache.commons.codec.binary.StringUtils");
      base64_0.encode(object0);
      byte[] byteArray0 = new byte[0];
      base64_0.encodeToString(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = new byte[0];
      Base64.encodeBase64Chunked(byteArray1);
      base64_0.encode(byteArray1);
      base64_0.decode("org.apache.commons.codec.binary.StringUtils");
      base64_0.isUrlSafe();
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, true, 76);
      Base64.decodeInteger(byteArray2);
      Base64.encodeBase64String(byteArray0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-118);
      Base64.isBase64((byte)91);
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64String(byteArray0);
      Base64 base64_1 = new Base64(false);
      Object object0 = base64_0.decode((Object) "W4o=");
      base64_1.decode(object0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true, (int) (byte)91);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      Base64.decodeInteger(byteArray2);
      base64_0.hasData();
      Base64.encodeBase64(byteArray2);
      Base64.decodeBase64((String) null);
      Base64.encodeBase64String(byteArray0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)0;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64(byteArray0, false, false, 64);
      int int0 = (-3314);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 1, 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64String(byteArray0);
      Base64.isBase64("{qyZ1r? tw_n7D");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, (int) (byte)91);
      base64_0.decode("{qyZ1r? tw_n7D");
      base64_0.encode(byteArray0, (-3314), (int) (byte)7);
      Base64.isBase64((byte)91);
      base64_0.encode(byteArray1, 42, (-3314));
      base64_0.decode(byteArray0);
      base64_0.readResults(byteArray0, 2131693327, (byte)91);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[7];
      Base64 base64_0 = new Base64();
      try { 
        base64_0.decode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      base64_0.encode(byteArray0, 1, (-4357));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[7];
      Base64.encodeBase64(byteArray0, true);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64.isArrayByteBase64(byteArray1);
      base64_0.isUrlSafe();
      base64_0.decode("encodeInteger called with null parameter");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte) (-23);
      byteArray0[6] = (byte)14;
      base64_0.decode("nwcY]N^c{{zh_ZF");
      Base64.encodeBase64(byteArray0, true, true, 15);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Base64 base64_0 = new Base64((-1301));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)88;
      base64_0.readResults(byteArray0, (byte)53, (-797));
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte) (-39);
      byteArray0[5] = (byte)67;
      byteArray0[6] = (byte)39;
      Base64.isBase64((byte) (-108));
      byte[] byteArray1 = base64_0.decode(byteArray0);
      base64_0.readResults(byteArray1, 1181, (byte) (-108));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Base64.isBase64((byte) (-103));
      Base64 base64_0 = new Base64((-182));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte) (-103);
      byteArray0[5] = (byte) (-103);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.isBase64("H,2BM\"Rt|8I4E");
      byte[] byteArray1 = new byte[0];
      Base64.encodeBase64(byteArray1, false);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte) (-103);
      byteArray2[1] = (byte) (-103);
      byteArray2[2] = (byte) (-103);
      byteArray2[3] = (byte) (-103);
      byteArray2[4] = (byte) (-103);
      byteArray2[5] = (byte) (-103);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      byte[] byteArray4 = new byte[8];
      byteArray4[0] = (byte) (-103);
      byteArray4[1] = (byte) (-103);
      Base64.decodeBase64((String) null);
      Base64.encodeBase64String(byteArray1);
      Base64 base64_1 = new Base64(false);
      Base64 base64_2 = new Base64(false);
      base64_2.decode(byteArray3);
      Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64Chunked(byteArray1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      base64_0.readResults(byteArray0, 55, 81);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 4, 1792);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-19);
      Base64 base64_0 = new Base64();
      base64_0.readResults(byteArray0, 1380, (-1));
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.decode((Object) "Sc=");
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, true, 561);
      Base64.encodeBase64(byteArray2);
      Base64.decodeInteger(byteArray0);
      base64_0.hasData();
      Base64.encodeBase64(byteArray1);
      Base64.decodeBase64((String) null);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64 base64_0 = new Base64(0, (byte[]) null, true);
      Base64.isBase64((byte)1);
      base64_0.encode((byte[]) null);
      Base64 base64_1 = new Base64(1, (byte[]) null);
      Base64.encodeBase64URLSafeString((byte[]) null);
      base64_1.encodeToString((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte) (-98);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      bigInteger0.toString();
      bigInteger0.pow(0);
      bigInteger0.shiftRight((byte) (-5));
      bigInteger0.negate();
      bigInteger0.nextProbablePrime();
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(51, byteArray1);
      base64_0.isUrlSafe();
      base64_0.encode((byte[]) null, (-1), (int) (byte)0);
      Base64 base64_1 = new Base64((byte)99);
      base64_1.encode((byte[]) null);
      Base64.encodeBase64(byteArray0, false);
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger.valueOf((byte)99);
      Base64.toIntegerBytes(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[7];
      BigInteger bigInteger0 = BigInteger.TEN;
      MockRandom mockRandom0 = new MockRandom(872L);
      BigInteger.probablePrime(2184, mockRandom0);
      bigInteger0.flipBit(0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)73;
      Base64.encodeBase64(byteArray0);
      byteArray0[4] = (byte) (-4);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-113);
      base64_0.encodeToString(byteArray0);
      base64_0.decode(byteArray0, (int) (byte)1, (int) (byte)78);
      Base64.isBase64(byteArray1);
      base64_0.encode(byteArray1, 2184, 1032);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64 base64_0 = new Base64(0, (byte[]) null, true);
      Base64.isBase64((byte)1);
      base64_0.encode((byte[]) null);
      base64_0.readResults((byte[]) null, 0, 43);
      base64_0.encode((byte[]) null);
      base64_0.decode((Object) "Sc=");
      Base64.encodeBase64((byte[]) null, false, true, 64);
      Base64.encodeBase64((byte[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)1;
      Base64.decodeInteger(byteArray0);
      base64_0.hasData();
      Base64.encodeBase64((byte[]) null, false);
      base64_0.encodeToString((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte) (-98);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      bigInteger0.toString();
      bigInteger0.doubleValue();
      BigInteger bigInteger1 = bigInteger0.pow(0);
      bigInteger0.shiftRight((byte) (-5));
      bigInteger0.remainder(bigInteger1);
      bigInteger0.negate();
      bigInteger0.nextProbablePrime();
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.decodeBase64("DCowf&FJI4");
      Base64.encodeBase64String(byteArray1);
      Base64 base64_0 = new Base64(true);
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)91;
      byte byte0 = (byte) (-118);
      byteArray0[1] = (byte) (-118);
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64String(byteArray0);
      byte byte1 = (byte)7;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, (int) (byte) (-118));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of -118
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64 base64_0 = new Base64(0, (byte[]) null, true);
      Base64.isBase64((byte)1);
      base64_0.encode((byte[]) null);
      base64_0.readResults((byte[]) null, 0, 43);
      base64_0.encode((byte[]) null);
      base64_0.decode((Object) "Sc=");
      Base64.encodeBase64((byte[]) null, false, true, 64);
      Base64.encodeBase64((byte[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)1;
      Base64.decodeInteger(byteArray0);
      base64_0.hasData();
      Base64.encodeBase64((byte[]) null);
      Base64.decodeBase64("|FtO4Jj");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      base64_0.decode(byteArray0, (-2236), (-1021));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64Chunked(byteArray1);
      Base64.decodeBase64(byteArray1);
      Base64.isBase64((byte)0);
      Base64 base64_0 = new Base64();
      String string0 = "KKxbri]";
      byte[] byteArray2 = base64_0.decode("KKxbri]");
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray2, false, false, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-11);
      byteArray0[5] = (byte) (-74);
      byteArray0[6] = (byte) (-119);
      byteArray0[7] = (byte) (-38);
      byteArray0[8] = (byte)78;
      Base64.decodeBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Base64.isBase64("");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte)44;
      Base64 base64_0 = new Base64(187, byteArray0, true);
      base64_0.readResults(byteArray0, (byte)44, (byte)44);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Base64 base64_0 = new Base64((-1301));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)88;
      base64_0.readResults(byteArray0, (byte)53, (-797));
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte) (-39);
      byteArray0[5] = (byte)67;
      byteArray0[6] = (byte)39;
      byteArray0[7] = (byte)29;
      byteArray0[8] = (byte) (-12);
      base64_0.readResults(byteArray0, (byte)55, (byte)67);
      base64_0.encode(byteArray0, 0, 1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte) (-21);
      byteArray0[5] = (byte) (-16);
      byteArray0[6] = (byte)0;
      Base64.encodeBase64String(byteArray0);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, true, (int) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-116);
      byteArray0[4] = (byte)0;
      byte byte0 = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)73;
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      base64_0.encode(byteArray0);
      Base64.encodeBase64String(byteArray2);
      byte[] byteArray3 = Base64.decodeBase64("=:-qZk6E.jhYh}gw\"");
      Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64(byteArray3, true, false, (int) (byte)73);
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      Base64 base64_0 = new Base64(1824, byteArray0, true);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64String(byteArray0);
      base64_0.decode(byteArray0);
      Base64.decodeBase64("FgEBAA==");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64(byteArray0, true);
      Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)96;
      byteArray2[2] = (byte)0;
      Base64.encodeBase64(byteArray2);
      byte[] byteArray3 = Base64.encodeBase64(byteArray1);
      Base64.decodeBase64("");
      base64_0.encode(byteArray0);
      byte[] byteArray4 = Base64.encodeBase64(byteArray0);
      Base64.decodeBase64("^h4+yr0?bD");
      Base64.encodeBase64URLSafe(byteArray4);
      Base64.decodeInteger(byteArray3);
      Base64.encodeBase64Chunked((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte) (-33);
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-14);
      byteArray0[7] = (byte)64;
      byteArray0[8] = (byte)0;
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      Base64 base64_0 = new Base64((-1934), byteArray0, true);
      base64_0.decode(byteArray0);
      base64_0.decode(byteArray0);
      String string0 = ") than the specified maxium size of ";
      byte[] byteArray1 = Base64.decodeBase64(") than the specified maxium size of ");
      boolean boolean0 = true;
      int int0 = 6;
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      // Undeclared exception!
      try { 
        bigInteger0.pow((-1934));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Negative exponent
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte) (-98);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      bigInteger0.toString();
      bigInteger0.pow(0);
      bigInteger0.shiftRight((byte) (-5));
      bigInteger0.negate();
      bigInteger0.nextProbablePrime();
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.decodeBase64("DCowf&FJI4");
      Base64.encodeBase64String(byteArray1);
      Base64 base64_0 = new Base64(true);
      base64_0.decode(byteArray1);
      Base64.discardWhitespace(byteArray1);
      Base64.encodeBase64Chunked(byteArray1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false);
      int int0 = 2665;
      Base64 base64_0 = new Base64(2665, byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false, false);
      base64_0.decode(byteArray2);
      base64_0.decode((Object) "");
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 4433, 70);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4433
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte byte0 = (byte)51;
      Base64.isBase64((byte)51);
      Base64 base64_0 = new Base64((-1093));
      try { 
        base64_0.encode((Object) "qS`");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte) (-30);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-123);
      Base64.encodeBase64(byteArray0, false);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isArrayByteBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.intValue();
      bigInteger0.negate();
      bigInteger0.longValueExact();
      bigInteger0.intValue();
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(false);
      Base64.isBase64("org.apache.commons.codec.DecoderException");
      Base64.encodeBase64String(byteArray0);
      base64_0.decode("");
      Base64.decodeBase64("");
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)113;
      Base64.encodeBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.nextProbablePrime();
      bigInteger0.doubleValue();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = null;
      boolean boolean0 = true;
      int int0 = 501;
      Base64.encodeBase64((byte[]) null, true, true, 501);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.getLowestSetBit();
      BigInteger bigInteger1 = null;
      try {
        bigInteger1 = new BigInteger("vRVwGaisU/!dMGTZZE", 501);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Radix out of range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Base64.isBase64((byte) (-103));
      Base64 base64_0 = new Base64((-182));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte) (-103);
      byteArray0[5] = (byte) (-103);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.isBase64("H,2BM\"Rt|8I4E");
      byte[] byteArray1 = new byte[0];
      Base64.encodeBase64(byteArray1, false);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte) (-103);
      byteArray2[1] = (byte) (-103);
      byteArray2[2] = (byte) (-103);
      byteArray2[3] = (byte) (-103);
      byteArray2[4] = (byte) (-103);
      byteArray2[5] = (byte) (-103);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      byte[] byteArray4 = new byte[8];
      byteArray4[0] = (byte) (-103);
      byteArray4[1] = (byte) (-103);
      byteArray4[2] = (byte) (-103);
      byteArray4[3] = (byte) (-103);
      byteArray4[4] = (byte) (-103);
      byteArray4[5] = (byte) (-103);
      byteArray4[6] = (byte)51;
      byteArray4[7] = (byte)118;
      Base64.encodeBase64URLSafe(byteArray4);
      Base64.isBase64((byte)118);
      Base64.encodeBase64(byteArray3, true);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte) (-56);
      byteArray0[1] = (byte) (-56);
      byte byte2 = (byte)0;
      byteArray0[2] = (byte)0;
      byte byte3 = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-29);
      byteArray0[5] = (byte)65;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000\uFFFD\u0000\u0000\uFFFDA]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-23);
      byteArray0[6] = (byte) (-35);
      base64_0.encode(byteArray0, 0, (int) (byte) (-1));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)26;
      byteArray0[0] = (byte)26;
      byte byte1 = (byte)45;
      byteArray0[1] = (byte)45;
      byte byte2 = (byte)0;
      byteArray0[2] = (byte)0;
      byte byte3 = (byte) (-58);
      byteArray0[3] = (byte) (-58);
      byte byte4 = (byte)29;
      byteArray0[4] = (byte)29;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, (int) (byte)45);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(1, byteArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [Gi0Axh0\u0001
         // ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf(1569L);
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-80);
      Base64.encodeBase64Chunked(byteArray0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("N/7I^nywE.");
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(1187, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [7\uFFFD\u021F,\u0004]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte) (-49);
      byteArray0[5] = (byte) (-97);
      byteArray0[6] = (byte)0;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger0.xor(bigInteger1);
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)84;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-1697), byteArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [HwwAVA==\u0001
         // ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      base64_0.decode("org.apache.commons.codec.EncoderException");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Object object0 = base64_0.decode((Object) "");
      base64_0.encode(object0);
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = new byte[0];
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64.decodeBase64(byteArray2);
      byte[] byteArray3 = base64_0.decode("");
      base64_0.isUrlSafe();
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray4 = Base64.encodeBase64(byteArray1, false, true, 76);
      Base64.decodeInteger(byteArray4);
      Base64.decodeInteger(byteArray2);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray3, (-303), 40);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -303
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte) (-12);
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)108;
      byteArray0[8] = (byte) (-8);
      Base64.encodeBase64URLSafeString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte) (-54);
      byteArray0[5] = (byte) (-109);
      Base64.encodeBase64(byteArray0, true);
      base64_0.decode("HDz,K>b<'N7nvf4?");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[7];
      BigInteger bigInteger0 = BigInteger.TEN;
      MockRandom mockRandom0 = new MockRandom(872L);
      BigInteger.probablePrime(2184, mockRandom0);
      bigInteger0.flipBit(0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)73;
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      byteArray0[4] = (byte) (-4);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-113);
      String string0 = base64_0.encodeToString(byteArray0);
      //  // Unstable assertion: assertEquals("v04ASfwBjw\u0001\n", string0);
      
      base64_0.decode(byteArray0, (int) (byte)1, (int) (byte)78);
      Base64.isBase64((byte) (-98));
      base64_0.encode(byteArray2);
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, false, true);
      base64_0.encode(byteArray3, (int) (byte) (-65), (int) (byte) (-65));
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      Base64 base64_0 = new Base64(0, byteArray0);
      base64_0.decode(byteArray0, 0, 0);
      assertFalse(base64_0.isUrlSafe());
  }
}
