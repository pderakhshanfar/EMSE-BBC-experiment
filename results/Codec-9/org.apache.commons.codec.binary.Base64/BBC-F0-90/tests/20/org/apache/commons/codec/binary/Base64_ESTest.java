/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:07:25 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte)3;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(true);
      base64_0.decode(byteArray1, 1, (int) (byte)30);
      base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      base64_0.encode(byteArray2);
      Base64.encodeBase64String(byteArray1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.encode((byte[]) null, (-1452), (-1452));
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, 489, 489);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2872);
      BigInteger bigInteger0 = BigInteger.probablePrime(2872, mockRandom0);
      mockRandom0.nextInt();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      bigInteger0.flipBit(2872);
      Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(true);
      base64_0.decode(byteArray0, 76, 64);
      Base64.isBase64(byteArray0);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2872);
      BigInteger bigInteger0 = BigInteger.probablePrime(2872, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64String(byteArray0);
      Base64 base64_1 = new Base64();
      base64_1.decode(byteArray0, 76, 2837);
      byte[] byteArray2 = base64_1.encode(byteArray1);
      byte[] byteArray3 = base64_1.encode(byteArray2);
      Base64.encodeInteger(bigInteger0);
      base64_0.encode(byteArray1);
      base64_0.decode((Object) "Z0FBQUFBRUFBQUFDQUFBQUF3QUFBQVFBQUFBRkFBQUFCZ0FBQUFjQUFBQUlBQUFBQ1FBQUFBb0FBQUFMQUFBQURBQUFBQTBBQUFBT0FBQUFEd0FBQUJBQUFBQVJBQUFBRWdBQUFCTUFBQUFVQUFBQUZRQUFBQllBQUFBWEFBQUFHQUFBQUJrQUFBQWFBQUFBR3dBQUFCd0FBQUFkQUFBQUhnQUFBQjhBQUFBZ0FBQUFJUUFBQUNJQUFBQWpBQUFBSkFBQUFDVUFBQUFtQUFBQUp3QUFBQ2dBQUFBcEFBQUFLZ0FBQUNzQUFBQXNBQUFBTFFBQUFDNEFBQUF2QUFBQU1BQUFBREVBQUFBeUFBQUFNd0FBQURRQUFBQTFBQUFBTmdBQUFEY0FBQUE0QUFBQU9RQUFBRG9BQUFBN0FBQUFQQUFBQUQwQUFBQStBQUFBUHdBQUFFQUFBQUJCQUFBQVFnQUFBRU1BQUFCRUFBQUFSUUFBQUVZQUFBQkhBQUFBU0FBQUFFa0FBQUJLQUFBQVN3QUFBRXdBQUFCTkFBQUFUZ0FBQUU4QUFBQlFBQUFBVVFBQUFGSUFBQUJUQUFBQVZBQUFBRlVBQUFCV0FBQUFWd0FBQUZnQUFBQlpBRjA9");
      base64_0.decode(byteArray3);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)21;
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Base64 base64_0 = new Base64(8);
      byte[] byteArray0 = base64_0.decode("Parameter supplied to Base64 decode is not a byte[] or a String");
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      base64_0.encode(byteArray1);
      Base64 base64_1 = new Base64(41);
      base64_1.decode(byteArray1, 38, 981);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = BigInteger.probablePrime(1364, mockRandom0);
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte)32;
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray1 = new byte[0];
      base64_0.encode(byteArray1);
      Base64.isBase64((byte)61);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64.isBase64((byte)124);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)124;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 0, 519);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Base64.isBase64((byte)62);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte)62;
      byteArray0[7] = (byte)62;
      Base64 base64_0 = new Base64(10, byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 0, (int) (byte)62);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64(8210);
      byte[] byteArray1 = base64_0.decode("P#rmmeter supplied to Base64 decode is not a byte[] or a String");
      Base64 base64_1 = new Base64();
      Base64.decodeInteger(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_2 = new Base64();
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      Base64.encodeBase64URLSafe(byteArray3);
      Base64.decodeBase64(byteArray1);
      base64_0.decode(byteArray3, (-84), 64);
      base64_1.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(25, byteArray0, true);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-106);
      byteArray1[1] = (byte)74;
      byteArray1[2] = (byte)91;
      byteArray1[3] = (byte)75;
      byteArray1[4] = (byte) (-66);
      byteArray1[5] = (byte)21;
      byteArray1[6] = (byte)49;
      byteArray1[7] = (byte) (-1);
      byteArray1[8] = (byte)2;
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = base64_0.decode("Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64 base64_1 = new Base64();
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = new byte[5];
      Base64 base64_2 = new Base64(false);
      base64_2.encode(byteArray1, 64, (-100));
      Base64.isBase64(byteArray2);
      Base64 base64_3 = new Base64(64);
      base64_3.decode(byteArray2);
      Base64.encodeBase64(byteArray2, false, false, (int) (byte)10);
      Base64.decodeInteger(byteArray1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray3 = Base64.CHUNK_SEPARATOR;
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.floatValue();
      byte[] byteArray0 = new byte[1];
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = base64_0.decode("or.apache.commons.codec.binary.Base64");
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.discardWhitespace(byteArray1);
      Base64.decodeInteger(byteArray0);
      try { 
        base64_0.encode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = base64_0.decode("Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64 base64_1 = new Base64();
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)10;
      byteArray2[1] = (byte)80;
      byteArray2[2] = (byte) (-60);
      byteArray2[3] = (byte) (-93);
      byteArray2[4] = (byte) (-3);
      base64_0.encode(byteArray2, (int) (byte) (-3), 64);
      Base64.isBase64(byteArray1);
      base64_0.decode(byteArray1);
      Base64.encodeBase64((byte[]) null, false, false, 64);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      Base64.isBase64("YL3LGIu'#%FFWA?_9y");
      base64_0.encode((byte[]) null);
      byte[] byteArray3 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray4 = new byte[0];
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray4, 64, 2472);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 64
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Base64 base64_0 = new Base64(51);
      Base64 base64_1 = new Base64(64);
      Object object0 = base64_0.decode((Object) "");
      Object object1 = base64_0.decode(object0);
      base64_1.encode(object1);
      base64_0.encode(object1);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)10;
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray0, 1, 46);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 3081;
      Base64 base64_0 = new Base64(3081, (byte[]) null);
      Base64.encodeBase64((byte[]) null, true, true, 76);
      base64_0.decode((byte[]) null);
      int int1 = 0;
      base64_0.readResults((byte[]) null, 3081, 0);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        mockRandom0.nextBytes((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Base64 base64_0 = new Base64(7);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64 base64_1 = new Base64(false);
      Base64.encodeBase64String((byte[]) null);
      base64_1.decode("UTF-16BE");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte) (-25);
      base64_0.decode(byteArray0, 1, (int) (byte) (-25));
      Base64.decodeBase64("");
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Random.setNextRandom((-1));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64(false);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      base64_0.encode(byteArray0, (-23), (-23));
      Base64 base64_1 = new Base64((-23), byteArray0, false);
      byte[] byteArray2 = new byte[0];
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, true, 64);
      Base64.decodeInteger(byteArray3);
      BigInteger bigInteger1 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger1);
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray1, 76, 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.modPow(bigInteger1, bigInteger1);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64Chunked(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, (int) (byte)117, (int) (byte)3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Base64 base64_0 = new Base64(7);
      Base64 base64_1 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte)117;
      Base64 base64_2 = new Base64();
      Base64.encodeBase64Chunked(byteArray0);
      // Undeclared exception!
      try { 
        base64_2.encode(byteArray0, (int) (byte)1, 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Base64 base64_0 = new Base64(7);
      Base64 base64_1 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-128);
      byteArray0[7] = (byte) (-12);
      byteArray0[8] = (byte)1;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.not();
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      base64_0.encode(byteArray1, 1337, (-139));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = Base64.decodeBase64("");
      Base64 base64_0 = new Base64(511, byteArray1, true);
      base64_0.decode(byteArray0);
      byte[] byteArray2 = base64_0.decode("Sp");
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray2);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray3);
      assertEquals(2, byteArray3.length);
      assertArrayEquals(new byte[] {(byte)83, (byte)103}, byteArray3);
      assertEquals((short)74, bigInteger0.shortValue());
      
      byte[] byteArray4 = new byte[8];
      byteArray4[0] = (byte)91;
      byteArray4[1] = (byte)91;
      byteArray4[2] = (byte)91;
      byteArray4[3] = (byte)91;
      byteArray4[4] = (byte)91;
      byteArray4[5] = (byte) (-93);
      byteArray4[6] = (byte)91;
      byteArray4[7] = (byte)91;
      Base64.decodeBase64(byteArray4);
      base64_0.decode((String) null);
      Base64.isBase64("z{X,/");
      base64_0.encode(byteArray1);
      byte[] byteArray5 = Base64.CHUNK_SEPARATOR;
      assertNotSame(byteArray5, byteArray2);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Base64 base64_0 = new Base64(7);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_1 = new Base64();
      Base64.encodeBase64Chunked(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 0, 7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-1);
      String string0 = Base64.encodeBase64URLSafeString(byteArray1);
      assertEquals("__8", string0);
      
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)7;
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      assertEquals(0, byteArray2.length);
      
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)6;
      base64_0.decode(byteArray0, (int) (byte)7, (int) (byte)1);
      boolean boolean0 = base64_0.hasData();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.hasData();
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-22);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger1);
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray1);
      assertEquals(12, byteArray3.length);
      
      byte[] byteArray4 = Base64.discardWhitespace(byteArray0);
      assertEquals(6, byteArray4.length);
      assertArrayEquals(new byte[] {(byte)29, (byte) (-57), (byte)111, (byte)8, (byte) (-1), (byte) (-22)}, byteArray4);
      
      base64_0.decode("");
      byte[] byteArray5 = base64_0.encode(byteArray2);
      assertSame(byteArray2, byteArray5);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)45;
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      //  // Unstable assertion: assertEquals("AADAci0AAAAA", string0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 30);
      //  // Unstable assertion: assertEquals(14, byteArray1.length);
      
      boolean boolean0 = Base64.isBase64("AADAci0AAAAA");
      //  // Unstable assertion: assertTrue(boolean0);
      
      Base64 base64_0 = new Base64((byte)45);
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)45;
      byteArray2[1] = (byte)114;
      byteArray2[2] = (byte)45;
      base64_0.encode(byteArray2);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray3 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray4 = Base64.discardWhitespace(byteArray3);
      //  // Unstable assertion: assertEquals(1, byteArray4.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-94)}, byteArray4);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base64 base64_0 = new Base64(51);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.decodeInteger(byteArray1);
      byte[] byteArray3 = Base64.decodeBase64(byteArray2);
      Base64.decodeInteger(byteArray1);
      Base64 base64_1 = new Base64(64);
      Object object0 = base64_0.decode((Object) "");
      Object object1 = base64_0.decode(object0);
      base64_1.encode(object1);
      base64_0.encode(object1);
      base64_0.decode((Object) "9N<ykV?~N8}Tkn]");
      byte byte0 = (byte)62;
      Base64.isBase64((byte)62);
      base64_1.decode(byteArray3);
      try { 
        base64_1.encode((Object) "UTF-16");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Base64 base64_0 = new Base64(7);
      Base64.encodeBase64((byte[]) null);
      byte[] byteArray0 = base64_0.decode("g>&a[M>");
      assertArrayEquals(new byte[] {(byte) (-127), (byte) (-93)}, byteArray0);
      
      Base64 base64_1 = new Base64();
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = Base64.decodeBase64("*\"xOEk*/IAz7!F46q");
      assertArrayEquals(new byte[] {(byte) (-60), (byte) (-31), (byte)36, (byte) (-4), (byte) (-128), (byte)51, (byte) (-20), (byte)94, (byte)58}, byteArray1);
      
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)21;
      byteArray0[6] = (byte) (-83);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.decodeBase64(byteArray0);
      Base64.encodeBase64Chunked(byteArray1);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 0, 74);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Base64 base64_0 = new Base64(7);
      byte[] byteArray0 = Base64.decodeBase64("g>&a[M>");
      Base64.decodeBase64(byteArray0);
      Base64.isBase64("");
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)61;
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte)113;
      base64_0.encode(byteArray1);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      assertNotSame(byteArray2, byteArray0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte byte0 = (byte)0;
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      base64_0.decode(byteArray0, (int) (byte) (-1), (-102));
      byte[] byteArray1 = base64_0.decode("cAz`#qy_x`1");
      //  // Unstable assertion: assertEquals(6, byteArray1.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)112, (byte)12, (byte) (-22), (byte) (-53), (byte) (-4), (byte)117}, byteArray1);
      
      Base64.decodeBase64("");
      Base64.decodeBase64((String) null);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)91;
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte) (-1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)47, (byte)119, (byte)61, (byte)61, (byte) (-94), (byte)10}, byteArray3);
      
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte)17;
      Base64.decodeBase64((byte[]) null);
      byteArray0[5] = (byte) (-50);
      base64_0.decode(byteArray0, (-1480), (-1480));
      byte[] byteArray4 = base64_0.encode(byteArray0);
      base64_0.hasData();
      byte[] byteArray5 = Base64.discardWhitespace(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)91, (byte)64, (byte)17, (byte) (-50)}, byteArray5);
      
      boolean boolean0 = base64_0.hasData();
      //  // Unstable assertion: assertFalse(boolean0);
      
      byte[] byteArray6 = Base64.encodeBase64(byteArray4);
      //  // Unstable assertion: assertEquals(16, byteArray6.length);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = base64_0.decode("OH5");
      Object object0 = new Object();
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.shortValueExact();
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64((byte)124);
      byte[] byteArray3 = Base64.decodeBase64("OH5");
      byte[] byteArray4 = Base64.decodeBase64(byteArray3);
      Base64.decodeInteger(byteArray0);
      Base64.decodeBase64(byteArray0);
      Base64.isBase64("UTF-16");
      Base64.decodeBase64(byteArray4);
      base64_0.isUrlSafe();
      base64_0.readResults(byteArray2, 2580, 8188);
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Base64 base64_0 = new Base64(7);
      byte[] byteArray0 = null;
      Base64.encodeBase64((byte[]) null, true);
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Base64 base64_0 = new Base64(1);
      byte[] byteArray0 = base64_0.decode("xXeP5*1r");
      byte[] byteArray1 = base64_0.decode(byteArray0);
      base64_0.decode((String) null);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray3 = Base64.discardWhitespace(byteArray1);
      byte[] byteArray4 = Base64.decodeBase64(byteArray2);
      Base64.decodeBase64(byteArray3);
      Base64.encodeBase64String(byteArray4);
      byte[] byteArray5 = Base64.encodeBase64((byte[]) null, false, true);
      assertNull(byteArray5);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Base64 base64_0 = new Base64(7);
      byte[] byteArray0 = base64_0.decode("g>&a[M>");
      base64_0.decode(byteArray0);
      byte[] byteArray1 = base64_0.decode("org.apache.commons.codec.binary.Base64");
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)91;
      byteArray2[1] = (byte) (-20);
      Base64.decodeBase64(byteArray2);
      byteArray2[2] = (byte)1;
      byteArray2[3] = (byte) (-56);
      byteArray2[4] = (byte)34;
      Base64.encodeBase64(byteArray1, true);
      Base64.encodeBase64(byteArray2);
      Base64.decodeBase64("org.apache.commons.codec.binary.Base64");
      byte[] byteArray3 = base64_0.decode("");
      Base64.discardWhitespace(byteArray3);
      base64_0.decode("X1(QQ");
      base64_0.encode(byteArray2);
      try { 
        base64_0.encode((Object) "X1(QQ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte)114;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      boolean boolean0 = Base64.isBase64(byteArray1);
      assertFalse(boolean0);
      
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, false);
      assertEquals(14, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)70, (byte) (-64), (byte)114, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      
      Base64.decodeBase64("org.apache.commons.codec.EncoderException");
      byte[] byteArray3 = Base64.decodeBase64("org.apache.commons.codec.EncoderException");
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray3);
      assertEquals((short) (-17848), bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.hasData();
      byte[] byteArray0 = new byte[2];
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64((byte)1);
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("AAA=", string0);
      
      int int0 = base64_0.avail();
      assertEquals(0, int0);
      
      boolean boolean0 = Base64.isBase64("AAA=");
      assertTrue(boolean0);
      
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      assertEquals(0, byteArray2.length);
      
      byte[] byteArray3 = Base64.discardWhitespace(byteArray1);
      assertEquals(1, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Base64 base64_0 = new Base64(7);
      byte[] byteArray0 = base64_0.decode("g>&a[M>");
      base64_0.decode(byteArray0);
      byte[] byteArray1 = base64_0.decode("org.apache.commons.codec.binary.Base64");
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)91;
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray2);
      Base64.isBase64(byteArray1);
      Base64 base64_1 = new Base64();
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64.decodeBase64(byteArray0);
      base64_0.decode(byteArray3, 74, 74);
      Base64 base64_2 = null;
      try {
        base64_2 = new Base64(16, byteArray1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD\uFFFD\u001A\uFFFD\uFFFD!y\uFFFD&\uFFFD\uFFFD\uFFFDr\uFFFD^q\uFFFD\uFFFDj\uFFFD\uFFFDj\u01FA]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Base64 base64_0 = new Base64(7);
      byte[] byteArray0 = base64_0.decode("g>&a[M>");
      byte[] byteArray1 = base64_0.decode(byteArray0);
      base64_0.decode("org.apache.commons.codec.binary.Base64");
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)91;
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray2);
      assertEquals(7, byteArray3.length);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      Base64.encodeBase64(byteArray1, false, false);
      assertArrayEquals(new byte[] {(byte) (-127), (byte) (-93)}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.hasData();
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte)70;
      byteArray0[1] = (byte)70;
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64(byteArray0, false, true, 1812);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64(64);
      Base64.decodeBase64((String) null);
      Base64 base64_2 = new Base64(64, (byte[]) null, true);
      base64_2.isUrlSafe();
      Base64.isBase64("");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)31;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)80;
      byteArray0[8] = (byte) (-111);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte) (-111), (int) (byte)5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -111
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte)9;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertEquals(0, byteArray1.length);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.negate();
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      base64_0.hasData();
      byte[] byteArray3 = Base64.decodeBase64(byteArray2);
      assertSame(byteArray3, byteArray2);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)21;
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64(byteArray0, true, true, 30);
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64((byte)21);
      Object object0 = base64_0.decode((Object) "AEbAci0VAAAA");
      Object object1 = base64_0.encode(object0);
      base64_0.encode(object1);
      base64_0.decode((Object) "");
      Base64.isBase64((byte)62);
      Base64 base64_1 = null;
      try {
        base64_1 = new Base64(442, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000F\uFFFDr-\u0015\u0000\u0000\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)20;
      byteArray1[1] = (byte)20;
      byteArray1[2] = (byte)20;
      byteArray1[3] = (byte)20;
      byteArray1[4] = (byte) (-100);
      byteArray1[5] = (byte)20;
      byteArray1[6] = (byte)20;
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-118), (byte)10}, byteArray2);
      
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)10;
      Base64.encodeBase64(byteArray0);
      byteArray0[2] = (byte) (-21);
      byteArray0[3] = (byte)31;
      Base64.decodeBase64(byteArray0);
      Base64.isBase64(byteArray0);
      Base64 base64_1 = new Base64();
      Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray3 = new byte[4];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte)20;
      byteArray3[2] = (byte)0;
      byteArray3[3] = (byte)10;
      byte[] byteArray4 = Base64.encodeBase64(byteArray3, true, false);
      //  // Unstable assertion: assertEquals(10, byteArray4.length);
      
      byte[] byteArray5 = Base64.decodeBase64("org.apache.commons.codec.EncoderException");
      //  // Unstable assertion: assertEquals(27, byteArray5.length);
      
      Base64.decodeBase64((String) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray6 = Base64.toIntegerBytes(bigInteger0);
      //  // Unstable assertion: assertEquals(1, byteArray6.length);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)21;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray2 = new byte[2];
      Base64.isBase64(byteArray1);
      //  // Unstable assertion: assertEquals(9, byteArray1.length);
      
      Base64 base64_0 = new Base64();
      byte[] byteArray3 = new byte[2];
      byteArray3[0] = (byte)114;
      byteArray3[1] = (byte)45;
      Base64.encodeBase64URLSafe(byteArray3);
      byte[] byteArray4 = Base64.encodeBase64(byteArray2, true, true);
      Base64.decodeBase64("org.apache.commons.codec.EncoderException");
      byte[] byteArray5 = Base64.decodeBase64("org.apache.commons.codec.EncoderException");
      //  // Unstable assertion: assertEquals(27, byteArray5.length);
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      //  // Unstable assertion: assertEquals((short)5823, bigInteger0.shortValue());
      
      boolean boolean0 = Base64.isBase64(byteArray4);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertEquals(5, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte)0;
      Base64.encodeBase64URLSafe(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      byte[] byteArray3 = Base64.decodeBase64(byteArray1);
      Base64.decodeBase64(byteArray2);
      Base64.isBase64("encodeInteger called with null parameter");
      byte[] byteArray4 = Base64.decodeBase64(byteArray3);
      byte[] byteArray5 = Base64.discardWhitespace(byteArray3);
      assertNotSame(byteArray5, byteArray4);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)70;
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.encodeBase64((byte[]) null, true, false);
      Base64.decodeBase64("|Ne%");
      Base64.decodeBase64("org.apache.commons.codec.EncoderException");
      Base64 base64_0 = new Base64();
      Base64.encodeBase64URLSafe((byte[]) null);
      byte[] byteArray1 = base64_0.decode("q[`ZB!Fg9}");
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-87), (byte) (-112), (byte)69, (byte) (-125)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.decode("OH5");
      base64_0.decode((Object) "OH5");
      boolean boolean0 = true;
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64((byte)113);
      base64_0.decode(byteArray0);
      Base64.encodeBase64String(byteArray0);
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Base64 base64_0 = new Base64(1);
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = Base64.decodeBase64("");
      Base64 base64_1 = new Base64((-1689), byteArray1, false);
      boolean boolean0 = base64_0.isUrlSafe();
      boolean boolean1 = Base64.isBase64("");
      assertFalse(boolean1 == boolean0);
      
      base64_0.encode(byteArray0, 2212, (-2414));
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.hasData();
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64.isBase64((byte) (-83));
      base64_0.decode(byteArray1);
      Object object0 = new Object();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.doubleValue();
      BigInteger bigInteger1 = bigInteger0.setBit(7);
      Base64.encodeInteger(bigInteger1);
      Base64 base64_1 = new Base64(true);
      try { 
        base64_1.decode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray0 = base64_0.decode("ISO-8859-1");
      assertArrayEquals(new byte[] {(byte)33, (byte)35, (byte) (-66), (byte) (-13), (byte) (-50), (byte)125, (byte) (-5)}, byteArray0);
      
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)112;
      byteArray1[1] = (byte) (-27);
      byteArray1[2] = (byte) (-16);
      byteArray1[3] = (byte)39;
      byteArray1[4] = (byte)18;
      byteArray1[5] = (byte)124;
      byteArray1[6] = (byte)0;
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray1);
      assertEquals((short)0, bigInteger1.shortValue());
      
      int int0 = base64_0.readResults(byteArray1, (-5618), 3180);
      assertEquals((-1), int0);
      
      Base64.isBase64((byte)18);
      base64_0.avail();
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(1, byteArray2.length);
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray1);
      assertEquals("cOXwJxJ8AA", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64Chunked((byte[]) null);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)29;
      byteArray0[0] = (byte)29;
      byte byte1 = (byte) (-43);
      Base64.decodeBase64(byteArray0);
      String string0 = "";
      int int0 = 0;
      int int1 = 91;
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, (int) (byte)29, (int) (byte)29);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64 base64_0 = new Base64((-2248), byteArray0, false);
      boolean boolean0 = base64_0.isUrlSafe();
      boolean boolean1 = Base64.isBase64("encodeInteger called with null parameter");
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true, 119);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)20;
      byteArray1[1] = (byte)20;
      byteArray1[2] = (byte)20;
      byteArray1[3] = (byte)20;
      byteArray1[4] = (byte) (-100);
      byteArray1[5] = (byte)20;
      byteArray1[6] = (byte)20;
      Base64.decodeBase64(byteArray1);
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)10;
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      byteArray0[2] = (byte) (-21);
      byteArray0[3] = (byte)31;
      byte[] byteArray3 = Base64.decodeBase64(byteArray0);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-116);
      Base64.encodeBase64URLSafeString(byteArray3);
      byteArray0[6] = (byte)2;
      Base64.encodeBase64(byteArray0, false, true, 442);
      Base64.decodeInteger(byteArray2);
      String string0 = "";
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = Base64.decodeBase64(":Bf;AC%[zY0q'lAqcl");
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)115;
      String string0 = base64_0.encodeToString(byteArray0);
      //  // Unstable assertion: assertEquals("BfACzY0qlAqc\u0002\n", string0);
      
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)1;
      byteArray1[4] = (byte) (-70);
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte) (-1);
      byteArray2[2] = (byte) (-70);
      byteArray2[3] = (byte) (-36);
      byteArray2[4] = (byte) (-1);
      byteArray2[5] = (byte)112;
      byteArray2[6] = (byte)1;
      byteArray2[7] = (byte)1;
      byteArray2[8] = (byte)115;
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      //  // Unstable assertion: assertEquals(14, byteArray3.length);
      
      byteArray1[5] = (byte)89;
      boolean boolean0 = Base64.isBase64(byteArray1);
      base64_0.hasData();
      boolean boolean1 = base64_0.hasData();
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      //  // Unstable assertion: assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("DO>qOn8~~*nT1v");
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("DOqOn8nT1g", string0);
      
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)22;
      byteArray1[1] = (byte)113;
      byteArray1[2] = (byte) (-56);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)51;
      byteArray1[6] = (byte)83;
      byteArray1[7] = (byte)112;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      assertEquals(13, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(0, byteArray0);
      Base64.encodeBase64(byteArray0, true);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64.encodeBase64URLSafe(byteArray0);
      base64_0.decode(byteArray1, 0, 0);
      base64_0.hasData();
      Base64.isBase64((byte) (-107));
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte) (-107);
      byteArray2[1] = (byte) (-107);
      Base64.encodeBase64String(byteArray2);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.gcd(bigInteger1);
      bigInteger0.longValue();
      bigInteger0.not();
      base64_0.hasData();
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray3);
      assertEquals(4, byteArray3.length);
      
      base64_0.decode((Object) "lZU=");
      byte[] byteArray4 = base64_0.decode(byteArray1);
      assertSame(byteArray0, byteArray4);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Base64 base64_0 = new Base64(368);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte)0;
      base64_0.encode(byteArray0, (int) (byte)31, 0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      base64_0.hasData();
      assertTrue(base64_0.isUrlSafe());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)41;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = base64_0.decode("OH5");
      base64_0.decode((Object) "OH5");
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, true, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Base64 base64_0 = new Base64(106, (byte[]) null);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.isBase64("|}kT@~t^8@;");
      base64_0.readResults((byte[]) null, 106, 106);
      Base64.encodeBase64((byte[]) null, false, false, 76);
      Base64.encodeBase64((byte[]) null, false, false);
      base64_0.encodeToString((byte[]) null);
      byte byte0 = (byte) (-94);
      Base64.isBase64((byte) (-94));
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Base64 base64_0 = new Base64((-2181));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte) (-1);
      base64_0.decode("");
      byteArray0[2] = (byte)0;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
      
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-119);
      byteArray1[3] = (byte) (-37);
      base64_0.readResults(byteArray1, (byte) (-119), (-478));
      boolean boolean0 = Base64.isBase64("E8.");
      assertFalse(boolean0);
      
      int int0 = base64_0.avail();
      assertEquals(0, int0);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)67, (byte)74, (byte)50, (byte)119, (byte)61, (byte)61}, byteArray2);
      assertEquals(8, byteArray2.length);
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray1);
      assertEquals("AACJ2w", string0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byte byte0 = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)104;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)1;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, true, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)2;
      byteArray0[0] = (byte)2;
      Base64 base64_0 = new Base64(22, byteArray0);
      base64_0.readResults(byteArray0, 0, 0);
      try { 
        base64_0.encode((Object) "]");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(1, byteArray0.length);
      
      Base64.encodeBase64Chunked((byte[]) null);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)29;
      byteArray1[1] = (byte) (-43);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      assertArrayEquals(new byte[] {(byte)72, (byte)100, (byte)85, (byte)13, (byte)10}, byteArray2);
      assertEquals(5, byteArray2.length);
      
      Base64.decodeBase64("org.apache.commons.codec.EncoderException");
      byte[] byteArray3 = Base64.decodeBase64("org.apache.commons.codec.EncoderException");
      assertEquals(27, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)34;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)57;
      byteArray0[8] = (byte)0;
      base64_0.decode(byteArray0, 1256, 0);
      byte[] byteArray1 = Base64.decodeBase64("");
      boolean boolean0 = base64_0.hasData();
      boolean boolean1 = Base64.isArrayByteBase64(byteArray1);
      assertTrue(boolean1);
      assertEquals(0, byteArray1.length);
      
      boolean boolean2 = base64_0.isUrlSafe();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(1, byteArray0, true);
      base64_0.encode(byteArray0);
      byte[] byteArray1 = new byte[2];
      byte byte0 = (byte)52;
      byteArray1[0] = (byte)52;
      byte byte1 = (byte)0;
      byteArray1[1] = (byte)0;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte) (-64);
      byte byte0 = (byte)114;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)21;
      byteArray0[6] = (byte) (-83);
      byteArray0[7] = (byte)0;
      byte byte1 = (byte)0;
      byteArray0[8] = (byte)0;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.decodeBase64(byteArray0);
      String string0 = "";
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 0, 74);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)52;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(2843, byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD1)\u0000\u00044]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Base64 base64_0 = new Base64(1);
      byte[] byteArray0 = new byte[6];
      Base64.encodeBase64(byteArray0, false);
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte)0;
      Base64.encodeBase64(byteArray0, true);
      Base64.isBase64((byte)104);
      base64_0.decode(byteArray0);
      Object object0 = new Object();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.doubleValue();
      bigInteger0.setBit((byte)104);
      Base64.encodeInteger(bigInteger0);
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(2328);
      base64_0.encode(byteArray1);
      Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      byte[] byteArray2 = new byte[0];
      boolean boolean0 = true;
      Base64.isBase64("GJHv6ZZlGV/'l");
      Base64.encodeBase64(byteArray2, true);
      base64_0.isUrlSafe();
      Base64.encodeBase64Chunked(byteArray1);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.or(bigInteger0);
      BigInteger bigInteger2 = bigInteger0.modPow(bigInteger1, bigInteger1);
      BigInteger bigInteger3 = BigInteger.ONE;
      bigInteger3.toString();
      bigInteger0.divideAndRemainder(bigInteger3);
      bigInteger0.remainder(bigInteger2);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      bigInteger0.toByteArray();
      bigInteger3.longValueExact();
      Base64 base64_0 = new Base64((-1187), byteArray0);
      base64_0.decode("1");
      bigInteger3.xor(bigInteger0);
      try { 
        base64_0.decode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)71;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(10, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)66, (byte)53, (byte)47, (byte)48, (byte)99, (byte)61, (byte)13, (byte)10}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)80;
      byteArray0[0] = (byte)80;
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byte byte2 = (byte)107;
      byteArray0[3] = (byte)107;
      byte byte3 = (byte)0;
      byteArray0[4] = (byte)0;
      byte byte4 = (byte)37;
      byteArray0[5] = (byte)37;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)0);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)37;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      Base64.encodeBase64String(byteArray1);
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)6;
      byteArray0[0] = (byte)6;
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-27);
      byte byte2 = (byte)113;
      byteArray0[3] = (byte)113;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0006\u0000\uFFFDq]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("{");
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64.encodeBase64String(byteArray0);
      base64_0.decode(byteArray0, (-1988), (-1988));
      base64_0.encode(byteArray0, (-1196), (-1196));
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64String(byteArray0);
      Base64.isBase64(byteArray1);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      String string0 = "H[}s_Z";
      byte[] byteArray2 = Base64.decodeBase64("H[}s_Z");
      Base64 base64_0 = new Base64(115, byteArray0);
      base64_0.decode(byteArray2);
      base64_0.encodeToString(byteArray1);
      Base64.decodeBase64("H[}s_Z");
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 1, 115);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)47;
      byteArray0[0] = (byte)47;
      byte byte1 = (byte)18;
      byteArray0[1] = (byte)18;
      Base64.encodeBase64(byteArray0, false);
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0);
      base64_0.readResults(byteArray0, 31, (byte)18);
      Base64 base64_1 = new Base64();
      try { 
        base64_1.encode((Object) base64_0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      byte byte0 = (byte) (-91);
      Base64.isBase64((byte) (-91));
      String string0 = null;
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64 base64_0 = new Base64((-2248), byteArray0, false);
      base64_0.isUrlSafe();
      Base64.isBase64("encodeInteger called with null parameter");
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (-2414), (-2414));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte) (-70);
      byteArray0[6] = (byte)123;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte)97;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertEquals(12, byteArray1.length);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(1, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)0);
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)65, (byte)61, (byte)13, (byte)10}, byteArray1);
      
      Base64.isBase64("org.apache.commons.codec.EncoderException");
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("AQA=", string0);
      
      base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      assertEquals(0, byteArray2.length);
      
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte)1;
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("/10BKrIB", string0);
      
      base64_0.encode(byteArray0, (int) (byte)1, 0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-26);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray3 = Base64.decodeBase64(byteArray2);
      assertEquals(3, byteArray1.length);
      assertSame(byteArray3, byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-26)}, byteArray1);
      assertEquals(0, byteArray2.length);
      
      boolean boolean0 = Base64.isBase64(") than the specified maxium size of ");
      assertFalse(boolean0);
      
      byte[] byteArray4 = new byte[5];
      byteArray4[0] = (byte)0;
      byteArray4[1] = (byte)0;
      byteArray4[2] = (byte)0;
      byteArray4[3] = (byte)0;
      byteArray4[4] = (byte)0;
      byte[] byteArray5 = Base64.decodeBase64(byteArray4);
      assertNotSame(byteArray5, byteArray3);
  }
}
