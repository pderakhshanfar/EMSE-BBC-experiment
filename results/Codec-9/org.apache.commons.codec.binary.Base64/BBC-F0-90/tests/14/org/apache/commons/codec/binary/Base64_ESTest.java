/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:06:41 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Base64 base64_0 = new Base64();
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(1857, 1857, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      mockRandom0.nextBytes(byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64 base64_1 = new Base64(1857, byteArray0);
      Base64 base64_2 = new Base64(64, byteArray0);
      byte[] byteArray2 = base64_2.encode(byteArray1);
      byte[] byteArray3 = base64_1.encode(byteArray2);
      base64_0.encode(byteArray3);
      // Undeclared exception!
      Base64.encodeBase64(byteArray3, false, false, 8192);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Base64 base64_0 = new Base64();
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(1857, 1857, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      mockRandom0.nextBytes(byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64 base64_1 = new Base64(1857, byteArray0);
      Base64 base64_2 = new Base64(64, byteArray0);
      bigInteger0.toByteArray();
      byte[] byteArray2 = base64_2.encode(byteArray1);
      byte[] byteArray3 = base64_1.encode(byteArray2);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      // Undeclared exception!
      base64_2.encode(byteArray4);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)16;
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Base64 base64_0 = new Base64();
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((-479), (-479), mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // bitLength < 2
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Base64 base64_0 = new Base64();
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(1857, 1857, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      mockRandom0.nextBytes(byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64 base64_1 = new Base64(1857, byteArray0);
      Base64 base64_2 = new Base64(64, byteArray0);
      byte[] byteArray2 = base64_2.encode(byteArray1);
      byte[] byteArray3 = base64_1.encode(byteArray2);
      base64_2.encode(byteArray2);
      Base64.discardWhitespace(byteArray3);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64(1279, byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.decode("US-ASCII");
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)104;
      byteArray1[1] = (byte) (-99);
      byteArray1[2] = (byte) (-1);
      base64_0.encode(byteArray1);
      byte[] byteArray2 = new byte[0];
      Base64.encodeBase64URLSafe(byteArray2);
      Base64.decodeBase64("org.apache.commons.codec.binary.StringUtils");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)0;
      byteArray0[1] = (byte)0;
      Base64 base64_0 = new Base64(1717986918, byteArray0);
      byte[] byteArray1 = base64_0.decode("Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64.encodeBase64(byteArray1);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray2);
      Base64.discardWhitespace(byteArray3);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false);
      Base64.encodeBase64String(byteArray0);
      Base64.decodeInteger(byteArray1);
      Base64.isBase64((byte)0);
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      Base64.discardWhitespace(byteArray2);
      Base64 base64_0 = new Base64(true);
      Base64.decodeBase64(byteArray2);
      Base64.isBase64("AA==");
      base64_0.encodeToString(byteArray1);
      Base64.decodeBase64("AA==");
      Base64.discardWhitespace(byteArray1);
      try { 
        base64_0.encode((Object) "QUE9PQAA\u0000\u0000");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(152, byteArray0);
      Base64.decodeBase64(byteArray0);
      base64_0.encodeToString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-56);
      byteArray0[3] = (byte) (-88);
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      Base64.encodeBase64(byteArray0, true);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64.encodeBase64Chunked(byteArray0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte)62;
      Base64 base64_0 = new Base64(1717986918, byteArray0);
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = base64_0.decode("Parameter supplied to Base64 decode is not a byte[] or a String");
      base64_0.encodeToString(byteArray1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray0);
      byte[] byteArray3 = base64_0.encode(byteArray0);
      Base64.isBase64(byteArray3);
      Base64.encodeBase64String(byteArray0);
      Base64.decodeInteger(byteArray2);
      Base64.isArrayByteBase64(byteArray1);
      base64_0.decode((Object) "");
      Base64.isArrayByteBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.isBase64(byteArray0);
      BigInteger bigInteger1 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-1298), byteArray0);
      byte[] byteArray1 = base64_0.decode(": ");
      base64_0.encode(byteArray1);
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte) (-96);
      byteArray2[1] = (byte) (-122);
      byteArray2[2] = (byte)84;
      byteArray2[3] = (byte)67;
      byteArray2[4] = (byte)53;
      byteArray2[5] = (byte)103;
      byteArray2[6] = (byte)0;
      byteArray2[7] = (byte)81;
      byteArray2[8] = (byte)83;
      Base64.encodeBase64URLSafe(byteArray2);
      byte[] byteArray3 = new byte[5];
      byteArray3[0] = (byte) (-96);
      byteArray3[1] = (byte)83;
      byteArray3[2] = (byte)103;
      byteArray3[3] = (byte)67;
      byteArray3[4] = (byte)2;
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64 base64_0 = new Base64(1279);
      base64_0.encode(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(1866, 1866, mockRandom0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      mockRandom0.nextBytes(byteArray1);
      base64_0.encode(byteArray1);
      Base64 base64_1 = new Base64(1866, byteArray1);
      BigInteger bigInteger1 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger1);
      base64_1.encodeToString(byteArray1);
      byte[] byteArray2 = Base64.decodeBase64("qBsAAKkbAACqGwAAqxsAAKwbAACtGwAArhsAAK8bAACwGwAAsRsAALIbAACzGwAAtBsAALUbAAC2GwAAtxsAALgbAAC5GwAAuhsAALsbAAC8GwAAvRsAAL4bAAC/GwAAwBsAAMEbAADCGwAAwxsAAMQbAADFGwAAxhsAAMcbAADIGwAAyRsAAMobAADLGwAAzBsAAM0bAADOGwAAzxsAANAbAADRGwAA0hsAANMbAADUGwAA1RsAANYbAADXGwAA2BsAANkbAADaGwAA2xsAANwbAADdGwAA3hsAAN8bAADgGwAA4RsAAOIbAADjGwAA5BsAAOUbAADmGwAA5xsAAOgbAADpGwAA6hsAAOsbAADsGwAA7RsAAO4bAADvGwAA8BsAAPEbAADyGwAA8xsAAPQbAAD1GwAA\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000\uFFFD\u001B\u0000\u0000");
      assertNotSame(byteArray2, byteArray1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte)62;
      Base64 base64_0 = new Base64(1717986918, byteArray0);
      byte[] byteArray1 = base64_0.decode("Parameter supplied to Base64 decode is not a byte[] or a String");
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray2);
      assertEquals(75, byteArray3.length);
      
      String string0 = base64_0.encodeToString(byteArray1);
      assertEquals("ParametersuppliedtoBase64decodeisnotabyteoraString==\u0224\uFFFD>", string0);
      
      byte[] byteArray4 = Base64.decodeBase64("?iR*d>DO7");
      assertEquals(4, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64 base64_1 = new Base64(76);
      base64_1.decode(byteArray1, 1, 76);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)61}, byteArray1);
      
      int int0 = base64_1.avail();
      //  // Unstable assertion: assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertEquals(1, byteArray1.length);
      
      boolean boolean0 = Base64.isBase64((byte)61);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte) (-86);
      Base64.encodeBase64(byteArray0, true, true, 10);
      Base64 base64_1 = new Base64((byte)44);
      base64_1.encodeToString(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true, 1620);
      assertEquals(7, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)66, (byte)75, (byte)113, (byte)113, (byte)76, (byte)75, (byte)111}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[2];
      bigInteger0.floatValue();
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)32;
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("jiA=", string0);
      
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-114)}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = base64_0.decode("encodeIntegr called wth null parameter");
      byte[] byteArray1 = Base64.decodeBase64("encodeIntegr called wth null parameter");
      Base64.decodeInteger(byteArray0);
      Base64 base64_1 = new Base64(2);
      // Undeclared exception!
      try { 
        base64_1.decode(byteArray1, 2, 1459);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 25
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.decodeBase64(byteArray0);
      Base64.decodeInteger(byteArray0);
      Base64 base64_1 = new Base64(76);
      base64_0.decode(byteArray0, 64, 2238);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      base64_0.decode(byteArray1, 0, 2238);
      base64_1.decode(byteArray1, 1, 76);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      byte[] byteArray3 = Base64.encodeInteger(bigInteger1);
      Base64.encodeInteger(bigInteger1);
      // Undeclared exception!
      try { 
        base64_1.readResults(byteArray3, (-591), (-591));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64.decodeBase64("8");
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.decodeBase64(byteArray0);
      Base64.decodeInteger(byteArray0);
      Base64 base64_1 = new Base64(76);
      base64_0.decode(byteArray0, 64, 2238);
      Base64.decodeBase64(byteArray0);
      base64_0.decode(byteArray1, 0, 2238);
      base64_1.decode(byteArray1, 1, 76);
      Base64.decodeBase64(byteArray1);
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)71;
      byteArray2[1] = (byte)71;
      byte byte0 = (byte)0;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)38;
      byteArray2[4] = (byte)39;
      byteArray2[5] = (byte) (-91);
      byteArray2[6] = (byte)18;
      byteArray2[7] = (byte) (-69);
      byteArray2[8] = (byte)30;
      Base64 base64_2 = null;
      try {
        base64_2 = new Base64(2238, byteArray2, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [GG\u0000&'\uFFFD\u0012\uFFFD\u001E]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = base64_0.decode("encodeIntegr called wth null parameter");
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.decodeInteger(byteArray0);
      Base64 base64_1 = new Base64(76);
      base64_0.decode(byteArray0, 64, 2238);
      Base64.decodeBase64(byteArray0);
      base64_0.decode(byteArray1, 0, 2238);
      base64_1.decode(byteArray1, 1, 76);
      Base64.discardWhitespace(byteArray1);
      try { 
        base64_1.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte byte0 = (byte)8;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)8;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, (int) (byte)8);
      BigInteger bigInteger1 = BigInteger.ZERO;
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)8;
      byteArray2[1] = (byte)8;
      byteArray2[2] = (byte)8;
      byteArray2[3] = (byte)8;
      byteArray2[4] = (byte)8;
      byteArray2[5] = (byte)8;
      byteArray2[6] = (byte)8;
      byteArray2[7] = (byte)8;
      Base64 base64_0 = new Base64((byte)8, byteArray2, true);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 0, (int) (byte)8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Base64.isBase64((byte)35);
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Base64.isBase64((byte)35);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)35;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64 base64_0 = new Base64();
      base64_0.isUrlSafe();
      Base64.encodeBase64String(byteArray1);
      base64_0.encode(byteArray1, (int) (byte)0, 6);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (-1672), 8189);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1672
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64 base64_1 = new Base64(true);
      assertTrue(base64_1.isUrlSafe());
      
      Object object0 = new Object();
      boolean boolean0 = Base64.isBase64((byte)123);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Base64.isBase64((byte)9);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)9;
      Base64 base64_0 = new Base64((byte)9, byteArray0);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      byte[] byteArray2 = base64_0.decode("org.apache.commons.codec.DecoderException");
      byte[] byteArray3 = Base64.decodeBase64(byteArray2);
      assertArrayEquals(new byte[] {(byte) (-54), (byte) (-70), (byte)123}, byteArray3);
      assertEquals(3, byteArray3.length);
      
      base64_0.decode(byteArray0, (int) (byte)0, (int) (byte)0);
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean0);
      
      Base64.isBase64((byte)0);
      boolean boolean1 = Base64.isBase64(byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = base64_0.decode("encodeInteger called with null parameter");
      Base64.decodeInteger(byteArray0);
      boolean boolean0 = false;
      Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64(byteArray0, true, false, 187);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64 base64_1 = new Base64(64);
      Base64.decodeBase64(byteArray0);
      Base64.encodeInteger(bigInteger0);
      base64_0.decode(byteArray0, (int) (byte)8, 64);
      // Undeclared exception!
      try { 
        base64_1.decode(byteArray0, 64, 1456);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 64
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      base64_0.decode(byteArray0);
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)44;
      byteArray2[1] = (byte)44;
      byteArray2[2] = (byte)9;
      byteArray2[3] = (byte)44;
      byteArray2[4] = (byte)44;
      byteArray2[5] = (byte)44;
      byteArray2[6] = (byte)44;
      Base64.discardWhitespace(byteArray2);
      Base64.encodeBase64(byteArray1, false, false, (int) (byte)44);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      int int0 = 2147;
      Base64 base64_0 = new Base64(2147, byteArray1, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      byte byte0 = (byte) (-77);
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[1];
      base64_0.decode((Object) "");
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.longValueExact();
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      byteArray0[0] = (byte) (-77);
      base64_0.encodeToString(byteArray0);
      base64_0.encodeToString((byte[]) null);
      base64_0.readResults((byte[]) null, (byte) (-77), (byte) (-77));
      base64_0.encode((byte[]) null, 0, (int) (byte) (-77));
      int int0 = Base64.MIME_CHUNK_SIZE;
      Base64.isArrayByteBase64(byteArray0);
      Base64.isArrayByteBase64(byteArray1);
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.encodeBase64Chunked(byteArray2);
      Base64.isBase64((byte) (-77));
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, (byte) (-77), 13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = base64_0.decode("encodeInteger called with null parameter");
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      Base64 base64_1 = new Base64(64);
      Base64 base64_2 = new Base64();
      byte[] byteArray3 = base64_2.encode(byteArray2);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray3, false, false, 64);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (92) than the specified maxium size of 64
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.decodeInteger(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false, false);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray3 = base64_0.decode("}ezk:=nQ1b9~/bp");
      Base64.decodeInteger(byteArray2);
      byte[] byteArray4 = new byte[4];
      byteArray4[0] = (byte)50;
      byteArray4[1] = (byte)3;
      byteArray4[2] = (byte)97;
      byteArray4[3] = (byte)65;
      Base64.encodeBase64Chunked(byteArray4);
      base64_0.encode(byteArray1);
      base64_0.decode("v");
      base64_0.decode("");
      Base64.isBase64(byteArray3);
      base64_0.decode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      base64_0.decode((Object) "");
      byte[] byteArray0 = Base64.decodeBase64("Input array too big, the output array would be bigger (");
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.longValueExact();
      base64_0.decode(byteArray0, (-1), (-662));
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      base64_0.isUrlSafe();
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte) (-77);
      byteArray2[1] = (byte) (-77);
      byteArray2[2] = (byte) (-77);
      byteArray2[3] = (byte) (-77);
      Base64 base64_1 = new Base64((-662), byteArray2, true);
      base64_1.encode(byteArray1, 65, (-662));
      base64_0.decode(byteArray1, 123, (int) (byte) (-77));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = base64_0.decode("encodeInteger called with null parameter");
      Base64.decodeInteger(byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_1 = new Base64(482);
      base64_0.encode(byteArray0);
      Base64 base64_2 = new Base64(72);
      base64_2.decode("");
      byte[] byteArray1 = base64_0.decode("UTF-16");
      Base64.isBase64(byteArray1);
      base64_2.decode((Object) "");
      Base64.isBase64((byte)49);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = null;
      Object object0 = base64_0.decode((Object) "");
      Object object1 = base64_0.encode(object0);
      base64_0.decode(object1);
      int int0 = 0;
      base64_0.encode((byte[]) null, 3342, 0);
      Base64.encodeBase64URLSafeString((byte[]) null);
      base64_0.decode((byte[]) null, 0, 0);
      base64_0.decode((byte[]) null);
      base64_0.avail();
      Base64.encodeBase64URLSafe((byte[]) null);
      int int1 = 1;
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, 0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.longValueExact();
      Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(true);
      base64_0.encodeToString(byteArray1);
      base64_0.encodeToString(byteArray0);
      Base64 base64_1 = new Base64();
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte) (-77);
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte) (-3);
      byteArray2[4] = (byte)21;
      byteArray2[5] = (byte) (-77);
      byteArray2[6] = (byte)0;
      byteArray2[7] = (byte) (-77);
      byteArray2[8] = (byte)0;
      base64_1.encode(byteArray2, 1, 1);
      bigInteger0.intValue();
      Base64.isArrayByteBase64(byteArray1);
      Base64 base64_2 = new Base64((byte)0, byteArray2, false);
      Object object0 = new Object();
      Base64.isBase64((byte) (-100));
      Random.setNextRandom((-273));
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.decodeInteger(byteArray1);
      Base64.encodeBase64(byteArray0, false, false);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      Base64 base64_1 = new Base64(false);
      byte[] byteArray3 = Base64.decodeBase64(byteArray2);
      base64_0.decode(byteArray3);
      byte[] byteArray4 = new byte[7];
      byteArray4[0] = (byte)2;
      byteArray4[1] = (byte)44;
      byteArray4[2] = (byte) (-80);
      byteArray4[3] = (byte)67;
      byteArray4[4] = (byte) (-114);
      byteArray4[5] = (byte)71;
      byteArray4[6] = (byte)47;
      Base64.discardWhitespace(byteArray4);
      Base64.encodeBase64(byteArray1, true, false, 64);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64String(byteArray0);
      base64_0.encode(byteArray0, (-1917), (-1917));
      Base64 base64_1 = new Base64(35, byteArray0);
      base64_0.hasData();
      Base64.decodeBase64("AAAAAAAAAAAA");
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Base64.encodeBase64String((byte[]) null);
      Base64.decodeBase64((byte[]) null);
      Object object0 = new Object();
      Base64.encodeBase64((byte[]) null, true);
      Base64.decodeBase64((String) null);
      Base64.encodeBase64((byte[]) null, true);
      Base64.encodeBase64((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray0 = base64_0.decode("encodeInteer called with null parameter");
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      Base64.encodeBase64Chunked(byteArray2);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.decodeInteger(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray3 = base64_0.encode(byteArray0);
      byte byte0 = (byte)0;
      Base64.isBase64("");
      Base64 base64_1 = new Base64((byte) (-86), byteArray3, true);
      base64_1.decode("");
      base64_0.decode(byteArray1, 3, (-3555));
      Base64 base64_2 = new Base64(64, byteArray0, false);
      Base64.encodeBase64URLSafe(byteArray2);
      Base64.encodeBase64(byteArray2, true, false, (-3555));
      base64_2.decode("4");
      base64_0.decode(byteArray1);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray3, 0, 30);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64URLSafe(byteArray1);
      Base64.decodeInteger(byteArray1);
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)8;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      Base64.decodeInteger(byteArray2);
      Base64.decodeBase64(byteArray2);
      byte[] byteArray3 = Base64.decodeBase64(byteArray0);
      Base64 base64_1 = new Base64((byte)110, byteArray3, false);
      String string0 = "4_AJ;<\\0`hLnBuy";
      base64_1.decode("4_AJ;<\u0000`hLnBuy");
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Base64 base64_0 = new Base64(14);
      Base64.encodeBase64URLSafeString((byte[]) null);
      base64_0.avail();
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64.encodeBase64((byte[]) null, true, true);
      Base64.encodeBase64((byte[]) null, true, true, 64);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-90);
      base64_0.decode((byte[]) null);
      byteArray0[3] = (byte) (-44);
      byteArray0[2] = (byte) (-44);
      Base64.encodeBase64Chunked((byte[]) null);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      Base64.encodeBase64((byte[]) null, false);
      byteArray0[6] = (byte)0;
      base64_0.encode(byteArray0);
      Base64.encodeBase64(byteArray0, true, true, 76);
      base64_0.decode("8i7");
      Base64.isBase64(byteArray0);
      base64_0.decode((byte[]) null, (int) (byte) (-44), (int) (byte) (-44));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Base64 base64_0 = new Base64(14);
      byte[] byteArray0 = null;
      Base64.encodeBase64URLSafeString((byte[]) null);
      base64_0.avail();
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64.encodeBase64((byte[]) null, true, true);
      Base64.encodeBase64((byte[]) null, true, true, 64);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-90);
      base64_0.decode((byte[]) null);
      int int0 = 187;
      Base64.encodeBase64(byteArray1, true, true, 76);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte)46;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64(true);
      base64_0.isUrlSafe();
      Base64.encodeBase64String(byteArray0);
      base64_0.encode(byteArray0, (int) (byte) (-42), (int) (byte) (-42));
      Base64 base64_1 = new Base64();
      // Undeclared exception!
      try { 
        base64_1.decode(byteArray0, (-915), 45);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -915
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)80;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64(2147, byteArray1, false);
      Base64.encodeBase64(byteArray1);
      Base64 base64_1 = new Base64();
      String string0 = "";
      Base64.encodeBase64Chunked(byteArray1);
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = base64_0.decode("encodeInteger called with null parameter");
      Base64.decodeInteger(byteArray0);
      Base64.encodeBase64(byteArray0, true, false, 187);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.decode("encodeInteger called with null parameter");
      base64_0.readResults(byteArray1, 0, 5);
      base64_0.decode("org.apache.commons.codec.binary.StringUtils");
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte) (-1);
      byteArray2[1] = (byte)8;
      byteArray2[3] = (byte)8;
      byteArray2[4] = (byte)8;
      byteArray2[5] = (byte) (-1);
      byteArray2[6] = (byte) (-1);
      Base64.isBase64(byteArray2);
      Base64.isBase64((byte) (-1));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = base64_0.decode("encodeInteger called with null parameter");
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      Base64.decodeInteger(byteArray0);
      Base64.decodeInteger(byteArray1);
      Base64.decodeBase64(byteArray1);
      Base64.decodeBase64(byteArray1);
      base64_0.decode("encodeInteger called with null parameter");
      Base64.decodeInteger(byteArray2);
      Base64 base64_1 = new Base64(61);
      byte[] byteArray3 = new byte[0];
      base64_0.decode(byteArray3, 3, 1);
      Base64.decodeBase64(byteArray3);
      // Undeclared exception!
      try { 
        base64_1.decode(byteArray1, 546, 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 546
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64.decodeBase64("");
      Base64 base64_1 = new Base64(false);
      Base64.isBase64("XO\fy!x?'@TnfJk");
      Object object0 = base64_0.decode((Object) ",Ktgj+(XG");
      base64_1.encode(object0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Base64 base64_0 = new Base64(14);
      byte[] byteArray0 = null;
      Base64.encodeBase64URLSafeString((byte[]) null);
      base64_0.avail();
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64.encodeBase64((byte[]) null, true, true);
      Base64.encodeBase64((byte[]) null, true, true, 64);
      byte[] byteArray1 = new byte[7];
      byte byte0 = (byte) (-90);
      byteArray1[0] = (byte) (-90);
      base64_0.decode((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.decodeInteger(byteArray1);
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray0);
      byte[] byteArray3 = base64_0.encode(byteArray0);
      Base64.isBase64(byteArray3);
      Base64.encodeBase64String(byteArray0);
      Base64.decodeInteger(byteArray2);
      Base64.isArrayByteBase64(byteArray1);
      base64_0.decode(byteArray2);
      byte[] byteArray4 = new byte[5];
      byteArray4[0] = (byte)105;
      Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray5 = new byte[8];
      byteArray5[0] = (byte)0;
      byteArray5[1] = (byte)105;
      byteArray5[2] = (byte)0;
      byteArray5[3] = (byte)73;
      byteArray5[4] = (byte)0;
      byteArray5[5] = (byte) (-52);
      byteArray5[6] = (byte)0;
      byteArray5[7] = (byte)0;
      base64_0.encode(byteArray5);
      base64_0.decode("");
      base64_0.decode("n !?Y@x`");
      byte[] byteArray6 = new byte[0];
      Base64.isBase64(byteArray6);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-15);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64.encodeBase64String(byteArray0);
      Base64.decodeInteger(byteArray1);
      Base64.isBase64("8Q==");
      byte[] byteArray2 = new byte[2];
      byteArray2[1] = (byte) (-15);
      Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(808);
      byte[] byteArray3 = new byte[0];
      base64_0.encode(byteArray3);
      base64_0.decode("R{c'oe]B");
      byte[] byteArray4 = base64_0.decode("R{c'oe]B");
      Base64.isBase64(byteArray4);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Base64 base64_0 = new Base64(14);
      Base64.encodeBase64URLSafeString((byte[]) null);
      base64_0.avail();
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64.encodeBase64((byte[]) null, true, true);
      Base64.encodeBase64((byte[]) null, true, true, 64);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-90);
      base64_0.decode((byte[]) null);
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-52);
      Base64.discardWhitespace(byteArray0);
      Base64 base64_1 = new Base64(true);
      Base64.decodeBase64((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64.encodeBase64((byte[]) null, true, true);
      Base64.encodeBase64((byte[]) null, true, true, (-681));
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte) (-39);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.decodeInteger(byteArray1);
      Base64.decodeInteger(byteArray2);
      Base64.decodeBase64(byteArray0);
      byte[] byteArray3 = Base64.decodeBase64(byteArray2);
      base64_0.decode((String) null);
      base64_0.encode(byteArray3);
      Base64 base64_1 = new Base64();
      base64_1.decode("");
      Base64 base64_2 = null;
      try {
        base64_2 = new Base64((-2344), byteArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [=\uFFFD\u0000\u0000\u0000\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = base64_0.decode("encodeInteger called with null parameter");
      Base64.decodeInteger(byteArray0);
      boolean boolean0 = false;
      Base64.encodeBase64(byteArray0, true, false, 187);
      Base64.decodeInteger(byteArray0);
      Base64 base64_1 = new Base64(64);
      base64_0.decode(byteArray0, (int) (byte)8, (int) (byte) (-1));
      Base64.decodeBase64(byteArray0);
      base64_0.decode(byteArray0, (int) (byte)8, 64);
      // Undeclared exception!
      try { 
        base64_1.decode(byteArray0, 1, 1456);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 27
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte) (-2);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      base64_0.encode(byteArray1, 2310, (int) (byte) (-2));
      byte[] byteArray2 = base64_0.decode(byteArray0);
      Base64 base64_1 = new Base64(0, byteArray2, true);
      base64_1.decode("Input array too big, the output array would be bigger (");
      Base64.decodeBase64(byteArray0);
      base64_1.decode(byteArray0, 101, (int) (byte) (-2));
      Base64.isBase64("Input array too big, the output array would be bigger (");
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)80;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64(2147, byteArray1, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      byte[] byteArray2 = new byte[8];
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true);
      base64_0.isUrlSafe();
      Base64.encodeBase64String(byteArray3);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray2, 1, 2567);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      base64_0.encode(byteArray0);
      base64_0.decode(byteArray0);
      base64_0.decode(byteArray1);
      byte[] byteArray2 = base64_0.decode("KJ%!}hv");
      byte[] byteArray3 = Base64.decodeBase64(byteArray1);
      base64_0.decode(byteArray2, (int) (byte)0, (int) (byte) (-2));
      Base64.isArrayByteBase64(byteArray3);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Base64.isBase64((byte)35);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)35;
      byteArray0[4] = (byte)35;
      Base64.encodeBase64(byteArray0, false, false, 41);
      byte[] byteArray1 = Base64.decodeBase64("Input array too big, the output array would be bigger (");
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.encodeBase64URLSafe(byteArray1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Base64 base64_0 = new Base64(2247);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)81;
      base64_0.decode(byteArray0, 2247, (-256));
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)16;
      byteArray2[1] = (byte) (-41);
      byteArray2[2] = (byte) (-41);
      byteArray2[3] = (byte)81;
      byteArray2[4] = (byte)16;
      byteArray2[5] = (byte)16;
      byteArray2[6] = (byte)16;
      BigInteger bigInteger0 = new BigInteger(byteArray2);
      bigInteger0.toByteArray();
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.or(bigInteger0);
      bigInteger0.compareTo(bigInteger1);
      Base64.encodeInteger(bigInteger0);
      base64_0.encode(byteArray0, (-848), (int) (byte)16);
      base64_0.encode(byteArray1);
      BigInteger bigInteger2 = Base64.decodeInteger(byteArray2);
      try { 
        base64_0.encode((Object) bigInteger2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = base64_0.decode("encodeInteger called with null parameter");
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64URLSafe(byteArray1);
      Base64.decodeInteger(byteArray0);
      Base64.decodeInteger(byteArray1);
      Base64.decodeBase64(byteArray1);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      base64_0.decode("encodeInteger called with null parameter");
      base64_0.encode(byteArray2);
      base64_0.decode("");
      base64_0.readResults(byteArray0, 634, 634);
      base64_0.decode("");
      Base64.isBase64(byteArray2);
      Base64.isBase64((byte) (-14));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = Base64.decodeBase64("Input array too big, the output array would be bigger (");
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)99;
      Base64.encodeBase64URLSafeString(byteArray0);
      byteArray1[1] = (byte)79;
      byteArray1[2] = (byte)0;
      Base64.encodeBase64String(byteArray1);
      byteArray1[3] = (byte) (-83);
      byteArray1[4] = (byte)108;
      base64_0.decode(byteArray0);
      base64_0.decode("(FU{)H");
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      byte[] byteArray3 = new byte[0];
      base64_0.decode(byteArray3, 55, 0);
      Base64.isArrayByteBase64(byteArray2);
      base64_0.decode((Object) "Input array too big, the output array would be bigger (");
      base64_0.avail();
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.hasData();
      base64_0.encodeToString(byteArray3);
      base64_0.encodeToString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)19;
      Base64.encodeBase64(byteArray0, false, false);
      base64_0.isUrlSafe();
      byte[] byteArray1 = new byte[0];
      Base64.decodeBase64(byteArray1);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(0, mockRandom0);
      Base64.encodeInteger(bigInteger0);
      base64_0.decode("\"E/O&x7U%u&(v0ZY");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)76;
      Base64.encodeBase64(byteArray0, true, true, 24);
      byte[] byteArray1 = Base64.decodeBase64("Input array too big, the output array would be bigger (");
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)99;
      Base64.encodeBase64URLSafeString(byteArray1);
      byteArray2[1] = (byte)79;
      Base64.encodeBase64URLSafe(byteArray1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray0);
      byte[] byteArray3 = base64_0.encode(byteArray0);
      Base64.isBase64(byteArray3);
      Base64.encodeBase64String(byteArray0);
      Base64.decodeInteger(byteArray2);
      Base64.isArrayByteBase64(byteArray1);
      base64_0.decode((Object) "");
      Base64.isArrayByteBase64(byteArray1);
      try { 
        base64_0.encode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-208), byteArray0, true);
      byte[] byteArray1 = new byte[0];
      base64_0.decode(byteArray1);
      String string0 = "";
      byte[] byteArray2 = base64_0.decode("");
      Base64.decodeBase64(byteArray2);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (-2731), 58);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2731
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Base64 base64_0 = new Base64(14);
      Base64.encodeBase64URLSafeString((byte[]) null);
      base64_0.avail();
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64.encodeBase64((byte[]) null, true, true);
      Base64.encodeBase64((byte[]) null, true, true, 64);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-90);
      base64_0.decode((byte[]) null);
      Base64.encodeBase64((byte[]) null, false);
      base64_0.isUrlSafe();
      Base64.encodeBase64String((byte[]) null);
      base64_0.encode((byte[]) null, 2043, (int) (byte)0);
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 544, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)0;
      Base64.decodeBase64(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 6, 3912);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[1];
      base64_0.decode((Object) "");
      Base64.decodeBase64("Input array too big, the output array would be bigger (");
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.longValueExact();
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      byteArray0[0] = (byte) (-77);
      base64_0.encodeToString(byteArray0);
      base64_0.encodeToString((byte[]) null);
      base64_0.readResults((byte[]) null, (byte) (-77), (byte) (-77));
      base64_0.encode((byte[]) null, 0, (int) (byte) (-77));
      bigInteger0.intValue();
      Base64.isArrayByteBase64(byteArray0);
      Base64.isBase64(byteArray1);
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.encodeBase64Chunked(byteArray1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte)18;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)47;
      base64_0.readResults(byteArray0, (byte)0, (byte)114);
      byte[] byteArray1 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)84;
      base64_0.encode(byteArray2, (int) (byte)84, 0);
      base64_0.encode(byteArray2, 0, 0);
      Base64.encodeBase64URLSafe(byteArray2);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Base64.isBase64((byte)101);
      String string0 = "";
      Base64.isBase64("");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)101;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false);
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64URLSafe(byteArray0);
      base64_0.decode(byteArray1);
      base64_0.decode("");
      Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)101;
      byteArray2[1] = (byte)101;
      byteArray2[2] = (byte)53;
      byteArray2[3] = (byte)63;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray2, 68, (int) (byte)53);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 68
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = true;
      Base64 base64_0 = new Base64((-208), byteArray0, true);
      byte[] byteArray1 = new byte[0];
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, (-208), 478);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -208
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte) (-102);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)23;
      byteArray1[1] = (byte) (-102);
      byteArray1[2] = (byte) (-102);
      byteArray1[3] = (byte)23;
      byteArray1[4] = (byte)23;
      byteArray1[5] = (byte)23;
      byteArray1[6] = (byte)58;
      Base64.encodeBase64URLSafe(byteArray1);
      Base64.isBase64("org.apache.commons.codec.DecoderException");
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte) (-19);
      byteArray0[4] = (byte)52;
      byte[] byteArray2 = base64_0.encode(byteArray0);
      base64_0.encode(byteArray2, (-1), (int) (byte)23);
      byteArray0[5] = (byte) (-77);
      byteArray0[6] = (byte)29;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      base64_0.decode(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray3 = new byte[4];
      byteArray3[0] = (byte)19;
      byteArray3[1] = (byte) (-77);
      byteArray3[2] = (byte)0;
      byteArray3[3] = (byte)29;
      base64_0.encode(byteArray3, (int) (byte)0, (int) (byte) (-77));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte byte0 = (byte)35;
      Base64.isBase64((byte)35);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)35;
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)35;
      byteArray0[4] = (byte)35;
      byteArray0[5] = (byte)35;
      byteArray0[6] = (byte)35;
      byteArray0[7] = (byte)35;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64(byteArray1, true);
      Base64 base64_0 = new Base64(0, byteArray1);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      Base64 base64_0 = new Base64(0, byteArray0, true);
      base64_0.decode(byteArray0, (int) (byte)0, (-1388));
      base64_0.decode("4");
      base64_0.decode(byteArray0);
      base64_0.encode(byteArray0, (int) (byte)0, (int) (byte) (-123));
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-123);
      byteArray1[4] = (byte) (-123);
      Base64.encodeBase64(byteArray1, true);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      Base64.isBase64((byte)0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-32);
      byteArray1[2] = (byte)0;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      base64_0.decode((Object) "");
      Base64.discardWhitespace(byteArray1);
      base64_0.encodeToString(byteArray2);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64((byte[]) null, true, true, 76);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte) (-123);
      byteArray0[4] = (byte) (-28);
      byteArray0[5] = (byte)96;
      byteArray0[6] = (byte)0;
      Base64.decodeBase64(byteArray0);
      base64_0.decode((byte[]) null, (-1416), 0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-53);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-84);
      byteArray1[3] = (byte)32;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)62;
      byteArray1[6] = (byte) (-27);
      byteArray1[7] = (byte)0;
      Base64.encodeBase64String(byteArray1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.decodeInteger(byteArray1);
      Base64.encodeBase64URLSafe(byteArray0);
      base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray0);
      Base64.isBase64(byteArray2);
      byte[] byteArray3 = new byte[8];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte)2;
      byteArray3[2] = (byte)34;
      byteArray3[3] = (byte)110;
      byteArray3[4] = (byte)1;
      byteArray3[5] = (byte)0;
      byteArray3[6] = (byte)0;
      byteArray3[7] = (byte)0;
      Base64.encodeBase64URLSafe(byteArray3);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Base64 base64_0 = new Base64(3714);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte) (-1);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)1;
      Base64.encodeBase64String(byteArray1);
      byteArray1[1] = (byte)121;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)17;
      byteArray1[4] = (byte)117;
      byteArray1[5] = (byte)121;
      byteArray1[6] = (byte)122;
      base64_0.encodeToString(byteArray1);
      Base64.encodeBase64Chunked(byteArray1);
      base64_0.hasData();
      Base64.isBase64((byte) (-111));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false);
      Base64.encodeBase64String(byteArray0);
      Base64.decodeInteger(byteArray1);
      Base64.isBase64("AA==");
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      Base64.discardWhitespace(byteArray2);
      Base64 base64_0 = new Base64(true);
      Base64.decodeBase64(byteArray2);
      Base64.isBase64("AA==");
      base64_0.encodeToString(byteArray1);
      base64_0.decode(byteArray0);
      Base64.discardWhitespace(byteArray1);
      try { 
        base64_0.encode((Object) "QUE9PQAA\u0000\u0000");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)20;
      byteArray0[0] = (byte)20;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      byteArray0[1] = (byte)40;
      Base64.encodeBase64String(byteArray1);
      byte byte1 = (byte) (-105);
      Base64.decodeInteger(byteArray1);
      byteArray0[2] = (byte) (-105);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 2824, 2824);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2824
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      byte byte0 = (byte) (-1);
      Base64.isBase64((byte) (-1));
      Base64 base64_0 = new Base64((byte) (-1), byteArray0, false);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.decodeInteger(byteArray0);
      base64_0.decode((Object) "");
      byte[] byteArray1 = base64_0.decode("");
      base64_0.isUrlSafe();
      Base64.isBase64("");
      Base64.discardWhitespace(byteArray1);
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte) (-1);
      byteArray2[1] = (byte) (-1);
      byteArray2[2] = (byte) (-1);
      byteArray2[3] = (byte) (-1);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray2, false, false, (-825));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of -825
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)19;
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte) (-109);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte)0;
      byte byte1 = (byte) (-1);
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte) (-117);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.divideAndRemainder(bigInteger1);
      Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0013\uFFFDP\uFFFD\u0000\uFFFD\u0000\uFFFD\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)0;
      Base64.decodeInteger(byteArray0);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      boolean boolean0 = false;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)0, byteArray1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [8wAAKwA=]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64((byte[]) null);
      Base64 base64_0 = new Base64(0);
      base64_0.encode((byte[]) null);
      Base64.encodeBase64((byte[]) null, false, false, 76);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64String((byte[]) null);
      Base64.decodeBase64((byte[]) null);
      int int0 = 0;
      Base64 base64_0 = new Base64(0, (byte[]) null, true);
      Object object0 = new Object();
      Base64.encodeBase64((byte[]) null, true);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte byte0 = (byte) (-71);
      Base64.isBase64((byte) (-71));
      Base64 base64_0 = new Base64(1);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)80;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000\uFFFD\u0001\u0000k\u0000P]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-24);
      byteArray0[6] = (byte) (-86);
      byteArray0[7] = (byte)5;
      byteArray0[8] = (byte)52;
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64("Parameter supplied to Base64 encode is not a byte[]");
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(48, byteArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [=\uFFFD\u0699\uFFFD^\uFFFD\u02E9\uFFFDX\uFFFDv\uFFFD\u0001j\u01FA\uFFFD\uFFFD\u0721\u05E2\uFFFDz-i\uFFFD\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)0;
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      Base64.encodeBase64(byteArray0, false);
      base64_0.isUrlSafe();
      byte[] byteArray2 = new byte[0];
      Base64.encodeBase64String(byteArray2);
      base64_0.encode(byteArray2, 0, (-1));
      base64_0.decode(byteArray1, 1, 112);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray1);
      assertEquals(4, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte)0;
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean0);
      
      byte[] byteArray1 = Base64.decodeBase64("");
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = Base64.decodeBase64("Input array too big, the output array would be bigger (");
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)99;
      Base64.encodeBase64URLSafeString(byteArray0);
      byteArray1[1] = (byte)79;
      byteArray1[2] = (byte)0;
      Base64.encodeBase64String(byteArray1);
      byteArray1[3] = (byte) (-83);
      byteArray1[4] = (byte)108;
      byteArray1[5] = (byte) (-26);
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte) (-1);
      byteArray2[2] = (byte)108;
      byteArray2[3] = (byte)79;
      byteArray2[4] = (byte) (-83);
      byteArray2[5] = (byte)108;
      byteArray2[6] = (byte)0;
      Base64.decodeInteger(byteArray2);
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte)89;
      Base64.isArrayByteBase64(byteArray1);
      base64_0.decode((Object) "Input array too big, the output array would be bigger (");
      Base64.isArrayByteBase64(byteArray1);
      try { 
        base64_0.encode((Object) "Inputarraytoobigtheoutputarraywouldbebiggeo");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-54);
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("yg==", string0);
      
      byte[] byteArray1 = new byte[1];
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte) (-54);
      byteArray2[2] = (byte) (-54);
      byteArray2[3] = (byte) (-54);
      byteArray2[4] = (byte) (-54);
      byteArray2[5] = (byte) (-54);
      byteArray2[6] = (byte) (-54);
      byteArray2[7] = (byte)37;
      byteArray2[8] = (byte) (-54);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2);
      assertEquals(12, byteArray3.length);
      
      byteArray1[0] = (byte) (-54);
      byte[] byteArray4 = base64_0.encode(byteArray1);
      assertArrayEquals(new byte[] {(byte)121, (byte)103, (byte)61, (byte)61}, byteArray4);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)61;
      byteArray0[0] = (byte)61;
      byte byte1 = (byte) (-39);
      byteArray0[1] = (byte) (-39);
      byte byte2 = (byte)110;
      byteArray0[2] = (byte)110;
      byte byte3 = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byte byte4 = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)8;
      Base64.decodeInteger(byteArray0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, false, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = base64_0.decode("encodeInteger called with null parameter");
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      //  // Unstable assertion: assertEquals(48, byteArray2.length);
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      //  // Unstable assertion: assertEquals((short) (-30557), bigInteger0.shortValue());
      
      Base64.decodeInteger(byteArray1);
      Base64.decodeBase64(byteArray1);
      Base64.decodeBase64(byteArray1);
      base64_0.decode("encodeInteger called with null parameter");
      byte[] byteArray3 = new byte[1];
      byteArray3[0] = (byte)0;
      byte[] byteArray4 = Base64.encodeBase64(byteArray3, true, true);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte) (-102), (byte)10}, byteArray4);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Base64 base64_0 = new Base64(14);
      Base64.encodeBase64URLSafeString((byte[]) null);
      base64_0.avail();
      Base64.encodeBase64URLSafe((byte[]) null);
      byte[] byteArray0 = Base64.encodeBase64URLSafe((byte[]) null);
      assertNull(byteArray0);
      
      Base64.encodeBase64((byte[]) null, true, true);
      Base64.encodeBase64((byte[]) null, true, true, 64);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-90);
      base64_0.decode((byte[]) null);
      byteArray1[1] = (byte) (-44);
      byteArray1[2] = (byte) (-52);
      Base64.encodeBase64Chunked((byte[]) null);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)0;
      byte[] byteArray2 = base64_0.encode(byteArray1);
      assertEquals(14, byteArray2.length);
      
      base64_0.decode("8i7");
      byte[] byteArray3 = base64_0.decode("8i7");
      assertArrayEquals(new byte[] {(byte) (-14), (byte)46}, byteArray3);
      
      boolean boolean0 = Base64.isBase64(byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = 74;
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64(74, (byte[]) null);
      base64_0.decode("");
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.gcd(bigInteger1);
      int int1 = (-1);
      BigInteger bigInteger2 = null;
      try {
        bigInteger2 = new BigInteger("14", (-1));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Radix out of range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-14);
      byteArray0[6] = (byte) (-18);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      assertEquals(14, byteArray1.length);
      
      Base64 base64_0 = new Base64((byte) (-14));
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)84;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)21;
      byte[] byteArray3 = base64_0.decode(byteArray2);
      assertEquals(0, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-102);
      Base64 base64_0 = new Base64((-1116), byteArray0, true);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-102);
      byteArray1[1] = (byte) (-102);
      byteArray1[2] = (byte) (-102);
      byteArray1[3] = (byte) (-102);
      byteArray1[4] = (byte) (-102);
      byteArray1[5] = (byte) (-102);
      byteArray1[6] = (byte) (-102);
      byteArray1[7] = (byte) (-102);
      base64_0.readResults(byteArray1, (-578), (byte) (-102));
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte) (-1);
      base64_0.decode((Object) "");
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte)0;
      byte byte0 = (byte)100;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      base64_0.encode(byteArray0);
      Base64.encodeInteger(bigInteger0);
      bigInteger0.negate();
      // Undeclared exception!
      try { 
        bigInteger0.byteValueExact();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger out of byte range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      assertEquals(14, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }
}
