/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 11:20:16 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Ingut array too big, the utp_t array woutd ba>bigger (");
      assertNotNull(byteArray0);
      assertEquals(31, byteArray0.length);
      
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(31, byteArray0.length);
      assertEquals(42, byteArray1.length);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      assertNotNull(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(31, byteArray0.length);
      assertEquals(42, byteArray1.length);
      assertEquals(56, byteArray2.length);
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray1);
      assertEquals("SW5ndXRhcnJheXRvb2JpZ3RoZXV0cF90YXJyYXl3b3V0ZGJhYmlnZ2Vn", string0);
      assertNotNull(string0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(31, byteArray0.length);
      assertEquals(42, byteArray1.length);
      
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray2, 85, 3439);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 85
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Input array too big, the output array would be bigger (");
      //  // Unstable assertion: assertNotNull(byteArray0);
      //  // Unstable assertion: assertEquals(32, byteArray0.length);
      
      Base64 base64_0 = new Base64(1591);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(base64_0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false, 8140);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertEquals(32, byteArray0.length);
      //  // Unstable assertion: assertEquals(46, byteArray1.length);
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      //  // Unstable assertion: assertEquals("Inputarraytoobigtheoutputarraywouldbebiggeo", string0);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertEquals(32, byteArray0.length);
      
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      //  // Unstable assertion: assertEquals((short)15114, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertNotNull(bigInteger0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(32, byteArray0.length);
      //  // Unstable assertion: assertEquals(46, byteArray1.length);
      
      int int0 = bigInteger0.getLowestSetBit();
      //  // Unstable assertion: assertEquals(1, int0);
      //  // Unstable assertion: assertEquals((short)15114, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertEquals(32, byteArray0.length);
      //  // Unstable assertion: assertEquals(46, byteArray1.length);
      
      BigInteger bigInteger1 = BigInteger.TEN;
      //  // Unstable assertion: assertEquals((byte)10, bigInteger1.byteValue());
      //  // Unstable assertion: assertEquals((short)10, bigInteger1.shortValue());
      //  // Unstable assertion: assertNotNull(bigInteger1);
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger0));
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger0);
      
      BigInteger bigInteger2 = bigInteger1.not();
      //  // Unstable assertion: assertEquals((byte)10, bigInteger1.byteValue());
      //  // Unstable assertion: assertEquals((short)10, bigInteger1.shortValue());
      //  // Unstable assertion: assertEquals((byte) (-11), bigInteger2.byteValue());
      //  // Unstable assertion: assertEquals((short) (-11), bigInteger2.shortValue());
      //  // Unstable assertion: assertNotNull(bigInteger2);
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger0));
      //  // Unstable assertion: assertFalse(bigInteger2.equals((Object)bigInteger0));
      //  // Unstable assertion: assertFalse(bigInteger2.equals((Object)bigInteger1));
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger0);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger2);
      //  // Unstable assertion: assertNotSame(bigInteger2, bigInteger0);
      //  // Unstable assertion: assertNotSame(bigInteger2, bigInteger1);
      
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      //  // Unstable assertion: assertEquals((short)15114, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger2));
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger2);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertEquals(32, byteArray0.length);
      //  // Unstable assertion: assertEquals(46, byteArray1.length);
      //  // Unstable assertion: assertEquals(64, byteArray2.length);
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray2);
      //  // Unstable assertion: assertEquals((short)15114, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger2));
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger2);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertEquals(32, byteArray0.length);
      //  // Unstable assertion: assertEquals(46, byteArray1.length);
      //  // Unstable assertion: assertEquals(64, byteArray2.length);
      //  // Unstable assertion: assertEquals(88, byteArray3.length);
      
      String string1 = Base64.encodeBase64URLSafeString(byteArray3);
      //  // Unstable assertion: assertEquals("VTFjMWQyUllVbWhqYmtwb1pWaFNkbUl5U25CYU0xSnZXbGM1TVdSSVFqRmtSMFo1WTIxR05XUXlPVEZpUjFKcFdsZEtjRm95Wkd4aWVqQTNRMmM5UFE9PQ", string1);
      //  // Unstable assertion: assertEquals((short)15114, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger2));
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger2);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertEquals(32, byteArray0.length);
      //  // Unstable assertion: assertEquals(46, byteArray1.length);
      //  // Unstable assertion: assertEquals(64, byteArray2.length);
      //  // Unstable assertion: assertEquals(88, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("dpSiI>#Edy_@,");
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)118, (byte) (-108), (byte) (-94), (byte)32, (byte)71, (byte)114}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      Base64 base64_0 = new Base64(73);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 1415);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)118, (byte) (-108), (byte) (-94), (byte)32, (byte)71, (byte)114}, byteArray0);
      assertArrayEquals(new byte[] {(byte)100, (byte)112, (byte)83, (byte)105, (byte)73, (byte)69, (byte)100, (byte)121}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(8, byteArray1.length);
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("dpSiIEdy", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)118, (byte) (-108), (byte) (-94), (byte)32, (byte)71, (byte)114}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertEquals(6, byteArray0.length);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      int int0 = bigInteger0.getLowestSetBit();
      assertEquals(1, int0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      BigInteger bigInteger1 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      
      BigInteger bigInteger2 = bigInteger0.not();
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte) (-11), bigInteger2.byteValue());
      assertEquals((short) (-11), bigInteger2.shortValue());
      assertNotNull(bigInteger2);
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertNotSame(bigInteger0, bigInteger2);
      assertSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger0);
      
      BigInteger bigInteger3 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger3.byteValue());
      assertEquals((short)10, bigInteger3.shortValue());
      assertNotNull(bigInteger3);
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertSame(bigInteger3, bigInteger0);
      assertNotSame(bigInteger3, bigInteger2);
      assertSame(bigInteger3, bigInteger1);
      
      byte[] byteArray2 = Base64.encodeInteger(bigInteger1);
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray2);
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertSame(bigInteger1, bigInteger3);
      assertSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(4, byteArray2.length);
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray2);
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray2);
      assertArrayEquals(new byte[] {(byte)81, (byte)50, (byte)99, (byte)57, (byte)80, (byte)81, (byte)61, (byte)61}, byteArray3);
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertSame(bigInteger1, bigInteger3);
      assertSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertEquals(4, byteArray2.length);
      assertEquals(8, byteArray3.length);
      
      String string1 = Base64.encodeBase64URLSafeString(byteArray3);
      assertEquals("UTJjOVBRPT0", string1);
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray2);
      assertArrayEquals(new byte[] {(byte)81, (byte)50, (byte)99, (byte)57, (byte)80, (byte)81, (byte)61, (byte)61}, byteArray3);
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(string1.equals((Object)string0));
      assertSame(bigInteger1, bigInteger3);
      assertSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertEquals(4, byteArray2.length);
      assertEquals(8, byteArray3.length);
      
      byte[] byteArray4 = Base64.discardWhitespace(byteArray0);
      assertNotNull(byteArray4);
      assertArrayEquals(new byte[] {(byte)118, (byte) (-108), (byte) (-94), (byte)32, (byte)71, (byte)114}, byteArray0);
      assertArrayEquals(new byte[] {(byte)118, (byte) (-108), (byte) (-94), (byte)71, (byte)114}, byteArray4);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray3);
      assertEquals(6, byteArray0.length);
      assertEquals(5, byteArray4.length);
      
      try { 
        base64_0.decode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Input array too big, the output array would be bigger (");
      assertNotNull(byteArray0);
      assertEquals(32, byteArray0.length);
      
      Base64 base64_0 = new Base64(1591);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 8140);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(32, byteArray0.length);
      assertEquals(44, byteArray1.length);
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("Inputarraytoobigtheoutputarraywouldbebiggeo", string0);
      assertNotNull(string0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertEquals(32, byteArray0.length);
      
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      assertEquals((short)28477, bigInteger0.shortValue());
      assertEquals((byte)61, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(32, byteArray0.length);
      assertEquals(44, byteArray1.length);
      
      int int0 = Base64.MIME_CHUNK_SIZE;
      assertEquals(76, int0);
      
      BigInteger bigInteger1 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger1, bigInteger0);
      
      BigInteger bigInteger2 = bigInteger1.not();
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals((short) (-11), bigInteger2.shortValue());
      assertEquals((byte) (-11), bigInteger2.byteValue());
      assertNotNull(bigInteger2);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      
      BigInteger bigInteger3 = BigInteger.TEN;
      assertEquals((short)10, bigInteger3.shortValue());
      assertEquals((byte)10, bigInteger3.byteValue());
      assertNotNull(bigInteger3);
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertNotSame(bigInteger3, bigInteger0);
      assertNotSame(bigInteger3, bigInteger2);
      assertSame(bigInteger3, bigInteger1);
      
      String string1 = bigInteger1.toString();
      assertEquals("10", string1);
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertNotNull(string1);
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(bigInteger1, bigInteger2);
      assertSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger1, bigInteger0);
      
      byte[] byteArray2 = Base64.encodeInteger(bigInteger1);
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray2);
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(bigInteger1, bigInteger2);
      assertSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(4, byteArray2.length);
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray0);
      assertNotNull(byteArray3);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertEquals(32, byteArray0.length);
      assertEquals(44, byteArray3.length);
      
      String string2 = Base64.encodeBase64URLSafeString(byteArray2);
      assertEquals("Q2c9PQ", string2);
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertNotNull(string2);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray2);
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(bigInteger1, bigInteger2);
      assertSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(4, byteArray2.length);
      
      byte[] byteArray4 = Base64.discardWhitespace(byteArray2);
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertNotNull(byteArray4);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray2);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray4);
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertNotSame(bigInteger1, bigInteger2);
      assertSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray0);
      assertEquals(4, byteArray2.length);
      assertEquals(4, byteArray4.length);
      
      Object object0 = base64_0.decode((Object) "Input array too big, the output array would be bigger (");
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(object0);
      
      try { 
        base64_0.encode((Object) "Q2c9PQ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte) (-20);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-52);
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)9, (byte) (-27), (byte)76, (byte)44, (byte) (-20), (byte) (-1), (byte)0, (byte) (-52)}, byteArray0);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Ingut array too big, the outp_t array would ba bigger (");
      assertNotNull(byteArray0);
      assertEquals(32, byteArray0.length);
      
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 76);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(32, byteArray0.length);
      assertEquals(44, byteArray1.length);
      
      Base64 base64_1 = new Base64();
      assertFalse(base64_1.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_1);
      assertFalse(base64_1.equals((Object)base64_0));
      
      base64_1.decode(byteArray1, 10, 64);
      assertFalse(base64_1.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(base64_1.equals((Object)base64_0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(base64_1, base64_0);
      assertEquals(32, byteArray0.length);
      assertEquals(44, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Ingut array too big, the utp_t array woutd ba>bigger (");
      //  // Unstable assertion: assertNotNull(byteArray0);
      //  // Unstable assertion: assertEquals(31, byteArray0.length);
      
      Base64 base64_0 = new Base64(1609);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(base64_0);
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      //  // Unstable assertion: assertEquals((short) (-29060), bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)124, bigInteger0.byteValue());
      //  // Unstable assertion: assertNotNull(bigInteger0);
      //  // Unstable assertion: assertEquals(31, byteArray0.length);
      
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      //  // Unstable assertion: assertEquals((short)8314, bigInteger1.shortValue());
      //  // Unstable assertion: assertEquals((byte)122, bigInteger1.byteValue());
      //  // Unstable assertion: assertNotNull(bigInteger1);
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger0));
      //  // Unstable assertion: assertEquals(31, byteArray0.length);
      
      int int0 = bigInteger1.getLowestSetBit();
      //  // Unstable assertion: assertEquals(1, int0);
      //  // Unstable assertion: assertEquals((short)8314, bigInteger1.shortValue());
      //  // Unstable assertion: assertEquals((byte)122, bigInteger1.byteValue());
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger0));
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger0);
      //  // Unstable assertion: assertEquals(31, byteArray0.length);
      
      BigInteger bigInteger2 = BigInteger.TEN;
      //  // Unstable assertion: assertEquals((byte)10, bigInteger2.byteValue());
      //  // Unstable assertion: assertEquals((short)10, bigInteger2.shortValue());
      //  // Unstable assertion: assertNotNull(bigInteger2);
      //  // Unstable assertion: assertFalse(bigInteger2.equals((Object)bigInteger1));
      //  // Unstable assertion: assertFalse(bigInteger2.equals((Object)bigInteger0));
      //  // Unstable assertion: assertNotSame(bigInteger2, bigInteger1);
      //  // Unstable assertion: assertNotSame(bigInteger2, bigInteger0);
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      //  // Unstable assertion: assertEquals("Ingutarraytoobigtheutp_tarraywoutdbabiggeg", string0);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals(31, byteArray0.length);
      
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertEquals(31, byteArray0.length);
      //  // Unstable assertion: assertEquals(42, byteArray1.length);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertEquals(31, byteArray0.length);
      //  // Unstable assertion: assertEquals(42, byteArray1.length);
      //  // Unstable assertion: assertEquals(56, byteArray2.length);
      
      String string1 = Base64.encodeBase64URLSafeString(byteArray2);
      //  // Unstable assertion: assertEquals("U1c1bmRYUmhjbkpoZVhSdmIySnBaM1JvWlhWMGNGOTBZWEp5WVhsM2IzVjBaR0poWW1sbloyVm4", string1);
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertEquals(31, byteArray0.length);
      //  // Unstable assertion: assertEquals(42, byteArray1.length);
      //  // Unstable assertion: assertEquals(56, byteArray2.length);
      
      byte[] byteArray3 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)59, (byte)10}, byteArray3);
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertEquals(2, byteArray3.length);
      
      byte[] byteArray4 = base64_0.encode(byteArray2);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertEquals(31, byteArray0.length);
      //  // Unstable assertion: assertEquals(42, byteArray1.length);
      //  // Unstable assertion: assertEquals(56, byteArray2.length);
      //  // Unstable assertion: assertEquals(78, byteArray4.length);
      
      boolean boolean0 = Base64.isArrayByteBase64(byteArray3);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)59, (byte)10}, byteArray3);
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray4));
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray4);
      //  // Unstable assertion: assertEquals(2, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-57), byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      Object object0 = base64_0.decode((Object) "~dn");
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(object0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotSame(byteArray0, object0);
      assertEquals(0, byteArray0.length);
      
      // Undeclared exception!
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Ingut array too big, the outp_t array would ba bigger (");
      assertNotNull(byteArray0);
      assertEquals(32, byteArray0.length);
      
      Base64 base64_0 = new Base64(1609);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((byte)104, bigInteger0.byteValue());
      assertEquals((short) (-28312), bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      assertEquals(32, byteArray0.length);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 76);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(32, byteArray0.length);
      assertEquals(44, byteArray1.length);
      
      BigInteger bigInteger1 = new BigInteger(byteArray1);
      assertEquals((short)28477, bigInteger1.shortValue());
      assertEquals((byte)61, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals(32, byteArray0.length);
      assertEquals(44, byteArray1.length);
      
      int int0 = bigInteger1.getLowestSetBit();
      assertEquals(0, int0);
      assertEquals((short)28477, bigInteger1.shortValue());
      assertEquals((byte)61, bigInteger1.byteValue());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals(32, byteArray0.length);
      assertEquals(44, byteArray1.length);
      
      Base64 base64_1 = new Base64();
      assertFalse(base64_1.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_1);
      assertFalse(base64_1.equals((Object)base64_0));
      
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 17, 17);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Input array too big, the output array would be bigger (");
      assertNotNull(byteArray0);
      assertEquals(32, byteArray0.length);
      
      Base64 base64_0 = new Base64(1609);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 8140);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(32, byteArray0.length);
      assertEquals(44, byteArray1.length);
      
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      assertEquals((byte)61, bigInteger0.byteValue());
      assertEquals((short)28477, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(32, byteArray0.length);
      assertEquals(44, byteArray1.length);
      
      int int0 = bigInteger0.getLowestSetBit();
      assertEquals(0, int0);
      assertEquals((byte)61, bigInteger0.byteValue());
      assertEquals((short)28477, bigInteger0.shortValue());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(32, byteArray0.length);
      assertEquals(44, byteArray1.length);
      
      BigInteger bigInteger1 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger1, bigInteger0);
      
      BigInteger bigInteger2 = bigInteger1.not();
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals((byte) (-11), bigInteger2.byteValue());
      assertEquals((short) (-11), bigInteger2.shortValue());
      assertNotNull(bigInteger2);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      
      BigInteger bigInteger3 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger3.byteValue());
      assertEquals((short)10, bigInteger3.shortValue());
      assertNotNull(bigInteger3);
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertNotSame(bigInteger3, bigInteger0);
      assertNotSame(bigInteger3, bigInteger2);
      assertSame(bigInteger3, bigInteger1);
      
      byte[] byteArray2 = Base64.encodeInteger(bigInteger1);
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray2);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger2);
      assertSame(bigInteger1, bigInteger3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(4, byteArray2.length);
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray0);
      assertNotNull(byteArray3);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertEquals(32, byteArray0.length);
      assertEquals(44, byteArray3.length);
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray2);
      assertEquals("Q2c9PQ", string0);
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray2);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger2);
      assertSame(bigInteger1, bigInteger3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray3);
      assertEquals(4, byteArray2.length);
      
      base64_0.decode(byteArray1, 0, 1609);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertEquals(32, byteArray0.length);
      assertEquals(44, byteArray1.length);
      
      int int1 = base64_0.avail();
      assertEquals(32, int1);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(int1 == int0);
      
      byte[] byteArray4 = Base64.toIntegerBytes(bigInteger3);
      assertEquals((byte)10, bigInteger3.byteValue());
      assertEquals((short)10, bigInteger3.shortValue());
      assertNotNull(byteArray4);
      assertArrayEquals(new byte[] {(byte)10}, byteArray4);
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertNotSame(bigInteger3, bigInteger0);
      assertNotSame(bigInteger3, bigInteger2);
      assertSame(bigInteger3, bigInteger1);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray3);
      assertEquals(1, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Input array too big, the output array would be bigger (");
      //  // Unstable assertion: assertNotNull(byteArray0);
      //  // Unstable assertion: assertEquals(32, byteArray0.length);
      
      Base64 base64_0 = new Base64(1609);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(base64_0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false, 8140);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertEquals(32, byteArray0.length);
      //  // Unstable assertion: assertEquals(46, byteArray1.length);
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      //  // Unstable assertion: assertEquals("Inputarraytoobigtheoutputarraywouldbebiggeo", string0);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertEquals(32, byteArray0.length);
      
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      //  // Unstable assertion: assertEquals((short)15114, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertNotNull(bigInteger0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(32, byteArray0.length);
      //  // Unstable assertion: assertEquals(46, byteArray1.length);
      
      int int0 = bigInteger0.getLowestSetBit();
      //  // Unstable assertion: assertEquals(1, int0);
      //  // Unstable assertion: assertEquals((short)15114, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertEquals(32, byteArray0.length);
      //  // Unstable assertion: assertEquals(46, byteArray1.length);
      
      BigInteger bigInteger1 = BigInteger.TEN;
      //  // Unstable assertion: assertEquals((byte)10, bigInteger1.byteValue());
      //  // Unstable assertion: assertEquals((short)10, bigInteger1.shortValue());
      //  // Unstable assertion: assertNotNull(bigInteger1);
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger0));
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger0);
      
      BigInteger bigInteger2 = bigInteger1.not();
      //  // Unstable assertion: assertEquals((byte)10, bigInteger1.byteValue());
      //  // Unstable assertion: assertEquals((short)10, bigInteger1.shortValue());
      //  // Unstable assertion: assertEquals((byte) (-11), bigInteger2.byteValue());
      //  // Unstable assertion: assertEquals((short) (-11), bigInteger2.shortValue());
      //  // Unstable assertion: assertNotNull(bigInteger2);
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger0));
      //  // Unstable assertion: assertFalse(bigInteger2.equals((Object)bigInteger0));
      //  // Unstable assertion: assertFalse(bigInteger2.equals((Object)bigInteger1));
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger2);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger0);
      //  // Unstable assertion: assertNotSame(bigInteger2, bigInteger0);
      //  // Unstable assertion: assertNotSame(bigInteger2, bigInteger1);
      
      BigInteger bigInteger3 = BigInteger.TEN;
      //  // Unstable assertion: assertEquals((byte)10, bigInteger3.byteValue());
      //  // Unstable assertion: assertEquals((short)10, bigInteger3.shortValue());
      //  // Unstable assertion: assertNotNull(bigInteger3);
      //  // Unstable assertion: assertFalse(bigInteger3.equals((Object)bigInteger2));
      //  // Unstable assertion: assertFalse(bigInteger3.equals((Object)bigInteger0));
      //  // Unstable assertion: assertNotSame(bigInteger3, bigInteger2);
      //  // Unstable assertion: assertSame(bigInteger3, bigInteger1);
      //  // Unstable assertion: assertNotSame(bigInteger3, bigInteger0);
      
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)59, (byte)10}, byteArray2);
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertEquals(2, byteArray2.length);
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray0);
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertEquals(32, byteArray0.length);
      //  // Unstable assertion: assertEquals(44, byteArray3.length);
      
      String string1 = Base64.encodeBase64URLSafeString(byteArray2);
      //  // Unstable assertion: assertEquals("Owo", string1);
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)59, (byte)10}, byteArray2);
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertEquals(2, byteArray2.length);
      
      base64_0.decode(byteArray1, 1, 1609);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertEquals(32, byteArray0.length);
      //  // Unstable assertion: assertEquals(46, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Input array too big, the output array would be bigger (");
      assertNotNull(byteArray0);
      assertEquals(32, byteArray0.length);
      
      Base64 base64_0 = new Base64(1609);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 8140);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(32, byteArray0.length);
      assertEquals(44, byteArray1.length);
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("Inputarraytoobigtheoutputarraywouldbebiggeo", string0);
      assertNotNull(string0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertEquals(32, byteArray0.length);
      
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      assertEquals((byte)61, bigInteger0.byteValue());
      assertEquals((short)28477, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(32, byteArray0.length);
      assertEquals(44, byteArray1.length);
      
      int int0 = bigInteger0.getLowestSetBit();
      assertEquals(0, int0);
      assertEquals((byte)61, bigInteger0.byteValue());
      assertEquals((short)28477, bigInteger0.shortValue());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(32, byteArray0.length);
      assertEquals(44, byteArray1.length);
      
      BigInteger bigInteger1 = BigInteger.TEN;
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals((byte)10, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger1, bigInteger0);
      
      BigInteger bigInteger2 = bigInteger1.not();
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((byte) (-11), bigInteger2.byteValue());
      assertEquals((short) (-11), bigInteger2.shortValue());
      assertNotNull(bigInteger2);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      
      BigInteger bigInteger3 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger3.byteValue());
      assertEquals((short)10, bigInteger3.shortValue());
      assertNotNull(bigInteger3);
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertSame(bigInteger3, bigInteger1);
      assertNotSame(bigInteger3, bigInteger2);
      assertNotSame(bigInteger3, bigInteger0);
      
      byte[] byteArray2 = Base64.encodeInteger(bigInteger1);
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals((byte)10, bigInteger1.byteValue());
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray2);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(4, byteArray2.length);
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray0);
      assertNotNull(byteArray3);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertEquals(32, byteArray0.length);
      assertEquals(44, byteArray3.length);
      
      String string1 = Base64.encodeBase64URLSafeString(byteArray2);
      assertEquals("Q2c9PQ", string1);
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals((byte)10, bigInteger1.byteValue());
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray2);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(string1.equals((Object)string0));
      assertSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(4, byteArray2.length);
      
      base64_0.decode(byteArray1, 0, 1609);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertEquals(32, byteArray0.length);
      assertEquals(44, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      boolean boolean0 = Base64.isBase64((byte)61);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = null;
      boolean boolean0 = false;
      byte[] byteArray1 = Base64.encodeBase64((byte[]) null, false, false);
      assertNull(byteArray1);
      
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertNotNull(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)59, (byte)10}, byteArray0);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      
      byte[] byteArray1 = new byte[3];
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-13);
      byte byte0 = (byte)6;
      byteArray1[1] = (byte)6;
      byte byte1 = (byte)80;
      byteArray1[2] = (byte)80;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, true, (int) (byte)6);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-13), (byte)6, (byte)80}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)56, (byte)119, (byte)90, (byte)81}, byteArray2);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertEquals(3, byteArray1.length);
      //  // Unstable assertion: assertEquals(4, byteArray2.length);
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      //  // Unstable assertion: assertEquals("Owo", string0);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)59, (byte)10}, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      //  // Unstable assertion: assertEquals((short)15114, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertNotNull(bigInteger0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)59, (byte)10}, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      
      int int0 = bigInteger0.getLowestSetBit();
      //  // Unstable assertion: assertEquals(1, int0);
      //  // Unstable assertion: assertEquals((short)15114, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)59, (byte)10}, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      
      BigInteger bigInteger1 = BigInteger.TEN;
      //  // Unstable assertion: assertEquals((byte)10, bigInteger1.byteValue());
      //  // Unstable assertion: assertEquals((short)10, bigInteger1.shortValue());
      //  // Unstable assertion: assertNotNull(bigInteger1);
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger0));
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger0);
      
      BigInteger bigInteger2 = bigInteger0.not();
      //  // Unstable assertion: assertEquals((short)15114, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short) (-15115), bigInteger2.shortValue());
      //  // Unstable assertion: assertEquals((byte) (-11), bigInteger2.byteValue());
      //  // Unstable assertion: assertNotNull(bigInteger2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)59, (byte)10}, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger1));
      //  // Unstable assertion: assertFalse(bigInteger2.equals((Object)bigInteger1));
      //  // Unstable assertion: assertFalse(bigInteger2.equals((Object)bigInteger0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger2);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertNotSame(bigInteger2, bigInteger1);
      //  // Unstable assertion: assertNotSame(bigInteger2, bigInteger0);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      
      BigInteger bigInteger3 = BigInteger.TEN;
      //  // Unstable assertion: assertEquals((short)10, bigInteger3.shortValue());
      //  // Unstable assertion: assertEquals((byte)10, bigInteger3.byteValue());
      //  // Unstable assertion: assertNotNull(bigInteger3);
      //  // Unstable assertion: assertFalse(bigInteger3.equals((Object)bigInteger0));
      //  // Unstable assertion: assertFalse(bigInteger3.equals((Object)bigInteger2));
      //  // Unstable assertion: assertNotSame(bigInteger3, bigInteger0);
      //  // Unstable assertion: assertSame(bigInteger3, bigInteger1);
      //  // Unstable assertion: assertNotSame(bigInteger3, bigInteger2);
      
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      //  // Unstable assertion: assertEquals((short)15114, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)59, (byte)10}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)79, (byte)119, (byte)111, (byte)61}, byteArray3);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger2));
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger1));
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger3));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger2);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger3);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals(4, byteArray3.length);
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray2);
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-13), (byte)6, (byte)80}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)56, (byte)119, (byte)90, (byte)81}, byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)79, (byte)72, (byte)100, (byte)97, (byte)85, (byte)81, (byte)61, (byte)61}, byteArray4);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertEquals(3, byteArray1.length);
      //  // Unstable assertion: assertEquals(4, byteArray2.length);
      //  // Unstable assertion: assertEquals(8, byteArray4.length);
      
      String string1 = Base64.encodeBase64URLSafeString(byteArray0);
      //  // Unstable assertion: assertEquals("Owo", string1);
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)59, (byte)10}, byteArray0);
      //  // Unstable assertion: assertTrue(string1.equals((Object)string0));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      
      Base64 base64_0 = new Base64(false);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(base64_0);
      
      Object object0 = base64_0.decode((Object) "DQo");
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(object0);
      
      try { 
        base64_0.encode((Object) bigInteger2);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray1);
      //  // Unstable assertion: assertSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertEquals(0, byteArray0.length);
      //  // Unstable assertion: assertEquals(0, byteArray1.length);
      
      Base64 base64_0 = new Base64(30, byteArray0, false);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray0);
      //  // Unstable assertion: assertEquals(0, byteArray0.length);
      
      byte[] byteArray2 = base64_0.encode(byteArray1);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray2);
      //  // Unstable assertion: assertSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertEquals(0, byteArray0.length);
      //  // Unstable assertion: assertEquals(0, byteArray1.length);
      //  // Unstable assertion: assertEquals(0, byteArray2.length);
      
      int int0 = base64_0.readResults(byteArray2, 1, 1);
      //  // Unstable assertion: assertEquals(0, int0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray2);
      //  // Unstable assertion: assertSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertEquals(0, byteArray0.length);
      //  // Unstable assertion: assertEquals(0, byteArray1.length);
      //  // Unstable assertion: assertEquals(0, byteArray2.length);
      
      byte[] byteArray3 = base64_0.decode("");
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray3);
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertEquals(0, byteArray0.length);
      //  // Unstable assertion: assertEquals(0, byteArray3.length);
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray0, true, false, 64);
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray4);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertEquals(0, byteArray0.length);
      //  // Unstable assertion: assertEquals(0, byteArray4.length);
      
      byte[] byteArray5 = new byte[4];
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray1));
      
      byteArray5[0] = (byte) (-64);
      byteArray5[1] = (byte)41;
      byteArray5[2] = (byte)52;
      byteArray5[3] = (byte)18;
      byte[] byteArray6 = Base64.encodeBase64(byteArray5, true, false, (int) (byte)52);
      //  // Unstable assertion: assertNotNull(byteArray6);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-64), (byte)41, (byte)52, (byte)18}, byteArray5);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)119, (byte)67, (byte)107, (byte)48, (byte)69, (byte)103, (byte)61, (byte)61, (byte)59, (byte)10}, byteArray6);
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray2));
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray2);
      //  // Unstable assertion: assertEquals(4, byteArray5.length);
      //  // Unstable assertion: assertEquals(10, byteArray6.length);
      
      int int1 = base64_0.readResults(byteArray2, (byte)18, (-1680));
      //  // Unstable assertion: assertEquals(0, int1);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray2);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray6));
      //  // Unstable assertion: assertTrue(int1 == int0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray5);
      //  // Unstable assertion: assertSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray6);
      //  // Unstable assertion: assertSame(byteArray2, byteArray4);
      //  // Unstable assertion: assertSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray6);
      //  // Unstable assertion: assertEquals(0, byteArray0.length);
      //  // Unstable assertion: assertEquals(0, byteArray1.length);
      //  // Unstable assertion: assertEquals(0, byteArray2.length);
      
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray5);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)125;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)32, (byte)1, (byte)1, (byte)61, (byte)6, (byte) (-1), (byte)2, (byte)125}, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)61, (byte)6, (byte) (-1), (byte)2, (byte)125}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(7, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(true);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray0 = base64_0.decode("");
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      byte[] byteArray1 = Base64.decodeBase64("");
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = null;
      boolean boolean1 = Base64.isBase64("");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      base64_0.encode((byte[]) null, (-1542), (-1542));
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, 2918, 2918);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertNotNull(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)59, (byte)10}, byteArray0);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)10, bigInteger0.shortValue());
      //  // Unstable assertion: assertNotNull(bigInteger0);
      
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)10, bigInteger0.shortValue());
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertEquals(4, byteArray1.length);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)10, bigInteger0.shortValue());
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)81, (byte)50, (byte)99, (byte)57, (byte)80, (byte)81, (byte)61, (byte)61}, byteArray2);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertEquals(4, byteArray1.length);
      //  // Unstable assertion: assertEquals(8, byteArray2.length);
      
      byte[] byteArray3 = new byte[1];
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      
      byteArray3[0] = (byte)9;
      String string0 = Base64.encodeBase64URLSafeString(byteArray3);
      //  // Unstable assertion: assertEquals("CQ", string0);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)9}, byteArray3);
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertEquals(1, byteArray3.length);
      
      byte[] byteArray4 = Base64.discardWhitespace(byteArray3);
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)9}, byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray4);
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertEquals(1, byteArray3.length);
      //  // Unstable assertion: assertEquals(0, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Base64 base64_0 = new Base64((-788));
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Base64 base64_0 = new Base64(13);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-92);
      byteArray0[7] = (byte)12;
      byteArray0[8] = (byte)1;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-21), (byte) (-32), (byte)13, (byte)91, (byte)16, (byte)0, (byte) (-92), (byte)12, (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = new byte[6];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = (byte)0;
      base64_0.encode(byteArray2, (int) (byte) (-32), (int) (byte) (-21));
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(6, byteArray2.length);
      
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, 24, (byte)12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)10}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      boolean boolean0 = Base64.isBase64((byte)127);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Input array too big, the output array would be bigger (");
      //  // Unstable assertion: assertNotNull(byteArray0);
      //  // Unstable assertion: assertEquals(32, byteArray0.length);
      
      Base64 base64_0 = new Base64(1591);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(base64_0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 8140);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertEquals(32, byteArray0.length);
      //  // Unstable assertion: assertEquals(44, byteArray1.length);
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      //  // Unstable assertion: assertEquals("Inputarraytoobigtheoutputarraywouldbebiggeo", string0);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertEquals(32, byteArray0.length);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false, 76);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertEquals(32, byteArray0.length);
      //  // Unstable assertion: assertEquals(44, byteArray1.length);
      //  // Unstable assertion: assertEquals(60, byteArray2.length);
      
      String string1 = Base64.encodeBase64URLSafeString(byteArray0);
      //  // Unstable assertion: assertEquals("Inputarraytoobigtheoutputarraywouldbebiggeo", string1);
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertTrue(string1.equals((Object)string0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertEquals(32, byteArray0.length);
      
      byte[] byteArray3 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)59, (byte)10}, byteArray3);
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertEquals(2, byteArray3.length);
      
      byte[] byteArray4 = Base64.encodeBase64URLSafe(byteArray1);
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertEquals(32, byteArray0.length);
      //  // Unstable assertion: assertEquals(44, byteArray1.length);
      //  // Unstable assertion: assertEquals(59, byteArray4.length);
      
      byte[] byteArray5 = Base64.encodeBase64(byteArray4);
      //  // Unstable assertion: assertNotNull(byteArray5);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray2));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray2);
      //  // Unstable assertion: assertEquals(32, byteArray0.length);
      //  // Unstable assertion: assertEquals(44, byteArray1.length);
      //  // Unstable assertion: assertEquals(59, byteArray4.length);
      //  // Unstable assertion: assertEquals(80, byteArray5.length);
      
      String string2 = Base64.encodeBase64URLSafeString(byteArray0);
      //  // Unstable assertion: assertEquals("Inputarraytoobigtheoutputarraywouldbebiggeo", string2);
      //  // Unstable assertion: assertNotNull(string2);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertTrue(string2.equals((Object)string0));
      //  // Unstable assertion: assertTrue(string2.equals((Object)string1));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertEquals(32, byteArray0.length);
      
      byte[] byteArray6 = Base64.decodeBase64("Inputarraytoobigtheoutputarraywouldbebiggeo");
      //  // Unstable assertion: assertNotNull(byteArray6);
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray4));
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray4);
      //  // Unstable assertion: assertEquals(32, byteArray6.length);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Input array too bigV the output array would be bigger (");
      assertNotNull(byteArray0);
      assertEquals(33, byteArray0.length);
      
      Base64 base64_0 = new Base64(1591);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 8140);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(33, byteArray0.length);
      assertEquals(44, byteArray1.length);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = new BigInteger(byteArray1);
      assertEquals((short)25970, bigInteger1.shortValue());
      assertEquals((byte)114, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals(33, byteArray0.length);
      assertEquals(44, byteArray1.length);
      
      BigInteger bigInteger2 = bigInteger1.mod(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)25970, bigInteger1.shortValue());
      assertEquals((byte)114, bigInteger1.byteValue());
      assertEquals((short)2, bigInteger2.shortValue());
      assertEquals((byte)2, bigInteger2.byteValue());
      assertNotNull(bigInteger2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger0);
      assertEquals(33, byteArray0.length);
      assertEquals(44, byteArray1.length);
      
      byte[] byteArray2 = Base64.encodeInteger(bigInteger1);
      assertEquals((short)25970, bigInteger1.shortValue());
      assertEquals((byte)114, bigInteger1.byteValue());
      assertNotNull(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(33, byteArray0.length);
      assertEquals(44, byteArray1.length);
      assertEquals(60, byteArray2.length);
      
      base64_0.encode(byteArray0, 94, 0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(33, byteArray0.length);
      
      boolean boolean0 = Base64.isBase64("Input array too bigV the output array would be bigger (");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Input array too big, the output array would be bigger (");
      assertNotNull(byteArray0);
      assertEquals(32, byteArray0.length);
      
      Base64 base64_0 = new Base64((-1));
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((short)30998, bigInteger0.shortValue());
      assertEquals((byte)22, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      assertEquals(32, byteArray0.length);
      
      BigInteger bigInteger1 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger1, bigInteger0);
      
      base64_0.encode(byteArray0, (int) (byte) (-57), (int) (byte) (-57));
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(32, byteArray0.length);
      
      Base64 base64_1 = new Base64();
      assertFalse(base64_1.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_1);
      assertFalse(base64_1.equals((Object)base64_0));
      
      String string0 = base64_1.encodeToString(byteArray0);
      assertEquals("Inputarraytoobigtheoutputarraywouldbebiggeo=", string0);
      assertFalse(base64_1.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(string0);
      assertFalse(base64_1.equals((Object)base64_0));
      assertNotSame(base64_1, base64_0);
      assertEquals(32, byteArray0.length);
      
      boolean boolean0 = base64_0.hasData();
      assertTrue(boolean0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.equals((Object)base64_1));
      assertNotSame(base64_0, base64_1);
      
      boolean boolean1 = Base64.isBase64(byteArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(32, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Input array too big, the output array would be bigger (");
      assertNotNull(byteArray0);
      assertEquals(32, byteArray0.length);
      
      Base64 base64_0 = new Base64(1591);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 8140);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(32, byteArray0.length);
      assertEquals(44, byteArray1.length);
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("Inputarraytoobigtheoutputarraywouldbebiggeo", string0);
      assertNotNull(string0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertEquals(32, byteArray0.length);
      
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      assertEquals((short)28477, bigInteger0.shortValue());
      assertEquals((byte)61, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(32, byteArray0.length);
      assertEquals(44, byteArray1.length);
      
      int int0 = bigInteger0.getLowestSetBit();
      assertEquals(0, int0);
      assertEquals((short)28477, bigInteger0.shortValue());
      assertEquals((byte)61, bigInteger0.byteValue());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(32, byteArray0.length);
      assertEquals(44, byteArray1.length);
      
      BigInteger bigInteger1 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger1, bigInteger0);
      
      BigInteger bigInteger2 = bigInteger1.not();
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals((byte) (-11), bigInteger2.byteValue());
      assertEquals((short) (-11), bigInteger2.shortValue());
      assertNotNull(bigInteger2);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      
      BigInteger bigInteger3 = BigInteger.TEN;
      assertEquals((short)10, bigInteger3.shortValue());
      assertEquals((byte)10, bigInteger3.byteValue());
      assertNotNull(bigInteger3);
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertNotSame(bigInteger3, bigInteger2);
      assertSame(bigInteger3, bigInteger1);
      assertNotSame(bigInteger3, bigInteger0);
      
      byte[] byteArray2 = Base64.encodeInteger(bigInteger1);
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray2);
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertSame(bigInteger1, bigInteger3);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(4, byteArray2.length);
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray0);
      assertNotNull(byteArray3);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertEquals(32, byteArray0.length);
      assertEquals(44, byteArray3.length);
      
      String string1 = Base64.encodeBase64URLSafeString(byteArray2);
      assertEquals("Q2c9PQ", string1);
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray2);
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertSame(bigInteger1, bigInteger3);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray3);
      assertEquals(4, byteArray2.length);
      
      byte[] byteArray4 = Base64.discardWhitespace(byteArray2);
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertNotNull(byteArray4);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray2);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray4);
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertSame(bigInteger1, bigInteger3);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray2);
      assertEquals(4, byteArray2.length);
      assertEquals(4, byteArray4.length);
      
      Object object0 = base64_0.decode((Object) "Input array too big, the output array would be bigger (");
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(object0);
      
      try { 
        base64_0.encode((Object) "Q2c9PQ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-8);
      byteArray0[0] = (byte) (-8);
      byte byte1 = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)0;
      byte byte2 = (byte)118;
      byteArray0[5] = (byte)118;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)19;
      byteArray0[8] = (byte)39;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-127), byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD\uFFFD\uFFFD{\u0000v\uFFFD\u0013']
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)59, (byte)10}, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      
      Base64 base64_0 = new Base64();
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(base64_0);
      
      base64_0.decode(byteArray1, 0, 0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)59, (byte)10}, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      //  // Unstable assertion: assertEquals((short)10, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = BigInteger.ONE;
      //  // Unstable assertion: assertEquals((short)1, bigInteger1.shortValue());
      //  // Unstable assertion: assertEquals((byte)1, bigInteger1.byteValue());
      //  // Unstable assertion: assertNotNull(bigInteger1);
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger0));
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger0);
      
      BigInteger bigInteger2 = bigInteger0.add(bigInteger1);
      //  // Unstable assertion: assertEquals((short)10, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)1, bigInteger1.shortValue());
      //  // Unstable assertion: assertEquals((byte)1, bigInteger1.byteValue());
      //  // Unstable assertion: assertEquals((short)11, bigInteger2.shortValue());
      //  // Unstable assertion: assertEquals((byte)11, bigInteger2.byteValue());
      //  // Unstable assertion: assertNotNull(bigInteger2);
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger1));
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger0));
      //  // Unstable assertion: assertFalse(bigInteger2.equals((Object)bigInteger1));
      //  // Unstable assertion: assertFalse(bigInteger2.equals((Object)bigInteger0));
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger2);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger2);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger0);
      //  // Unstable assertion: assertNotSame(bigInteger2, bigInteger1);
      //  // Unstable assertion: assertNotSame(bigInteger2, bigInteger0);
      
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      //  // Unstable assertion: assertEquals((short)10, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray2);
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger1));
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger2));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertEquals(4, byteArray2.length);
      
      String string0 = base64_0.encodeToString(byteArray0);
      //  // Unstable assertion: assertEquals("", string0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertEquals(0, byteArray0.length);
      
      byte[] byteArray3 = Base64.discardWhitespace(byteArray1);
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)59, (byte)10}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)59}, byteArray3);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      //  // Unstable assertion: assertEquals(1, byteArray3.length);
      
      base64_0.encode(byteArray2, 64, 0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals((short)10, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray2);
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger1));
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger2));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertEquals(4, byteArray2.length);
      
      Base64 base64_1 = new Base64();
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(base64_1);
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray0, true, true, 76);
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray4);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertEquals(0, byteArray0.length);
      //  // Unstable assertion: assertEquals(0, byteArray4.length);
      
      String string1 = base64_1.encodeToString(byteArray0);
      //  // Unstable assertion: assertEquals("", string1);
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertTrue(string1.equals((Object)string0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(base64_1, base64_0);
      //  // Unstable assertion: assertEquals(0, byteArray0.length);
      
      boolean boolean0 = base64_1.hasData();
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertNotSame(base64_1, base64_0);
      
      boolean boolean1 = Base64.isBase64(byteArray1);
      //  // Unstable assertion: assertFalse(boolean1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)59, (byte)10}, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray4));
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      
      byte[] byteArray5 = Base64.toIntegerBytes(bigInteger2);
      //  // Unstable assertion: assertEquals((short)10, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)1, bigInteger1.shortValue());
      //  // Unstable assertion: assertEquals((byte)1, bigInteger1.byteValue());
      //  // Unstable assertion: assertEquals((short)11, bigInteger2.shortValue());
      //  // Unstable assertion: assertEquals((byte)11, bigInteger2.byteValue());
      //  // Unstable assertion: assertNotNull(byteArray5);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)11}, byteArray5);
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger1));
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger2));
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger2));
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger0));
      //  // Unstable assertion: assertFalse(bigInteger2.equals((Object)bigInteger1));
      //  // Unstable assertion: assertFalse(bigInteger2.equals((Object)bigInteger0));
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray4);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger2);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger2);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger0);
      //  // Unstable assertion: assertNotSame(bigInteger2, bigInteger1);
      //  // Unstable assertion: assertNotSame(bigInteger2, bigInteger0);
      //  // Unstable assertion: assertEquals(1, byteArray5.length);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null, true, false, 3056);
      assertNull(byteArray0);
      
      byte[] byteArray1 = Base64.encodeBase64((byte[]) null);
      assertNull(byteArray1);
      
      Base64 base64_0 = new Base64(565);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray2 = Base64.decodeBase64((byte[]) null);
      assertNull(byteArray2);
      
      byte[] byteArray3 = Base64.encodeBase64((byte[]) null);
      assertNull(byteArray3);
      
      byte[] byteArray4 = Base64.encodeBase64((byte[]) null);
      assertNull(byteArray4);
      
      String string0 = Base64.encodeBase64URLSafeString((byte[]) null);
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray0 = Base64.decodeBase64("");
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      byte byte0 = bigInteger0.byteValueExact();
      assertEquals((byte)10, byte0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = BigInteger.ONE;
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger1, bigInteger0);
      
      BigInteger bigInteger2 = bigInteger1.clearBit(64);
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((byte)1, bigInteger2.byteValue());
      assertEquals((short)1, bigInteger2.shortValue());
      assertNotNull(bigInteger2);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertTrue(bigInteger2.equals((Object)bigInteger1));
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      
      boolean boolean0 = Base64.isBase64((byte)102);
      assertTrue(boolean0);
      
      byte[] byteArray1 = base64_0.decode((byte[]) null);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNull(byteArray1);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertSame(byteArray0, byteArray2);
      assertSame(byteArray2, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Base64 base64_0 = new Base64(13);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(base64_0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)1;
      BigInteger bigInteger0 = BigInteger.TEN;
      //  // Unstable assertion: assertEquals((short)10, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = BigInteger.TEN;
      //  // Unstable assertion: assertEquals((byte)10, bigInteger1.byteValue());
      //  // Unstable assertion: assertEquals((short)10, bigInteger1.shortValue());
      //  // Unstable assertion: assertNotNull(bigInteger1);
      //  // Unstable assertion: assertSame(bigInteger1, bigInteger0);
      
      int int0 = Base64.MIME_CHUNK_SIZE;
      //  // Unstable assertion: assertEquals(76, int0);
      
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)59, (byte)10}, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      
      Base64 base64_1 = new Base64((byte)1, byteArray0);
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(base64_1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)10, (byte) (-57), (byte)1, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      
      byte[] byteArray2 = base64_1.encode(byteArray0);
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)10, (byte) (-57), (byte)1, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)67, (byte)115, (byte)99, (byte)66, (byte)65, (byte)65, (byte)65, (byte)61}, byteArray2);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(base64_1, base64_0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertEquals(8, byteArray2.length);
      
      byte[] byteArray3 = Base64.decodeBase64("y!z(>mA;pKu-#s]s2");
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-53), (byte)57, (byte) (-128), (byte) (-92), (byte) (-85), (byte) (-66), (byte) (-78), (byte) (-51)}, byteArray3);
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertEquals(8, byteArray3.length);
      
      byte[] byteArray4 = base64_1.decode("ZD{VB%");
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)10, (byte) (-57), (byte)1, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)100, (byte)53, (byte)65}, byteArray4);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(base64_1, base64_0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertEquals(3, byteArray4.length);
      
      byte[] byteArray5 = base64_0.decode("y03wp[=<kItl");
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(byteArray5);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-53), (byte)77, (byte) (-16)}, byteArray5);
      //  // Unstable assertion: assertFalse(base64_0.equals((Object)base64_1));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray2));
      //  // Unstable assertion: assertNotSame(base64_0, base64_1);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray2);
      //  // Unstable assertion: assertEquals(3, byteArray5.length);
      
      base64_1.decode(byteArray5, (-1097), 189);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)10, (byte) (-57), (byte)1, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-53), (byte)77, (byte) (-16)}, byteArray5);
      //  // Unstable assertion: assertFalse(base64_0.equals((Object)base64_1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray2));
      //  // Unstable assertion: assertNotSame(base64_0, base64_1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(base64_1, base64_0);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray2);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertEquals(3, byteArray5.length);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      boolean boolean0 = Base64.isBase64("");
      assertTrue(boolean0);
      
      byte[] byteArray0 = Base64.encodeBase64URLSafe((byte[]) null);
      assertNull(byteArray0);
      
      byte[] byteArray1 = Base64.encodeBase64URLSafe((byte[]) null);
      assertNull(byteArray1);
      
      Base64 base64_0 = new Base64(981, (byte[]) null);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      String string0 = base64_0.encodeToString((byte[]) null);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNull(string0);
      
      byte[] byteArray2 = Base64.encodeBase64((byte[]) null, false);
      assertNull(byteArray2);
      
      byte[] byteArray3 = base64_0.encode((byte[]) null);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNull(byteArray3);
      
      String string1 = base64_0.encodeToString((byte[]) null);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNull(string1);
      
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Input array too big, the output array would be bigger (");
      assertNotNull(byteArray0);
      assertEquals(32, byteArray0.length);
      
      Base64 base64_0 = new Base64(13);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false, 5347);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(32, byteArray0.length);
      assertEquals(46, byteArray1.length);
      
      base64_0.encode(byteArray0, (-1900), (-1900));
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertEquals(32, byteArray0.length);
      
      byte[] byteArray2 = new byte[5];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)10;
      byteArray2[1] = (byte) (-57);
      Object object0 = base64_0.decode((Object) "");
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(object0);
      
      Object object1 = base64_0.decode(object0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      
      int int0 = base64_0.readResults(byteArray1, 13, (byte)10);
      assertEquals(0, int0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(byteArray0.equals((Object)object1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)object0));
      assertFalse(byteArray1.equals((Object)object0));
      assertFalse(byteArray1.equals((Object)object1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, object1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, object0);
      assertNotSame(byteArray1, object0);
      assertNotSame(byteArray1, object1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(32, byteArray0.length);
      assertEquals(46, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64(13);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals(1, byteArray0.length);
      
      int int0 = bigInteger1.getLowestSetBit();
      assertEquals((-1), int0);
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals(1, byteArray0.length);
      
      BigInteger bigInteger2 = bigInteger1.not();
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((byte) (-1), bigInteger2.byteValue());
      assertEquals((short) (-1), bigInteger2.shortValue());
      assertNotNull(bigInteger2);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger0);
      assertEquals(1, byteArray0.length);
      
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(byteArray1, byteArray0);
      assertSame(byteArray1, byteArray2);
      assertSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray2);
      assertEquals("", string0);
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(byteArray1, byteArray0);
      assertSame(byteArray1, byteArray2);
      assertSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(byteArray1, byteArray0);
      assertSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray2, byteArray3);
      assertSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray3.length);
      
      Object object0 = base64_0.decode((Object) "d^),oNml47ze");
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(object0);
      
      Object object1 = base64_0.encode(object0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      assertNotSame(object0, object1);
      assertNotSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Input array too big, the output array would be bigger (");
      assertNotNull(byteArray0);
      assertEquals(32, byteArray0.length);
      
      Base64 base64_0 = new Base64(13);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false, 5347);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(32, byteArray0.length);
      assertEquals(46, byteArray1.length);
      
      byte[] byteArray2 = Base64.decodeBase64("8m';N0hz`,z(TXPjF");
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte) (-14), (byte)99, (byte)116, (byte) (-121), (byte)60, (byte) (-45), (byte)92, (byte) (-8), (byte) (-59)}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(9, byteArray2.length);
      
      byte[] byteArray3 = base64_0.encode(byteArray2);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {(byte) (-14), (byte)99, (byte)116, (byte) (-121), (byte)60, (byte) (-45), (byte)92, (byte) (-8), (byte) (-59)}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertEquals(9, byteArray2.length);
      assertEquals(14, byteArray3.length);
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray2);
      assertEquals((short)114, bigInteger0.shortValue());
      assertEquals((byte)114, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte) (-14), (byte)99, (byte)116, (byte) (-121), (byte)60, (byte) (-45), (byte)92, (byte) (-8), (byte) (-59)}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray3);
      assertEquals(9, byteArray2.length);
      
      byte[] byteArray4 = Base64.encodeInteger(bigInteger0);
      assertEquals((short)114, bigInteger0.shortValue());
      assertEquals((byte)114, bigInteger0.byteValue());
      assertNotNull(byteArray4);
      assertArrayEquals(new byte[] {(byte) (-14), (byte)99, (byte)116, (byte) (-121), (byte)60, (byte) (-45), (byte)92, (byte) (-8), (byte) (-59)}, byteArray2);
      assertArrayEquals(new byte[] {(byte)99, (byte)103, (byte)61, (byte)61}, byteArray4);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray3);
      assertEquals(9, byteArray2.length);
      assertEquals(4, byteArray4.length);
      
      int int0 = base64_0.readResults(byteArray2, (byte)86, (byte)86);
      assertEquals((-1), int0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte) (-14), (byte)99, (byte)116, (byte) (-121), (byte)60, (byte) (-45), (byte)92, (byte) (-8), (byte) (-59)}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray4));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray2, byteArray3);
      assertEquals(9, byteArray2.length);
      
      boolean boolean0 = base64_0.isUrlSafe();
      assertFalse(boolean0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      boolean boolean1 = Base64.isBase64((byte) (-32));
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int1 = base64_0.avail();
      assertEquals(0, int1);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Base64 base64_0 = new Base64(13);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      base64_0.encode(byteArray0, (int) (byte)1, (-1900));
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte)10, (byte) (-57), (byte)1, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      Base64 base64_1 = new Base64();
      assertFalse(base64_1.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_1);
      assertFalse(base64_1.equals((Object)base64_0));
      
      String string0 = base64_1.encodeToString(byteArray0);
      assertEquals("CscBAAA=", string0);
      assertFalse(base64_1.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)10, (byte) (-57), (byte)1, (byte)0, (byte)0}, byteArray0);
      assertFalse(base64_1.equals((Object)base64_0));
      assertNotSame(base64_1, base64_0);
      assertEquals(5, byteArray0.length);
      
      boolean boolean0 = base64_1.hasData();
      assertFalse(boolean0);
      assertFalse(base64_1.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_1.equals((Object)base64_0));
      assertNotSame(base64_1, base64_0);
      
      boolean boolean1 = Base64.isBase64(byteArray0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte)10, (byte) (-57), (byte)1, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null, true, false, 3056);
      assertNull(byteArray0);
      
      byte[] byteArray1 = Base64.encodeBase64((byte[]) null);
      assertNull(byteArray1);
      
      Base64 base64_0 = new Base64(565);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray2 = Base64.encodeBase64((byte[]) null, false);
      assertNull(byteArray2);
      
      byte[] byteArray3 = Base64.encodeBase64URLSafe((byte[]) null);
      assertNull(byteArray3);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = BigInteger.TEN;
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals((byte)10, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      
      int int0 = Base64.PEM_CHUNK_SIZE;
      assertEquals(64, int0);
      
      byte[] byteArray4 = Base64.toIntegerBytes(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(byteArray4);
      assertArrayEquals(new byte[] {(byte)10}, byteArray4);
      assertSame(bigInteger0, bigInteger1);
      assertEquals(1, byteArray4.length);
      
      Base64 base64_1 = new Base64(76, (byte[]) null);
      assertFalse(base64_1.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_1);
      assertFalse(base64_1.equals((Object)base64_0));
      
      byte[] byteArray5 = new byte[5];
      assertFalse(byteArray5.equals((Object)byteArray4));
      
      byteArray5[0] = (byte)106;
      byteArray5[1] = (byte) (-18);
      byteArray5[2] = (byte) (-120);
      byteArray5[3] = (byte) (-94);
      byteArray5[4] = (byte) (-85);
      byte[] byteArray6 = base64_1.encode(byteArray5);
      assertFalse(base64_1.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(byteArray6);
      assertArrayEquals(new byte[] {(byte)97, (byte)117, (byte)54, (byte)73, (byte)111, (byte)113, (byte)115, (byte)61}, byteArray6);
      assertArrayEquals(new byte[] {(byte)106, (byte) (-18), (byte) (-120), (byte) (-94), (byte) (-85)}, byteArray5);
      assertFalse(byteArray6.equals((Object)byteArray4));
      assertFalse(byteArray6.equals((Object)byteArray5));
      assertFalse(base64_1.equals((Object)base64_0));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertNotSame(byteArray6, byteArray4);
      assertNotSame(byteArray6, byteArray5);
      assertNotSame(base64_1, base64_0);
      assertNotSame(byteArray5, byteArray6);
      assertNotSame(byteArray5, byteArray4);
      assertEquals(8, byteArray6.length);
      assertEquals(5, byteArray5.length);
      
      byte[] byteArray7 = Base64.decodeBase64("");
      assertNotNull(byteArray7);
      assertArrayEquals(new byte[] {}, byteArray7);
      assertFalse(byteArray7.equals((Object)byteArray6));
      assertFalse(byteArray7.equals((Object)byteArray5));
      assertFalse(byteArray7.equals((Object)byteArray4));
      assertNotSame(byteArray7, byteArray6);
      assertNotSame(byteArray7, byteArray5);
      assertNotSame(byteArray7, byteArray4);
      assertEquals(0, byteArray7.length);
      
      byte[] byteArray8 = base64_1.decode("");
      assertFalse(base64_1.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(byteArray8);
      assertArrayEquals(new byte[] {}, byteArray8);
      assertFalse(byteArray8.equals((Object)byteArray5));
      assertFalse(byteArray8.equals((Object)byteArray4));
      assertFalse(byteArray8.equals((Object)byteArray6));
      assertFalse(byteArray8.equals((Object)byteArray7));
      assertFalse(base64_1.equals((Object)base64_0));
      assertNotSame(byteArray8, byteArray5);
      assertNotSame(byteArray8, byteArray4);
      assertNotSame(byteArray8, byteArray6);
      assertNotSame(byteArray8, byteArray7);
      assertNotSame(base64_1, base64_0);
      assertEquals(0, byteArray8.length);
      
      byte[] byteArray9 = base64_0.decode((String) null);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNull(byteArray9);
      assertFalse(base64_0.equals((Object)base64_1));
      assertNotSame(base64_0, base64_1);
      
      Base64 base64_2 = new Base64(25);
      assertFalse(base64_2.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_2);
      assertFalse(base64_2.equals((Object)base64_0));
      assertFalse(base64_2.equals((Object)base64_1));
      
      // Undeclared exception!
      try { 
        base64_2.decode((byte[]) null, 3056, 76);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)102;
      byteArray0[0] = (byte)102;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte)102;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      //  // Unstable assertion: assertEquals((byte)125, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short) (-8323), bigInteger0.shortValue());
      //  // Unstable assertion: assertNotNull(bigInteger0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)102, (byte)0, (byte)102, (byte)102, (byte)102, (byte)102, (byte)102}, byteArray0);
      //  // Unstable assertion: assertEquals(7, byteArray0.length);
      
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)59, (byte)10}, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      
      BigInteger bigInteger1 = bigInteger0.abs();
      //  // Unstable assertion: assertEquals((byte)125, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short) (-8323), bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((short) (-8323), bigInteger1.shortValue());
      //  // Unstable assertion: assertEquals((byte)125, bigInteger1.byteValue());
      //  // Unstable assertion: assertNotNull(bigInteger1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)102, (byte)0, (byte)102, (byte)102, (byte)102, (byte)102, (byte)102}, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertSame(bigInteger1, bigInteger0);
      //  // Unstable assertion: assertEquals(7, byteArray0.length);
      
      Base64 base64_0 = new Base64(true);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(base64_0);
      
      byte[] byteArray2 = base64_0.decode(byteArray0);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)102, (byte)0, (byte)102, (byte)102, (byte)102, (byte)102, (byte)102}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)125, (byte) (-9), (byte) (-33), (byte)125}, byteArray2);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertEquals(7, byteArray0.length);
      //  // Unstable assertion: assertEquals(4, byteArray2.length);
      
      BigInteger bigInteger2 = BigInteger.TEN;
      //  // Unstable assertion: assertEquals((byte)10, bigInteger2.byteValue());
      //  // Unstable assertion: assertEquals((short)10, bigInteger2.shortValue());
      //  // Unstable assertion: assertNotNull(bigInteger2);
      //  // Unstable assertion: assertFalse(bigInteger2.equals((Object)bigInteger0));
      //  // Unstable assertion: assertFalse(bigInteger2.equals((Object)bigInteger1));
      //  // Unstable assertion: assertNotSame(bigInteger2, bigInteger0);
      //  // Unstable assertion: assertNotSame(bigInteger2, bigInteger1);
      
      byte byte0 = bigInteger2.byteValueExact();
      //  // Unstable assertion: assertEquals((byte)10, byte0);
      //  // Unstable assertion: assertEquals((byte)10, bigInteger2.byteValue());
      //  // Unstable assertion: assertEquals((short)10, bigInteger2.shortValue());
      //  // Unstable assertion: assertFalse(bigInteger2.equals((Object)bigInteger0));
      //  // Unstable assertion: assertFalse(bigInteger2.equals((Object)bigInteger1));
      //  // Unstable assertion: assertNotSame(bigInteger2, bigInteger0);
      //  // Unstable assertion: assertNotSame(bigInteger2, bigInteger1);
      
      BigInteger bigInteger3 = bigInteger0.and(bigInteger1);
      //  // Unstable assertion: assertEquals((byte)125, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short) (-8323), bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((short) (-8323), bigInteger1.shortValue());
      //  // Unstable assertion: assertEquals((byte)125, bigInteger1.byteValue());
      //  // Unstable assertion: assertEquals((byte)125, bigInteger3.byteValue());
      //  // Unstable assertion: assertEquals((short) (-8323), bigInteger3.shortValue());
      //  // Unstable assertion: assertNotNull(bigInteger3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)102, (byte)0, (byte)102, (byte)102, (byte)102, (byte)102, (byte)102}, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger2));
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger2));
      //  // Unstable assertion: assertTrue(bigInteger3.equals((Object)bigInteger1));
      //  // Unstable assertion: assertTrue(bigInteger3.equals((Object)bigInteger0));
      //  // Unstable assertion: assertFalse(bigInteger3.equals((Object)bigInteger2));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger2);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger3);
      //  // Unstable assertion: assertSame(bigInteger1, bigInteger0);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger3);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger2);
      //  // Unstable assertion: assertNotSame(bigInteger3, bigInteger2);
      //  // Unstable assertion: assertNotSame(bigInteger3, bigInteger0);
      //  // Unstable assertion: assertNotSame(bigInteger3, bigInteger1);
      //  // Unstable assertion: assertEquals(7, byteArray0.length);
      
      BigInteger bigInteger4 = BigInteger.ONE;
      //  // Unstable assertion: assertEquals((byte)1, bigInteger4.byteValue());
      //  // Unstable assertion: assertEquals((short)1, bigInteger4.shortValue());
      //  // Unstable assertion: assertNotNull(bigInteger4);
      //  // Unstable assertion: assertFalse(bigInteger4.equals((Object)bigInteger0));
      //  // Unstable assertion: assertFalse(bigInteger4.equals((Object)bigInteger2));
      //  // Unstable assertion: assertFalse(bigInteger4.equals((Object)bigInteger1));
      //  // Unstable assertion: assertFalse(bigInteger4.equals((Object)bigInteger3));
      //  // Unstable assertion: assertNotSame(bigInteger4, bigInteger0);
      //  // Unstable assertion: assertNotSame(bigInteger4, bigInteger2);
      //  // Unstable assertion: assertNotSame(bigInteger4, bigInteger1);
      //  // Unstable assertion: assertNotSame(bigInteger4, bigInteger3);
      
      BigInteger bigInteger5 = bigInteger4.clearBit(64);
      //  // Unstable assertion: assertEquals((byte)1, bigInteger4.byteValue());
      //  // Unstable assertion: assertEquals((short)1, bigInteger4.shortValue());
      //  // Unstable assertion: assertEquals((byte)1, bigInteger5.byteValue());
      //  // Unstable assertion: assertEquals((short)1, bigInteger5.shortValue());
      //  // Unstable assertion: assertNotNull(bigInteger5);
      //  // Unstable assertion: assertFalse(bigInteger4.equals((Object)bigInteger0));
      //  // Unstable assertion: assertFalse(bigInteger4.equals((Object)bigInteger2));
      //  // Unstable assertion: assertFalse(bigInteger4.equals((Object)bigInteger1));
      //  // Unstable assertion: assertFalse(bigInteger4.equals((Object)bigInteger3));
      //  // Unstable assertion: assertFalse(bigInteger5.equals((Object)bigInteger1));
      //  // Unstable assertion: assertFalse(bigInteger5.equals((Object)bigInteger2));
      //  // Unstable assertion: assertFalse(bigInteger5.equals((Object)bigInteger3));
      //  // Unstable assertion: assertTrue(bigInteger5.equals((Object)bigInteger4));
      //  // Unstable assertion: assertFalse(bigInteger5.equals((Object)bigInteger0));
      //  // Unstable assertion: assertNotSame(bigInteger4, bigInteger0);
      //  // Unstable assertion: assertNotSame(bigInteger4, bigInteger5);
      //  // Unstable assertion: assertNotSame(bigInteger4, bigInteger2);
      //  // Unstable assertion: assertNotSame(bigInteger4, bigInteger1);
      //  // Unstable assertion: assertNotSame(bigInteger4, bigInteger3);
      //  // Unstable assertion: assertNotSame(bigInteger5, bigInteger1);
      //  // Unstable assertion: assertNotSame(bigInteger5, bigInteger2);
      //  // Unstable assertion: assertNotSame(bigInteger5, bigInteger3);
      //  // Unstable assertion: assertNotSame(bigInteger5, bigInteger4);
      //  // Unstable assertion: assertNotSame(bigInteger5, bigInteger0);
      
      BigInteger bigInteger6 = bigInteger3.modPow(bigInteger1, bigInteger4);
      //  // Unstable assertion: assertEquals((byte)1, bigInteger4.byteValue());
      //  // Unstable assertion: assertEquals((short)1, bigInteger4.shortValue());
      //  // Unstable assertion: assertEquals((short)0, bigInteger6.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger6.byteValue());
      //  // Unstable assertion: assertEquals((byte)125, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short) (-8323), bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((short) (-8323), bigInteger1.shortValue());
      //  // Unstable assertion: assertEquals((byte)125, bigInteger1.byteValue());
      //  // Unstable assertion: assertEquals((byte)125, bigInteger3.byteValue());
      //  // Unstable assertion: assertEquals((short) (-8323), bigInteger3.shortValue());
      //  // Unstable assertion: assertNotNull(bigInteger6);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)102, (byte)0, (byte)102, (byte)102, (byte)102, (byte)102, (byte)102}, byteArray0);
      //  // Unstable assertion: assertFalse(bigInteger4.equals((Object)bigInteger0));
      //  // Unstable assertion: assertFalse(bigInteger4.equals((Object)bigInteger2));
      //  // Unstable assertion: assertTrue(bigInteger4.equals((Object)bigInteger5));
      //  // Unstable assertion: assertFalse(bigInteger4.equals((Object)bigInteger1));
      //  // Unstable assertion: assertFalse(bigInteger4.equals((Object)bigInteger3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(bigInteger6.equals((Object)bigInteger3));
      //  // Unstable assertion: assertFalse(bigInteger6.equals((Object)bigInteger4));
      //  // Unstable assertion: assertFalse(bigInteger6.equals((Object)bigInteger1));
      //  // Unstable assertion: assertFalse(bigInteger6.equals((Object)bigInteger0));
      //  // Unstable assertion: assertFalse(bigInteger6.equals((Object)bigInteger2));
      //  // Unstable assertion: assertFalse(bigInteger6.equals((Object)bigInteger5));
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger5));
      //  // Unstable assertion: assertTrue(bigInteger0.equals((Object)bigInteger3));
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger2));
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger4));
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger4));
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger5));
      //  // Unstable assertion: assertTrue(bigInteger1.equals((Object)bigInteger3));
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger2));
      //  // Unstable assertion: assertTrue(bigInteger3.equals((Object)bigInteger1));
      //  // Unstable assertion: assertTrue(bigInteger3.equals((Object)bigInteger0));
      //  // Unstable assertion: assertFalse(bigInteger3.equals((Object)bigInteger5));
      //  // Unstable assertion: assertFalse(bigInteger3.equals((Object)bigInteger2));
      //  // Unstable assertion: assertFalse(bigInteger3.equals((Object)bigInteger4));
      //  // Unstable assertion: assertNotSame(bigInteger4, bigInteger0);
      //  // Unstable assertion: assertNotSame(bigInteger4, bigInteger6);
      //  // Unstable assertion: assertNotSame(bigInteger4, bigInteger2);
      //  // Unstable assertion: assertNotSame(bigInteger4, bigInteger5);
      //  // Unstable assertion: assertNotSame(bigInteger4, bigInteger1);
      //  // Unstable assertion: assertNotSame(bigInteger4, bigInteger3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(bigInteger6, bigInteger3);
      //  // Unstable assertion: assertNotSame(bigInteger6, bigInteger4);
      //  // Unstable assertion: assertNotSame(bigInteger6, bigInteger1);
      //  // Unstable assertion: assertNotSame(bigInteger6, bigInteger0);
      //  // Unstable assertion: assertNotSame(bigInteger6, bigInteger2);
      //  // Unstable assertion: assertNotSame(bigInteger6, bigInteger5);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger5);
      //  // Unstable assertion: assertSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger2);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger6);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger3);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger4);
      //  // Unstable assertion: assertSame(bigInteger1, bigInteger0);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger3);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger6);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger4);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger5);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger2);
      //  // Unstable assertion: assertNotSame(bigInteger3, bigInteger5);
      //  // Unstable assertion: assertNotSame(bigInteger3, bigInteger6);
      //  // Unstable assertion: assertNotSame(bigInteger3, bigInteger2);
      //  // Unstable assertion: assertNotSame(bigInteger3, bigInteger0);
      //  // Unstable assertion: assertNotSame(bigInteger3, bigInteger4);
      //  // Unstable assertion: assertNotSame(bigInteger3, bigInteger1);
      //  // Unstable assertion: assertEquals(7, byteArray0.length);
      
      base64_0.encode(byteArray0, (int) (byte)10, 1151);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)102, (byte)0, (byte)102, (byte)102, (byte)102, (byte)102, (byte)102}, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertEquals(7, byteArray0.length);
      
      byte[] byteArray3 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)59, (byte)10}, byteArray3);
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertEquals(2, byteArray3.length);
      
      byte[] byteArray4 = Base64.decodeBase64(byteArray2);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)102, (byte)0, (byte)102, (byte)102, (byte)102, (byte)102, (byte)102}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray4);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)125, (byte) (-9), (byte) (-33), (byte)125}, byteArray2);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertEquals(7, byteArray0.length);
      //  // Unstable assertion: assertEquals(0, byteArray4.length);
      //  // Unstable assertion: assertEquals(4, byteArray2.length);
      
      byte[] byteArray5 = Base64.encodeBase64(byteArray1);
      //  // Unstable assertion: assertNotNull(byteArray5);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)79, (byte)119, (byte)111, (byte)61}, byteArray5);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)59, (byte)10}, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray4);
      //  // Unstable assertion: assertSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray5);
      //  // Unstable assertion: assertEquals(4, byteArray5.length);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray4);
      //  // Unstable assertion: assertEquals("", string0);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)102, (byte)0, (byte)102, (byte)102, (byte)102, (byte)102, (byte)102}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray4);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)125, (byte) (-9), (byte) (-33), (byte)125}, byteArray2);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertEquals(7, byteArray0.length);
      //  // Unstable assertion: assertEquals(0, byteArray4.length);
      //  // Unstable assertion: assertEquals(4, byteArray2.length);
      
      byte[] byteArray6 = Base64.discardWhitespace(byteArray2);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(byteArray6);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)102, (byte)0, (byte)102, (byte)102, (byte)102, (byte)102, (byte)102}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)125, (byte) (-9), (byte) (-33), (byte)125}, byteArray6);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)125, (byte) (-9), (byte) (-33), (byte)125}, byteArray2);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertEquals(7, byteArray0.length);
      //  // Unstable assertion: assertEquals(4, byteArray6.length);
      //  // Unstable assertion: assertEquals(4, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)59, (byte)10}, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      
      Base64 base64_0 = new Base64();
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(base64_0);
      
      base64_0.decode(byteArray1, 0, 0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)59, (byte)10}, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      //  // Unstable assertion: assertEquals((short)10, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = BigInteger.ONE;
      //  // Unstable assertion: assertEquals((short)1, bigInteger1.shortValue());
      //  // Unstable assertion: assertEquals((byte)1, bigInteger1.byteValue());
      //  // Unstable assertion: assertNotNull(bigInteger1);
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger0));
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger0);
      
      BigInteger bigInteger2 = bigInteger0.add(bigInteger1);
      //  // Unstable assertion: assertEquals((short)10, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)1, bigInteger1.shortValue());
      //  // Unstable assertion: assertEquals((byte)1, bigInteger1.byteValue());
      //  // Unstable assertion: assertEquals((byte)11, bigInteger2.byteValue());
      //  // Unstable assertion: assertEquals((short)11, bigInteger2.shortValue());
      //  // Unstable assertion: assertNotNull(bigInteger2);
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger1));
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger0));
      //  // Unstable assertion: assertFalse(bigInteger2.equals((Object)bigInteger0));
      //  // Unstable assertion: assertFalse(bigInteger2.equals((Object)bigInteger1));
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger2);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger0);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger2);
      //  // Unstable assertion: assertNotSame(bigInteger2, bigInteger0);
      //  // Unstable assertion: assertNotSame(bigInteger2, bigInteger1);
      
      byte[] byteArray2 = Base64.decodeBase64("]");
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray2);
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertEquals(0, byteArray2.length);
      
      byte[] byteArray3 = base64_0.encode(byteArray0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray3);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertEquals(0, byteArray0.length);
      //  // Unstable assertion: assertEquals(0, byteArray3.length);
      
      BigInteger bigInteger3 = Base64.decodeInteger(byteArray1);
      //  // Unstable assertion: assertEquals((byte)0, bigInteger3.byteValue());
      //  // Unstable assertion: assertEquals((short)0, bigInteger3.shortValue());
      //  // Unstable assertion: assertNotNull(bigInteger3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)59, (byte)10}, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(bigInteger3.equals((Object)bigInteger1));
      //  // Unstable assertion: assertFalse(bigInteger3.equals((Object)bigInteger0));
      //  // Unstable assertion: assertFalse(bigInteger3.equals((Object)bigInteger2));
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(bigInteger3, bigInteger1);
      //  // Unstable assertion: assertNotSame(bigInteger3, bigInteger0);
      //  // Unstable assertion: assertNotSame(bigInteger3, bigInteger2);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      
      Base64 base64_1 = new Base64((byte)86, byteArray0, false);
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(base64_1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertEquals(0, byteArray0.length);
      
      byte[] byteArray4 = new byte[8];
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      
      byteArray4[0] = (byte)86;
      byteArray4[1] = (byte)86;
      byteArray4[2] = (byte)86;
      byteArray4[3] = (byte)86;
      byteArray4[4] = (byte)86;
      byteArray4[5] = (byte)86;
      byteArray4[6] = (byte)86;
      byteArray4[7] = (byte)86;
      int int0 = base64_1.readResults(byteArray4, 12, (-679));
      //  // Unstable assertion: assertEquals(0, int0);
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)86, (byte)86, (byte)86, (byte)86, (byte)86, (byte)86, (byte)86, (byte)86}, byteArray4);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(base64_1, base64_0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertEquals(0, byteArray0.length);
      //  // Unstable assertion: assertEquals(8, byteArray4.length);
      
      boolean boolean0 = base64_0.isUrlSafe();
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(base64_0.equals((Object)base64_1));
      //  // Unstable assertion: assertNotSame(base64_0, base64_1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Base64 base64_0 = new Base64((-1015));
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray0 = Base64.decodeBase64("bfo.[ '\"bTDQtaxV~KJ");
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)109, (byte) (-6), (byte)27, (byte)76, (byte)52, (byte)45, (byte)107, (byte)21, (byte)74}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      Base64 base64_1 = new Base64((-1015));
      assertFalse(base64_1.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_1);
      assertFalse(base64_1.equals((Object)base64_0));
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((byte) (-112), bigInteger0.byteValue());
      assertEquals((short)16016, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte)109, (byte) (-6), (byte)27, (byte)76, (byte)52, (byte)45, (byte)107, (byte)21, (byte)74}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      BigInteger bigInteger1 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger1, bigInteger0);
      
      String string0 = bigInteger0.toString();
      assertEquals("2562604688", string0);
      assertEquals((byte) (-112), bigInteger0.byteValue());
      assertEquals((short)16016, bigInteger0.shortValue());
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)109, (byte) (-6), (byte)27, (byte)76, (byte)52, (byte)45, (byte)107, (byte)21, (byte)74}, byteArray0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertNotSame(bigInteger0, bigInteger1);
      assertEquals(9, byteArray0.length);
      
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      assertEquals((short)5450, bigInteger2.shortValue());
      assertEquals((byte)74, bigInteger2.byteValue());
      assertNotNull(bigInteger2);
      assertArrayEquals(new byte[] {(byte)109, (byte) (-6), (byte)27, (byte)76, (byte)52, (byte)45, (byte)107, (byte)21, (byte)74}, byteArray0);
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertEquals(9, byteArray0.length);
      
      String string1 = bigInteger0.toString((-1015));
      assertEquals("2562604688", string1);
      assertEquals((byte) (-112), bigInteger0.byteValue());
      assertEquals((short)16016, bigInteger0.shortValue());
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)109, (byte) (-6), (byte)27, (byte)76, (byte)52, (byte)45, (byte)107, (byte)21, (byte)74}, byteArray0);
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertEquals(9, byteArray0.length);
      
      BigInteger bigInteger3 = bigInteger1.mod(bigInteger0);
      assertEquals((byte) (-112), bigInteger0.byteValue());
      assertEquals((short)16016, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals((byte)10, bigInteger3.byteValue());
      assertEquals((short)10, bigInteger3.shortValue());
      assertNotNull(bigInteger3);
      assertArrayEquals(new byte[] {(byte)109, (byte) (-6), (byte)27, (byte)76, (byte)52, (byte)45, (byte)107, (byte)21, (byte)74}, byteArray0);
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertTrue(bigInteger3.equals((Object)bigInteger1));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger3, bigInteger0);
      assertNotSame(bigInteger3, bigInteger1);
      assertNotSame(bigInteger3, bigInteger2);
      assertEquals(9, byteArray0.length);
      
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertEquals((byte) (-112), bigInteger0.byteValue());
      assertEquals((short)16016, bigInteger0.shortValue());
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)109, (byte) (-6), (byte)27, (byte)76, (byte)52, (byte)45, (byte)107, (byte)21, (byte)74}, byteArray0);
      assertArrayEquals(new byte[] {(byte)109, (byte)76, (byte)52, (byte)43, (byte)107, (byte)65, (byte)61, (byte)61}, byteArray1);
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(8, byteArray1.length);
      
      byte[] byteArray2 = base64_1.encode(byteArray0);
      assertFalse(base64_1.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)109, (byte) (-6), (byte)27, (byte)76, (byte)52, (byte)45, (byte)107, (byte)21, (byte)74}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(base64_1.equals((Object)base64_0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(base64_1, base64_0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(12, byteArray2.length);
      
      BigInteger bigInteger4 = Base64.decodeInteger(byteArray1);
      assertEquals((byte) (-112), bigInteger0.byteValue());
      assertEquals((short)16016, bigInteger0.shortValue());
      assertEquals((byte) (-112), bigInteger4.byteValue());
      assertEquals((short)16016, bigInteger4.shortValue());
      assertNotNull(bigInteger4);
      assertArrayEquals(new byte[] {(byte)109, (byte) (-6), (byte)27, (byte)76, (byte)52, (byte)45, (byte)107, (byte)21, (byte)74}, byteArray0);
      assertArrayEquals(new byte[] {(byte)109, (byte)76, (byte)52, (byte)43, (byte)107, (byte)65, (byte)61, (byte)61}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(bigInteger4.equals((Object)bigInteger3));
      assertFalse(bigInteger4.equals((Object)bigInteger2));
      assertFalse(bigInteger4.equals((Object)bigInteger1));
      assertTrue(bigInteger4.equals((Object)bigInteger0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(bigInteger4, bigInteger3);
      assertNotSame(bigInteger4, bigInteger0);
      assertNotSame(bigInteger4, bigInteger2);
      assertNotSame(bigInteger4, bigInteger1);
      assertEquals(9, byteArray0.length);
      assertEquals(8, byteArray1.length);
      
      int int0 = Base64.MIME_CHUNK_SIZE;
      assertEquals(76, int0);
      
      boolean boolean0 = base64_0.isUrlSafe();
      assertFalse(boolean0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.equals((Object)base64_1));
      assertNotSame(base64_0, base64_1);
      
      byte[] byteArray3 = base64_0.decode(byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {(byte)109, (byte) (-6), (byte)27, (byte)76, (byte)52, (byte)45, (byte)107, (byte)21, (byte)74}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-104), (byte) (-66), (byte)62, (byte) (-112)}, byteArray3);
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertNotSame(base64_0, base64_1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(4, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null);
      assertNull(byteArray0);
      
      byte[] byteArray1 = Base64.encodeBase64((byte[]) null);
      assertNull(byteArray1);
      
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, (int) (byte)106, 80);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Base64 base64_0 = new Base64((-1015));
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte) (-100);
      byteArray0[5] = (byte)42;
      byteArray0[6] = (byte)106;
      byteArray0[7] = (byte)7;
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("xgL6iJwqagc=", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-58), (byte)2, (byte) (-6), (byte) (-120), (byte) (-100), (byte)42, (byte)106, (byte)7}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)2, 430);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64(false);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("AA", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      byte[] byteArray2 = Base64.decodeBase64((String) null);
      assertNull(byteArray2);
      
      byte[] byteArray3 = Base64.decodeBase64("lineSeperator must not contain base64 characters: [");
      assertNotNull(byteArray3);
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertEquals(32, byteArray3.length);
      
      byte[] byteArray4 = Base64.encodeBase64((byte[]) null);
      assertNull(byteArray4);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)59, (byte)10}, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      
      Base64 base64_0 = new Base64();
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(base64_0);
      
      base64_0.decode(byteArray1, 0, 0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)59, (byte)10}, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)10, bigInteger0.shortValue());
      //  // Unstable assertion: assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = BigInteger.ONE;
      //  // Unstable assertion: assertEquals((short)1, bigInteger1.shortValue());
      //  // Unstable assertion: assertEquals((byte)1, bigInteger1.byteValue());
      //  // Unstable assertion: assertNotNull(bigInteger1);
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger0));
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger0);
      
      BigInteger bigInteger2 = bigInteger0.add(bigInteger1);
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)10, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((short)1, bigInteger1.shortValue());
      //  // Unstable assertion: assertEquals((byte)1, bigInteger1.byteValue());
      //  // Unstable assertion: assertEquals((short)11, bigInteger2.shortValue());
      //  // Unstable assertion: assertEquals((byte)11, bigInteger2.byteValue());
      //  // Unstable assertion: assertNotNull(bigInteger2);
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger1));
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger0));
      //  // Unstable assertion: assertFalse(bigInteger2.equals((Object)bigInteger0));
      //  // Unstable assertion: assertFalse(bigInteger2.equals((Object)bigInteger1));
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger2);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger2);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger0);
      //  // Unstable assertion: assertNotSame(bigInteger2, bigInteger0);
      //  // Unstable assertion: assertNotSame(bigInteger2, bigInteger1);
      
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)10, bigInteger0.shortValue());
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray2);
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger1));
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger2));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertEquals(4, byteArray2.length);
      
      String string0 = base64_0.encodeToString(byteArray0);
      //  // Unstable assertion: assertEquals("", string0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertEquals(0, byteArray0.length);
      
      byte[] byteArray3 = Base64.discardWhitespace(byteArray1);
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)59, (byte)10}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)59}, byteArray3);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      //  // Unstable assertion: assertEquals(1, byteArray3.length);
      
      base64_0.encode(byteArray2, 64, 0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)10, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray2);
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger1));
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger2));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertEquals(4, byteArray2.length);
      
      byte[] byteArray4 = Base64.encodeBase64URLSafe(byteArray3);
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)59, (byte)10}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)59}, byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)79, (byte)119}, byteArray4);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      //  // Unstable assertion: assertEquals(1, byteArray3.length);
      //  // Unstable assertion: assertEquals(2, byteArray4.length);
      
      Base64 base64_1 = new Base64(false);
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(base64_1);
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      
      int int0 = base64_0.readResults(byteArray0, 8164, 76);
      //  // Unstable assertion: assertEquals(0, int0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(base64_0.equals((Object)base64_1));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(base64_0, base64_1);
      //  // Unstable assertion: assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)111;
      String string0 = Base64.encodeBase64String(byteArray0);
      //  // Unstable assertion: assertEquals("bw==", string0);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)111}, byteArray0);
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 983);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)111}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)98, (byte)119, (byte)59, (byte)10}, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertEquals(4, byteArray1.length);
      
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray0);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)111}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)98, (byte)119}, byteArray2);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertEquals(2, byteArray2.length);
      
      Base64 base64_0 = new Base64(true);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(base64_0);
      
      byte[] byteArray3 = Base64.decodeBase64("");
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray3);
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertEquals(0, byteArray3.length);
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray0, true);
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)111}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)98, (byte)119, (byte)61, (byte)61, (byte)59, (byte)10}, byteArray4);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArray4.length);
      
      byte[] byteArray5 = new byte[6];
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray3));
      
      byteArray5[0] = (byte)111;
      byteArray5[1] = (byte)111;
      byteArray5[2] = (byte)111;
      byteArray5[3] = (byte)111;
      byteArray5[4] = (byte)111;
      byte[] byteArray6 = Base64.encodeBase64(byteArray2);
      //  // Unstable assertion: assertNotNull(byteArray6);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)111}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)98, (byte)119}, byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)89, (byte)110, (byte)99, (byte)61}, byteArray6);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray3));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray3);
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertEquals(2, byteArray2.length);
      //  // Unstable assertion: assertEquals(4, byteArray6.length);
      
      boolean boolean0 = Base64.isArrayByteBase64(byteArray4);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)111}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)98, (byte)119, (byte)61, (byte)61, (byte)59, (byte)10}, byteArray4);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Base64 base64_0 = new Base64((-1015));
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte)48;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-119), (byte)87, (byte)106, (byte)48}, byteArray0);
      assertArrayEquals(new byte[] {(byte)105, (byte)86, (byte)100, (byte)113, (byte)77, (byte)65, (byte)61, (byte)61}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(8, byteArray1.length);
      
      byte[] byteArray2 = new byte[8];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = (byte) (-58);
      byteArray2[1] = (byte)2;
      byteArray2[2] = (byte) (-6);
      byteArray2[3] = (byte) (-120);
      byteArray2[4] = (byte) (-94);
      byte[] byteArray3 = new byte[9];
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      
      byteArray3[0] = (byte)81;
      byteArray3[1] = (byte)2;
      byteArray3[2] = (byte)97;
      byteArray3[3] = (byte)97;
      byteArray3[4] = (byte) (-42);
      byteArray3[5] = (byte) (-6);
      byteArray3[6] = (byte) (-58);
      byteArray3[7] = (byte) (-94);
      byteArray3[8] = (byte)42;
      byte[] byteArray4 = Base64.encodeBase64(byteArray3);
      assertNotNull(byteArray4);
      assertArrayEquals(new byte[] {(byte)81, (byte)2, (byte)97, (byte)97, (byte) (-42), (byte) (-6), (byte) (-58), (byte) (-94), (byte)42}, byteArray3);
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertEquals(12, byteArray4.length);
      assertEquals(9, byteArray3.length);
      
      base64_0.encode(byteArray1, (int) (byte)42, (int) (byte) (-42));
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte) (-119), (byte)87, (byte)106, (byte)48}, byteArray0);
      assertArrayEquals(new byte[] {(byte)105, (byte)86, (byte)100, (byte)113, (byte)77, (byte)65, (byte)61, (byte)61}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray3);
      assertEquals(4, byteArray0.length);
      assertEquals(8, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte) (-70);
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte) (-49);
      byteArray0[8] = (byte)99;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)101, (byte)0, (byte)0, (byte)30, (byte) (-70), (byte)4, (byte) (-49), (byte)99}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)101, (byte)0, (byte)0, (byte)30, (byte) (-70), (byte)4, (byte) (-49), (byte)99}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)101, (byte)0, (byte)0, (byte)30, (byte) (-70), (byte)4, (byte) (-49), (byte)99}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)101, (byte)0, (byte)0, (byte)30, (byte) (-70), (byte)4, (byte) (-49), (byte)99}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertEquals(12, byteArray2.length);
      
      boolean boolean0 = Base64.isBase64((byte) (-77));
      assertFalse(boolean0);
      
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {(byte)0, (byte)101, (byte)0, (byte)0, (byte)30, (byte) (-70), (byte)4, (byte) (-49), (byte)99}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)101, (byte)0, (byte)0, (byte)30, (byte) (-70), (byte)4, (byte) (-49), (byte)99}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertEquals(12, byteArray2.length);
      assertEquals(18, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      BigInteger bigInteger1 = bigInteger0.abs();
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertEquals(0, byteArray0.length);
      
      Base64 base64_0 = new Base64(false);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray2 = base64_0.decode(byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray0, byteArray2);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray1, byteArray2);
      assertSame(byteArray2, byteArray1);
      assertSame(byteArray2, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      
      BigInteger bigInteger2 = BigInteger.TEN;
      assertEquals((short)10, bigInteger2.shortValue());
      assertEquals((byte)10, bigInteger2.byteValue());
      assertNotNull(bigInteger2);
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      
      byte byte0 = bigInteger1.byteValueExact();
      assertEquals((byte)0, byte0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray0, byteArray2);
      assertSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger1, bigInteger2);
      assertSame(bigInteger1, bigInteger0);
      assertEquals(0, byteArray0.length);
      
      // Undeclared exception!
      try { 
        bigInteger0.modPow(bigInteger2, bigInteger1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger1, bigInteger0);
      
      BigInteger bigInteger2 = bigInteger0.add(bigInteger1);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((short)11, bigInteger2.shortValue());
      assertEquals((byte)11, bigInteger2.byteValue());
      assertNotNull(bigInteger2);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      
      byte[] byteArray2 = Base64.encodeInteger(bigInteger2);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((short)11, bigInteger2.shortValue());
      assertEquals((byte)11, bigInteger2.byteValue());
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)67, (byte)119, (byte)61, (byte)61}, byteArray2);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(4, byteArray2.length);
      
      byte[] byteArray3 = Base64.discardWhitespace(byteArray1);
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray3.length);
      
      byte[] byteArray4 = Base64.encodeBase64URLSafe(byteArray3);
      assertNotNull(byteArray4);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertArrayEquals(new byte[] {}, byteArray4);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertSame(byteArray3, byteArray4);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray4, byteArray1);
      assertSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray2);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray3.length);
      assertEquals(0, byteArray4.length);
      
      boolean boolean0 = Base64.isBase64("]");
      assertFalse(boolean0);
      
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray2, 1325, 545);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1325
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte) (-70);
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte) (-49);
      byteArray0[8] = (byte)99;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)101, (byte)0, (byte)0, (byte)30, (byte) (-70), (byte)4, (byte) (-49), (byte)99}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)101, (byte)0, (byte)0, (byte)30, (byte) (-70), (byte)4, (byte) (-49), (byte)99}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)101, (byte)0, (byte)0, (byte)30, (byte) (-70), (byte)4, (byte) (-49), (byte)99}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)101, (byte)0, (byte)0, (byte)30, (byte) (-70), (byte)4, (byte) (-49), (byte)99}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertEquals(12, byteArray2.length);
      
      boolean boolean0 = Base64.isBase64((byte)32);
      assertFalse(boolean0);
      
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {(byte)0, (byte)101, (byte)0, (byte)0, (byte)30, (byte) (-70), (byte)4, (byte) (-49), (byte)99}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)101, (byte)0, (byte)0, (byte)30, (byte) (-70), (byte)4, (byte) (-49), (byte)99}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertEquals(12, byteArray2.length);
      assertEquals(18, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray0 = base64_0.decode("org.apache.commons.codec.EncoderException");
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(byteArray0);
      assertEquals(27, byteArray0.length);
      
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)79;
      byteArray1[1] = (byte)0;
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false, false, 50);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(27, byteArray0.length);
      assertEquals(36, byteArray2.length);
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(byteArray3);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertEquals(27, byteArray0.length);
      assertEquals(36, byteArray2.length);
      assertEquals(48, byteArray3.length);
      
      byte[] byteArray4 = Base64.encodeBase64URLSafe(byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(byteArray4);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray1);
      assertEquals(27, byteArray0.length);
      assertEquals(36, byteArray4.length);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger1, bigInteger0);
      
      byte[] byteArray5 = Base64.toIntegerBytes(bigInteger1);
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertNotNull(byteArray5);
      assertArrayEquals(new byte[] {}, byteArray5);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray0));
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(byteArray5, byteArray3);
      assertNotSame(byteArray5, byteArray2);
      assertNotSame(byteArray5, byteArray1);
      assertNotSame(byteArray5, byteArray4);
      assertNotSame(byteArray5, byteArray0);
      assertEquals(0, byteArray5.length);
      
      byte[] byteArray6 = Base64.decodeBase64("org.apache.commons.codec.EncoderException");
      assertNotNull(byteArray6);
      assertFalse(byteArray6.equals((Object)byteArray1));
      assertFalse(byteArray6.equals((Object)byteArray3));
      assertFalse(byteArray6.equals((Object)byteArray2));
      assertFalse(byteArray6.equals((Object)byteArray5));
      assertFalse(byteArray6.equals((Object)byteArray4));
      assertFalse(byteArray6.equals((Object)byteArray0));
      assertNotSame(byteArray6, byteArray1);
      assertNotSame(byteArray6, byteArray3);
      assertNotSame(byteArray6, byteArray2);
      assertNotSame(byteArray6, byteArray5);
      assertNotSame(byteArray6, byteArray4);
      assertNotSame(byteArray6, byteArray0);
      assertEquals(27, byteArray6.length);
      
      byte[] byteArray7 = Base64.decodeBase64("");
      assertNotNull(byteArray7);
      assertArrayEquals(new byte[] {}, byteArray7);
      assertFalse(byteArray7.equals((Object)byteArray3));
      assertFalse(byteArray7.equals((Object)byteArray2));
      assertFalse(byteArray7.equals((Object)byteArray1));
      assertFalse(byteArray7.equals((Object)byteArray0));
      assertFalse(byteArray7.equals((Object)byteArray4));
      assertFalse(byteArray7.equals((Object)byteArray6));
      assertFalse(byteArray7.equals((Object)byteArray5));
      assertNotSame(byteArray7, byteArray3);
      assertNotSame(byteArray7, byteArray2);
      assertNotSame(byteArray7, byteArray1);
      assertNotSame(byteArray7, byteArray0);
      assertNotSame(byteArray7, byteArray4);
      assertNotSame(byteArray7, byteArray6);
      assertNotSame(byteArray7, byteArray5);
      assertEquals(0, byteArray7.length);
      
      byte[] byteArray8 = base64_0.decode("mFxcwb>(");
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(byteArray8);
      assertArrayEquals(new byte[] {(byte) (-104), (byte)92, (byte)92, (byte) (-63)}, byteArray8);
      assertFalse(byteArray8.equals((Object)byteArray3));
      assertFalse(byteArray8.equals((Object)byteArray2));
      assertFalse(byteArray8.equals((Object)byteArray4));
      assertFalse(byteArray8.equals((Object)byteArray6));
      assertFalse(byteArray8.equals((Object)byteArray0));
      assertFalse(byteArray8.equals((Object)byteArray1));
      assertFalse(byteArray8.equals((Object)byteArray5));
      assertFalse(byteArray8.equals((Object)byteArray7));
      assertNotSame(byteArray8, byteArray3);
      assertNotSame(byteArray8, byteArray2);
      assertNotSame(byteArray8, byteArray4);
      assertNotSame(byteArray8, byteArray6);
      assertNotSame(byteArray8, byteArray0);
      assertNotSame(byteArray8, byteArray1);
      assertNotSame(byteArray8, byteArray5);
      assertNotSame(byteArray8, byteArray7);
      assertEquals(4, byteArray8.length);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Input array too big, the output array would be bigger (");
      assertNotNull(byteArray0);
      assertEquals(32, byteArray0.length);
      
      Base64 base64_0 = new Base64(13);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((short)30998, bigInteger0.shortValue());
      assertEquals((byte)22, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      assertEquals(32, byteArray0.length);
      
      BigInteger bigInteger1 = BigInteger.TEN;
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals((byte)10, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger1, bigInteger0);
      
      String string0 = bigInteger1.toString();
      assertEquals("10", string0);
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals((byte)10, bigInteger1.byteValue());
      assertNotNull(string0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger1, bigInteger0);
      
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      assertEquals((byte) (-22), bigInteger2.byteValue());
      assertEquals((short) (-32278), bigInteger2.shortValue());
      assertNotNull(bigInteger2);
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertEquals(32, byteArray0.length);
      
      BigInteger bigInteger3 = bigInteger1.mod(bigInteger2);
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((byte) (-22), bigInteger2.byteValue());
      assertEquals((short) (-32278), bigInteger2.shortValue());
      assertEquals((short)10, bigInteger3.shortValue());
      assertEquals((byte)10, bigInteger3.byteValue());
      assertNotNull(bigInteger3);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertTrue(bigInteger3.equals((Object)bigInteger1));
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger2, bigInteger3);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger3, bigInteger1);
      assertNotSame(bigInteger3, bigInteger0);
      assertNotSame(bigInteger3, bigInteger2);
      assertEquals(32, byteArray0.length);
      
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals((byte)10, bigInteger1.byteValue());
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray1);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertTrue(bigInteger1.equals((Object)bigInteger3));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(4, byteArray1.length);
      
      base64_0.encode(byteArray0, 13, 13);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertEquals(32, byteArray0.length);
      
      byte[] byteArray2 = new byte[6];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)0;
      byte[] byteArray3 = Base64.decodeBase64(byteArray0);
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {(byte) (-50), (byte)121, (byte)62, (byte) (-122), (byte)121, (byte)22}, byteArray3);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertEquals(32, byteArray0.length);
      assertEquals(6, byteArray3.length);
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray0, true);
      assertNotNull(byteArray4);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray3);
      assertEquals(32, byteArray0.length);
      assertEquals(46, byteArray4.length);
      
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)111;
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("bw==", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)111}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 966);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)111}, byteArray0);
      assertArrayEquals(new byte[] {(byte)98, (byte)119, (byte)61, (byte)61}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray0);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)111}, byteArray0);
      assertArrayEquals(new byte[] {(byte)98, (byte)119}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray2.length);
      
      Base64 base64_0 = new Base64(true);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray3 = new byte[15];
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      
      byteArray3[0] = (byte)111;
      byteArray3[1] = (byte)111;
      byteArray3[2] = (byte)111;
      byteArray3[3] = (byte)111;
      byteArray3[4] = (byte)111;
      byteArray3[5] = (byte)111;
      int int0 = base64_0.readResults(byteArray3, 2140, 0);
      assertEquals(0, int0);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertEquals(15, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)101;
      byteArray0[1] = (byte)101;
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(false);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      boolean boolean1 = Base64.isBase64("rf~l&.&mUemj");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      try { 
        base64_0.encode((Object) "rf~l&.&mUemj");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      String string1 = Base64.encodeBase64String(byteArray0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals(0, byteArray0.length);
      
      byte[] byteArray1 = Base64.decodeBase64("");
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
      
      Base64 base64_0 = new Base64(false);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      String string2 = base64_0.encodeToString(byteArray2);
      assertEquals("", string2);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(string2);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, true, false);
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertSame(byteArray3, byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte)102;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((short)32247, bigInteger0.shortValue());
      assertEquals((byte) (-9), bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte)102, (byte)102, (byte)102, (byte)102, (byte)102, (byte)102, (byte)102}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)102, (byte)102, (byte)102, (byte)102, (byte)102, (byte)102, (byte)102}, byteArray0);
      assertArrayEquals(new byte[] {(byte)90, (byte)109, (byte)90, (byte)109, (byte)90, (byte)109, (byte)90, (byte)109, (byte)90, (byte)103}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(10, byteArray1.length);
      
      BigInteger bigInteger1 = bigInteger0.abs();
      assertEquals((short)32247, bigInteger0.shortValue());
      assertEquals((byte) (-9), bigInteger0.byteValue());
      assertEquals((byte) (-9), bigInteger1.byteValue());
      assertEquals((short)32247, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertArrayEquals(new byte[] {(byte)102, (byte)102, (byte)102, (byte)102, (byte)102, (byte)102, (byte)102}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertEquals(7, byteArray0.length);
      
      Base64 base64_0 = new Base64(true);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray2 = base64_0.decode(byteArray0);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)102, (byte)102, (byte)102, (byte)102, (byte)102, (byte)102, (byte)102}, byteArray0);
      assertArrayEquals(new byte[] {(byte)125, (byte) (-9), (byte) (-33), (byte)125, (byte) (-9)}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(5, byteArray2.length);
      
      BigInteger bigInteger2 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger2.byteValue());
      assertEquals((short)10, bigInteger2.shortValue());
      assertNotNull(bigInteger2);
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      
      byte byte0 = bigInteger2.byteValueExact();
      assertEquals((byte)10, byte0);
      assertEquals((byte)10, bigInteger2.byteValue());
      assertEquals((short)10, bigInteger2.shortValue());
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      
      BigInteger bigInteger3 = bigInteger0.and(bigInteger1);
      assertEquals((short)32247, bigInteger0.shortValue());
      assertEquals((byte) (-9), bigInteger0.byteValue());
      assertEquals((byte) (-9), bigInteger1.byteValue());
      assertEquals((short)32247, bigInteger1.shortValue());
      assertEquals((short)32247, bigInteger3.shortValue());
      assertEquals((byte) (-9), bigInteger3.byteValue());
      assertNotNull(bigInteger3);
      assertArrayEquals(new byte[] {(byte)102, (byte)102, (byte)102, (byte)102, (byte)102, (byte)102, (byte)102}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertTrue(bigInteger3.equals((Object)bigInteger1));
      assertTrue(bigInteger3.equals((Object)bigInteger0));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger3);
      assertSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger1, bigInteger2);
      assertSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger3, bigInteger1);
      assertNotSame(bigInteger3, bigInteger2);
      assertNotSame(bigInteger3, bigInteger0);
      assertEquals(7, byteArray0.length);
      
      BigInteger bigInteger4 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger4.byteValue());
      assertEquals((short)1, bigInteger4.shortValue());
      assertNotNull(bigInteger4);
      assertFalse(bigInteger4.equals((Object)bigInteger2));
      assertFalse(bigInteger4.equals((Object)bigInteger0));
      assertFalse(bigInteger4.equals((Object)bigInteger1));
      assertFalse(bigInteger4.equals((Object)bigInteger3));
      assertNotSame(bigInteger4, bigInteger2);
      assertNotSame(bigInteger4, bigInteger0);
      assertNotSame(bigInteger4, bigInteger1);
      assertNotSame(bigInteger4, bigInteger3);
      
      BigInteger bigInteger5 = bigInteger4.clearBit(64);
      assertEquals((byte)1, bigInteger4.byteValue());
      assertEquals((short)1, bigInteger4.shortValue());
      assertEquals((byte)1, bigInteger5.byteValue());
      assertEquals((short)1, bigInteger5.shortValue());
      assertNotNull(bigInteger5);
      assertFalse(bigInteger4.equals((Object)bigInteger2));
      assertFalse(bigInteger4.equals((Object)bigInteger0));
      assertFalse(bigInteger4.equals((Object)bigInteger1));
      assertFalse(bigInteger4.equals((Object)bigInteger3));
      assertTrue(bigInteger5.equals((Object)bigInteger4));
      assertFalse(bigInteger5.equals((Object)bigInteger2));
      assertFalse(bigInteger5.equals((Object)bigInteger0));
      assertFalse(bigInteger5.equals((Object)bigInteger3));
      assertFalse(bigInteger5.equals((Object)bigInteger1));
      assertNotSame(bigInteger4, bigInteger2);
      assertNotSame(bigInteger4, bigInteger5);
      assertNotSame(bigInteger4, bigInteger0);
      assertNotSame(bigInteger4, bigInteger1);
      assertNotSame(bigInteger4, bigInteger3);
      assertNotSame(bigInteger5, bigInteger4);
      assertNotSame(bigInteger5, bigInteger2);
      assertNotSame(bigInteger5, bigInteger0);
      assertNotSame(bigInteger5, bigInteger3);
      assertNotSame(bigInteger5, bigInteger1);
      
      BigInteger bigInteger6 = bigInteger3.modPow(bigInteger1, bigInteger4);
      assertEquals((byte)1, bigInteger4.byteValue());
      assertEquals((short)1, bigInteger4.shortValue());
      assertEquals((short)0, bigInteger6.shortValue());
      assertEquals((byte)0, bigInteger6.byteValue());
      assertEquals((short)32247, bigInteger0.shortValue());
      assertEquals((byte) (-9), bigInteger0.byteValue());
      assertEquals((byte) (-9), bigInteger1.byteValue());
      assertEquals((short)32247, bigInteger1.shortValue());
      assertEquals((short)32247, bigInteger3.shortValue());
      assertEquals((byte) (-9), bigInteger3.byteValue());
      assertNotNull(bigInteger6);
      assertArrayEquals(new byte[] {(byte)102, (byte)102, (byte)102, (byte)102, (byte)102, (byte)102, (byte)102}, byteArray0);
      assertFalse(bigInteger4.equals((Object)bigInteger2));
      assertFalse(bigInteger4.equals((Object)bigInteger0));
      assertTrue(bigInteger4.equals((Object)bigInteger5));
      assertFalse(bigInteger4.equals((Object)bigInteger1));
      assertFalse(bigInteger4.equals((Object)bigInteger3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(bigInteger6.equals((Object)bigInteger4));
      assertFalse(bigInteger6.equals((Object)bigInteger3));
      assertFalse(bigInteger6.equals((Object)bigInteger5));
      assertFalse(bigInteger6.equals((Object)bigInteger2));
      assertFalse(bigInteger6.equals((Object)bigInteger1));
      assertFalse(bigInteger6.equals((Object)bigInteger0));
      assertTrue(bigInteger0.equals((Object)bigInteger3));
      assertFalse(bigInteger0.equals((Object)bigInteger5));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger4));
      assertTrue(bigInteger1.equals((Object)bigInteger3));
      assertFalse(bigInteger1.equals((Object)bigInteger4));
      assertFalse(bigInteger1.equals((Object)bigInteger5));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger5));
      assertTrue(bigInteger3.equals((Object)bigInteger1));
      assertFalse(bigInteger3.equals((Object)bigInteger4));
      assertTrue(bigInteger3.equals((Object)bigInteger0));
      assertNotSame(bigInteger4, bigInteger2);
      assertNotSame(bigInteger4, bigInteger5);
      assertNotSame(bigInteger4, bigInteger0);
      assertNotSame(bigInteger4, bigInteger1);
      assertNotSame(bigInteger4, bigInteger3);
      assertNotSame(bigInteger4, bigInteger6);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(bigInteger6, bigInteger4);
      assertNotSame(bigInteger6, bigInteger3);
      assertNotSame(bigInteger6, bigInteger5);
      assertNotSame(bigInteger6, bigInteger2);
      assertNotSame(bigInteger6, bigInteger1);
      assertNotSame(bigInteger6, bigInteger0);
      assertNotSame(bigInteger0, bigInteger6);
      assertNotSame(bigInteger0, bigInteger5);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger0, bigInteger3);
      assertSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger6);
      assertNotSame(bigInteger1, bigInteger4);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger1, bigInteger5);
      assertNotSame(bigInteger1, bigInteger2);
      assertSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger3, bigInteger1);
      assertNotSame(bigInteger3, bigInteger2);
      assertNotSame(bigInteger3, bigInteger0);
      assertNotSame(bigInteger3, bigInteger5);
      assertNotSame(bigInteger3, bigInteger6);
      assertNotSame(bigInteger3, bigInteger4);
      assertEquals(7, byteArray0.length);
      
      base64_0.encode(byteArray0, (int) (byte)10, 1151);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte)102, (byte)102, (byte)102, (byte)102, (byte)102, (byte)102, (byte)102}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(7, byteArray0.length);
      
      byte[] byteArray3 = Base64.encodeInteger(bigInteger1);
      assertEquals((short)32247, bigInteger0.shortValue());
      assertEquals((byte) (-9), bigInteger0.byteValue());
      assertEquals((byte) (-9), bigInteger1.byteValue());
      assertEquals((short)32247, bigInteger1.shortValue());
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {(byte)102, (byte)102, (byte)102, (byte)102, (byte)102, (byte)102, (byte)102}, byteArray0);
      assertArrayEquals(new byte[] {(byte)102, (byte)102, (byte)102, (byte)102, (byte)102, (byte)102, (byte)99, (byte)61}, byteArray3);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(bigInteger0.equals((Object)bigInteger6));
      assertTrue(bigInteger0.equals((Object)bigInteger3));
      assertFalse(bigInteger0.equals((Object)bigInteger5));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger4));
      assertFalse(bigInteger1.equals((Object)bigInteger6));
      assertTrue(bigInteger1.equals((Object)bigInteger3));
      assertFalse(bigInteger1.equals((Object)bigInteger4));
      assertFalse(bigInteger1.equals((Object)bigInteger5));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(bigInteger0, bigInteger6);
      assertNotSame(bigInteger0, bigInteger5);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger0, bigInteger3);
      assertSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger6);
      assertNotSame(bigInteger1, bigInteger4);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger1, bigInteger5);
      assertNotSame(bigInteger1, bigInteger2);
      assertSame(bigInteger1, bigInteger0);
      assertEquals(7, byteArray0.length);
      assertEquals(8, byteArray3.length);
      
      byte[] byteArray4 = Base64.decodeBase64(byteArray2);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(byteArray4);
      assertArrayEquals(new byte[] {(byte)102, (byte)102, (byte)102, (byte)102, (byte)102, (byte)102, (byte)102}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray4);
      assertArrayEquals(new byte[] {(byte)125, (byte) (-9), (byte) (-33), (byte)125, (byte) (-9)}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray4);
      assertEquals(7, byteArray0.length);
      assertEquals(0, byteArray4.length);
      assertEquals(5, byteArray2.length);
      
      byte[] byteArray5 = Base64.encodeBase64(byteArray0, false);
      assertNotNull(byteArray5);
      assertArrayEquals(new byte[] {(byte)102, (byte)102, (byte)102, (byte)102, (byte)102, (byte)102, (byte)102}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray0));
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray5, byteArray4);
      assertNotSame(byteArray5, byteArray1);
      assertNotSame(byteArray5, byteArray2);
      assertNotSame(byteArray5, byteArray0);
      assertNotSame(byteArray5, byteArray3);
      assertEquals(7, byteArray0.length);
      assertEquals(12, byteArray5.length);
      
      boolean boolean0 = Base64.isBase64((byte)102);
      assertTrue(boolean0);
      
      String string0 = Base64.encodeBase64String(byteArray3);
      assertEquals("ZmZmZmZmYz0=", string0);
      assertEquals((short)32247, bigInteger0.shortValue());
      assertEquals((byte) (-9), bigInteger0.byteValue());
      assertEquals((byte) (-9), bigInteger1.byteValue());
      assertEquals((short)32247, bigInteger1.shortValue());
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)102, (byte)102, (byte)102, (byte)102, (byte)102, (byte)102, (byte)102}, byteArray0);
      assertArrayEquals(new byte[] {(byte)102, (byte)102, (byte)102, (byte)102, (byte)102, (byte)102, (byte)99, (byte)61}, byteArray3);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray3.equals((Object)byteArray4));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray5));
      assertFalse(bigInteger0.equals((Object)bigInteger6));
      assertTrue(bigInteger0.equals((Object)bigInteger3));
      assertFalse(bigInteger0.equals((Object)bigInteger5));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger4));
      assertFalse(bigInteger1.equals((Object)bigInteger6));
      assertTrue(bigInteger1.equals((Object)bigInteger3));
      assertFalse(bigInteger1.equals((Object)bigInteger4));
      assertFalse(bigInteger1.equals((Object)bigInteger5));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray5);
      assertNotSame(bigInteger0, bigInteger6);
      assertNotSame(bigInteger0, bigInteger5);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger0, bigInteger3);
      assertSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger6);
      assertNotSame(bigInteger1, bigInteger4);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger1, bigInteger5);
      assertNotSame(bigInteger1, bigInteger2);
      assertSame(bigInteger1, bigInteger0);
      assertEquals(7, byteArray0.length);
      assertEquals(8, byteArray3.length);
      
      base64_0.encode(byteArray1, (int) (byte)102, 24);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte)102, (byte)102, (byte)102, (byte)102, (byte)102, (byte)102, (byte)102}, byteArray0);
      assertArrayEquals(new byte[] {(byte)90, (byte)109, (byte)90, (byte)109, (byte)90, (byte)109, (byte)90, (byte)109, (byte)90, (byte)103}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray5));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray5);
      assertNotSame(byteArray1, byteArray4);
      assertEquals(7, byteArray0.length);
      assertEquals(10, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      Base64 base64_0 = new Base64(0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      base64_0.decode(byteArray1, 0, 0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger1, bigInteger0);
      
      BigInteger bigInteger2 = bigInteger0.add(bigInteger1);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((short)11, bigInteger2.shortValue());
      assertEquals((byte)11, bigInteger2.byteValue());
      assertNotNull(bigInteger2);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger0);
      
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray0, byteArray2);
      assertSame(byteArray2, byteArray0);
      assertSame(byteArray2, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray2, (-3609), 92);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3609
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)111;
      String string0 = Base64.encodeBase64String(byteArray0);
      //  // Unstable assertion: assertEquals("bw==", string0);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)111}, byteArray0);
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 983);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)111}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)98, (byte)119, (byte)59, (byte)10}, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertEquals(4, byteArray1.length);
      
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray0);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)111}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)98, (byte)119}, byteArray2);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertEquals(2, byteArray2.length);
      
      Base64 base64_0 = new Base64(true);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(base64_0);
      
      String string1 = base64_0.encodeToString(byteArray0);
      //  // Unstable assertion: assertEquals("bw;\n", string1);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)111}, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      
      byte[] byteArray3 = new byte[6];
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      
      byteArray3[0] = (byte)111;
      byteArray3[1] = (byte)111;
      byteArray3[2] = (byte)111;
      byteArray3[3] = (byte)111;
      boolean boolean0 = Base64.isBase64("bw==");
      //  // Unstable assertion: assertTrue(boolean0);
      
      byteArray3[4] = (byte)111;
      byteArray3[5] = (byte)111;
      int int0 = base64_0.readResults(byteArray3, 2140, 0);
      //  // Unstable assertion: assertEquals((-1), int0);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)111, (byte)111, (byte)111, (byte)111, (byte)111, (byte)111}, byteArray3);
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertEquals(6, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)91;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)91}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)70, (byte)115}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)91}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)91}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray2.length);
      
      Base64 base64_0 = new Base64((byte)0, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      assertArrayEquals(new byte[] {(byte)0, (byte)91}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertEquals(2, byteArray0.length);
      
      byte[] byteArray3 = new byte[3];
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      
      byteArray3[0] = (byte)57;
      byteArray3[1] = (byte)91;
      byte[] byteArray4 = Base64.encodeBase64URLSafe(byteArray2);
      assertNotNull(byteArray4);
      assertArrayEquals(new byte[] {(byte)0, (byte)91}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)91}, byteArray2);
      assertArrayEquals(new byte[] {(byte)65, (byte)70, (byte)115}, byteArray4);
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray3);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray2.length);
      assertEquals(3, byteArray4.length);
      
      int int0 = Base64.MIME_CHUNK_SIZE;
      assertEquals(76, int0);
      
      byte[] byteArray5 = base64_0.encode(byteArray4);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(byteArray5);
      assertArrayEquals(new byte[] {(byte)0, (byte)91}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)91}, byteArray2);
      assertArrayEquals(new byte[] {(byte)65, (byte)70, (byte)115}, byteArray4);
      assertArrayEquals(new byte[] {(byte)81, (byte)85, (byte)90, (byte)122}, byteArray5);
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray4));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray5);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray5);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray5, byteArray2);
      assertNotSame(byteArray5, byteArray3);
      assertNotSame(byteArray5, byteArray1);
      assertNotSame(byteArray5, byteArray4);
      assertNotSame(byteArray5, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray2.length);
      assertEquals(3, byteArray4.length);
      assertEquals(4, byteArray5.length);
      
      Object object0 = base64_0.decode((Object) "");
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(object0);
      assertArrayEquals(new byte[] {(byte)0, (byte)91}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, object0);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray2);
      assertEquals(2, byteArray0.length);
      
      Object object1 = base64_0.encode(object0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(object1);
      assertArrayEquals(new byte[] {(byte)0, (byte)91}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)object0));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray5));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, object0);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, object1);
      assertNotSame(byteArray0, byteArray2);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertEquals(2, byteArray0.length);
      
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      boolean boolean0 = Base64.isBase64("");
      assertTrue(boolean0);
      
      byte[] byteArray0 = Base64.encodeBase64URLSafe((byte[]) null);
      assertNull(byteArray0);
      
      byte[] byteArray1 = Base64.encodeBase64URLSafe((byte[]) null);
      assertNull(byteArray1);
      
      Base64 base64_0 = new Base64(981, (byte[]) null, true);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray2 = Base64.encodeBase64((byte[]) null, false);
      assertNull(byteArray2);
      
      byte[] byteArray3 = base64_0.encode((byte[]) null);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNull(byteArray3);
      
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = Base64.encodeBase64URLSafe((byte[]) null);
      assertNull(byteArray0);
      
      byte[] byteArray1 = Base64.decodeBase64("org.apache.commons.codec.binary.StringUtils");
      assertNotNull(byteArray1);
      assertEquals(28, byteArray1.length);
      
      byte[] byteArray2 = Base64.decodeBase64((byte[]) null);
      assertNull(byteArray2);
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray1);
      assertNotNull(byteArray3);
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray3, byteArray1);
      assertEquals(28, byteArray1.length);
      assertEquals(40, byteArray3.length);
      
      Base64 base64_0 = new Base64((-5590), (byte[]) null);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      int int0 = base64_0.readResults((byte[]) null, (-5590), (-5590));
      assertEquals(0, int0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Input array too big, the output array would be bigger (");
      assertNotNull(byteArray0);
      assertEquals(32, byteArray0.length);
      
      int int0 = 13;
      Base64 base64_0 = new Base64(13);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 13, 5412);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray0 = base64_0.decode("org.apache.commons.codec.EncoderException");
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(byteArray0);
      assertEquals(27, byteArray0.length);
      
      byte[] byteArray1 = Base64.decodeBase64("org.apchecommons.codc.EncoderException");
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertEquals(26, byteArray1.length);
      
      byte[] byteArray2 = Base64.decodeBase64("org.apache.commons.codec.EncoderException");
      assertNotNull(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(27, byteArray2.length);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      int int0 = base64_0.readResults(byteArray0, 41, 0);
      assertEquals((-1), int0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertEquals(27, byteArray0.length);
      
      boolean boolean0 = base64_0.isUrlSafe();
      assertFalse(boolean0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null, true, false, 3056);
      assertNull(byteArray0);
      
      byte[] byteArray1 = Base64.encodeBase64((byte[]) null);
      assertNull(byteArray1);
      
      Base64 base64_0 = new Base64(565);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray2 = Base64.encodeBase64((byte[]) null);
      assertNull(byteArray2);
      
      byte[] byteArray3 = Base64.decodeBase64((byte[]) null);
      assertNull(byteArray3);
      
      base64_0.decode((byte[]) null, 1648, (-1900));
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray4 = Base64.encodeBase64((byte[]) null);
      assertNull(byteArray4);
      
      String string0 = Base64.encodeBase64String((byte[]) null);
      assertNull(string0);
      
      int int0 = base64_0.readResults((byte[]) null, 565, (-1));
      assertEquals((-1), int0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray5 = Base64.decodeBase64("(D-yLTS3)ie");
      assertNotNull(byteArray5);
      assertArrayEquals(new byte[] {(byte)15, (byte) (-20), (byte) (-117), (byte)77, (byte)45, (byte) (-30)}, byteArray5);
      assertEquals(6, byteArray5.length);
      
      int int1 = 0;
      base64_0.decode((byte[]) null, 0, 1);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray6 = Base64.encodeBase64((byte[]) null, true);
      assertNull(byteArray6);
      
      byte[] byteArray7 = Base64.encodeBase64((byte[]) null, false);
      assertNull(byteArray7);
      
      boolean boolean0 = Base64.isBase64("(D-yLTS3)ie");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)83;
      byteArray0[0] = (byte)83;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)83}, byteArray0);
      assertArrayEquals(new byte[] {(byte)83}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Base64 base64_0 = new Base64(134);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-13);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)118;
      byteArray0[6] = (byte) (-28);
      byteArray0[7] = (byte)113;
      int int0 = base64_0.readResults(byteArray0, 5, 0);
      assertEquals(0, int0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-44), (byte)0, (byte) (-13), (byte)0, (byte)118, (byte) (-28), (byte)113}, byteArray0);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      int int0 = base64_0.avail();
      assertEquals(0, int0);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(base64_0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte) (-5);
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      //  // Unstable assertion: assertEquals("zfsAAAA", string0);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-51), (byte) (-5), (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      
      byte[] byteArray1 = Base64.decodeBase64("org.apache.commons.codec.EncoderException");
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertEquals(27, byteArray1.length);
      
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)86;
      byte[] byteArray2 = base64_0.encode(byteArray0);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-51), (byte) (-5), (byte)71, (byte)0, (byte)86}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)122, (byte)102, (byte)116, (byte)72, (byte)65, (byte)70, (byte)89, (byte)59, (byte)10}, byteArray2);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertEquals(9, byteArray2.length);
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      //  // Unstable assertion: assertEquals((short)25, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)25, bigInteger0.byteValue());
      //  // Unstable assertion: assertNotNull(bigInteger0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-51), (byte) (-5), (byte)71, (byte)0, (byte)86}, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      
      int int0 = base64_0.readResults(byteArray0, 59, (byte)71);
      //  // Unstable assertion: assertEquals((-1), int0);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-51), (byte) (-5), (byte)71, (byte)0, (byte)86}, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      
      boolean boolean0 = base64_0.isUrlSafe();
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Base64 base64_0 = new Base64(36);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      Object object0 = base64_0.decode((Object) "");
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)0;
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("Af9nsAD/AA==", string0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-1), (byte)103, (byte) (-80), (byte)0, (byte) (-1), (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      boolean boolean0 = base64_0.hasData();
      assertFalse(boolean0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray1.length);
      
      BigInteger bigInteger1 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger1, bigInteger0);
      
      BigInteger bigInteger2 = bigInteger0.and(bigInteger1);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger2.byteValue());
      assertEquals((short)0, bigInteger2.shortValue());
      assertNotNull(bigInteger2);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertTrue(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      
      int int0 = base64_0.readResults(byteArray1, 71, 0);
      assertEquals((-1), int0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertTrue(bigInteger0.equals((Object)bigInteger2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertTrue(bigInteger0.equals((Object)bigInteger2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray3 = base64_0.decode("~QdSemGui3s");
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {(byte)65, (byte) (-44), (byte) (-98), (byte) (-104), (byte)107, (byte) (-94), (byte) (-34)}, byteArray3);
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertEquals(7, byteArray3.length);
      
      byte[] byteArray4 = base64_0.decode("");
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(byteArray4);
      assertArrayEquals(new byte[] {}, byteArray4);
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray3);
      assertEquals(0, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)91;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)91}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)70, (byte)115}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)91}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)91}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray2.length);
      
      Base64 base64_0 = new Base64((byte)0, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      assertArrayEquals(new byte[] {(byte)0, (byte)91}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertEquals(2, byteArray0.length);
      
      byte[] byteArray3 = new byte[3];
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      
      byteArray3[0] = (byte)57;
      byteArray3[1] = (byte)91;
      byteArray3[2] = (byte)90;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray3, 474, (int) (byte)91);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 474
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      Base64 base64_0 = new Base64(0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      base64_0.decode(byteArray1, 0, 0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = BigInteger.ONE;
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger1, bigInteger0);
      
      BigInteger bigInteger2 = bigInteger0.add(bigInteger1);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)11, bigInteger2.shortValue());
      assertEquals((byte)11, bigInteger2.byteValue());
      assertNotNull(bigInteger2);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray2);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(4, byteArray2.length);
      
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("", string0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertNotSame(byteArray0, byteArray2);
      assertSame(byteArray0, byteArray1);
      assertEquals(0, byteArray0.length);
      
      byte[] byteArray3 = Base64.discardWhitespace(byteArray1);
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray3.length);
      
      base64_0.encode(byteArray2, (-1), 0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray2);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(4, byteArray2.length);
      
      byte[] byteArray4 = Base64.encodeBase64URLSafe(byteArray3);
      assertNotNull(byteArray4);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertArrayEquals(new byte[] {}, byteArray4);
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray2);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertSame(byteArray3, byteArray4);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray0);
      assertSame(byteArray4, byteArray3);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray3.length);
      assertEquals(0, byteArray4.length);
      
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte)35;
      byteArray0[6] = (byte) (-9);
      byteArray0[7] = (byte)0;
      Base64 base64_0 = new Base64(191, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      assertArrayEquals(new byte[] {(byte)30, (byte)1, (byte)0, (byte)0, (byte) (-88), (byte)35, (byte) (-9), (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Input array too big, the output array would be bigger (");
      Base64 base64_0 = new Base64(13);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger0.mod(bigInteger1);
      assertEquals((byte) (-22), bigInteger1.byteValue());
      
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray1);
      
      base64_0.encode(byteArray0, 13, 13);
      assertEquals(32, byteArray0.length);
      
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte) (-78);
      byteArray2[2] = (byte) (-1);
      byteArray2[3] = (byte)31;
      byteArray2[4] = (byte)81;
      byteArray2[5] = (byte)97;
      byte[] byteArray3 = Base64.encodeBase64(byteArray2);
      assertEquals(8, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)111;
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("bw==", string0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 983);
      assertEquals(4, byteArray1.length);
      
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray0);
      assertEquals(2, byteArray2.length);
      
      Base64 base64_0 = new Base64(true);
      byte[] byteArray3 = new byte[6];
      byteArray3[0] = (byte)111;
      byteArray3[1] = (byte)111;
      byteArray3[2] = (byte)111;
      byteArray3[3] = (byte)111;
      byteArray3[4] = (byte)111;
      byteArray3[5] = (byte)111;
      int int0 = base64_0.readResults(byteArray3, 2140, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray0);
      String string0 = Base64.encodeBase64String(byteArray1);
      //  // Unstable assertion: assertEquals("QUJKTkFB", string0);
      
      int int0 = base64_0.readResults(byteArray1, (byte)0, 1586);
      //  // Unstable assertion: assertEquals((-1), int0);
      
      base64_0.readResults(byteArray1, 1072, 0);
      String string1 = base64_0.encodeToString(byteArray0);
      //  // Unstable assertion: assertEquals("ABJNAA==;\n", string1);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-95);
      byte byte0 = (byte)20;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [r\u0000\uFFFD\u0014\u0000\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)73;
      byteArray0[0] = (byte)73;
      byte byte1 = (byte)48;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)0;
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.encodeBase64String(byteArray1);
      Base64.isArrayByteBase64(byteArray1);
      Base64.isBase64("");
      Base64.isArrayByteBase64(byteArray1);
      Base64.decodeBase64("");
      Base64 base64_0 = new Base64(true);
      try { 
        base64_0.encode((Object) "STAA");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte) (-50);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-41);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertEquals(11, byteArray1.length);
      
      byte[] byteArray2 = Base64.decodeBase64("lineSeperator must not contain base64 characters: [");
      byte[] byteArray3 = Base64.decodeBase64("0lMcBFhA");
      assertArrayEquals(new byte[] {(byte) (-46), (byte)83, (byte)28, (byte)4, (byte)88, (byte)64}, byteArray3);
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray2);
      assertEquals(44, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Base64 base64_0 = new Base64(822);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)43;
      byteArray0[6] = (byte) (-118);
      byteArray0[7] = (byte)103;
      byteArray0[8] = (byte)100;
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("LwBzAQArimdk", string0);
      
      Base64.decodeBase64((byte[]) null);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-13);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)1;
      byteArray1[3] = (byte)99;
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.isArrayByteBase64(byteArray1);
      byte[] byteArray2 = Base64.decodeBase64("8wABYw");
      byte[] byteArray3 = Base64.encodeBase64(byteArray2);
      assertEquals(8, byteArray3.length);
      assertArrayEquals(new byte[] {(byte)56, (byte)119, (byte)65, (byte)66, (byte)89, (byte)119, (byte)61, (byte)61}, byteArray3);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)4;
      byteArray0[8] = (byte)0;
      Base64 base64_0 = new Base64(0, byteArray0, true);
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      assertArrayEquals(new byte[] {(byte)113, (byte)84, (byte)74, (byte)79, (byte)70, (byte)84, (byte)89, (byte)65}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      byte[] byteArray0 = Base64.encodeBase64Chunked((byte[]) null);
      assertNull(byteArray0);
      
      Base64 base64_0 = new Base64(0);
      base64_0.encode((byte[]) null, 793, 0);
      base64_0.decode((byte[]) null, 0, 0);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-110);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)1;
      byteArray1[3] = (byte) (-40);
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)1;
      byteArray1[6] = (byte)52;
      byteArray1[7] = (byte)0;
      byteArray1[8] = (byte) (-23);
      boolean boolean0 = Base64.isBase64(byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)0;
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 23);
      assertArrayEquals(new byte[] {(byte)90, (byte)81, (byte)65, (byte)65, (byte)65, (byte)65, (byte)13, (byte)10}, byteArray1);
      
      byteArray0[2] = (byte) (-1);
      Base64.encodeBase64(byteArray0, true);
      Base64.encodeBase64URLSafe(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      byteArray0[3] = (byte)55;
      base64_0.encode(byteArray0);
      Base64.decodeBase64("");
      byte[] byteArray2 = base64_0.decode("O6OI5%^|.H");
      assertArrayEquals(new byte[] {(byte)59, (byte) (-93), (byte) (-120), (byte) (-28)}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-15);
      byte byte0 = (byte) (-51);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)102;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      bigInteger0.abs();
      Base64 base64_0 = new Base64(false);
      base64_0.decode(byteArray0);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.byteValueExact();
      bigInteger1.and(bigInteger0);
      bigInteger0.modPow(bigInteger1, bigInteger1);
      base64_0.encode(byteArray1, (int) (byte)102, (-1923));
      assertArrayEquals(new byte[] {(byte)90, (byte)103}, byteArray1);
      assertEquals(2, byteArray1.length);
      
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      Base64.decodeBase64(byteArray0);
      byte[] byteArray3 = new byte[9];
      byteArray3[0] = (byte)10;
      byteArray3[1] = (byte)102;
      byteArray3[2] = (byte)102;
      byteArray3[3] = (byte)102;
      byteArray3[4] = (byte)10;
      byteArray3[5] = (byte)10;
      byteArray3[6] = (byte) (-79);
      byteArray3[7] = (byte)10;
      byteArray3[8] = (byte)10;
      byte[] byteArray4 = Base64.encodeBase64(byteArray3, true);
      assertEquals(14, byteArray4.length);
      
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertTrue(boolean0);
      
      String string0 = Base64.encodeBase64String(byteArray2);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-29);
      byteArray0[0] = (byte) (-29);
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte2 = (byte) (-115);
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte)86;
      byte byte3 = (byte) (-98);
      byteArray0[4] = (byte) (-98);
      boolean boolean0 = true;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(345, byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD\u0000\uFFFDV\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-97);
      byteArray0[6] = (byte)121;
      byteArray0[7] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertEquals(11, byteArray1.length);
      
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)5;
      byteArray2[1] = (byte)61;
      byteArray2[2] = (byte) (-62);
      byteArray2[3] = (byte) (-17);
      byteArray2[4] = (byte)111;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray2);
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Base64 base64_0 = new Base64((-1182));
      byte[] byteArray0 = base64_0.decode((byte[]) null);
      assertFalse(base64_0.isUrlSafe());
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)23;
      byteArray0[7] = (byte) (-30);
      byteArray0[8] = (byte)50;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, (int) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64String(byteArray0);
      Base64.decodeBase64("");
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(false);
      Base64.isBase64("");
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)0;
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("4ABQKQEBAA", string0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte) (-7);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)72;
      byteArray1[1] = (byte) (-19);
      byteArray1[2] = (byte) (-25);
      byteArray1[3] = (byte) (-7);
      byteArray1[4] = (byte)72;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)72;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)72, byteArray1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [H\uFFFD\uFFFD\uFFFDH\u0000H]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }
}
