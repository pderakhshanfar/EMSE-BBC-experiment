/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:10:59 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Base64.encodeBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafe(byteArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Base64.encodeBase64String((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64Chunked(byteArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Base64.encodeBase64((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[38];
      Base64 base64_0 = new Base64(10, byteArray0);
      base64_0.encode(byteArray0, 10, 10);
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, 10, (-2749));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      Base64 base64_0 = new Base64((byte) (-11), byteArray0);
      base64_0.encode(byteArray0, 14, (int) (byte) (-11));
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, (byte) (-11), (byte) (-11));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      Base64.encodeBase64URLSafeString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(6613, byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, (-2147483646), 6613);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Base64 base64_0 = new Base64(1073741824, byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 1, 1260);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[36];
      Base64 base64_0 = new Base64(12, byteArray0, true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      // Undeclared exception!
      base64_0.encode(byteArray4);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = new byte[0];
      Base64 base64_0 = new Base64((byte)0, byteArray1, false);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[117];
      Base64 base64_0 = new Base64(5, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      // Undeclared exception!
      Base64.discardWhitespace(byteArray2);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Base64 base64_0 = new Base64(1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)10;
      Base64.isArrayByteBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Base64.encodeBase64(byteArray0, false, false, 69);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      Base64.encodeBase64(byteArray0, true, true, 34);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[117];
      Base64 base64_0 = new Base64(5, byteArray0);
      base64_0.decode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)78;
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Base64.isBase64((byte)77);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Base64.isBase64((byte)0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Base64.isBase64((byte)123);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[38];
      Base64 base64_0 = new Base64(5, byteArray0, false);
      base64_0.encode(byteArray0, 5, 5);
      base64_0.encode(byteArray0, 36, (-1));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[55];
      Base64 base64_0 = new Base64(23, byteArray0, true);
      base64_0.encode(byteArray0, 23, 23);
      base64_0.encode(byteArray0, 23, (-161));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Base64.decodeBase64("~FBn?uX4");
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Base64.decodeBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64.encodeBase64(byteArray0, true, true);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Base64.encodeBase64URLSafeString((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[97];
      Base64.encodeBase64Chunked(byteArray0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Base64.isBase64("Parameter supplied to Base64 encode is not a byte[]");
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte)32;
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)9;
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[76];
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, true, 64);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (108) than the specified maxium size of 64
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Base64.encodeBase64((byte[]) null, true, true, 1240);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      Base64 base64_0 = new Base64((-810), byteArray0);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Base64.isBase64("");
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Base64.isBase64((byte) (-1));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Base64.isBase64((byte)61);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[122];
      Base64 base64_0 = new Base64(0, byteArray0);
      byteArray0[60] = (byte)125;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 0, (int) (byte)125);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 122
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[123];
      Base64 base64_0 = new Base64(6, byteArray0);
      base64_0.encode(byteArray0, 6, 6);
      base64_0.encode(byteArray0, 6, 64);
      base64_0.encode(byteArray0, 6, 6);
      base64_0.encode(byteArray0, 6, 6);
      base64_0.encode(byteArray0, 6, 69);
      base64_0.encode(byteArray0, 64, 41);
      base64_0.decode(byteArray0, 6, 41);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[55];
      Base64 base64_0 = new Base64(23, byteArray0, true);
      base64_0.encode(byteArray0, 23, (-161));
      base64_0.decode(byteArray0, 127, 127);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[117];
      Base64 base64_0 = new Base64(5, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      // Undeclared exception!
      base64_0.decode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[123];
      Base64 base64_0 = new Base64(6, byteArray0);
      base64_0.encode(byteArray0, 6, 6);
      base64_0.encode(byteArray0, 6, 64);
      base64_0.encode(byteArray0, 6, 6);
      base64_0.encode(byteArray0, 6, 6);
      base64_0.encode(byteArray0, 6, 69);
      base64_0.encode(byteArray0, 64, 41);
      base64_0.encode(byteArray0, 41, (-2228));
      assertEquals(123, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Base64 base64_0 = new Base64((-1), byteArray0, true);
      int int0 = base64_0.avail();
      assertEquals(0, int0);
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Base64 base64_0 = new Base64(0, (byte[]) null);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[112];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertEquals(152, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65}, byteArray1);
      assertEquals(2, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(1650, byteArray0);
      Object object0 = base64_0.decode((Object) "ISO-8859-1");
      // Undeclared exception!
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("AAAAAAAAAAA=", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(6613, byteArray0);
      byte[] byteArray1 = new byte[2];
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[38];
      Base64 base64_0 = new Base64(10, byteArray0);
      base64_0.encode(byteArray0, 10, 10);
      base64_0.encode(byteArray0, 10, (-2749));
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61, (byte)13, (byte)10}, byteArray1);
      assertEquals(6, byteArray1.length);
  }
}
