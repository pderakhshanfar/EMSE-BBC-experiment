/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 02:25:52 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = BigInteger.probablePrime(893, mockRandom0);
      bigInteger0.doubleValue();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64((-1));
      byte[] byteArray1 = bigInteger0.toByteArray();
      Base64 base64_1 = new Base64(1, byteArray1);
      base64_1.decode(byteArray0, 1, 893);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1260);
      BigInteger bigInteger0 = BigInteger.probablePrime(1260, mockRandom0);
      bigInteger0.doubleValue();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(1260);
      Base64.encodeBase64String(byteArray0);
      Base64 base64_1 = new Base64();
      byte[] byteArray1 = base64_1.encode(byteArray0);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, true, true, 64);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (390) than the specified maxium size of 64
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 1260;
      MockRandom mockRandom0 = new MockRandom(1260);
      int int1 = 4945;
      BigInteger bigInteger0 = BigInteger.probablePrime(4945, mockRandom0);
      bigInteger0.doubleValue();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(int0);
      boolean boolean0 = false;
      int int2 = (-620);
      Base64.encodeBase64(byteArray0, boolean0);
      bigInteger0.abs();
      long long0 = 2861L;
      mockRandom0.ints(long0);
      int int3 = 52;
      mockRandom0.ints((long) base64_0.MIME_CHUNK_SIZE);
      bigInteger0.not();
      int int4 = 4;
      base64_0.encode(byteArray0, int4, int3);
      int int5 = 28;
      base64_0.encode(byteArray0, int5, int2);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      base64_0.readResults(byteArray1, int4, int1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 1260;
      MockRandom mockRandom0 = new MockRandom(1260);
      int int1 = 4945;
      BigInteger bigInteger0 = BigInteger.probablePrime(4945, mockRandom0);
      bigInteger0.doubleValue();
      int int2 = (-767);
      bigInteger0.shiftRight(int2);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(int0);
      int int3 = (-620);
      base64_0.readResults(byteArray0, byteArray0[0], int3);
      int int4 = 0;
      base64_0.decode(byteArray0, int4, int0);
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte)9;
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray1, 0, 1188);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte) (-25);
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-108);
      byteArray0[7] = (byte)11;
      byteArray0[8] = (byte)25;
      base64_0.readResults(byteArray0, (byte) (-58), (-977));
      byte[] byteArray1 = bigInteger0.toByteArray();
      Base64.encodeBase64(byteArray0, true);
      bigInteger0.abs();
      base64_0.encode(byteArray0, 0, 9);
      Base64.encodeBase64(byteArray0, true);
      base64_0.encode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[0];
      base64_0.encode(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)72;
      byteArray1[1] = (byte)32;
      byteArray1[2] = (byte)38;
      byteArray1[3] = (byte)91;
      byteArray1[4] = (byte) (-27);
      Base64.discardWhitespace(byteArray1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("m`,5*?3hy|O{ue{381");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray1, 0, 7804);
      Base64.discardWhitespace(byteArray1);
      byte[] byteArray2 = new byte[7];
      Base64.encodeBase64URLSafeString(byteArray0);
      byteArray2[0] = (byte) (-117);
      byteArray2[1] = (byte)80;
      byteArray2[2] = (byte)60;
      byteArray2[3] = (byte)39;
      byteArray2[4] = (byte)80;
      byteArray2[5] = (byte)70;
      byteArray2[6] = (byte)1;
      base64_0.encode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      BigInteger bigInteger0 = BigInteger.probablePrime(1260, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(1381);
      Base64.encodeBase64(byteArray0, true);
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 0, 289);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)124;
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)60;
      byteArray0[3] = (byte)67;
      byteArray0[5] = (byte)33;
      byte[] byteArray1 = new byte[15];
      byteArray0[2] = (byte)124;
      byteArray1[1] = (byte)33;
      byteArray1[2] = (byte)60;
      byteArray1[3] = (byte)13;
      Base64.encodeBase64Chunked(byteArray1);
      Base64.discardWhitespace(byteArray0);
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints();
      BigInteger bigInteger0 = BigInteger.probablePrime(767, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(767);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      base64_0.decode(byteArray1, 2, 2);
      base64_0.decode(byteArray1, 2, 2);
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      assertEquals(128, byteArray3.length);
      
      byte[] byteArray4 = Base64.encodeBase64URLSafe(byteArray2);
      assertEquals(171, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)1;
      Base64.encodeBase64(byteArray0);
      Base64.decodeBase64(byteArray0);
      // Undeclared exception!
      try { 
        base64_1.decode(byteArray0, (int) (byte)1, 2491);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints();
      BigInteger bigInteger0 = BigInteger.probablePrime(767, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(767);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.decodeBase64(byteArray1);
      base64_0.decode(byteArray1, 2, 2);
      Base64 base64_1 = new Base64();
      Base64.decodeInteger(byteArray1);
      Object object0 = new Object();
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      boolean boolean0 = Base64.isBase64((byte)5);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)26;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(6, byteArray1.length);
      
      Base64 base64_0 = new Base64((byte)76);
      Base64.encodeBase64((byte[]) null);
      Base64 base64_1 = new Base64((-309), (byte[]) null);
      byte[] byteArray2 = base64_1.decode(": ");
      assertEquals(0, byteArray2.length);
      
      boolean boolean0 = base64_1.hasData();
      assertFalse(base64_1.isUrlSafe());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)11;
      byteArray0[0] = (byte)11;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)11;
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64((byte)11);
      base64_0.decode((String) null);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, 62);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Base64.isBase64((byte)59);
      Base64 base64_0 = new Base64((byte)59);
      base64_0.decode("Parameter supplied to Base64 decode is not a byte[] or a String");
      base64_0.encode((byte[]) null, (int) (byte)59, 1);
      Base64.encodeBase64URLSafe((byte[]) null);
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null, true, false, 64);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.decodeBase64(byteArray0);
      base64_0.decode(byteArray0, 56, (int) (byte) (-85));
      Base64 base64_1 = new Base64();
      Object object0 = new Object();
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64.isBase64((byte)61);
      Base64.decodeInteger(byteArray1);
      base64_0.avail();
      Random.setNextRandom(95);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      Base64 base64_0 = new Base64(0);
      base64_0.decode(byteArray0, 1, 1);
      byte[] byteArray1 = Base64.decodeBase64("");
      base64_0.encode(byteArray0, 1, (-2727));
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray2);
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      assertEquals(0, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      int int0 = 0;
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)1;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 1, 2659);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(13, byteArray1.length);
      
      Base64 base64_0 = new Base64((-12));
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)6;
      byteArray2[1] = (byte)35;
      byteArray2[2] = (byte)35;
      byteArray2[3] = (byte)35;
      byteArray2[4] = (byte)6;
      byteArray2[5] = (byte)6;
      byteArray2[6] = (byte)35;
      byteArray2[7] = (byte)6;
      byteArray2[8] = (byte)6;
      byte[] byteArray3 = Base64.encodeBase64(byteArray2);
      assertEquals(12, byteArray3.length);
      
      byte[] byteArray4 = base64_0.decode(": ");
      base64_0.encode(byteArray4);
      base64_0.encode(byteArray2, 0, 7);
      boolean boolean0 = base64_0.hasData();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.decodeBase64(byteArray0);
      base64_0.hasData();
      Base64.isBase64((byte) (-1));
      byte[] byteArray1 = new byte[0];
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true, (int) (byte) (-85));
      byte[] byteArray3 = base64_0.decode("Input array too big, the output array would be bigger (");
      base64_0.encodeToString(byteArray3);
      Base64 base64_1 = new Base64(3419, byteArray2, true);
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("AAA", string0);
      
      byteArray0[0] = (byte)125;
      Base64.isBase64((byte)125);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      Base64 base64_0 = new Base64(0);
      base64_0.decode(byteArray0, 1, 1);
      Base64.decodeBase64("");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)125;
      byteArray2[1] = (byte)125;
      byteArray2[2] = (byte)125;
      byteArray2[3] = (byte)125;
      byteArray2[4] = (byte)125;
      byteArray2[5] = (byte)125;
      byteArray2[6] = (byte)125;
      boolean boolean0 = false;
      Base64.encodeBase64(byteArray2, false);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (int) (byte)125, 37);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 125
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Base64.isBase64("");
      byte[] byteArray0 = new byte[8];
      Base64 base64_0 = new Base64((byte)102);
      base64_0.decode((String) null);
      Base64 base64_1 = new Base64(true);
      base64_1.decode((byte[]) null);
      Base64.encodeBase64Chunked((byte[]) null);
      base64_0.hasData();
      Base64.isBase64((byte) (-126));
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)22;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64((byte)22);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true, (int) (byte)10);
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, true);
      String string0 = base64_0.encodeToString(byteArray3);
      //  // Unstable assertion: assertEquals("RmdBQUFBQUEWAA==\u0016\u0000", string0);
      
      int int0 = base64_0.readResults(byteArray2, (byte)22, (byte)10);
      //  // Unstable assertion: assertEquals((-1), int0);
      
      Object object0 = base64_0.decode((Object) "RmdBQUFBQUENCg==\r\n");
      base64_0.decode(object0);
      byte[] byteArray4 = base64_0.decode("Parameter supplied to Base64 decode is not a byte[] or a String");
      //  // Unstable assertion: assertEquals(37, byteArray4.length);
      
      base64_0.encodeToString(byteArray2);
      base64_0.encode(byteArray1, (int) (byte)22, (int) (byte)10);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)22, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.not();
      BigInteger bigInteger1 = bigInteger0.setBit((byte)0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      assertEquals(13, byteArray3.length);
      assertArrayEquals(new byte[] {(byte)81, (byte)86, (byte)69, (byte)57, (byte)80, (byte)81, (byte)61, (byte)61}, byteArray2);
      
      boolean boolean0 = Base64.isBase64("{bw/Nm?3q|W+[ue+qC");
      assertFalse(boolean0);
      
      byte[] byteArray4 = Base64.decodeBase64(byteArray0);
      assertEquals(0, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Base64.isBase64((byte)74);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64((-5));
      base64_0.encode((byte[]) null);
      Base64.isBase64("org.apache.commons.codec.EncoderException");
      byte[] byteArray1 = Base64.decodeBase64((byte[]) null);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = null;
      boolean boolean0 = false;
      Base64.encodeBase64((byte[]) null, false, false);
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)22;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64((byte)22);
      Base64.encodeBase64(byteArray1, true, true, (int) (byte)11);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      base64_0.encodeToString(byteArray2);
      Base64.isBase64(byteArray2);
      Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      base64_0.encode(byteArray0, (-150), (-150));
      base64_0.encode(byteArray1, (int) (byte)11, 692);
      byte[] byteArray3 = Base64.CHUNK_SEPARATOR;
      Base64.isBase64("encodeInteger called with null parameter");
      base64_0.encode(byteArray2, (-150), 1770);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Base64.isBase64((byte)74);
      Base64.encodeBase64Chunked((byte[]) null);
      Base64 base64_0 = new Base64(true);
      base64_0.hasData();
      Base64.isBase64((byte) (-1));
      Base64.encodeBase64((byte[]) null, true, true, 74);
      String string0 = "APthL P8S^Zu.a)";
      base64_0.decode("APthL P8S^Zu.a)");
      base64_0.encodeToString((byte[]) null);
      Base64 base64_1 = new Base64(64, (byte[]) null, true);
      int int0 = (-2265);
      base64_1.encode((byte[]) null, 76, (-1));
      try { 
        base64_0.encode((Object) "APthL P8S^Zu.a)");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Base64.isBase64("");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)102;
      byte byte0 = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)6;
      boolean boolean0 = true;
      Base64.encodeBase64(byteArray0, true);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)102;
      byteArray1[1] = (byte)1;
      byteArray1[2] = (byte)127;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray2, (int) (byte)1, (int) (byte)6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.not();
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64((byte)6);
      Base64 base64_1 = new Base64(true);
      base64_0.encodeToString(byteArray0);
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte byte0 = (byte)74;
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64((byte)11);
      boolean boolean0 = true;
      Base64.encodeBase64(byteArray1, true, true, 76);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true);
      base64_0.encodeToString((byte[]) null);
      Base64.isBase64(byteArray2);
      int int0 = 692;
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, 692, 61);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[1];
      base64_0.decode("lineSeperator must not contain base64 characters: [");
      byteArray0[0] = (byte)106;
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Base64.encodeBase64Chunked(byteArray1);
      Base64.discardWhitespace(byteArray1);
      Base64 base64_1 = new Base64((byte)10);
      Base64 base64_2 = new Base64(true);
      base64_0.encodeToString(byteArray0);
      base64_2.hasData();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Base64.isBase64("");
      Base64 base64_0 = new Base64(0);
      base64_0.avail();
      byte[] byteArray0 = Base64.decodeBase64("");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      base64_0.decode((Object) "");
      base64_0.hasData();
      base64_0.encodeToString(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, false);
      Base64.decodeInteger(byteArray2);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 0, 3333);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Base64.isBase64((byte)74);
      byte[] byteArray0 = null;
      Base64.encodeBase64String((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = base64_0.decode("lineSeperator must not contain base64 characters: [");
      byteArray0[0] = (byte)106;
      byte[] byteArray2 = base64_0.decode(byteArray0);
      Base64.encodeBase64Chunked(byteArray2);
      boolean boolean0 = base64_0.hasData();
      boolean boolean1 = Base64.isBase64((byte)106);
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, false, false, (int) (byte)106);
      //  // Unstable assertion: assertEquals(4, byteArray3.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)97, (byte)103, (byte)61, (byte)61}, byteArray3);
      
      byte[] byteArray4 = base64_0.decode("lineSeperator must not contain base64 characters: [");
      String string0 = base64_0.encodeToString(byteArray1);
      //  // Unstable assertion: assertEquals("lineSeperatormustnotcontainbase64characters=\uFFFD\u0000", string0);
      
      base64_0.encode(byteArray4, (-2539), (int) (byte)106);
      Object object0 = base64_0.decode((Object) "lineSeperatormustnotcontainbase64characters=\r\n");
      base64_0.decode(object0);
      boolean boolean2 = Base64.isBase64(byteArray2);
      //  // Unstable assertion: assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64(byteArray0, true);
      boolean boolean0 = Base64.isBase64((byte)79);
      //  // Unstable assertion: assertTrue(boolean0);
      
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      //  // Unstable assertion: assertEquals(10, byteArray2.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61, (byte) (-1), (byte)0}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte)104;
      byteArray0[5] = (byte)11;
      Base64.discardWhitespace(byteArray0);
      Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64();
      String string0 = null;
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-36);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)14;
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64((byte)0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)22;
      byteArray1[1] = (byte)112;
      byteArray1[2] = (byte)22;
      MockRandom mockRandom0 = new MockRandom(2548L);
      BigInteger bigInteger0 = BigInteger.probablePrime(64, mockRandom0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger1.xor(bigInteger0);
      bigInteger2.bitCount();
      BigInteger bigInteger3 = BigInteger.ZERO;
      bigInteger3.abs();
      BigInteger bigInteger4 = bigInteger3.add(bigInteger2);
      Base64.toIntegerBytes(bigInteger4);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints();
      BigInteger.probablePrime(614, mockRandom0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-36);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64((byte)0);
      Base64.encodeBase64((byte[]) null, true, false, 1486);
      Base64.encodeBase64(byteArray1, false);
      base64_0.encodeToString((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("m`,5*?3hy|O{ue{381");
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64String(byteArray0);
      Base64.isArrayByteBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.decodeBase64(byteArray0);
      Base64 base64_1 = new Base64();
      base64_1.decode((String) null);
      base64_1.encodeToString((byte[]) null);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 671, 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 671
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.not();
      bigInteger0.setBit((byte)0);
      Base64.encodeInteger(bigInteger0);
      // Undeclared exception!
      try { 
        bigInteger0.modInverse(bigInteger1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte)104;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)0;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      Base64 base64_0 = new Base64();
      base64_0.decode((String) null);
      base64_0.encodeToString(byteArray2);
      base64_0.encode((byte[]) null, (int) (byte)79, (int) (byte)117);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("m`,5*?3hy|O{ue{381");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64 base64_0 = new Base64(47);
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)120;
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)0;
      byteArray2[6] = (byte)120;
      byteArray2[7] = (byte)120;
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true);
      Base64.encodeBase64URLSafeString(byteArray3);
      byte[] byteArray4 = Base64.encodeBase64(byteArray1, false);
      base64_0.encode(byteArray4, (-1108), (-1335));
      Base64.encodeBase64((byte[]) null, true);
      byte[] byteArray5 = base64_0.decode(byteArray1);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64 base64_1 = new Base64(0, (byte[]) null, false);
      base64_1.readResults(byteArray5, 529, 2691);
      Base64.encodeBase64String(byteArray1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("m`,5*?3hy|O{ue{381");
      Base64 base64_0 = new Base64(1, byteArray0, false);
      Base64.encodeBase64String(byteArray0);
      Base64.isArrayByteBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.encodeBase64(byteArray1, false);
      Base64.isBase64("m`,5*?3hy|O{ue{381");
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[9];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-109);
      byteArray1[2] = (byte) (-57);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte) (-109);
      byteArray2[1] = (byte) (-57);
      byteArray2[2] = (byte) (-109);
      byteArray2[3] = (byte) (-57);
      byteArray2[4] = (byte) (-109);
      byteArray2[5] = (byte) (-57);
      BigInteger bigInteger1 = new BigInteger(byteArray2);
      bigInteger0.max(bigInteger1);
      bigInteger0.xor(bigInteger0);
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64URLSafeString(byteArray0);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)19;
      base64_0.encode(byteArray3);
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte) (-112);
      byteArray0[5] = (byte) (-40);
      Base64.encodeBase64String(byteArray0);
      byteArray0[6] = (byte) (-14);
      byteArray0[7] = (byte)0;
      Base64.decodeInteger(byteArray0);
      byteArray0[8] = (byte)24;
      base64_0.encodeToString(byteArray0);
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("m`,5*?3hy|O{ue{381");
      Base64 base64_0 = new Base64((-1), byteArray0, false);
      Base64.isArrayByteBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      base64_0.isUrlSafe();
      byte[] byteArray3 = base64_0.decode(byteArray2);
      Base64.decodeInteger(byteArray3);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-85);
      Base64 base64_0 = new Base64(0, byteArray0);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.isArrayByteBase64(byteArray0);
      Base64.encodeBase64(byteArray1);
      Base64.encodeBase64(byteArray1, true);
      base64_0.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("m`,5*?3hy|O{ue{381");
      Base64 base64_0 = new Base64((-1), byteArray0, false);
      Base64.encodeBase64String(byteArray0);
      Base64.isArrayByteBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.encodeBase64(byteArray1, true);
      Base64.isBase64("m53hyOue380=");
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)112;
      Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)112;
      byteArray1[1] = (byte)112;
      byteArray1[2] = (byte)112;
      byteArray1[3] = (byte)112;
      byteArray1[4] = (byte)112;
      Base64.encodeBase64String(byteArray1);
      base64_0.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-36);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)14;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64((byte)0);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)22;
      byteArray2[1] = (byte)112;
      byteArray2[2] = (byte)22;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)112;
      Base64.encodeBase64(byteArray2, true, true, (int) (byte)112);
      Base64.encodeBase64(byteArray0, false);
      base64_0.encodeToString(byteArray1);
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      Base64 base64_0 = new Base64((byte) (-24));
      Base64.encodeBase64Chunked(byteArray2);
      base64_0.readResults(byteArray1, 1096, (-1));
      byte[] byteArray3 = base64_0.decode("Parameter supplied to Base64 decode is not a byte[] or a String");
      base64_0.readResults(byteArray3, 1563, (byte)0);
      Base64 base64_1 = new Base64(46, byteArray2);
      base64_1.encodeToString(byteArray3);
      base64_1.encode(byteArray3, (-699), 54);
      base64_0.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-85);
      Base64 base64_0 = new Base64(0, byteArray0);
      Base64 base64_1 = new Base64(76);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64(byteArray1, true);
      base64_0.encode(byteArray1, 1, (-994));
      Base64.encodeBase64(byteArray1, true);
      base64_1.decode(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = new byte[5];
      byteArray2[1] = (byte)127;
      byteArray2[2] = (byte) (-85);
      byteArray2[3] = (byte) (-85);
      byteArray2[4] = (byte) (-85);
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray2, (byte)127, 74);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte) (-109);
      byteArray0[5] = (byte)80;
      byteArray0[6] = (byte) (-68);
      byteArray0[7] = (byte) (-65);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.decode((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 2505);
      Base64.decodeBase64(byteArray0);
      Base64.encodeBase64URLSafe(byteArray1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[1];
      Base64.encodeBase64Chunked(byteArray0);
      base64_0.decode("lineSeperator must not contain base64 characters: [");
      byteArray0[0] = (byte)106;
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Base64.encodeBase64Chunked(byteArray1);
      base64_0.hasData();
      Base64.isBase64((byte)106);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false, false, (int) (byte)106);
      Base64.encodeBase64URLSafe(byteArray2);
      base64_0.encode(byteArray0);
      Base64.decodeInteger(byteArray2);
      BigInteger bigInteger0 = BigInteger.ZERO;
      MockRandom mockRandom0 = new MockRandom(2298L);
      // Undeclared exception!
      try { 
        BigInteger.probablePrime(0, mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // bitLength < 2
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte byte0 = (byte) (-103);
      Base64.isBase64((byte) (-103));
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[0];
      base64_0.encode(byteArray0, (-1242), 0);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)25;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = new byte[0];
      base64_0.encodeToString(byteArray2);
      byte[] byteArray3 = base64_0.decode("]");
      Base64.encodeBase64Chunked(byteArray3);
      base64_0.decode(byteArray3);
      Base64.isArrayByteBase64(byteArray3);
      Base64.encodeBase64URLSafeString(byteArray3);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-85);
      Base64 base64_0 = new Base64(0, byteArray0);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      base64_0.readResults(byteArray0, (byte) (-85), (-699));
      base64_0.decode("Parameter supplied to Base64 decode is not a byte[] or a String");
      base64_0.encodeToString(byteArray0);
      base64_0.encode(byteArray1, 0, 0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[9];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-109);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-57);
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray1);
      bigInteger0.xor(bigInteger1);
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      //  // Unstable assertion: assertEquals(0, byteArray2.length);
      
      Base64.encodeBase64URLSafeString(byteArray0);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte) (-112);
      byteArray0[5] = (byte) (-40);
      String string0 = Base64.encodeBase64String(byteArray0);
      //  // Unstable assertion: assertEquals("AFkTnZDYAAAA", string0);
      
      byteArray0[6] = (byte) (-14);
      byteArray0[7] = (byte)0;
      BigInteger bigInteger2 = Base64.decodeInteger(byteArray0);
      //  // Unstable assertion: assertEquals((short)0, bigInteger2.shortValue());
      
      byteArray0[8] = (byte)24;
      String string1 = base64_0.encodeToString(byteArray0);
      //  // Unstable assertion: assertEquals("AFkTnZDY8gAY\uFFFD\uFFFD", string1);
      
      boolean boolean0 = base64_0.hasData();
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte)50;
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = base64_0.decode(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints();
      BigInteger bigInteger0 = BigInteger.probablePrime(614, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(614, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [IAAAAAEAAAACAAAAAwAAAAQAAAAFAAAABgAAAAcAAAAIAAAACQAAAAoAAAALAAAADAAAAA0AAAAOAAAADwAAABAAAAARAAAAEgAAAo0=]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Base64 base64_0 = new Base64(1399);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-98);
      byteArray0[6] = (byte)63;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(14, byteArray1.length);
      
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)92;
      byteArray2[1] = (byte)63;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)13;
      byteArray2[4] = (byte) (-62);
      byteArray2[5] = (byte)98;
      byteArray2[6] = (byte)0;
      byteArray2[7] = (byte)0;
      byte[] byteArray3 = Base64.encodeBase64(byteArray2);
      assertEquals(12, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte) (-53);
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-1);
      Base64.decodeBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.decodeBase64(byteArray0);
      base64_0.decode(byteArray1, (int) (byte) (-99), (-2539));
      Base64 base64_1 = new Base64();
      Object object0 = base64_1.decode((Object) "&");
      base64_0.encode(object0);
      base64_0.decode(byteArray0, (int) (byte) (-99), 0);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (-346), 184);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -346
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("m`,5*?3hy|O{ue{381");
      Base64 base64_0 = new Base64((-1), byteArray0, false);
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("m53hyOue380=", string0);
      
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      assertEquals(18, byteArray2.length);
      
      boolean boolean1 = base64_0.isUrlSafe();
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-101), (byte) (-99), (byte) (-31), (byte) (-56), (byte) (-21), (byte) (-98), (byte) (-33), (byte) (-51)}, byteArray0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.testBit(64);
      Base64.toIntegerBytes(bigInteger0);
      base64_0.readResults(byteArray0, 0, 0);
      Base64.encodeBase64Chunked(byteArray0);
      base64_0.encodeToString(byteArray0);
      try { 
        base64_0.encode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte byte0 = (byte)74;
      Base64.isBase64((byte)74);
      byte[] byteArray0 = Base64.decodeBase64("");
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)74;
      byteArray1[1] = (byte)74;
      byteArray1[2] = (byte)74;
      byteArray1[3] = (byte)74;
      byteArray1[4] = (byte)74;
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      BigInteger bigInteger1 = bigInteger0.not();
      bigInteger0.setBit((byte)74);
      Base64.encodeInteger(bigInteger0);
      bigInteger0.isProbablePrime((byte)74);
      Base64 base64_0 = new Base64(true);
      Base64.decodeInteger(byteArray0);
      String string0 = "";
      // Undeclared exception!
      try { 
        bigInteger0.modInverse(bigInteger1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte) (-1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      int int0 = 0;
      Base64 base64_0 = new Base64(0);
      Base64.encodeBase64String(byteArray1);
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      String string0 = "8W/l.";
      byte[] byteArray0 = Base64.decodeBase64("8W/l.");
      Base64 base64_0 = new Base64((-1));
      byte[] byteArray1 = Base64.decodeBase64("8W/l.");
      Base64.encodeBase64(byteArray1, true, false, 64);
      base64_0.readResults(byteArray0, (-309), (-1));
      base64_0.decode(byteArray1);
      String string1 = "(B:^ys)F%JDA=Av?";
      Base64.decodeBase64("(B:^ys)F%JDA=Av?");
      base64_0.decode(byteArray0, (-309), 2990);
      byte[] byteArray2 = base64_0.encode(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, true, false);
      base64_0.readResults(byteArray0, (-1), 0);
      Base64.encodeBase64(byteArray2, true, false);
      Base64.isBase64(byteArray3);
      try { 
        base64_0.encode((Object) "8W/l.");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64((-2802), byteArray0);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)47;
      byteArray0[7] = (byte) (-83);
      byteArray0[8] = (byte)0;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-128);
      Base64 base64_0 = new Base64((-2296), byteArray0, false);
      Base64 base64_1 = new Base64((-162), byteArray0, true);
      try { 
        base64_1.encode((Object) base64_0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)114;
      base64_0.decode(byteArray0, 74, (int) (byte)0);
      Base64.decodeBase64(" (+");
      base64_0.isUrlSafe();
      base64_0.avail();
      Base64.encodeBase64(byteArray0, false, true);
      String string0 = "qjC@N=4mlz+cv";
      try { 
        base64_0.encode((Object) "qjC@N=4mlz+cv");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-36);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)14;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64((byte)0);
      Base64.encodeBase64(byteArray0, false);
      base64_0.encodeToString(byteArray1);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      String string0 = "Z[?,^";
      Base64.isBase64("Z[?,^");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)81;
      byte byte0 = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-104);
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte)121;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.isBase64((byte) (-104));
      Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)70, byteArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [UQEBAJhGeQ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-30);
      byteArray0[0] = (byte) (-30);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.decodeInteger(byteArray1);
      String string0 = "$L7ns";
      base64_0.decode((Object) "$L7ns");
      base64_0.encode(byteArray0, (int) (byte) (-30), 0);
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte)104;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)0;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      Base64 base64_0 = new Base64();
      byte[] byteArray3 = new byte[1];
      byteArray3[0] = (byte)104;
      base64_0.encode(byteArray2, (int) (byte)104, (-1116));
      base64_0.encode(byteArray3);
      Base64.encodeBase64Chunked(byteArray2);
      byte[] byteArray4 = base64_0.encode(byteArray2);
      base64_0.encode(byteArray0, (int) (byte)11, (-360));
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray4, true, false, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-122);
      byteArray0[0] = (byte) (-122);
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)26;
      byte byte2 = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-7);
      byte byte3 = (byte)0;
      byteArray0[6] = (byte)0;
      byte byte4 = (byte) (-5);
      byteArray0[7] = (byte) (-5);
      boolean boolean0 = true;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, (int) (byte)26);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)0, byteArray1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [hgAaAP_5APs\u0016\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)54;
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte) (-20);
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte)116;
      Base64.encodeBase64URLSafeString(byteArray0);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-106);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-1), byteArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [AJY=\u0016\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Y#?XYL!XG\"");
      Base64 base64_0 = new Base64(false);
      base64_0.readResults(byteArray0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      byte byte0 = (byte)0;
      Base64.isBase64((byte)0);
      Base64 base64_0 = new Base64((byte)0);
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      int int0 = (-943);
      Base64 base64_0 = new Base64((-943));
      Base64.encodeBase64String(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray1);
      base64_0.readResults(byteArray1, 37, 37);
      BigInteger bigInteger0 = BigInteger.ZERO;
      base64_0.encodeToString(byteArray0);
      BigInteger bigInteger1 = null;
      try {
        bigInteger1 = new BigInteger(byteArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Base64.isBase64("");
      Base64 base64_0 = new Base64(0);
      base64_0.avail();
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64.encodeBase64(byteArray0, true);
      base64_0.decode((Object) "");
      base64_0.hasData();
      base64_0.encodeToString(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 0, 3333);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte) (-24);
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      Base64.encodeBase64(byteArray0, false);
      Base64 base64_0 = new Base64(0);
      byte[] byteArray1 = new byte[2];
      boolean boolean0 = true;
      Base64.encodeBase64(byteArray1, true);
      Base64.encodeBase64URLSafeString(byteArray1);
      byteArray1[0] = (byte)127;
      Base64.encodeBase64(byteArray1, false);
      byteArray1[1] = (byte)0;
      int int0 = 2072;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (int) (byte)0, 2072);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)43;
      byte byte0 = (byte) (-83);
      byteArray0[1] = (byte) (-83);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-2124), byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [+\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = Base64.decodeBase64((String) null);
      assertNull(byteArray0);
  }
}
