/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:15:49 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte) (-95);
      byteArray0[5] = (byte)104;
      byteArray0[7] = (byte)85;
      Base64.isBase64(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      base64_0.decode(byteArray1, 337, (int) (byte) (-95));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.setBit(2952);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Base64 base64_1 = new Base64(64, byteArray1, true);
      byte[] byteArray2 = base64_1.encode(byteArray0);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      base64_0.decode(byteArray3, 2952, 2952);
      base64_1.decode(byteArray3);
      // Undeclared exception!
      Base64.encodeBase64URLSafe(byteArray2);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.setBit(2952);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Base64 base64_1 = new Base64(64, byteArray1, true);
      byte[] byteArray2 = base64_1.encode(byteArray0);
      base64_0.encode(byteArray2);
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 6);
      Base64 base64_0 = new Base64(true);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, 6, 6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.setBit(2926);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Base64 base64_1 = new Base64(477, byteArray1, true);
      base64_1.encode(byteArray1, 84, 218);
      base64_1.encode(byteArray1, (-379), (-30));
      BigInteger bigInteger2 = Base64.decodeInteger(byteArray0);
      base64_1.encode(byteArray0, (-336), 64);
      Base64 base64_2 = new Base64(true);
      base64_2.decode(byteArray0);
      Base64.encodeInteger(bigInteger2);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.setBit(2926);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Base64 base64_1 = new Base64(2926, byteArray1, false);
      base64_1.encode(byteArray0, 76, 218);
      base64_0.encode(byteArray1, 2926, 2926);
      Base64.decodeInteger(byteArray0);
      base64_1.encode(byteArray1, 55, (-1661));
      Base64 base64_2 = new Base64(true);
      base64_2.decode(byteArray1);
      Base64.encodeInteger(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.setBit(2926);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Base64 base64_1 = new Base64(2926, byteArray1, false);
      base64_1.encode(byteArray0, 76, 237);
      base64_0.encode(byteArray1, 2926, 2926);
      base64_1.encode(byteArray1, 55, (-1661));
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte) (-1);
      byteArray2[1] = (byte)60;
      bigInteger1.intValue();
      byteArray2[2] = (byte) (-125);
      byteArray2[3] = (byte) (-105);
      byteArray2[4] = (byte)1;
      byteArray2[5] = (byte) (-55);
      byteArray2[6] = (byte)61;
      byteArray2[7] = (byte) (-7);
      byteArray2[8] = (byte)99;
      base64_1.encode(byteArray2, (-3227), (int) (byte) (-55));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.setBit(2926);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Base64 base64_1 = new Base64(64, byteArray1, true);
      byte[] byteArray2 = base64_1.encode(byteArray0);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      base64_1.decode(byteArray3);
      // Undeclared exception!
      Base64.encodeBase64(byteArray2, true, false, 8186);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.setBit(2926);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Base64.decodeInteger(byteArray0);
      Base64 base64_1 = new Base64(64, byteArray1, true);
      byte[] byteArray2 = base64_1.encode(byteArray0);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      base64_1.decode(byteArray3);
      // Undeclared exception!
      Base64.decodeInteger(byteArray2);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.setBit(2926);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Base64 base64_1 = new Base64(64, byteArray1, true);
      base64_1.encode(byteArray0, 76, 237);
      base64_1.encode(byteArray0, 237, 237);
      base64_1.encode(byteArray0, 64, 43);
      Base64.discardWhitespace(byteArray1);
      base64_1.readResults(byteArray1, 42, 64);
      base64_0.encode(byteArray0, 42, 237);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.setBit(4625);
      BigInteger.valueOf(4625);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Base64 base64_1 = new Base64(61, byteArray1, true);
      Base64 base64_2 = new Base64(61, byteArray1, false);
      byte[] byteArray2 = base64_1.encode(byteArray0);
      Base64.decodeBase64(byteArray1);
      base64_2.encode(byteArray0);
      // Undeclared exception!
      base64_2.decode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.setBit(4625);
      BigInteger.valueOf(4625);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Base64 base64_1 = new Base64(61, byteArray1, true);
      base64_1.encode(byteArray1);
      bigInteger1.testBit(8188);
      byte[] byteArray2 = base64_0.encode(byteArray0);
      bigInteger1.longValue();
      BigInteger bigInteger2 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger2);
      byte[] byteArray3 = base64_1.encode(byteArray2);
      // Undeclared exception!
      Base64.discardWhitespace(byteArray3);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Base64 base64_0 = new Base64((-857));
      byte[] byteArray0 = null;
      int int0 = 70;
      base64_0.encode((byte[]) null, 70, (-857));
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, (-857), 70);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.setBit(2061584302);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.setBit(2900);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Base64 base64_1 = new Base64(64, byteArray1, true);
      byte[] byteArray2 = base64_1.encode(byteArray0);
      base64_1.encode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.setBit(2900);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Base64 base64_1 = new Base64(64, byteArray1, true);
      byte[] byteArray2 = base64_1.encode(byteArray0);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      // Undeclared exception!
      base64_0.encode(byteArray3);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.setBit(3360);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      bigInteger1.toString();
      Base64 base64_0 = new Base64(false);
      base64_0.decode(byteArray0, 36, 1348);
      Base64.encodeInteger(bigInteger1);
      Base64.decodeBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Random.setNextRandom(93);
      Base64 base64_0 = new Base64(749, byteArray1);
      Base64 base64_1 = new Base64(true);
      Object object0 = base64_1.decode((Object) "org.apache.commons.codec.binary.StringUtils");
      Object object1 = base64_0.decode(object0);
      // Undeclared exception!
      try { 
        base64_0.encode(object1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.setBit(1907);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64.isArrayByteBase64(byteArray0);
      BigInteger bigInteger2 = Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(1907);
      Base64 base64_1 = new Base64((byte)53);
      bigInteger1.flipBit(64);
      int int0 = base64_1.readResults(byteArray0, 355, 1907);
      assertEquals(0, int0);
      
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      bigInteger1.max(bigInteger2);
      base64_1.decode(byteArray0, 36, 922);
      byte[] byteArray2 = base64_1.decode(byteArray1);
      assertEquals(320, byteArray2.length);
      assertEquals(427, byteArray1.length);
      assertTrue(bigInteger1.equals((Object)bigInteger2));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.setBit(442);
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte)60;
      Base64 base64_0 = new Base64((-1637), byteArray0, false);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      boolean boolean0 = Base64.isBase64(byteArray1);
      assertEquals(24, byteArray1.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte) (-112);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 1, 1826);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)5;
      Base64 base64_0 = new Base64(false);
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("BQ==", string0);
      
      base64_0.encode(byteArray0, (int) (byte)5, (-1));
      boolean boolean0 = base64_0.hasData();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger1.setBit(442);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger2);
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      //  // Unstable assertion: assertTrue(boolean0);
      
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      //  // Unstable assertion: assertEquals(106, byteArray1.length);
      
      bigInteger0.divideAndRemainder(bigInteger2);
      Base64 base64_1 = new Base64(319);
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger2);
      base64_1.decode("Input array too big, the output array would be bigger (");
      byte[] byteArray3 = new byte[8];
      byteArray3[0] = (byte) (-124);
      byteArray3[1] = (byte)80;
      byteArray3[2] = (byte) (-4);
      byteArray3[3] = (byte) (-1);
      byteArray3[4] = (byte)112;
      byteArray3[5] = (byte) (-1);
      byteArray3[6] = (byte)72;
      byteArray3[7] = (byte) (-38);
      String string0 = Base64.encodeBase64URLSafeString(byteArray3);
      //  // Unstable assertion: assertEquals("hFD8_3D_SNo", string0);
      
      Base64 base64_2 = new Base64();
      byte[] byteArray4 = base64_2.encode(byteArray0);
      //  // Unstable assertion: assertEquals(104, byteArray4.length);
      
      byte[] byteArray5 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray6 = Base64.decodeBase64("Input array too big, the output array would be bigger (");
      //  // Unstable assertion: assertEquals(32, byteArray6.length);
      
      base64_2.decode((Object) "Input array too big, the output array would be bigger (");
      Base64.decodeInteger(byteArray2);
      byte[] byteArray7 = Base64.discardWhitespace(byteArray5);
      //  // Unstable assertion: assertEquals(2, byteArray7.length);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.setBit(1907);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertTrue(boolean0);
      
      BigInteger bigInteger2 = Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(true);
      Base64 base64_1 = new Base64((byte)53);
      bigInteger1.flipBit(64);
      int int0 = base64_1.readResults(byteArray0, 355, 1907);
      assertEquals(0, int0);
      
      Base64.encodeBase64URLSafe(byteArray0);
      base64_1.decode(byteArray0, 18, 922);
      base64_0.decode(byteArray0);
      assertTrue(bigInteger1.equals((Object)bigInteger2));
      assertEquals(320, byteArray0.length);
      assertFalse(bigInteger0.equals((Object)bigInteger2));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-101);
      byteArray0[6] = (byte) (-12);
      byteArray0[7] = (byte)55;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(7, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-47), (byte)16, (byte)1, (byte) (-101), (byte) (-12), (byte)55}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte byte0 = (byte) (-65);
      byte byte1 = (byte)23;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)23;
      Base64 base64_0 = new Base64((byte) (-65), byteArray0, false);
      byte[] byteArray1 = base64_0.decode("UTF-16");
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      base64_0.hasData();
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.isBase64("UTF-16");
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, false);
      Base64 base64_1 = new Base64();
      base64_1.hasData();
      Base64.discardWhitespace(byteArray2);
      Base64 base64_2 = new Base64((-1));
      Base64 base64_3 = new Base64(true);
      Base64.encodeBase64(byteArray3, false);
      // Undeclared exception!
      try { 
        base64_3.decode(byteArray1, 0, 305);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.setBit(63);
      Base64.encodeInteger(bigInteger1);
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.setBit(1907);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64.isArrayByteBase64(byteArray0);
      Base64.decodeInteger(byteArray0);
      bigInteger0.and(bigInteger1);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      base64_0.encode(byteArray1, 1907, 76);
      Base64.isBase64((byte)123);
      Base64 base64_1 = new Base64(64, byteArray1, true);
      Base64.encodeBase64(byteArray1);
      byte[] byteArray2 = base64_1.encode(byteArray0);
      Base64.discardWhitespace(byteArray2);
      byte[] byteArray3 = new byte[0];
      Base64.encodeBase64String(byteArray3);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)4;
      Base64 base64_0 = new Base64((byte)4);
      byte[] byteArray1 = new byte[9];
      byteArray1[1] = (byte)4;
      byteArray1[2] = (byte)4;
      byteArray1[3] = (byte)4;
      byteArray1[4] = (byte)4;
      byteArray1[5] = (byte)4;
      byteArray1[7] = (byte)32;
      byteArray1[8] = (byte)3;
      base64_0.decode(byteArray1);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.isBase64((byte) (-10));
      base64_0.encode(byteArray1);
      Base64 base64_1 = new Base64((byte)3);
      // Undeclared exception!
      try { 
        base64_1.encode((byte[]) null, (int) (byte)4, 5367);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)0;
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.getLowestSetBit();
      BigInteger bigInteger1 = BigInteger.TEN;
      Base64.isBase64((byte)61);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte)53;
      byteArray0[6] = (byte)61;
      byteArray0[7] = (byte)61;
      byteArray0[8] = (byte)53;
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64 base64_1 = new Base64((byte)53);
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte) (-48);
      byteArray2[1] = (byte) (-48);
      byteArray2[2] = (byte) (-48);
      byteArray2[3] = (byte)125;
      byteArray2[4] = (byte) (-48);
      byteArray2[5] = (byte)61;
      byteArray2[6] = (byte) (-12);
      byteArray2[7] = (byte)61;
      byteArray2[8] = (byte)53;
      base64_1.readResults(byteArray2, (-5211), (byte)53);
      base64_0.encode(byteArray1, 0, (int) (byte) (-48));
      Base64.encodeBase64URLSafe(byteArray1);
      base64_0.decode(byteArray1, (int) (byte)61, 818);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.setBit(1907);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64((-2181));
      base64_0.encode(byteArray0, (-2181), (-2181));
      byte byte0 = (byte)123;
      Base64.isBase64((byte)123);
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, 1073741824, (-1725));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.setBit(1907);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64.isArrayByteBase64(byteArray0);
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      base64_0.encode(byteArray1, 1907, 76);
      Base64.isBase64((byte)123);
      Base64 base64_1 = new Base64(64, byteArray1, true);
      base64_1.encode(byteArray0, 19, 249);
      Base64 base64_2 = new Base64();
      Object object0 = new Object();
      Object object1 = new Object();
      try { 
        base64_2.decode(object1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.getLowestSetBit();
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = new byte[0];
      Base64.isArrayByteBase64(byteArray1);
      Base64 base64_0 = new Base64();
      int int0 = 14;
      Base64.encodeBase64Chunked(byteArray0);
      base64_0.encode(byteArray1, 14, 0);
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte) (-1);
      byteArray2[1] = (byte)43;
      byteArray2[2] = (byte)16;
      byte byte0 = (byte) (-22);
      byteArray2[3] = (byte) (-22);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray2, 0, 238);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Base64.decodeBase64((String) null);
      Base64 base64_0 = new Base64((-1081), (byte[]) null, true);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.nextProbablePrime();
      bigInteger1.max(bigInteger0);
      base64_0.encode((byte[]) null, 320, 0);
      base64_0.avail();
      Base64.encodeBase64((byte[]) null, true, true, (-1081));
      base64_0.encode((byte[]) null);
      Base64.decodeBase64((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte)10;
      base64_0.encodeToString(byteArray0);
      base64_0.avail();
      Base64.encodeBase64String((byte[]) null);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.setBit(1907);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64.isArrayByteBase64(byteArray0);
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      base64_0.encode(byteArray1, 1907, 76);
      Base64.isBase64((byte)123);
      Base64 base64_1 = new Base64(64, byteArray1, true);
      base64_1.encode(byteArray0);
      base64_0.readResults(byteArray0, 1907, (byte)123);
      base64_1.encode(byteArray0, 76, 2320);
      Base64.encodeBase64URLSafe(byteArray0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      Base64 base64_0 = new Base64();
      base64_0.readResults(byteArray0, (byte)53, (byte)0);
      Base64 base64_1 = new Base64((byte)0);
      base64_0.encode(byteArray0, 76, (int) (byte)0);
      base64_0.encode(byteArray0);
      Base64.decodeBase64(byteArray0);
      // Undeclared exception!
      try { 
        base64_1.decode(byteArray0, (int) (byte)0, 299);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte) (-38);
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)125;
      byteArray0[7] = (byte) (-126);
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64(true);
      Base64.isBase64("1HYArNoKfYI=");
      Object object0 = base64_0.decode((Object) "1HYArNoKfYI=");
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64(byteArray1, true, false);
      base64_0.encode(object0);
      Object object1 = new Object();
      Object object2 = base64_0.decode(object0);
      base64_0.decode(object2);
      try { 
        base64_0.encode(object1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.setBit(1907);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(false);
      base64_0.decode(byteArray0);
      BigInteger bigInteger2 = BigInteger.TEN;
      Base64.isBase64((byte)68);
      base64_0.encode(byteArray0);
      Base64 base64_1 = new Base64((-536));
      base64_0.readResults(byteArray0, 64, (byte)68);
      base64_0.encode(byteArray0, 76, 1907);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      base64_1.decode(byteArray1, 18, 76);
      Base64.encodeInteger(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.setBit(1907);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      base64_0.encode(byteArray1, 0, 899);
      BigInteger bigInteger2 = BigInteger.TEN;
      Base64.isBase64((byte) (-20));
      byte[] byteArray2 = base64_0.encode(byteArray0);
      Base64.decodeBase64("a^n");
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray2);
      Base64.isBase64(byteArray0);
      Base64.isBase64(byteArray3);
      Base64.isBase64((byte) (-20));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = 8;
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64(8, (byte[]) null, true);
      Base64.encodeBase64((byte[]) null, true);
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 8, 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.nextProbablePrime();
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Base64.decodeBase64((String) null);
      boolean boolean0 = true;
      Base64 base64_0 = new Base64((-1081), (byte[]) null, true);
      base64_0.decode((String) null);
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      base64_0.hasData();
      Base64.encodeBase64URLSafeString((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.setBit(0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-51);
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte) (-69);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)16;
      byteArray0[7] = (byte) (-48);
      Base64.encodeBase64(byteArray0);
      Base64.isArrayByteBase64(byteArray0);
      Base64.isBase64("Parameter supplied to Base64 encode is not a byte[]");
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-51);
      byteArray1[1] = (byte)16;
      byteArray1[2] = (byte) (-69);
      byteArray1[3] = (byte) (-57);
      byteArray1[4] = (byte)1;
      byteArray1[5] = (byte) (-57);
      byteArray1[6] = (byte) (-57);
      byteArray1[7] = (byte) (-48);
      byteArray1[8] = (byte) (-29);
      base64_0.encode(byteArray1);
      Base64.isBase64("");
      Base64.decodeBase64("Parameter supplied to Base64 encode is not a byte[]");
      base64_0.readResults(byteArray0, 1, (byte) (-29));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(277, byteArray0, false);
      byte[] byteArray1 = base64_0.decode("acKbC%fv21#C~IB/Q-");
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      base64_0.hasData();
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.isBase64("acKbCfv21CIB_Q8");
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true);
      base64_0.hasData();
      byte[] byteArray4 = Base64.discardWhitespace(byteArray0);
      Base64 base64_1 = new Base64((-2417));
      Base64.encodeBase64(byteArray4, true);
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      Base64.isBase64("Sb]~\"N)jcf?$adO'");
      Base64.isBase64("Sb]~\"N)jcf?$adO'");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte) (-15);
      byteArray0[6] = (byte)97;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)97;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      base64_0.hasData();
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      Base64 base64_1 = new Base64(0);
      base64_1.encodeToString(byteArray2);
      base64_0.decode(byteArray2);
      Base64.decodeBase64("QUg1L1lXSHhZUUJo");
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.setBit(1907);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64.isArrayByteBase64(byteArray0);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)10;
      byteArray1[1] = (byte)89;
      byteArray1[2] = (byte)11;
      byteArray1[3] = (byte)72;
      byteArray1[4] = (byte) (-30);
      byteArray1[5] = (byte)105;
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.encodeBase64URLSafe(byteArray1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte) (-30);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      Object object0 = new Object();
      byte[] byteArray3 = new byte[0];
      base64_0.readResults(byteArray3, 93, (byte)120);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray2, 0, 585);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Base64.isBase64((byte) (-102));
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.toString();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte) (-102);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger0.or(bigInteger1);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Base64.decodeBase64((String) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.add(bigInteger1);
      Base64.isBase64((byte)41);
      Base64 base64_0 = new Base64(false);
      base64_0.encode((byte[]) null);
      Base64 base64_1 = new Base64(6);
      base64_0.readResults((byte[]) null, (byte)41, (byte)41);
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, (int) (byte)81, 1613);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.toString(0);
      bigInteger0.testBit(0);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(0);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      base64_0.hasData();
      Base64.encodeBase64URLSafeString(byteArray2);
      byte[] byteArray3 = new byte[0];
      base64_0.encodeToString(byteArray3);
      Base64.isBase64("org.apache.commons.codec.EncoderException");
      Base64.encodeBase64(byteArray2, false);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.andNot(bigInteger1);
      base64_0.hasData();
      byte[] byteArray4 = Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64(byteArray4, false, false);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.isBase64((byte) (-1));
      byte[] byteArray5 = base64_0.encode(byteArray1);
      Base64.encodeBase64(byteArray5, false, false, 8184);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0, (int) (byte)0, (int) (byte)0);
      base64_0.avail();
      Base64 base64_1 = new Base64(2297);
      byte[] byteArray1 = base64_1.encode(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_2 = new Base64(64);
      Base64.encodeBase64Chunked(byteArray0);
      base64_1.readResults(byteArray1, (byte)81, 2);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (int) (byte)0, 563);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Base64.decodeBase64((String) null);
      Base64 base64_0 = new Base64((-1081), (byte[]) null, true);
      boolean boolean0 = true;
      Base64.encodeBase64((byte[]) null, true, false);
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = base64_0.decode(byteArray0);
      base64_0.encode(byteArray0, 180, 79);
      byteArray0[0] = (byte)126;
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.isBase64((byte)126);
      base64_0.encode(byteArray1, 79, 0);
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)126;
      byteArray2[1] = (byte)126;
      byteArray2[2] = (byte)126;
      byte[] byteArray3 = base64_0.encode(byteArray2);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)81;
      base64_0.decode(byteArray0, (int) (byte)1, 0);
      base64_0.avail();
      byte[] byteArray4 = Base64.encodeBase64URLSafe(byteArray0);
      base64_0.isUrlSafe();
      Base64.isBase64(byteArray4);
      Base64.isBase64(byteArray3);
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.setBit(0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-51);
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte) (-69);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)16;
      byteArray0[7] = (byte) (-48);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(0);
      base64_0.encodeToString(byteArray1);
      base64_0.decode(byteArray1, 1, 0);
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.setBit(0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-51);
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte) (-69);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)16;
      byteArray0[7] = (byte) (-48);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(29);
      base64_0.encodeToString(byteArray1);
      byte[] byteArray2 = base64_0.decode(byteArray0);
      byte[] byteArray3 = Base64.decodeBase64("org.apache.commons.codec.binary.StringUtils");
      Base64.encodeBase64URLSafe(byteArray3);
      byte[] byteArray4 = new byte[7];
      byteArray4[0] = (byte) (-48);
      byteArray4[1] = (byte)1;
      byteArray4[2] = (byte)1;
      byteArray4[3] = (byte) (-29);
      byteArray4[4] = (byte)1;
      byteArray4[5] = (byte) (-51);
      byteArray4[6] = (byte) (-51);
      Base64.isBase64(byteArray4);
      Base64.isBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)0;
      Base64.decodeBase64(byteArray0);
      Base64.isBase64("2");
      Base64.isBase64("2");
      Base64 base64_1 = new Base64(false);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte) (-113);
      base64_0.encode(byteArray0, (int) (byte) (-113), (int) (byte) (-113));
      Base64.isBase64("Sb]~\"N)jcf?$adO'");
      Base64.isBase64("6ab_-\"b.O ");
      Base64 base64_1 = new Base64(false);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-101);
      byteArray1[1] = (byte)83;
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)111;
      byteArray0[5] = (byte)85;
      base64_0.encode(byteArray0, 95, (int) (byte) (-1));
      byte[] byteArray1 = base64_0.decode("");
      base64_0.readResults(byteArray1, (-2228), (-158));
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (-2228), 52);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2228
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.setBit(0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-51);
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte) (-69);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)16;
      byteArray0[7] = (byte) (-48);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(0);
      base64_0.encodeToString(byteArray1);
      base64_0.decode(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64("org.apache.commons.codec.binary.StringUtils");
      Base64.encodeBase64URLSafe(byteArray2);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[3];
      base64_0.decode(byteArray0);
      base64_0.encode(byteArray0, 180, 79);
      byteArray0[0] = (byte)126;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.add(bigInteger1);
      Base64.isBase64((byte)126);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)126;
      byteArray1[1] = (byte)126;
      byteArray1[2] = (byte)126;
      base64_0.encode(byteArray1);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)81;
      base64_0.decode(byteArray0, (int) (byte)1, 0);
      base64_0.avail();
      Base64.encodeBase64URLSafe(byteArray0);
      base64_0.isUrlSafe();
      Base64.encodeBase64URLSafeString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)123;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.encodeBase64URLSafe(byteArray0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(723, byteArray0);
      Base64.decodeBase64("lineSeperator must not contain base64 characters: [");
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = base64_0.decode("lineSeperator must not contain base64 characters: [");
      byte[] byteArray2 = base64_0.decode(byteArray0);
      base64_0.hasData();
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64.isBase64("");
      byte[] byteArray3 = Base64.discardWhitespace(byteArray1);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Base64.decodeBase64((String) null);
      Base64 base64_0 = new Base64((-1081), (byte[]) null, true);
      byte[] byteArray0 = base64_0.decode("acKbC%fv21#C~IB/Q-");
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      base64_0.hasData();
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.isBase64("");
      Base64.encodeBase64((byte[]) null, true);
      base64_0.hasData();
      Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64(byteArray0, true, true);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.isBase64((byte)111);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(723, byteArray0);
      base64_0.decode((Object) "lineSeperator must not contain base64 characters: [");
      Base64.decodeBase64("E^");
      byte[] byteArray1 = Base64.decodeBase64("lineSeperator must not contain base64 characters: [");
      byte[] byteArray2 = base64_0.decode("lineSeperator must not contain base64 characters: [");
      byte[] byteArray3 = Base64.CHUNK_SEPARATOR;
      base64_0.hasData();
      Base64.encodeBase64URLSafeString(byteArray3);
      Base64.encodeBase64(byteArray2, false, false, 1563);
      Base64.isBase64("org.apache.commons.codec.EncoderException");
      Base64.encodeBase64(byteArray0, false);
      base64_0.hasData();
      Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64(byteArray1, true, true);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.isBase64((byte)84);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Base64.isBase64((byte) (-109));
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = null;
      Base64.decodeBase64((String) null);
      int int0 = (-1081);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[3];
      Base64 base64_1 = new Base64(2715, (byte[]) null);
      Base64.encodeBase64((byte[]) null, true, false, 3);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, true, (-3104));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of -3104
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(723, byteArray0);
      base64_0.decode((Object) "lineSeperator must not contain base64 characters: [");
      Base64.decodeBase64("E^");
      byte[] byteArray1 = Base64.decodeBase64("lineSeperator must not contain base64 characters: [");
      base64_0.decode("lineSeperator must not contain base64 characters: [");
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      base64_0.hasData();
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64.isBase64("org.apache.commons.codec.EncoderException");
      Base64.encodeBase64(byteArray0, false);
      base64_0.hasData();
      Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64(byteArray1, true, true);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.isBase64((byte)84);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Base64.decodeBase64((String) null);
      boolean boolean0 = true;
      Base64 base64_0 = new Base64((-1081), (byte[]) null, true);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.nextProbablePrime();
      Base64.encodeBase64URLSafe((byte[]) null);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      base64_0.readResults((byte[]) null, (-1081), (-1081));
      base64_0.decode(byteArray0, (-1081), (-1081));
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64((byte)0, byteArray0, true);
      base64_0.readResults(byteArray0, 1782, 360);
      base64_0.encodeToString((byte[]) null);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger1.not();
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64.encodeInteger(bigInteger2);
      Base64.isBase64((byte)0);
      Base64.encodeBase64((byte[]) null);
      base64_0.hasData();
      Base64.decodeBase64("ymgcZ\"*,^l");
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      Base64.encodeBase64URLSafe(byteArray2);
      Base64.encodeBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(723, byteArray0);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      base64_0.hasData();
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.isBase64("org.apache.commons.codec.EncoderException");
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false);
      base64_0.isUrlSafe();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = null;
      try {
        bigInteger1 = new BigInteger(byteArray2);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Base64 base64_0 = new Base64((-966));
      base64_0.decode((Object) "");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-111);
      Base64.encodeBase64URLSafeString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64URLSafe(byteArray1);
      base64_0.decode(byteArray0, (-1119), 0);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray2 = new byte[1];
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 55, 55);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 55
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Base64.decodeBase64((String) null);
      Base64 base64_0 = new Base64((-1081), (byte[]) null, true);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.nextProbablePrime();
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      base64_0.readResults((byte[]) null, (-1081), (-1081));
      byte[] byteArray1 = new byte[0];
      base64_0.decode(byteArray0, (-1081), (-1081));
      base64_0.readResults(byteArray1, (-1081), 0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      int int0 = 719;
      Base64 base64_0 = new Base64(719);
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0, (int) (byte)0, (int) (byte)0);
      base64_0.avail();
      base64_0.hasData();
      base64_0.readResults(byteArray0, 16, 0);
      Base64.encodeBase64String(byteArray0);
      bigInteger0.longValueExact();
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, (-1970));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of -1970
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = null;
      Base64.encodeBase64URLSafe((byte[]) null);
      base64_0.encodeToString((byte[]) null);
      Base64.encodeBase64((byte[]) null, false);
      byte[] byteArray1 = new byte[1];
      byte byte0 = (byte)24;
      Base64.decodeInteger(byteArray1);
      byteArray1[0] = (byte)24;
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-70);
      byteArray0[0] = (byte) (-70);
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      Base64 base64_0 = new Base64(0, byteArray0);
      Base64.encodeBase64(byteArray0, true, true, 96);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      Base64.isBase64((byte) (-86));
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      base64_0.encode((byte[]) null);
      base64_0.decode((byte[]) null);
      base64_0.decode("");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)98;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(false);
      base64_0.readResults(byteArray0, (byte)98, 96);
      byte[] byteArray2 = base64_0.decode("lU?~qpqdP$O5lIiTu");
      base64_0.encodeToString(byteArray1);
      base64_0.encode(byteArray1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.not();
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeInteger(bigInteger0);
      Base64.decodeInteger(byteArray2);
      Base64.isBase64((byte)98);
      Base64.encodeBase64(byteArray1);
      base64_0.hasData();
      Base64.decodeBase64("2NwP;%hYY");
      Base64.decodeInteger(byteArray0);
      Base64.decodeBase64("2NwP;%hYY");
      byte[] byteArray3 = new byte[4];
      byteArray3[0] = (byte)98;
      byteArray3[1] = (byte)98;
      byteArray3[2] = (byte)18;
      byteArray3[3] = (byte)98;
      Base64.encodeBase64(byteArray3);
      Base64.encodeBase64URLSafe(byteArray2);
      Base64.encodeBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-104);
      byteArray0[0] = (byte) (-104);
      byte byte1 = (byte) (-14);
      byteArray0[1] = (byte) (-14);
      byte byte2 = (byte)124;
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte)101;
      Base64.encodeBase64String(byteArray0);
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)101, byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD\uFFFD|e]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.decode("%JJs|k[(E2gIu");
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.shiftLeft(64);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64(byteArray0, true, true);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64.encodeBase64Chunked((byte[]) null);
      Base64 base64_0 = new Base64((-1038), (byte[]) null, true);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64URLSafeString((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-111);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      Base64.isBase64((byte) (-1));
      Base64.isArrayByteBase64(byteArray1);
      Base64.encodeBase64(byteArray2, true);
      Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(false);
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      int int0 = 0;
      bigInteger0.toString(0);
      bigInteger0.testBit(0);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(0);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray1);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 0, 1728);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[0];
      Base64.decodeInteger(byteArray0);
      base64_0.readResults(byteArray0, 285, 86);
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("", string0);
      
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64("AwF1ys");
      assertArrayEquals(new byte[] {(byte)3, (byte)1, (byte)117, (byte) (-54)}, byteArray2);
      assertEquals(4, byteArray2.length);
      
      Base64.encodeBase64(byteArray0, false, false, 76);
      Base64.encodeBase64(byteArray1, false);
      Base64.encodeBase64URLSafe(byteArray1);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte) (-58);
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("2cYAAAAAAA==", string0);
      
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)38;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(14, byteArray1.length);
      
      base64_0.encodeToString(byteArray0);
      byteArray0[5] = (byte) (-13);
      byteArray0[6] = (byte) (-65);
      byte[] byteArray2 = base64_0.encode(byteArray0);
      byte[] byteArray3 = base64_0.decode(byteArray2);
      boolean boolean0 = Base64.isBase64("2cb4ACYAAA==");
      assertTrue(boolean0);
      
      Base64.isArrayByteBase64(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray4 = new byte[5];
      byteArray4[0] = (byte) (-58);
      byteArray4[1] = (byte) (-65);
      byteArray4[2] = (byte) (-58);
      byteArray4[3] = (byte) (-39);
      byteArray4[4] = (byte) (-8);
      bigInteger0.not();
      String string1 = base64_0.encodeToString(byteArray0);
      assertEquals("2cb4ACbzvw==", string1);
      
      base64_0.decode(byteArray4, (int) (byte) (-8), 0);
      byte[] byteArray5 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(1, byteArray5.length);
      
      Base64.decodeInteger(byteArray3);
      byte[] byteArray6 = Base64.encodeBase64(byteArray0);
      base64_0.decode(byteArray6);
      byte[] byteArray7 = base64_0.decode("2cb4ACYAAA==");
      assertEquals(7, byteArray7.length);
      assertArrayEquals(new byte[] {(byte) (-39), (byte) (-58), (byte) (-8), (byte)0, (byte)38, (byte)0, (byte)0}, byteArray7);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Base64 base64_0 = new Base64((-1580), (byte[]) null, true);
      base64_0.readResults((byte[]) null, 66, (-1580));
      base64_0.decode("X`V=RhZ1");
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(723, byteArray0);
      byte[] byteArray1 = Base64.decodeBase64("lineSeperator must not contain base64 characters: [");
      base64_0.decode("lineSeperator must not contain base64 characters: [");
      byte[] byteArray2 = base64_0.decode(byteArray0);
      boolean boolean0 = base64_0.hasData();
      assertFalse(boolean0);
      
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64.isBase64("org.apache.commons.codec.EncoderException");
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, false);
      byte[] byteArray4 = base64_0.decode(byteArray3);
      byte[] byteArray5 = Base64.encodeBase64URLSafe(byteArray1);
      assertEquals(43, byteArray5.length);
      
      base64_0.decode("org.apache.commons.codec.EncoderException");
      Base64.encodeBase64URLSafeString(byteArray4);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Base64 base64_0 = new Base64(115);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)104;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)43;
      base64_0.readResults(byteArray0, (byte)43, (-500));
      base64_0.hasData();
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-98);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)86;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte) (-33);
      byteArray1[5] = (byte) (-1);
      byteArray1[6] = (byte)48;
      byteArray1[7] = (byte)125;
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      assertEquals(14, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[3];
      Base64.isBase64("Sb]~\"N)jcf?$adO'");
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      Base64.encodeBase64Chunked(byteArray0);
      boolean boolean1 = true;
      int int0 = 788;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 107, (int) (byte)97);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 107
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Base64 base64_0 = new Base64(129);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte) (-62);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertArrayEquals(new byte[] {(byte)47, (byte)119, (byte)90, (byte)83, (byte)119, (byte)103, (byte)61, (byte)61, (byte)13, (byte)10}, byteArray1);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      assertEquals(4, byteArray2.length);
      
      byte[] byteArray3 = base64_0.decode("4pXAj%dyr6'k]Vi@O");
      boolean boolean0 = Base64.isArrayByteBase64(byteArray3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)16;
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64();
      try { 
        base64_0.encode((Object) "zgAQ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      boolean boolean0 = base64_0.hasData();
      assertFalse(boolean0);
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64(".z8@b");
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.remainder(bigInteger1);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      byte[] byteArray3 = new byte[1];
      byteArray3[0] = (byte)16;
      boolean boolean0 = Base64.isArrayByteBase64(byteArray3);
      assertFalse(boolean0);
      
      Base64 base64_0 = new Base64(0);
      String string0 = base64_0.encodeToString(byteArray2);
      assertEquals("ejhZPQ==", string0);
      
      base64_0.decode(byteArray1);
      byte[] byteArray4 = Base64.decodeBase64(byteArray0);
      byte[] byteArray5 = Base64.encodeBase64URLSafe(byteArray4);
      Base64.decodeInteger(byteArray2);
      byte[] byteArray6 = Base64.toIntegerBytes(bigInteger1);
      assertEquals(1, byteArray6.length);
      
      byte[] byteArray7 = Base64.encodeBase64(byteArray5, false, false);
      assertNotSame(byteArray7, byteArray2);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte) (-89);
      byte byte0 = (byte)74;
      byteArray0[5] = (byte)74;
      byteArray0[6] = (byte)60;
      byteArray0[7] = (byte)28;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-2531), byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000\u0000\u0003c\uFFFDJ<\u001C]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)77;
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-54);
      byteArray0[3] = (byte)66;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(70, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [M\u0000\uFFFDB]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = base64_0.decode(byteArray0);
      assertEquals(0, byteArray1.length);
      
      base64_0.encode(byteArray0, 180, 79);
      byteArray0[0] = (byte)126;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.add(bigInteger1);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      assertEquals(4, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray2);
      
      boolean boolean0 = Base64.isBase64("b0fEwm\":C}pYYPZ");
      assertFalse(boolean0);
      
      byte[] byteArray3 = new byte[3];
      byteArray3[0] = (byte)126;
      byteArray3[1] = (byte)126;
      byteArray3[2] = (byte)126;
      byte[] byteArray4 = base64_0.encode(byteArray3);
      assertEquals(6, byteArray4.length);
      
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)81;
      base64_0.decode(byteArray0, (int) (byte)1, 0);
      int int0 = base64_0.avail();
      assertEquals(0, int0);
      
      Base64.encodeBase64URLSafe(byteArray0);
      base64_0.isUrlSafe();
      boolean boolean1 = base64_0.isUrlSafe();
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-60);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      assertEquals(14, byteArray1.length);
      
      Base64 base64_0 = new Base64(true);
      assertTrue(base64_0.isUrlSafe());
      
      base64_0.encode(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(1, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      Base64 base64_0 = new Base64(0, byteArray0, true);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      assertEquals((short)0, bigInteger0.shortValue());
      
      base64_0.readResults(byteArray0, (-1652), 0);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65}, byteArray2);
  }
}
