/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 16:34:59 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[122];
      Base64 base64_0 = new Base64(4, byteArray0, true);
      Base64 base64_1 = new Base64(64);
      byte[] byteArray1 = base64_1.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      String string0 = Base64.encodeBase64String(byteArray2);
      Object object0 = base64_0.decode((Object) string0);
      // Undeclared exception!
      base64_0.encode(object0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[82];
      Base64 base64_0 = new Base64(4, byteArray0, true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      Base64.isBase64(byteArray0);
      Base64.isBase64(byteArray2);
      int int0 = (-116);
      Base64.encodeBase64Chunked(byteArray2);
      // Undeclared exception!
      Base64.encodeBase64(byteArray2, true);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[110];
      Base64 base64_0 = new Base64(4, byteArray0, false);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      base64_0.encode(byteArray2, 4, 4);
      // Undeclared exception!
      Base64.encodeBase64Chunked(byteArray2);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[84];
      Base64 base64_0 = new Base64(4, byteArray0, true);
      Base64 base64_1 = new Base64(4, byteArray0, true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64(byteArray0);
      base64_1.encode(byteArray1, 64, 1665);
      base64_1.encode(byteArray1, 53, (-1778));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[110];
      Base64 base64_0 = new Base64(4, byteArray0, true);
      Base64 base64_1 = new Base64(64);
      byte[] byteArray1 = base64_1.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      Base64.encodeBase64URLSafeString(byteArray0);
      // Undeclared exception!
      Base64.decodeBase64(byteArray3);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[84];
      Base64 base64_0 = new Base64(4, byteArray0, true);
      Base64 base64_1 = new Base64(64);
      byte[] byteArray1 = base64_1.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      String string0 = Base64.encodeBase64String(byteArray2);
      base64_1.decode(string0);
      Base64.encodeBase64String(byteArray2);
      base64_1.decode((Object) string0);
      // Undeclared exception!
      base64_0.decode((Object) string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[84];
      Base64 base64_0 = new Base64(4, byteArray0, true);
      Base64 base64_1 = new Base64(36, byteArray0, false);
      Base64 base64_2 = new Base64(64);
      byte[] byteArray1 = base64_2.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      String string0 = Base64.encodeBase64String(byteArray2);
      base64_2.decode((Object) string0);
      Base64.decodeBase64(string0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.encodeInteger(bigInteger0);
      // Undeclared exception!
      Base64.decodeBase64(string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[84];
      int int0 = 4;
      Base64 base64_0 = new Base64(4, byteArray0, false);
      Base64 base64_1 = new Base64(4, byteArray0, false);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_1.encode(byteArray1, 64, 107);
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray1, 1393, 1393);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2464
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[84];
      Base64 base64_0 = new Base64(4, byteArray0, false);
      Base64 base64_1 = new Base64(4, byteArray0, false);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_1.encode(byteArray1, 64, 107);
      base64_1.encode(byteArray1, 4, (-554));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[84];
      Base64 base64_0 = new Base64(4, byteArray0, true);
      Base64 base64_1 = new Base64(4, byteArray0, true);
      base64_0.encode(byteArray0);
      byte[] byteArray1 = base64_1.encode(byteArray0);
      byte[] byteArray2 = base64_1.encode(byteArray1);
      // Undeclared exception!
      Base64.encodeBase64String(byteArray2);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[82];
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64(byteArray0, true);
      base64_0.encode(byteArray0, 1, 1);
      base64_0.encode(byteArray0, 1, (int) (byte) (-69));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[84];
      Base64 base64_0 = new Base64(4, byteArray0, true);
      Base64 base64_1 = new Base64(4, byteArray0, true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_1.encode(byteArray1);
      String string0 = Base64.encodeBase64String(byteArray1);
      base64_1.decode((Object) string0);
      BigInteger bigInteger0 = new BigInteger(byteArray2);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[84];
      Base64 base64_0 = new Base64(4, byteArray0, true);
      Base64 base64_1 = new Base64(4, byteArray0, true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_1.encode(byteArray1, 64, 107);
      base64_1.encode(byteArray1, 53, (-1778));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[2];
      base64_0.encode(byteArray0, 1, 1);
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte) (-69);
      base64_0.encode(byteArray0, 640, (int) (byte) (-69));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[82];
      Base64 base64_0 = new Base64(4, byteArray0, true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      Base64.isBase64(byteArray0);
      Base64.isBase64(byteArray2);
      Base64.encodeBase64(byteArray2, true);
      base64_0.encode(byteArray2, (-116), 13);
      byte[] byteArray3 = new byte[9];
      byteArray3[0] = (byte) (-16);
      byteArray3[1] = (byte)22;
      byteArray3[2] = (byte)1;
      byteArray3[3] = (byte)47;
      byteArray3[4] = (byte) (-43);
      byteArray3[5] = (byte)27;
      byteArray3[6] = (byte)41;
      byteArray3[7] = (byte)1;
      // Undeclared exception!
      base64_0.encodeToString(byteArray2);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[65];
      Base64 base64_0 = new Base64(4, byteArray0, true);
      String string0 = "$rg.apache.commons.codec.DecoderExceptGon";
      byte[] byteArray1 = base64_0.decode("$rg.apache.commons.codec.DecoderExceptGon");
      Base64 base64_1 = new Base64(64, byteArray0, true);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      base64_1.encode(byteArray2, 76, 4);
      base64_1.encode(byteArray2, 4, 566);
      // Undeclared exception!
      base64_1.decode(byteArray3);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[65];
      Base64 base64_0 = new Base64(4, byteArray0, true);
      byte[] byteArray1 = base64_0.decode("$rg.apache.commons.codec.DecoderExceptGon");
      Base64 base64_1 = new Base64(64, byteArray0, true);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      base64_1.encode(byteArray2, 76, 4);
      // Undeclared exception!
      Base64.decodeInteger(byteArray3);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[65];
      Base64 base64_0 = new Base64(4, byteArray0, true);
      byte[] byteArray1 = base64_0.decode("$rg.apache.commons.codec.DecoderExceptGon");
      Base64 base64_1 = new Base64(64, byteArray0, true);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      // Undeclared exception!
      Base64.encodeBase64(byteArray3);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte) (-1);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)89;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      base64_0.encode(byteArray1, (int) (byte)5, (int) (byte)5);
      base64_0.readResults(byteArray0, 0, (byte)0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      assertEquals(14, byteArray1.length);
      assertEquals((byte)89, bigInteger0.byteValue());
      assertEquals(12, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[65];
      Base64 base64_0 = new Base64(4, byteArray0, true);
      byte[] byteArray1 = base64_0.decode("$rg.apache.commons.codec.DecoderExceptGon");
      Base64 base64_1 = new Base64(64, byteArray0, true);
      base64_0.readResults(byteArray0, (-173), (-255));
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      Base64.decodeInteger(byteArray2);
      // Undeclared exception!
      Base64.discardWhitespace(byteArray3);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[56];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertEquals(76, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Base64 base64_0 = new Base64(4);
      base64_0.encode((byte[]) null, 1811, (-1729));
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, 4856, 2188);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[65];
      Base64 base64_0 = new Base64(4, byteArray0, true);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      byte[] byteArray2 = base64_0.decode("");
      Base64 base64_1 = new Base64(64, byteArray0, true);
      byte[] byteArray3 = base64_0.encode(byteArray1);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      assertEquals(49195, byteArray4.length);
      
      base64_1.decode(byteArray2);
      Base64.decodeInteger(byteArray2);
      // Undeclared exception!
      base64_1.encode(byteArray4);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[30];
      Base64 base64_0 = new Base64(24, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      Base64.encodeInteger(bigInteger0);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, false, false, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (140) than the specified maxium size of 2
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray1, 5, 3617);
      assertEquals(24, byteArray1.length);
      
      byte[] byteArray2 = base64_0.encode(byteArray0);
      assertEquals(24, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(59, byteArray0);
      Base64 base64_1 = new Base64(64, byteArray0);
      Object object0 = base64_1.decode((Object) "SK,CL.Rjf6P,xqFAK");
      base64_0.decode(object0);
      // Undeclared exception!
      try { 
        base64_1.encode(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte) (-1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)72, (byte)108, (byte)74, (byte)69, (byte)102, (byte)56, (byte)61}, byteArray1);
      
      base64_0.decode(byteArray1, 0, (int) (byte)17);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      assertArrayEquals(new byte[] {(byte)65, (byte)72, (byte)108, (byte)74, (byte)69, (byte)102, (byte)56, (byte)61}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      base64_0.decode(byteArray1, 0, 3617);
      Base64.encodeBase64String(byteArray0);
      boolean boolean0 = Base64.isArrayByteBase64(byteArray1);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61}, byteArray1);
      assertTrue(boolean0);
      
      int int0 = base64_0.avail();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(16, byteArray1.length);
      
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)9;
      boolean boolean0 = Base64.isBase64(byteArray2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)80;
      Base64.encodeBase64(byteArray0, true, true, (int) (byte)14);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      base64_0.decode(byteArray1, 0, 3617);
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base64 base64_0 = new Base64(5, byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 5, 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64(76, byteArray0, true);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)118;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-11);
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)89;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      base64_0.encode(byteArray1, (int) (byte)5, (int) (byte)5);
      base64_0.readResults(byteArray0, 0, (byte)123);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      Base64.encodeInteger(bigInteger0);
      assertArrayEquals(new byte[] {(byte)90, (byte)106, (byte)107, (byte)51, (byte) (-1), (byte)123, (byte)1, (byte)89}, byteArray0);
      assertEquals((short)345, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)113;
      byteArray0[3] = (byte)6;
      byteArray0[5] = (byte) (-64);
      byteArray0[6] = (byte)126;
      base64_0.decode(byteArray0, (int) (byte)6, (int) (byte)1);
      assertFalse(base64_0.isUrlSafe());
      
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("encodeInteger called with null parameter");
      int int0 = 5;
      Base64 base64_0 = new Base64(5);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 5, 69);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 27
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(22, byteArray1.length);
      
      Base64 base64_0 = new Base64(false);
      byte[] byteArray2 = Base64.decodeBase64("tzE5}2Xp ;cBGx>H");
      assertArrayEquals(new byte[] {(byte) (-73), (byte)49, (byte)57, (byte) (-39), (byte)122, (byte)92, (byte)4, (byte)108, (byte)71}, byteArray2);
      assertEquals(9, byteArray2.length);
      
      base64_0.decode(byteArray0, (int) (byte)1, (int) (byte)1);
      base64_0.encode(byteArray0, (int) (byte)1, (-2371));
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      assertTrue(base64_0.isUrlSafe());
      
      boolean boolean0 = Base64.isBase64((byte)61);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(false);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)1, 1228);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte) (-9);
      byteArray0[6] = (byte)115;
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte) (-94);
      byteArray0[5] = (byte)82;
      byteArray0[6] = (byte)78;
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 0, (int) (byte)115);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-24);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte) (-41);
      byteArray0[7] = (byte) (-96);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray0, (-850), (-850));
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 1);
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray1, (-850), 97);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte) (-50);
      byteArray0[6] = (byte)96;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)0, (int) (byte)44);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)98;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_2 = new Base64();
      // Undeclared exception!
      try { 
        base64_2.encode(byteArray1, (-99), (int) (byte)98);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -99
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = (-180);
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64((-180), (byte[]) null);
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.encodeBase64URLSafe((byte[]) null);
      base64_0.decode((byte[]) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger0);
      base64_0.encode((byte[]) null, (-180), (-180));
      base64_0.avail();
      base64_0.avail();
      boolean boolean0 = true;
      boolean boolean1 = false;
      Base64.encodeBase64((byte[]) null, false);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      base64_0.encode((byte[]) null);
      Base64.decodeBase64((byte[]) null);
      byte[] byteArray0 = new byte[0];
      base64_0.encode(byteArray0);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      //  // Unstable assertion: assertEquals("AAAAAAAAAAAA", string0);
      
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64(6);
      byte[] byteArray2 = Base64.decodeBase64("AAAAAAAAAAAA");
      //  // Unstable assertion: assertEquals(9, byteArray2.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      
      base64_0.isUrlSafe();
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray1);
      String string1 = base64_0.encodeToString(byteArray0);
      //  // Unstable assertion: assertEquals("AAAA~\u0000AAAA~\u0000AAAA~\u0000", string1);
      
      base64_0.decode(byteArray1, 6, 3498);
      base64_0.encode(byteArray3, 6, 4348);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)102, (byte)103, (byte)65, (byte)61, (byte)126, (byte)0}, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Base64 base64_0 = new Base64((-817), (byte[]) null, true);
      base64_0.decode((byte[]) null, 0, (-817));
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      base64_0.hasData();
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64.isArrayByteBase64(byteArray0);
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      base64_0.hasData();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)9;
      Base64.discardWhitespace(byteArray0);
      Base64 base64_1 = new Base64();
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray0, (int) (byte)9, 70);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(false);
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)45;
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)0;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false, 1787);
      assertEquals(4, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61}, byteArray2);
      
      byte[] byteArray3 = Base64.discardWhitespace(byteArray1);
      assertEquals(1, byteArray3.length);
      
      Base64 base64_0 = new Base64();
      base64_0.decode((byte[]) null);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)4;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.isBase64((byte) (-98));
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)4;
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      assertEquals(1, byteArray3.length);
      assertArrayEquals(new byte[] {(byte)4}, byteArray3);
      
      byte[] byteArray4 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.toString();
      byte[] byteArray5 = Base64.encodeInteger(bigInteger0);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray5);
      assertEquals(4, byteArray5.length);
      
      byte[] byteArray6 = Base64.encodeBase64(byteArray1, false, true);
      assertEquals(14, byteArray1.length);
      assertEquals(19, byteArray6.length);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Base64 base64_0 = new Base64(1, (byte[]) null, true);
      Base64.isBase64((byte) (-20));
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 1, 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64(byteArray0, false, false, 10);
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0);
      base64_0.hasData();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger1);
      String string0 = base64_0.encodeToString(byteArray2);
      assertEquals("", string0);
      assertTrue(base64_0.isUrlSafe());
      
      Base64.isArrayByteBase64(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, true);
      assertEquals(0, byteArray3.length);
      
      BigInteger bigInteger2 = Base64.decodeInteger(byteArray0);
      assertEquals((short)0, bigInteger2.shortValue());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Base64 base64_0 = new Base64((-1));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      Base64.decodeInteger(byteArray0);
      base64_0.decode(byteArray0, (-1), (-1));
      Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_1 = new Base64();
      String string0 = "+~Ne`9`L#\\rM";
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = null;
      Base64.encodeBase64String((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Base64 base64_0 = new Base64((-1));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64((byte) (-121));
      Base64.discardWhitespace(byteArray0);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger1);
      byte[] byteArray2 = Base64.encodeBase64((byte[]) null, false, false);
      assertNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)45;
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64 base64_0 = new Base64((byte)0);
      base64_0.decode(byteArray0, (int) (byte)45, (-1718));
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_1 = new Base64();
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray1);
      assertEquals(6, byteArray1.length);
      assertEquals((short)45, bigInteger1.shortValue());
      
      Base64.decodeBase64("vIV%/dI!gR#6fI^");
      boolean boolean0 = Base64.isBase64("Input array too big, the output array would be bigger (");
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false, false);
      assertEquals(4, byteArray2.length);
      
      boolean boolean1 = base64_0.isUrlSafe();
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray3 = Base64.decodeBase64("+~Ne`9`L#\rM");
      assertArrayEquals(new byte[] {(byte) (-8), (byte) (-41), (byte) (-67), (byte)44}, byteArray3);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.decodeBase64("encodeInteger called with null parameter");
      Base64 base64_1 = new Base64(76);
      base64_1.isUrlSafe();
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)1;
      byteArray2[1] = (byte)1;
      byteArray2[2] = (byte)1;
      byteArray2[3] = (byte)1;
      byteArray2[4] = (byte)1;
      byteArray2[5] = (byte)72;
      byteArray2[6] = (byte)1;
      byteArray2[7] = (byte)1;
      Base64.encodeBase64URLSafeString((byte[]) null);
      byteArray2[8] = (byte)1;
      Base64.encodeBase64Chunked(byteArray2);
      base64_1.encodeToString(byteArray1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[5];
      Base64.isBase64("UTF-16LE");
      byteArray0[0] = (byte) (-92);
      byte byte0 = (byte)77;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)0;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger1);
      bigInteger1.max(bigInteger0);
      Base64.encodeBase64(byteArray1);
      base64_0.decode((Object) "UTF-16LE");
      bigInteger1.gcd(bigInteger0);
      Base64.encodeBase64(byteArray0, false, true);
      base64_0.decode(byteArray1);
      Base64.encodeBase64URLSafe((byte[]) null);
      try { 
        base64_0.encode((Object) "UTF-16LE");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64("");
      Base64 base64_0 = new Base64(0);
      base64_0.isUrlSafe();
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      base64_0.encodeToString(byteArray0);
      Base64.encodeBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-850), byteArray0, true);
      Base64.decodeInteger(byteArray0);
      base64_0.encodeToString(byteArray0);
      Base64.isBase64("");
      base64_0.isUrlSafe();
      Base64.decodeBase64("\"l-kBuM?;'evV");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64.isBase64("+~Ne`9`L#\rM");
      byte[] byteArray0 = new byte[0];
      Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64(byteArray0, true, false);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)52;
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      Base64.encodeBase64String(byteArray2);
      Base64 base64_0 = new Base64(false);
      Base64 base64_1 = new Base64(60, byteArray1, true);
      base64_1.encode(byteArray0);
      base64_0.hasData();
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      Base64 base64_2 = new Base64(79);
      base64_2.encodeToString(byteArray2);
      Base64.isArrayByteBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray3 = Base64.decodeBase64("+-");
      Base64 base64_0 = new Base64(19);
      base64_0.encodeToString(byteArray1);
      base64_0.decode(byteArray2);
      base64_0.decode(byteArray3, (int) (byte)69, (int) (byte)69);
      base64_0.isUrlSafe();
      base64_0.hasData();
      Base64.encodeBase64String(byteArray3);
      Base64.isBase64((byte)69);
      byte[] byteArray4 = new byte[8];
      byteArray4[0] = (byte)69;
      byteArray4[1] = (byte)70;
      byteArray4[2] = (byte)1;
      byteArray4[3] = (byte)1;
      byteArray4[4] = (byte)69;
      byteArray4[5] = (byte)1;
      byteArray4[6] = (byte)1;
      byteArray4[7] = (byte)70;
      Base64.decodeBase64(byteArray4);
      Base64.isBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-850), byteArray0, true);
      base64_0.decode(byteArray0, (-850), (-850));
      Base64.encodeBase64String(byteArray0);
      base64_0.encode(byteArray0);
      base64_0.hasData();
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)75;
      byteArray1[1] = (byte) (-53);
      byteArray1[2] = (byte)45;
      byteArray1[3] = (byte) (-104);
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)4;
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte)77;
      byteArray1[8] = (byte)14;
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64((byte)0);
      Base64.isBase64((byte)0);
      base64_0.decode((String) null);
      Base64.encodeBase64String(byteArray0);
      base64_0.decode("AAAAAAAAAAAA");
      Base64 base64_1 = new Base64();
      // Undeclared exception!
      try { 
        base64_1.encode((byte[]) null, 1209, 1431655765);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-16);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64((byte) (-111));
      base64_0.avail();
      Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte) (-111);
      byteArray2[1] = (byte) (-12);
      byteArray2[2] = (byte) (-16);
      byteArray2[3] = (byte) (-16);
      byteArray2[4] = (byte) (-111);
      byteArray2[5] = (byte) (-16);
      byteArray2[6] = (byte) (-111);
      byteArray2[7] = (byte) (-16);
      byteArray2[8] = (byte) (-111);
      Base64.encodeBase64Chunked(byteArray2);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte) (-111);
      byteArray0[6] = (byte) (-33);
      byteArray0[7] = (byte) (-96);
      byteArray0[8] = (byte)16;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.discardWhitespace(byteArray1);
      Base64.isBase64((byte) (-117));
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true, true, (int) (byte)90);
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64URLSafeString(byteArray2);
      BigInteger bigInteger0 = BigInteger.valueOf((byte)90);
      Base64.encodeInteger(bigInteger0);
      Base64.isBase64("org.apache.commons.codec.EncoderException");
      Base64.decodeBase64(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray2, (int) (byte)36, (int) (byte)76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 36
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Base64 base64_0 = new Base64((-1));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)45;
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.bitCount();
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64.decodeBase64("; V+j");
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)69;
      base64_0.encodeToString(byteArray0);
      byteArray0[4] = (byte)67;
      base64_0.decode(byteArray0);
      byteArray0[5] = (byte) (-84);
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray2 = base64_0.decode("QVE9PQ==");
      Base64 base64_1 = new Base64();
      base64_0.encode(byteArray2, 1043, (int) (byte)45);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.decodeBase64("AOYAAAAAAAAA");
      Base64 base64_0 = new Base64((byte)0);
      Base64.isBase64((byte)0);
      base64_0.decode((String) null);
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, (-1258), 1982292598);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("L>Cu");
      Base64.encodeBase64String((byte[]) null);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(80, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [,+]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-850), byteArray0, true);
      base64_0.decode(byteArray0, (-850), (-850));
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 76);
      Base64 base64_1 = new Base64(true);
      Object object0 = new Object();
      Object object1 = base64_1.decode((Object) "");
      base64_0.encode(object1);
      base64_0.encodeToString(byteArray1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.isBase64("4iJoHP9)\"P>p)7");
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)4;
      byteArray2[1] = (byte)4;
      byteArray2[2] = (byte)4;
      byteArray2[3] = (byte)4;
      byteArray2[4] = (byte)4;
      byteArray2[5] = (byte)4;
      byteArray2[6] = (byte)4;
      base64_0.encode(byteArray1, (int) (byte)4, (int) (byte)4);
      Base64.encodeBase64(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, false);
      base64_0.isUrlSafe();
      Base64.decodeBase64("sN'gMwWKZjEb'3)_3");
      Base64.encodeBase64String(byteArray3);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Base64 base64_0 = new Base64((-1));
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      Base64.decodeInteger(byteArray0);
      byte byte1 = (byte)45;
      byteArray0[1] = (byte)45;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)0, (int) (byte)45);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)110;
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Base64 base64_0 = new Base64();
      Base64.encodeBase64(byteArray0, false);
      base64_0.decode(byteArray0, 7, (-349));
      Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64((byte)4);
      Base64.encodeBase64(byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)52;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 10);
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      Base64.encodeBase64String(byteArray2);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray3 = base64_0.encode(byteArray1);
      base64_0.hasData();
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      base64_0.encodeToString(byteArray1);
      Base64.isArrayByteBase64(byteArray3);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.bitCount();
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray2 = Base64.decodeBase64("; V+j");
      Base64 base64_0 = new Base64(false);
      base64_0.encodeToString(byteArray2);
      Base64 base64_1 = new Base64(false);
      byte[] byteArray3 = base64_1.encode(byteArray1);
      byte[] byteArray4 = base64_0.decode(byteArray2);
      base64_0.decode(byteArray3, (int) (byte)7, (-219));
      Base64 base64_2 = new Base64(false);
      base64_2.isUrlSafe();
      base64_2.hasData();
      Base64.encodeBase64String(byteArray4);
      Base64.decodeInteger(byteArray1);
      Base64.isBase64((byte) (-1));
      Base64.decodeBase64(byteArray0);
      Base64.isBase64(byteArray4);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.bitCount();
      BigInteger bigInteger1 = BigInteger.ZERO;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray2 = Base64.decodeBase64("; V+j");
      base64_0.encodeToString(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray1);
      byte[] byteArray4 = base64_0.decode(byteArray3);
      base64_0.decode(byteArray4, (int) (byte)69, (int) (byte) (-1));
      base64_0.isUrlSafe();
      Base64 base64_1 = new Base64(0, byteArray3, true);
      base64_1.hasData();
      Base64.encodeBase64String(byteArray2);
      Base64.decodeInteger(byteArray2);
      Base64.isBase64((byte)22);
      byte[] byteArray5 = Base64.decodeBase64(byteArray4);
      Base64.isBase64(byteArray0);
      base64_0.encode(byteArray5);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-850), byteArray0, true);
      base64_0.decode(byteArray0, (-850), (-850));
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("", string0);
      
      base64_0.encode(byteArray0);
      boolean boolean0 = Base64.isBase64("");
      assertTrue(boolean0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(1, byteArray1.length);
      
      base64_0.encodeToString(byteArray0);
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Base64 base64_0 = new Base64((-1));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)45;
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.bitCount();
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray2 = Base64.decodeBase64("; V+j");
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)69;
      base64_0.encodeToString(byteArray0);
      base64_0.encode(byteArray0);
      byteArray0[4] = (byte)67;
      byte[] byteArray3 = base64_0.decode(byteArray0);
      byteArray0[5] = (byte) (-84);
      base64_0.decode(byteArray0, 2359, (int) (byte)45);
      base64_0.isUrlSafe();
      base64_0.hasData();
      Base64.encodeBase64String(byteArray0);
      Base64.decodeInteger(byteArray3);
      Base64.isBase64((byte)67);
      Base64.decodeBase64(byteArray2);
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      Base64 base64_0 = new Base64((byte)67, byteArray0);
      base64_0.encodeToString(byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64 base64_1 = new Base64(true);
      byte[] byteArray2 = base64_1.decode(byteArray1);
      base64_1.decode(byteArray0, (-2630), (int) (byte)0);
      base64_0.isUrlSafe();
      base64_0.hasData();
      Base64.encodeBase64String(byteArray1);
      Base64.decodeInteger(byteArray2);
      Base64.isBase64((byte)123);
      byte[] byteArray3 = Base64.decodeBase64(byteArray2);
      Base64.decodeBase64((String) null);
      base64_0.decode(byteArray3, (-2630), 69);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[6];
      Base64.decodeBase64("+Jb{rQ&d");
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)83;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)118;
      byteArray0[5] = (byte)0;
      base64_0.encodeToString(byteArray0);
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)1;
      byteArray2[1] = (byte)42;
      byteArray2[2] = (byte)42;
      Base64.isArrayByteBase64(byteArray2);
      base64_0.decode(byteArray2);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, true, true, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64("AOYAAAAAAAAA");
      Base64 base64_0 = new Base64((byte)0);
      Base64.isBase64((byte)0);
      base64_0.decode((String) null);
      Base64.encodeBase64String(byteArray0);
      base64_0.decode("AOYAAAAAAAAA");
      Base64 base64_1 = new Base64();
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray1, (int) (byte) (-26), 619);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -26
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)35;
      byteArray0[0] = (byte)35;
      byte byte1 = (byte)52;
      byteArray0[1] = (byte)52;
      int int0 = 10;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 10);
      Base64.encodeBase64String(byteArray1);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-3330), byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [#4]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Base64.decodeBase64("L>Cu");
      byte[] byteArray0 = null;
      Base64.encodeBase64((byte[]) null, false, true, 105);
      Base64 base64_0 = new Base64(false);
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte)0;
      base64_0.decode(byteArray0, 21, 0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)93;
      byteArray0[8] = (byte)0;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64 base64_0 = new Base64(2173, byteArray1);
      Base64.encodeBase64String(byteArray1);
      base64_0.isUrlSafe();
      base64_0.isUrlSafe();
      base64_0.readResults(byteArray1, 0, (-1));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(1633, byteArray0);
      base64_0.encodeToString(byteArray0);
      Base64.encodeInteger(bigInteger0);
      base64_0.readResults(byteArray0, (-1353), (-1));
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      Base64.encodeInteger(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64URLSafeString(byteArray0);
      bigInteger0.shiftLeft(333);
      Base64 base64_0 = new Base64(0, byteArray0, true);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.decodeBase64("AQ");
      base64_0.avail();
      BigInteger.valueOf(0);
      Base64.decodeBase64(byteArray0);
      Base64.encodeBase64String(byteArray0);
      base64_0.decode("");
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)69;
      byteArray1[2] = (byte)1;
      byteArray1[3] = (byte)39;
      byteArray1[4] = (byte)32;
      byteArray1[5] = (byte)1;
      byteArray1[6] = (byte)0;
      Base64.encodeBase64(byteArray1, false, true);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = 0;
      Base64 base64_0 = new Base64(0);
      Object object0 = new Object();
      base64_0.readResults((byte[]) null, 0, 0);
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Base64.isBase64((byte) (-1));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)88;
      Base64.encodeBase64(byteArray0);
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-93);
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)88;
      byteArray1[4] = (byte) (-66);
      base64_0.decode(byteArray1, 562, (-4178));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64(true);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64(";W'c3e+ )+H(");
      Object object0 = base64_1.decode((Object) "W<*hG u|");
      Base64.decodeBase64(byteArray1);
      Object object1 = base64_0.decode(object0);
      Object object2 = base64_0.decode(object1);
      base64_0.decode(object2);
      base64_0.hasData();
      Base64.encodeBase64(byteArray0, true, true, 76);
      int int0 = (-3993);
      int int1 = 0;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.pow(0);
      Base64.encodeInteger(bigInteger1);
      Base64.encodeBase64String(byteArray2);
      base64_1.decode((Object) "]Ct");
      base64_0.encode(byteArray0, (-3993), 0);
      base64_0.readResults(byteArray1, (-3993), 76);
      Base64.encodeBase64(byteArray2, true);
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte)17;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)1;
      Base64 base64_0 = new Base64((-118), byteArray0, false);
      String string0 = "";
      Base64.decodeBase64(byteArray0);
      base64_0.readResults(byteArray0, 0, 0);
      Base64.encodeBase64(byteArray0, false, true);
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)83;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)118;
      byteArray0[5] = (byte)0;
      base64_0.encodeToString(byteArray0);
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)1;
      byteArray2[1] = (byte)42;
      byteArray2[2] = (byte)42;
      Base64.isArrayByteBase64(byteArray2);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, true, true, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64 base64_0 = new Base64();
      byte[] byteArray2 = base64_0.decode(byteArray0);
      base64_0.decode(byteArray0);
      Base64.encodeBase64String(byteArray2);
      Base64.decodeBase64((byte[]) null);
      Base64.encodeBase64(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray2);
      Base64.encodeBase64((byte[]) null);
      byte[] byteArray4 = Base64.decodeBase64("");
      base64_0.hasData();
      base64_0.decode(byteArray3);
      byte[] byteArray5 = new byte[6];
      byteArray5[0] = (byte)1;
      byteArray5[1] = (byte)0;
      byteArray5[2] = (byte)0;
      byteArray5[3] = (byte)0;
      byteArray5[4] = (byte)1;
      byteArray5[5] = (byte)0;
      base64_0.decode(byteArray5, (int) (byte)1, (-1));
      Base64.encodeBase64(byteArray4, true, true, (-1073));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)12;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.isBase64("+~Ne`9`L#\rM");
      Base64.encodeBase64(byteArray1, false, false);
      base64_0.isUrlSafe();
      Base64.decodeBase64("org.apache.commons.codec.DecoderException");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-88);
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)40;
      Base64.encodeBase64URLSafe(byteArray0);
      base64_0.decode("0w?Yh_~H#:(F5^ S");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-850), byteArray0, true);
      base64_0.decode(byteArray0, (-850), (-850));
      String string0 = Base64.encodeBase64String(byteArray0);
      base64_0.encode(byteArray0);
      base64_0.hasData();
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(1, byteArray1.length);
      
      String string1 = base64_0.encodeToString(byteArray0);
      assertTrue(string1.equals((Object)string0));
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)58;
      byte byte0 = (byte)114;
      byteArray0[5] = (byte)114;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)114, byteArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000\u0001s\u0001:r]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64 base64_0 = new Base64((-2459), byteArray0);
      Base64.encodeBase64String(byteArray0);
      try { 
        base64_0.encode((Object) "AA==");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Base64 base64_0 = new Base64((-1));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)45;
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.bitCount();
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.decodeBase64("; V+j");
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)69;
      base64_0.encodeToString(byteArray0);
      base64_0.encode(byteArray0);
      byteArray0[4] = (byte)67;
      byte[] byteArray2 = base64_0.decode(byteArray0);
      byteArray0[5] = (byte) (-84);
      base64_0.decode(byteArray0, 2359, (int) (byte)45);
      base64_0.isUrlSafe();
      base64_0.hasData();
      Base64.encodeBase64String(byteArray0);
      Base64.decodeInteger(byteArray2);
      Base64.isBase64((byte)67);
      Base64.decodeBase64(byteArray1);
      Base64.decodeBase64((String) null);
      base64_0.decode(byteArray1, 0, (-1));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = (-912);
      Base64 base64_0 = new Base64((-912));
      byte[] byteArray0 = new byte[2];
      base64_0.encode(byteArray0, (-912), (-912));
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte) (-55);
      base64_0.encode(byteArray0, (int) (byte) (-55), (int) (byte) (-45));
      base64_0.hasData();
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-1);
      byte byte0 = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byte byte1 = (byte) (-79);
      byteArray0[5] = (byte) (-79);
      byte byte2 = (byte) (-1);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)36;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-2153), byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [OZ\uFFFD\u0000\u0000\uFFFD\uFFFD$]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)41;
      byte byte0 = (byte)78;
      byteArray0[1] = (byte)78;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.encodeBase64URLSafe(byteArray1);
      Base64 base64_0 = new Base64((byte)41);
      Base64.encodeBase64(byteArray0, false, false);
      int int0 = (-423);
      Base64.encodeBase64(byteArray0);
      int int1 = 687;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 687, 687);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 687
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[1];
      base64_0.encodeToString(byteArray0);
      byteArray0[0] = (byte)16;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      base64_0.decode((Object) "AA==");
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-8);
      byteArray0[5] = (byte)13;
      Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64(3341, byteArray0, true);
      Base64.encodeBase64URLSafe(byteArray0);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte) (-6);
      byteArray0[6] = (byte)117;
      byteArray0[7] = (byte) (-101);
      Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.shiftRight(76);
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-22);
      byteArray1[1] = (byte)29;
      byteArray1[2] = (byte)23;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      Base64.encodeBase64URLSafe(byteArray1);
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int int0 = 0;
      Base64 base64_0 = new Base64(0);
      String string0 = "q&R]HOa|!Ya&2P";
      Base64.decodeBase64("q&R]HOa|!Ya&2P");
      String string1 = "org.apache.commons.codec.DecoderException";
      base64_0.decode((Object) "org.apache.commons.codec.DecoderException");
      try { 
        base64_0.encode((Object) "org.apache.commons.codec.DecoderException");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      base64_0.encodeToString((byte[]) null);
      String string0 = "";
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte) (-109);
      byteArray0[7] = (byte)0;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 120, 2230);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 120
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)4;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)4, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)35;
      byteArray0[0] = (byte)35;
      byte byte1 = (byte)52;
      byteArray0[1] = (byte)52;
      int int0 = 10;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 10);
      Base64.encodeBase64String(byteArray1);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-3330), byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [#4]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-107);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-35);
      byteArray0[7] = (byte)123;
      byteArray0[8] = (byte)1;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(14, byteArray1.length);
      
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)123;
      byteArray2[2] = (byte)0;
      Base64 base64_0 = new Base64(1467, byteArray2, false);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)1;
      byteArray0[0] = (byte)1;
      byte byte1 = (byte)102;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte) (-1);
      Base64.encodeBase64URLSafeString(byteArray0);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, true, (int) (byte) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = 0;
      Base64 base64_0 = new Base64(0);
      String string0 = null;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      base64_0.decode((String) null);
      byteArray0[1] = (byte)0;
      byte byte0 = (byte)47;
      byteArray0[2] = (byte)47;
      boolean boolean0 = false;
      Base64.encodeBase64(byteArray0, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger0);
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }
}
