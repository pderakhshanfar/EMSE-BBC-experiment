/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 16:10:45 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      BigInteger bigInteger0 = new BigInteger(64, 64, mockRandom0);
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)123;
      Base64.isArrayByteBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Base64.decodeBase64("B'PQ<~z{8[.*C<1buH");
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("y,\"!RO&Lf&#2");
      Base64.encodeBase64URLSafeString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[52];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Base64.isBase64("encodeInteger called with null parameter");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base64.isArrayByteBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.encodeToString((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = Base64.decodeBase64("");
      base64_0.encodeToString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Base64.encodeBase64URLSafe((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafe(byteArray0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Base64.encodeBase64String((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64String(byteArray0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Base64.encodeBase64Chunked((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[25];
      Base64.encodeBase64Chunked(byteArray0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[31];
      Base64.encodeBase64(byteArray0, true, true);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Base64.encodeBase64((byte[]) null, false);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64.encodeBase64(byteArray0, true);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Base64.encodeBase64((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64.encodeBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)49;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)43;
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Base64.decodeBase64((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[31];
      Base64.decodeBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Base64.decodeBase64((String) null);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Base64 base64_0 = new Base64(748);
      base64_0.decode((String) null);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base64 base64_0 = new Base64((byte)24, byteArray0, false);
      base64_0.decode("!@)tZLj(-x|:9dZ\"");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[35];
      Base64 base64_0 = new Base64(22, byteArray0);
      Base64 base64_1 = new Base64(64, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_1.encode(byteArray1, 20, (int) (byte)22);
      base64_1.avail();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[52];
      Base64 base64_0 = new Base64(14, byteArray0);
      base64_0.encode(byteArray0, 14, 1);
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, 2036, 76);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Base64 base64_0 = new Base64(329, byteArray0);
      base64_0.decode(byteArray0, 0, 1);
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, 1, (-106));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[38];
      Base64 base64_0 = new Base64(22, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      // Undeclared exception!
      base64_0.encodeToString(byteArray4);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-326), byteArray0, false);
      byte[] byteArray1 = new byte[1];
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[35];
      Base64 base64_0 = new Base64(22, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      BigInteger bigInteger0 = new BigInteger(byteArray4);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[65];
      Base64 base64_0 = new Base64(22, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      // Undeclared exception!
      Base64.encodeBase64URLSafeString(byteArray3);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      Base64 base64_0 = new Base64(22, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      // Undeclared exception!
      Base64.encodeBase64URLSafe(byteArray4);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[65];
      Base64 base64_0 = new Base64(22, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      // Undeclared exception!
      Base64.encodeBase64String(byteArray3);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[65];
      Base64 base64_0 = new Base64(22, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      // Undeclared exception!
      Base64.encodeBase64(byteArray3, false);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      Base64 base64_0 = new Base64(22, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      // Undeclared exception!
      Base64.encodeBase64(byteArray4);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base64 base64_0 = new Base64((byte)24, byteArray0, true);
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, (int) (byte)24, (int) (byte)24);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[4];
      Base64 base64_0 = new Base64(854, byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(64, byteArray0, false);
      Object object0 = base64_0.decode((Object) "UTF-8");
      // Undeclared exception!
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[52];
      Base64 base64_0 = new Base64(22, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      base64_0.decode(byteArray3);
      // Undeclared exception!
      Base64.decodeInteger(byteArray3);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, (-1), 81);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[52];
      Base64 base64_0 = new Base64(22, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      // Undeclared exception!
      base64_0.decode(byteArray4);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte)76;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-5083), byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000\u0000\u0000\u0000L]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false, 487);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)61, (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false, (-1));
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null, true, true, (-902));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = base64_0.decode((byte[]) null);
      assertFalse(base64_0.isUrlSafe());
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = Base64.decodeBase64("");
      byte[] byteArray1 = base64_0.decode(byteArray0);
      assertSame(byteArray1, byteArray0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)87);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte) (-36));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)61);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[38];
      Base64 base64_0 = new Base64(22, byteArray0);
      Base64 base64_1 = new Base64(103, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_1.decode(byteArray1, 103, 76);
      assertEquals(166, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[31];
      Base64 base64_0 = new Base64(22, byteArray0);
      Base64 base64_1 = new Base64(103, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_1.decode(byteArray1, 103, 76);
      assertEquals(137, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)124;
      Base64 base64_0 = new Base64(10, byteArray0);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, 0, (int) (byte)124);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.decode((byte[]) null, (int) (byte)0, (-646));
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[1];
      base64_0.encode(byteArray0, (-1), (-1));
      base64_0.decode((byte[]) null, 41, (-1));
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[89];
      Base64 base64_0 = new Base64(7, byteArray0);
      Base64 base64_1 = new Base64(64, byteArray0);
      byte[] byteArray1 = base64_1.encode(byteArray0);
      base64_0.encode(byteArray1, 64, 64);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 64, 393);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 298
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[52];
      Base64 base64_0 = new Base64(14, byteArray0);
      Base64 base64_1 = new Base64(64, byteArray0);
      byte[] byteArray1 = base64_1.encode(byteArray0);
      base64_0.encode(byteArray1, 64, 64);
      base64_0.decode(byteArray1, 14, 64);
      base64_0.encode(byteArray0, (-2953), (-524));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[52];
      Base64 base64_0 = new Base64((-3), byteArray0);
      Base64 base64_1 = new Base64(64, byteArray0);
      byte[] byteArray1 = base64_1.encode(byteArray0);
      base64_0.encode(byteArray1, 64, 64);
      base64_0.encode(byteArray0, 1228, (-1));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[49];
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0, (int) (byte)0, (int) (byte)1);
      base64_0.encode(byteArray0, 89, (int) (byte) (-128));
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[42];
      Base64 base64_0 = new Base64(false);
      base64_0.decode(byteArray0, 1, 1);
      base64_0.encode(byteArray0, (-1001), (-1001));
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null, true, true);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[52];
      Base64 base64_0 = new Base64(25, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      String string0 = Base64.encodeBase64String(byteArray1);
      assertEquals("QUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBQUFBQUFBQUFBQUFBQUFBQUFBQUFBPT0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", string0);
      assertEquals(228, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 10);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = base64_0.encode((byte[]) null);
      assertTrue(base64_0.isUrlSafe());
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base64 base64_0 = new Base64((byte)24, byteArray0, true);
      Object object0 = base64_0.decode((Object) "Y[");
      Object object1 = base64_0.encode(object0);
      assertSame(object1, object0);
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      boolean boolean0 = Base64.isBase64(byteArray0);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[5] = (byte)32;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(5, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertEquals(6, byteArray2.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)61, (byte)0, (byte)0}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[4] = (byte)9;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)9, (byte)0}, byteArray0);
      assertEquals(5, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, (int) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (34) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Base64 base64_0 = new Base64();
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base64 base64_0 = new Base64((byte)24, byteArray0, true);
      Object object0 = base64_0.decode((Object) "Y[");
      Object object1 = base64_0.decode(object0);
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)125);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-116);
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      Base64 base64_0 = new Base64(22, byteArray0);
      Base64 base64_1 = new Base64(103, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_1.decode(byteArray1, 103, 76);
      assertEquals(163, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[5] = (byte) (-122);
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)0, 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)61, (byte)3, (byte)10}, byteArray1);
      //  // Unstable assertion: assertEquals(2, byteArray2.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-128);
      base64_0.encode(byteArray0, (int) (byte)0, (int) (byte)1);
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      //  // Unstable assertion: assertEquals("Awo", string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[38];
      Base64 base64_0 = new Base64(22, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.encode(byteArray1, 76, 1445);
      assertEquals(166, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base64 base64_0 = new Base64((byte)24, byteArray0, true);
      byte[] byteArray1 = base64_0.decode("Y[");
      assertEquals(0, byteArray1.length);
      
      int int0 = base64_0.readResults(byteArray0, (byte)24, 801);
      assertEquals((-1), int0);
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[52];
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64(64, byteArray0);
      byte[] byteArray1 = base64_1.encode(byteArray0);
      base64_0.encode(byteArray1, 64, 64);
      int int0 = base64_0.readResults(byteArray1, 8, 1);
      assertEquals(176, byteArray1.length);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base64 base64_0 = new Base64((byte)24, byteArray0, false);
      int int0 = base64_0.readResults(byteArray0, (byte)24, 801);
      assertEquals(0, int0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[44];
      Base64 base64_0 = new Base64(4, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      // Undeclared exception!
      base64_0.encode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base64 base64_0 = new Base64((byte)24, byteArray0, false);
      int int0 = base64_0.avail();
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray0, 8184, (-2054));
      boolean boolean0 = base64_0.hasData();
      assertTrue(boolean0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      boolean boolean0 = base64_0.hasData();
      assertFalse(boolean0);
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      boolean boolean0 = base64_0.isUrlSafe();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Base64 base64_0 = new Base64((-195));
      boolean boolean0 = base64_0.isUrlSafe();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)0, byteArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [AAAAAAAAAA==]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Base64 base64_0 = new Base64((byte)0, (byte[]) null, true);
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertEquals(50, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = Base64.encodeBase64URLSafeString((byte[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("A^4m?Ca");
      Base64 base64_0 = new Base64((-195));
      base64_0.decode(byteArray0, 0, 0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-119), (byte) (-126)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[4];
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("AAAAAA==", string0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = Base64.isBase64("lineSeperator must not contain base64 characters: [");
      assertFalse(boolean0);
  }
}
