/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 20:50:02 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = BigInteger.probablePrime(1349, mockRandom0);
      BigInteger bigInteger1 = BigInteger.probablePrime(1349, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      int int0 = Base64.PEM_CHUNK_SIZE;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(1349);
      base64_0.decode(byteArray0, 17, 1349);
      base64_0.encode(byteArray1, 1296, 1);
      base64_0.readResults(byteArray1, 94, 41);
      Base64.encodeInteger(bigInteger1);
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64((-1), byteArray0, false);
      base64_0.decode((Object) "*e?N");
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-20);
      byteArray1[1] = (byte)32;
      byteArray1[2] = (byte) (-109);
      byteArray1[3] = (byte) (-3);
      byteArray1[4] = (byte)5;
      byteArray1[5] = (byte)100;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = BigInteger.probablePrime(3033, mockRandom0);
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(3033);
      base64_0.decode(byteArray0, 82, 3033);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-962), (byte[]) null);
      Base64.decodeInteger(byteArray0);
      base64_0.encode(byteArray0, (-962), (-962));
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, 48, (-424));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = BigInteger.probablePrime(1349, mockRandom0);
      BigInteger bigInteger1 = BigInteger.probablePrime(1349, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      bigInteger1.signum();
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(1349);
      base64_0.decode(byteArray0, 28, 1349);
      Base64.encodeBase64(byteArray1, false);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 3038;
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = BigInteger.probablePrime(3038, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(3038);
      base64_0.decode(byteArray0, 28, 3038);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, true, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (698) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 3038;
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = BigInteger.probablePrime(3038, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-2025), byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [IAAAAAEAAAACAAAAAwAAAAQAAAAFAAAABgAAAAcAAAAIAAAACQAAAAoAAAALAAAADAAAAA0AAAAOAAAADwAAABAAAAARAAAAEgAAABMAAAAUAAAAFQAAABYAAAAXAAAAGAAAABkAAAAaAAAAGwAAABwAAAAdAAAAHgAAAB8AAAAgAAAAIQAAACIAAAAjAAAAJAAAACUAAAAmAAAAJwAAACgAAAApAAAAKgAAACsAAAAsAAAALQAAAC4AAAAvAAAAMAAAADEAAAAyAAAAMwAAADQAAAA1AAAANgAAADcAAAA4AAAAOQAAADoAAAA7AAAAPAAAAD0AAAA+AAAAPwAAAEAAAABBAAAAQgAAAEMAAABEAAAARQAAAEYAAABHAAAASAAAAEkAAABKAAAASwAAAEwAAABNAAAATgAAAE8AAABQAAAAUQAAAFIAAABTAAAAVAAAAFUAAABWAAAAVwAAAFgAAABZAAAAWgAAAFsAAABcAAAAXQAAAF4AAr0=]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)27;
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64((byte)27, byteArray0);
      base64_0.decode(byteArray1, (int) (byte)0, 64);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte byte0 = (byte)27;
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte)27;
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64((byte)27, byteArray0);
      base64_0.decode(byteArray1, (int) (byte)0, 8);
      int int0 = 4814;
      base64_0.readResults(byteArray1, 8, 4814);
      byte[] byteArray2 = new byte[8];
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray2, 48, (int) (byte)27);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 48
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-37);
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte) (-112);
      byteArray0[6] = (byte)68;
      byteArray0[8] = (byte) (-101);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray1);
      Base64.encodeBase64(byteArray1, false, false, 250);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)4;
      byteArray1[1] = (byte) (-122);
      byteArray1[2] = (byte)1;
      byteArray1[4] = (byte)6;
      Base64 base64_0 = new Base64((byte)4, byteArray0);
      Base64.encodeBase64(byteArray0, true, true, 99);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)6, 385);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte)27;
      byteArray0[7] = (byte)27;
      byteArray0[13] = (byte)27;
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      Base64 base64_0 = new Base64((byte)27, byteArray1);
      byte[] byteArray3 = new byte[4];
      base64_0.decode("");
      byteArray3[0] = (byte)27;
      byte[] byteArray4 = Base64.encodeBase64(byteArray2, false);
      byteArray3[1] = (byte)27;
      byteArray3[2] = (byte)27;
      base64_0.decode(byteArray4, (int) (byte)27, Integer.MAX_VALUE);
      byteArray3[3] = (byte)27;
      base64_0.encode(byteArray2, (-85), 22);
      base64_0.avail();
      Base64.isBase64((byte)81);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base64 base64_0 = new Base64(2104);
      Base64.encodeBase64(byteArray0, false, false, 14);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte)27;
      byteArray0[7] = (byte)27;
      byteArray0[13] = (byte)27;
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      Base64 base64_0 = new Base64((byte)27, byteArray1);
      byte[] byteArray3 = new byte[4];
      byteArray3[0] = (byte)27;
      byte[] byteArray4 = Base64.encodeBase64(byteArray2, false);
      byteArray3[1] = (byte)27;
      byteArray3[2] = (byte)27;
      base64_0.decode(byteArray4, (int) (byte)27, Integer.MAX_VALUE);
      byteArray3[3] = (byte)27;
      Base64.encodeBase64Chunked(byteArray3);
      base64_0.encodeToString(byteArray2);
      base64_0.hasData();
      base64_0.decode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-116);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte) (-55);
      byteArray0[7] = (byte)68;
      byteArray0[8] = (byte) (-83);
      base64_0.encode(byteArray0, (int) (byte) (-55), (int) (byte) (-1));
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)44;
      byteArray1[1] = (byte)45;
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte) (-83);
      byteArray1[4] = (byte)68;
      byteArray1[5] = (byte)27;
      byteArray1[6] = (byte) (-55);
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray1, 2296, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)7;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = new byte[11];
      byteArray2[0] = (byte)7;
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("Bw", string0);
      
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray2);
      Base64 base64_0 = new Base64((-1), (byte[]) null);
      Base64 base64_1 = new Base64((byte)7);
      byte[] byteArray4 = base64_1.decode("Bw");
      assertArrayEquals(new byte[] {(byte)7}, byteArray4);
      
      base64_0.encodeToString(byteArray2);
      boolean boolean0 = Base64.isBase64("zd}enxwIF#K-=z");
      assertFalse(boolean0);
      
      Base64.decodeInteger(byteArray0);
      byte[] byteArray5 = base64_1.encode(byteArray3);
      assertEquals(30, byteArray5.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)124;
      byteArray0[2] = (byte)27;
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      Base64 base64_0 = new Base64((byte)124, byteArray1);
      base64_0.encodeToString(byteArray2);
      boolean boolean0 = Base64.isBase64((byte)124);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Base64.decodeInteger(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)14;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)56;
      byteArray1[3] = (byte)32;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte) (-102);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64URLSafe(byteArray2);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte) (-102), byteArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u000E\u00008 \u0000\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0, (-1424), 0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-7);
      byteArray1[1] = (byte)10;
      byteArray1[2] = (byte)61;
      base64_0.encode(byteArray0, 0, (-1));
      byteArray1[3] = (byte)79;
      Base64.decodeBase64(byteArray1);
      base64_0.isUrlSafe();
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)33;
      Base64 base64_0 = new Base64((byte)33);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)33;
      byteArray1[1] = (byte)33;
      byteArray1[2] = (byte)33;
      byteArray1[3] = (byte)33;
      byteArray1[4] = (byte) (-25);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, 0, 1046);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Base64.encodeBase64((byte[]) null);
      int int0 = 6;
      Base64.encodeBase64((byte[]) null, true, false, 6);
      int int1 = 675;
      Base64 base64_0 = new Base64(675, (byte[]) null, false);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 1123;
      Base64 base64_0 = new Base64(1123);
      byte[] byteArray0 = null;
      Base64.encodeBase64((byte[]) null, false, false);
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte) (-23);
      byteArray0[6] = (byte) (-128);
      byteArray0[7] = (byte)120;
      byteArray0[8] = (byte)31;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 1, 22);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      Base64.isBase64(" | WM");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      base64_0.decode(byteArray0, (int) (byte)0, (int) (byte)0);
      Base64.decodeBase64(byteArray0);
      base64_0.isUrlSafe();
      base64_0.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.intValue();
      BigInteger.valueOf(0L);
      bigInteger0.nextProbablePrime();
      bigInteger0.doubleValue();
      Base64.isBase64("org.apache.commons.codec.binary.StringUtils");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.intValue();
      BigInteger.valueOf(0L);
      bigInteger0.nextProbablePrime();
      bigInteger0.doubleValue();
      Base64.isBase64("org.apache.commons.codec.binary.StringUtils");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      Base64 base64_0 = new Base64(1, byteArray0, false);
      base64_0.decode((String) null);
      String string0 = Base64.encodeBase64String((byte[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[1];
      base64_0.encodeToString(byteArray0);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
      base64_0.decode((Object) "AA==");
      Base64.encodeBase64(byteArray1);
      byteArray0[0] = (byte) (-125);
      base64_0.decode(byteArray0, (-219), 4050);
      Base64.encodeBase64String(byteArray0);
      base64_0.hasData();
      base64_0.decode(byteArray0);
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)38;
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_1 = new Base64((byte)61);
      Base64.encodeBase64(byteArray0, false, false, 76);
      Base64 base64_2 = new Base64(false);
      Base64.isBase64((byte)61);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.discardWhitespace(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)38;
      byteArray2[1] = (byte)38;
      byteArray2[2] = (byte)38;
      byteArray2[3] = (byte)38;
      byteArray2[4] = (byte)38;
      Base64 base64_1 = new Base64((-630), byteArray2);
      Base64 base64_2 = new Base64(123);
      byte[] byteArray3 = new byte[3];
      byteArray3[0] = (byte)38;
      byteArray3[1] = (byte)38;
      byteArray3[2] = (byte)38;
      base64_1.encodeToString(byteArray3);
      Base64.isBase64("JiYm");
      Base64.isBase64((byte)38);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Base64.isBase64(")+AVRa( QDfU");
      Base64 base64_0 = new Base64(1);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte)10;
      byte[] byteArray1 = base64_0.encode(byteArray0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      base64_0.isUrlSafe();
      base64_0.encode(byteArray2);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64(byteArray2, false, true);
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger1.nextProbablePrime();
      bigInteger0.toString();
      Base64.toIntegerBytes(bigInteger2);
      Base64.isBase64(byteArray2);
      Base64.isBase64(byteArray2);
      base64_0.decode(byteArray1, 255, 1717986918);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)76;
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-103);
      byteArray1[1] = (byte)40;
      byteArray1[2] = (byte)40;
      byteArray1[3] = (byte) (-65);
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)40;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64 base64_1 = new Base64(1, byteArray1);
      byte[] byteArray3 = base64_1.decode("");
      Base64.isBase64((byte)113);
      Base64.isArrayByteBase64(byteArray3);
      byte[] byteArray4 = Base64.encodeBase64(byteArray3, false);
      Base64.encodeBase64URLSafe(byteArray4);
      Base64.isBase64((byte)32);
      base64_0.readResults(byteArray2, 64, 64);
      Base64.isBase64("");
      Base64.isBase64((byte)58);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = base64_0.decode("encodeInteger called with null parameter");
      Base64.isBase64((byte)94);
      Base64.isArrayByteBase64(byteArray0);
      base64_0.decode("-ET1:dh|^");
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      Base64.isBase64((byte)96);
      base64_0.readResults(byteArray1, (byte)94, (byte)94);
      Base64.isBase64("encodeInteger called with null parameter");
      Base64.isBase64((byte)58);
      Base64.encodeBase64String(byteArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Base64 base64_0 = new Base64(4355);
      Base64.encodeBase64Chunked((byte[]) null);
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_1 = new Base64(106);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 106);
      Base64 base64_2 = new Base64(true);
      base64_2.isUrlSafe();
      Base64.discardWhitespace(byteArray1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte) (-5);
      byteArray2[1] = (byte)38;
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64 base64_1 = new Base64(19);
      Base64 base64_2 = new Base64(95, byteArray2, false);
      base64_2.decode((Object) "");
      byte[] byteArray3 = base64_2.decode("1|/f*e|H");
      Base64.encodeBase64String(byteArray3);
      byte[] byteArray4 = base64_1.encode(byteArray2);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray3);
      Base64.encodeBase64Chunked(byteArray3);
      base64_2.isUrlSafe();
      base64_0.encode(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray4);
      Base64.encodeBase64(byteArray4, true, false);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.toString();
      Base64.encodeInteger(bigInteger1);
      base64_1.isUrlSafe();
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.encodeBase64(byteArray2, false, false, 1181);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.intValue();
      BigInteger.valueOf(0L);
      bigInteger0.nextProbablePrime();
      bigInteger0.doubleValue();
      Base64.isBase64("org.apache.commons.codec.binary.StringUtils");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      Base64 base64_0 = new Base64(1, byteArray0, false);
      base64_0.decode((String) null);
      Base64 base64_1 = new Base64();
      base64_0.decode("org.apache.commons.codec.DecoderException");
      // Undeclared exception!
      try { 
        base64_1.encode((byte[]) null, 1742, 678);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Base64.isBase64(")+AVRa( QDfU");
      Base64.isBase64(")+AVRa( QDfU");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-66);
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)123;
      byteArray1[1] = (byte)3;
      byteArray1[2] = (byte) (-66);
      byteArray1[3] = (byte)123;
      byteArray1[4] = (byte)123;
      byteArray1[5] = (byte) (-66);
      byteArray1[6] = (byte)123;
      byteArray1[7] = (byte) (-66);
      byteArray1[8] = (byte)123;
      Base64.decodeBase64(byteArray1);
      Base64 base64_0 = new Base64((byte)123, byteArray0, false);
      base64_0.decode("e $ZJS/81~P");
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Base64.encodeBase64((byte[]) null, false, false, (int) (byte)0);
      Base64 base64_0 = new Base64(0, (byte[]) null);
      base64_0.decode((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      int int0 = Base64.PEM_CHUNK_SIZE;
      BigInteger bigInteger1 = BigInteger.valueOf(0L);
      bigInteger0.nextProbablePrime();
      bigInteger0.doubleValue();
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray0 = new byte[4];
      bigInteger1.bitCount();
      byte byte0 = (byte)34;
      byteArray0[0] = (byte)34;
      byte byte1 = (byte)116;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte)34;
      Base64.encodeBase64(byteArray0, false);
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64(true);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)34;
      byteArray1[1] = (byte)116;
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)27;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64((byte) (-1), byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.decodeBase64((String) null);
      Base64.encodeBase64((byte[]) null, false, false);
      Base64.decodeBase64((byte[]) null);
      base64_0.decode((Object) "_xs");
      base64_0.decode(byteArray0, 61, (int) (byte) (-1));
      String string0 = "G9)-taMD[:Y\"4";
      Base64.decodeBase64("G9)-taMD[:Y\"4");
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)0;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, 66);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte) (-5);
      byteArray2[1] = (byte)38;
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64 base64_1 = new Base64(19);
      Base64 base64_2 = new Base64(95, byteArray2, false);
      base64_2.decode((Object) "");
      byte[] byteArray3 = base64_2.decode("1|/f*e|H");
      Base64.encodeBase64String(byteArray3);
      byte[] byteArray4 = base64_1.encode(byteArray2);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray3);
      Base64.encodeBase64Chunked(byteArray3);
      base64_2.isUrlSafe();
      byte[] byteArray5 = base64_0.encode(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray4);
      Base64.encodeBase64(byteArray4, true, false);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.toString();
      Base64.toIntegerBytes(bigInteger1);
      Base64.isBase64(byteArray1);
      Base64.isBase64(byteArray5);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Base64 base64_0 = new Base64(4355);
      Base64.isBase64("DwqhUTpep^");
      base64_0.decode("");
      Base64 base64_1 = new Base64();
      base64_1.decode("yY)x(Gy>ws8##b{s>ab");
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger0);
      Object object0 = new Object();
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64(byteArray0, false, false, (-1105));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-116);
      Base64.encodeBase64(byteArray0, false, false, 1252);
      Base64 base64_0 = new Base64();
      base64_0.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true, (-2116));
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64 base64_0 = new Base64((-2116));
      base64_0.decode((Object) "");
      base64_0.decode("");
      Base64.encodeBase64String(byteArray1);
      base64_0.encode(byteArray2);
      Base64.decodeInteger(byteArray2);
      byte[] byteArray3 = Base64.decodeBase64("");
      base64_0.isUrlSafe();
      base64_0.encode(byteArray2);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.encodeBase64(byteArray0, true, false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.nextProbablePrime();
      bigInteger0.toString();
      Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64(byteArray3);
      byte[] byteArray4 = new byte[2];
      byteArray4[0] = (byte)3;
      Base64.isBase64(byteArray4);
      base64_0.decode(byteArray2, 77, (-1306));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Random.setNextRandom(37);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)23;
      Base64.decodeBase64(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(53, byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [CEP\uFFFD\u0017]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.isBase64(byteArray0);
      base64_0.encodeToString(byteArray1);
      Base64 base64_1 = new Base64();
      byte[] byteArray2 = base64_0.decode(byteArray1);
      Base64.encodeBase64(byteArray0, true, false, 64);
      Base64.encodeBase64Chunked(byteArray2);
      base64_0.isUrlSafe();
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, 66);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64((byte[]) null, false);
      Base64 base64_1 = new Base64();
      base64_0.decode("jW&h?)A Ow");
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger0);
      base64_1.encodeToString((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.isBase64((byte)2);
      byte[] byteArray0 = null;
      Base64.decodeBase64((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)40;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64(929, byteArray0);
      base64_0.decode("");
      Base64.isBase64((byte) (-103));
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte) (-103);
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      Base64.isArrayByteBase64(byteArray2);
      Base64.encodeBase64(byteArray1, true);
      Base64.isBase64((byte)96);
      base64_0.readResults(byteArray0, (-1897), (byte) (-116));
      Base64.isBase64(";5u@z-1'QCocqt0[D q");
      Base64.isBase64((byte)58);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true, (-2116));
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64 base64_0 = new Base64((-2116));
      base64_0.decode((Object) "");
      base64_0.decode("");
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      Base64.decodeInteger(byteArray2);
      Base64.encodeBase64Chunked(byteArray3);
      base64_0.isUrlSafe();
      base64_0.encode(byteArray2);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.encodeBase64(byteArray0, true, false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.toString();
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byte[] byteArray1 = base64_0.decode(byteArray0);
      byteArray0[1] = (byte) (-79);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_1 = new Base64((-1343));
      base64_1.decode((Object) "");
      base64_0.decode((String) null);
      Base64.encodeBase64String(byteArray0);
      base64_1.encode((byte[]) null);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray2);
      Base64.encodeBase64Chunked((byte[]) null);
      base64_0.isUrlSafe();
      base64_1.encode(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64.encodeBase64((byte[]) null, true, false);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.toString();
      Base64.toIntegerBytes(bigInteger1);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Base64.isBase64((byte)0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)110;
      byteArray2[3] = (byte)110;
      byteArray2[4] = (byte) (-99);
      byteArray2[5] = (byte)0;
      Base64.isBase64(byteArray2);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.shiftLeft((byte)110);
      Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64((byte)0, byteArray1, false);
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Base64.isBase64((byte)36);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)36;
      Base64.encodeBase64(byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.doubleValue();
      bigInteger0.shiftRight(540);
      bigInteger0.negate();
      bigInteger0.isProbablePrime(540);
      Base64 base64_0 = new Base64(false);
      base64_0.decode(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 76);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      base64_0.isUrlSafe();
      Base64.decodeInteger(byteArray2);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      base64_0.isUrlSafe();
      base64_0.avail();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      base64_0.readResults(byteArray0, 0, 959);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)0;
      Base64 base64_0 = new Base64(0, byteArray0, false);
      int int0 = base64_0.readResults(byteArray0, (byte) (-116), (byte)40);
      assertEquals(0, int0);
      assertFalse(base64_0.isUrlSafe());
      
      boolean boolean0 = Base64.isBase64("r;ayx]'DBV-s']uo%-");
      assertFalse(boolean0);
      
      boolean boolean1 = Base64.isBase64((byte)2);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray0 = Base64.decodeBase64("LDa_M5^VdD`uk^Q");
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64(byteArray1);
      Base64 base64_0 = new Base64(3300);
      Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray2 = base64_0.decode("]");
      Base64.decodeInteger(byteArray2);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      Base64.isBase64("}fv7C^1&7>\"ofly");
      byteArray0[0] = (byte)38;
      byte[] byteArray1 = base64_0.decode("9'&E@xi%Ee]K;L");
      byteArray0[1] = (byte)0;
      Base64 base64_1 = new Base64();
      Object object0 = new Object();
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.doubleValue();
      bigInteger0.shiftRight(98);
      BigInteger bigInteger2 = bigInteger1.negate();
      bigInteger0.isProbablePrime(540);
      bigInteger2.shiftLeft((-1));
      Base64.encodeInteger(bigInteger2);
      Base64 base64_2 = new Base64((-2113), byteArray0, false);
      base64_2.decode((Object) "}fv7C^1&7>\"ofly");
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Base64.isBase64((byte) (-121));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte) (-121);
      byteArray0[5] = (byte) (-121);
      byteArray0[6] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64((byte)0, byteArray0, true);
      Base64.decodeBase64(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      base64_0.decode((Object) "h4eHh4eHAA");
      base64_0.decode("h4eHh4eHAA");
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-3);
      byteArray0[6] = (byte)0;
      Base64.decodeBase64(byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)31;
      Base64 base64_0 = new Base64((-3992), byteArray1);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Base64 base64_0 = new Base64(190);
      byte[] byteArray0 = new byte[7];
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger0);
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)0;
      BigInteger bigInteger1 = BigInteger.ZERO;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      bigInteger1.intValueExact();
      byteArray0[6] = (byte)51;
      byte[] byteArray2 = base64_0.decode(byteArray0);
      base64_0.readResults(byteArray2, (byte)51, 1);
      Base64.encodeBase64Chunked(byteArray1);
      base64_0.encode(byteArray0);
      Base64.isBase64((byte)15);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte) (-1);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64((byte) (-1), byteArray0, false);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, false);
      Base64.encodeBase64(byteArray1);
      Base64.encodeBase64(byteArray0, false);
      base64_0.decode(byteArray0);
      base64_0.encode(byteArray0, (int) (byte)59, (int) (byte) (-33));
      Base64.decodeInteger(byteArray2);
      Base64.discardWhitespace(byteArray3);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      String string0 = "";
      Base64.isBase64("");
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger1.bitCount();
      // Undeclared exception!
      try { 
        bigInteger0.modInverse(bigInteger1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64((byte[]) null, false, false);
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      base64_0.isUrlSafe();
      byte[] byteArray0 = null;
      int int0 = 212;
      Base64 base64_1 = new Base64(true);
      try { 
        base64_1.encode((Object) base64_0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-83);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)82;
      byteArray0[8] = (byte)0;
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)27;
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.isBase64(byteArray1);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)27;
      Base64.encodeBase64(byteArray1, false);
      Base64.encodeBase64URLSafeString(byteArray2);
      byteArray2[1] = (byte)27;
      byte[] byteArray3 = base64_0.encode(byteArray2);
      Base64.encodeBase64(byteArray3, false, false);
      Base64.encodeBase64URLSafe(byteArray2);
      byteArray2[2] = (byte)27;
      byteArray2[3] = (byte)27;
      byteArray2[4] = (byte)90;
      byteArray2[5] = (byte)27;
      byteArray2[6] = (byte)27;
      base64_0.encodeToString(byteArray2);
      base64_0.isUrlSafe();
      base64_0.avail();
      base64_0.readResults(byteArray3, 68, (byte)27);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)22;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 70, (int) (byte)22);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 70
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)46;
      Base64.decodeInteger(byteArray0);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      byteArray0[4] = (byte) (-7);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, true, true, (int) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Object object0 = base64_0.decode((Object) "$Yp");
      Object object1 = base64_0.encode(object0);
      Object object2 = base64_0.decode(object1);
      Object object3 = base64_0.encode(object2);
      base64_0.decode(object3);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte) (-37);
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte)99;
      byteArray0[6] = (byte)97;
      byteArray0[7] = (byte) (-1);
      base64_0.decode(byteArray0, 0, (int) (byte) (-11));
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byte[] byteArray1 = base64_0.decode(byteArray0);
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte)87;
      int int0 = 110;
      base64_0.decode("");
      base64_0.decode(byteArray1);
      base64_0.decode(byteArray1);
      base64_0.decode(byteArray1);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte) (-79), 110);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -79
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.intValue();
      BigInteger bigInteger1 = BigInteger.valueOf(0L);
      bigInteger0.nextProbablePrime();
      bigInteger0.doubleValue();
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = new byte[4];
      bigInteger1.bitCount();
      byteArray1[0] = (byte)34;
      byte byte0 = (byte)116;
      byteArray1[1] = (byte)116;
      byte byte1 = (byte)98;
      byteArray1[2] = (byte)98;
      byte byte2 = (byte)18;
      byteArray1[3] = (byte)18;
      Base64.encodeBase64(byteArray1, false);
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0, 1742, (-2532));
      try { 
        base64_0.encode((Object) bigInteger1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      base64_0.decode((Object) "");
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)38;
      String string0 = "}fv7C^1&7>\"ofly";
      Base64.isBase64("}fv7C^1&7>\"ofly");
      byteArray0[0] = (byte)38;
      byte[] byteArray1 = base64_0.decode("9'&E@xi%Ee]K;L");
      byteArray0[1] = (byte)0;
      Base64 base64_1 = new Base64();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, false, false, (int) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)38;
      byteArray0[6] = (byte)0;
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      byteArray0[7] = (byte)19;
      byteArray0[8] = (byte) (-44);
      base64_0.encodeToString(byteArray0);
      base64_0.hasData();
      Base64.encodeBase64((byte[]) null, true);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Base64.isBase64((byte)0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)110;
      byteArray2[3] = (byte)110;
      byteArray2[4] = (byte) (-99);
      byteArray2[5] = (byte)0;
      Base64.isBase64(byteArray2);
      Base64 base64_0 = new Base64(false);
      base64_0.decode(byteArray2);
      Base64.encodeBase64(byteArray1, false, true, (int) (byte)0);
      Base64.encodeBase64Chunked(byteArray0);
      base64_0.isUrlSafe();
      Base64.decodeInteger(byteArray2);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-112);
      byteArray0[0] = (byte) (-112);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.isArrayByteBase64(byteArray1);
      boolean boolean0 = false;
      Base64 base64_0 = new Base64((-815), byteArray0, false);
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64Chunked((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Base64 base64_0 = new Base64(4355);
      byte[] byteArray0 = null;
      Base64.isBase64("DwqhUTpep^");
      Base64.encodeBase64URLSafe((byte[]) null);
      base64_0.decode((byte[]) null);
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 4355, 4355);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)121;
      byteArray0[0] = (byte)121;
      byte byte1 = (byte)7;
      byteArray0[1] = (byte)7;
      byte byte2 = (byte) (-12);
      byteArray0[2] = (byte) (-12);
      Base64.discardWhitespace(byteArray0);
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[0];
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true, false);
      Base64.decodeInteger(byteArray1);
      base64_0.isUrlSafe();
      base64_0.encode(byteArray2);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true, (-2116));
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64 base64_0 = new Base64((-2116));
      base64_0.decode((Object) "");
      base64_0.decode("");
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      Base64.decodeInteger(byteArray2);
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray3);
      base64_0.isUrlSafe();
      base64_0.encode(byteArray2);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.encodeBase64(byteArray0, true, false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.toString();
      Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64(byteArray4);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64.isArrayByteBase64(byteArray1);
      Base64 base64_0 = new Base64(4747);
      base64_0.encode(byteArray1, (int) (byte)60, 0);
      Base64.encodeBase64(byteArray1, true);
      Base64.encodeBase64String(byteArray1);
      try { 
        base64_0.encode((Object) "HCI`Kvtg*#v/*K+.");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)30;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(56, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [o\u0000\uFFFD\u001E]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte)119;
      byteArray0[6] = (byte) (-124);
      byteArray0[7] = (byte)80;
      byteArray0[8] = (byte)0;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-846), byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD\u0001\u0000a\uFFFDw\uFFFDP\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)100;
      byteArray0[7] = (byte) (-89);
      base64_0.encode(byteArray0, (int) (byte)120, (int) (byte) (-1));
      base64_0.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger0);
      Base64.decodeBase64("LDa_M5^VdD`uk^Q");
      Base64.isBase64((byte)107);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64 base64_0 = new Base64();
      base64_0.decode("jW&h?)A Ow");
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger0);
      base64_0.encodeToString(byteArray1);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)110;
      byteArray0[0] = (byte)110;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-2260), byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [n]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }
}
