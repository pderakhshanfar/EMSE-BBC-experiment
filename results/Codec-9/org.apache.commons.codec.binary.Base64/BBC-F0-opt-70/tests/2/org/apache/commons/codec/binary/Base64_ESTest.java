/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 20:49:10 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)96;
      byteArray0[5] = (byte)114;
      byteArray0[6] = (byte) (-33);
      byteArray0[7] = (byte) (-107);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 0, 17);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(4808);
      BigInteger bigInteger0 = BigInteger.probablePrime(4808, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      mockRandom0.nextInt();
      int int0 = 7096;
      Base64 base64_0 = new Base64(int0);
      int int1 = 188;
      base64_0.decode(byteArray0, int1, base64_0.PEM_CHUNK_SIZE);
      Base64.encodeBase64Chunked(byteArray0);
      base64_0.hasData();
      base64_0.avail();
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)9;
      byteArray1[1] = (byte) (-127);
      byteArray1[2] = (byte) (-65);
      byteArray1[3] = (byte) (-1);
      Base64.discardWhitespace(byteArray1);
      Base64 base64_0 = new Base64((-1838), byteArray0, false);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (int) (byte) (-1), 11);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      base64_0.decode(byteArray1, 0, 1153);
      base64_0.decode(byteArray0, (-4675), (-4675));
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(114, byteArray0);
      Object object0 = base64_0.decode((Object) "d9=nW.");
      // Undeclared exception!
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.or(bigInteger1);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertEquals(0, byteArray1.length);
      
      bigInteger0.toString();
      boolean boolean0 = Base64.isBase64("~A");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Base64 base64_0 = new Base64(2795);
      byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      Base64 base64_1 = new Base64(76);
      base64_1.hasData();
      base64_1.encode(byteArray0);
      Base64.isBase64((byte)123);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      base64_0.decode((Object) "]");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)22;
      base64_0.decode(byteArray0, (-120), 2671);
      base64_0.hasData();
      Base64.encodeBase64(byteArray0, false, true, 6);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[1];
      Base64.encodeBase64(byteArray0, true, true);
      Base64.isBase64("Parameter supplied to Base64 encode is not a byte[]");
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      BigInteger bigInteger1 = BigInteger.ZERO;
      Base64 base64_0 = new Base64(54);
      Base64 base64_1 = new Base64(732, byteArray1);
      byte[] byteArray3 = base64_1.decode(byteArray0);
      Base64 base64_2 = new Base64((byte)111, byteArray3, false);
      base64_1.encode(byteArray2);
      base64_2.decode((String) null);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      Base64 base64_1 = new Base64(true);
      Base64 base64_2 = new Base64();
      // Undeclared exception!
      try { 
        base64_2.encode((byte[]) null, 6, 76);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.bitCount();
      bigInteger0.toString();
      String string0 = "m";
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte) (-1);
      Base64.encodeBase64(byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64 base64_1 = new Base64(54);
      base64_1.decode(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[6] = (byte)10;
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte)123;
      byteArray1[3] = (byte)111;
      byteArray1[4] = (byte) (-48);
      byteArray1[5] = (byte)1;
      Base64 base64_2 = null;
      try {
        base64_2 = new Base64(54, byteArray1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000\uFFFD{o\uFFFD\u0001
         // \u0000\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)96;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)104;
      byteArray0[7] = (byte) (-83);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64(byteArray1, false);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-25);
      String string0 = "";
      byte[] byteArray1 = base64_0.decode("");
      byteArray0[1] = (byte) (-1);
      byte[] byteArray2 = base64_0.decode("");
      Base64.encodeBase64(byteArray2, false, true);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-1);
      base64_0.readResults(byteArray0, (-1522), (byte) (-25));
      base64_0.encode(byteArray1, (-3107), (int) (byte) (-25));
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, (byte) (-1), (byte)1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)7;
      Base64 base64_0 = new Base64((byte)7);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      Base64 base64_1 = new Base64(64);
      base64_0.encode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, (int) (byte)39);
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = Base64.decodeBase64("z$M;g/J");
      base64_0.encode(byteArray2, 18, (int) (byte)0);
      Base64 base64_1 = new Base64(57);
      base64_1.decode(byteArray1, 1, 1904);
      Base64.decodeInteger(byteArray1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byte byte0 = (byte)1;
      byteArray0[3] = (byte)1;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 4183);
      Base64 base64_0 = new Base64((byte)1);
      Base64.encodeBase64URLSafeString(byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      Base64.encodeInteger(bigInteger0);
      Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      BigInteger bigInteger1 = null;
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(557);
      BigInteger bigInteger0 = new BigInteger(557, 557, mockRandom0);
      mockRandom0.nextInt(12);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      MockRandom mockRandom1 = new MockRandom();
      BigInteger bigInteger1 = new BigInteger(557, mockRandom1);
      BigInteger bigInteger2 = bigInteger0.clearBit(12);
      mockRandom1.doubles(6L);
      bigInteger0.or(bigInteger2);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64(byteArray1, false);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte) (-100);
      byteArray0[4] = (byte) (-8);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)59;
      Base64.encodeBase64(byteArray0);
      Base64.isBase64((byte)99);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(557);
      BigInteger bigInteger0 = new BigInteger(557, 557, mockRandom0);
      Base64.encodeInteger(bigInteger0);
      MockRandom mockRandom1 = new MockRandom();
      BigInteger bigInteger1 = new BigInteger(557, mockRandom0);
      // Undeclared exception!
      try { 
        bigInteger1.clearBit((-1598));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Negative bit address
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)96;
      Object object0 = base64_0.decode((Object) "");
      base64_0.encode(object0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      base64_0.hasData();
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray3 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray4 = Base64.encodeBase64(byteArray0, true);
      Base64.isArrayByteBase64(byteArray4);
      base64_0.encode(byteArray1, (int) (byte)96, (-3575));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false);
      base64_0.decode(byteArray0, 0, 0);
      base64_0.decode(byteArray1, 1, 50);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Base64.encodeBase64((byte[]) null, false, false, 1268);
      Base64 base64_0 = new Base64(111);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64("AP_pAAEBAAA");
      base64_0.encode((byte[]) null, 5, (int) (byte)0);
      Base64 base64_1 = new Base64(1717986918);
      // Undeclared exception!
      try { 
        base64_1.decode(byteArray1, 72, 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 72
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 4183);
      Base64 base64_0 = new Base64((byte)1);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      base64_0.encode(byteArray1, (int) (byte)0, 1);
      Base64.isBase64("IGb/wory4>DF8I");
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)1;
      byteArray0[1] = (byte)0;
      Base64.discardWhitespace(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, false);
      Base64.discardWhitespace(byteArray3);
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 4183);
      Base64 base64_0 = new Base64((byte)1);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      base64_0.encode(byteArray1, (int) (byte)0, 1);
      Base64 base64_1 = new Base64(64);
      base64_1.decode(byteArray2, (int) (byte)0, 11);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-75);
      Base64 base64_0 = new Base64((-1632));
      Base64.decodeBase64("org.apache.commons.codec.binary.StringUtils");
      Object object0 = base64_0.decode((Object) "org.apache.commons.codec.binary.StringUtils");
      base64_0.decode(object0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64 base64_0 = new Base64((-1632));
      byte[] byteArray1 = base64_0.decode(byteArray0);
      base64_0.decode(byteArray0, (-1632), (-2147483646));
      Base64.encodeBase64(byteArray0, false, true);
      base64_0.hasData();
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray3 = new byte[0];
      Base64.encodeBase64String(byteArray3);
      Base64.discardWhitespace(byteArray3);
      Base64.encodeBase64(byteArray1, false);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)67;
      Base64 base64_0 = new Base64((byte)67);
      base64_0.encodeToString(byteArray0);
      base64_0.encodeToString(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      base64_0.decode(byteArray1);
      Base64.encodeBase64(byteArray0, false);
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)67;
      byteArray2[1] = (byte)67;
      byteArray2[2] = (byte)67;
      byteArray2[3] = (byte)67;
      Base64.decodeInteger(byteArray2);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Base64 base64_0 = new Base64((-188));
      Object object0 = base64_0.decode((Object) "UTF-16LE");
      base64_0.encode(object0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)92;
      Base64.encodeBase64URLSafeString(byteArray0);
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)37;
      base64_0.decode(byteArray0, 319, 1752);
      base64_0.decode(byteArray0, (int) (byte)92, 100);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = null;
      // Undeclared exception!
      try { 
        bigInteger0.divide((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-75);
      Base64.encodeBase64(byteArray0, false, true);
      Base64 base64_0 = new Base64((-1), byteArray0, false);
      base64_0.hasData();
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.encodeBase64String((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      Base64.encodeBase64Chunked((byte[]) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.intValueExact();
      bigInteger0.pow(64);
      Base64 base64_1 = new Base64(64, (byte[]) null);
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 13, 20);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-75);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      base64_0.decode((Object) "l*.m%+PsE<S{jG.j");
      base64_0.avail();
      Base64.encodeBase64(byteArray1, false);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)67;
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)67;
      byteArray1[1] = (byte)67;
      byteArray1[2] = (byte)67;
      byteArray1[3] = (byte)1;
      byteArray1[4] = (byte)67;
      byteArray1[5] = (byte)67;
      byteArray1[6] = (byte)67;
      base64_0.readResults(byteArray1, (byte)67, (byte)67);
      byte[] byteArray2 = base64_0.encode(byteArray0);
      Base64.decodeInteger(byteArray1);
      base64_0.encodeToString(byteArray0);
      Base64.encodeBase64(byteArray2, false, true);
      Base64.isBase64((byte)0);
      base64_0.readResults(byteArray1, (byte)67, 62);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)0;
      Base64.encodeBase64(byteArray0, true, true, 1982292598);
      Base64 base64_1 = new Base64((byte)0);
      String string0 = "org.apache.commons.codec.DecoderException";
      byte[] byteArray1 = Base64.decodeBase64("IA[!y(Nq");
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray1, 14, 705);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-75);
      Base64 base64_0 = new Base64((-1632));
      base64_0.decode(byteArray0);
      base64_0.decode(byteArray0, (-1632), (-2147483646));
      base64_0.encode(byteArray0, (-2147483646), (int) (byte) (-122));
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64.isBase64(byteArray1);
      base64_0.decode(byteArray1, (-349), (-1));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false);
      base64_0.hasData();
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64String(byteArray2);
      Base64.discardWhitespace(byteArray1);
      Base64.encodeBase64(byteArray0, true);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = new byte[0];
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger1 = new BigInteger(64, mockRandom0);
      bigInteger0.or(bigInteger1);
      base64_0.encode(byteArray1);
      Base64.isBase64(byteArray1);
      base64_0.decode(byteArray0);
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)106;
      byteArray2[1] = (byte) (-59);
      byteArray2[2] = (byte)32;
      byteArray2[3] = (byte)70;
      byteArray2[4] = (byte)26;
      byteArray2[5] = (byte) (-1);
      byteArray2[6] = (byte)0;
      Base64.isBase64(byteArray2);
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, true, true, 97);
      assertNotSame(byteArray3, byteArray0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64((byte[]) null);
      Base64 base64_0 = new Base64(111, (byte[]) null, false);
      Base64.encodeBase64URLSafe((byte[]) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      base64_0.encode((byte[]) null);
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64((byte[]) null, false);
      Base64.encodeBase64Chunked((byte[]) null);
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = 1;
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64(1, (byte[]) null);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)6;
      byteArray1[1] = (byte)123;
      byteArray1[2] = (byte) (-75);
      byteArray1[3] = (byte) (-101);
      byteArray1[4] = (byte)13;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)95;
      Base64.encodeBase64(byteArray1);
      Base64.decodeBase64((byte[]) null);
      Base64.encodeBase64URLSafeString((byte[]) null);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[1];
      Base64.isBase64("LHljvI<&]A-j_");
      base64_0.readResults(byteArray0, (byte) (-1), (byte) (-1));
      byteArray0[0] = (byte) (-1);
      Base64.encodeBase64(byteArray0);
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("/w==", string0);
      
      base64_0.readResults(byteArray0, 1, 2731);
      byte[] byteArray1 = base64_0.decode("eCJoa");
      assertArrayEquals(new byte[] {(byte)120, (byte)34, (byte)104}, byteArray1);
      
      Base64.encodeBase64String(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.add(bigInteger1);
      bigInteger0.subtract(bigInteger1);
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray2 = base64_0.decode(byteArray0);
      base64_0.avail();
      base64_0.readResults(byteArray2, 0, 1);
      int int0 = base64_0.avail();
      assertEquals(0, int0);
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray2);
      byte[] byteArray4 = Base64.toIntegerBytes(bigInteger1);
      assertEquals(1, byteArray4.length);
      
      int int1 = base64_0.readResults(byteArray0, 1, 0);
      assertEquals((-1), int1);
      
      Base64.isBase64(byteArray3);
      byte[] byteArray5 = Base64.encodeBase64(byteArray3, true, false);
      String string1 = Base64.encodeBase64String(byteArray5);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-4);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 1, 290);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-75);
      Base64 base64_0 = new Base64((-1632));
      base64_0.encode(byteArray0, (-2147483646), (int) (byte) (-122));
      byte[] byteArray1 = base64_0.decode(byteArray0);
      base64_0.decode(byteArray0, 903, (-1632));
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("AQAAAAAAAAAA", string0);
      
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      byte[] byteArray3 = Base64.decodeBase64("AQAAAAAAAAAA");
      assertEquals(9, byteArray3.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray3);
      
      boolean boolean0 = Base64.isBase64("UTF-16LE");
      assertTrue(boolean0);
      
      Base64.decodeBase64(byteArray2);
      assertEquals(9, byteArray1.length);
      
      Base64 base64_1 = new Base64(false);
      base64_0.isUrlSafe();
      byte[] byteArray4 = new byte[6];
      byteArray4[0] = (byte)1;
      byteArray4[1] = (byte)1;
      byteArray4[2] = (byte)0;
      byteArray4[3] = (byte) (-10);
      byteArray4[4] = (byte)0;
      byteArray4[5] = (byte)1;
      byte[] byteArray5 = Base64.decodeBase64(byteArray4);
      Base64.encodeBase64URLSafeString(byteArray5);
      byte[] byteArray6 = base64_0.encode(byteArray0);
      assertEquals(12, byteArray6.length);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = new byte[0];
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger1 = new BigInteger(64, mockRandom0);
      bigInteger0.or(bigInteger1);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray2);
      base64_0.readResults(byteArray1, 1086, 1086);
      base64_0.encode(byteArray1);
      Base64.decodeInteger(byteArray1);
      base64_0.encodeToString(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      base64_0.encodeToString(byteArray3);
      String string0 = base64_0.encodeToString(byteArray2);
      assertEquals("", string0);
      
      byte[] byteArray4 = Base64.encodeBase64URLSafe(byteArray0);
      assertArrayEquals(new byte[] {(byte)81, (byte)86, (byte)69, (byte)57, (byte)80, (byte)81}, byteArray4);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray0);
      
      byte[] byteArray5 = base64_0.decode(byteArray2);
      byte[] byteArray6 = Base64.encodeBase64(byteArray2, true);
      assertSame(byteArray6, byteArray5);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      boolean boolean0 = false;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 4183);
      Base64 base64_0 = new Base64((byte)1);
      Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      base64_0.encode(byteArray1, (int) (byte)0, 1);
      Base64.isBase64("IGbb/wHory4>Dw8I");
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)1;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte) (-1);
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)0;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray2, false, false, (int) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)1;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64(byteArray0, false);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, (int) (byte)16, 1730);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(64, 76, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      MockRandom mockRandom1 = new MockRandom();
      BigInteger bigInteger1 = new BigInteger(76, mockRandom0);
      BigInteger bigInteger2 = bigInteger0.or(bigInteger1);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("Z0FBQU9BQUFBRGs9", string0);
      
      base64_0.readResults(byteArray0, 1086, (-122));
      base64_0.encode(byteArray1);
      BigInteger bigInteger3 = Base64.decodeInteger(byteArray0);
      String string1 = base64_0.encodeToString(byteArray0);
      assertFalse(string1.equals((Object)string0));
      
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte) (-4);
      byteArray2[1] = (byte) (-22);
      byteArray2[2] = (byte)1;
      byteArray2[3] = (byte) (-98);
      byteArray2[4] = (byte)1;
      byteArray2[5] = (byte) (-1);
      byte[] byteArray3 = Base64.decodeBase64("Z0FBQU9BQUFBRGs9\u0000\u0000");
      assertEquals(12, byteArray3.length);
      
      byte[] byteArray4 = Base64.encodeInteger(bigInteger2);
      assertEquals(16, byteArray4.length);
      
      base64_0.decode("Z0FBQU9BQUFBRGs9");
      Base64.encodeBase64URLSafe(byteArray0);
      assertTrue(bigInteger0.equals((Object)bigInteger3));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("IID6*`Mw[Yq");
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0);
      assertArrayEquals(new byte[] {(byte)32, (byte) (-128), (byte) (-6), (byte)51, (byte)6, (byte)42}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)67;
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      assertTrue(base64_0.isUrlSafe());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)0;
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)109;
      byteArray0[6] = (byte)40;
      byteArray0[7] = (byte)0;
      Base64.encodeBase64(byteArray0, false, false);
      base64_0.hasData();
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte)0;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, 290);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64("GfBtI(TbQ (YM");
      Base64.decodeBase64((String) null);
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(false);
      boolean boolean1 = false;
      Base64.encodeBase64((byte[]) null, false, false);
      base64_0.encode((byte[]) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.shiftRight(76);
      Base64.encodeInteger(bigInteger0);
      base64_0.decode(byteArray1, 0, (-555));
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-122);
      Base64 base64_0 = new Base64(0, byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-76);
      byteArray1[1] = (byte) (-122);
      base64_0.decode(byteArray1, 0, (int) (byte) (-76));
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte)32;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-4952), byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [=\uFFFD\uFFFD ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = new byte[0];
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger1 = new BigInteger(64, mockRandom0);
      bigInteger0.or(bigInteger1);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray2);
      base64_0.readResults(byteArray1, 1086, 1086);
      base64_0.encode(byteArray1);
      Base64.decodeInteger(byteArray1);
      base64_0.encodeToString(byteArray1);
      Base64.encodeBase64(byteArray0, true, true);
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray3 = base64_0.decode("");
      Base64.encodeBase64URLSafe(byteArray3);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("l'8*@!rt~b");
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger0);
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      base64_0.avail();
      BigInteger bigInteger1 = null;
      try {
        bigInteger1 = new BigInteger(byteArray1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      Base64.encodeBase64Chunked((byte[]) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.pow(64);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      base64_0.decode((Object) "");
      base64_0.avail();
      Base64.encodeBase64((byte[]) null, false);
      Base64.encodeBase64Chunked(byteArray0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Base64.isBase64((byte)0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(1701, byteArray0, false);
      Base64.encodeBase64URLSafe(byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      base64_0.encode(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64Chunked(byteArray1);
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-1);
      byteArray0[0] = (byte) (-1);
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte2 = (byte)0;
      byteArray0[2] = (byte)0;
      byte byte3 = (byte)1;
      byteArray0[3] = (byte)1;
      boolean boolean0 = false;
      boolean boolean1 = false;
      Base64.encodeBase64(byteArray0, false, false, 4183);
      Base64 base64_0 = new Base64((byte)1);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-4394), byteArray0, true);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Base64.isBase64((byte) (-103));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte) (-103);
      byteArray0[5] = (byte) (-103);
      byteArray0[6] = (byte) (-103);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      int int0 = 2383;
      Base64 base64_0 = new Base64(2383);
      Base64.encodeBase64(byteArray1);
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      base64_0.encode(byteArray0);
      byte[] byteArray1 = null;
      String string0 = ">|!4WvHryv05 WdR, ";
      Base64.isBase64(">|!4WvHryv05 WdR, ");
      Base64.encodeBase64((byte[]) null, false);
      Base64.decodeBase64((byte[]) null);
      Base64.encodeBase64((byte[]) null, false, true, 64);
      base64_0.decode(">*.rh`/mBv$Pc");
      boolean boolean0 = true;
      try { 
        base64_0.encode((Object) ">|!4WvHryv05 WdR, ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[1];
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64(byteArray0, false);
      byteArray0[0] = (byte)77;
      base64_0.decode(byteArray0, 0, 0);
      base64_0.encode(byteArray0);
      Object object0 = new Object();
      Base64.decodeBase64((String) null);
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0);
      byte[] byteArray1 = new byte[3];
      Base64.encodeBase64(byteArray0, true, true, 0);
      byteArray1[0] = (byte)112;
      boolean boolean0 = Base64.isBase64("");
      byteArray1[1] = (byte)34;
      byteArray1[2] = (byte)8;
      base64_0.encodeToString(byteArray1);
      base64_0.avail();
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger0);
      boolean boolean1 = Base64.isBase64("");
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte) (-32);
      base64_0.encode(byteArray0, (-638), (int) (byte) (-109));
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)8;
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      Base64.encodeBase64URLSafeString(byteArray0);
      byteArray0[1] = (byte) (-10);
      Base64.encodeBase64Chunked(byteArray0);
      byte byte0 = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, true, true, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (22) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)52;
      byte byte0 = (byte)101;
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-50);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.isBase64((byte)101);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = new BigInteger(byteArray1);
      bigInteger0.divide(bigInteger1);
      bigInteger0.compareTo(bigInteger1);
      bigInteger0.not();
      bigInteger0.floatValue();
      bigInteger0.toString();
      Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte) (-50), byteArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [q_9PNGUAzg]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte) (-37);
      boolean boolean0 = true;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-1), byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [:^\u0000?a\u0010\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)38;
      byteArray0[6] = (byte) (-27);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)112;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000\u0000^GK&\uFFFD\u0000p]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Base64.isBase64("");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      Base64.decodeBase64("");
      Base64.isBase64("");
      byte[] byteArray3 = new byte[2];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte)0;
      Base64.decodeBase64(byteArray3);
      Base64 base64_0 = new Base64(true);
      boolean boolean0 = base64_0.isUrlSafe();
      assertTrue(boolean0);
      
      byte[] byteArray4 = Base64.decodeBase64(byteArray2);
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("ANoAAAA", string0);
      
      byte[] byteArray5 = base64_0.encode(byteArray4);
      assertSame(byteArray2, byteArray5);
      assertEquals(5, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)121;
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)121;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)121, byteArray2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [eQ==]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = null;
      base64_0.decode((byte[]) null);
      try { 
        base64_0.encode((Object) "v");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)103;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2);
      Base64 base64_0 = new Base64();
      byte[] byteArray4 = base64_0.decode("b!1.O=Q4+M");
      assertArrayEquals(new byte[] {(byte)111, (byte)83}, byteArray4);
      
      int int0 = base64_0.readResults(byteArray2, (byte)0, (byte)103);
      assertEquals((-1), int0);
      
      base64_0.avail();
      Base64.decodeInteger(byteArray0);
      base64_0.encode(byteArray2, 0, (-2602));
      String string0 = Base64.encodeBase64String(byteArray3);
      assertEquals("VVZWa2FsQlI=", string0);
      
      Base64.isBase64((byte)103);
      String string1 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("AGc", string1);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Base64.decodeBase64((byte[]) null);
      Base64.encodeBase64((byte[]) null, true, false);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      Base64.encodeBase64URLSafe(byteArray0);
      String string0 = base64_0.encodeToString((byte[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertEquals(0, byteArray1.length);
  }
}
