/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:13:35 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)35;
      byteArray0[5] = (byte) (-55);
      byteArray0[6] = (byte)10;
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)9;
      byteArray1[1] = (byte)1;
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[59];
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0, 29, 29);
      Base64.encodeBase64(byteArray0, true);
      base64_0.encode(byteArray0, 29, (-1959));
      base64_0.readResults(byteArray0, 3, 3);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[105];
      int int0 = 5;
      Base64 base64_0 = new Base64(5, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true);
      // Undeclared exception!
      Base64.encodeBase64(byteArray3, true, true);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[59];
      Base64 base64_0 = new Base64(29);
      base64_0.encode(byteArray0, 29, 29);
      base64_0.readResults(byteArray0, 29, 1);
      base64_0.encode(byteArray0, (-571), (-571));
      base64_0.decode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[105];
      Base64 base64_0 = new Base64(5, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64URLSafe(byteArray1);
      Base64 base64_1 = new Base64(64, byteArray0);
      base64_1.encode(byteArray1, 76, 2673);
      Base64 base64_2 = new Base64(1);
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)113;
      byteArray2[1] = (byte)126;
      byteArray2[2] = (byte) (-30);
      byteArray2[3] = (byte)42;
      base64_2.encode(byteArray2, 2673, (int) (byte) (-30));
      Base64.encodeBase64URLSafe(byteArray2);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[92];
      int int0 = 5;
      Base64 base64_0 = new Base64(5, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      Base64.encodeBase64(byteArray2, false);
      // Undeclared exception!
      Base64.encodeBase64String(byteArray1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[92];
      Base64 base64_0 = new Base64(5, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      Base64.encodeBase64(byteArray2, false);
      byte[] byteArray3 = Base64.CHUNK_SEPARATOR;
      Base64.encodeBase64URLSafe(byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[94];
      int int0 = 5;
      Base64 base64_0 = new Base64(5, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true);
      byte[] byteArray4 = base64_0.decode(byteArray3);
      // Undeclared exception!
      base64_0.encodeToString(byteArray4);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[45];
      Base64 base64_0 = new Base64(5, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      // Undeclared exception!
      Base64.decodeInteger(byteArray3);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[45];
      Base64 base64_0 = new Base64(5, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      // Undeclared exception!
      Base64.discardWhitespace(byteArray3);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(113, byteArray0);
      Object object0 = base64_0.decode((Object) "uL1~");
      // Undeclared exception!
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[43];
      Base64 base64_0 = new Base64(5, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      // Undeclared exception!
      Base64.encodeBase64URLSafe(byteArray2);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[43];
      Base64 base64_0 = new Base64(5, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true);
      Base64 base64_1 = new Base64(true);
      base64_0.decode(byteArray3);
      byte[] byteArray4 = base64_0.encode(byteArray1);
      // Undeclared exception!
      base64_0.encode(byteArray4);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[43];
      Base64 base64_0 = new Base64(5, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray2 = Base64.decodeBase64("v\"W#");
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray1);
      String string0 = base64_0.encodeToString(byteArray3);
      base64_0.decode(byteArray0, 5, 5);
      base64_0.encode(byteArray2);
      // Undeclared exception!
      base64_0.decode((Object) string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[43];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64Chunked(byteArray1);
      base64_0.encode(byteArray1, 5, 8);
      Base64.encodeBase64String(byteArray0);
      base64_0.decode(byteArray1, 5, 4141);
      base64_0.decode(byteArray1, (-2726), 8);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[43];
      Base64 base64_0 = new Base64(5, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray4 = Base64.encodeBase64(byteArray3, true);
      Base64 base64_1 = new Base64(true);
      base64_0.decode(byteArray4);
      base64_1.encode(byteArray2, 76, 64);
      base64_1.readResults(byteArray4, 1092, 64);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[43];
      Base64 base64_0 = new Base64(5, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64("v\"W#");
      Base64.encodeBase64URLSafe(byteArray2);
      byte[] byteArray3 = base64_0.encode(byteArray1);
      // Undeclared exception!
      Base64.encodeBase64(byteArray3, true);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[43];
      Base64 base64_0 = new Base64(5, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64URLSafe(byteArray1);
      Base64.decodeBase64("v\"W#");
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray1);
      Base64.encodeBase64(byteArray2, true);
      Base64 base64_1 = new Base64(76);
      // Undeclared exception!
      base64_1.decode(byteArray3);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[43];
      Base64 base64_0 = new Base64(5, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64URLSafe(byteArray1);
      Base64.decodeBase64("v\"W#");
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      base64_0.encode(byteArray1);
      Base64.encodeBase64(byteArray2, true);
      Base64 base64_1 = new Base64(76);
      // Undeclared exception!
      try { 
        base64_1.decode(byteArray0, 4782, 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4782
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray1, 4, 4);
      base64_0.decode(byteArray1, 1, 1);
      base64_0.encode(byteArray0, 4, (-1867));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64 base64_0 = new Base64(4);
      base64_0.encode(byteArray0, 4, 4);
      base64_0.decode(byteArray0, (-1174), (-2726));
      base64_0.decode(byteArray1, (-2726), 1);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(22, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[41];
      byte[] byteArray1 = Base64.decodeBase64("]w1qmD)\"U1%/JHW");
      assertArrayEquals(new byte[] {(byte) (-61), (byte)90, (byte) (-90), (byte)13, (byte)77, (byte)127, (byte)36, (byte)117}, byteArray1);
      
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false, false);
      assertEquals(76, byteArray3.length);
      
      byte[] byteArray4 = new byte[2];
      byteArray4[0] = (byte)9;
      byteArray4[1] = (byte) (-109);
      byte[] byteArray5 = Base64.encodeBase64(byteArray4, false);
      assertEquals(4, byteArray5.length);
      
      Base64 base64_0 = new Base64(false);
      byte[] byteArray6 = base64_0.decode(byteArray2);
      assertEquals(41, byteArray6.length);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray1, 4, 4);
      base64_0.readResults(byteArray1, 4, 4);
      Base64.encodeBase64(byteArray0, true);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)20;
      byteArray2[1] = (byte) (-8);
      byte[] byteArray3 = new byte[9];
      byteArray3[0] = (byte) (-8);
      byteArray3[1] = (byte)20;
      byteArray3[2] = (byte) (-8);
      byteArray3[3] = (byte)20;
      base64_0.readResults(byteArray3, (byte) (-8), (-840));
      byteArray3[4] = (byte)20;
      byteArray3[5] = (byte)20;
      byteArray3[6] = (byte)20;
      byteArray3[7] = (byte) (-8);
      byteArray3[8] = (byte) (-8);
      Base64.encodeBase64(byteArray3);
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)1;
      byteArray2[4] = (byte)91;
      base64_0.decode(byteArray2);
      base64_0.encode(byteArray2);
      Object object0 = base64_0.decode((Object) "Ik{;-(#|q!!Yt @O6");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      base64_0.readResults(byteArray1, (-7), (-7));
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false);
      base64_0.decode(byteArray2);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray3, true, false, (-7));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (78) than the specified maxium size of -7
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64 base64_0 = new Base64();
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      base64_0.encode(byteArray1, 4, 4);
      byte[] byteArray3 = new byte[3];
      byteArray3[0] = (byte)7;
      byteArray3[1] = (byte)3;
      byteArray3[2] = (byte) (-110);
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)66, (byte)119, (byte)79, (byte)83, (byte) (-94), (byte)0}, byteArray4);
      
      base64_0.encode(byteArray0, 4520, (-1686));
      Base64.encodeBase64(byteArray1);
      byte[] byteArray5 = Base64.CHUNK_SEPARATOR;
      int int0 = base64_0.avail();
      //  // Unstable assertion: assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, true);
      assertEquals(22, byteArray3.length);
      
      base64_0.encode(byteArray1, 4, 4);
      base64_0.encode(byteArray0, 4520, (-1691));
      Base64.discardWhitespace(byteArray0);
      base64_0.decode(byteArray2, 4520, 4);
      assertEquals(32, byteArray2.length);
      
      byte[] byteArray4 = base64_0.decode(byteArray1);
      assertEquals(15, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64 base64_0 = new Base64();
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      assertEquals(32, byteArray2.length);
      
      base64_0.encode(byteArray1, 4, 4);
      base64_0.encode(byteArray0, 4520, (-1686));
      byte[] byteArray3 = Base64.discardWhitespace(byteArray0);
      assertEquals(15, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64(true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-4);
      byteArray0[5] = (byte) (-99);
      byteArray0[6] = (byte) (-1);
      base64_0.encode(byteArray0, 40, (-1));
      Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64(byteArray0, true, false, (int) (byte)14);
      Random.setNextRandom((byte) (-4));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-5);
      Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(61);
      boolean boolean0 = false;
      Base64.encodeBase64(byteArray0, false);
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, 61, 61);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)9;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte) (-110);
      byteArray0[5] = (byte)24;
      byteArray0[6] = (byte)40;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      //  // Unstable assertion: assertEquals(14, byteArray1.length);
      
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)49;
      byteArray2[1] = (byte)2;
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, true, 21);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)77, (byte)81, (byte)73, (byte) (-94), (byte)0}, byteArray3);
      
      byte[] byteArray4 = new byte[8];
      byteArray4[0] = (byte)121;
      byteArray4[1] = (byte)0;
      byteArray4[2] = (byte)18;
      byteArray4[3] = (byte)66;
      byteArray4[4] = (byte)16;
      byteArray4[5] = (byte)68;
      byteArray4[6] = (byte) (-1);
      byteArray4[7] = (byte)32;
      byte[] byteArray5 = Base64.discardWhitespace(byteArray4);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)121, (byte)0, (byte)18, (byte)66, (byte)16, (byte)68, (byte) (-1)}, byteArray5);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Base64.isBase64("a;ag_st%!4`x?1Ob");
      byte[] byteArray0 = new byte[15];
      byteArray0[2] = (byte) (-2);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-2);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, false);
      byte[] byteArray3 = new byte[6];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte)0;
      byteArray3[2] = (byte) (-2);
      byteArray3[3] = (byte) (-2);
      byteArray3[4] = (byte)0;
      byteArray3[5] = (byte)0;
      Base64 base64_0 = new Base64(7, byteArray3, true);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      
      Base64.encodeBase64(byteArray2, true, true);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)68, (byte)43, (byte) (-94), (byte)0}, byteArray2);
      
      byte[] byteArray4 = base64_0.encode(byteArray3);
      //  // Unstable assertion: assertEquals(20, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray1, 4, 4);
      Base64 base64_1 = new Base64(true);
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray1, 19, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 22
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte)114;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)45;
      byteArray1[1] = (byte)45;
      byteArray1[2] = (byte)116;
      byteArray1[3] = (byte) (-100);
      byteArray1[4] = (byte)45;
      byteArray1[5] = (byte) (-100);
      Base64.decodeBase64(byteArray1);
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)56;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 1, (int) (byte)56);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64 base64_0 = new Base64();
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      assertEquals(32, byteArray2.length);
      
      base64_0.encode(byteArray1, 4, 4);
      base64_0.decode(byteArray1, 1, 1);
      base64_0.decode(byteArray0, 4, (-2726));
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      Base64.encodeBase64(byteArray0, false, true);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)125;
      byteArray1[2] = (byte)122;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, (int) (byte)0, (int) (byte)122);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      boolean boolean0 = Base64.isBase64(byteArray1);
      //  // Unstable assertion: assertEquals(14, byteArray1.length);
      //  // Unstable assertion: assertFalse(boolean0);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      //  // Unstable assertion: assertEquals(12, byteArray2.length);
      
      Base64.isBase64((byte)124);
      byte[] byteArray3 = Base64.discardWhitespace(byteArray0);
      //  // Unstable assertion: assertEquals(9, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray1, 1, 1);
      assertEquals(22, byteArray1.length);
      
      base64_0.decode(byteArray0, 4, (-2726));
      boolean boolean0 = base64_0.hasData();
      assertFalse(base64_0.isUrlSafe());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Base64 base64_0 = new Base64(51);
      String string0 = base64_0.encodeToString((byte[]) null);
      assertNull(string0);
      
      Base64.isBase64((byte)113);
      boolean boolean0 = Base64.isBase64((byte)52);
      assertTrue(boolean0);
      
      base64_0.decode((byte[]) null);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)61);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64((-2474));
      byte[] byteArray0 = base64_0.decode("org.apache.commons.codec.DecoderException");
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false);
      Base64 base64_2 = new Base64(true);
      base64_2.encode(byteArray2);
      Base64 base64_3 = new Base64((byte) (-5));
      Base64 base64_4 = new Base64(false);
      byte[] byteArray3 = new byte[0];
      Base64 base64_5 = new Base64((-2175), byteArray3, true);
      // Undeclared exception!
      try { 
        base64_5.encode(byteArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray1, 2, 4);
      assertEquals(10, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65}, byteArray1);
      
      boolean boolean0 = base64_0.hasData();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      boolean boolean0 = false;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray1, 2, 4);
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, 20, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)12;
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      //  // Unstable assertion: assertEquals("DAwAAAAAAA", string0);
      
      byteArray0[2] = (byte)12;
      Base64.encodeBase64(byteArray0, true, false);
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)12;
      Base64.discardWhitespace(byteArray0);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true, false, 674);
      byte[] byteArray3 = base64_0.decode(byteArray2);
      //  // Unstable assertion: assertEquals(14, byteArray2.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)12, (byte)12, (byte)12, (byte)12, (byte)12, (byte)12, (byte)12}, byteArray3);
      
      byte[] byteArray4 = Base64.discardWhitespace(byteArray1);
      //  // Unstable assertion: assertEquals(2, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray2 = new byte[5];
      byte byte0 = (byte)96;
      byteArray2[0] = (byte)96;
      byteArray2[1] = (byte) (-10);
      byteArray2[2] = (byte)13;
      byte byte1 = (byte)0;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)71;
      Base64.isBase64(byteArray2);
      Base64 base64_0 = new Base64((byte)96, byteArray1, false);
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte)40;
      Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64((byte[]) null);
      Base64.encodeBase64((byte[]) null, false);
      base64_0.encode((byte[]) null, (int) (byte)40, (int) (byte) (-19));
      Base64.isBase64((byte) (-1));
      byte[] byteArray1 = base64_0.encode((byte[]) null);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = 1;
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64(1, (byte[]) null);
      Base64.decodeBase64((byte[]) null);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.encodeBase64Chunked((byte[]) null);
      boolean boolean0 = false;
      boolean boolean1 = false;
      int int1 = 53;
      Base64.encodeBase64((byte[]) null, false, false, 53);
      Object object0 = null;
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(14, byteArray1.length);
      
      boolean boolean0 = Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(2768);
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)17;
      byteArray2[1] = (byte)17;
      byteArray2[2] = (byte)17;
      byteArray2[3] = (byte)17;
      byteArray2[4] = (byte)17;
      byteArray2[5] = (byte)17;
      byteArray2[6] = (byte)17;
      String string0 = Base64.encodeBase64String(byteArray2);
      assertEquals("EREREREREQ==", string0);
      
      boolean boolean1 = Base64.isBase64("EREREREREQ==");
      assertFalse(boolean1 == boolean0);
      
      Base64.isBase64((byte) (-22));
      byte[] byteArray3 = base64_0.encode((byte[]) null);
      assertNull(byteArray3);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)98;
      byteArray0[5] = (byte)12;
      Base64.discardWhitespace(byteArray0);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64 base64_1 = new Base64(true);
      Base64.encodeBase64(byteArray0, true, true, 28);
      byte[] byteArray2 = Base64.decodeBase64((String) null);
      assertNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)39;
      Base64.encodeBase64Chunked((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Base64 base64_0 = new Base64(30, (byte[]) null);
      byte[] byteArray0 = Base64.encodeBase64Chunked((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)6;
      Base64.isBase64((byte)6);
      Base64 base64_0 = new Base64((byte)6);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)6;
      byteArray1[1] = (byte)6;
      byteArray1[2] = (byte)6;
      byteArray1[3] = (byte)6;
      byteArray1[4] = (byte)6;
      Base64.encodeBase64String(byteArray1);
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("BgAAAAAAAA==", string0);
      
      Base64.isBase64("&Vl");
      Base64.isBase64((byte)53);
      byte[] byteArray2 = base64_0.encode(byteArray0);
      assertEquals(18, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte byte0 = (byte)98;
      byte byte1 = (byte) (-57);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      Base64 base64_0 = new Base64((byte)98);
      Base64.isBase64("q$e2|b#^9-");
      Base64.isArrayByteBase64(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      Base64.decodeInteger(byteArray1);
      Base64.isBase64(byteArray3);
      Base64 base64_1 = new Base64(2326);
      Base64.encodeBase64URLSafe(byteArray3);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 4542, (int) (byte)98);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4542
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)25;
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
      
      Base64 base64_0 = new Base64((byte)123, byteArray0, false);
      base64_0.avail();
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertArrayEquals(new byte[] {(byte)68, (byte)110, (byte)115, (byte)90}, byteArray1);
      
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)123;
      byteArray2[1] = (byte)123;
      byteArray2[2] = (byte)14;
      byteArray2[3] = (byte)123;
      byteArray2[4] = (byte)14;
      byteArray2[5] = (byte)25;
      base64_0.readResults(byteArray2, (byte)25, (byte)25);
      base64_0.avail();
      byte[] byteArray3 = base64_0.decode(byteArray0);
      byte[] byteArray4 = Base64.encodeBase64(byteArray3, false, true, 64);
      assertEquals(0, byteArray4.length);
      
      int int0 = base64_0.avail();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64 base64_1 = new Base64(true);
      Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = base64_1.decode("org.apache.commons.codec.binary.Base64");
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray2);
      assertEquals(32, byteArray3.length);
      assertTrue(base64_1.isUrlSafe());
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray1, true, true);
      Base64 base64_2 = new Base64(true);
      base64_0.avail();
      Base64.isBase64((byte) (-25));
      Base64.discardWhitespace(byteArray4);
      assertSame(byteArray1, byteArray4);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)0;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64((-693));
      Base64.isBase64("q$e2|b#^9-");
      Base64.isArrayByteBase64(byteArray1);
      Base64.encodeBase64Chunked(byteArray1);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte) (-124);
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte) (-124);
      Base64.isBase64(byteArray2);
      Base64 base64_1 = new Base64((byte) (-124));
      Base64.encodeBase64URLSafe(byteArray1);
      // Undeclared exception!
      try { 
        base64_1.decode((byte[]) null, 1376, 3116);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)17;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)17;
      byteArray2[1] = (byte)17;
      byteArray2[2] = (byte)17;
      Base64.encodeBase64(byteArray1);
      Base64 base64_0 = new Base64((byte)17);
      base64_0.decode("z,7$91-WQ[cc4{D");
      String string0 = "L0huLGt~|mx";
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64(byteArray2);
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, false);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray3, (int) (byte)0, 113);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base64 base64_0 = new Base64((byte)0);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      base64_0.decode(byteArray1, (-1183), 1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false, true);
      Object object0 = new Object();
      Object object1 = new Object();
      base64_0.decode((Object) ".A?y4DW5nBx");
      base64_0.hasData();
      Base64.encodeBase64String(byteArray1);
      base64_0.decode(byteArray2, (-1331), 1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Base64.encodeBase64String((byte[]) null);
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64 base64_0 = new Base64((-1194));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)113;
      byteArray0[6] = (byte) (-39);
      byteArray0[7] = (byte)83;
      base64_0.decode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64 base64_1 = new Base64(true);
      base64_1.decode("aQ;(XtBkR:?\"");
      base64_1.decode((Object) "aQ;(XtBkR:?\"");
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      base64_1.avail();
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.isBase64("");
      base64_0.encodeToString((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64(byteArray0, true, true, (-921));
      Base64.encodeBase64(byteArray0, false);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Base64.isBase64("UTF-16LE");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte) (-117);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray1, (int) (byte)93, (int) (byte)0);
      Base64.encodeBase64(byteArray1);
      byte[] byteArray2 = base64_0.decode("UTF-16LE");
      base64_0.decode((Object) "UTF-16LE");
      Base64.isBase64("|YmWWB|A_1Vl2<Z");
      Base64.decodeInteger(byteArray2);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, false, false, (int) (byte) (-117));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (18) than the specified maxium size of -117
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)86;
      byteArray0[2] = (byte)32;
      Base64 base64_0 = new Base64(0);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Base64.decodeBase64(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      int int0 = Base64.PEM_CHUNK_SIZE;
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.isArrayByteBase64(byteArray0);
      base64_0.encodeToString(byteArray2);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Base64 base64_0 = new Base64(3);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte) (-55);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64(byteArray1, true, true);
      byte[] byteArray2 = new byte[0];
      Base64.encodeBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte) (-117);
      byteArray0[5] = (byte)95;
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0, 425, (int) (byte)0);
      Object object0 = new Object();
      Base64.encodeBase64String(byteArray0);
      Object object1 = base64_0.decode((Object) "AAD+XYtfAAA=");
      base64_0.decode(object1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false);
      Base64.isArrayByteBase64(byteArray0);
      base64_0.encode(byteArray1, (int) (byte) (-117), 81);
      Base64.decodeInteger(byteArray1);
      Base64.encodeBase64URLSafe(byteArray1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      Base64 base64_1 = new Base64(64, byteArray0, false);
      base64_1.encodeToString(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      base64_1.avail();
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64.isArrayByteBase64(byteArray1);
      base64_1.encodeToString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64(byteArray2);
      base64_0.decode("AA");
      base64_0.encode(byteArray2, (-3503), 206);
      base64_0.avail();
      Base64.isBase64((byte)36);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte) (-20);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[6] = (byte) (-58);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte) (-20);
      byteArray2[1] = (byte) (-20);
      byteArray2[2] = (byte) (-20);
      byteArray2[4] = (byte) (-58);
      Base64.encodeBase64((byte[]) null);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64(byteArray2);
      Base64.isBase64("|YmWWB|A_1Vl2<Z");
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, true, false, (int) (byte) (-19));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (18) than the specified maxium size of -19
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)89;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)0;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)89);
      Base64.isBase64((byte)81);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Base64.isBase64("a;ag_st%!4`x?1Ob");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-2);
      byte byte0 = (byte)93;
      byteArray0[3] = (byte)93;
      byteArray0[1] = (byte) (-117);
      byteArray0[5] = (byte)95;
      Base64.discardWhitespace(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = new byte[4];
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)0;
      byte[] byteArray3 = Base64.encodeBase64(byteArray2);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64(byteArray3);
      base64_0.decode((String) null);
      String string0 = "L0huLGt~|mx";
      base64_0.decode((Object) "L0huLGt~|mx");
      Base64.isBase64("S@6(Af(;.");
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, true, true, (int) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Base64.isBase64("a;ag_st%!4`x?1Ob");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte) (-117);
      byteArray0[5] = (byte)95;
      byteArray0[6] = (byte)14;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      Base64 base64_0 = new Base64();
      base64_0.hasData();
      Base64.encodeBase64String(byteArray1);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger1.compareTo(bigInteger0);
      BigInteger bigInteger2 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger2);
      Object object0 = new Object();
      base64_0.decode((Object) "a;ag_st%!4`x?1Ob");
      Base64.decodeBase64("QUFEK1hZdGZEZ0E9");
      Base64.isBase64((byte)93);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)17;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)17;
      byteArray2[1] = (byte)17;
      byteArray2[2] = (byte)17;
      byteArray2[3] = (byte)17;
      byteArray2[4] = (byte)17;
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, false);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray3, (int) (byte)17, (-1478));
      Base64.isBase64("Input array too big, the output array would be bigger (");
      Base64.isBase64("");
      base64_0.decode((Object) ".A?y4DW5nBx");
      Base64.encodeBase64(byteArray1, true, true, (int) (byte)17);
      base64_0.avail();
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      Base64 base64_1 = new Base64(64, byteArray0, false);
      base64_1.encodeToString(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      Base64 base64_2 = new Base64(true);
      byte[] byteArray2 = base64_2.encode(byteArray1);
      Base64.encodeBase64(byteArray0, false, false);
      base64_2.hasData();
      Base64.encodeBase64String(byteArray1);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      bigInteger0.getLowestSetBit();
      BigInteger bigInteger1 = new BigInteger(byteArray1);
      bigInteger0.compareTo(bigInteger1);
      BigInteger bigInteger2 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger2);
      base64_1.decode(byteArray2, 0, 64);
      Base64.decodeBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true);
      Base64 base64_0 = new Base64();
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false, false);
      Base64 base64_1 = new Base64();
      base64_0.decode(" d^'.@>dJE1lZVl^");
      base64_1.decode((byte[]) null, 8180, (int) (byte)0);
      Base64.isBase64("");
      base64_0.decode((Object) ".A?y4DW5nBx");
      Base64.encodeBase64(byteArray2, false, false, 24);
      base64_0.avail();
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-96);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-96);
      byteArray1[1] = (byte) (-96);
      byteArray1[2] = (byte) (-96);
      byteArray1[3] = (byte) (-96);
      byteArray1[4] = (byte) (-96);
      byteArray1[5] = (byte)26;
      byteArray1[6] = (byte) (-96);
      base64_0.readResults(byteArray1, 8180, (byte) (-96));
      byteArray0[1] = (byte)81;
      Base64.encodeBase64(byteArray0);
      base64_0.isUrlSafe();
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Base64 base64_0 = new Base64((-1179));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)67;
      base64_0.encode(byteArray0, (-563), (-1179));
      base64_0.isUrlSafe();
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)1;
      Base64.isBase64(byteArray1);
      Base64 base64_1 = new Base64((byte)1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)17;
      byte byte0 = (byte)98;
      byte byte1 = (byte) (-124);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64((byte)98);
      Base64.isBase64("q$e2|b#^9-");
      Base64.isArrayByteBase64(byteArray1);
      Base64.encodeBase64Chunked(byteArray1);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte) (-124);
      byteArray2[1] = (byte) (-57);
      byteArray2[2] = (byte) (-57);
      byteArray2[3] = (byte)98;
      base64_0.encode(byteArray2, 2523, (int) (byte) (-57));
      Object object0 = new Object();
      Base64.encodeBase64String(byteArray1);
      try { 
        base64_0.decode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)112;
      byte byte0 = (byte)79;
      byteArray0[1] = (byte)79;
      byte[] byteArray1 = new byte[0];
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      boolean boolean0 = true;
      boolean boolean1 = false;
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, true, false);
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64((-145), byteArray2);
      // Undeclared exception!
      try { 
        base64_1.decode(byteArray3, 64, (int) (byte)112);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 64
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)17;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)17;
      byteArray2[1] = (byte)17;
      byteArray2[2] = (byte)17;
      byteArray2[3] = (byte)17;
      byteArray2[4] = (byte)17;
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, false);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray3, (int) (byte)17, (-1478));
      Base64.isBase64("");
      base64_0.decode((Object) ".A?y4DW5nBx");
      Base64.encodeBase64(byteArray1, true, true, 73);
      base64_0.avail();
      Base64.isBase64(byteArray3);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)123;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)61;
      byteArray1[1] = (byte)20;
      byteArray1[2] = (byte)20;
      byteArray1[3] = (byte)0;
      Base64.isBase64(byteArray1);
      byte[] byteArray2 = null;
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte byte0 = (byte)24;
      byte[] byteArray0 = null;
      Base64.encodeBase64((byte[]) null, false, true);
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = null;
      try {
        bigInteger1 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)116;
      Base64.isBase64((byte) (-112));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.compareTo(bigInteger1);
      bigInteger1.intValue();
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)17;
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.encodeBase64(byteArray1);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64(byteArray1);
      base64_0.decode(";");
      base64_0.decode((Object) ";");
      Base64.isBase64("");
      Base64.encodeBase64(byteArray0, true, true, 80);
      Base64.decodeBase64("EQ");
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray1, 2, 4);
      Base64.encodeBase64(byteArray0, false, false);
      Object object0 = new Object();
      Object object1 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64 base64_1 = new Base64(false);
      base64_1.decode("org.apache.commons.codec.binary.Base64");
      Base64 base64_2 = new Base64((byte) (-21));
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte) (-21);
      byteArray2[1] = (byte)116;
      byteArray2[2] = (byte) (-64);
      byteArray2[3] = (byte)116;
      byteArray2[4] = (byte)116;
      byteArray2[5] = (byte)0;
      byteArray2[6] = (byte) (-64);
      byteArray2[7] = (byte) (-64);
      base64_2.decode(byteArray2);
      Base64.decodeBase64(byteArray2);
      Base64.isArrayByteBase64(byteArray2);
      base64_0.avail();
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.isArrayByteBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte) (-20);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-58);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-20);
      byteArray1[1] = (byte) (-20);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte) (-58);
      Base64.encodeBase64(byteArray1);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64(byteArray1);
      base64_0.decode("AO3sAAAAxg");
      base64_0.decode((Object) "AO3sAAAAxg");
      Base64.isBase64("|YmWWB|A_1Vl2<Z");
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, true, (int) (byte) (-58));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of -58
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Base64.isBase64("a;ag_st%!4`x?1Ob");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte) (-117);
      byteArray0[5] = (byte)95;
      byteArray0[6] = (byte)14;
      byteArray0[7] = (byte)32;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)32);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-2);
      byteArray1[1] = (byte)95;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)14;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, (int) (byte)0, (int) (byte)32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, true);
      byte[] byteArray3 = new byte[3];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte)1;
      byteArray3[2] = (byte)58;
      Base64.encodeBase64(byteArray3);
      base64_0.decode((Object) "gwoMDjo1DpOWO3~l ");
      Base64.decodeBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.doubleValue();
      bigInteger0.signum();
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-61);
      Base64.encodeBase64(byteArray0, true, true);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-61);
      byteArray1[1] = (byte) (-61);
      byteArray1[2] = (byte) (-61);
      byteArray1[3] = (byte) (-61);
      Base64 base64_0 = new Base64(0, byteArray1);
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(0, byteArray0);
      base64_0.decode(byteArray0);
      base64_0.encode(byteArray0);
      Base64 base64_1 = new Base64(3153, byteArray0);
      try { 
        base64_1.encode((Object) base64_0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-114);
      byteArray0[6] = (byte)97;
      byteArray0[7] = (byte)13;
      byteArray0[8] = (byte) (-1);
      base64_0.encode(byteArray0);
      byte[] byteArray1 = new byte[1];
      Base64.encodeBase64String(byteArray1);
      byteArray1[0] = (byte)78;
      base64_0.readResults(byteArray1, (byte)78, (byte)78);
      Object object0 = base64_0.decode((Object) "AA==");
      Object object1 = base64_0.decode(object0);
      base64_0.encode(object1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-21);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = base64_0.decode("org.apache.commons.codec.binary.Base64");
      base64_0.decode(byteArray1);
      byte[] byteArray3 = new byte[9];
      byteArray3[0] = (byte) (-64);
      byteArray3[1] = (byte) (-64);
      byteArray3[2] = (byte) (-80);
      byteArray3[3] = (byte)99;
      byteArray3[4] = (byte) (-64);
      byteArray3[5] = (byte) (-21);
      byteArray3[6] = (byte)1;
      byteArray3[7] = (byte) (-64);
      byteArray3[8] = (byte) (-21);
      Base64.decodeBase64(byteArray3);
      Base64.isArrayByteBase64(byteArray2);
      base64_0.avail();
      Base64.encodeBase64URLSafeString((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)17;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Base64 base64_0 = new Base64(1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte) (-48);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-98);
      byteArray0[8] = (byte)0;
      Base64.decodeBase64(byteArray0);
      Base64.isBase64("7+`_0{Q\"cY#ja");
      base64_0.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)66, byteArray1, false);
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)81;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)66;
      byteArray2[5] = (byte)66;
      byteArray2[6] = (byte)66;
      byteArray2[7] = (byte)66;
      byteArray2[8] = (byte)66;
      Base64.encodeBase64(byteArray2, false);
      Base64.encodeBase64String(byteArray2);
      Base64.decodeBase64(byteArray0);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte) (-9);
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte) (-124);
      byteArray0[5] = (byte) (-57);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)53;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(3449);
      Base64.isBase64("q$e2|b#^9-");
      Base64.isArrayByteBase64(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64.decodeInteger(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray2, (int) (byte)53, 1204);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 53
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)36;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_0 = new Base64(844);
      base64_0.decode(byteArray0, 1, (int) (byte)0);
      Base64.isBase64("org.apache.commons.codec.DecoderException");
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (-966), 48);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -966
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      Base64.encodeBase64(byteArray0, false, false);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-100);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)80;
      base64_0.decode(byteArray1);
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)0);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertEquals(3, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)127;
      byte byte0 = (byte)100;
      byteArray0[2] = (byte)100;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000d]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)17;
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)17;
      byteArray1[1] = (byte)17;
      byteArray1[2] = (byte)17;
      byteArray1[3] = (byte)17;
      byteArray1[4] = (byte)17;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, false);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray2, (int) (byte)17, (-1478));
      Base64.isBase64("");
      base64_0.decode((Object) ".A?y4DW5nBx");
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)14;
      Base64 base64_0 = new Base64(851, byteArray0, false);
      base64_0.encodeToString(byteArray0);
      Base64.encodeBase64(byteArray0, false, false);
      base64_0.encode(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      base64_0.hasData();
      Base64.encodeBase64String(byteArray1);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)7;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)14;
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)0;
      BigInteger bigInteger1 = new BigInteger(byteArray2);
      bigInteger0.compareTo(bigInteger1);
      Base64.toIntegerBytes(bigInteger0);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-63);
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte1 = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.decodeBase64("");
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.max(bigInteger0);
      bigInteger1.longValueExact();
      bigInteger1.nextProbablePrime();
      bigInteger1.and(bigInteger0);
      bigInteger0.or(bigInteger1);
      Base64.decodeBase64(byteArray0);
      Base64.encodeBase64String(byteArray0);
      Base64.decodeBase64("wQAAAA==");
      Base64.encodeInteger(bigInteger0);
      Base64.toIntegerBytes(bigInteger0);
      BigInteger.valueOf((byte)0);
      try { 
        base64_0.encode((Object) "wQAAAA==");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("k\"");
      Base64 base64_0 = new Base64();
      int int0 = base64_0.readResults(byteArray0, (-1384), 1326);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, byteArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)116;
      byteArray0[0] = (byte)116;
      Base64.encodeBase64(byteArray0, true, false);
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger1.divide(bigInteger0);
      bigInteger1.nextProbablePrime();
      bigInteger0.divideAndRemainder(bigInteger1);
      Base64.encodeInteger(bigInteger0);
      base64_0.hasData();
      int int0 = 119;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 119, (int) (byte)116);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 119
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = 45;
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(45, byteArray0, false);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte) (-1);
      byteArray1[4] = (byte)38;
      byteArray1[5] = (byte)103;
      byteArray1[6] = (byte)63;
      byteArray1[7] = (byte)69;
      byteArray1[8] = (byte)1;
      Base64.encodeBase64URLSafe(byteArray1);
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)29;
      byteArray0[5] = (byte) (-49);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-67);
      byteArray0[8] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-106), (byte) (-6), (byte)0, (byte)29, (byte) (-49), (byte)0, (byte) (-67), (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)54;
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      boolean boolean0 = false;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-1976), byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [6\u0001\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = Base64.isBase64("org.apache.commons.codec.EncoderException");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-24);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)65, (byte)84, (byte)65, (byte)65, (byte)54, (byte)65, (byte)61, (byte)61}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Base64.isBase64("wYf'&'ECU2rLMvhp");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-17);
      byteArray0[5] = (byte) (-46);
      byteArray0[6] = (byte)112;
      byteArray0[7] = (byte)1;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [e\uFFFD\u0000\u0000\uFFFD\uFFFDp\u0001]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }
}
