/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:05:19 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[153];
      Base64 base64_0 = new Base64(4, byteArray0);
      Base64.encodeBase64(byteArray0, false, false);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      Base64.encodeInteger(bigInteger0);
      // Undeclared exception!
      base64_0.encode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[139];
      Base64 base64_0 = new Base64(4, byteArray0, false);
      base64_0.encode(byteArray0, 4, 76);
      base64_0.encode(byteArray0, 4, 90);
      base64_0.encode(byteArray0, 76, 4);
      base64_0.readResults(byteArray0, 4, 4);
      base64_0.decode(byteArray0, 4, 4);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      // Undeclared exception!
      Base64.decodeInteger(byteArray2);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[139];
      int int0 = 4;
      Base64 base64_0 = new Base64(4, byteArray0, true);
      Object object0 = base64_0.decode((Object) "US-ASCII");
      Object object1 = base64_0.encode(object0);
      Object object2 = base64_0.encode(object1);
      // Undeclared exception!
      base64_0.decode(object2);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[139];
      Base64 base64_0 = new Base64(4, byteArray0, false);
      base64_0.encode(byteArray0, 4, 76);
      base64_0.encode(byteArray0, 4, 90);
      base64_0.encode(byteArray0, 76, 4);
      base64_0.readResults(byteArray0, 4, 4);
      base64_0.decode(byteArray0, 4, 4);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      base64_0.decode(byteArray0, 4, 64);
      base64_0.decode(byteArray0, 4, 4);
      base64_0.decode(byteArray1, 144, 144);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (194) than the specified maxium size of 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[153];
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0, 1, 1);
      base64_0.readResults(byteArray0, 0, 1);
      base64_0.decode(byteArray0, 0, (-1487));
      Base64 base64_1 = new Base64(4, byteArray0);
      // Undeclared exception!
      try { 
        base64_1.decode(byteArray0, 0, 1326);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 153
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[139];
      Base64 base64_0 = new Base64(5, byteArray0, false);
      base64_0.encode(byteArray0, 5, 76);
      base64_0.encode(byteArray0, 5, 90);
      base64_0.encode(byteArray0, 76, 5);
      base64_0.readResults(byteArray0, 5, 5);
      base64_0.decode(byteArray0, 5, 5);
      base64_0.decode(byteArray0, 5, 64);
      base64_0.decode(byteArray0, 5, 5);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[72];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(10, byteArray0, true);
      base64_0.encode(byteArray1);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      Base64.encodeInteger(bigInteger0);
      // Undeclared exception!
      Base64.discardWhitespace(byteArray3);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[132];
      Base64 base64_0 = new Base64(4, byteArray0, false);
      base64_0.decode(byteArray0, 4, 76);
      base64_0.encode(byteArray0, 4, 76);
      base64_0.encode(byteArray0, 4, 87);
      base64_0.encode(byteArray0, 76, 4);
      base64_0.readResults(byteArray0, 4, 4);
      base64_0.decode(byteArray0, 4, 4);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.decode(byteArray1);
      // Undeclared exception!
      base64_0.decode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[139];
      Base64 base64_0 = new Base64(4, byteArray0, true);
      base64_0.decode(byteArray0, 4, 76);
      base64_0.encode(byteArray0, 4, 76);
      base64_0.encode(byteArray0, 4, 87);
      base64_0.encode(byteArray0, 76, 4);
      base64_0.readResults(byteArray0, 4, 4);
      base64_0.decode(byteArray0, 4, 4);
      Base64.isBase64("HQ@O}b30L1]ug/");
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-8);
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray1, 1045, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[136];
      Base64 base64_0 = new Base64(4, byteArray0, true);
      base64_0.decode(byteArray0, 4, 76);
      base64_0.encode(byteArray0, 4, 76);
      base64_0.encode(byteArray0, 4, 74);
      base64_0.encode(byteArray0, 76, 4);
      Base64.isBase64(byteArray0);
      Base64.decodeInteger(byteArray0);
      Base64.isBase64("|<`[cDS;w");
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, (-2960), 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[117];
      Base64 base64_0 = new Base64(4, byteArray0, true);
      base64_0.decode(byteArray0, 4, 76);
      base64_0.encode(byteArray0, 4, 76);
      base64_0.encode(byteArray0, 76, 4);
      base64_0.decode(byteArray0, 4, (-894));
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(0, byteArray1.length);
      
      int int0 = base64_0.readResults(byteArray0, 4, 89);
      assertEquals(89, int0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[117];
      int int0 = 4;
      Base64 base64_0 = new Base64(4, byteArray0, true);
      base64_0.decode(byteArray0, 4, 76);
      base64_0.encode(byteArray0, 4, 76);
      base64_0.encode(byteArray0, 0, 63);
      Base64.decodeInteger(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 0, 958);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 117
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[82];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(4, byteArray0, true);
      base64_0.decode(byteArray1, 4, 76);
      assertEquals(110, byteArray1.length);
      
      Base64 base64_1 = new Base64(false);
      base64_1.encode(byteArray0, 0, (-798));
      base64_0.encode(byteArray0, 56, (-1));
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[72];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(10, byteArray0, true);
      base64_0.encode(byteArray1);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      assertEquals(17115, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[103];
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertEquals(138, byteArray1.length);
      
      base64_0.encode(byteArray0, 24, 24);
      base64_0.encode(byteArray0, (-1635), (-1635));
      int int0 = base64_0.readResults(byteArray0, 24, 24);
      assertEquals(24, int0);
      
      byte[] byteArray2 = base64_0.encode(byteArray0);
      assertEquals(142, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[92];
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray0, 11, 11);
      base64_0.encode(byteArray0, (-1635), (-1635));
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[92];
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0, 8, 8);
      base64_0.encode(byteArray0, (-1635), (-1635));
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[92];
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray0, 1, 1);
      base64_0.encode(byteArray0, (-1635), (-1635));
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[92];
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0, 1, 1);
      base64_0.encode(byteArray0, (-1635), (-1635));
      assertEquals(92, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)123;
      Base64 base64_0 = new Base64(2, byteArray0, false);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      base64_0.encode(byteArray2);
      base64_0.avail();
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 0, (int) (byte)123);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = (-1334);
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-1334), byteArray0);
      Object object0 = base64_0.decode((Object) "ISO-8859-1");
      // Undeclared exception!
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[72];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(10, byteArray0, true);
      base64_0.decode((Object) "UTF-16");
      base64_0.encode(byteArray1);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      assertEquals(17115, byteArray3.length);
      
      boolean boolean0 = Base64.isBase64("UTF-16");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 6);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)80, (byte)51, (byte)56, (byte)63, (byte)127}, byteArray1);
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      //  // Unstable assertion: assertEquals("P38", string0);
      
      byte[] byteArray2 = base64_0.encode(byteArray0);
      //  // Unstable assertion: assertEquals(4, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-65);
      base64_0.decode(byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)103;
      byteArray1[1] = (byte)35;
      byteArray1[2] = (byte)27;
      byteArray1[3] = (byte) (-20);
      byteArray1[4] = (byte)71;
      byteArray1[5] = (byte)39;
      byteArray1[6] = (byte)41;
      byteArray1[7] = (byte)43;
      Base64.encodeBase64(byteArray1, false);
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)9;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)9;
      byteArray2[3] = (byte) (-59);
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)95;
      byteArray2[6] = (byte) (-40);
      byteArray2[7] = (byte)114;
      Base64.isBase64(byteArray2);
      boolean boolean0 = Base64.isBase64((byte)9);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = new byte[55];
      Base64.decodeBase64(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64String(byteArray0);
      Base64.encodeInteger(bigInteger0);
      try { 
        base64_0.decode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = new byte[55];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      assertEquals(104, byteArray3.length);
      
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==", string0);
      
      byte[] byteArray4 = Base64.encodeInteger(bigInteger0);
      assertEquals(4, byteArray4.length);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray4);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf((-1175L));
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      assertArrayEquals(new byte[] {(byte)75, (byte)122, (byte)74, (byte)114, (byte)80, (byte)81, (byte)61, (byte)61}, byteArray1);
      
      BigInteger bigInteger2 = BigInteger.ZERO;
      Base64 base64_0 = new Base64();
      bigInteger0.not();
      base64_0.decode(byteArray0, 0, 107);
      byte[] byteArray2 = base64_0.encode(byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)75, (byte)122, (byte)74, (byte)114, (byte)80, (byte)81, (byte)61, (byte)61}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Base64 base64_0 = new Base64(14);
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)73;
      byteArray0[2] = (byte)73;
      String string0 = "";
      Base64.isBase64("");
      byte[] byteArray1 = base64_0.decode("");
      byteArray0[4] = (byte) (-127);
      byteArray0[7] = (byte)0;
      base64_0.encode(byteArray1);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 0, (int) (byte)73);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf((-1175L));
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0, 1, (int) (byte)113);
      assertArrayEquals(new byte[] {(byte)43, (byte)50, (byte)107, (byte)61}, byteArray0);
      
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger1);
      assertEquals(0, byteArray1.length);
      
      int int0 = base64_0.avail();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.valueOf((-1142L));
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      BigInteger bigInteger2 = BigInteger.ONE;
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0, 1, (int) (byte)101);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      int int0 = base64_0.readResults(byteArray0, 1, 1);
      assertArrayEquals(new byte[] {(byte)43, (byte) (-30), (byte)111, (byte)61}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.valueOf((-1142L));
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      BigInteger bigInteger2 = BigInteger.ONE;
      Base64.isBase64((byte)61);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0, (-2320), (-1));
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      assertEquals(2, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      Base64 base64_0 = new Base64(1677, byteArray0);
      base64_0.encode(byteArray0, (-7), (-7));
      assertFalse(base64_0.isUrlSafe());
      
      boolean boolean0 = Base64.isBase64((byte)123);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[24];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_1 = new Base64(false);
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray4, true, false, 103);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (128) than the specified maxium size of 103
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Base64 base64_0 = new Base64((byte)62);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte)62;
      Base64.decodeInteger(byteArray0);
      boolean boolean0 = Base64.isBase64((byte)125);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger.valueOf(517L);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.byteValueExact();
      Base64 base64_0 = new Base64((byte)10);
      byte[] byteArray0 = new byte[6];
      String string0 = base64_0.encodeToString(byteArray0);
      //  // Unstable assertion: assertEquals("AAAAAAAA?", string0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      int int0 = Base64.PEM_CHUNK_SIZE;
      boolean boolean0 = Base64.isBase64("");
      //  // Unstable assertion: assertTrue(boolean0);
      
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      //  // Unstable assertion: assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64((-2147483646), byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)104;
      byteArray1[1] = (byte)54;
      byteArray1[2] = (byte)85;
      byteArray1[3] = (byte)111;
      byteArray1[4] = (byte) (-89);
      byteArray1[5] = (byte)63;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte) (-19);
      Base64.discardWhitespace(byteArray0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      Base64.isBase64((byte)105);
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = 1934;
      Base64 base64_0 = new Base64(1934, byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)62;
      byteArray1[1] = (byte)62;
      byteArray1[2] = (byte)62;
      byteArray1[3] = (byte)62;
      byteArray1[4] = (byte)62;
      byteArray1[5] = (byte)62;
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Base64.isBase64("s-VZc]B~~/_i'siU");
      int int0 = 1012;
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64(1012, (byte[]) null);
      Base64.encodeBase64((byte[]) null, true, true);
      Base64.encodeBase64((byte[]) null, false);
      Object object0 = new Object();
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.encodeBase64String((byte[]) null);
      Base64.encodeBase64((byte[]) null, false, true, 76);
      base64_0.encode((byte[]) null);
      byte[] byteArray1 = new byte[6];
      base64_0.decode((Object) "s-VZc]B~~/_i'siU");
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-19);
      byteArray1[2] = (byte) (-104);
      Base64.encodeBase64Chunked((byte[]) null);
      byteArray1[3] = (byte) (-65);
      byteArray1[4] = (byte)77;
      byteArray1[5] = (byte) (-33);
      base64_0.decode(byteArray1);
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)127;
      Base64 base64_0 = new Base64((byte) (-104), byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      base64_0.encodeToString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Object object0 = new Object();
      Object object1 = base64_0.decode((Object) "UTF-16");
      Object object2 = base64_0.decode(object1);
      assertNotSame(object2, object1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64 base64_1 = new Base64(76);
      Object object0 = new Object();
      Object object1 = base64_0.decode((Object) "");
      base64_1.encode(object1);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte)63;
      Base64 base64_2 = new Base64(24, byteArray0);
      base64_2.encodeToString(byteArray0);
      try { 
        base64_2.encode((Object) "encodeInteger called with null parameter");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      assertTrue(base64_0.isUrlSafe());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)1;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)104, (byte)65, (byte)69, (byte)61}, byteArray1);
      
      Base64 base64_1 = new Base64(false);
      base64_1.encode(byteArray0, (int) (byte)1, (-422));
      boolean boolean0 = base64_1.hasData();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.subtract(bigInteger1);
      BigInteger bigInteger2 = BigInteger.valueOf((-1142L));
      bigInteger2.divideAndRemainder(bigInteger0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)42;
      byteArray0[6] = (byte)62;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)38;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)44, (byte)63, (byte) (-121), (byte)42, (byte)42, (byte)62, (byte)0, (byte)38}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_1 = new Base64(true);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true);
      Base64.encodeBase64String(byteArray2);
      Base64.isBase64("US-ASCII");
      Base64 base64_2 = new Base64((-2406), byteArray0, true);
      base64_1.decode((Object) "US-ASCII");
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.valueOf((-1142L));
      bigInteger1.divideAndRemainder(bigInteger0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      BigInteger bigInteger2 = BigInteger.ONE;
      bigInteger1.max(bigInteger2);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64(byteArray0, true);
      Base64.encodeBase64String(byteArray1);
      Base64 base64_1 = new Base64(true);
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, 68, 64);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.valueOf((-1142L));
      bigInteger1.divideAndRemainder(bigInteger0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      BigInteger bigInteger2 = BigInteger.ONE;
      bigInteger1.max(bigInteger2);
      Base64.isBase64((byte)101);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0, 1, 6064);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_1 = new Base64();
      base64_1.encodeToString(byteArray0);
      Base64.isBase64((byte)0);
      Base64.isBase64(byteArray1);
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)18;
      byteArray2[1] = (byte)101;
      byteArray2[2] = (byte)18;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)101;
      byteArray2[5] = (byte)18;
      byteArray2[6] = (byte)0;
      byteArray2[7] = (byte)101;
      byteArray2[8] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray2);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.byteValueExact();
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray2 = Base64.encodeBase64((byte[]) null, true, true, (-4520));
      assertNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.byteValueExact();
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64(2341);
      base64_0.encodeToString(byteArray0);
      Base64.isBase64("DQo=\r\n");
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-108);
      byteArray1[3] = (byte)0;
      base64_0.encodeToString(byteArray1);
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)62;
      byteArray0[0] = (byte)14;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)76;
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64(byteArray0, false);
      Base64 base64_0 = new Base64(false);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 0, 62);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)1;
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_1 = new Base64(true);
      base64_1.decode(byteArray1, (int) (byte) (-124), 0);
      base64_1.encodeToString(byteArray0);
      Base64 base64_2 = new Base64((byte)1);
      base64_2.isUrlSafe();
      Base64.isBase64("hAEAAAAAAAAAAAAAAA\r\n");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.divideAndRemainder(bigInteger0);
      BigInteger bigInteger2 = bigInteger1.negate();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger2);
      BigInteger bigInteger3 = BigInteger.ONE;
      bigInteger1.max(bigInteger3);
      Base64.isBase64((byte)101);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0, 1, 6064);
      byte[] byteArray1 = Base64.decodeBase64("");
      Base64.encodeBase64(byteArray0);
      base64_0.decode(byteArray1, 76, 1);
      Base64.isBase64((byte)101);
      Base64.encodeBase64(byteArray1, true);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)1;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      Base64 base64_1 = new Base64(false);
      base64_0.encodeToString((byte[]) null);
      Base64 base64_2 = null;
      try {
        base64_2 = new Base64(76, byteArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [AQAAAAAAAA==!]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[2];
      base64_0.encodeToString(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      base64_0.encode(byteArray0, (-2152), (-2152));
      byteArray0[0] = (byte)72;
      base64_0.readResults(byteArray0, (byte)72, (byte)72);
      byteArray0[1] = (byte)59;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      base64_0.hasData();
      Base64.decodeBase64(byteArray1);
      Base64.discardWhitespace(byteArray1);
      try { 
        base64_0.encode((Object) "AAA\r\n");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)0;
      Base64.isArrayByteBase64(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.isBase64((byte)6);
      Base64 base64_0 = new Base64((-1282), byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-14);
      byteArray1[2] = (byte)0;
      byteArray1[0] = (byte)6;
      byteArray1[4] = (byte)0;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, 1, 1962);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte)4;
      byteArray1[2] = (byte) (-69);
      byteArray1[3] = (byte)12;
      byteArray1[4] = (byte) (-1);
      Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_1 = new Base64(true);
      Base64.encodeBase64((byte[]) null, true);
      Base64.encodeBase64String(byteArray0);
      Base64.isBase64("QVE9PQ==");
      base64_1.encodeToString(byteArray1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.shiftRight(0);
      BigInteger bigInteger2 = bigInteger1.shiftRight(266);
      bigInteger2.remainder(bigInteger1);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)121;
      BigInteger bigInteger3 = Base64.decodeInteger(byteArray0);
      bigInteger0.max(bigInteger3);
      Base64.isBase64((byte)26);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0, (-426), (-1160));
      byte[] byteArray1 = Base64.decodeBase64("");
      Base64.encodeBase64(byteArray1);
      base64_0.decode(byteArray1, (int) (byte)12, 266);
      Base64.isBase64((byte)121);
      Base64.encodeBase64(byteArray0, true);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.valueOf((-1142L));
      bigInteger1.divideAndRemainder(bigInteger0);
      BigInteger bigInteger2 = bigInteger1.negate();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger2);
      BigInteger bigInteger3 = BigInteger.ONE;
      Base64.isBase64((byte)101);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0, 1, 6064);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)3;
      byteArray1[1] = (byte)101;
      byteArray1[2] = (byte)101;
      byteArray1[3] = (byte)101;
      byteArray1[4] = (byte)101;
      byteArray1[5] = (byte)101;
      byteArray1[6] = (byte)101;
      base64_0.decode(byteArray1, (-1301), (int) (byte)101);
      Base64 base64_1 = new Base64(true);
      Base64.encodeBase64URLSafe(byteArray0);
      base64_1.isUrlSafe();
      Base64.isBase64((byte)24);
      base64_1.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.valueOf((-1142L));
      bigInteger1.divideAndRemainder(bigInteger0);
      BigInteger bigInteger2 = bigInteger1.negate();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger2);
      byte byte0 = (byte)101;
      BigInteger bigInteger3 = BigInteger.ONE;
      bigInteger1.max(bigInteger3);
      Base64.isBase64((byte)101);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0, 1, 6064);
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, 63, (byte)101);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte)14;
      byteArray0[0] = (byte)14;
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte) (-14);
      base64_0.decode((Object) "\"/,Q,@lNE_~#3U=mF");
      byteArray0[5] = (byte)32;
      base64_0.encode(byteArray0, (int) (byte)14, (-3941));
      byte[] byteArray1 = Base64.decodeBase64("");
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)0;
      byte[] byteArray3 = Base64.decodeBase64("");
      base64_0.decode(byteArray3);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte)0;
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 0, 81);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Base64.decodeBase64((byte[]) null);
      Base64 base64_0 = new Base64(0, (byte[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte) (-47);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.decodeInteger(byteArray0);
      Base64.decodeBase64((byte[]) null);
      Base64.encodeBase64(byteArray0);
      Base64.decodeBase64((byte[]) null);
      Base64 base64_1 = new Base64(1);
      // Undeclared exception!
      try { 
        base64_1.decode((byte[]) null, 91, 66);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_1 = new Base64(true);
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, false);
      Base64.decodeInteger(byteArray3);
      Base64.encodeBase64String(byteArray2);
      byte[] byteArray4 = Base64.encodeBase64(byteArray2, false, true, 76);
      Base64 base64_2 = new Base64();
      byte[] byteArray5 = new byte[1];
      byteArray5[0] = (byte)110;
      base64_2.encode(byteArray5, 76, (-1622));
      base64_2.decode(byteArray3);
      byte[] byteArray6 = base64_0.decode(byteArray4);
      Base64.encodeBase64URLSafeString(byteArray4);
      base64_2.readResults(byteArray3, 76, 64);
      Base64.decodeBase64(byteArray6);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeBase64String(byteArray5);
      Base64.isBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      base64_2.avail();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_1 = new Base64(true);
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, false);
      Base64.decodeInteger(byteArray3);
      Base64.encodeBase64String(byteArray2);
      byte[] byteArray4 = Base64.encodeBase64(byteArray2, false, true, 76);
      Base64 base64_2 = new Base64(true);
      byte[] byteArray5 = new byte[1];
      byteArray5[0] = (byte)110;
      base64_2.encode(byteArray5, 76, (-1622));
      base64_2.decode(byteArray3);
      byte[] byteArray6 = base64_0.decode(byteArray4);
      Base64.encodeBase64URLSafeString(byteArray4);
      base64_2.readResults(byteArray3, 76, 64);
      Base64.decodeBase64(byteArray6);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.byteValueExact();
      byte[] byteArray7 = Base64.CHUNK_SEPARATOR;
      Base64.encodeBase64(byteArray2, false, true, 64);
      byte[] byteArray8 = new byte[0];
      Base64.encodeBase64(byteArray8, false);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)62;
      byteArray0[0] = (byte)14;
      byteArray0[2] = (byte)52;
      byte byte0 = (byte) (-14);
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)76;
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(true);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, (int) (byte)0, (int) (byte)52);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.valueOf((-1142L));
      bigInteger1.divideAndRemainder(bigInteger0);
      BigInteger bigInteger2 = bigInteger1.negate();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger2);
      BigInteger bigInteger3 = BigInteger.ONE;
      bigInteger1.max(bigInteger3);
      Base64.isBase64((byte)101);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0, 1, 6064);
      byte[] byteArray1 = Base64.decodeBase64("");
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      base64_0.decode(byteArray1, 76, 1);
      Base64.isBase64((byte)101);
      Base64.encodeBase64(byteArray1, true);
      Base64.isBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.shiftRight(0);
      bigInteger0.remainder(bigInteger1);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64(byteArray0, false);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = new byte[0];
      base64_0.encode(byteArray1, 0, 0);
      base64_0.decode(byteArray0, (-3698), (-1683));
      base64_0.encodeToString(byteArray1);
      base64_0.isUrlSafe();
      Base64.isBase64((byte) (-1));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)76;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64(byteArray1, true);
      byte[] byteArray3 = new byte[1];
      byteArray3[0] = (byte)14;
      Base64.encodeBase64String(byteArray3);
      Base64.encodeBase64(byteArray2, true, true, (int) (byte)76);
      byte[] byteArray4 = base64_0.decode(byteArray2);
      base64_0.decode(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray4);
      base64_0.readResults(byteArray1, (byte)0, 0);
      byte[] byteArray5 = new byte[1];
      byteArray5[0] = (byte) (-14);
      Base64.decodeBase64("Dg==");
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.byteValueExact();
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64(byteArray3, true, true, (int) (byte)62);
      Base64.encodeBase64(byteArray4, false);
      base64_0.hasData();
      base64_0.encodeToString(byteArray1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)1;
      Base64 base64_0 = new Base64(793, byteArray0);
      base64_0.readResults(byteArray0, (byte)0, (byte)1);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      base64_0.encodeToString(byteArray1);
      base64_0.encode(byteArray0);
      byte[] byteArray2 = new byte[0];
      Base64.encodeBase64(byteArray2);
      Base64.encodeBase64(byteArray0, false, false);
      base64_0.avail();
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.decode(byteArray0, 0, 0);
      Base64.encodeBase64String((byte[]) null);
      Random.setNextRandom((-1424));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      Base64.encodeBase64(byteArray0);
      base64_0.decode(byteArray0, (int) (byte)0, (int) (byte)0);
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte) (-31);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)100;
      byteArray0[8] = (byte)58;
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64(byteArray1);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64.isBase64(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(5610, byteArray1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [M7]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-108);
      byte byte0 = (byte)83;
      Base64 base64_0 = new Base64(true);
      base64_0.decode("{N>");
      try { 
        base64_0.encode((Object) "{N>");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Base64.decodeBase64((byte[]) null);
      Base64 base64_0 = new Base64(0, (byte[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte) (-47);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64("");
      base64_0.decode((byte[]) null);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-114);
      byteArray1[1] = (byte) (-16);
      byteArray1[3] = (byte) (-47);
      base64_0.encode(byteArray1, (int) (byte)0, (int) (byte)0);
      Base64.decodeBase64((String) null);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.decodeBase64(byteArray0);
      Base64.encodeBase64URLSafe((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Base64.decodeBase64((byte[]) null);
      int int0 = 0;
      Base64 base64_0 = new Base64(0, (byte[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte) (-47);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64("");
      base64_0.decode((byte[]) null);
      Base64.encodeBase64((byte[]) null, false, false);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.toString((int) (byte) (-16));
      bigInteger0.mod(bigInteger1);
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64((byte[]) null, false, false);
      Base64.encodeBase64Chunked((byte[]) null);
      Object object0 = null;
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_1 = new Base64(true);
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, false);
      Base64.decodeInteger(byteArray3);
      Base64.encodeBase64String(byteArray2);
      byte[] byteArray4 = Base64.encodeBase64(byteArray2, false, true, 76);
      Base64 base64_2 = new Base64();
      byte[] byteArray5 = new byte[1];
      byteArray5[0] = (byte)110;
      base64_2.encode(byteArray5, 76, (-1622));
      base64_2.decode(byteArray3);
      byte[] byteArray6 = base64_0.decode(byteArray4);
      Base64.encodeBase64URLSafeString(byteArray4);
      base64_2.readResults(byteArray3, 76, 64);
      Base64.decodeBase64(byteArray6);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.byteValueExact();
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64(byteArray2, false, true, 64);
      byte[] byteArray7 = new byte[0];
      Base64.encodeBase64(byteArray7, false);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      boolean boolean0 = true;
      Base64.encodeBase64(byteArray0, true, true);
      byte[] byteArray1 = new byte[3];
      base64_0.encode(byteArray0, (int) (byte)0, (int) (byte)0);
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      base64_0.decode(byteArray1, (-957), 0);
      base64_0.decode(byteArray1);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.shiftLeft(64);
      BigInteger bigInteger1 = null;
      try {
        bigInteger1 = new BigInteger(byteArray1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[4];
      base64_0.decode((String) null);
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte) (-115);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.shiftLeft(85);
      bigInteger1.compareTo(bigInteger0);
      bigInteger1.compareTo(bigInteger0);
      bigInteger0.modPow(bigInteger1, bigInteger1);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      BigInteger bigInteger2 = null;
      try {
        bigInteger2 = new BigInteger(byteArray2);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-90);
      byteArray0[6] = (byte) (-92);
      byteArray0[7] = (byte)36;
      byteArray0[8] = (byte)78;
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)86;
      byteArray1[2] = (byte)74;
      byteArray1[3] = (byte)0;
      base64_0.encode(byteArray1);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)76;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64(byteArray1, true);
      byte[] byteArray3 = new byte[1];
      byteArray3[0] = (byte)14;
      Base64.encodeBase64String(byteArray3);
      Base64.encodeBase64(byteArray2, true, true, (int) (byte)76);
      byte[] byteArray4 = base64_0.decode(byteArray2);
      base64_0.decode(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray4);
      base64_0.readResults(byteArray1, (byte)0, 0);
      byte[] byteArray5 = new byte[1];
      byteArray5[0] = (byte) (-14);
      Base64.decodeBase64(byteArray5);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.byteValueExact();
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64(byteArray3, true, true, (int) (byte)62);
      Base64.encodeBase64(byteArray4, false);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-31);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)100;
      byteArray0[8] = (byte)58;
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64(byteArray1);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64.isBase64(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(5610, byteArray1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [M]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.intValue();
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray0 = new byte[0];
      bigInteger0.isProbablePrime(10);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.multiply(bigInteger1);
      Base64.isArrayByteBase64(byteArray0);
      String string0 = "Input array too big, the output array would be bigger (";
      BigInteger bigInteger2 = BigInteger.ZERO;
      bigInteger2.bitCount();
      // Undeclared exception!
      try { 
        bigInteger0.max((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, 46);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray0);
      byteArray0[0] = (byte) (-1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, false, false);
      Base64.encodeBase64(byteArray2, true, false);
      byteArray0[1] = (byte) (-90);
      int int0 = (-421);
      base64_0.decode(byteArray0, (-421), (int) (byte) (-1));
      base64_0.encode(byteArray2);
      Base64.encodeBase64String(byteArray1);
      base64_0.encode(byteArray0);
      base64_0.encode(byteArray2);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray3, true, false, (int) (byte) (-90));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of -90
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[3];
      bigInteger0.longValueExact();
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)71;
      bigInteger0.floatValue();
      byteArray0[2] = (byte)0;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger0.compareTo(bigInteger1);
      bigInteger0.max(bigInteger1);
      Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)71;
      byteArray1[4] = (byte) (-1);
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte) (-1);
      byteArray1[7] = (byte)0;
      byteArray1[8] = (byte)71;
      Base64.encodeBase64(byteArray1, true);
      Base64.encodeBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = Base64.isBase64("org.apache.commons.codec.DecoderException");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-80);
      byte byte0 = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-6);
      Base64 base64_0 = new Base64(0, byteArray0);
      Object object0 = new Object();
      Base64.encodeBase64(byteArray0);
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte)1;
      Base64 base64_0 = new Base64(793, byteArray0);
      base64_0.readResults(byteArray0, (byte) (-34), (byte)1);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      base64_0.encodeToString(byteArray1);
      base64_0.encode(byteArray0);
      byte[] byteArray2 = new byte[0];
      Base64.encodeBase64(byteArray2);
      Base64.encodeBase64(byteArray0, false, true);
      base64_0.avail();
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.decode(byteArray0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Base64.decodeBase64((byte[]) null);
      int int0 = 0;
      Base64 base64_0 = new Base64(0, (byte[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte) (-47);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64("");
      base64_0.decode((byte[]) null);
      Base64.encodeBase64((byte[]) null, false, false);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.mod(bigInteger1);
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64((byte[]) null, false, false);
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.encodeBase64((byte[]) null);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      base64_0.decode(byteArray0);
      base64_0.avail();
      byte[] byteArray1 = null;
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(0);
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)29;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)0;
      byteArray2[6] = (byte)13;
      Base64.encodeBase64(byteArray2, true);
      Base64.decodeBase64(byteArray1);
      base64_0.decode(byteArray0, (int) (byte)0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)0;
      base64_0.encodeToString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = 2086;
      Base64 base64_0 = new Base64(2086);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-33);
      base64_0.readResults(byteArray0, (byte) (-33), 97);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = BigInteger.probablePrime(64, mockRandom0);
      Base64.encodeInteger(bigInteger0);
      byteArray0[1] = (byte)0;
      Base64.decodeBase64("TK.");
      byte byte0 = (byte)39;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte) (-33), 679);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -33
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      String string0 = "org.apache.commons.codec.EncoderException";
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte)69;
      byteArray0[6] = (byte)124;
      byteArray0[7] = (byte) (-1);
      Base64.encodeBase64URLSafe(byteArray0);
      base64_0.decode("org.apache.commons.codec.EncoderException");
      byte[] byteArray1 = null;
      try { 
        base64_0.encode((Object) "org.apache.commons.codec.EncoderException");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)47;
      byteArray0[7] = (byte)0;
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("byuHAFgALwA=", string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("RAEAAA==", string0);
      
      boolean boolean0 = Base64.isBase64((byte)84);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-97);
      byteArray0[7] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(14, byteArray1.length);
      
      Base64 base64_0 = new Base64((byte) (-109), (byte[]) null, false);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.valueOf((-1142L));
      bigInteger0.divideAndRemainder(bigInteger1);
      bigInteger0.negate();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte byte0 = (byte)101;
      bigInteger0.max(bigInteger1);
      Base64.isBase64((byte)101);
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (-2095), (int) (byte)101);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2095
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64(byteArray0, false, false);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-84);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-39);
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte) (-42);
      byteArray1[7] = (byte) (-116);
      byteArray1[8] = (byte) (-69);
      Base64 base64_0 = new Base64((-1343), byteArray1);
      Base64.encodeBase64(byteArray1, false, false, 237);
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64(0, (byte[]) null, true);
      base64_0.readResults((byte[]) null, 0, 0);
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)0;
      Base64.isArrayByteBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.isBase64((byte)6);
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)0;
      Base64 base64_0 = new Base64((-1268), byteArray2, false);
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.negate();
      bigInteger1.toString();
      bigInteger1.setBit((byte)4);
      bigInteger0.toString();
      bigInteger0.modPow(bigInteger1, bigInteger1);
      bigInteger0.intValue();
      bigInteger0.bitLength();
      Base64.encodeInteger(bigInteger0);
      base64_0.readResults(byteArray2, (byte)6, 0);
      // Undeclared exception!
      try { 
        bigInteger0.clearBit((-1268));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Negative bit address
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte byte0 = (byte) (-1);
      Base64.isBase64((byte) (-1));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byte byte1 = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      Base64.encodeBase64(byteArray0, false, false, 3265);
      Base64 base64_0 = new Base64(true);
      base64_0.decode(">EV3vqo96wG");
      Base64.encodeBase64String(byteArray0);
      Base64.decodeBase64("!=4;=/uN");
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        bigInteger1.pow((-745));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Negative exponent
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      try { 
        base64_0.encode((Object) "zdcItn1}KX<T#OC(~");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("YLYAAA==", string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-47);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-339), byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [m\u0000\uFFFDt\uFFFD\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = base64_0.decode("");
      assertEquals(0, byteArray2.length);
      assertFalse(base64_0.isUrlSafe());
  }
}
