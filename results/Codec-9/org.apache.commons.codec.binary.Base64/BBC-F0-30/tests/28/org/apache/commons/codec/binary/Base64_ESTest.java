/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:16:17 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      int int0 = 8211;
      BigInteger bigInteger0 = new BigInteger(8211, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.min(bigInteger1);
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 8211);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      base64_0.decode(byteArray3);
      // Undeclared exception!
      Base64.encodeBase64(byteArray3, true, true);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(378L);
      mockRandom0.longs();
      MockRandom mockRandom1 = new MockRandom(4L);
      BigInteger bigInteger0 = new BigInteger(1982292598, mockRandom1);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-3624L));
      mockRandom0.nextLong();
      mockRandom0.longs();
      BigInteger bigInteger0 = new BigInteger(8176, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ONE;
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 8176);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      Base64.encodeBase64String(byteArray2);
      base64_0.decode(byteArray3);
      Base64.decodeInteger(byteArray2);
      // Undeclared exception!
      Base64.encodeBase64(byteArray0, false);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-3633L));
      mockRandom0.longs();
      BigInteger bigInteger0 = new BigInteger(8188, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(1, byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [AQAAAAIAAAADAAAABAAAAAUAAAAGAAAABwAAAAgAAAAJAAAACgAAAAsAAAAMAAAADQAAAA4AAAAPAAAAEAAAABEAAAASAAAAEwAAABQAAAAVAAAAFgAAABcAAAAYAAAAGQAAABoAAAAbAAAAHAAAAB0AAAAeAAAAHwAAACAAAAAhAAAAIgAAACMAAAAkAAAAJQAAACYAAAAnAAAAKAAAACkAAAAqAAAAKwAAACwAAAAtAAAALgAAAC8AAAAwAAAAMQAAADIAAAAzAAAANAAAADUAAAA2AAAANwAAADgAAAA5AAAAOgAAADsAAAA8AAAAPQAAAD4AAAA/AAAAQAAAAEEAAABCAAAAQwAAAEQAAABFAAAARgAAAEcAAABIAAAASQAAAEoAAABLAAAATAAAAE0AAABOAAAATwAAAFAAAABRAAAAUgAAAFMAAABUAAAAVQAAAFYAAABXAAAAWAAAAFkAAABaAAAAWwAAAFwAAABdAAAAXgAAAF8AAABgAAAAYQAAAGIAAABjAAAAZAAAAGUAAABmAAAAZwAAAGgAAABpAAAAagAAAGsAAABsAAAAbQAAAG4AAABvAAAAcAAAAHEAAAByAAAAcwAAAHQAAAB1AAAAdgAAAHcAAAB4AAAAeQAAAHoAAAB7AAAAfAAAAH0AAAB+AAAAfwAAAIAAAACBAAAAggAAAIMAAACEAAAAhQAAAIYAAACHAAAAiAAAAIkAAACKAAAAiwAAAIwAAACNAAAAjgAAAI8AAACQAAAAkQAAAJIAAACTAAAAlAAAAJUAAACWAAAAlwAAAJgAAACZAAAAmgAAAJsAAACcAAAAnQAAAJ4AAACfAAAAoAAAAKEAAACiAAAAowAAAKQAAAClAAAApgAAAKcAAACoAAAAqQAAAKoAAACrAAAArAAAAK0AAACuAAAArwAAALAAAACxAAAAsgAAALMAAAC0AAAAtQAAALYAAAC3AAAAuAAAALkAAAC6AAAAuwAAALwAAAC9AAAAvgAAAL8AAADAAAAAwQAAAMIAAADDAAAAxAAAAMUAAADGAAAAxwAAAMgAAADJAAAAygAAAMsAAADMAAAAzQAAAM4AAADPAAAA0AAAANEAAADSAAAA0wAAANQAAADVAAAA1gAAANcAAADYAAAA2QAAANoAAADbAAAA3AAAAN0AAADeAAAA3wAAAOAAAADhAAAA4gAAAOMAAADkAAAA5QAAAOYAAADnAAAA6AAAAOkAAADqAAAA6wAAAOwAAADtAAAA7gAAAO8AAADwAAAA8QAAAPIAAADzAAAA9AAAAPUAAAD2AAAA9wAAAPgAAAD5AAAA+gAAAPsAAAD8AAAA/QAAAP4AAAD/AAAA]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      mockRandom0.nextFloat();
      BigInteger bigInteger0 = new BigInteger(8211, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ONE;
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 8211);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray2);
      base64_0.encodeToString(byteArray1);
      int int0 = 1862;
      // Undeclared exception!
      Base64.encodeBase64URLSafe(byteArray1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      base64_0.encode((byte[]) null, (-449), (-449));
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, 1013, 6832);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64.isBase64((byte)0);
      base64_0.decode(byteArray1, (int) (byte)0, 64);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte) (-36);
      Base64.encodeBase64(byteArray0, true, true);
      byteArray0[4] = (byte)123;
      Base64.decodeBase64(byteArray0);
      byte[] byteArray1 = new byte[4];
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      Base64.isBase64((byte)0);
      base64_0.encode(byteArray2, 1, 1);
      base64_0.encode(byteArray0, (-27), (-836));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-3624L));
      mockRandom0.longs();
      BigInteger bigInteger0 = new BigInteger(8188, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ONE;
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 8188);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      // Undeclared exception!
      base64_0.encodeToString(byteArray3);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Base64 base64_0 = new Base64(10);
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, 45);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte) (-122);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-49);
      byteArray0[6] = (byte) (-100);
      Base64.encodeBase64(byteArray0, false, true, (int) (byte)14);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64.isBase64((byte)0);
      Base64.encodeBase64URLSafeString(byteArray1);
      base64_0.decode(byteArray1, (int) (byte)0, 3);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      base64_0.readResults(byteArray2, (byte)0, 3);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-3624L));
      mockRandom0.longs();
      mockRandom0.nextFloat();
      BigInteger bigInteger0 = new BigInteger(8188, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = BigInteger.TEN;
      Base64.isBase64(byteArray0);
      Base64.decodeBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 8188);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      Base64 base64_0 = new Base64(1872);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      // Undeclared exception!
      base64_0.encode(byteArray3);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(749L);
      mockRandom0.nextFloat();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)42;
      mockRandom0.nextBytes(byteArray0);
      BigInteger bigInteger0 = new BigInteger((byte)9, mockRandom0);
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)9;
      Base64.isBase64(byteArray1);
      Base64.decodeBase64(byteArray0);
      Base64.encodeBase64(byteArray1, true, true, (int) (byte)19);
      Base64 base64_0 = new Base64(true);
      Base64.encodeInteger(bigInteger0);
      Base64.isBase64((byte)64);
      Base64.decodeBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      MockRandom mockRandom0 = new MockRandom((-3624L));
      mockRandom0.nextFloat();
      mockRandom0.nextBytes(byteArray0);
      BigInteger bigInteger0 = new BigInteger(8188, mockRandom0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64.isBase64(byteArray1);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      Base64.encodeBase64(byteArray1, true, true, 8188);
      Random.setNextRandom(2217);
      Base64 base64_0 = new Base64(2217, byteArray0, false);
      base64_0.decode(byteArray1, 76, 123);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray2, 123, 2217);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1024
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64.discardWhitespace(byteArray0);
      Base64.isBase64((byte)2);
      base64_0.decode(byteArray1, 1, 122);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)85;
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64((byte) (-102));
      base64_0.encode(byteArray0, (int) (byte)9, (-4676));
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, (byte)0, (-964));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)123;
      Base64.encodeBase64(byteArray0, true);
      Base64.discardWhitespace(byteArray0);
      Base64.isBase64((byte)123);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)0, (int) (byte)95);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Base64.encodeBase64((byte[]) null, true);
      Base64.encodeBase64((byte[]) null, true, true);
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64((byte)87);
      Base64.encodeBase64URLSafe((byte[]) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      base64_1.hasData();
      base64_0.decode((Object) "");
      Base64.toIntegerBytes(bigInteger0);
      Base64.decodeBase64((byte[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)87;
      base64_1.readResults(byteArray0, (byte)87, 76);
      base64_1.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      MockRandom mockRandom0 = new MockRandom((-3624L));
      mockRandom0.nextFloat();
      mockRandom0.nextBytes(byteArray0);
      BigInteger bigInteger0 = new BigInteger(8188, mockRandom0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64.isBase64(byteArray1);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, true, 8188);
      Random.setNextRandom(2217);
      Base64 base64_0 = new Base64(2217, byteArray0, false);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray3, 1171, 2361);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1402
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64.discardWhitespace(byteArray1);
      Base64.isBase64((byte)0);
      base64_0.decode(byteArray1, (int) (byte)0, 3);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)24;
      byteArray0[6] = (byte) (-88);
      byteArray0[7] = (byte) (-28);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte)121, (byte)24, (byte) (-88), (byte) (-28)}, byteArray1);
      assertEquals(5, byteArray1.length);
      
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)32;
      byteArray2[1] = (byte)121;
      byteArray2[2] = (byte)70;
      byteArray2[3] = (byte) (-1);
      byteArray2[4] = (byte) (-47);
      byteArray2[5] = (byte) (-114);
      byteArray2[6] = (byte) (-71);
      byteArray2[7] = (byte)119;
      byteArray2[8] = (byte)10;
      boolean boolean0 = Base64.isBase64(byteArray2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = base64_0.decode("org.apache.commons.codec.DecoderException");
      Base64.discardWhitespace(byteArray0);
      Base64 base64_1 = new Base64(6);
      base64_1.encodeToString(byteArray0);
      Base64 base64_2 = new Base64();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)100;
      Base64.isArrayByteBase64(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)100;
      MockRandom mockRandom0 = new MockRandom(481L);
      mockRandom0.nextFloat();
      mockRandom0.nextBytes(byteArray1);
      BigInteger bigInteger0 = new BigInteger(8188, mockRandom0);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      Base64.isBase64(byteArray1);
      Base64.decodeBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Base64.decodeBase64("");
      Base64 base64_0 = new Base64(2217);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.signum();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      base64_0.decode(byteArray0, 1, 1);
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64((-1));
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.signum();
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      base64_0.decode(byteArray2, (int) (byte)2, 2073);
      Base64.isBase64(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      Base64 base64_0 = new Base64((-4384), byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)73;
      byteArray1[1] = (byte)2;
      byteArray1[2] = (byte)2;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (int) (byte)0, (int) (byte)73);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)123;
      Base64 base64_0 = new Base64((-288), byteArray0);
      int int0 = base64_0.avail();
      assertEquals(0, int0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(128, byteArray0);
      byte[] byteArray1 = base64_0.decode(") than the specified maxium size of ");
      int int0 = 47;
      int int1 = (-1612);
      Base64 base64_1 = new Base64((-1612));
      base64_0.encodeToString(byteArray1);
      Base64 base64_2 = new Base64(false);
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray2 = new byte[0];
      base64_1.decode(byteArray2, 47, (-2268));
      Object object0 = new Object();
      byte[] byteArray3 = new byte[4];
      byteArray3[0] = (byte) (-97);
      base64_1.encodeToString(byteArray0);
      // Undeclared exception!
      try { 
        base64_2.encode(byteArray1, 19, 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 21
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)105;
      byteArray1[1] = (byte)105;
      Base64.decodeInteger(byteArray1);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray2 = base64_0.decode("org.apache.commons.codec.DecoderException");
      Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64(byteArray1, false, false, 3311);
      Base64.discardWhitespace(byteArray1);
      Base64.isBase64((byte)61);
      Base64.isBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)112;
      byteArray0[2] = (byte) (-1);
      byteArray0[2] = (byte) (-68);
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64(0);
      byte[] byteArray1 = new byte[0];
      Base64.encodeBase64String(byteArray1);
      Base64 base64_1 = new Base64((-70), byteArray1, true);
      base64_1.encode(byteArray1);
      base64_1.isUrlSafe();
      base64_1.avail();
      Base64.decodeBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = new byte[0];
      Base64 base64_0 = new Base64((-237), byteArray1, true);
      base64_0.decode((Object) "org.apache.commons.codec.DecoderExc!ption");
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-67);
      Base64 base64_0 = new Base64((byte)13, byteArray0);
      Object object0 = base64_0.decode((Object) "A");
      Base64 base64_1 = new Base64();
      base64_0.encode(object0);
      Object object1 = new Object();
      base64_1.encode(object0);
      base64_1.decode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Base64.isBase64((byte) (-1));
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Object object0 = base64_0.decode((Object) "org.apache.commons.codec.DecoderExc!ption");
      Base64.isBase64(byteArray0);
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64("i9**G0wzCy#o>*");
      Base64 base64_1 = new Base64((-2048));
      base64_0.decode(object0);
      base64_1.encodeToString(byteArray1);
      base64_1.encode(byteArray0, 9, 3377);
      BigInteger bigInteger1 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(true);
      Base64.isBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 110, 110);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 110
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)122;
      Base64 base64_0 = new Base64(993);
      byte[] byteArray1 = Base64.decodeBase64("ue_2r L.#{D");
      Base64 base64_1 = new Base64((-1));
      Base64.encodeBase64(byteArray1);
      Base64 base64_2 = new Base64();
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)91;
      byteArray2[1] = (byte)122;
      byteArray2[2] = (byte)91;
      byteArray2[3] = (byte)122;
      byteArray2[4] = (byte)32;
      base64_2.encode(byteArray2);
      Base64 base64_3 = new Base64(557);
      try { 
        base64_2.encode((Object) "ue_2r L.#{D");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte byte0 = (byte) (-1);
      Base64.isBase64((byte) (-1));
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      base64_0.decode((Object) "org.apache.commons.codec.DecoderExc!ption");
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-6);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      Base64.discardWhitespace(byteArray0);
      byte[] byteArray3 = new byte[8];
      byteArray3[1] = (byte) (-1);
      byteArray3[2] = (byte) (-6);
      byteArray3[3] = (byte)0;
      byteArray3[4] = (byte)0;
      base64_0.encode(byteArray2, 67, (int) (byte)0);
      Base64.decodeInteger(byteArray1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Base64.isBase64((byte) (-1));
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      base64_0.decode((Object) "org.apache.commons.codec.DecoderExc!ption");
      Base64.isBase64("jqR_'G sf.");
      byte[] byteArray1 = new byte[0];
      Base64.encodeBase64String(byteArray1);
      Base64.isBase64((byte) (-1));
      Base64 base64_1 = new Base64(1863, byteArray1, true);
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-6);
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0, (int) (byte) (-1), (-346));
      base64_0.avail();
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      Base64.discardWhitespace(byteArray0);
      base64_0.hasData();
      base64_0.encode(byteArray2);
      base64_0.decode(byteArray2);
      Base64 base64_1 = new Base64();
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray2, 2379, 8180);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2379
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-6);
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0, (int) (byte) (-1), (-346));
      base64_0.avail();
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      Base64.discardWhitespace(byteArray0);
      byte[] byteArray3 = new byte[8];
      byteArray3[1] = (byte) (-1);
      byteArray3[2] = (byte) (-6);
      byteArray3[3] = (byte)0;
      byteArray3[4] = (byte)0;
      byteArray3[5] = (byte) (-6);
      byteArray3[6] = (byte) (-1);
      byteArray3[7] = (byte) (-1);
      Base64.encodeBase64URLSafeString(byteArray3);
      Base64.discardWhitespace(byteArray2);
      Base64.decodeInteger(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray1, (byte) (-1), 2429);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)112;
      byteArray0[2] = (byte) (-1);
      byteArray0[2] = (byte) (-68);
      Base64.isBase64(byteArray0);
      Base64.encodeBase64String(byteArray0);
      Base64.decodeBase64((String) null);
      Base64 base64_0 = new Base64((byte)112);
      base64_0.decode((Object) "cAC8");
      base64_0.encodeToString(byteArray0);
      base64_0.encode((byte[]) null, (int) (byte)112, (int) (byte) (-68));
      Base64 base64_1 = new Base64(64, (byte[]) null, true);
      Base64.encodeBase64String((byte[]) null);
      // Undeclared exception!
      try { 
        base64_1.decode((byte[]) null, 1431655765, 66);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base64.encodeBase64(byteArray0, true);
      Base64.encodeBase64((byte[]) null, true, true);
      Base64 base64_0 = new Base64(1771, byteArray0);
      Base64.encodeBase64((byte[]) null, true);
      Base64.encodeBase64((byte[]) null, false, true);
      Base64 base64_1 = new Base64();
      // Undeclared exception!
      try { 
        base64_1.encode((byte[]) null, 837, 837);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-6);
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0, (int) (byte) (-1), (-346));
      base64_0.avail();
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      Base64.discardWhitespace(byteArray0);
      byte[] byteArray3 = new byte[8];
      byteArray3[0] = (byte) (-6);
      byteArray3[1] = (byte) (-1);
      byteArray3[2] = (byte) (-6);
      byteArray3[3] = (byte)0;
      byteArray3[4] = (byte)0;
      byteArray3[5] = (byte) (-6);
      byteArray3[6] = (byte) (-1);
      byteArray3[7] = (byte) (-1);
      Base64.encodeBase64URLSafeString(byteArray3);
      Base64.discardWhitespace(byteArray2);
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)122;
      Base64 base64_0 = new Base64();
      Base64.encodeBase64Chunked(byteArray0);
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)112;
      byteArray0[2] = (byte) (-1);
      byteArray0[2] = (byte) (-68);
      Base64.isBase64(byteArray0);
      Base64.encodeBase64String(byteArray0);
      Base64.decodeBase64((String) null);
      Base64 base64_0 = new Base64((byte)112);
      base64_0.decode((Object) "cAC8");
      Base64.encodeBase64((byte[]) null, false);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base64.encodeBase64(byteArray0, true);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true);
      Base64 base64_0 = new Base64(1768, byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom((-3571L));
      mockRandom1.nextFloat();
      mockRandom0.nextBytes(byteArray0);
      BigInteger bigInteger0 = new BigInteger(816, mockRandom0);
      Base64.encodeInteger(bigInteger0);
      Base64.isArrayByteBase64(byteArray2);
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64URLSafeString(byteArray2);
      base64_0.decode("!?w*,!");
      Base64.encodeBase64(byteArray2, false);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(1519);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      Base64.decodeInteger(byteArray2);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.negate();
      Object object0 = new Object();
      bigInteger1.equals(object0);
      bigInteger1.bitCount();
      bigInteger1.and(bigInteger0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, true);
      bigInteger1.isProbablePrime(2368);
      Base64.encodeBase64(byteArray3, true, false);
      Base64.encodeBase64String(byteArray0);
      base64_0.readResults(byteArray3, 0, 0);
      base64_0.decode("org.apache.commons.codec.DecoderException");
      byte[] byteArray4 = base64_0.encode(byteArray2);
      Base64.discardWhitespace(byteArray1);
      Base64.isArrayByteBase64(byteArray4);
      Base64.encodeBase64Chunked(byteArray3);
      Base64.toIntegerBytes(bigInteger1);
      base64_0.hasData();
      base64_0.encode(byteArray0);
      Base64.encodeBase64(byteArray1, true, true);
      byte[] byteArray5 = base64_0.decode(byteArray3);
      Base64 base64_1 = new Base64();
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray5, 99, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 99
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64.encodeBase64((byte[]) null, true, true);
      Base64 base64_0 = new Base64(1771, byteArray0);
      Base64.encodeBase64((byte[]) null, true);
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom((-3571L));
      mockRandom1.nextFloat();
      mockRandom0.nextBytes(byteArray0);
      BigInteger bigInteger0 = new BigInteger(837, mockRandom0);
      Base64.encodeInteger(bigInteger0);
      Base64.isBase64(byteArray1);
      Base64.encodeInteger(bigInteger0);
      Base64.isArrayByteBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base64.encodeBase64(byteArray0, true);
      Base64.encodeBase64((byte[]) null, true, true);
      Base64 base64_0 = new Base64(1771, byteArray0);
      Base64.encodeBase64((byte[]) null, true);
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom((-3571L));
      mockRandom0.doubles((long) 1771);
      mockRandom1.nextFloat();
      mockRandom0.nextBytes(byteArray0);
      BigInteger bigInteger0 = new BigInteger(837, mockRandom0);
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      Base64 base64_0 = new Base64((-2519), byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-1);
      Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray0);
      base64_0.encode(byteArray2);
      base64_0.encode(byteArray2, (int) (byte) (-1), 1);
      base64_0.decode(byteArray2, 4586, 3999);
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte) (-39);
      byteArray0[5] = (byte) (-1);
      Base64 base64_0 = new Base64();
      base64_0.encodeToString(byteArray0);
      Base64.encodeBase64(byteArray0, true, true);
      Base64.isBase64(byteArray0);
      base64_0.hasData();
      Base64.isBase64((byte)125);
      Base64.isBase64((byte) (-69));
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[1];
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)105;
      byteArray1[1] = (byte)105;
      Base64.decodeInteger(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray0);
      byteArray0[0] = (byte)105;
      base64_0.decode(byteArray1);
      base64_0.encodeToString((byte[]) null);
      Base64.encodeBase64(byteArray1, true, false);
      Base64.isBase64(byteArray0);
      base64_0.hasData();
      Base64.isBase64((byte) (-43));
      Base64.isBase64((byte)0);
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-68);
      Base64.isBase64(byteArray0);
      Base64.encodeBase64String(byteArray0);
      Base64.decodeBase64((String) null);
      Base64 base64_0 = new Base64((byte)112);
      base64_0.decode((Object) "cP+8");
      base64_0.encode((byte[]) null, (int) (byte) (-1), 1);
      base64_0.encode((byte[]) null);
      base64_0.encodeToString(byteArray0);
      base64_0.encode((byte[]) null, (int) (byte)112, (int) (byte) (-68));
      base64_0.decode((byte[]) null, (int) (byte) (-1), (int) (byte) (-68));
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)112;
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte) (-68);
      byteArray1[3] = (byte) (-68);
      byteArray1[4] = (byte)112;
      byteArray1[5] = (byte) (-68);
      byteArray1[6] = (byte)112;
      byteArray1[7] = (byte) (-68);
      byteArray1[8] = (byte) (-68);
      int int0 = Base64.PEM_CHUNK_SIZE;
      Base64.isBase64((byte) (-1));
      Base64.encodeBase64((byte[]) null, true, false, 1202);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-68);
      Base64.isBase64(byteArray0);
      Base64.encodeBase64String(byteArray0);
      Base64.decodeBase64((String) null);
      Base64 base64_0 = new Base64((byte)112);
      base64_0.decode((Object) "cP+8");
      base64_0.encode((byte[]) null, (int) (byte) (-1), 1);
      base64_0.encodeToString(byteArray0);
      base64_0.encode((byte[]) null, (int) (byte)112, (int) (byte) (-68));
      Base64.encodeBase64String((byte[]) null);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64 base64_1 = new Base64(349);
      base64_0.isUrlSafe();
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      Base64 base64_0 = new Base64((-2859), byteArray0, true);
      Base64.isBase64("mJFZ)7[1$.VL4f6^K");
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)0, 110);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)0;
      Base64 base64_0 = new Base64((byte)0, byteArray1, true);
      byte[] byteArray2 = base64_0.decode("ISO-8859-1");
      Base64.encodeBase64(byteArray2, true);
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte) (-69);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)108, byteArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD\uFFFD}l\uFFFD\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = null;
      Base64.encodeBase64((byte[]) null, false);
      Base64.decodeInteger(byteArray0);
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)105;
      byteArray1[1] = (byte)105;
      Base64.decodeInteger(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray0);
      byteArray0[0] = (byte)105;
      base64_0.decode(byteArray1, 48, 0);
      base64_0.readResults(byteArray0, 48, (-1979));
      Base64.isBase64((byte)105);
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray1);
      bigInteger1.subtract(bigInteger0);
      Base64.encodeInteger(bigInteger1);
      Base64.encodeBase64(byteArray0, true, true, 76);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base64.encodeBase64(byteArray0, true);
      Base64.encodeBase64((byte[]) null, true, true);
      Base64 base64_0 = new Base64(1771, byteArray0);
      Base64.encodeBase64((byte[]) null, true);
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom((-3571L));
      mockRandom1.nextFloat();
      mockRandom0.nextBytes(byteArray0);
      BigInteger bigInteger0 = new BigInteger(837, mockRandom0);
      Base64.encodeInteger(bigInteger0);
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[1];
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)105;
      byteArray1[1] = (byte)105;
      Base64.decodeInteger(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray0);
      byteArray0[0] = (byte)105;
      int int0 = 48;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (-865), 994);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -865
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte) (-39);
      byteArray0[5] = (byte) (-1);
      Base64 base64_0 = new Base64((byte) (-120));
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-39);
      byteArray1[1] = (byte) (-1);
      Base64.decodeBase64(byteArray1);
      base64_0.decode(byteArray0, 123, (int) (byte) (-69));
      base64_0.readResults(byteArray0, (byte)108, (-3236));
      Base64.isBase64((byte) (-52));
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false, false, 3550);
      base64_0.encode(byteArray2, (int) (byte) (-69), 0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64.encodeBase64String(byteArray0);
      Base64.isBase64("AA==");
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte)81;
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64(0);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      base64_0.encode(byteArray1, (int) (byte)81, (-3664));
      base64_0.decode(byteArray1, 0, 257);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-94), (byte)10}, byteArray1);
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false, false, 76);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray2);
      //  // Unstable assertion: assertEquals(4, byteArray2.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)81, (byte)86, (byte)69, (byte)57, (byte)80, (byte)81, (byte)61, (byte)61}, byteArray3);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-68);
      Base64.isBase64(byteArray0);
      Base64.encodeBase64String(byteArray0);
      Base64.decodeBase64((String) null);
      Base64 base64_0 = new Base64((byte)112);
      base64_0.decode((Object) "cP+8");
      base64_0.encode((byte[]) null, (int) (byte) (-1), 1);
      base64_0.encodeToString(byteArray0);
      base64_0.encode((byte[]) null, (int) (byte)112, (int) (byte) (-68));
      base64_0.decode((byte[]) null);
      base64_0.encodeToString((byte[]) null);
      Base64.encodeBase64(byteArray0, false, false);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-77);
      byteArray0[6] = (byte) (-16);
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte)97;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-62), (byte)0, (byte)0, (byte)0, (byte) (-77), (byte) (-16), (byte) (-1), (byte)97}, byteArray1);
      assertEquals(9, byteArray1.length);
      
      Base64 base64_0 = new Base64((byte)0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(1519);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      Base64.decodeInteger(byteArray2);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.negate();
      Object object0 = new Object();
      bigInteger1.equals(object0);
      bigInteger1.bitCount();
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      bigInteger1.and(bigInteger0);
      byte[] byteArray4 = Base64.encodeBase64(byteArray0, true);
      bigInteger1.isProbablePrime(2368);
      Base64.encodeBase64(byteArray4, true, false);
      Base64.encodeBase64String(byteArray0);
      base64_0.readResults(byteArray4, 0, 0);
      int int0 = base64_0.readResults(byteArray3, 88, 88);
      assertEquals(0, int0);
      
      byte[] byteArray5 = base64_0.decode("org.apache.commons.codec.DecoderException");
      assertEquals(27, byteArray5.length);
      
      byte[] byteArray6 = base64_0.encode(byteArray2);
      byte[] byteArray7 = Base64.discardWhitespace(byteArray1);
      assertEquals(0, byteArray7.length);
      
      boolean boolean0 = Base64.isArrayByteBase64(byteArray6);
      assertTrue(boolean0);
      
      bigInteger1.not();
      Base64.encodeBase64Chunked(byteArray4);
      byte[] byteArray8 = Base64.toIntegerBytes(bigInteger1);
      assertEquals(1, byteArray8.length);
      
      base64_0.hasData();
      base64_0.encode(byteArray0);
      Base64.encodeBase64(byteArray1, true, true);
      base64_0.decode(byteArray4);
      base64_0.decode(byteArray6, 62, 0);
      assertSame(byteArray0, byteArray2);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Base64.isBase64((byte) (-1));
      Base64 base64_0 = new Base64();
      base64_0.decode((Object) "org.apache.commons.codec.DecoderException");
      boolean boolean0 = Base64.isBase64("jqR_'G sf.");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[0];
      base64_0.encode(byteArray0, 807, (int) (byte) (-1));
      int int0 = base64_0.avail();
      assertEquals(0, int0);
      
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte) (-1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      Base64.decodeInteger(byteArray1);
      Base64.discardWhitespace(byteArray1);
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      String string0 = Base64.encodeBase64URLSafeString(byteArray3);
      assertEquals("QVAvLy93PT0", string0);
      
      byte[] byteArray4 = new byte[5];
      byteArray4[0] = (byte) (-8);
      byteArray4[1] = (byte)0;
      byteArray4[2] = (byte) (-1);
      byteArray4[3] = (byte)0;
      byteArray4[4] = (byte) (-1);
      Base64.discardWhitespace(byteArray4);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray3);
      assertEquals(8, byteArray2.length);
      assertEquals((short) (-1), bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-109);
      Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.decode((String) null);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte) (-39);
      byteArray0[5] = (byte) (-1);
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("u4h9bNn/", string0);
      
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64((byte) (-69));
      base64_0.isUrlSafe();
      int int0 = base64_0.avail();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-55);
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("ANjZEXsAAMk", string0);
      
      Base64.isBase64("ANjZEXsAAMk");
      byte[] byteArray1 = new byte[0];
      Base64 base64_0 = new Base64(1099, byteArray1);
      Base64.isBase64("ANjZEXsAAMk");
      boolean boolean0 = Base64.isBase64("ANjZEXsAAMk");
      assertTrue(boolean0);
      
      Base64.encodeBase64(byteArray0, true, false, (int) (byte)123);
      String string1 = base64_0.encodeToString(byteArray1);
      assertEquals("", string1);
      
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      boolean boolean1 = Base64.isBase64(byteArray2);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Base64 base64_0 = new Base64((-709), (byte[]) null);
      String string0 = base64_0.encodeToString((byte[]) null);
      assertNull(string0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Base64.isBase64((byte)0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      boolean boolean0 = true;
      Base64.encodeBase64(byteArray1, true, false);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)87, byteArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [AAAAVwAAAA==]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[1];
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)105;
      byteArray1[1] = (byte)105;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      //  // Unstable assertion: assertEquals((short)138, bigInteger0.shortValue());
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      //  // Unstable assertion: assertEquals("AA", string0);
      
      byteArray0[0] = (byte)105;
      base64_0.decode(byteArray1, 48, 0);
      base64_0.readResults(byteArray0, 48, (-1979));
      boolean boolean0 = Base64.isBase64((byte)105);
      //  // Unstable assertion: assertTrue(boolean0);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true, true, 76);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)97, (byte)81, (byte) (-94), (byte)10}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.min(bigInteger1);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(1, byteArray0.length);
      
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-4);
      byteArray1[1] = (byte)72;
      byteArray1[2] = (byte)57;
      byteArray1[3] = (byte)50;
      byteArray1[4] = (byte) (-1);
      byteArray1[5] = (byte)100;
      byteArray1[6] = (byte)13;
      boolean boolean0 = Base64.isBase64(byteArray1);
      assertFalse(boolean0);
      
      int int0 = base64_0.readResults(byteArray1, (byte)57, (byte)72);
      assertEquals(0, int0);
      
      byte[] byteArray2 = base64_0.encode(byteArray1);
      assertEquals(12, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte) (-41);
      byteArray0[4] = (byte) (-1);
      int int0 = base64_0.readResults(byteArray0, (byte) (-1), (-1));
      assertEquals(0, int0);
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-119);
      Base64 base64_0 = new Base64((-13), byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertEquals(10, byteArray1.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)73, (byte)73, (byte)66, (byte)105, (byte)81, (byte)61, (byte)61, (byte) (-94), (byte)10}, byteArray1);
      
      byte[] byteArray2 = base64_0.decode(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      //  // Unstable assertion: assertEquals(0, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.max(bigInteger1);
      bigInteger0.signum();
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0, 0, 0);
      byte[] byteArray1 = Base64.decodeBase64("");
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-380), byteArray0, false);
      String string0 = "";
      Base64.isBase64("");
      Base64.encodeBase64(byteArray0, false, true, 312);
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      Base64.decodeBase64(byteArray2);
      byte[] byteArray3 = Base64.decodeBase64(byteArray1);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-2971), byteArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [w\uFFFD\uFFFD\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
      int int0 = 0;
      Base64 base64_0 = new Base64(0, byteArray0, false);
      base64_0.encodeToString(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      bigInteger0.equals("");
      Base64.toIntegerBytes(bigInteger0);
      base64_0.encode(byteArray1);
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      String string0 = "GCH%_f_k";
      Base64.decodeBase64("GCH%_f_k");
      int int0 = 564;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(564, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD\uFFFD\u001A\uFFFD\uFFFD!y\uFFFD&\uFFFD\uFFFD\uFFFDr\uFFFD^p7\uFFFD\uFFFD\u05EB\u0013\u0017\u001E\uFFFD\u0628]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte) (-28);
      byteArray0[6] = (byte)75;
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(84);
      base64_0.decode("");
      Base64.decodeInteger(byteArray0);
      base64_0.encodeToString(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      base64_0.encodeToString(byteArray0);
      Base64.encodeBase64(byteArray1, false);
      try { 
        base64_0.encode((Object) "/gB0KGzkSw==\u0001\u0000");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)101;
      Base64.decodeBase64((String) null);
      byteArray0[4] = (byte)0;
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false, true);
      assertEquals(10, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)53, (byte)81, (byte)65, (byte)65, (byte)90, (byte)81, (byte)65, (byte)65, (byte)65, (byte)65}, byteArray2);
      
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      base64_0.decode(byteArray0, (int) (byte)101, 0);
      byte[] byteArray3 = new byte[0];
      Base64.decodeInteger(byteArray3);
      boolean boolean0 = Base64.isArrayByteBase64(byteArray1);
      assertFalse(boolean0);
      assertEquals(7, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte)26;
      byteArray0[5] = (byte) (-116);
      byteArray0[6] = (byte) (-117);
      byteArray0[7] = (byte) (-45);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(1804, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD6Dy\u001A\uFFFD\uFFFD\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)80;
      byteArray0[6] = (byte)105;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)67;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(937, byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000\u0000\uFFFDf\u0000Pi\u0000C]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      base64_0.decode(byteArray0, (int) (byte)0, 0);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-30);
      Base64.encodeBase64URLSafe(byteArray0);
      base64_0.decode("");
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.encodeBase64((byte[]) null, true, false);
      base64_0.isUrlSafe();
      base64_0.decode("");
      base64_0.isUrlSafe();
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)83;
      Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(true);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-110);
      Base64 base64_0 = new Base64((-5359), byteArray0, false);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      assertEquals(0, byteArray1.length);
      
      base64_0.encode(byteArray0, (-1173), (int) (byte)1);
      base64_0.decode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false, false);
      base64_0.encode(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, true);
      assertEquals(10, byteArray3.length);
      
      base64_0.decode(byteArray0, 0, 3597);
      base64_0.isUrlSafe();
      base64_0.encode(byteArray2, 0, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)103, (byte)66, (byte)107, (byte)103, (byte)61, (byte)61}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Base64 base64_0 = new Base64((-557));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-1);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-114);
      byte byte0 = (byte) (-1);
      byteArray0[6] = (byte) (-1);
      byte byte1 = (byte)0;
      try { 
        base64_0.encode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)112;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 64);
      assertArrayEquals(new byte[] {(byte)110, (byte)81, (byte)65, (byte)65, (byte)99, (byte)65, (byte)65, (byte)13, (byte)10}, byteArray1);
      
      byteArray0[4] = (byte)0;
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("nQAAcAA", string0);
      
      base64_0.readResults(byteArray0, 0, 0);
      base64_0.encodeToString(byteArray0);
      boolean boolean0 = Base64.isBase64("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-57);
      byteArray0[0] = (byte) (-57);
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      Base64.encodeBase64String(byteArray0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, true, (int) (byte) (-57));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of -57
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }
}
