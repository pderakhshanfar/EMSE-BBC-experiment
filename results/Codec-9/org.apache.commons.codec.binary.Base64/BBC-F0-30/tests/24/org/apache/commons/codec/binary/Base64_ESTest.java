/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:11:53 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      BigInteger bigInteger0 = new BigInteger(7581, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = bigInteger0.max(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 7581);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      String string0 = base64_0.encodeToString(byteArray2);
      Base64.decodeBase64(string0);
      Base64.encodeInteger(bigInteger1);
      Base64.encodeBase64(byteArray3, true, true, 7581);
      // Undeclared exception!
      base64_0.encode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-65);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      int int0 = 7568;
      BigInteger bigInteger0 = new BigInteger(7568, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64URLSafeString(byteArray0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray1, 110, 110);
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, 110, 7568);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(7582, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0, 206, 7582);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)38;
      byteArray2[1] = (byte)23;
      Base64.decodeInteger(byteArray2);
      boolean boolean0 = true;
      Base64 base64_0 = new Base64((byte)23, byteArray1, true);
      Object object0 = base64_0.decode((Object) "^J!$[fQ1");
      // Undeclared exception!
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      BigInteger bigInteger0 = new BigInteger(7564, mockRandom0);
      mockRandom0.setSeed(4L);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64URLSafeString(byteArray0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger0.max(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 7564);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      base64_0.decode(byteArray0, 10, 3238);
      byte[] byteArray3 = new byte[3];
      Base64 base64_1 = new Base64(76, byteArray3);
      Base64.encodeBase64(byteArray0, true, false);
      base64_1.encodeToString(byteArray2);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger2);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      mockRandom0.longs(0L);
      BigInteger bigInteger0 = new BigInteger(7564, mockRandom0);
      mockRandom0.setSeed(4L);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      mockRandom0.nextBytes(byteArray0);
      Base64.encodeBase64(byteArray0, false, false, 7564);
      Base64.encodeBase64URLSafeString(byteArray0);
      boolean boolean0 = true;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger0.max(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 7564);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      base64_0.decode(byteArray0, 10, 3238);
      byte[] byteArray3 = new byte[7];
      Base64 base64_1 = new Base64(76, byteArray3);
      Base64.encodeBase64(byteArray0, true, false);
      // Undeclared exception!
      base64_1.encodeToString(byteArray2);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      BigInteger bigInteger0 = new BigInteger(7564, mockRandom0);
      mockRandom0.setSeed(4L);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64URLSafeString(byteArray0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger0.max(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 7564);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      base64_0.decode(byteArray0, 10, 3238);
      byte[] byteArray3 = new byte[7];
      Base64 base64_1 = new Base64(76, byteArray3);
      Base64.encodeBase64(byteArray0, true, false);
      base64_1.encodeToString(byteArray2);
      Base64.encodeBase64(byteArray3, true, true, 76);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      BigInteger bigInteger0 = new BigInteger(7564, mockRandom0);
      mockRandom0.setSeed((-5L));
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64URLSafeString(byteArray0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger0.max(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 7564);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      base64_0.decode(byteArray0, 10, 3238);
      Base64.encodeBase64String(byteArray2);
      byte[] byteArray3 = new byte[7];
      Base64 base64_1 = new Base64(76, byteArray3);
      base64_1.encodeToString(byteArray2);
      // Undeclared exception!
      Base64.encodeBase64(byteArray0, true, true, 3238);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.max(bigInteger1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte) (-32);
      byteArray0[3] = (byte) (-26);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)14;
      byteArray0[7] = (byte) (-26);
      byteArray0[8] = (byte)21;
      Base64.encodeBase64(byteArray0, true, true, (int) (byte)14);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte) (-26);
      Base64.encodeBase64String(byteArray0);
      byteArray1[2] = (byte) (-26);
      byteArray1[3] = (byte) (-26);
      byteArray1[4] = (byte) (-53);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64.isBase64(byteArray2);
      base64_0.decode(byteArray1);
      Base64.encodeBase64(byteArray2, false, true, 64);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(1908874353, mockRandom0);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      // Undeclared exception!
      Base64.encodeBase64URLSafeString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-114L));
      BigInteger bigInteger0 = new BigInteger(1381, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64(byteArray0, true, true, 1381);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      mockRandom0.longs(0L, (long) 7564);
      BigInteger bigInteger0 = new BigInteger(7564, mockRandom0);
      mockRandom0.setSeed(4L);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64URLSafeString(byteArray0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger0.max(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 7564);
      Base64 base64_0 = new Base64();
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      base64_0.decode(byteArray0, 10, 3238);
      byte[] byteArray3 = new byte[7];
      Base64 base64_1 = new Base64(76, byteArray3);
      base64_1.encodeToString(byteArray2);
      base64_0.readResults(byteArray1, 76, 24);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      MockRandom mockRandom0 = new MockRandom((-114L));
      BigInteger bigInteger0 = new BigInteger(1381, mockRandom0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false, true, 7564);
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray2, (-303), 5110);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -303
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      MockRandom mockRandom0 = new MockRandom(76);
      BigInteger bigInteger0 = new BigInteger(2842, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      mockRandom0.nextDouble();
      byte[] byteArray1 = Base64.decodeBase64("");
      Base64.isBase64(byteArray1);
      base64_0.decode(byteArray0, 9, 2842);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      MockRandom mockRandom0 = new MockRandom(76);
      mockRandom0.nextInt();
      BigInteger bigInteger0 = new BigInteger(2842, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      mockRandom0.nextDouble();
      bigInteger0.doubleValue();
      base64_0.decode(byteArray0, 0, 1332);
      Base64.encodeBase64URLSafeString(byteArray0);
      try { 
        base64_0.encode((Object) "QVFBQUFBSUFBQUFEQUFBQUJBQUFBQVVBQUFBR0FBQUFCd0FBQUFnQUFBQUpBQUFBQ2dBQUFBc0FBQUFNQUFBQURRQUFBQTRBQUFBUEFBQUFFQUFBQUJFQUFBQVNBQUFBRXdBQUFCUUFBQUFWQUFBQUZnQUFBQmNBQUFBWUFBQUFHUUFBQUJvQUFBQWJBQUFBSEFBQUFCMEFBQUFlQUFBQUh3QUFBQ0FBQUFBaEFBQUFJZ0FBQUNNQUFBQWtBQUFBSlFBQUFDWUFBQUFuQUFBQUtBQUFBQ2tBQUFBcUFBQUFLd0FBQUN3QUFBQXRBQUFBTGdBQUFDOEFBQUF3QUFBQU1RQUFBRElBQUFBekFBQUFOQUFBQURVQUFBQTJBQUFBTndBQUFEZ0FBQUE1QUFBQU9nQUFBRHNBQUFBOEFBQUFQUUFBQUQ0QUFBQS9BQUFBUUFBQUFFRUFBQUJDQUFBQVF3QUFBRVFBQUFCRkFBQUFSZ0FBQUVjQUFBQklBQUFBU1FBQUFFb0FBQUJMQUFBQVRBQUFBRTBBQUFCT0FBQUFUd0FBQUZBQUFBQlJBQUFBVWdBQUFGTUFBQUJVQUFBQVZRQUFBRllBQUFCWEFBQUFXQUFBQUZrQUFBQT0");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Base64.isBase64((byte)126);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)126;
      Base64.decodeBase64("oaF:");
      base64_0.encode(byteArray0, (int) (byte)126, (-2696));
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)126;
      Base64.decodeInteger(byteArray1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      MockRandom mockRandom0 = new MockRandom(76);
      BigInteger bigInteger0 = new BigInteger(2842, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_1 = new Base64(true);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 406, 125);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 472
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[0];
      Base64 base64_0 = new Base64((-1136), byteArray1, true);
      int int0 = 1953;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      MockRandom mockRandom0 = new MockRandom(76);
      mockRandom0.nextBoolean();
      BigInteger bigInteger0 = new BigInteger(2842, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      mockRandom0.nextDouble();
      Base64 base64_1 = new Base64();
      bigInteger0.doubleValue();
      base64_1.decode(byteArray0, 36, 2842);
      Base64.encodeBase64URLSafeString(byteArray0);
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64((byte)58, byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)5;
      byteArray1[2] = (byte)5;
      byteArray1[3] = (byte) (-1);
      byteArray1[4] = (byte)5;
      base64_0.decode(byteArray1, (int) (byte) (-1), (-1));
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      Base64.encodeInteger(bigInteger0);
      byteArray1[5] = (byte)106;
      base64_0.decode(byteArray1, (int) (byte)5, (int) (byte)106);
      Base64.encodeBase64(byteArray1, true, false, 838);
      base64_0.decode(byteArray0, 27, 1628);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte)121;
      byteArray0[6] = (byte)24;
      byteArray0[7] = (byte)121;
      base64_0.encode(byteArray0, (int) (byte)121, (-1968));
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)121;
      byteArray1[1] = (byte)121;
      byteArray1[2] = (byte)121;
      byteArray1[3] = (byte)121;
      byteArray1[4] = (byte)24;
      byteArray1[5] = (byte)121;
      byteArray1[6] = (byte)121;
      byteArray1[7] = (byte)121;
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray1, 98, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64((byte)58, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)5;
      boolean boolean0 = Base64.isBase64((byte)61);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)70;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)0;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)0, 13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Base64.encodeBase64Chunked((byte[]) null);
      Random.setNextRandom((-1272));
      Base64.isBase64((byte)85);
      Base64 base64_0 = new Base64((-3990), (byte[]) null, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)1;
      base64_0.encode(byteArray0, 4, 1);
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte)85;
      byteArray0[7] = (byte)85;
      byteArray0[8] = (byte)85;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, false, (-555));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of -555
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64.decodeBase64(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      assertEquals(0, byteArray2.length);
      
      Base64 base64_0 = new Base64();
      base64_0.decode((String) null);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64((byte[]) null, true, true, 76);
      Base64.encodeBase64Chunked(byteArray0);
      base64_0.readResults(byteArray0, 110, 1431655765);
      base64_0.encode(byteArray0, 1584, (-3500));
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.encodeBase64String((byte[]) null);
      base64_0.hasData();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.bitCount();
      bigInteger0.nextProbablePrime();
      bigInteger0.toString();
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = base64_0.decode("encodeInteger called with null parameter");
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray1);
      try { 
        base64_0.encode((Object) bigInteger1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)58;
      Base64 base64_0 = new Base64(112, byteArray0);
      Base64 base64_1 = new Base64(35, byteArray0);
      Base64 base64_2 = new Base64((byte)58, byteArray0);
      base64_2.readResults(byteArray0, 57, (byte) (-1));
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)58;
      byteArray1[1] = (byte)5;
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte)58;
      byteArray1[4] = (byte)58;
      // Undeclared exception!
      try { 
        base64_2.decode(byteArray1, 0, 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Base64.isBase64((byte)56);
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)56;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)56, byteArray1);
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Random.setNextRandom(7);
      BigInteger bigInteger1 = BigInteger.ONE;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray1);
      base64_0.readResults(byteArray0, 44, 7);
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64.decodeBase64(byteArray0);
      Base64.isArrayByteBase64(byteArray1);
      Base64 base64_0 = new Base64(true);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-2652L));
      mockRandom0.nextBoolean();
      Base64.isBase64("lineSeperator must not contain base64 characters: [");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-28);
      byteArray0[1] = (byte)123;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(8192);
      Base64.decodeInteger(byteArray1);
      Base64.decodeBase64("");
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 643, 84);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 643
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      Base64.isBase64("lineSeperator must not contain base64 characters: [");
      Random.setNextRandom(64);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger1.toString();
      bigInteger0.add(bigInteger1);
      Base64 base64_1 = new Base64();
      // Undeclared exception!
      try { 
        base64_1.decode(byteArray0, (int) (byte)0, 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte) (-40);
      byteArray0[5] = (byte) (-1);
      Base64.decodeInteger(byteArray0);
      base64_0.hasData();
      Base64 base64_1 = new Base64(true);
      // Undeclared exception!
      try { 
        base64_1.decode((byte[]) null, 58, 2727);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Base64 base64_0 = new Base64(658, (byte[]) null, true);
      base64_0.encodeToString((byte[]) null);
      Base64.encodeBase64((byte[]) null, true);
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64.encodeBase64(byteArray0, true, true, (int) (byte)7);
      Base64 base64_0 = new Base64(1, byteArray0);
      byte[] byteArray1 = new byte[4];
      Object object0 = new Object();
      Object object1 = base64_0.decode((Object) "$%08Bf>c]DuaRB");
      base64_0.decode(object1);
      base64_0.decode((Object) "$%08Bf>c]DuaRB");
      Base64.discardWhitespace(byteArray1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      Base64 base64_0 = new Base64(854, byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)0;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (int) (byte)0, 854);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-2652L));
      mockRandom0.nextBoolean();
      BigInteger bigInteger0 = new BigInteger(1270, mockRandom0);
      mockRandom0.doubles();
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64(byteArray0, true);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-85);
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, (int) (byte)0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-64);
      byteArray0[1] = (byte)0;
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64(byteArray0);
      Base64.encodeBase64(byteArray0, true);
      base64_0.decode(byteArray0, 0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      base64_0.hasData();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-54);
      base64_0.encode((byte[]) null);
      base64_0.readResults((byte[]) null, (byte) (-54), (byte) (-54));
      Base64.isBase64("lineSeperator must not contain base64 characters: [");
      Base64.encodeBase64((byte[]) null);
      byteArray0[1] = (byte) (-54);
      base64_0.encode(byteArray0, 0, (int) (byte) (-54));
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)107;
      Base64.encodeBase64(byteArray0, false, true, (int) (byte)12);
      Base64.isBase64("");
      Base64.isBase64("Y");
      Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(true);
      Base64.isBase64((byte)116);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(99, byteArray0);
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-105);
      byteArray0[0] = (byte) (-105);
      byte byte1 = (byte)99;
      byteArray0[1] = (byte)99;
      byte byte2 = (byte) (-35);
      byteArray0[2] = (byte) (-35);
      byte byte3 = (byte)0;
      byteArray0[3] = (byte)0;
      byte byte4 = (byte)107;
      byteArray0[4] = (byte)107;
      Base64.isBase64("/7Iz=.pa!c");
      String string0 = "<>yI#:tc:7xrs";
      Base64.isBase64("/7Iz=.pa!c");
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(false);
      base64_0.readResults(byteArray0, 150, (byte)99);
      Base64 base64_1 = null;
      try {
        base64_1 = new Base64(65, byteArray1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [l2PdAGsA]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      boolean boolean0 = true;
      Base64 base64_0 = new Base64();
      base64_0.hasData();
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.isBase64("t\" ^=l");
      Base64.isBase64("");
      String string0 = "Y";
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)0;
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger0);
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Base64 base64_0 = new Base64(8);
      base64_0.decode((byte[]) null);
      base64_0.avail();
      base64_0.decode((byte[]) null);
      Base64.encodeBase64((byte[]) null);
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64.decodeBase64((byte[]) null);
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)107;
      Base64.encodeBase64(byteArray0, false, true, (int) (byte)12);
      Base64.isBase64("");
      Base64.isBase64("Y");
      Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(true);
      base64_0.readResults(byteArray0, 52, (byte)99);
      byte[] byteArray1 = base64_0.decode(" Q*:6<V{I");
      Base64.encodeBase64URLSafeString(byteArray1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)31;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte) (-1);
      byteArray0[4] = (byte)120;
      byteArray0[6] = (byte)54;
      Base64.decodeBase64("");
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, (int) (byte)120);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-2652L));
      mockRandom0.nextBoolean();
      BigInteger bigInteger0 = new BigInteger(1262, mockRandom0);
      mockRandom0.doubles();
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Base64 base64_0 = new Base64(8);
      base64_0.decode((byte[]) null);
      base64_0.avail();
      base64_0.decode((byte[]) null);
      Base64.decodeBase64((byte[]) null);
      Base64.isBase64((byte)15);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)121;
      byteArray1[2] = (byte)121;
      byteArray1[3] = (byte)121;
      byteArray1[4] = (byte)121;
      Base64.decodeInteger(byteArray1);
      Base64.encodeBase64Chunked(byteArray1);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64("AVCjH7nsENI%CH");
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64 base64_1 = new Base64((-1));
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray2);
      Base64.decodeBase64(byteArray0);
      base64_0.encode(byteArray3);
      Object object0 = new Object();
      try { 
        base64_0.encode((Object) "Parameter supplied to Base64 encode is not a byte[]");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte)0;
      Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(false);
      Object object0 = base64_0.decode((Object) "oozr{1(WC.%R $T1");
      base64_0.encode(object0);
      base64_0.encode(byteArray0, (int) (byte) (-35), (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.clearBit(76);
      bigInteger0.remainder(bigInteger1);
      bigInteger2.testBit(76);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64.decodeInteger(byteArray0);
      Base64 base64_1 = null;
      try {
        base64_1 = new Base64((-1), byteArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [Q2c9PQ==]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)0;
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64("Parameter supplied to Base64 encode is not a byte[]");
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64 base64_0 = new Base64((-2504));
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.isBase64("!Y>jsG.YPG&M]");
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray3 = Base64.decodeBase64(byteArray0);
      base64_0.encode(byteArray2);
      Base64.encodeBase64(byteArray3, true, true);
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)0;
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger0);
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.isBase64((byte)0);
      Base64.encodeBase64URLSafeString(byteArray1);
      boolean boolean0 = Base64.isBase64((byte)6);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64((byte) (-28), byteArray1);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      Base64 base64_1 = new Base64((-2559), byteArray0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true);
      base64_1.encodeToString(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray3);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)107;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64.decodeBase64(byteArray1);
      Base64.isArrayByteBase64(byteArray1);
      Base64 base64_0 = new Base64((-3963));
      base64_0.isUrlSafe();
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.encodeInteger(bigInteger0);
      base64_0.avail();
      Base64.isBase64(byteArray0);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64("Kpx5Jt9ih]p$2\nE^");
      Base64 base64_0 = new Base64((byte) (-1), (byte[]) null, true);
      base64_0.decode(byteArray0, (-642), (int) (byte) (-1));
      Base64.encodeBase64(byteArray1, true, false, 1400);
      base64_0.decode(byteArray0);
      Base64.encodeBase64((byte[]) null, true, true);
      Base64 base64_1 = new Base64((byte)0, (byte[]) null);
      Base64.decodeBase64((String) null);
      base64_1.encode(byteArray1, 1717986918, (-2703));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte) (-14);
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)0;
      Base64 base64_0 = new Base64((byte)0, byteArray2);
      Base64.decodeBase64("");
      base64_0.encodeToString(byteArray1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray1);
      base64_0.isUrlSafe();
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      base64_0.hasData();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte)93;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 1, 35);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte)0;
      Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)0);
      base64_0.encode(byteArray0, (-2191), (-230));
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false, 354);
      Base64.isBase64("");
      Base64.isBase64("<>yI#:tc:7xrs");
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      Base64 base64_0 = new Base64(true);
      base64_0.readResults(byteArray2, 354, (-1618));
      base64_0.decode("");
      Base64.encodeBase64URLSafeString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte)109;
      byteArray0[6] = (byte)54;
      byteArray0[7] = (byte)112;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)99;
      byteArray1[1] = (byte)112;
      byteArray1[2] = (byte)109;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (int) (byte)112, (int) (byte)112);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 112
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)0;
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64("Parameter supplied to Base64 encode is not a byte[]");
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64 base64_0 = new Base64((-2504));
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.decodeBase64(byteArray0);
      base64_0.encode(byteArray2);
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.isUrlSafe();
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)9;
      byteArray0[0] = (byte)9;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.flipBit(76);
      // Undeclared exception!
      try { 
        bigInteger0.modInverse(bigInteger1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[5];
      Base64.isBase64("org.apache.commons.codec.binary.Base64");
      byteArray0[0] = (byte)29;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      Base64.decodeBase64(byteArray1);
      Base64.encodeBase64((byte[]) null);
      byteArray0[1] = (byte)0;
      base64_0.encode(byteArray2);
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte)0;
      Base64.encodeBase64String(byteArray0);
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.intValueExact();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.clearBit(0);
      bigInteger0.remainder(bigInteger1);
      bigInteger0.testBit(0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64.decodeInteger(byteArray1);
      Base64 base64_0 = new Base64(0, byteArray1);
      bigInteger0.doubleValue();
      Base64.encodeInteger(bigInteger0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (-1341), (-1341));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isArrayByteBase64(byteArray0);
      int int0 = 1146;
      Base64 base64_0 = new Base64(1146);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)65;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)120;
      byteArray1[4] = (byte)66;
      byteArray1[5] = (byte)1;
      byteArray1[6] = (byte) (-105);
      byteArray1[7] = (byte)99;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, false, true, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)68;
      byteArray0[0] = (byte)68;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)68, byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [D]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)102;
      base64_0.decode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-52);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte)0;
      base64_0.decode(" bP{");
      byteArray0[5] = (byte)24;
      base64_0.decode(byteArray0, 2443, (int) (byte)0);
      Base64.encodeBase64String(byteArray0);
      base64_0.decode(byteArray1, 2443, (int) (byte)37);
      byte[] byteArray2 = new byte[0];
      Base64.encodeBase64URLSafe(byteArray2);
      base64_0.hasData();
      byte[] byteArray3 = new byte[8];
      byteArray3[0] = (byte)37;
      byteArray3[1] = (byte) (-126);
      byteArray3[2] = (byte)0;
      byteArray3[3] = (byte)37;
      byteArray3[4] = (byte)0;
      byteArray3[5] = (byte)24;
      byteArray3[6] = (byte)24;
      byteArray3[7] = (byte)26;
      base64_0.readResults(byteArray3, (byte)0, (-416));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Base64.isBase64((byte) (-7));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte) (-7);
      byteArray0[6] = (byte) (-7);
      byteArray0[7] = (byte) (-7);
      byteArray0[8] = (byte) (-7);
      Base64 base64_0 = new Base64((-151), byteArray0);
      base64_0.encodeToString(byteArray0);
      Base64.decodeInteger(byteArray0);
      base64_0.decode(byteArray0, (int) (byte) (-7), 213);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-7);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)9;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte) (-7);
      Base64.encodeBase64String(byteArray1);
      base64_0.decode(byteArray0);
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte) (-7);
      byteArray2[1] = (byte) (-7);
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte) (-7);
      byteArray2[4] = (byte)9;
      byteArray2[5] = (byte)9;
      byteArray2[6] = (byte)0;
      byteArray2[7] = (byte)9;
      base64_0.encode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte) (-53);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)69;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-73);
      byteArray0[8] = (byte) (-30);
      Base64.isArrayByteBase64(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [{\u0000\uFFFD\uFFFD\u0000E\u0000\uFFFD\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      base64_0.readResults(byteArray1, (byte)0, (byte)0);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte) (-117);
      Base64.decodeInteger(byteArray0);
      Base64.encodeBase64(byteArray1, false, false);
      base64_0.encode(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.readResults(byteArray0, 46, (byte)0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = "org.apache.commons.codec.EncoderException";
      Base64.isBase64("org.apache.commons.codec.EncoderException");
      int int0 = 0;
      Base64 base64_0 = new Base64(0);
      base64_0.decode((Object) "org.apache.commons.codec.EncoderException");
      byte[] byteArray0 = null;
      base64_0.encode((byte[]) null);
      base64_0.hasData();
      base64_0.decode((byte[]) null);
      base64_0.encodeToString((byte[]) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.byteValueExact();
      BigInteger bigInteger1 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = 1262;
      MockRandom mockRandom0 = new MockRandom((-2652L));
      mockRandom0.nextBoolean();
      BigInteger bigInteger0 = new BigInteger(1262, mockRandom0);
      mockRandom0.doubles();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      int int1 = (-1659);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-1659), byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [AQAAAAIAAAADAAAABAAAAAUAAAAGAAAABwAAAAgAAAAJAAAACgAAAAsAAAAMAAAADQAAAA4AAAAPAAAAEAAAABEAAAASAAAAEwAAABQAAAAVAAAAFgAAABcAAAAYAAAAGQAAABoAAAAbAAAAHAAAAB0AAAAeAAAAHwAAACAAAAAhAAAAIgAAACMAAAAkAAAAJQAAACYAAAAnAA==]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false);
      Base64.decodeBase64(byteArray1);
      Base64.isArrayByteBase64(byteArray1);
      Base64.encodeBase64(byteArray1, false, true);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(1, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFDc\uFFFD\u0000k\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = 0;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte)0;
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(0, byteArray0, false);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.floatValue();
      bigInteger0.bitCount();
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger1.toString(2438);
      bigInteger0.andNot(bigInteger1);
      bigInteger0.abs();
      base64_0.readResults(byteArray0, (byte)0, 12);
      Base64.encodeInteger(bigInteger0);
      String string0 = "";
      Object object0 = new Object();
      Base64.decodeBase64("oyfi,0");
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)114;
      Base64.decodeBase64("encodeInteger called with null parameter");
      byteArray0[6] = (byte)123;
      base64_0.encodeToString(byteArray0);
      base64_0.hasData();
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)0;
      Base64.encodeBase64Chunked(byteArray1);
      Base64.encodeBase64(byteArray1, false, true);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)119;
      byte byte0 = (byte)55;
      byteArray0[1] = (byte)55;
      byte byte1 = (byte)43;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)0;
      byte byte2 = (byte) (-17);
      byteArray0[4] = (byte) (-17);
      byte byte3 = (byte)82;
      byteArray0[5] = (byte)82;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte) (-17), byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [w7+\u0000\uFFFDR]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64String((byte[]) null);
      int int0 = (-4242);
      Base64 base64_0 = new Base64((-4242), (byte[]) null);
      base64_0.decode((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte) (-126);
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64(byteArray0, false, false);
      Base64.isBase64((byte) (-90));
      Base64.encodeBase64((byte[]) null, false, false, (-292));
      base64_0.readResults((byte[]) null, 1207, 0);
      Base64.decodeBase64("org.apache.commons.codec.binary.Base64");
      Base64.encodeBase64URLSafeString((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)0;
      boolean boolean0 = true;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [p\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray0);
      String string0 = "Kpx5Jt9ih]p$2\\nE^";
      byte[] byteArray1 = Base64.decodeBase64("Kpx5Jt9ih]p$2\nE^");
      byte[] byteArray2 = null;
      Base64 base64_0 = new Base64((byte) (-1), (byte[]) null, true);
      base64_0.decode(byteArray0, (-642), (int) (byte) (-1));
      Base64.encodeBase64(byteArray1, true, false, 1400);
      base64_0.decode(byteArray0);
      base64_0.isUrlSafe();
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafe(byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.subtract(bigInteger1);
      bigInteger0.setBit(2756);
      BigInteger bigInteger2 = null;
      try {
        bigInteger2 = new BigInteger(byteArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      byteArray0[1] = (byte)105;
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)105;
      byteArray2[1] = (byte)105;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)105;
      byteArray2[4] = (byte)59;
      byteArray2[5] = (byte)105;
      byteArray2[6] = (byte)105;
      byteArray2[7] = (byte)0;
      Base64.encodeBase64(byteArray2);
      byteArray0[2] = (byte)0;
      base64_0.encode(byteArray0, (int) (byte)0, (int) (byte)0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64String((byte[]) null);
      Base64 base64_0 = new Base64();
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Base64 base64_0 = new Base64();
      boolean boolean0 = Base64.isBase64("lineSeperator must not contain base64 characters: [");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-20);
      byteArray0[4] = (byte)0;
      Base64.isBase64(byteArray0);
      base64_0.readResults(byteArray0, (byte)0, (byte)0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-20);
      byteArray1[2] = (byte) (-20);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)0;
      String string0 = base64_0.encodeToString(byteArray1);
      assertEquals("AOzsAAAAAA==", string0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)66;
      byteArray0[6] = (byte)7;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)3;
      byte[] byteArray3 = base64_0.decode(byteArray2);
      assertNotSame(byteArray3, byteArray1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Base64 base64_0 = new Base64(1027);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte) (-21);
      byteArray0[6] = (byte) (-85);
      base64_0.decode(byteArray0, 517, (int) (byte) (-31));
      boolean boolean0 = base64_0.hasData();
      assertFalse(boolean0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Base64.isBase64("");
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)43;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("Cv+POQArAAA=", string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      boolean boolean0 = base64_0.hasData();
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte)93;
      base64_0.encode(byteArray0, 0, (int) (byte) (-54));
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)97;
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("tP8AAABh", string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64(0, byteArray1, true);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, 0, 2848);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte)56;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(9, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD\uFFFD\u0001\uFFFD8]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)106;
      byteArray0[7] = (byte)0;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-1484), byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [&\u0000\uFFFD\u0000\uFFFD\u0000j\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte) (-14);
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)0;
      Base64 base64_0 = new Base64((byte)0, byteArray2);
      String string0 = base64_0.encodeToString(byteArray1);
      assertEquals("", string0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)10;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = new byte[1];
      base64_0.encode(byteArray1, 0, 0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61, (byte) (-28), (byte)0}, byteArray2);
      
      byteArray1[0] = (byte)102;
      byte[] byteArray3 = Base64.decodeBase64(byteArray1);
      byte[] byteArray4 = Base64.toIntegerBytes(bigInteger0);
      //  // Unstable assertion: assertEquals(0, byteArray4.length);
      
      bigInteger0.doubleValue();
      byte[] byteArray5 = base64_0.decode("$T^qY");
      base64_0.readResults(byteArray1, 0, (-1));
      base64_0.encode(byteArray5, 111, 0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)78, (byte) (-90)}, byteArray5);
      
      byte[] byteArray6 = Base64.encodeBase64(byteArray1, true, true);
      //  // Unstable assertion: assertEquals(4, byteArray6.length);
      
      Base64.encodeBase64(byteArray4, true, true, (-1));
      Base64.decodeBase64("$T^qY");
      Base64.encodeBase64Chunked(byteArray3);
      byte[] byteArray7 = new byte[6];
      byteArray7[0] = (byte)10;
      byteArray7[1] = (byte)10;
      byteArray7[2] = (byte)102;
      byteArray7[3] = (byte)102;
      byteArray7[4] = (byte)10;
      byteArray7[5] = (byte)102;
      Base64.encodeBase64(byteArray7, false, false);
      base64_0.decode((Object) "3PDY5B<)Pq^g");
      byte[] byteArray8 = Base64.encodeBase64(byteArray7, false);
      //  // Unstable assertion: assertEquals(8, byteArray8.length);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte) (-68);
      byteArray0[5] = (byte)35;
      byteArray0[6] = (byte)33;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      assertEquals(14, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64((byte) (-28), byteArray1);
      String string0 = "<4H\"!";
      try { 
        base64_0.encode((Object) "<4H\"!");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }
}
