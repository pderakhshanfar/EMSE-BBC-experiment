/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:07:01 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)86;
      byteArray0[2] = (byte)86;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(2355);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64((byte)86);
      // Undeclared exception!
      Base64.encodeBase64(byteArray1, false);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)86;
      byteArray0[2] = (byte)86;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(2355);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64((byte)86);
      // Undeclared exception!
      Base64.discardWhitespace(byteArray1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)86;
      byteArray0[2] = (byte)86;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(2355);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64((byte)86);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      Base64 base64_1 = new Base64((byte)0);
      Base64.encodeBase64(byteArray2, true, true, (int) (byte)86);
      bigInteger1.xor(bigInteger0);
      // Undeclared exception!
      base64_1.decode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.pow(4120);
      BigInteger bigInteger2 = bigInteger0.max(bigInteger1);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(17);
      bigInteger1.add(bigInteger2);
      base64_0.encode(byteArray0, 17, 1737);
      base64_0.encode(byteArray0, 17, 17);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 1, 4120);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2284
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)86;
      byteArray0[2] = (byte)86;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(2355);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64((byte)86);
      // Undeclared exception!
      Base64.encodeBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)86;
      byteArray0[2] = (byte)86;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(2355);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64((byte)86);
      // Undeclared exception!
      Base64.encodeBase64(byteArray1, true, true);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte)86;
      byteArray0[2] = (byte)69;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(2355);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)86;
      byteArray0[2] = (byte)69;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(2355);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64((byte)86);
      // Undeclared exception!
      Base64.encodeBase64URLSafeString(byteArray1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0, 1, 1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 64);
      base64_0.encode(byteArray0, 1, 1);
      base64_0.encode(byteArray0, 1, (-2344));
      Base64.discardWhitespace(byteArray1);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)69;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(2355);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      Base64.isBase64(byteArray1);
      // Undeclared exception!
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)69;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(2355);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      // Undeclared exception!
      Base64.encodeBase64URLSafe(byteArray1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)69;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(2355);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      BigInteger.valueOf((-1L));
      Base64 base64_0 = new Base64((byte)3);
      // Undeclared exception!
      Base64.encodeBase64Chunked(byteArray1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.signum();
      BigInteger bigInteger1 = bigInteger0.pow(4120);
      Base64.encodeInteger(bigInteger1);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger1);
      Base64 base64_0 = new Base64(1);
      base64_0.decode(byteArray0, 1, 4120);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray0, 1, 1);
      base64_0.readResults(byteArray0, 1, 1);
      Base64.encodeBase64((byte[]) null, false, false, 79);
      base64_0.encode(byteArray0, 1, 1);
      base64_0.encode(byteArray0, 1, (-2381));
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, 468, 27);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray0, 1, 1);
      Base64.encodeBase64((byte[]) null, false, false, 79);
      base64_0.encode(byteArray0, 1, 1);
      base64_0.encode(byteArray0, 1, (-2381));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = bigInteger0.toByteArray();
      BigInteger bigInteger1 = bigInteger0.pow(4062);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger2 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(19);
      base64_0.decode(byteArray1, 19, 4062);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.equals(bigInteger0);
      bigInteger0.signum();
      bigInteger0.pow(0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger1);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(1);
      base64_0.decode(byteArray1, 0, 37);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.equals("eR7*U\tJ3_:");
      BigInteger bigInteger1 = bigInteger0.pow(95);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (78) than the specified maxium size of 10
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = (-2698);
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-2698), byteArray0, false);
      String string0 = "QiLYD>8rLX';j+2`cH";
      Object object0 = base64_0.decode((Object) "QiLYD>8rLX';j+2`cH");
      // Undeclared exception!
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = bigInteger0.toByteArray();
      BigInteger bigInteger1 = bigInteger0.pow(4062);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true, 4062);
      Base64 base64_0 = new Base64(198, byteArray0);
      base64_0.encode(byteArray2);
      // Undeclared exception!
      base64_0.encode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)79;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.equals("");
      bigInteger0.signum();
      BigInteger bigInteger1 = bigInteger0.pow(4062);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)95;
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-3);
      Base64.decodeInteger(byteArray0);
      Base64.encodeBase64(byteArray0, true, true, 10);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray0, 1, 1);
      Base64.isBase64((byte)61);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("org.a;ache.common.codec.binary.Bas64");
      Base64 base64_0 = new Base64(11);
      base64_0.encode(byteArray0, 1, 11);
      base64_0.decode(byteArray0, 11, 1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.equals((Object) null);
      bigInteger0.signum();
      BigInteger bigInteger1 = bigInteger0.pow(4062);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true, true, 4062);
      Base64.discardWhitespace(byteArray2);
      Base64.discardWhitespace(byteArray2);
      Base64 base64_0 = new Base64(4062);
      base64_0.decode(byteArray1, 1, 1324);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64(8177, byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)43;
      byteArray1[2] = (byte)43;
      byteArray1[3] = (byte)43;
      byteArray1[4] = (byte)1;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)66;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, 1, 66);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray0, 1, 1);
      base64_0.encode(byteArray0, 1, (-2371));
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      base64_0.readResults(byteArray1, 1, 1);
      try { 
        base64_0.encode((Object) "D&uv*Ug!BEE8v+bJ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)9;
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0, 1, (-118));
      base64_0.encode(byteArray0, 3292, (int) (byte)9);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)9;
      byteArray1[1] = (byte)9;
      byteArray1[2] = (byte)9;
      Base64.discardWhitespace(byteArray1);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte) (-71);
      byteArray0[6] = (byte)68;
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, 2363, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("org.apache.common.codec.binary.Bas64");
      Base64.isBase64((byte)36);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.toString((int) (byte)36);
      Base64 base64_0 = new Base64(5);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      Base64.encodeBase64(byteArray2);
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Base64.isBase64((byte)2);
      byte[] byteArray0 = new byte[10];
      byteArray0[1] = (byte)2;
      Base64 base64_0 = new Base64(0, byteArray0);
      Base64.encodeBase64(byteArray0);
      base64_0.decode(byteArray0, 0, (int) (byte)2);
      base64_0.isUrlSafe();
      Base64.decodeBase64("");
      base64_0.avail();
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0, 1, 1);
      base64_0.encode(byteArray0, 1, (-2371));
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray2 = new byte[5];
      byteArray2[1] = (byte) (-8);
      byteArray2[2] = (byte) (-77);
      byteArray2[3] = (byte)3;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray2, true, true, 7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of 7
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Base64.isBase64((byte)60);
      byte[] byteArray0 = Base64.decodeBase64("org.apache.common.codec.binary.Bas64");
      Base64.isBase64((byte)60);
      Base64 base64_0 = new Base64(false);
      base64_0.decode(byteArray0, 9, 9);
      base64_0.isUrlSafe();
      Base64.decodeBase64("");
      base64_0.avail();
      Base64.isBase64(byteArray0);
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte) (-50);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)125;
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray0, 1, 1);
      base64_0.encode(byteArray0, 1, (-2371));
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-8);
      byteArray1[1] = (byte)32;
      byteArray1[2] = (byte) (-77);
      byteArray1[3] = (byte)3;
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.pow(52);
      BigInteger bigInteger1 = BigInteger.TEN;
      Base64.discardWhitespace(byteArray1);
      Base64.isBase64((byte) (-77));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray0, 1, 1);
      base64_0.encode(byteArray0, 1, (-2371));
      byte[] byteArray1 = new byte[10];
      byteArray1[0] = (byte) (-8);
      byteArray1[1] = (byte)32;
      byteArray1[2] = (byte) (-77);
      byteArray1[3] = (byte)3;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true, 82);
      Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_1 = new Base64(false);
      base64_1.isUrlSafe();
      byte[] byteArray3 = Base64.decodeBase64("");
      Base64.encodeBase64URLSafe(byteArray3);
      Base64.encodeBase64Chunked(byteArray3);
      base64_0.avail();
      Base64.isBase64(byteArray2);
      Object object0 = new Object();
      try { 
        base64_1.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Base64.isBase64((byte)60);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(0, byteArray1);
      Base64.decodeBase64("org.apache.commons.codec.binary.Base64");
      Base64.decodeBase64(byteArray1);
      Base64.isBase64("");
      Base64.isBase64("");
      Base64.isBase64((byte)123);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Base64.isBase64((byte)2);
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byte[] byteArray1 = Base64.decodeBase64("US-ASCII");
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)2;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (int) (byte)2, 3729);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray0, 1, 1);
      base64_0.encode(byteArray0, 1, (-2371));
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-8);
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte) (-77);
      byteArray1[3] = (byte)3;
      byteArray1[4] = (byte)19;
      Base64.encodeBase64(byteArray1);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.gcd(bigInteger0);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger1);
      base64_0.encode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.decodeBase64("{");
      base64_0.encode(byteArray1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.isBase64((byte) (-100));
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray0);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.pow((byte)0);
      BigInteger bigInteger2 = BigInteger.TEN;
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      Base64.isBase64((byte)121);
      Base64.isBase64("{");
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray3, true, true, (-593));
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of -593
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte byte0 = (byte) (-2);
      Base64.isBase64((byte) (-2));
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64(3396, (byte[]) null);
      base64_0.encodeToString((byte[]) null);
      int int0 = (-2593);
      base64_0.decode((byte[]) null, (-2593), (int) (byte) (-2));
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0, (-1501), (-1));
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      String string0 = Base64.encodeBase64String(byteArray0);
      //  // Unstable assertion: assertEquals("AAAAAAA=", string0);
      
      Base64.encodeBase64(byteArray0, true, false, 64);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61, (byte)5, (byte)0}, byteArray2);
      
      base64_0.isUrlSafe();
      byte[] byteArray3 = Base64.decodeBase64("AAAAAAA=");
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray3);
      //  // Unstable assertion: assertEquals(5, byteArray3.length);
      
      base64_0.avail();
      boolean boolean0 = Base64.isBase64(byteArray1);
      //  // Unstable assertion: assertTrue(boolean0);
      
      Object object0 = base64_0.decode((Object) "AAAAAAA=");
      Object object1 = base64_0.encode(object0);
      base64_0.encode(object1);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.encodeBase64((byte[]) null);
      int int0 = 1431655765;
      Base64 base64_0 = new Base64(1431655765);
      String string0 = null;
      base64_0.decode((String) null);
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 1141, 1431655765);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.byteValueExact();
      bigInteger0.toString();
      bigInteger0.longValueExact();
      BigInteger.valueOf(0L);
      Object object0 = new Object();
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64(false);
      Object object1 = base64_1.decode((Object) "1");
      Object object2 = base64_0.decode(object1);
      Object object3 = base64_0.decode(object2);
      assertSame(object3, object2);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte)1;
      base64_1.decode(byteArray0, (-244), 2243);
      int int0 = base64_1.readResults(byteArray0, 144, (byte)1);
      assertFalse(base64_1.isUrlSafe());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      base64_0.encode(byteArray1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      boolean boolean0 = Base64.isBase64((byte) (-100));
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray0);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.pow((byte)0);
      BigInteger bigInteger2 = BigInteger.TEN;
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      Base64.discardWhitespace(byteArray2);
      boolean boolean1 = Base64.isBase64((byte)34);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64 base64_0 = new Base64((-2479), byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = base64_0.decode("");
      base64_0.decode(byteArray2, (int) (byte) (-70), (-2492));
      base64_0.decode("");
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, true, true, 58);
      assertEquals(13, byteArray3.length);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61}, byteArray1);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      boolean boolean0 = Base64.isBase64("mTKOvuA+6sR");
      assertFalse(boolean0);
      
      boolean boolean1 = base64_0.hasData();
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.isUrlSafe();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)55;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.pow(49);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray2);
      
      Base64.isBase64((byte)55);
      Base64.isBase64((byte) (-1));
      BigInteger bigInteger2 = Base64.decodeInteger(byteArray1);
      assertEquals((short)1, bigInteger2.shortValue());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Base64.isBase64((byte)50);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte)50;
      byteArray0[6] = (byte)50;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 1, 9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64 base64_0 = new Base64((-2479), byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = base64_0.decode("");
      base64_0.decode(byteArray2, (int) (byte) (-70), (-2492));
      base64_0.decode("");
      Base64.encodeBase64(byteArray1, true, true, 58);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.pow(4062);
      byte[] byteArray3 = Base64.encodeInteger(bigInteger1);
      Base64.discardWhitespace(byteArray3);
      Base64.isBase64((byte) (-1));
      boolean boolean0 = Base64.isBase64((byte) (-1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-50);
      byte[] byteArray1 = Base64.decodeBase64("");
      Base64 base64_0 = new Base64((-1570), byteArray1);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      Base64.decodeBase64("1v \"");
      base64_0.readResults(byteArray2, (byte)0, (-177));
      Object object0 = new Object();
      Base64.encodeBase64String(byteArray2);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0, 52, (int) (byte) (-70));
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray1, 52, 35);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[10];
      byte[] byteArray1 = new byte[10];
      Base64.encodeBase64String(byteArray1);
      base64_0.encode(byteArray0, (int) (byte) (-61), (int) (byte) (-61));
      byteArray0[0] = (byte) (-61);
      base64_0.encode(byteArray0);
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-70);
      Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 52, 52);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 52
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64 base64_0 = new Base64((-2479), byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = base64_0.decode("");
      base64_0.decode(byteArray2, (int) (byte) (-70), (-2492));
      base64_0.decode("");
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, true, true, 58);
      Base64.encodeBase64Chunked(byteArray2);
      base64_0.isUrlSafe();
      Base64.decodeBase64("");
      base64_0.avail();
      Base64.isBase64(byteArray3);
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Base64.encodeBase64Chunked((byte[]) null);
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = base64_0.decode(",msu;i5P,");
      base64_0.decode((byte[]) null, (-185), (-185));
      Base64 base64_1 = new Base64((-185), byteArray0, true);
      base64_0.decode("!'98^}ET-L/;NH u");
      Base64.encodeBase64((byte[]) null, true, false, 76);
      Base64 base64_2 = new Base64();
      base64_2.isUrlSafe();
      Base64.decodeBase64(",msu;i5P,");
      byte[] byteArray1 = Base64.encodeBase64URLSafe((byte[]) null);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Base64.isBase64((byte)2);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.isProbablePrime(834);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(3491, byteArray1, true);
      base64_0.isUrlSafe();
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      Base64.isArrayByteBase64(byteArray2);
      String string0 = base64_0.encodeToString(byteArray1);
      assertEquals("AAAAAAAA\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      
      Base64 base64_1 = new Base64();
      base64_0.isUrlSafe();
      byte[] byteArray3 = Base64.decodeBase64("US-ASCII");
      assertArrayEquals(new byte[] {(byte)81, (byte)47, (byte) (-128), (byte)72, (byte)34, (byte)8}, byteArray3);
      assertEquals(6, byteArray3.length);
      
      byte[] byteArray4 = Base64.encodeBase64URLSafe(byteArray1);
      assertEquals(8, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Base64.isBase64((byte)2);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      Base64 base64_0 = new Base64(0, byteArray0);
      byte[] byteArray1 = new byte[20];
      byteArray1[0] = (byte)2;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      byte[] byteArray3 = base64_0.decode("");
      base64_0.decode(byteArray0, 0, (int) (byte)2);
      boolean boolean0 = Base64.isBase64("");
      Base64 base64_1 = new Base64(0, byteArray3, true);
      String string0 = Base64.encodeBase64String(byteArray1);
      assertEquals("AgAAAAAAAAAAAAAAAAAAAAAAAAA=", string0);
      
      base64_1.decode((String) null);
      boolean boolean1 = base64_1.isUrlSafe();
      assertTrue(boolean1 == boolean0);
      
      String string1 = Base64.encodeBase64URLSafeString(byteArray2);
      assertEquals("QWdBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBPQ", string1);
      
      Base64.decodeBase64((String) null);
      base64_1.avail();
      boolean boolean2 = Base64.isBase64(byteArray3);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Base64.isBase64((byte)0);
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      base64_0.encode(byteArray2, (-2069), (int) (byte)0);
      Base64.encodeBase64(byteArray0);
      Base64.encodeBase64String(byteArray2);
      Base64.isBase64(byteArray1);
      Base64.isBase64("");
      Base64 base64_1 = new Base64((-2069));
      base64_0.encodeToString(byteArray2);
      base64_1.decode(byteArray1);
      String string0 = Base64.encodeBase64String((byte[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte)113;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-13);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)77;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)113;
      byteArray1[5] = (byte) (-10);
      byteArray1[6] = (byte) (-10);
      byteArray1[7] = (byte)0;
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      assertArrayEquals(new byte[] {(byte)50}, byteArray2);
      assertEquals(1, byteArray2.length);
      
      boolean boolean0 = Base64.isBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(3100, byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 512);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true, true);
      byte[] byteArray3 = base64_0.decode("6<eZlL?-SYup[-t0{WF");
      byte[] byteArray4 = Base64.encodeBase64(byteArray0);
      base64_0.readResults(byteArray1, 848, 89);
      byte[] byteArray5 = base64_0.decode("&Y>.vEAWDw");
      assertArrayEquals(new byte[] {(byte)98, (byte) (-15), (byte)0, (byte)88, (byte)60}, byteArray5);
      
      base64_0.encode(byteArray2, 3100, 1473);
      byte[] byteArray6 = Base64.encodeBase64(byteArray3);
      assertEquals(16, byteArray6.length);
      
      byte[] byteArray7 = new byte[0];
      byte[] byteArray8 = Base64.encodeBase64URLSafe(byteArray7);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray9 = Base64.encodeInteger(bigInteger0);
      assertEquals(0, byteArray9.length);
      
      Base64.encodeBase64(byteArray4, true, false, 3100);
      Base64.isBase64("6<eZlL?-SYup[-t0{WF");
      boolean boolean0 = base64_0.hasData();
      Base64 base64_1 = new Base64(64);
      boolean boolean1 = base64_1.hasData();
      assertFalse(boolean1);
      
      Base64 base64_2 = new Base64(3100, byteArray8);
      base64_2.encode((byte[]) null);
      base64_0.decode("6<eZlL?-SYup[-t0{WF");
      boolean boolean2 = Base64.isBase64("*oe\"* 4MDPB");
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(3856, byteArray0, true);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Base64.encodeBase64Chunked((byte[]) null);
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("", string0);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      byte[] byteArray3 = Base64.decodeBase64("g!A%Ija'XvC&");
      assertArrayEquals(new byte[] {(byte) (-128), (byte)2, (byte)35, (byte)105, (byte)123, (byte) (-62)}, byteArray3);
      
      byte[] byteArray4 = Base64.decodeBase64(byteArray0);
      boolean boolean0 = Base64.isBase64(") than the specified maxium size of ");
      assertFalse(boolean0);
      
      Base64.isBase64((byte)1);
      Base64.isBase64((byte)93);
      byte[] byteArray5 = new byte[2];
      byteArray5[0] = (byte)93;
      byteArray5[1] = (byte)1;
      byte[] byteArray6 = Base64.encodeBase64URLSafe(byteArray5);
      assertEquals(3, byteArray6.length);
      
      Base64.encodeBase64Chunked(byteArray2);
      base64_0.avail();
      assertSame(byteArray0, byteArray4);
      assertSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(3100, byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 512);
      Base64.encodeBase64(byteArray0, true, true);
      Base64.isBase64(byteArray0);
      Base64.encodeBase64String(byteArray0);
      boolean boolean0 = Base64.isBase64("6<eZlL?-SYup[-t0{WF");
      assertFalse(boolean0);
      
      Base64 base64_1 = new Base64((byte) (-66));
      String string0 = base64_1.encodeToString(byteArray0);
      byte[] byteArray2 = base64_0.decode(byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertSame(byteArray2, byteArray1);
      
      String string1 = Base64.encodeBase64String(byteArray0);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray0, 52, (int) (byte) (-70));
      base64_0.encode(byteArray1, (-1501), (-1));
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      Base64.encodeBase64String(byteArray0);
      boolean boolean0 = Base64.isBase64(byteArray2);
      assertTrue(boolean0);
      
      Base64.isBase64("AAAAAAA=");
      Base64 base64_1 = new Base64((byte) (-70));
      Base64 base64_2 = new Base64(86, (byte[]) null);
      String string0 = base64_2.encodeToString((byte[]) null);
      assertNull(string0);
      
      byte[] byteArray3 = base64_2.decode((byte[]) null);
      assertNull(byteArray3);
      
      String string1 = Base64.encodeBase64String(byteArray0);
      assertEquals("AAAAAAA=", string1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-87);
      Base64 base64_1 = new Base64((byte) (-87), byteArray0);
      String string0 = "";
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      String string1 = "]UsJQoN>o1|L%5\"";
      byte[] byteArray2 = base64_1.decode("]UsJQoN>o1|L%5\"");
      base64_1.decode(byteArray1, 11, 755);
      Base64 base64_2 = null;
      try {
        base64_2 = new Base64((-553), byteArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [R\uFFFDP\uFFFD\uFFFD5/]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)0);
      assertFalse(boolean0);
      
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      base64_0.readResults(byteArray0, (byte)0, (-2069));
      byte[] byteArray2 = base64_0.encode(byteArray0);
      boolean boolean1 = base64_0.isUrlSafe();
      assertFalse(boolean1);
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray0);
      base64_0.readResults(byteArray1, (-2069), 1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger.valueOf((-2991L));
      bigInteger0.intValueExact();
      bigInteger0.intValue();
      bigInteger0.longValueExact();
      bigInteger0.setBit(0);
      byte[] byteArray4 = Base64.encodeBase64URLSafe(byteArray3);
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64(byteArray0, false, false, 0);
      byte[] byteArray5 = Base64.encodeInteger(bigInteger0);
      base64_0.decode(byteArray0, 47, 0);
      Base64.decodeBase64(byteArray4);
      String string0 = Base64.encodeBase64URLSafeString(byteArray5);
      assertEquals("", string0);
      
      int int0 = base64_0.readResults(byteArray1, 87, 0);
      assertEquals(0, int0);
      
      byte[] byteArray6 = base64_0.encode(byteArray1);
      assertSame(byteArray6, byteArray2);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)5;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64((byte)5);
      byte[] byteArray2 = new byte[5];
      Base64 base64_1 = new Base64((byte)0, byteArray1, false);
      base64_1.isUrlSafe();
      Base64.encodeBase64(byteArray0, false);
      byte[] byteArray3 = new byte[2];
      byteArray3[0] = (byte)5;
      byteArray3[1] = (byte)0;
      base64_0.encodeToString(byteArray2);
      Base64 base64_2 = new Base64();
      try { 
        base64_2.encode((Object) base64_1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte)24;
      Base64.isBase64((byte) (-4));
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64.encodeBase64URLSafeString(byteArray0);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, true, true, (int) (byte) (-4));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of -4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-127);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64((byte) (-127));
      byte[] byteArray2 = new byte[5];
      Base64.encodeBase64URLSafe((byte[]) null);
      byteArray2[0] = (byte)30;
      byteArray2[1] = (byte) (-1);
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte) (-127);
      base64_0.encodeToString(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      Base64.encodeBase64String(byteArray0);
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      base64_0.encode(byteArray1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.isProbablePrime((byte)0);
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_1 = new Base64(0, byteArray2, true);
      base64_0.isUrlSafe();
      Base64.encodeBase64(byteArray2, true);
      Base64.isArrayByteBase64(byteArray2);
      base64_0.encodeToString(byteArray1);
      Base64 base64_2 = new Base64();
      Base64 base64_3 = new Base64(76, byteArray0, false);
      try { 
        base64_3.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(3856, byteArray0, true);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      Base64.decodeBase64("g!A%Ija'XvC&");
      byte[] byteArray3 = new byte[8];
      byteArray3[0] = (byte) (-121);
      byteArray3[1] = (byte) (-94);
      byteArray3[2] = (byte) (-25);
      byteArray3[3] = (byte)98;
      byteArray3[4] = (byte) (-24);
      byteArray3[5] = (byte)0;
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      byteArray3[6] = (byte)102;
      byteArray3[7] = (byte)2;
      base64_0.readResults(byteArray3, (byte)102, 118);
      Base64.isBase64("g!A%Ija'XvC&");
      Base64.encodeBase64((byte[]) null, false);
      Base64.discardWhitespace(byteArray2);
      Base64.isArrayByteBase64(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray2);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-87);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byteArray0[2] = (byte)3;
      base64_0.encode(byteArray0, (int) (byte)0, (int) (byte)0);
      base64_0.encode(byteArray1, (int) (byte) (-87), (-2657));
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte)36;
      Base64.encodeBase64String(byteArray0);
      Base64.isBase64(byteArray1);
      Base64.isBase64("");
      Base64 base64_1 = new Base64(64);
      base64_0.encodeToString(byteArray1);
      base64_0.decode(byteArray1);
      Base64.encodeBase64String(byteArray2);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-127);
      Base64 base64_0 = new Base64((byte) (-127));
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)30;
      Base64.encodeBase64((byte[]) null, false, false);
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-127);
      base64_0.decode((String) null);
      byteArray1[4] = (byte)5;
      base64_0.decode(byteArray1, (int) (byte)0, (int) (byte) (-127));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Base64.encodeBase64Chunked((byte[]) null);
      base64_0.isUrlSafe();
      Base64.encodeBase64((byte[]) null, true);
      Base64.isArrayByteBase64(byteArray1);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64 base64_1 = new Base64();
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Base64.isBase64((byte)2);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)1;
      Base64 base64_0 = new Base64((byte)0, byteArray0, true);
      base64_0.isUrlSafe();
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64.isArrayByteBase64(byteArray1);
      base64_0.encodeToString(byteArray1);
      Base64 base64_1 = new Base64();
      try { 
        base64_1.encode((Object) base64_0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64 base64_0 = new Base64((-2479), byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = base64_0.decode("");
      base64_0.decode(byteArray2, (int) (byte) (-70), (-2492));
      base64_0.decode("");
      Base64.encodeBase64(byteArray1, true, true, 58);
      base64_0.isUrlSafe();
      Base64.decodeBase64("");
      Base64.encodeBase64URLSafe(byteArray0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Base64.isBase64((byte)0);
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      base64_0.readResults(byteArray0, (byte)0, (-2069));
      base64_0.encode(byteArray0);
      base64_0.isUrlSafe();
      Base64.encodeBase64(byteArray0);
      base64_0.readResults(byteArray1, (-2069), 1);
      Base64.encodeBase64URLSafeString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.encodeBase64(byteArray0, true, true, (int) (byte)64);
      Base64 base64_0 = new Base64(true);
      base64_0.avail();
      try { 
        base64_0.encode((Object) "RGljQUFBPT0NCg");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(3100, byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 512);
      Base64.encodeBase64(byteArray0, true, true);
      Base64 base64_1 = new Base64(2505, byteArray1, false);
      base64_0.isUrlSafe();
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)25;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)52;
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true);
      Base64.isArrayByteBase64(byteArray1);
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      Base64 base64_0 = new Base64(1, byteArray0, false);
      base64_0.encodeToString(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.encodeBase64(byteArray0, false);
      base64_0.decode((Object) "");
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray3 = new byte[8];
      byteArray3[0] = (byte) (-1);
      byteArray3[1] = (byte) (-1);
      byteArray3[2] = (byte) (-1);
      byteArray3[3] = (byte) (-1);
      byteArray3[4] = (byte) (-1);
      byteArray3[5] = (byte) (-83);
      byteArray3[6] = (byte) (-1);
      base64_0.decode("");
      byteArray3[7] = (byte)0;
      byte[] byteArray4 = Base64.encodeBase64(byteArray3, false, false);
      Base64.decodeInteger(byteArray1);
      Base64.encodeBase64Chunked(byteArray2);
      base64_0.decode(byteArray4);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte byte0 = (byte)119;
      Base64.isBase64((byte)119);
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-127);
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64((byte) (-127));
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)30;
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-127);
      byteArray1[4] = (byte)5;
      base64_0.decode(byteArray1, 6, (int) (byte) (-127));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Base64.isBase64((byte)0);
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      base64_0.readResults(byteArray0, (byte)0, (-2069));
      base64_0.encode(byteArray0);
      base64_0.isUrlSafe();
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      base64_0.readResults(byteArray1, (-2069), 1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger.valueOf((-2991L));
      bigInteger0.intValueExact();
      bigInteger0.intValue();
      bigInteger0.setBit(0);
      Base64.encodeBase64URLSafe(byteArray2);
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64(byteArray0, false, false, 0);
      Base64.isBase64("org.apache.commons.codec.binary.Base64");
      base64_0.hasData();
      base64_0.hasData();
      base64_0.encode(byteArray2);
      base64_0.decode("*oe\"* 4MDPB");
      Base64.isBase64("");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.byteValueExact();
      bigInteger0.toString();
      bigInteger0.longValueExact();
      BigInteger.valueOf(0L);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = base64_0.decode(byteArray0);
      base64_0.encode(byteArray0, (int) (byte)1, (int) (byte)1);
      Base64.isArrayByteBase64(byteArray0);
      Base64.encodeBase64(byteArray1, true, false);
      Base64.isBase64("");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)46;
      byte byte0 = (byte) (-99);
      byteArray0[2] = (byte) (-99);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(false);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (-3185), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3185
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)60;
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64(true);
      base64_0.encodeToString(byteArray0);
      base64_0.isUrlSafe();
      try { 
        base64_0.encode((Object) "AE4LPA==");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      Base64.encodeBase64String(byteArray0);
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      String string0 = null;
      base64_0.encode(byteArray1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.isProbablePrime((byte)0);
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64(byteArray1, false, true);
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Base64.isBase64((byte)2);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)2;
      byteArray0[8] = (byte)2;
      Base64 base64_0 = new Base64((byte)2, byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      base64_0.decode("");
      base64_0.decode(byteArray0, 0, (int) (byte)2);
      base64_0.decode("org.apache.commons.codec.DecoderException");
      Base64.encodeBase64(byteArray0, false, false, 2540);
      base64_0.isUrlSafe();
      Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      Base64.encodeBase64URLSafe(byteArray1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.longValue();
      bigInteger0.byteValueExact();
      bigInteger0.toString(477);
      BigInteger bigInteger1 = bigInteger0.negate();
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      BigInteger bigInteger2 = BigInteger.TEN;
      bigInteger0.divide(bigInteger2);
      bigInteger0.min(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64.encodeBase64(byteArray1, false);
      Base64 base64_0 = new Base64((-8), byteArray0);
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)1;
      byteArray2[1] = (byte)1;
      byteArray2[2] = (byte)1;
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger2);
      byteArray2[3] = (byte)1;
      base64_0.encodeToString(byteArray2);
      Base64.encodeBase64(byteArray2, false, true);
      Base64.decodeInteger(byteArray3);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)95;
      byte byte0 = (byte)89;
      byteArray0[1] = (byte)89;
      byte byte1 = (byte) (-125);
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)20;
      byteArray0[6] = (byte) (-98);
      Base64.encodeBase64URLSafe(byteArray0);
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64URLSafeString(byteArray0);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(3856, byteArray0, true);
      base64_0.decode(byteArray0);
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64(byteArray0);
      Base64.decodeBase64("g!A%Ija'XvC&");
      Base64.decodeBase64((byte[]) null);
      Base64.isBase64("g!A%Ija'XvC&");
      Base64.isBase64((byte)1);
      Base64.isBase64((byte)1);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)69;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64(byteArray0, false);
      byteArray0[3] = (byte)1;
      int int0 = 0;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, (int) (byte)25, (int) (byte)25);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 25
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      boolean boolean0 = base64_0.isUrlSafe();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-17);
      byteArray0[7] = (byte)102;
      byteArray0[8] = (byte)118;
      boolean boolean1 = Base64.isBase64(byteArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)0;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(20, byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [K\uFFFDy4\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(3100, byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 512);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true, true);
      String string0 = "6<eZlL?-SYup[-t0{WF";
      base64_0.decode("6<eZlL?-SYup[-t0{WF");
      Base64.encodeBase64(byteArray0);
      base64_0.readResults(byteArray1, 848, 89);
      base64_0.decode("&Y>.vEAWDw");
      base64_0.encode(byteArray2, 3100, 1473);
      base64_0.encode(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 1473, 1484);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)21;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)29;
      byteArray0[7] = (byte)110;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      base64_0.decode(byteArray1, (-1820), (-1078));
      BigInteger bigInteger0 = BigInteger.ZERO;
      String string0 = base64_0.encodeToString(byteArray2);
      assertEquals("TlhkQlRXTm9WVUZJVnpROQ0K\r\n", string0);
      
      Base64.encodeInteger(bigInteger0);
      base64_0.decode(byteArray1, 85, 0);
      byte[] byteArray3 = Base64.decodeBase64(byteArray2);
      String string1 = Base64.encodeBase64URLSafeString(byteArray3);
      assertEquals("NXdBTWNoVUFIVzQ9", string1);
      
      int int0 = base64_0.readResults(byteArray1, (-1), 56);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-87);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byteArray0[2] = (byte)3;
      base64_0.encode(byteArray0, (int) (byte) (-1), (int) (byte) (-1));
      base64_0.encode(byteArray1, (int) (byte) (-87), (-2657));
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      byteArray0[3] = (byte)126;
      byte byte0 = (byte)36;
      byteArray0[4] = (byte)36;
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64URLSafe(byteArray2);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-122);
      byteArray0[8] = (byte)1;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertEquals(12, byteArray1.length);
      
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)105;
      byte[] byteArray3 = base64_0.decode(byteArray2);
      assertEquals(0, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte) (-114);
      byteArray0[5] = (byte)0;
      Base64 base64_0 = new Base64(3931, byteArray0);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte)113;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-13);
      base64_0.encode(byteArray0);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Base64 base64_0 = new Base64((-2693));
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)34;
      byteArray0[0] = (byte)34;
      base64_0.encodeToString(byteArray0);
      byte byte1 = (byte) (-27);
      byteArray0[1] = (byte) (-27);
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte) (-59);
      byteArray0[7] = (byte)90;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 36);
      assertEquals(12, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)0;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-1), byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [l\u0000I\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Base64 base64_0 = new Base64((-370));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte) (-65);
      byteArray0[6] = (byte)49;
      byteArray0[7] = (byte) (-9);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 3761, (int) (byte)90);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3761
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-16);
      byteArray0[0] = (byte) (-16);
      byte byte1 = (byte)42;
      byteArray0[1] = (byte)42;
      Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        bigInteger1.clearBit((-921));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Negative bit address
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = 58;
      Base64 base64_0 = new Base64(58);
      byte[] byteArray0 = null;
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Base64.isBase64((byte)0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      Base64.decodeInteger(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.isBase64((byte)0);
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true);
      Base64.encodeBase64URLSafeString(byteArray2);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, (int) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Base64.encodeBase64((byte[]) null, true, true);
      BigInteger bigInteger0 = BigInteger.TEN;
      MockRandom mockRandom0 = new MockRandom(0);
      bigInteger0.pow(0);
      // Undeclared exception!
      try { 
        BigInteger.probablePrime(0, mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // bitLength < 2
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte) (-110);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)66, (byte)122, (byte)79, (byte)112, (byte)73}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)10;
      byte byte0 = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte) (-13);
      Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)110;
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("ADardP9u", string0);
  }
}
