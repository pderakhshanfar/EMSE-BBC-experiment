/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:07:27 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte) (-38);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)123;
      Base64 base64_0 = new Base64(39, byteArray0, true);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64 base64_0 = new Base64(8189, byteArray0, true);
      base64_0.decode(byteArray0, 296, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[124];
      Base64 base64_0 = new Base64(4, byteArray0);
      base64_0.encode(byteArray0, 4, 4);
      base64_0.encode(byteArray0, 4, 64);
      base64_0.encode(byteArray0, 4, 58);
      base64_0.encode(byteArray0, 4, 64);
      base64_0.encode(byteArray0, 71, (-1842));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(925, byteArray0);
      base64_0.encode(byteArray0, (-1), 0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64 base64_0 = new Base64((-2564), byteArray0);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64String(byteArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64((byte)0, byteArray1, false);
      base64_0.encodeToString(byteArray1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64(byteArray0, false, false);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64 base64_0 = new Base64(3070, byteArray0);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Base64.encodeBase64(byteArray1, false);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Base64.encodeBase64((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64 base64_0 = new Base64(3070, byteArray0);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Base64.discardWhitespace(byteArray1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      Base64 base64_0 = new Base64(5, byteArray0);
      base64_0.encode(byteArray0, 4, 4);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[124];
      Base64 base64_0 = new Base64(4, byteArray0);
      base64_0.encode(byteArray0, 4, 4);
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, (-1512), (-1512));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64.encodeBase64String(byteArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base64.encodeBase64Chunked(byteArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64.encodeBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Base64 base64_0 = new Base64(2199, byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, 1, 64);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[49];
      Base64 base64_0 = new Base64(4, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      // Undeclared exception!
      base64_0.encode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64((-681), byteArray0, true);
      byte[] byteArray1 = new byte[4];
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(12, byteArray0);
      Object object0 = base64_0.decode((Object) "UTF-16");
      // Undeclared exception!
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[49];
      Base64 base64_0 = new Base64(4, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      // Undeclared exception!
      Base64.discardWhitespace(byteArray2);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Base64 base64_0 = new Base64((byte)1, byteArray0);
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 1, (int) (byte)1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[49];
      Base64 base64_0 = new Base64(4, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      // Undeclared exception!
      base64_0.decode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[48];
      Base64 base64_0 = new Base64(4, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      String string0 = base64_0.encodeToString(byteArray1);
      // Undeclared exception!
      base64_0.decode((Object) string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[5] = (byte)43;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000\u0000\u0000\u0000\u0000+\u0000\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Base64 base64_0 = new Base64();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64(byteArray1, true, false, 76);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Base64.isBase64((byte)113);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Base64.isBase64((byte)62);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Base64.isBase64((byte)124);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Base64.isBase64((byte) (-75));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[74];
      Base64 base64_0 = new Base64(2, byteArray0);
      base64_0.encode(byteArray0, 50, 2);
      base64_0.decode(byteArray0, 2, (-280));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[41];
      Base64 base64_0 = new Base64((-1), byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[5] = (byte)124;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, 1, (int) (byte)75);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte) (-59);
      Base64 base64_0 = new Base64((byte)124, byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 1, 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[103];
      Base64 base64_0 = new Base64(4, byteArray0);
      base64_0.encode(byteArray0, 4, 64);
      base64_0.encode(byteArray0, 58, 44);
      base64_0.encode(byteArray0, 4, 57);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 4, 2132);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 103
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[76];
      Base64 base64_0 = new Base64(4, byteArray0);
      base64_0.encode(byteArray0, 4, 4);
      base64_0.encode(byteArray0, 4, 17);
      base64_0.encode(byteArray0, 1695, (-1013));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[76];
      Base64 base64_0 = new Base64(4, byteArray0);
      base64_0.encode(byteArray0, 4, 4);
      base64_0.encode(byteArray0, 4, 64);
      base64_0.encode(byteArray0, (-158), (-158));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Base64.decodeBase64(".11u'{}Z5#");
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Base64.encodeBase64(byteArray0, false);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64.encodeBase64(byteArray0, true, false);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Base64.encodeBase64URLSafe(byteArray0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64 base64_0 = new Base64(3070, byteArray0);
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[76];
      Base64 base64_0 = new Base64(4, byteArray0);
      Object object0 = base64_0.decode((Object) "Parameter supplied to Base64 encode is not a byte[]");
      Object object1 = base64_0.encode(object0);
      Object object2 = base64_0.encode(object1);
      // Undeclared exception!
      base64_0.encode(object2);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)9;
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[8] = (byte)32;
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)9;
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[41];
      Base64.encodeBase64(byteArray0, true, true, 58);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, true, (-4363));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of -4363
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64 base64_0 = new Base64(3070, byteArray0);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      base64_0.decode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[59];
      Base64 base64_0 = new Base64(14, byteArray0, true);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(12, byteArray0);
      Object object0 = base64_0.decode((Object) "UTF-16");
      base64_0.decode(object0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Base64 base64_0 = new Base64(3581);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Base64.isBase64((byte)61);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64 base64_0 = new Base64(3070, byteArray0);
      base64_0.decode("Parameter supplied to Base64 encode is not a byte[]");
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      Base64 base64_0 = new Base64(4, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      String string0 = base64_0.encodeToString(byteArray1);
      base64_0.decode((Object) string0);
      // Undeclared exception!
      base64_0.decode(string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[124];
      Base64 base64_0 = new Base64(6, byteArray0);
      base64_0.encode(byteArray0, 6, 6);
      base64_0.encode(byteArray0, 6, 64);
      base64_0.encode(byteArray0, 6, 58);
      base64_0.encode(byteArray0, 6, 64);
      base64_0.decode(byteArray0, 58, 6);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = new byte[59];
      Base64 base64_0 = new Base64(14, byteArray0, true);
      base64_0.encode(byteArray0, (-43), (-43));
      base64_0.decode(byteArray0, 2893, 14);
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64 base64_0 = new Base64((byte)124, byteArray0);
      base64_0.encode(byteArray0, (int) (byte)79, (-79));
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, 39, (byte)79);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[59];
      Base64 base64_0 = new Base64(14, byteArray0, true);
      base64_0.encode(byteArray0, 14, 14);
      base64_0.encode(byteArray0, (-43), (-43));
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = new byte[41];
      Base64 base64_0 = new Base64((-2507), byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      assertEquals((short)16701, bigInteger0.shortValue());
      assertEquals(76, byteArray2.length);
      assertEquals(56, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Base64 base64_0 = new Base64(5, byteArray0);
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("AAAA\u0000\u0000\u0000\u0000\u0000\u0000\u0000AAAA\u0000\u0000\u0000\u0000\u0000\u0000\u0000AA==\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      
      base64_0.encode(byteArray0, 1961, 1961);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64 base64_0 = new Base64((-2564), byteArray0);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      int int0 = base64_0.readResults(byteArray1, 1073741824, 54);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, byteArray1.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64((byte)1, byteArray0);
      base64_0.decode(byteArray1, 1, (int) (byte)1);
      base64_0.encode(byteArray1, 0, (-1784));
      int int0 = base64_0.readResults(byteArray0, 1, 1);
      assertEquals(0, int0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      byte[] byteArray0 = new byte[124];
      Base64 base64_0 = new Base64(4, byteArray0);
      int int0 = base64_0.readResults(byteArray0, 4, 4);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Base64 base64_0 = new Base64((-901), byteArray0);
      int int0 = base64_0.avail();
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64 base64_0 = new Base64((-1394), byteArray0, true);
      base64_0.encode(byteArray0, (-2018), (-1394));
      boolean boolean0 = base64_0.hasData();
      assertTrue(base64_0.isUrlSafe());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Base64 base64_0 = new Base64(2199, byteArray0);
      boolean boolean0 = base64_0.hasData();
      assertFalse(boolean0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      byte[] byteArray0 = new byte[117];
      Base64 base64_0 = new Base64(4, byteArray0, true);
      base64_0.encode(byteArray0, 4, 4);
      base64_0.encode(byteArray0, 58, 58);
      base64_0.encode(byteArray0, 56, 56);
      base64_0.encode(byteArray0, 63, (-1372));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Base64 base64_0 = new Base64(3192, (byte[]) null, false);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      byte[] byteArray0 = Base64.encodeBase64Chunked((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("AAAAAAAAAAAAAAAA", string0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      String string0 = Base64.encodeBase64String((byte[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      boolean boolean0 = Base64.isBase64("encodeInteger called with null parameter");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      byte[] byteArray0 = new byte[61];
      Base64 base64_0 = new Base64(2, byteArray0);
      base64_0.encode(byteArray0, 2, 2);
      int int0 = base64_0.readResults(byteArray0, 2, 2);
      assertEquals(0, int0);
      
      base64_0.decode(byteArray0, 2, (-840));
      assertFalse(base64_0.isUrlSafe());
  }
}
