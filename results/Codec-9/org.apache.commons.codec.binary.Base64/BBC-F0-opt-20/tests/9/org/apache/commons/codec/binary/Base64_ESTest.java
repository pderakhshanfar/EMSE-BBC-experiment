/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 20:51:14 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      int int0 = 8252;
      mockRandom0.nextFloat();
      BigInteger bigInteger0 = new BigInteger(8252, mockRandom0);
      bigInteger0.not();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      Base64 base64_0 = new Base64(true);
      // Undeclared exception!
      base64_0.encodeToString(byteArray3);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      BigInteger bigInteger0 = new BigInteger(8282, mockRandom0);
      bigInteger0.toString(8282);
      bigInteger0.shiftLeft(8282);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      mockRandom0.nextBoolean();
      BigInteger bigInteger2 = BigInteger.TEN;
      Base64.decodeInteger(byteArray2);
      Base64.decodeInteger(byteArray3);
      Base64.decodeInteger(byteArray2);
      // Undeclared exception!
      Base64.encodeBase64(byteArray3, false, false, 8282);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(0, byteArray0);
      Object object0 = base64_0.decode((Object) "UTF-16");
      // Undeclared exception!
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8258, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = BigInteger.TEN;
      Base64 base64_0 = new Base64(false);
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      base64_0.encode(byteArray1, 40, 40);
      base64_0.encode(byteArray2, 6035, (-1518));
      base64_0.encode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte)123;
      byteArray0[7] = (byte)85;
      byteArray0[8] = (byte)99;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 6, 1026);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      BigInteger bigInteger0 = new BigInteger(8258, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64.encodeBase64Chunked(byteArray2);
      Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0, 24, 491);
      bigInteger1.isProbablePrime(491);
      Base64.discardWhitespace(byteArray0);
      byte[] byteArray3 = new byte[1];
      byteArray3[0] = (byte) (-63);
      base64_0.encode(byteArray3, (-1827), (-1682));
      Base64.encodeInteger(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8258, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger1 = BigInteger.ZERO;
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      bigInteger1.intValueExact();
      BigInteger bigInteger2 = BigInteger.TEN;
      Base64 base64_0 = new Base64(true);
      bigInteger0.multiply(bigInteger1);
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray3 = Base64.decodeBase64(byteArray1);
      base64_0.encode(byteArray2, 64, 64);
      byte[] byteArray4 = new byte[0];
      base64_0.encode(byteArray0, 6041, (-1518));
      Base64 base64_1 = new Base64();
      base64_1.readResults(byteArray3, 8258, 76);
      base64_0.decode(byteArray4, (-2687), 6041);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      BigInteger bigInteger0 = new BigInteger(8258, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger2 = BigInteger.TEN;
      Base64 base64_0 = new Base64(true);
      Base64.encodeInteger(bigInteger0);
      Base64.decodeBase64(byteArray1);
      base64_0.encode(byteArray2, 65, 65);
      byte[] byteArray3 = new byte[0];
      base64_0.encode(byteArray0, 6041, (-1518));
      Base64 base64_1 = new Base64();
      base64_0.decode(byteArray3, (-2690), 65);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      int int0 = 8258;
      BigInteger bigInteger0 = new BigInteger(8258, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      BigInteger bigInteger2 = BigInteger.TEN;
      Base64 base64_0 = new Base64(8258);
      int int1 = (-2087);
      // Undeclared exception!
      Base64.encodeBase64URLSafeString(byteArray3);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      int int0 = 8258;
      mockRandom0.nextFloat();
      BigInteger bigInteger0 = new BigInteger(8258, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      BigInteger bigInteger2 = BigInteger.TEN;
      Base64 base64_0 = new Base64(false);
      // Undeclared exception!
      Base64.encodeBase64(byteArray3, false);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      BigInteger bigInteger0 = new BigInteger(8258, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      BigInteger bigInteger2 = BigInteger.TEN;
      Base64 base64_0 = new Base64(false);
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.decodeBase64(byteArray2);
      base64_0.encode(byteArray3, 66, 65);
      Base64.discardWhitespace(byteArray1);
      Base64.isBase64((byte) (-12));
      base64_0.avail();
      // Undeclared exception!
      base64_0.encode(byteArray2, 66, 6060);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      mockRandom0.nextFloat();
      BigInteger bigInteger0 = new BigInteger(8258, mockRandom0);
      BigInteger bigInteger1 = bigInteger0.negate();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger2 = BigInteger.ZERO;
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64.encodeBase64Chunked(byteArray2);
      BigInteger bigInteger3 = BigInteger.ZERO;
      Base64.encodeBase64Chunked(byteArray2);
      // Undeclared exception!
      Base64.encodeBase64Chunked(byteArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      mockRandom0.nextFloat();
      BigInteger bigInteger0 = new BigInteger(3525, mockRandom0);
      bigInteger0.negate();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray0, (-1247), (-7235));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.setSeed(1073741824);
      BigInteger bigInteger0 = new BigInteger(1073741824, mockRandom0);
      bigInteger0.equals(mockRandom0);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8193, mockRandom0);
      Object object0 = new Object();
      BigInteger bigInteger1 = new BigInteger(8193, mockRandom0);
      bigInteger1.negate();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger2 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_0 = new Base64(112);
      base64_0.encode(byteArray2);
      byte[] byteArray3 = Base64.encodeInteger(bigInteger1);
      BigInteger bigInteger3 = new BigInteger(byteArray3);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger3);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8193, mockRandom0);
      Object object0 = new Object();
      BigInteger bigInteger1 = new BigInteger(8193, mockRandom0);
      bigInteger1.negate();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.decodeInteger(byteArray1);
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64.decodeInteger(byteArray1);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64URLSafe(byteArray2);
      base64_0.decode(byteArray0);
      // Undeclared exception!
      base64_0.encode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Base64 base64_0 = new Base64((-80));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte)43;
      byteArray0[7] = (byte)122;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      base64_0.decode(byteArray1, (int) (byte)0, 98);
      assertEquals(14, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(2748, mockRandom0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)69;
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray2);
      assertEquals((byte)0, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)9;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)90, (byte)119, (byte)69, (byte)74, (byte)0, (byte)0}, byteArray1);
      
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      //  // Unstable assertion: assertEquals(2, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8156, mockRandom0);
      Object object0 = new Object();
      bigInteger0.equals(object0);
      mockRandom0.ints();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64((-2076));
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_1 = new Base64(true);
      base64_1.encode(byteArray1, 255, 64);
      assertEquals(1856, byteArray1.length);
      assertEquals(1356, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)20;
      int int0 = 6;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 6);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-46), byteArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [SRQ\u0000\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(1495, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(1495);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      base64_0.decode(byteArray1, 114, 6250);
      assertEquals(338, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte) (-124);
      byteArray0[5] = (byte)102;
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 encode i, not a byte[]");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(false);
      base64_0.decode(byteArray0, 0, 113);
      assertEquals(30, byteArray0.length);
      
      base64_0.encode(byteArray1, 4, 81);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      Base64.encodeBase64(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray0);
      Base64.encodeBase64(byteArray3);
      byte[] byteArray4 = Base64.discardWhitespace(byteArray1);
      assertEquals(40, byteArray4.length);
      
      base64_0.encode(byteArray2, (-1244), 110);
      assertEquals(56, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 encode i, not a byte[]");
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.byteValueExact();
      bigInteger0.intValueExact();
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64((byte[]) null, true, false, 1);
      Base64 base64_0 = new Base64((byte)0);
      base64_0.readResults(byteArray1, (-72), 0);
      assertEquals(40, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 encode is not a byte[]");
      Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0, 1, 1);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.clearBit(1);
      Base64.toIntegerBytes(bigInteger0);
      Base64 base64_1 = new Base64(false);
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray0, 4, 81);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 30
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      assertArrayEquals(new byte[] {(byte)81, (byte)85, (byte)70, (byte)66, (byte)81, (byte)81}, byteArray2);
      
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray1, 1, 1);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      boolean boolean0 = base64_0.hasData();
      assertTrue(boolean0);
      
      BigInteger bigInteger1 = new BigInteger(byteArray3);
      assertEquals(4, byteArray3.length);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray3);
      
      Base64.discardWhitespace(byteArray0);
      base64_0.decode(byteArray1, 21, (-1762));
      byte[] byteArray4 = Base64.toIntegerBytes(bigInteger0);
      assertArrayEquals(new byte[] {(byte)1}, byteArray4);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 encode is not a byte[]");
      byte[] byteArray1 = Base64.decodeBase64("Parameter supplied to Base64 encode is not a byte[]");
      Base64 base64_0 = new Base64();
      byte[] byteArray2 = base64_0.encode(byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(40, byteArray2.length);
      
      Base64.isBase64((byte)123);
      boolean boolean0 = Base64.isBase64(byteArray1);
      assertEquals(30, byteArray1.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.decodeInteger(byteArray0);
      Base64.isBase64((byte)29);
      Base64 base64_0 = new Base64(119, byteArray0);
      base64_0.decode((Object) "i qAN@");
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)29;
      byteArray1[1] = (byte)29;
      byteArray1[2] = (byte)29;
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true, (int) (byte)29);
      base64_0.readResults(byteArray2, (byte)29, (byte)29);
      byte[] byteArray3 = new byte[6];
      byteArray3[0] = (byte)29;
      byteArray3[1] = (byte)29;
      byteArray3[2] = (byte)29;
      byteArray3[3] = (byte)29;
      byteArray3[4] = (byte)29;
      byteArray3[5] = (byte)85;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 encode is not a byte[]");
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0, 1, 1);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger0);
      Base64 base64_1 = new Base64(false);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      Base64.encodeBase64(byteArray2);
      assertEquals(56, byteArray2.length);
      
      base64_1.avail();
      Base64.isBase64((byte)52);
      byte[] byteArray3 = Base64.discardWhitespace(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(30, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 encode is not a byte[]");
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0, 1, 1);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray2);
      
      Base64 base64_1 = new Base64(false);
      byte[] byteArray3 = Base64.encodeBase64(byteArray1);
      byte[] byteArray4 = Base64.encodeBase64(byteArray3);
      assertEquals(76, byteArray4.length);
      
      int int0 = base64_1.avail();
      assertEquals(0, int0);
      
      Base64.isBase64((byte)52);
      Base64.discardWhitespace(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(30, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64("Parameter supplied to Base64 encode is not a byte[]");
      Base64.encodeBase64URLSafe(byteArray1);
      Base64.encodeBase64(byteArray2, true, true);
      Base64 base64_0 = new Base64(76, byteArray0, true);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray2, 7, 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 30
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      Base64.decodeInteger(byteArray1);
      boolean boolean0 = Base64.isBase64(":%&)'");
      assertFalse(boolean0);
      
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      assertEquals(12, byteArray2.length);
      assertEquals(14, byteArray1.length);
      assertEquals((short) (-256), bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      byteArray0[1] = (byte)32;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(3, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)32, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64("");
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64(byteArray1);
      Base64.decodeBase64("Parameter supplied to Base64 encode is not a byte[]");
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(false);
      base64_0.hasData();
      Base64.isBase64((byte)61);
      bigInteger0.signum();
      Base64.encodeInteger(bigInteger0);
      base64_0.avail();
      base64_0.avail();
      Base64.isBase64((byte)0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger0.max(bigInteger1);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray2, (-2566), (int) (byte)1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2566
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      Base64 base64_0 = new Base64((byte)0);
      Base64.isBase64((byte)0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byte byte1 = (byte) (-29);
      byteArray1[4] = (byte) (-29);
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte)0;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, (int) (byte)0, 507);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)1;
      byteArray0[0] = (byte)1;
      byte byte1 = (byte) (-18);
      Base64.encodeBase64((byte[]) null, true);
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64((-1));
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      Base64 base64_1 = new Base64();
      base64_1.encodeToString(byteArray0);
      base64_1.readResults(byteArray0, (-1), 2446);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray2, 64, 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 64
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64("Parameter supplied to Base64 encode is not a byte[]");
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray1);
      Base64.encodeBase64(byteArray2, true, true);
      Base64.encodeBase64(byteArray2);
      Base64.decodeBase64((String) null);
      byte[] byteArray4 = new byte[7];
      byteArray4[0] = (byte)1;
      Base64.encodeBase64(byteArray4, false);
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64(byteArray3, false);
      base64_0.encode(byteArray2, (int) (byte)1, (int) (byte)1);
      base64_0.decode("");
      Base64.encodeBase64((byte[]) null);
      Base64.encodeBase64(byteArray2);
      Base64.discardWhitespace(byteArray4);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray1, 96, (-1));
      byte[] byteArray2 = base64_0.decode("");
      byte[] byteArray3 = Base64.encodeBase64(byteArray2);
      Base64.encodeBase64(byteArray1);
      Base64.discardWhitespace(byteArray3);
      Object object0 = base64_0.decode((Object) "");
      base64_0.encode(object0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte) (-18);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0, (int) (byte)0, (int) (byte) (-18));
      byte[] byteArray2 = base64_0.decode("");
      byte[] byteArray3 = new byte[0];
      byte[] byteArray4 = Base64.encodeBase64(byteArray3);
      base64_0.encode(byteArray4);
      byte[] byteArray5 = Base64.encodeBase64(byteArray2);
      Base64.encodeBase64(byteArray5, false);
      Base64.discardWhitespace(byteArray1);
      base64_0.decode(byteArray0);
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte) (-1);
      Base64 base64_0 = new Base64(false);
      base64_0.decode(byteArray0, (int) (byte) (-1), (-4807));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.testBit(0);
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger2);
      base64_0.avail();
      Base64.isArrayByteBase64(byteArray0);
      Base64.discardWhitespace(byteArray0);
      Base64.decodeInteger(byteArray1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)6;
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(false);
      base64_0.hasData();
      Base64.isBase64((byte)1);
      bigInteger0.signum();
      Base64.encodeInteger(bigInteger0);
      base64_0.avail();
      base64_0.avail();
      Base64.isBase64((byte)6);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 0, 398);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64(98, byteArray0);
      Base64.decodeBase64(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)108;
      byteArray1[1] = (byte)10;
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte)45;
      byteArray1[4] = (byte)111;
      Base64.isBase64(byteArray1);
      Base64 base64_1 = new Base64();
      base64_0.hasData();
      Base64 base64_2 = new Base64(0);
      Base64.encodeBase64(byteArray1, false, true, 87);
      base64_1.decode(byteArray1);
      Base64.decodeInteger(byteArray1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      Base64 base64_0 = new Base64();
      Base64.isBase64("");
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte) (-1);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      Base64.decodeInteger(byteArray1);
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray3);
      base64_0.decode("@8m<eAu<VDD<(d~");
      Base64.encodeBase64(byteArray0);
      Base64.discardWhitespace(byteArray4);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Base64 base64_0 = new Base64(7);
      base64_0.decode((Object) "");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte) (-4);
      base64_0.encode(byteArray0);
      base64_0.encode(byteArray0, (-1), 1801);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64("Parameter supplied to Base64 encode is not a byte[]");
      Base64.encodeBase64URLSafe(byteArray1);
      Base64.encodeBase64(byteArray2, true, true);
      Base64.encodeBase64(byteArray2);
      Base64.decodeBase64((String) null);
      byte[] byteArray3 = new byte[7];
      byteArray3[0] = (byte)1;
      byteArray3[1] = (byte)1;
      byteArray3[2] = (byte)1;
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(false);
      base64_0.hasData();
      Base64.isBase64((byte)1);
      bigInteger0.signum();
      byte[] byteArray4 = Base64.encodeInteger(bigInteger0);
      base64_0.avail();
      base64_0.avail();
      Base64.isBase64((byte)1);
      base64_0.decode(byteArray4, (int) (byte)1, (int) (byte)1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64(byteArray1);
      Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      bigInteger0.negate();
      Base64 base64_0 = new Base64(25, byteArray1);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)60;
      byteArray2[1] = (byte) (-20);
      byteArray0[0] = (byte)4;
      byteArray2[3] = (byte)47;
      bigInteger0.bitCount();
      byteArray2[4] = (byte) (-72);
      byteArray2[5] = (byte)43;
      byte[] byteArray3 = base64_0.decode(byteArray2);
      Base64.decodeInteger(byteArray3);
      Base64.isBase64("fe{f`%eTy~xO-il3JZ'");
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64String(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      int int0 = 907;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.compareTo(bigInteger1);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger2 = BigInteger.probablePrime(907, mockRandom0);
      int int1 = (-1442);
      bigInteger0.floatValue();
      bigInteger0.shiftRight((-1442));
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)88;
      BigInteger bigInteger3 = new BigInteger(byteArray1);
      bigInteger2.max(bigInteger3);
      Base64.encodeInteger(bigInteger0);
      bigInteger2.shiftLeft(907);
      int int2 = 15;
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false, false, 15);
      Base64.discardWhitespace(byteArray0);
      bigInteger1.byteValueExact();
      boolean boolean0 = true;
      Base64.encodeBase64(byteArray2, true, true, 1007);
      Base64.toIntegerBytes(bigInteger2);
      Base64 base64_0 = new Base64(false);
      Base64.isBase64("");
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0, 1, 1);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-1);
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray0, 107, (-4796));
      base64_0.hasData();
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, 1, (-2111085619));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base64 base64_0 = new Base64(true);
      Object object0 = base64_0.decode((Object) "");
      base64_0.decode(object0);
      Base64 base64_1 = new Base64(123);
      base64_1.readResults(byteArray0, 3626, 0);
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byteArray0[0] = (byte) (-1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray0);
      byte[] byteArray4 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.divideAndRemainder(bigInteger1);
      BigInteger bigInteger2 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger2);
      base64_0.hasData();
      Base64.isBase64((byte)77);
      Base64.decodeInteger(byteArray0);
      BigInteger bigInteger3 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger2);
      byte[] byteArray5 = new byte[5];
      byteArray5[0] = (byte)77;
      byteArray5[1] = (byte) (-1);
      byteArray5[2] = (byte) (-1);
      byteArray5[3] = (byte) (-1);
      byteArray5[4] = (byte)60;
      base64_0.encode(byteArray5);
      base64_0.decode((String) null);
      Base64.discardWhitespace(byteArray2);
      base64_0.readResults(byteArray3, 1211, (byte) (-1));
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte) (-18);
      byte byte0 = (byte)27;
      byteArray0[2] = (byte)27;
      Base64.decodeBase64(byteArray0);
      boolean boolean0 = true;
      Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64();
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, (int) (byte)27);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte)27;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64(byteArray0, true);
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(false);
      byte[] byteArray2 = Base64.decodeBase64("Yv|");
      Base64.encodeBase64(byteArray0);
      Base64.encodeBase64String(byteArray2);
      byte[] byteArray3 = Base64.CHUNK_SEPARATOR;
      Base64.encodeBase64Chunked(byteArray1);
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.encodeBase64(byteArray1);
      Base64 base64_0 = new Base64((byte)0, byteArray0);
      base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.divideAndRemainder(bigInteger1);
      BigInteger bigInteger2 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger0);
      base64_0.hasData();
      Base64.isBase64((byte)12);
      byte[] byteArray3 = new byte[0];
      Base64.decodeInteger(byteArray3);
      Base64.isBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      byte[] byteArray4 = Base64.toIntegerBytes(bigInteger1);
      assertArrayEquals(new byte[] {(byte)1}, byteArray4);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte)27;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0, (int) (byte)27, (int) (byte) (-18));
      base64_0.decode("");
      byte[] byteArray3 = new byte[0];
      Base64.encodeBase64(byteArray3);
      String string0 = Base64.encodeBase64String(byteArray2);
      //  // Unstable assertion: assertEquals("QUJidUd3PT0GAA==", string0);
      
      Base64.encodeBase64(byteArray3);
      byte[] byteArray4 = Base64.discardWhitespace(byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertEquals(0, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Base64.isBase64("");
      byte[] byteArray0 = new byte[1];
      Base64.encodeBase64(byteArray0, true, true, 124);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-74);
      Base64.decodeInteger(byteArray1);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, true, false, (int) (byte) (-74));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of -74
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)6;
      Base64 base64_0 = new Base64((-3319), byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)6;
      Base64 base64_1 = new Base64((-3319), byteArray1);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      byte[] byteArray3 = Base64.decodeBase64(byteArray2);
      base64_1.encode(byteArray3, 76, (-2124878555));
      base64_0.hasData();
      // Undeclared exception!
      try { 
        base64_1.readResults(byteArray3, 78, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64((-1));
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.isUrlSafe();
      Base64.isBase64(byteArray1);
      Base64 base64_1 = new Base64();
      base64_0.hasData();
      Base64 base64_2 = new Base64(64);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true, true, (-1));
      byte[] byteArray3 = base64_0.decode(byteArray2);
      Base64.decodeBase64(byteArray3);
      base64_1.avail();
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray4 = Base64.CHUNK_SEPARATOR;
      try { 
        base64_2.encode((Object) base64_0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = null;
      base64_0.encode((byte[]) null, (-97), (-97));
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, (-97), (-97));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte)0;
      Base64.encodeBase64Chunked(byteArray0);
      Base64.decodeBase64("4ot2H,}");
      Base64.isBase64("Vb[V");
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64((byte[]) null);
      byteArray0[0] = (byte)1;
      Base64.encodeBase64((byte[]) null);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64("g0ypCq~ 5XA.%[[");
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.encodeBase64URLSafe(byteArray2);
      Base64.encodeBase64((byte[]) null);
      Base64.decodeInteger(byteArray1);
      base64_0.encode(byteArray0, (int) (byte)1, 26);
      base64_0.decode(byteArray1);
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.decodeBase64((byte[]) null);
      int int0 = 1274;
      Base64 base64_0 = new Base64(1059, (byte[]) null, false);
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, 1274, 1274);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64.isBase64("pJhtQQw)u0WH8|fl|E");
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0, (-911), (-1636));
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.shiftLeft(75);
      BigInteger bigInteger2 = bigInteger1.abs();
      bigInteger2.subtract(bigInteger1);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger2);
      int int0 = 2;
      base64_0.decode(byteArray0, 2, (-911));
      Base64.encodeBase64(byteArray1, false, false);
      try { 
        base64_0.encode((Object) "pJhtQQw)u0WH8|fl|E");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Base64 base64_0 = new Base64(35, (byte[]) null, true);
      base64_0.encodeToString((byte[]) null);
      base64_0.encode((byte[]) null);
      base64_0.decode((byte[]) null);
      Base64.encodeBase64URLSafe((byte[]) null);
      base64_0.encode((byte[]) null, 0, 0);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Base64 base64_0 = new Base64(35, (byte[]) null, true);
      base64_0.encodeToString((byte[]) null);
      Base64.encodeBase64String((byte[]) null);
      Base64 base64_1 = new Base64(64, (byte[]) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.divideAndRemainder(bigInteger0);
      Base64.toIntegerBytes(bigInteger0);
      base64_1.hasData();
      Base64.isBase64((byte) (-112));
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)39;
      boolean boolean0 = false;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64(byteArray1, false);
      Base64 base64_0 = new Base64();
      int int0 = 100;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)51, 100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 51
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-101);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte) (-101);
      Base64 base64_0 = new Base64((byte) (-101), byteArray2);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeBase64URLSafeString(byteArray1);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.divideAndRemainder(bigInteger1);
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64(byteArray3);
      Base64.encodeBase64String(byteArray3);
      Base64.encodeBase64(byteArray3, true, false);
      byte[] byteArray4 = new byte[9];
      byteArray4[0] = (byte) (-101);
      byteArray4[1] = (byte) (-101);
      byteArray4[2] = (byte) (-101);
      byteArray4[3] = (byte) (-101);
      byteArray4[4] = (byte) (-101);
      byteArray4[5] = (byte) (-101);
      byteArray4[6] = (byte) (-101);
      byteArray4[7] = (byte) (-101);
      byteArray4[8] = (byte) (-101);
      base64_0.decode(byteArray4, (int) (byte) (-101), (int) (byte) (-101));
      BigInteger bigInteger2 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger2);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte)27;
      Base64.decodeBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0, (int) (byte)27, (int) (byte) (-18));
      base64_0.decode("");
      base64_0.hasData();
      Base64.isBase64((byte) (-2));
      Base64.decodeInteger(byteArray1);
      Base64.isBase64("org.apache.commons.codec.binary.Base64");
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byteArray0[0] = (byte) (-1);
      Base64.encodeBase64(byteArray1);
      base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.divideAndRemainder(bigInteger1);
      BigInteger bigInteger2 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger2);
      base64_0.hasData();
      Base64.isBase64((byte)77);
      Base64.decodeInteger(byteArray0);
      Base64.isBase64("DB#HOW$ )\"'NKyFoQ");
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-101);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray2 = new byte[10];
      byteArray2[0] = (byte) (-101);
      Base64 base64_0 = new Base64((byte) (-101), byteArray2);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.divideAndRemainder(bigInteger1);
      Base64.toIntegerBytes(bigInteger0);
      base64_0.hasData();
      Base64.isBase64((byte)0);
      Base64.decodeInteger(byteArray1);
      Base64.isBase64("bXc=");
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      int int0 = 0;
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(0, byteArray0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      String string0 = "nOM\\TuS?:t`'i";
      base64_0.decode(byteArray0);
      int int1 = (-1);
      Base64.encodeBase64URLSafe(byteArray0);
      bigInteger0.nextProbablePrime();
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Base64.isBase64((byte)99);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)99;
      base64_0.decode(byteArray0);
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte)99;
      byteArray0[6] = (byte)99;
      Base64.decodeBase64(byteArray0);
      base64_0.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Base64.isBase64((byte)100);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[1];
      Base64.encodeBase64(byteArray0, false, true, (int) (byte)100);
      base64_0.encodeToString(byteArray0);
      byteArray0[0] = (byte)0;
      base64_0.readResults(byteArray0, (byte)0, 23);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      Base64.decodeInteger(byteArray1);
      Base64.encodeBase64Chunked(byteArray2);
      base64_0.encode(byteArray0, 981, (int) (byte)0);
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray3 = new byte[2];
      byteArray3[0] = (byte) (-78);
      byteArray3[1] = (byte)100;
      Base64.encodeBase64String(byteArray3);
      Base64.encodeBase64URLSafeString(byteArray3);
      base64_0.decode(byteArray1, 23, (int) (byte)0);
      base64_0.encodeToString(byteArray0);
      byte[] byteArray4 = Base64.decodeBase64("");
      Base64.isBase64("smQ=");
      Base64.encodeBase64Chunked(byteArray4);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64((byte) (-34), byteArray0, false);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.encodeBase64(byteArray0, false, false);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      base64_0.encode(byteArray1);
      Base64.encodeBase64(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, false);
      base64_0.decode(byteArray3, (int) (byte)0, 87);
      byte[] byteArray4 = new byte[4];
      byteArray4[0] = (byte) (-34);
      byteArray4[1] = (byte) (-122);
      byteArray4[2] = (byte)0;
      byteArray4[3] = (byte) (-34);
      base64_0.decode(byteArray4, (int) (byte)0, 1);
      base64_0.encode(byteArray3);
      Base64.isArrayByteBase64(byteArray3);
      base64_0.readResults(byteArray2, (byte)0, (byte)0);
      try { 
        base64_0.encode((Object) "QU40QQAA");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Base64.decodeBase64((String) null);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.encodeBase64Chunked((byte[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte) (-45);
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte)61;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)81;
      byteArray0[8] = (byte)0;
      Base64.decodeBase64(byteArray0);
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      Base64 base64_0 = new Base64((-1636), byteArray0);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.isBase64(byteArray0);
      base64_0.hasData();
      byte[] byteArray2 = base64_0.decode(byteArray1);
      Base64.decodeBase64(byteArray2);
      base64_0.avail();
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      try { 
        base64_0.encode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Base64 base64_0 = new Base64(1059, (byte[]) null, false);
      base64_0.avail();
      base64_0.decode((byte[]) null, 0, 0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)65;
      Base64.encodeBase64URLSafeString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.avail();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-39);
      byteArray0[4] = (byte) (-10);
      byteArray0[5] = (byte)0;
      Base64.encodeBase64(byteArray0, false);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)115;
      Base64.encodeBase64Chunked(byteArray1);
      String string0 = "JW2";
      try { 
        base64_0.encode((Object) "JW2");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte) (-18);
      byteArray0[5] = (byte)0;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(8, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0001\uFFFDK}\uFFFD\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Base64.encodeBase64((byte[]) null, true);
      Base64.encodeBase64((byte[]) null, true, true);
      Base64.encodeBase64((byte[]) null, false, false);
      Base64 base64_0 = new Base64((-1));
      base64_0.readResults((byte[]) null, (-1), 629);
      Base64.decodeBase64((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
      int int0 = (-1);
      Base64 base64_0 = new Base64((-1));
      base64_0.encode(byteArray0);
      base64_0.isUrlSafe();
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (-1), 1274);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[1];
      Base64.decodeBase64("");
      base64_0.decode((Object) "");
      byteArray0[0] = (byte) (-83);
      base64_0.encode(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.add(bigInteger1);
      bigInteger0.subtract(bigInteger1);
      BigInteger bigInteger2 = BigInteger.ONE;
      bigInteger0.or(bigInteger2);
      Base64.encodeInteger(bigInteger0);
      base64_0.hasData();
      base64_0.hasData();
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-83);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-83);
      base64_0.decode(byteArray1, 0, (int) (byte) (-83));
      Base64.isBase64("}qAN");
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64 base64_0 = new Base64(0, byteArray0, false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      base64_0.avail();
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      base64_0.decode("hcbTJ${^P h!");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte)23;
      base64_0.encodeToString(byteArray0);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      byteArray0[0] = (byte) (-1);
      Base64.encodeBase64(byteArray2);
      byte[] byteArray3 = base64_0.encode(byteArray0);
      byte[] byteArray4 = Base64.decodeBase64("g0ypCq~ 5XA.%[[");
      String string0 = Base64.encodeBase64URLSafeString(byteArray3);
      assertEquals("L3c9PQ", string0);
      
      byte[] byteArray5 = Base64.encodeBase64URLSafe(byteArray4);
      assertNotSame(byteArray5, byteArray4);
      
      Base64.encodeBase64(byteArray2);
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray3);
      assertEquals((byte) (-1), bigInteger1.byteValue());
      
      base64_0.encode(byteArray0, (int) (byte) (-1), 26);
      base64_0.decode(byteArray3);
      byte[] byteArray6 = Base64.discardWhitespace(byteArray2);
      assertEquals(4, byteArray6.length);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61}, byteArray2);
      
      boolean boolean0 = base64_0.isUrlSafe();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)53;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-1276), byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD\u0001\u0000\uFFFD>\u0000\u00005]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Base64.isBase64("");
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[3];
      Base64.decodeInteger(byteArray0);
      byteArray0[0] = (byte)15;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      byteArray0[1] = (byte)0;
      Base64.encodeBase64String(byteArray0);
      Base64.decodeBase64("");
      byteArray0[2] = (byte) (-61);
      base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      base64_0.encode(byteArray2, (int) (byte) (-61), 9);
      Object object0 = base64_0.decode((Object) "");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte)27;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0, (int) (byte)27, (int) (byte) (-18));
      base64_0.decode("");
      byte[] byteArray3 = new byte[0];
      Base64.encodeBase64(byteArray3);
      Base64.encodeBase64String(byteArray2);
      Base64.encodeBase64(byteArray2, true, false);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, 2314, (int) (byte)27);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2314
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-101);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte) (-101);
      Base64 base64_0 = new Base64((byte) (-101), byteArray2);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.divideAndRemainder(bigInteger1);
      Base64.toIntegerBytes(bigInteger0);
      base64_0.hasData();
      boolean boolean0 = Base64.isBase64((byte)0);
      Base64.decodeInteger(byteArray1);
      boolean boolean1 = Base64.isBase64("bXc=");
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Base64.isBase64("");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-74);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertArrayEquals(new byte[] {(byte)116, (byte)103, (byte)61, (byte)61}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-87);
      byteArray0[0] = (byte) (-87);
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte2 = (byte) (-62);
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)1;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(false);
      int int0 = 64;
      base64_0.readResults(byteArray0, 64, (byte) (-87));
      Base64.encodeBase64(byteArray0);
      base64_0.encodeToString(byteArray0);
      try { 
        base64_0.encode((Object) "qQDCFAE=\u0000\u0000");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte)51;
      byteArray0[1] = (byte)51;
      byte byte2 = (byte)0;
      byteArray0[2] = (byte)0;
      byte byte3 = (byte)39;
      byteArray0[3] = (byte)39;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, (int) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64(35, (byte[]) null, true);
      base64_0.encodeToString((byte[]) null);
      boolean boolean0 = true;
      base64_0.encode((byte[]) null);
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 35, 35);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }
}
