/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:15:40 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)5;
      Base64 base64_0 = new Base64((byte)5);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)5, 3303);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 15
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)42;
      Base64.decodeBase64("org.apache.commons.codec.binary.Base64");
      base64_0.decode(byteArray0);
      byteArray0[1] = (byte) (-1);
      base64_0.decode(byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)97;
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte)42;
      byteArray1[4] = (byte)42;
      byteArray1[5] = (byte) (-1);
      byteArray1[6] = (byte)42;
      Base64.isBase64("org.apache.commons.codec.binary.Base64");
      byteArray1[7] = (byte)42;
      Base64.decodeInteger(byteArray1);
      Base64.encodeBase64(byteArray0, true, true, 6);
      base64_0.avail();
      BigInteger bigInteger0 = BigInteger.ZERO;
      MockRandom mockRandom0 = new MockRandom(2474L);
      // Undeclared exception!
      try { 
        BigInteger.probablePrime((byte) (-1), mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // bitLength < 2
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      int int0 = 2593;
      BigInteger bigInteger0 = BigInteger.probablePrime(2593, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(int0);
      int int1 = 117;
      int int2 = 8180;
      base64_0.decode(byteArray0, int1, int2);
      BigInteger bigInteger1 = bigInteger0.pow(int1);
      int int3 = 47;
      int int4 = 1775;
      bigInteger0.divideAndRemainder(bigInteger1);
      base64_0.decode(byteArray0, int3, int4);
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      int int0 = 2593;
      BigInteger bigInteger0 = BigInteger.probablePrime(2593, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64(64);
      base64_0.decode(byteArray0, 99, 1003);
      bigInteger0.pow(1003);
      int int1 = (-1);
      base64_1.decode(byteArray0, int0, int1);
      String string0 = "org.apache.commons.codec.binary.Base64";
      base64_1.decode(string0);
      Base64.encodeBase64(byteArray0);
      base64_1.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      base64_0.decode(byteArray0);
      Base64.encodeBase64(byteArray0);
      Random.setNextRandom(34);
      Base64.isBase64((byte)124);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (-611), 34);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -611
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte) (-69);
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte)0;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64((byte)32, byteArray1, false);
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte)69;
      byteArray0[6] = (byte)70;
      byteArray0[7] = (byte)47;
      Base64.isBase64(byteArray0);
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 1186;
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(1186, byteArray0, false);
      Base64.discardWhitespace(byteArray0);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = BigInteger.probablePrime(2536, mockRandom0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      base64_0.decode(byteArray1);
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, false, false, 64);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (584) than the specified maxium size of 64
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Base64.isBase64((byte)35);
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64((byte)35, byteArray1);
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)35;
      byteArray2[1] = (byte)35;
      byteArray2[2] = (byte)35;
      byteArray2[3] = (byte)35;
      byteArray2[4] = (byte) (-58);
      byteArray2[5] = (byte)35;
      byteArray2[6] = (byte)35;
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      boolean boolean0 = Base64.isBase64((byte)61);
      assertTrue(boolean0);
      
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base64 base64_0 = new Base64(1, byteArray0);
      Base64 base64_1 = new Base64(true);
      byte[] byteArray1 = base64_0.decode("Parameter supplied to Base64 decode is not a byte[] or a String");
      byte[] byteArray2 = new byte[2];
      byteArray2[1] = (byte)125;
      Base64 base64_2 = new Base64(1826, byteArray2, true);
      base64_0.decode("Parameter supplied to Base64 decode is not a byte[] or a String");
      base64_2.encode(byteArray1, 1, 5);
      assertEquals(37, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64 base64_0 = new Base64(1052, byteArray0);
      Base64 base64_1 = new Base64(true);
      base64_0.encode(byteArray0, 120, (-3532));
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, (-3532), 1052);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte)30;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)6, byteArray0, false);
      String string0 = Base64.encodeBase64String(byteArray0);
      //  // Unstable assertion: assertEquals("BoEe", string0);
      
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.decodeBase64("]");
      byte[] byteArray2 = base64_0.encode(byteArray0);
      byte[] byteArray3 = Base64.decodeBase64(byteArray1);
      //  // Unstable assertion: assertEquals(3, byteArray3.length);
      
      int int0 = base64_0.readResults(byteArray2, 8184, 0);
      //  // Unstable assertion: assertEquals((-1), int0);
      
      Random.setNextRandom(13);
      Base64.isBase64(byteArray0);
      Random.setNextRandom(1717986918);
      base64_0.encode(byteArray1);
      byte[] byteArray4 = base64_0.decode(byteArray0);
      byte[] byteArray5 = base64_0.encode(byteArray1);
      //  // Unstable assertion: assertEquals(14, byteArray5.length);
      //  // Unstable assertion: assertEquals(6, byteArray1.length);
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray2);
      //  // Unstable assertion: assertEquals((byte)30, bigInteger0.byteValue());
      
      byte[] byteArray6 = Base64.discardWhitespace(byteArray4);
      //  // Unstable assertion: assertEquals(0, byteArray6.length);
      
      byte[] byteArray7 = Base64.encodeBase64(byteArray0, true, true, 52);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)66, (byte)111, (byte)69, (byte)101, (byte)8, (byte)0}, byteArray7);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte)120;
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte)120;
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.multiply(bigInteger1);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-57), (byte)28, (byte)113, (byte) (-57)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)8;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 2955);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64URLSafeString(byteArray0);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, (int) (byte)8, 61);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = base64_0.encode((byte[]) null);
      assertNull(byteArray0);
      
      base64_0.encode((byte[]) null, 1073741824, (int) (byte) (-1));
      Base64 base64_1 = new Base64();
      boolean boolean0 = base64_0.hasData();
      assertTrue(boolean0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Base64.isBase64((byte) (-33));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.toString();
      bigInteger0.andNot(bigInteger1);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(0, byteArray0.length);
      
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-33);
      byteArray1[1] = (byte) (-33);
      byteArray1[2] = (byte) (-33);
      byteArray1[3] = (byte) (-19);
      byteArray1[4] = (byte)123;
      Base64 base64_0 = new Base64((byte) (-33), byteArray1, false);
      Base64.decodeInteger(byteArray1);
      base64_0.decode(byteArray1);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte) (-60);
      base64_0.encode(byteArray0, 320, (int) (byte) (-60));
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)29;
      byteArray0[1] = (byte) (-19);
      Base64 base64_0 = new Base64((byte)0, byteArray0, false);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)0, (int) (byte)29);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)37;
      Base64.decodeInteger(byteArray0);
      Base64 base64_1 = new Base64(64, byteArray0);
      byte[] byteArray1 = null;
      Base64.encodeBase64URLSafe((byte[]) null);
      base64_0.encode((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)29;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.discardWhitespace(byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64 base64_0 = new Base64(3881, byteArray1);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)37;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, 598);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base64.encodeBase64((byte[]) null, true, true);
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(27);
      Base64.encodeBase64((byte[]) null, false);
      base64_0.encode(byteArray0);
      Base64.decodeBase64((byte[]) null);
      Base64.decodeBase64((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)40;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.decodeInteger(byteArray1);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      Base64.decodeBase64(byteArray2);
      Base64.decodeBase64(byteArray0);
      base64_0.encode(byteArray0, (-899), 64);
      Base64 base64_1 = new Base64(true);
      // Undeclared exception!
      try { 
        base64_1.decode(byteArray2, 13, 74);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)8;
      int int0 = Base64.PEM_CHUNK_SIZE;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64 base64_0 = new Base64(10);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      Base64.decodeBase64(byteArray0);
      Base64.decodeBase64(byteArray2);
      Base64.discardWhitespace(byteArray2);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)10;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)5, 598);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte byte0 = (byte)37;
      byte byte1 = (byte)57;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)37;
      Base64.decodeBase64((String) null);
      Base64.encodeBase64((byte[]) null, false, false);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)116;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)18;
      byteArray0[8] = (byte)57;
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      byte[] byteArray3 = Base64.decodeBase64(byteArray2);
      base64_0.encode(byteArray1, 0, (int) (byte)116);
      Base64 base64_1 = new Base64(true);
      base64_1.decode(byteArray3, 0, (-2525));
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte)5;
      base64_0.encode(byteArray0, (int) (byte)5, (int) (byte)1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      String string0 = "Parameter supplied to Base64 encode is not a byte[]";
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)96;
      Base64.decodeInteger(byteArray0);
      base64_0.encode(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)37;
      Base64.decodeBase64(byteArray2);
      base64_0.encodeToString((byte[]) null);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (int) (byte)18, (int) (byte)57);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 18
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)96;
      Base64.decodeInteger(byteArray0);
      base64_0.encode(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)37;
      Base64.decodeBase64(byteArray2);
      base64_0.encode(byteArray1, (int) (byte)18, (int) (byte)57);
      Base64 base64_1 = new Base64(true);
      // Undeclared exception!
      try { 
        base64_1.decode(byteArray0, (int) (byte)0, 13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-75);
      Base64.encodeBase64(byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(3269);
      base64_0.hasData();
      Base64.isBase64("org.apache.commons.codec.binary.Base64");
      base64_0.decode((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      Base64.encodeBase64(byteArray0, false, false, 64);
      Base64.encodeBase64URLSafeString(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.divideAndRemainder(bigInteger1);
      byte[] byteArray1 = null;
      int int0 = 1309;
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, (-1328), 1309);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_1 = new Base64();
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.divideAndRemainder(bigInteger0);
      Base64.decodeBase64(byteArray0);
      base64_0.encode(byteArray1, 113, 0);
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Base64 base64_0 = new Base64(1, (byte[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)107;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)101;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-124);
      byteArray0[8] = (byte)3;
      Base64.encodeBase64URLSafe(byteArray0);
      base64_0.hasData();
      Base64.encodeBase64((byte[]) null, false, false, (-109));
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger0);
      bigInteger0.shiftRight(76);
      base64_0.readResults((byte[]) null, 1, 201);
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[3];
      Base64.decodeBase64(byteArray0);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64 base64_1 = new Base64();
      Base64.encodeBase64URLSafe((byte[]) null);
      base64_1.encodeToString(byteArray1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-75);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64.isBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-20);
      byteArray0[4] = (byte) (-119);
      Base64.encodeBase64Chunked(byteArray0);
      base64_0.hasData();
      String string0 = null;
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte) (-20);
      byteArray0[4] = (byte) (-97);
      byteArray0[5] = (byte)15;
      byteArray0[6] = (byte)126;
      byteArray0[7] = (byte)65;
      byteArray0[8] = (byte) (-5);
      Base64.encodeBase64(byteArray0, true, true, 64);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)0;
      byteArray0[4] = (byte)37;
      byte[] byteArray1 = Base64.decodeBase64(")");
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, true);
      Base64.decodeInteger(byteArray1);
      Base64 base64_1 = new Base64((byte)37, byteArray2, true);
      byte[] byteArray3 = base64_1.encode(byteArray1);
      Base64.decodeBase64(byteArray0);
      Base64.decodeBase64(byteArray3);
      base64_0.encode(byteArray1, (-2715), (-1));
      Base64.discardWhitespace(byteArray3);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      String string0 = "Parameter supplied to Base64 encode is not a byte[]";
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte)0;
      Base64 base64_1 = new Base64(true);
      base64_1.encodeToString(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_2 = new Base64((byte)0, byteArray1);
      byte[] byteArray2 = base64_2.decode(byteArray1);
      Base64.isBase64((byte)37);
      Base64.encodeBase64(byteArray2);
      // Undeclared exception!
      try { 
        base64_2.encode(byteArray0, (int) (byte)37, (-164));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-74);
      Object object0 = base64_0.decode((Object) "YiRv67=");
      base64_0.encode(object0);
      base64_0.avail();
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-93);
      base64_0.encodeToString(byteArray1);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      base64_0.decode(byteArray1);
      Base64.isBase64((byte) (-74));
      Base64.encodeBase64(byteArray0);
      base64_0.encode(byteArray2, (int) (byte) (-93), (-98));
      int int0 = 49;
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Base64.isBase64((byte)120);
      Base64.isBase64((byte)120);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)120;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)120;
      Base64.decodeBase64(byteArray0);
      Base64.discardWhitespace(byteArray1);
      Base64 base64_1 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, 64, (int) (byte)120);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      Base64 base64_0 = new Base64(1929);
      base64_0.encodeToString(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      Base64.decodeBase64(byteArray1);
      base64_0.hasData();
      Base64.isBase64("AAAA\r\n");
      base64_0.hasData();
      Base64.isBase64("AAAA\r\n");
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      base64_0.decode(byteArray0, 866, (int) (byte)0);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64(byteArray0);
      base64_0.decode(byteArray0, (int) (byte)0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte) (-88);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.encodeToString(byteArray0);
      Base64.decodeBase64(byteArray1);
      base64_0.hasData();
      base64_0.isUrlSafe();
      base64_0.hasData();
      Base64.isBase64("lineSeperator must not contain base64 characters: [");
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Base64.isBase64((byte) (-1));
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = base64_0.decode(byteArray0);
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[0] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      byteArray0[5] = (byte) (-44);
      Base64 base64_1 = new Base64();
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger0);
      base64_1.decode(byteArray1, 0, (-1));
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2);
      base64_1.decode(byteArray3, 112, (-1));
      base64_1.hasData();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[7];
      base64_0.decode(":%H=3e9Z:j_k.]lwF");
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte) (-65);
      base64_0.readResults(byteArray0, (-1229), (byte)67);
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte)64;
      base64_0.encode(byteArray0, (int) (byte) (-65), 4);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-36);
      base64_0.encode(byteArray0, 116, (int) (byte)0);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)18;
      byteArray0[7] = (byte)0;
      Base64.decodeBase64("");
      byteArray0[8] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      byte[] byteArray2 = new byte[0];
      Base64.decodeInteger(byteArray2);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      byte[] byteArray4 = Base64.decodeBase64(byteArray3);
      Base64.decodeBase64(byteArray4);
      base64_0.encode(byteArray3, 0, 0);
      Base64.discardWhitespace(byteArray1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)18;
      byteArray0[6] = (byte)105;
      byteArray0[7] = (byte)57;
      byteArray0[8] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      byte[] byteArray2 = new byte[0];
      Base64.decodeInteger(byteArray2);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      Base64.encodeBase64(byteArray3, false, true, 9);
      Base64.encodeBase64Chunked(byteArray3);
      base64_0.encodeToString(byteArray1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Base64.isBase64((byte) (-1));
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = base64_0.decode(byteArray0);
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-44);
      base64_0.readResults(byteArray0, 785, 785);
      base64_0.encodeToString(byteArray0);
      base64_0.readResults(byteArray0, (byte) (-44), 0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.shortValueExact();
      bigInteger0.negate();
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.toByteArray();
      Base64.isBase64((byte)41);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      base64_0.encode(byteArray2, 1, 8189);
      base64_0.encodeToString(byteArray1);
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Base64.isBase64((byte) (-1));
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = base64_0.decode(byteArray0);
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray3 = new byte[2];
      byteArray3[0] = (byte)1;
      byteArray3[1] = (byte) (-7);
      Base64.encodeBase64URLSafeString(byteArray3);
      Base64 base64_1 = new Base64();
      Base64.decodeBase64(byteArray2);
      base64_0.encode(byteArray3, 85, 40);
      Base64.decodeBase64(byteArray3);
      base64_1.avail();
      Base64.encodeBase64(byteArray1, true, true, 2943);
      Base64.isBase64((byte)79);
      Base64.decodeBase64("Afk");
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray3, true, true, (int) (byte)1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of 1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)66;
      byteArray1[1] = (byte)66;
      byteArray1[2] = (byte)66;
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      Base64.discardWhitespace(byteArray2);
      byte[] byteArray3 = new byte[1];
      byteArray3[0] = (byte)66;
      Base64.encodeBase64String(byteArray3);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = null;
      Base64.encodeBase64Chunked((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(0);
      base64_0.readResults(byteArray0, 0, 620);
      Base64.encodeBase64(byteArray1, false, false, 76);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      base64_0.encode(byteArray2);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray1);
      base64_0.readResults(byteArray1, (byte)0, (byte)0);
      Base64.decodeInteger(byteArray3);
      byte[] byteArray4 = new byte[1];
      byteArray4[0] = (byte)0;
      base64_0.decode(byteArray4, 0, 0);
      Base64.isBase64((byte)0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Base64 base64_0 = new Base64((-1936));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)50;
      byteArray0[7] = (byte)57;
      base64_0.encodeToString(byteArray0);
      base64_0.decode((String) null);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false, 1);
      Base64.encodeBase64String(byteArray2);
      Base64.encodeBase64(byteArray2, true);
      Base64.isBase64(byteArray2);
      Base64 base64_0 = new Base64((-1430), byteArray1);
      byte[] byteArray3 = new byte[6];
      byteArray3[0] = (byte)110;
      byteArray3[1] = (byte) (-10);
      byteArray3[2] = (byte)0;
      byteArray3[3] = (byte) (-15);
      byteArray3[4] = (byte)1;
      byteArray3[5] = (byte)93;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray3, true, false, (int) (byte) (-15));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of -15
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Base64.isBase64("u`U3UBJ w^CGC;");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte byte0 = (byte)69;
      Base64.isBase64((byte)69);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)69, byteArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [AA]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-45);
      byteArray0[5] = (byte)34;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray2 = new byte[2];
      base64_0.decode("?c;'cEaV\"U7r,,]o");
      byteArray2[0] = (byte) (-60);
      byteArray2[1] = (byte)34;
      Base64.decodeBase64(byteArray2);
      base64_0.decode(byteArray1);
      Base64.decodeInteger(byteArray1);
      Base64.decodeBase64("]");
      base64_0.hasData();
      base64_0.decode("]");
      byte[] byteArray3 = new byte[8];
      byteArray3[0] = (byte) (-45);
      byteArray3[1] = (byte) (-45);
      byteArray3[2] = (byte)34;
      byteArray3[3] = (byte)60;
      byteArray3[4] = (byte)8;
      byteArray3[5] = (byte) (-121);
      byteArray3[6] = (byte)34;
      byteArray3[7] = (byte) (-60);
      Base64.encodeBase64String(byteArray3);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64.isArrayByteBase64(byteArray0);
      int int0 = 0;
      Base64 base64_0 = new Base64(0, byteArray0, true);
      base64_0.decode(") than the specified maxium size of ");
      byte[] byteArray1 = new byte[1];
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byte byte0 = (byte)82;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte) (-1);
      boolean boolean0 = false;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64.isArrayByteBase64(byteArray1);
      byte[] byteArray2 = null;
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte) (-17);
      Base64.decodeBase64(byteArray0);
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-90);
      byteArray1[1] = (byte)35;
      byteArray1[2] = (byte) (-17);
      Base64 base64_0 = new Base64(50, byteArray1, false);
      Object object0 = base64_0.decode((Object) "org.apache.commons.codec.DecoderException");
      base64_0.decode(object0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int int0 = 0;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte0 = (byte) (-75);
      byteArray0[2] = (byte) (-75);
      Base64 base64_0 = new Base64(0, byteArray0);
      base64_0.decode((Object) "g*}Q0(Loh");
      boolean boolean0 = true;
      Base64.encodeBase64(byteArray0);
      Base64.encodeBase64(byteArray0, true, true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64Chunked(byteArray1);
      base64_0.isUrlSafe();
      try { 
        base64_0.encode((Object) "org.apache.commons.codec.binary.Base64");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = Base64.decodeBase64("");
      byte[] byteArray1 = new byte[5];
      Base64.decodeBase64(byteArray0);
      byteArray1[0] = (byte)53;
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.decodeBase64("");
      Base64.toIntegerBytes(bigInteger0);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)67;
      base64_0.encodeToString(byteArray1);
      byteArray1[3] = (byte) (-65);
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      byteArray1[4] = (byte)0;
      byte[] byteArray3 = base64_0.decode(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray3);
      Base64.encodeBase64URLSafeString(byteArray3);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.xor(bigInteger1);
      Base64.toIntegerBytes(bigInteger0);
      Base64.isArrayByteBase64(byteArray1);
      base64_0.encode(byteArray0, (int) (byte)0, (-3694));
      base64_0.readResults(byteArray2, (-25), 30);
      Base64.encodeBase64(byteArray0, false, false, 0);
      base64_0.readResults(byteArray1, 102, 30);
      Base64.decodeInteger(byteArray0);
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Base64 base64_0 = new Base64(494, (byte[]) null, true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64((byte[]) null);
      Base64.encodeBase64((byte[]) null);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.isBase64((byte)0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      String string0 = "";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      boolean boolean0 = false;
      Base64.encodeBase64(byteArray0, false, false, 17);
      byteArray0[1] = (byte)42;
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64("");
      int int0 = 0;
      base64_0.readResults(byteArray1, 46, 0);
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)54;
      byte byte0 = (byte) (-80);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte)123;
      Base64.isArrayByteBase64(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)123;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-7);
      byteArray1[3] = (byte) (-87);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64 base64_0 = new Base64();
      Base64.decodeBase64(byteArray0);
      base64_0.encode(byteArray0, 38, (int) (byte) (-80));
      Base64.decodeBase64(byteArray1);
      base64_0.avail();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, true, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte)0;
      Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)0);
      base64_0.decode("");
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray1);
      assertEquals(4, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Base64 base64_0 = new Base64();
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte) (-65);
      base64_0.readResults(byteArray0, (-1229), (byte)67);
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte)64;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte) (-65), 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -65
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)0;
      Base64 base64_0 = new Base64(0, byteArray0, false);
      boolean boolean0 = Base64.isBase64((byte)94);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)18;
      byteArray0[6] = (byte)105;
      byteArray0[7] = (byte)57;
      byteArray0[8] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      assertEquals(14, byteArray1.length);
      
      byte[] byteArray2 = new byte[0];
      Base64.decodeInteger(byteArray2);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      byte[] byteArray4 = Base64.decodeBase64(byteArray3);
      Base64.decodeBase64(byteArray4);
      base64_0.encode(byteArray3, 0, 0);
      base64_0.decode("");
      String string0 = Base64.encodeBase64String(byteArray3);
      assertSame(byteArray3, byteArray2);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-82);
      byteArray0[8] = (byte) (-1);
      Base64.isBase64(byteArray0);
      Base64.encodeBase64(byteArray0, false);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      boolean boolean0 = Base64.isBase64("");
      assertTrue(boolean0);
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("hSKLAGxWAK7_", string0);
      
      Base64.isBase64("w#2eVYJJ");
      base64_0.isUrlSafe();
      base64_0.decode("");
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)108, (byte)81}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)86;
      byte byte0 = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-12);
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      Base64.discardWhitespace(byteArray1);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      boolean boolean0 = false;
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false, false);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)86, byteArray3, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [Vv8A9A==]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)66;
      byteArray1[1] = (byte)66;
      byteArray1[2] = (byte)66;
      byteArray1[3] = (byte) (-90);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      assertArrayEquals(new byte[] {(byte)81, (byte)107, (byte)74, (byte)67, (byte)112, (byte)103}, byteArray2);
      
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("QgEA", string0);
      
      byte[] byteArray3 = base64_0.decode("Parameter supplied to Base64 encode is not a byte[]");
      base64_0.decode("");
      byte[] byteArray4 = Base64.decodeBase64(byteArray3);
      assertEquals(0, byteArray4.length);
      assertEquals(30, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-77);
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(1, byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-103);
      byteArray1[2] = (byte) (-86);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte) (-1);
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte) (-1);
      byteArray1[7] = (byte)0;
      byteArray1[8] = (byte)0;
      base64_0.readResults(byteArray1, (-696), 0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-74);
      Base64.encodeBase64(byteArray0, false, false);
      Object object0 = base64_0.decode((Object) "YiRv67=");
      Object object1 = base64_0.encode(object0);
      assertNotSame(object1, object0);
      
      base64_0.avail();
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-93);
      base64_0.encodeToString(byteArray1);
      Base64.decodeBase64(byteArray1);
      byteArray1[1] = (byte) (-109);
      byte[] byteArray2 = base64_0.decode(byteArray1);
      Base64.isBase64((byte)28);
      byte[] byteArray3 = Base64.encodeBase64(byteArray1);
      assertArrayEquals(new byte[] {(byte)111, (byte)53, (byte)77, (byte)61}, byteArray3);
      
      base64_0.encode(byteArray2, 0, (int) (byte) (-93));
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray2, object0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD\u000B\u001CT\u0000\u0000\u0000\u0000\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte) (-22);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)41;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)29;
      byteArray0[8] = (byte) (-89);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(53, byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0006E\uFFFD\u0001\u0000)\uFFFD\u001D\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Base64.isBase64((byte) (-1));
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = base64_0.decode(byteArray0);
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      Base64.encodeBase64URLSafe(byteArray1);
      byteArray0[5] = (byte) (-44);
      base64_0.readResults(byteArray0, 785, 785);
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("_______U\r\n", string0);
      
      base64_0.readResults(byteArray0, (byte) (-44), 0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.shortValueExact();
      bigInteger0.negate();
      BigInteger bigInteger1 = BigInteger.TEN;
      byte[] byteArray2 = bigInteger1.toByteArray();
      bigInteger0.multiply(bigInteger1);
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      assertEquals(0, byteArray3.length);
      
      base64_0.decode((Object) ") than the specified maxium size of ");
      base64_0.avail();
      byte[] byteArray4 = base64_0.encode(byteArray2);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)13, (byte)10}, byteArray4);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte)117;
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64(true);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.shiftLeft(43);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64.toIntegerBytes(bigInteger0);
      base64_0.decode("org.apache.commons.codec.EncoderException");
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.byteValueExact();
      bigInteger0.compareTo(bigInteger1);
      bigInteger1.getLowestSetBit();
      bigInteger1.toString();
      byte[] byteArray2 = Base64.encodeInteger(bigInteger1);
      base64_0.encodeToString(byteArray1);
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger1);
      base64_0.decode("DFY2TnU=");
      Base64.encodeBase64URLSafeString(byteArray3);
      boolean boolean0 = Base64.isArrayByteBase64(byteArray2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-76);
      Base64 base64_0 = new Base64(0, byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-76);
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte) (-88);
      byteArray1[4] = (byte) (-76);
      byteArray1[5] = (byte)0;
      String string0 = base64_0.encodeToString(byteArray1);
      assertEquals("/7T/qLQA", string0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte) (-13);
      byteArray0[6] = (byte)0;
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("AHRi/0LzAA==", string0);
      
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)116;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      assertArrayEquals(new byte[] {(byte)47, (byte)51, (byte)81, (byte)65, (byte)65, (byte)65, (byte)61, (byte)61}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)1;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.readResults(byteArray0, (-1424), (byte)1);
      Base64.isBase64("UfEe0)LQs)Eb\"m9B4{f");
      Base64.decodeBase64((String) null);
      Base64.encodeBase64String(byteArray0);
      base64_0.isUrlSafe();
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)1;
      byteArray2[1] = (byte)72;
      byteArray2[2] = (byte) (-1);
      byteArray2[3] = (byte)1;
      byteArray2[4] = (byte)71;
      byteArray2[5] = (byte) (-1);
      byteArray2[6] = (byte) (-1);
      Base64.encodeBase64Chunked(byteArray2);
      Base64.encodeBase64String((byte[]) null);
      Base64.encodeBase64String(byteArray1);
      Base64.decodeBase64((byte[]) null);
      base64_0.encode((byte[]) null);
      Base64.decodeBase64((String) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.flipBit((byte)1);
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray3, 0, (int) (byte)1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64();
      base64_0.encodeToString(byteArray0);
      base64_0.decode((Object) "AeBgAA==");
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte) (-32);
      byteArray2[1] = (byte)96;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)1;
      byteArray2[4] = (byte)1;
      byteArray2[5] = (byte)96;
      byteArray2[6] = (byte)0;
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray2);
      assertEquals(10, byteArray3.length);
      
      byte[] byteArray4 = base64_0.decode(byteArray1);
      base64_0.readResults(byteArray4, 0, (-1227));
      byte[] byteArray5 = Base64.encodeBase64(byteArray4, true);
      assertArrayEquals(new byte[] {(byte)65, (byte)101, (byte)66, (byte)103, (byte)65, (byte)65, (byte)61, (byte)61, (byte)13, (byte)10}, byteArray5);
  }
}
