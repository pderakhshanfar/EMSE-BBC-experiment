/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 07:52:00 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      bigInteger0.doubleValue();
      Base64 base64_0 = new Base64(93, byteArray0, false);
      base64_0.decode("!_JmOz_");
      int int0 = 0;
      base64_0.decode(byteArray0, 0, 93);
      Random.setNextRandom(76);
      Object object0 = base64_0.decode((Object) "!_JmOz_");
      // Undeclared exception!
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)6;
      byteArray0[0] = (byte)6;
      Base64 base64_0 = new Base64((-2757), byteArray0);
      Base64.encodeBase64(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger1.doubleValue();
      bigInteger0.gcd(bigInteger1);
      bigInteger0.add(bigInteger1);
      Base64.encodeInteger(bigInteger0);
      bigInteger1.byteValueExact();
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-29);
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64((byte) (-29), byteArray0);
      Base64.encodeBase64String(byteArray0);
      base64_0.readResults((byte[]) null, (byte) (-29), 3140);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-29);
      byteArray1[1] = (byte) (-79);
      byteArray1[2] = (byte) (-29);
      byteArray1[3] = (byte) (-29);
      Base64.encodeBase64String(byteArray1);
      base64_0.encode(byteArray0);
      base64_0.decode(byteArray0, (-1220), 0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[2];
      byteArray1[1] = (byte) (-113);
      byteArray1[1] = (byte)63;
      Base64 base64_0 = new Base64(16, byteArray1, true);
      Base64.encodeBase64URLSafe(byteArray1);
      base64_0.encode(byteArray0);
      base64_0.readResults(byteArray1, 75, 47);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte)113;
      byteArray0[6] = (byte)16;
      byteArray0[7] = (byte) (-125);
      byteArray0[8] = (byte) (-55);
      Base64.isArrayByteBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)123;
      byteArray0[7] = (byte)64;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      Base64 base64_0 = new Base64(false);
      base64_0.decode(byteArray1);
      base64_0.decode(byteArray1);
      Base64.encodeBase64(byteArray0);
      base64_0.encode(byteArray1, (-2069), (int) (byte)64);
      base64_0.decode(byteArray0, 1949, 43);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      base64_0.encode(byteArray1);
      Base64.encodeBase64(byteArray1);
      byte[] byteArray2 = new byte[0];
      base64_0.decode(byteArray2);
      try { 
        base64_0.encode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Base64.isBase64((byte)61);
      MockRandom mockRandom0 = new MockRandom((byte)61);
      BigInteger bigInteger0 = BigInteger.probablePrime((byte)61, mockRandom0);
      Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte)61;
      byteArray0[6] = (byte)61;
      byteArray0[7] = (byte)61;
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Random.setNextRandom(10);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)1;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false, (int) (byte)10);
      Base64.isBase64(byteArray1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.not();
      bigInteger0.toByteArray();
      Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64();
      base64_0.avail();
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)1;
      byteArray2[1] = (byte)32;
      byteArray2[2] = (byte) (-16);
      byteArray2[3] = (byte) (-16);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray2, (int) (byte) (-16), (int) (byte)1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -16
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)61;
      Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64((byte)0, (byte[]) null);
      Base64.isArrayByteBase64(byteArray0);
      base64_0.decode("z#GM{{");
      base64_0.readResults((byte[]) null, (byte)98, (byte)0);
      base64_0.isUrlSafe();
      byte[] byteArray1 = Base64.encodeBase64((byte[]) null, false, false, (int) (byte)0);
      assertNull(byteArray1);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.decodeInteger(byteArray1);
      Base64 base64_0 = new Base64(842);
      base64_0.encodeToString(byteArray1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)14;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64(byteArray0, false, true, (int) (byte)14);
      Base64.encodeBase64(byteArray1, false);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.encodeBase64String(byteArray1);
      base64_0.readResults(byteArray0, 0, (byte)14);
      base64_0.decode(byteArray0);
      base64_0.encode(byteArray0, 1, 1114);
      base64_0.avail();
      Base64.encodeBase64(byteArray1, false, true, (int) (byte)14);
      Base64.isArrayByteBase64(byteArray1);
      Base64.encodeBase64URLSafe(byteArray0);
      base64_0.hasData();
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray0, (-148), (-148));
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, (-88), (-88));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.encodeBase64URLSafeString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.decodeBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)89;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 3001, (int) (byte)102);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3001
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Base64.decodeBase64("");
      byte byte0 = (byte) (-40);
      Base64.isBase64((byte) (-40));
      MockRandom mockRandom0 = new MockRandom((byte) (-40));
      // Undeclared exception!
      try { 
        BigInteger.probablePrime((byte) (-40), mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // bitLength < 2
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      BigInteger bigInteger0 = new BigInteger(8223, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Random.setNextRandom(8223);
      Base64 base64_0 = new Base64(997);
      base64_0.encode(byteArray0, 997, 0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Base64 base64_0 = new Base64((-655));
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)30;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.valueOf(4546L);
      bigInteger0.byteValueExact();
      bigInteger0.add(bigInteger1);
      boolean boolean0 = false;
      boolean boolean1 = true;
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        mockRandom0.ints((-2226L), (int) (byte)30, 8192);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size must be non-negative
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      BigInteger bigInteger0 = new BigInteger(8223, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Random.setNextRandom(8223);
      Base64 base64_0 = new Base64(70);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.decode("KO&nyV5V8uS");
      String string0 = Base64.encodeBase64URLSafeString(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray1);
      Object object0 = base64_0.decode((Object) string0);
      Base64 base64_1 = new Base64(64);
      Object object1 = base64_1.encode(object0);
      // Undeclared exception!
      base64_0.encode(object1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte) (-119);
      byteArray0[6] = (byte) (-69);
      byteArray0[7] = (byte) (-37);
      byteArray0[8] = (byte)50;
      Base64.discardWhitespace(byteArray0);
      Random.setNextRandom((byte)32);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8223, mockRandom1);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(805);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64URLSafeString(byteArray1);
      base64_0.decode(byteArray0, 0, 8223);
      Base64.toIntegerBytes(bigInteger0);
      base64_0.decode(byteArray1, (-1265), 0);
      base64_0.readResults(byteArray0, 112, 805);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      MockRandom mockRandom1 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8223, mockRandom1);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Random.setNextRandom(8223);
      Base64 base64_0 = new Base64(805);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64URLSafeString(byteArray1);
      base64_0.decode(byteArray0, 0, 8223);
      Random.setNextRandom(23);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      MockRandom mockRandom1 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8223, mockRandom1);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Random.setNextRandom(8223);
      Base64 base64_0 = new Base64(805);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64URLSafeString(byteArray1);
      base64_0.decode(byteArray1, 805, 2825);
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte)0;
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64((byte) (-34), byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      Base64.isBase64((byte)0);
      Base64.isArrayByteBase64(byteArray0);
      base64_0.decode(byteArray2, 2, (int) (byte)0);
      base64_0.decode(byteArray1, 2, 116);
      base64_0.encode(byteArray2);
      Base64.discardWhitespace(byteArray2);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      mockRandom0.longs();
      MockRandom mockRandom1 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(1361, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Random.setNextRandom(1361);
      int int0 = 805;
      Base64 base64_0 = new Base64(51);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 805, 1354);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 805
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.min(bigInteger1);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      bigInteger0.longValueExact();
      BigInteger bigInteger2 = bigInteger0.nextProbablePrime();
      Base64 base64_0 = new Base64(9993);
      BigInteger bigInteger3 = new BigInteger(byteArray0);
      BigInteger bigInteger4 = bigInteger3.xor(bigInteger0);
      bigInteger0.compareTo(bigInteger3);
      bigInteger0.divideAndRemainder(bigInteger3);
      byte[] byteArray1 = base64_0.decode(",Kt B");
      Base64.isBase64(byteArray0);
      Base64.isBase64((byte)127);
      bigInteger3.mod(bigInteger4);
      Base64.encodeInteger(bigInteger2);
      base64_0.decode((String) null);
      Base64.encodeBase64(byteArray0, false, false, 9993);
      base64_0.readResults(byteArray1, (-1), 30);
      Random.setNextRandom(1395);
      Random.setNextRandom((-1));
      Base64.toIntegerBytes(bigInteger3);
      base64_0.avail();
      byte[] byteArray2 = base64_0.encode((byte[]) null);
      assertNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64.decodeBase64(byteArray0);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      MockRandom mockRandom1 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(1717986918, mockRandom0);
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte)25;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(3, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)17, (byte) (-12), (byte)25}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Base64.isBase64((byte) (-116));
      Base64 base64_0 = new Base64();
      Object object0 = base64_0.decode((Object) "XyL8TWJ&jy@t0.69na");
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger0);
      base64_0.encode(object0);
      byte[] byteArray0 = new byte[1];
      base64_0.readResults(byteArray0, (byte) (-116), (byte) (-116));
      byteArray0[0] = (byte)32;
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-116);
      byteArray1[1] = (byte)31;
      Base64.encodeBase64(byteArray0);
      byteArray1[2] = (byte) (-116);
      byteArray1[3] = (byte) (-116);
      byteArray1[4] = (byte) (-116);
      byteArray1[5] = (byte) (-116);
      byteArray1[6] = (byte) (-116);
      byteArray1[7] = (byte) (-116);
      base64_0.decode(byteArray0, (int) (byte) (-116), (int) (byte) (-116));
      base64_0.decode(byteArray1);
      try { 
        base64_0.encode((Object) "UTF-16BE");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.decodeBase64("");
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      BigInteger bigInteger0 = new BigInteger(3260, mockRandom0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertEquals(540, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte) (-42);
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)38;
      byteArray0[5] = (byte) (-23);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.floatValue();
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      assertEquals(12, byteArray2.length);
      
      byteArray0[6] = (byte)1;
      byte[] byteArray3 = new byte[0];
      byte[] byteArray4 = Base64.encodeBase64(byteArray3);
      byte[] byteArray5 = Base64.decodeBase64(byteArray3);
      byteArray0[7] = (byte)56;
      byteArray0[8] = (byte) (-56);
      int int0 = base64_0.readResults(byteArray0, 677, 5774);
      assertEquals(0, int0);
      
      Base64.decodeInteger(byteArray4);
      assertSame(byteArray4, byteArray5);
      
      String string0 = base64_0.encodeToString(byteArray1);
      assertEquals("QUFBQUFBQUFBQUFB", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      Base64 base64_1 = new Base64(3, (byte[]) null, false);
      String string0 = base64_0.encodeToString((byte[]) null);
      assertNull(string0);
      
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null, true);
      assertNull(byteArray0);
      
      Base64.isBase64((byte) (-20));
      base64_0.encode((byte[]) null);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64((byte[]) null);
      Base64 base64_1 = new Base64(64, (byte[]) null, false);
      Base64 base64_2 = new Base64((-994), (byte[]) null, false);
      // Undeclared exception!
      try { 
        base64_2.decode((byte[]) null, 0, 76);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = Base64.decodeBase64("#Kc.5`c/*Z=ETl{");
      Base64.encodeBase64URLSafeString(byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      String string0 = Base64.encodeBase64String((byte[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)0;
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(80, byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      Base64.isBase64((byte)0);
      Base64.isArrayByteBase64(byteArray0);
      base64_0.decode(byteArray2, (int) (byte)5, 0);
      //  // Unstable assertion: assertEquals(14, byteArray2.length);
      
      base64_0.decode(byteArray1, 0, 3157);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)52, (byte)119, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61, (byte)0, (byte)0}, byteArray1);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      boolean boolean0 = Base64.isBase64((byte)123);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[24];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte) (-65);
      byteArray0[9] = (byte)9;
      Base64.isBase64((byte)1);
      Base64 base64_0 = new Base64((byte)9, byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 0, 8160);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 24
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      Base64.decodeBase64((byte[]) null);
      Base64.encodeBase64Chunked((byte[]) null);
      base64_0.encode((byte[]) null, 77, (-1));
      base64_0.decode((byte[]) null, (-1516), (-18));
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null, false, true, (-1));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("=");
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("", string0);
      
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[24];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)0;
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(9, byteArray0, true);
      base64_0.encodeToString(byteArray0);
      Base64.encodeBase64(byteArray1, true);
      boolean boolean0 = Base64.isBase64((byte) (-71));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = true;
      Base64.encodeBase64(byteArray0, true);
      byte byte0 = (byte)3;
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_1 = new Base64(106, byteArray1, true);
      // Undeclared exception!
      try { 
        base64_1.encodeToString(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null);
      assertNull(byteArray0);
      
      Base64.decodeBase64((byte[]) null);
      Base64.isBase64("");
      base64_0.encode((byte[]) null, 77, (-1));
      Base64.decodeBase64("");
      Base64 base64_1 = new Base64();
      base64_1.decode((byte[]) null);
      assertFalse(base64_1.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte) (-119);
      byteArray0[6] = (byte) (-99);
      byteArray0[7] = (byte)99;
      byteArray0[8] = (byte) (-124);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((short) (-3897), bigInteger0.shortValue());
      
      byte[] byteArray1 = new byte[0];
      int int0 = base64_0.readResults(byteArray1, 0, 0);
      assertEquals(0, int0);
      
      base64_0.decode((byte[]) null, (-113), (-1328));
      Object object0 = base64_0.decode((Object) "m0xT{Ihv9%");
      Object object1 = base64_0.decode(object0);
      assertNotSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      boolean boolean0 = Base64.isBase64((byte)78);
      assertTrue(boolean0);
      
      Base64.discardWhitespace(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)78;
      byteArray1[1] = (byte)78;
      byteArray1[2] = (byte) (-12);
      byteArray1[3] = (byte)78;
      byteArray1[4] = (byte)78;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)78, byteArray1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [NN\uFFFDNN]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null);
      assertNull(byteArray0);
      
      byte[] byteArray1 = Base64.decodeBase64((byte[]) null);
      assertNull(byteArray1);
      
      Base64.isBase64("");
      base64_0.encode((byte[]) null, 77, (-1));
      Base64.decodeBase64("");
      Base64 base64_1 = new Base64();
      base64_1.encode((byte[]) null);
      assertFalse(base64_1.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      boolean boolean0 = Base64.isBase64("Aw={av.\b`");
      assertFalse(boolean0);
      
      base64_0.encode(byteArray0, (int) (byte)17, (-464));
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray1 = Base64.decodeBase64("UTF-16LE");
      Base64 base64_1 = new Base64();
      int int0 = base64_1.readResults(byteArray1, (byte)0, 76);
      assertEquals(0, int0);
      
      Base64 base64_2 = new Base64(64, byteArray0, false);
      base64_2.decode((Object) "UTF-16LE");
      int int1 = base64_2.readResults(byteArray1, (-1), (byte)0);
      assertEquals((-1), int1);
      
      Base64.isBase64((byte)0);
      base64_1.decode(byteArray1, (-464), (-294));
      assertEquals(6, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)81, (byte)49, (byte)126, (byte) (-41), (byte) (-94), (byte) (-60)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.decode(">IouDso _YJg");
      byte[] byteArray0 = new byte[0];
      base64_0.encode(byteArray0);
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[24];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte) (-60);
      byteArray0[9] = (byte)9;
      Base64.isBase64((byte)1);
      Base64 base64_0 = new Base64((byte) (-60), byteArray0);
      assertFalse(base64_0.isUrlSafe());
      
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64((byte[]) null);
      Base64.decodeBase64((byte[]) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger0);
      Base64.isBase64("");
      base64_0.encode((byte[]) null, 77, (-1));
      Base64.encodeBase64((byte[]) null, true, true);
      Base64.encodeBase64URLSafe((byte[]) null);
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null, false);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(55, byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)94;
      byteArray1[1] = (byte)93;
      byteArray1[2] = (byte) (-98);
      byteArray1[3] = (byte) (-9);
      byteArray1[4] = (byte) (-16);
      byteArray1[5] = (byte)91;
      byteArray1[6] = (byte) (-99);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)101;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-25);
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_1 = new Base64();
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false, true, (int) (byte) (-25));
      Base64.isArrayByteBase64(byteArray0);
      Base64.encodeBase64URLSafe(byteArray1);
      base64_0.hasData();
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = null;
      try {
        bigInteger2 = new BigInteger(byteArray3);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte)29;
      byteArray0[6] = (byte) (-99);
      byteArray0[7] = (byte) (-75);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertArrayEquals(new byte[] {(byte)50}, byteArray1);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-48);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_1 = new Base64((byte) (-48), byteArray1, true);
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte) (-48);
      byteArray2[1] = (byte) (-48);
      byteArray2[2] = (byte)61;
      byteArray2[3] = (byte) (-48);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)48, (byte)78, (byte)65, (byte)57, (byte)48, (byte)65, (byte)61, (byte)61, (byte)0, (byte)0}, byteArray3);
      //  // Unstable assertion: assertEquals(10, byteArray3.length);
      
      base64_0.hasData();
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray4 = Base64.encodeInteger(bigInteger0);
      //  // Unstable assertion: assertEquals(0, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64.encodeBase64String(byteArray0);
      Base64 base64_1 = new Base64(true);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true, 108);
      Base64.encodeBase64URLSafeString(byteArray1);
      String string0 = Base64.encodeBase64String(byteArray0);
      //  // Unstable assertion: assertEquals("AA==", string0);
      
      int int0 = base64_0.readResults(byteArray0, 76, 108);
      //  // Unstable assertion: assertEquals(0, int0);
      
      byte[] byteArray3 = new byte[1];
      byteArray3[0] = (byte)0;
      base64_0.encode(byteArray3, 0, (-1522));
      base64_1.avail();
      Base64.encodeBase64(byteArray2, false, false, 108);
      boolean boolean0 = Base64.isArrayByteBase64(byteArray2);
      //  // Unstable assertion: assertFalse(boolean0);
      
      Base64.encodeBase64URLSafe(byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)81, (byte)85, (byte)69, (byte)57, (byte)80, (byte)81, (byte)0, (byte)0}, byteArray2);
      
      base64_0.hasData();
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray4 = Base64.encodeInteger(bigInteger0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray4);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)101;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-25);
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_1 = new Base64();
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64("org.apache.commons.codec.binary.Base64");
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray4 = Base64.encodeBase64(byteArray2, true);
      base64_0.encodeToString(byteArray4);
      Base64.encodeBase64(byteArray3);
      Base64.encodeBase64(byteArray0, true);
      byte[] byteArray5 = Base64.CHUNK_SEPARATOR;
      assertNotSame(byteArray5, byteArray3);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte) (-48);
      base64_0.encode(byteArray0, (-506), 0);
      byte[] byteArray1 = Base64.decodeBase64("");
      boolean boolean0 = Base64.isBase64("Parameter supplied to Base64 encode is not a byte[]");
      base64_0.decode(byteArray1, (int) (byte) (-48), (-1));
      assertTrue(base64_0.isUrlSafe());
      
      boolean boolean1 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, true);
      assertEquals(0, byteArray2.length);
      
      String string0 = Base64.encodeBase64URLSafeString((byte[]) null);
      assertNull(string0);
      
      byte[] byteArray3 = new byte[3];
      byteArray3[0] = (byte) (-48);
      byteArray3[1] = (byte) (-48);
      byteArray3[2] = (byte) (-48);
      byte[] byteArray4 = Base64.decodeBase64(byteArray3);
      assertEquals(0, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[0];
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_1 = new Base64();
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      Base64 base64_2 = new Base64(false);
      byte[] byteArray3 = base64_2.decode(byteArray1);
      Base64 base64_3 = new Base64((byte)17, byteArray2);
      base64_3.decode(byteArray3);
      Base64.encodeBase64(byteArray2);
      int int0 = 64;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 76, 7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 76
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64((-1963), byteArray0);
      base64_0.readResults(byteArray0, 677, 61);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 1, 66);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)0;
      byte byte0 = (byte)42;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      Base64.isBase64(";Z=");
      Base64 base64_0 = new Base64((-1620));
      base64_0.encode(byteArray0, (int) (byte)0, (int) (byte) (-29));
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger0);
      Base64.decodeBase64(";Z=");
      Object object0 = new Object();
      Base64 base64_1 = new Base64();
      try { 
        base64_1.decode((Object) base64_0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte) (-47);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64((byte[]) null);
      Base64.decodeBase64((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)0;
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(80, byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      Base64.isBase64((byte)0);
      Base64.isArrayByteBase64(byteArray0);
      base64_0.decode(byteArray2, (int) (byte)5, 0);
      base64_0.decode(byteArray1, 0, 3157);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      assertNotSame(byteArray3, byteArray2);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte) (-48);
      base64_0.encode(byteArray0, (-506), 0);
      byte[] byteArray1 = Base64.decodeBase64("");
      Base64.isBase64("Parameter supplied to Base64 encode is not a byte[]");
      base64_0.decode(byteArray1, (int) (byte) (-48), (-1));
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean0);
      
      int int0 = base64_0.readResults(byteArray0, (-506), (-1));
      assertEquals((-1), int0);
      
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = null;
      Base64.encodeBase64((byte[]) null);
      Base64.decodeBase64((byte[]) null);
      int int0 = 0;
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte) (-1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64 base64_0 = new Base64(true);
      base64_0.isUrlSafe();
      Base64.encodeBase64(byteArray1, true, true, (int) (byte)93);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)66, (byte)100, (byte)120, (byte)80, (byte)56, (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(80, byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)42;
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)42;
      byteArray1[4] = (byte) (-1);
      byteArray1[5] = (byte) (-29);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray2);
      Base64.isBase64((byte) (-1));
      Base64.isArrayByteBase64(byteArray3);
      base64_0.decode(byteArray1, (int) (byte)0, 0);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray3, 8188, 8188);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8188
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = true;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      byte byte0 = (byte)0;
      Base64.isArrayByteBase64(byteArray1);
      int int0 = 80;
      Base64 base64_1 = null;
      try {
        base64_1 = new Base64((byte)0, byteArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [AA==\u0011\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)17;
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false, true);
      Base64 base64_1 = new Base64(true);
      byte[] byteArray3 = base64_0.decode(byteArray0);
      Base64 base64_2 = new Base64(78, byteArray0);
      byte[] byteArray4 = base64_2.decode(byteArray1);
      Base64.encodeBase64(byteArray3);
      base64_2.encode(byteArray3, 7, 64);
      base64_0.decode(byteArray2, (int) (byte)64, 1984);
      Base64.decodeInteger(byteArray1);
      base64_1.encode(byteArray4);
      byte[] byteArray5 = Base64.encodeBase64(byteArray4);
      base64_2.decode(byteArray5);
      try { 
        base64_1.encode((Object) base64_0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64((byte[]) null);
      Base64.decodeBase64((byte[]) null);
      Base64.isBase64("B~");
      Base64 base64_1 = new Base64(76);
      // Undeclared exception!
      try { 
        base64_1.encode((byte[]) null, 64, 91);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64((byte[]) null);
      Base64.decodeBase64((byte[]) null);
      Base64.isBase64("");
      base64_0.encode((byte[]) null, 77, (-1));
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64 base64_1 = new Base64();
      base64_1.decode((Object) "");
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, (-1264), (-2867));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64((byte[]) null);
      Base64.decodeBase64((byte[]) null);
      Base64.isBase64("\u0005Q'xWOjjD_?S?zHT>");
      base64_0.encode((byte[]) null, 0, (-1));
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.decodeBase64("");
      Object object0 = base64_0.decode((Object) "\u0005Q'xWOjjD_?S?zHT>");
      Object object1 = base64_0.decode(object0);
      base64_0.decode(object1);
      int int0 = base64_0.readResults(byteArray0, (-569), 0);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)0, byteArray1, false);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false);
      base64_0.hasData();
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false, false, 219);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)90, (byte)50, (byte)100, (byte)66, (byte)80, (byte)81, (byte)61, (byte)61}, byteArray3);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64((byte[]) null);
      Base64.decodeBase64((byte[]) null);
      Base64.encodeBase64((byte[]) null, true, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)93;
      byteArray0[2] = (byte) (-60);
      byteArray0[5] = (byte) (-60);
      byteArray0[6] = (byte) (-60);
      byteArray0[7] = (byte)93;
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64((byte[]) null, false);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.isBase64((byte)0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)0;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [AA==]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(80, byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)42;
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)42;
      byteArray1[4] = (byte) (-1);
      byteArray1[5] = (byte) (-29);
      base64_0.readResults(byteArray1, 1896, 1);
      base64_0.isUrlSafe();
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, true, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte)0;
      Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.decodeBase64((String) null);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)0, 24);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)81;
      byteArray0[0] = (byte)81;
      byte byte1 = (byte) (-16);
      byteArray0[1] = (byte) (-16);
      Base64.decodeInteger(byteArray0);
      String string0 = null;
      Base64.decodeBase64((String) null);
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)0, byteArray1, false);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false);
      assertArrayEquals(new byte[] {(byte)103, (byte)103, (byte)65, (byte)61}, byteArray2);
      
      base64_0.hasData();
      assertEquals(0, byteArray1.length);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      assertEquals(0, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = 905;
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(905, byteArray0, true);
      Base64.decodeBase64(byteArray0);
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte)28;
      byteArray0[7] = (byte)40;
      byteArray0[8] = (byte)0;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)40, (int) (byte)14);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 40
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)61;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, true);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray2);
      assertEquals((byte)48, bigInteger0.byteValue());
      
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
      
      Base64 base64_0 = new Base64(true);
      int int0 = base64_0.avail();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)67;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger0.remainder(bigInteger1);
      bigInteger1.toString(0);
      bigInteger0.byteValueExact();
      BigInteger bigInteger2 = bigInteger0.pow(1209);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64.isBase64(byteArray1);
      bigInteger0.toString((int) (byte)1);
      Base64 base64_0 = new Base64(false);
      BigInteger.valueOf((byte)1);
      base64_0.readResults(byteArray1, (byte)67, 29);
      bigInteger0.toString();
      Base64.encodeInteger(bigInteger2);
      Base64.toIntegerBytes(bigInteger0);
      try { 
        base64_0.decode((Object) bigInteger1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("+MyidGLc,f1=g$6l");
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-537), byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD\u0322tb\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte)100;
      Base64.encodeBase64URLSafeString(byteArray0);
      boolean boolean0 = false;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000\u0000zp%d]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      byteArray0[0] = (byte)0;
      base64_0.decode(byteArray0, (int) (byte)0, (int) (byte)0);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte) (-23);
      byteArray2[1] = (byte) (-28);
      byteArray2[2] = (byte)38;
      byteArray2[3] = (byte)102;
      byteArray2[4] = (byte) (-71);
      base64_0.encodeToString(byteArray1);
      byteArray2[5] = (byte)3;
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, false);
      base64_0.decode("");
      Base64.encodeBase64Chunked(byteArray3);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.isBase64((byte)0);
      Base64.isArrayByteBase64(byteArray2);
      base64_0.decode(byteArray2, 0, 0);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray3, (int) (byte)0, 2200);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Base64 base64_0 = new Base64((-2153));
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-40);
      Base64.encodeBase64URLSafe(byteArray0);
      byteArray0[3] = (byte) (-62);
      Base64.encodeBase64Chunked(byteArray1);
      byteArray0[4] = (byte)118;
      byte[] byteArray2 = base64_0.encode(byteArray0);
      Base64.encodeBase64String(byteArray2);
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-123);
      Base64 base64_0 = new Base64(1992, byteArray0);
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("yYU=", string0);
      
      String string1 = base64_0.encodeToString(byteArray0);
      assertEquals("yYU=\u0245", string1);
      
      base64_0.decode("");
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = null;
      boolean boolean0 = false;
      Base64.encodeBase64((byte[]) null, false, true);
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)38;
      Base64.encodeBase64(byteArray0, true, true, (int) (byte)38);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)38;
      base64_0.encodeToString(byteArray0);
      byteArray1[1] = (byte)38;
      byteArray1[2] = (byte)0;
      base64_0.encode(byteArray1, (int) (byte)38, (-3541));
      base64_0.decode(byteArray1);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-65);
      byte byte0 = (byte)47;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)12;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)12, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD/\f]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)17;
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64.encodeBase64String(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64("XY5NlLOFHz");
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, false);
      base64_0.encodeToString(byteArray0);
      Base64.encodeBase64(byteArray3);
      Base64.encodeBase64(byteArray2, true);
      byte[] byteArray4 = new byte[8];
      byteArray4[0] = (byte)17;
      byteArray4[1] = (byte)17;
      byteArray4[2] = (byte)17;
      byteArray4[3] = (byte)0;
      byteArray4[4] = (byte)0;
      byteArray4[5] = (byte)17;
      byteArray4[6] = (byte)0;
      byteArray4[7] = (byte) (-48);
      base64_0.encode(byteArray4, (int) (byte)17, (int) (byte) (-48));
      byte[] byteArray5 = Base64.decodeBase64("");
      Base64.isBase64("-");
      base64_0.decode(byteArray0, (int) (byte)0, (int) (byte)17);
      Base64.isArrayByteBase64(byteArray0);
      Base64.encodeBase64(byteArray5, false, true);
      Base64.encodeBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)78;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64(byteArray0);
      Base64.decodeInteger(byteArray1);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)78, byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFDN]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte) (-34);
      Base64 base64_0 = new Base64((-3387), byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-34);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)6;
      byteArray1[4] = (byte)1;
      byteArray1[5] = (byte)6;
      byteArray1[6] = (byte)23;
      byteArray1[7] = (byte)23;
      byte[] byteArray2 = base64_0.encode(byteArray1);
      assertEquals(12, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)0;
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)61;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64((byte)0, (byte[]) null);
      Base64.isArrayByteBase64(byteArray0);
      base64_0.decode("z#GM{{");
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.subtract(bigInteger1);
      bigInteger0.toByteArray();
      base64_0.encodeToString(byteArray1);
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64(byteArray0, true, true, 70);
      Base64.encodeBase64(byteArray0, false);
      base64_0.encode(byteArray2, 1, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte)46;
      byte byte0 = (byte)19;
      byteArray0[4] = (byte)19;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)83;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD'\uFFFD.\u0013\u0000S]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Base64.isBase64((byte)0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      Base64.isArrayByteBase64(byteArray2);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      int int0 = bigInteger1.bitCount();
      bigInteger0.not();
      bigInteger1.bitCount();
      bigInteger0.divideAndRemainder(bigInteger1);
      Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(true);
      int int1 = base64_0.readResults(byteArray0, 1301, 4147);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      assertTrue(base64_0.isUrlSafe());
      
      byte[] byteArray0 = new byte[4];
      Base64.decodeInteger(byteArray0);
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte) (-89);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      assertEquals(10, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)99, (byte)97, (byte)99, (byte)65, (byte)65, (byte)65, (byte)61, (byte)61, (byte)13, (byte)10}, byteArray1);
      
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)31;
      byte[] byteArray2 = base64_0.encode(byteArray0);
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("cacAHw\r\n", string0);
      
      base64_0.avail();
      Base64.isBase64((byte)0);
      Base64.encodeBase64(byteArray2, false, false);
      byte[] byteArray3 = Base64.decodeBase64("OOaC:r9)>v/6S~U\"Me<");
      assertEquals(9, byteArray3.length);
      assertArrayEquals(new byte[] {(byte)56, (byte) (-26), (byte) (-126), (byte) (-81), (byte) (-37), (byte) (-1), (byte) (-23), (byte)37, (byte)12}, byteArray3);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      boolean boolean0 = false;
      Base64.encodeBase64(byteArray0, false);
      Base64.encodeBase64String(byteArray0);
      boolean boolean1 = false;
      Base64 base64_0 = new Base64(false);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, true, (int) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null);
      assertNull(byteArray0);
      
      Base64.decodeBase64((byte[]) null);
      Base64.isBase64("\u0005Q'xWOjjD_?S?zHT>");
      base64_0.encode((byte[]) null, (-1), 0);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray1);
      
      Base64.decodeBase64("");
      base64_0.decode((Object) "H/$>3/}8]8p4sp]");
      int int0 = base64_0.readResults((byte[]) null, 4139, 1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = 962;
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64(962, (byte[]) null);
      try { 
        base64_0.encode((Object) "org.apache.commons.codec.DecoderException");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-50);
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)66;
      byteArray0[7] = (byte)0;
      boolean boolean0 = true;
      Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(47, byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u001F\uFFFD\u0000\uFFFD\u0006\u0000B\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }
}
