/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 10:55:39 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(160L);
      BigInteger bigInteger0 = new BigInteger(8154, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_0 = new Base64(5);
      mockRandom0.longs();
      base64_0.encode((byte[]) null);
      Base64.toIntegerBytes(bigInteger0);
      base64_0.encode(byteArray2, 76, 2395);
      base64_0.encode(byteArray1, 98, 1012);
      base64_0.decode(byteArray0, 231, 238);
      Base64.isBase64(byteArray2);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, 98, 2395);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1856
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)3;
      byteArray0[4] = (byte)64;
      Base64 base64_0 = new Base64(5, byteArray0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      base64_0.encode(byteArray0, (int) (byte)0, (int) (byte)3);
      base64_0.encode(byteArray0, 5, (-115));
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64(byteArray1, false, true, 3);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)9;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte)13;
      Base64.isBase64(byteArray0);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger((byte)39, (byte)13, mockRandom0);
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte)64;
      Base64 base64_0 = new Base64(1, byteArray0);
      base64_0.encode(byteArray0, (int) (byte)1, (int) (byte)1);
      base64_0.encode(byteArray0, 1, (-115));
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(120L);
      BigInteger bigInteger0 = new BigInteger(8154, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      Base64 base64_0 = new Base64(5);
      Base64.encodeBase64URLSafe(byteArray1);
      base64_0.encode(byteArray3, 76, 2366);
      byte[] byteArray4 = new byte[9];
      byteArray4[0] = (byte)2;
      byteArray4[1] = (byte) (-13);
      byteArray4[3] = (byte)21;
      byteArray4[4] = (byte)109;
      base64_0.encode(byteArray0, 3100, (-1352));
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray1, (byte) (-13), (byte)109);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = "";
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(1006, byteArray0);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(76L);
      mockRandom0.nextInt();
      BigInteger bigInteger0 = new BigInteger(8188, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      Base64 base64_0 = new Base64(13);
      // Undeclared exception!
      Base64.encodeBase64URLSafe(byteArray3);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(76L);
      int int0 = Base64.MIME_CHUNK_SIZE;
      BigInteger bigInteger0 = new BigInteger(8188, mockRandom0);
      mockRandom0.nextBoolean();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      bigInteger0.setBit(64);
      Base64.isBase64("org.apache.commons.codec.DecoderException");
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      String string0 = Base64.encodeBase64URLSafeString(byteArray2);
      Base64.decodeBase64(string0);
      Base64.encodeBase64Chunked(byteArray2);
      // Undeclared exception!
      Base64.encodeBase64URLSafeString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(76L);
      int int0 = Base64.MIME_CHUNK_SIZE;
      BigInteger bigInteger0 = new BigInteger(8188, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64(byteArray0, true);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      String string0 = Base64.encodeBase64URLSafeString(byteArray2);
      byte[] byteArray3 = Base64.decodeBase64(string0);
      Base64.isBase64(byteArray3);
      Base64.encodeInteger(bigInteger0);
      // Undeclared exception!
      base64_0.encode(byteArray1, 76, 1598);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(76L);
      mockRandom0.nextInt();
      BigInteger bigInteger0 = new BigInteger(8180, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray0, 0, 69);
      base64_0.readResults(byteArray0, 73, 65);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(76L);
      int int0 = Base64.MIME_CHUNK_SIZE;
      BigInteger bigInteger0 = new BigInteger(8188, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      String string0 = Base64.encodeBase64URLSafeString(byteArray2);
      Base64.decodeBase64(string0);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      byte[] byteArray4 = new byte[9];
      byteArray4[0] = (byte) (-105);
      // Undeclared exception!
      Base64.encodeBase64Chunked(byteArray3);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(76L);
      mockRandom0.nextInt();
      BigInteger bigInteger0 = new BigInteger(8188, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray2);
      String string0 = Base64.encodeBase64URLSafeString(byteArray2);
      Base64.decodeBase64(string0);
      // Undeclared exception!
      base64_0.encode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte) (-13);
      byteArray0[7] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      base64_0.decode(byteArray1, (int) (byte)0, (int) (byte)17);
      base64_0.avail();
      Base64.discardWhitespace(byteArray1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(4L);
      mockRandom0.nextInt();
      BigInteger bigInteger0 = new BigInteger(8188, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64.encodeBase64Chunked(byteArray1);
      // Undeclared exception!
      base64_0.encodeToString(byteArray1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(4L);
      mockRandom0.nextInt();
      BigInteger bigInteger0 = new BigInteger(8188, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      mockRandom0.ints();
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray3 = base64_0.decode(byteArray2);
      Base64 base64_1 = new Base64();
      // Undeclared exception!
      Base64.encodeBase64(byteArray3, false, false);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64(true);
      MockRandom mockRandom0 = new MockRandom(76);
      BigInteger bigInteger0 = new BigInteger(8215, mockRandom0);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_2 = new Base64(true);
      base64_2.encode(byteArray0);
      Base64.encodeInteger(bigInteger0);
      mockRandom0.nextFloat();
      base64_1.decode(byteArray0, 110, 1133);
      try { 
        base64_2.decode((Object) base64_0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)102;
      byte byte0 = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)6;
      boolean boolean0 = true;
      int int0 = 6;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 6);
      Random.setNextRandom((byte)2);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)102, byteArray1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [ZgIG\uFFFD\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Base64 base64_0 = new Base64(4, (byte[]) null, false);
      Base64.decodeBase64((byte[]) null);
      base64_0.encode((byte[]) null, 4, (-1));
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, 8192, 8192);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      MockRandom mockRandom0 = new MockRandom(4L);
      mockRandom0.nextInt();
      BigInteger bigInteger0 = new BigInteger(1908874353, mockRandom0);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.decodeBase64("orq.apache.commons.codec.DecoderException");
      Base64 base64_0 = new Base64(9, byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 2, 496);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 27
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      boolean boolean0 = Base64.isBase64((byte)61);
      //  // Unstable assertion: assertTrue(boolean0);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true, 35);
      //  // Unstable assertion: assertEquals(5, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)62;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      base64_0.decode(byteArray1, 0, (int) (byte)62);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)80, (byte)106, (byte)52, (byte)61, (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(477, mockRandom0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertEquals(76, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = base64_0.decode(".OdZ");
      assertArrayEquals(new byte[] {(byte)57, (byte) (-42)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)62;
      byteArray1[1] = (byte)0;
      byteArray1[3] = (byte)9;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)103;
      byteArray1[6] = (byte)56;
      byteArray1[7] = (byte)40;
      Base64.discardWhitespace(byteArray1);
      Random.setNextRandom((byte) (-62));
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      assertEquals(7, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(496, mockRandom0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertEquals(80, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      bigInteger0.floatValue();
      bigInteger0.intValueExact();
      byte[] byteArray1 = new byte[0];
      base64_0.encode(byteArray1, (-350), (-1571));
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, (-350), (-350));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64(4, byteArray0);
      byte[] byteArray1 = base64_0.decode("UTF-16BE");
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertEquals(6, byteArray2.length);
      
      String string0 = base64_0.encodeToString(byteArray1);
      //  // Unstable assertion: assertEquals("UTF+\u0000\u000016BE\u0000\u0000", string0);
      
      base64_0.decode((Object) "UTF-16BE");
      base64_0.encode(byteArray1);
      boolean boolean0 = Base64.isBase64(";WV/|3KD<g");
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      bigInteger0.clearBit(1563);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)81, (byte)50, (byte)99, (byte)57, (byte)80, (byte)81, (byte)61, (byte)61, (byte)0, (byte)0}, byteArray1);
      
      base64_0.decode(byteArray0, 0, 64);
      base64_0.readResults(byteArray0, 0, 0);
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(1455);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)5;
      byteArray2[2] = (byte)68;
      byteArray2[3] = (byte) (-29);
      byteArray2[4] = (byte) (-66);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray2, 1, 20);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(59);
      base64_0.encode(byteArray0, (-1431655764), (-1431655764));
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      base64_0.decode(byteArray0, 108, 13);
      boolean boolean0 = base64_0.hasData();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64String(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, 0, 685);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(1455, byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte)61;
      byteArray1[2] = (byte) (-5);
      byteArray1[3] = (byte)6;
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("Q2c9PQ==", string0);
      
      Base64 base64_1 = new Base64(0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(10, byteArray1.length);
      
      base64_1.decode(byteArray0, 0, 64);
      boolean boolean0 = base64_0.hasData();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray3 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64(1436, byteArray2, false);
      Base64.encodeBase64URLSafe(byteArray1);
      base64_0.encode((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)1;
      Base64.discardWhitespace(byteArray2);
      byte[] byteArray3 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64((-441), byteArray0, true);
      base64_0.decode(byteArray1, 0, (int) (byte)1);
      byte[] byteArray4 = Base64.encodeBase64URLSafe(byteArray2);
      base64_0.encode(byteArray0);
      base64_0.encode(byteArray4);
      Base64.isBase64(byteArray3);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)12;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      Base64 base64_0 = new Base64();
      byte[] byteArray3 = new byte[6];
      byteArray3[0] = (byte)12;
      byteArray3[1] = (byte)96;
      byteArray3[2] = (byte)96;
      byteArray3[3] = (byte)12;
      byteArray3[4] = (byte) (-59);
      byteArray3[5] = (byte)12;
      Base64.encodeBase64String(byteArray3);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray2, 7, 1065);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.decode((Object) "");
      Base64 base64_1 = new Base64(64, (byte[]) null);
      base64_1.decode((byte[]) null, (-1681), (-1681));
      byte[] byteArray0 = Base64.decodeBase64((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64 base64_0 = new Base64(false);
      assertFalse(base64_0.isUrlSafe());
      
      Base64 base64_1 = new Base64(true);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = new BigInteger(byteArray1);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64((-1177), byteArray0, false);
      byte[] byteArray2 = base64_0.encode(byteArray0);
      boolean boolean0 = Base64.isBase64(byteArray1);
      //  // Unstable assertion: assertFalse(boolean0);
      
      byte[] byteArray3 = Base64.decodeBase64(byteArray2);
      //  // Unstable assertion: assertEquals(4, byteArray2.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray3);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Object object0 = base64_0.decode((Object) "\"zJ[N#AVh{d`%3'r");
      base64_0.encode(object0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte) (-81);
      Base64.decodeBase64(byteArray0);
      Object object1 = new Object();
      try { 
        base64_0.decode(object1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray2 = Base64.decodeBase64((String) null);
      //  // Unstable assertion: assertNull(byteArray2);
      
      byte[] byteArray3 = Base64.discardWhitespace(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)92, (byte)0}, byteArray3);
      //  // Unstable assertion: assertEquals(2, byteArray3.length);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64 base64_0 = new Base64((-1776));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)12;
      base64_0.readResults(byteArray0, (byte) (-13), (byte)120);
      Base64 base64_1 = new Base64((byte) (-1));
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray0, 1, 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null, false, true);
      //  // Unstable assertion: assertNull(byteArray0);
      
      Base64 base64_0 = new Base64(true);
      int int0 = base64_0.readResults((byte[]) null, 95, 95);
      //  // Unstable assertion: assertEquals(0, int0);
      
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte)66;
      byteArray1[2] = (byte) (-101);
      String string0 = base64_0.encodeToString(byteArray1);
      //  // Unstable assertion: assertEquals("AUKb\\\u0000", string0);
      
      base64_0.decode((byte[]) null, 0, 0);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte) (-10);
      byteArray2[2] = (byte)29;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte) (-10);
      byteArray2[5] = (byte)29;
      byteArray2[6] = (byte)29;
      BigInteger bigInteger0 = new BigInteger(byteArray2);
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(6, byteArray3.length);
      
      Base64 base64_0 = new Base64((byte) (-10), byteArray1, false);
      byte[] byteArray4 = base64_0.decode(byteArray0);
      assertEquals(0, byteArray4.length);
      assertEquals(2, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64 base64_0 = new Base64();
      base64_0.encode((byte[]) null, 90, (int) (byte)0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_1 = new Base64(false);
      base64_1.encode(byteArray1);
      Base64.isBase64((byte)81);
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.encodeBase64(byteArray1);
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      Base64 base64_0 = new Base64(false);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (int) (byte)0, 122);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)92;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, (int) (byte)92);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      byte[] byteArray3 = Base64.discardWhitespace(byteArray1);
      byte[] byteArray4 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64(89, byteArray0, true);
      Base64.encodeBase64URLSafe(byteArray3);
      base64_0.encode(byteArray2);
      boolean boolean0 = Base64.isBase64((byte)92);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = null;
      Base64 base64_1 = new Base64();
      Base64 base64_2 = new Base64((byte)0, (byte[]) null, true);
      int int0 = 3008;
      // Undeclared exception!
      try { 
        base64_2.encode((byte[]) null, (-1160), 3008);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = null;
      Base64 base64_1 = new Base64();
      Base64.encodeBase64String((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)1);
      assertFalse(boolean0);
      
      Base64 base64_0 = new Base64((byte)21);
      Base64.isBase64((byte) (-22));
      Base64 base64_1 = new Base64(19, (byte[]) null, true);
      assertTrue(base64_1.isUrlSafe());
      
      Base64.encodeBase64((byte[]) null);
      Base64 base64_2 = new Base64();
      base64_2.decode((byte[]) null, (-20), (-2244));
      assertFalse(base64_2.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64 base64_0 = new Base64(2107715432, byteArray0, true);
      Base64 base64_1 = new Base64(true);
      Base64.decodeBase64(byteArray0);
      String string0 = base64_1.encodeToString(byteArray0);
      //  // Unstable assertion: assertEquals("AAA\u0000\u0000", string0);
      
      byte[] byteArray1 = Base64.decodeBase64(",icO!2|H?bX^Ppk!");
      Base64 base64_2 = new Base64(1145);
      Base64 base64_3 = new Base64();
      base64_3.encode(byteArray1, 32, (-907));
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      Base64.isBase64("");
      boolean boolean0 = Base64.isBase64(byteArray2);
      //  // Unstable assertion: assertEquals(12, byteArray2.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-119), (byte) (-61), (byte) (-74), (byte)29, (byte) (-75), (byte) (-49), (byte) (-90)}, byteArray1);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)16;
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)109;
      byte byte1 = (byte)14;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)121;
      byte byte2 = (byte)39;
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)23;
      byteArray0[7] = (byte)94;
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)121, byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0010m\u000Ey'\uFFFD\u0017^]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Base64 base64_0 = new Base64(69);
      Base64.isBase64((byte)48);
      Base64 base64_1 = new Base64((-1));
      Base64.isBase64((byte)127);
      Base64 base64_2 = new Base64((-5497), (byte[]) null, true);
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64(byteArray0);
      Base64 base64_3 = new Base64();
      // Undeclared exception!
      try { 
        base64_3.decode((byte[]) null, 64, 1254);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64 base64_0 = new Base64((-403), byteArray0, true);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      base64_0.decode(byteArray1, (int) (byte)0, (-403));
      base64_0.decode(byteArray1, (int) (byte)0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(0, byteArray0, true);
      base64_0.encode(byteArray1, 0, 0);
      base64_0.avail();
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      base64_0.decode((String) null);
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray3 = new byte[0];
      String string0 = base64_0.encodeToString(byteArray3);
      assertEquals("", string0);
      
      base64_0.decode((Object) "");
      base64_0.decode(byteArray0, 0, 0);
      base64_0.avail();
      Base64.encodeBase64String(byteArray1);
      base64_0.decode("");
      Base64.encodeBase64(byteArray2, true, true, 76);
      base64_0.avail();
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("@20QO");
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.encodeToString(byteArray1);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)1;
      byteArray2[1] = (byte)11;
      byteArray2[2] = (byte) (-75);
      byteArray2[3] = (byte)4;
      Base64.encodeBase64(byteArray1, true, true, 11);
      byte[] byteArray3 = new byte[5];
      byteArray3[0] = (byte)11;
      byteArray3[1] = (byte)11;
      byteArray3[2] = (byte)11;
      byteArray3[3] = (byte)4;
      byteArray3[4] = (byte)1;
      base64_0.readResults(byteArray3, (-1), (byte) (-75));
      byteArray2[4] = (byte)78;
      Base64.encodeBase64Chunked(byteArray2);
      base64_0.avail();
      byte[] byteArray4 = Base64.encodeBase64(byteArray1);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.testBit(69);
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64Chunked((byte[]) null);
      base64_0.readResults((byte[]) null, (-40), (-322));
      Base64.isArrayByteBase64(byteArray4);
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.encodeToString(byteArray1);
      Object object0 = new Object();
      byte byte0 = (byte)1;
      byte byte1 = (byte) (-75);
      byte byte2 = (byte)78;
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      base64_0.decode((Object) "");
      base64_0.avail();
      Base64.encodeBase64(byteArray1);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.testBit((byte)1);
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64Chunked(byteArray2);
      Object object1 = new Object();
      try { 
        base64_0.encode(object1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("@20QO");
      Base64 base64_0 = new Base64(69);
      base64_0.encode(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      base64_0.decode(byteArray1, 69, 69);
      Base64.isBase64((byte)38);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-38);
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.isBase64((byte)127);
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)47;
      byteArray2[1] = (byte)127;
      byteArray2[2] = (byte)127;
      byteArray2[3] = (byte)127;
      byteArray2[4] = (byte)127;
      Base64.encodeBase64(byteArray2);
      Base64.isBase64("2g");
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(96);
      Base64 base64_1 = new Base64(true);
      byte[] byteArray2 = new byte[0];
      base64_1.encodeToString(byteArray2);
      byte[] byteArray3 = base64_0.encode(byteArray1);
      Base64 base64_2 = new Base64((-892));
      base64_0.encode(byteArray3, (-3840), 96);
      Base64.encodeBase64(byteArray2);
      Base64.isBase64("");
      Base64.isBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-1160), byteArray0, false);
      base64_0.readResults(byteArray0, (-1160), (-1160));
      base64_0.decode(byteArray0);
      byte[] byteArray1 = base64_0.decode("");
      base64_0.encode(byteArray0);
      Object object0 = base64_0.decode((Object) "");
      base64_0.decode(object0);
      Base64.encodeBase64(byteArray0, false);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray3, 123, (-3912));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(7, byteArray1, false);
      Base64 base64_1 = new Base64(false);
      base64_1.encodeToString(byteArray1);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      Base64 base64_2 = new Base64(64);
      base64_2.encode(byteArray2, (-907), (-3840));
      Base64.encodeBase64(byteArray2);
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      Base64.encodeBase64(byteArray2);
      byte[] byteArray3 = new byte[3];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte)0;
      byteArray3[2] = (byte)0;
      Base64 base64_0 = new Base64((byte)0, byteArray3, false);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (int) (byte)0, 122);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("@20QO");
      Base64 base64_0 = new Base64(69);
      Base64.isBase64((byte)48);
      Base64.isBase64("@20QO");
      Base64 base64_1 = new Base64((-1));
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)48;
      byteArray1[1] = (byte)48;
      byteArray1[2] = (byte)48;
      byteArray1[3] = (byte)48;
      byteArray1[4] = (byte)1;
      byteArray1[5] = (byte)48;
      byteArray1[7] = (byte)114;
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      Base64.isBase64("");
      Base64.isArrayByteBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, false, 0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2);
      Base64.discardWhitespace(byteArray3);
      byte[] byteArray4 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64(89, byteArray0, true);
      Base64.encodeBase64URLSafe(byteArray4);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-38);
      boolean boolean0 = Base64.isBase64(byteArray0);
      //  // Unstable assertion: assertFalse(boolean0);
      
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      //  // Unstable assertion: assertEquals("2g", string0);
      
      Base64.isBase64((byte)127);
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)47;
      byteArray2[1] = (byte)127;
      byteArray2[2] = (byte)127;
      byteArray2[3] = (byte)127;
      byteArray2[4] = (byte)127;
      byteArray2[5] = (byte)127;
      byteArray2[6] = (byte) (-38);
      byteArray2[7] = (byte)127;
      Base64.encodeBase64(byteArray2, false, true, (int) (byte)127);
      Base64 base64_0 = new Base64(false);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.intValueExact();
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray3 = base64_0.decode(byteArray0);
      byte[] byteArray4 = new byte[2];
      byteArray4[0] = (byte) (-38);
      byteArray4[1] = (byte) (-38);
      Base64.isBase64("UTF-16");
      base64_0.encode(byteArray3, (int) (byte) (-38), 50);
      byte[] byteArray5 = Base64.encodeBase64Chunked(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)77, (byte)109, (byte)99, (byte)61, (byte)0, (byte)0}, byteArray5);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)50, (byte)103}, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      
      byte[] byteArray6 = Base64.toIntegerBytes(bigInteger0);
      //  // Unstable assertion: assertEquals(1, byteArray6.length);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte)75;
      byteArray0[6] = (byte)19;
      byteArray0[7] = (byte) (-1);
      Base64.decodeBase64(byteArray0);
      boolean boolean0 = Base64.isBase64((byte)75);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.decode((Object) "]");
      int int0 = base64_0.readResults(byteArray1, (byte) (-1), (byte)105);
      assertEquals((-1), int0);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      assertEquals(4, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)53, (byte)66, (byte)105, (byte)75}, byteArray2);
      
      Base64.decodeBase64("]");
      boolean boolean1 = base64_0.isUrlSafe();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("@20QO");
      assertArrayEquals(new byte[] {(byte) (-37), (byte)68, (byte)14}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      Base64 base64_0 = new Base64(69);
      Base64.isBase64((byte)48);
      boolean boolean0 = Base64.isBase64("@20QO");
      assertFalse(boolean0);
      
      Base64 base64_1 = new Base64((-1));
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)48;
      byteArray1[1] = (byte)48;
      byteArray1[2] = (byte)48;
      byteArray1[3] = (byte)48;
      byteArray1[4] = (byte)1;
      byteArray1[5] = (byte)48;
      byteArray1[6] = (byte)48;
      byteArray1[7] = (byte)114;
      base64_1.encodeToString(byteArray1);
      base64_1.encodeToString(byteArray1);
      base64_1.encodeToString(byteArray1);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      assertEquals(4, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      Base64 base64_1 = new Base64();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)21;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(3, byteArray1.length);
      
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)21;
      byte[] byteArray3 = Base64.encodeBase64(byteArray2);
      assertEquals(4, byteArray3.length);
      assertArrayEquals(new byte[] {(byte)70, (byte)81, (byte)61, (byte)61}, byteArray3);
      
      Base64 base64_2 = new Base64(111, (byte[]) null, true);
      assertTrue(base64_2.isUrlSafe());
      
      boolean boolean0 = Base64.isArrayByteBase64(byteArray2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)0;
      Base64 base64_0 = new Base64(12, byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.readResults(byteArray0, 12, 2773);
      boolean boolean0 = true;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      boolean boolean1 = true;
      Base64.encodeBase64(byteArray1, true, true);
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-66);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true);
      Base64.isBase64("'{T?1<#%2puDS60]");
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray1);
      Base64.encodeBase64(byteArray1, true);
      base64_0.decode((Object) "'{T?1<#%2puDS60]");
      int int0 = base64_0.readResults(byteArray1, (-1), 341);
      assertArrayEquals(new byte[] {(byte)65, (byte)76, (byte)52}, byteArray1);
      assertEquals(3, byteArray1.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)21;
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)1, (int) (byte)21);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertArrayEquals(new byte[] {(byte)21, (byte)0}, byteArray1);
      assertEquals(2, byteArray1.length);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray3 = base64_0.decode(byteArray2);
      assertArrayEquals(new byte[] {(byte)21, (byte)0}, byteArray3);
      assertEquals(4, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = null;
      boolean boolean1 = false;
      Base64 base64_1 = new Base64();
      Base64.encodeBase64String((byte[]) null);
      Base64.encodeBase64((byte[]) null, true, false, 104);
      base64_1.encodeToString((byte[]) null);
      base64_1.decode("org.apache.commons.codec.DecoderException");
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64.encodeBase64URLSafeString((byte[]) null);
      base64_1.encode((byte[]) null);
      Base64.encodeBase64((byte[]) null, false);
      try { 
        base64_1.decode((Object) base64_0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      Base64 base64_0 = new Base64((byte)0, byteArray0, true);
      Base64 base64_1 = new Base64(true);
      String string0 = base64_1.encodeToString(byteArray0);
      //  // Unstable assertion: assertEquals("AAA\uFFFD\u0000", string0);
      
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_1.encode(byteArray1, (-1), (int) (byte)0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      //  // Unstable assertion: assertEquals(4, byteArray2.length);
      
      boolean boolean0 = Base64.isBase64("AAA\r\n");
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(0, byteArray0, true);
      base64_0.encode(byteArray1, 0, 0);
      base64_0.avail();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.abs();
      Base64.encodeBase64(byteArray1, true);
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      String string0 = Base64.encodeBase64String(byteArray1);
      byte[] byteArray3 = new byte[0];
      base64_0.encodeToString(byteArray3);
      base64_0.decode((Object) "");
      String string1 = Base64.encodeBase64URLSafeString(byteArray2);
      assertTrue(string1.equals((Object)string0));
      
      Base64.encodeBase64URLSafe(byteArray0);
      boolean boolean0 = base64_0.hasData();
      assertTrue(base64_0.isUrlSafe());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)1);
      assertFalse(boolean0);
      
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = base64_0.decode("");
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)18;
      Base64.decodeBase64("");
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte) (-113);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 110, 216);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 110
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      base64_0.encode(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      base64_0.decode("7n5h Of9");
      byte[] byteArray1 = new byte[0];
      base64_0.decode(byteArray1);
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte) (-39);
      byteArray2[1] = (byte)106;
      byteArray2[2] = (byte) (-57);
      Base64.discardWhitespace(byteArray2);
      Base64.encodeBase64(byteArray1);
      boolean boolean0 = Base64.isBase64((byte) (-39));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte) (-32);
      byteArray0[5] = (byte) (-92);
      byteArray0[6] = (byte)93;
      byteArray0[7] = (byte)125;
      byteArray0[8] = (byte) (-57);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-12)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-117);
      byteArray0[6] = (byte) (-19);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte)0;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64((-656));
      Base64.isBase64("Input array too big, the output array would be bigger (");
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger0.divideAndRemainder(bigInteger1);
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      base64_0.encode(byteArray0, 64, (int) (byte) (-1));
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, false, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = null;
      boolean boolean1 = false;
      Base64 base64_1 = new Base64();
      Base64.encodeBase64String((byte[]) null);
      Base64.encodeBase64((byte[]) null, true, false, 104);
      base64_1.encodeToString((byte[]) null);
      byte[] byteArray1 = base64_1.decode("org.apache.commons.codec.DecoderException");
      Base64.encodeBase64URLSafe((byte[]) null);
      base64_1.encodeToString(byteArray1);
      base64_1.encode((byte[]) null);
      Base64.encodeBase64((byte[]) null, false);
      try { 
        base64_1.decode((Object) base64_0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-37);
      byteArray0[5] = (byte) (-39);
      byteArray0[6] = (byte)122;
      byteArray0[7] = (byte)40;
      Base64.encodeBase64(byteArray0, false, true);
      boolean boolean0 = Base64.isBase64("'{T?1<#%2puDS60]");
      assertFalse(boolean0);
      
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      assertEquals(22, byteArray2.length);
      
      int int0 = base64_0.readResults(byteArray0, 105, (byte)40);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-11);
      Base64 base64_0 = new Base64(0, byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-11);
      byteArray1[1] = (byte) (-59);
      base64_0.encode(byteArray1);
      boolean boolean0 = Base64.isBase64("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Base64.isBase64("8>");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-47);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [.=V\u0000\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-50);
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)55;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true, 88);
      Base64 base64_0 = new Base64(true);
      Base64.decodeInteger(byteArray0);
      base64_0.encode(byteArray0, 88, (int) (byte)0);
      String string0 = Base64.encodeBase64URLSafeString(byteArray1);
      assertEquals("eWxRQXppVUFOdw", string0);
      
      String string1 = Base64.encodeBase64String(byteArray0);
      assertEquals("ylQAziUANw==", string1);
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      assertEquals((short)55, bigInteger0.shortValue());
      
      boolean boolean0 = base64_0.isUrlSafe();
      assertTrue(boolean0);
      
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      assertEquals(7, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte) (-116);
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte) (-59);
      byteArray0[6] = (byte)86;
      byte byte0 = (byte)0;
      byteArray0[7] = (byte)0;
      Base64.decodeInteger(byteArray0);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, true, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      String string0 = Base64.encodeBase64URLSafeString(byteArray1);
      assertEquals("", string0);
      
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotSame(byteArray2, byteArray0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte) (-113);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 110, 216);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 110
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)92;
      byteArray0[0] = (byte)92;
      Base64.encodeBase64(byteArray0, false, true, (int) (byte)92);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)92;
      byteArray1[1] = (byte)92;
      Base64 base64_0 = new Base64((-1801), byteArray1, true);
      Base64.encodeBase64String(byteArray1);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (-1146), (int) (byte)92);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1146
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-66);
      Base64 base64_0 = new Base64((-1051), byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.readResults(byteArray0, (-4035), 109);
      boolean boolean0 = true;
      Base64.decodeBase64(byteArray0);
      Base64.encodeBase64(byteArray0, true, true);
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)0;
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-51);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte)0;
      byteArray1[8] = (byte)0;
      base64_0.encodeToString(byteArray1);
      try { 
        base64_0.encode((Object) "/g-+GASRSNCI");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(0, byteArray0, true);
      base64_0.encode(byteArray1, 0, 0);
      base64_0.avail();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.abs();
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(0, byteArray3.length);
      
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray4 = new byte[0];
      String string0 = base64_0.encodeToString(byteArray4);
      base64_0.decode((Object) "");
      base64_0.decode(byteArray0, 0, 0);
      int int0 = base64_0.avail();
      String string1 = Base64.encodeBase64String(byteArray1);
      assertTrue(string1.equals((Object)string0));
      
      base64_0.decode("");
      Base64.encodeBase64(byteArray2, true, true, 76);
      int int1 = base64_0.readResults(byteArray1, (-1), (-933));
      assertTrue(int1 == int0);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-1);
      Base64.isArrayByteBase64(byteArray0);
      byte[] byteArray1 = new byte[0];
      Base64 base64_0 = new Base64((-1108), byteArray1);
      base64_0.encodeToString(byteArray1);
      Base64.encodeBase64(byteArray1);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger0);
      try { 
        base64_0.decode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-125);
      byte byte0 = (byte)32;
      byteArray0[1] = (byte)32;
      byte byte1 = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte)83;
      byteArray0[6] = (byte) (-83);
      byteArray0[7] = (byte)0;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)0, byteArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD\u0000\uFFFD;S\uFFFD\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Base64 base64_0 = new Base64(1411);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)76;
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Base64 base64_0 = new Base64((-708));
      byte[] byteArray0 = new byte[2];
      Base64.decodeBase64(byteArray0);
      byte byte0 = (byte)28;
      byteArray0[0] = (byte)28;
      byte byte1 = (byte) (-14);
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-38);
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
      
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertArrayEquals(new byte[] {(byte)50, (byte)103}, byteArray1);
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("2g", string0);
      
      Base64.isBase64((byte)127);
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)47;
      byteArray2[1] = (byte)127;
      byteArray2[2] = (byte)127;
      byteArray2[3] = (byte)127;
      byteArray2[4] = (byte)127;
      byteArray2[5] = (byte)127;
      byteArray2[6] = (byte) (-38);
      byteArray2[7] = (byte)127;
      Base64.encodeBase64(byteArray2, false, true, (int) (byte)127);
      Base64 base64_0 = new Base64(false);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.intValueExact();
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(1, byteArray3.length);
      
      base64_0.decode(byteArray0);
      byte[] byteArray4 = new byte[2];
      byteArray4[0] = (byte) (-38);
      byteArray4[1] = (byte) (-38);
      String string1 = Base64.encodeBase64String(byteArray4);
      assertEquals("2to=", string1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)69;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)47, (byte)119, (byte)65, (byte)65, (byte)82, (byte)81, (byte)61, (byte)61}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-10);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte) (-10);
      base64_0.encodeToString(byteArray2);
      base64_0.decode((Object) "org.apache.commons.codec.DecoderException");
      base64_0.avail();
      Base64.encodeBase64(byteArray1);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.testBit(1893);
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64Chunked((byte[]) null);
      try { 
        base64_0.encode((Object) "org.apache.commons.codec.DecoderException");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("@20QO");
      Base64 base64_0 = new Base64(69);
      int int0 = base64_0.readResults(byteArray0, (-1322), (-1));
      assertEquals(0, int0);
      
      base64_0.decode(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-37), (byte)68, (byte)14}, byteArray0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      Base64 base64_0 = new Base64((-1516), byteArray0, false);
      Base64.isBase64(";KAaY>/|D{*)UR$Se");
      base64_0.encodeToString(byteArray0);
      Base64.isBase64(byteArray0);
      int int0 = 58;
      base64_0.encode(byteArray0, 58, (int) (byte)0);
      base64_0.readResults(byteArray0, (-3054), 58);
      base64_0.encodeToString(byteArray0);
      base64_0.decode((byte[]) null);
      try { 
        base64_0.encode((Object) ";KAaY>/|D{*)UR$Se");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Base64 base64_0 = new Base64(82);
      Base64.isBase64("");
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-72);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      assertArrayEquals(new byte[] {(byte)47, (byte)55, (byte)103, (byte)61}, byteArray1);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(1, byteArray2.length);
      
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.nextProbablePrime();
      bigInteger0.toByteArray();
      Base64.toIntegerBytes(bigInteger0);
      // Undeclared exception!
      try { 
        bigInteger1.flipBit((-1));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Negative bit address
         //
         verifyException("java.math.BigInteger", e);
      }
  }
}
