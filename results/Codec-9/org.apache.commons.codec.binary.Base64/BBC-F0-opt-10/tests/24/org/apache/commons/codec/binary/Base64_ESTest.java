/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 16:11:23 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Base64 base64_0 = new Base64();
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(64, mockRandom0);
      BigInteger bigInteger1 = bigInteger0.pow(2869);
      Base64 base64_1 = new Base64(76);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      mockRandom0.nextInt(76);
      int int0 = 1392;
      // Undeclared exception!
      Base64.encodeBase64(byteArray0, true, true);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Base64 base64_0 = new Base64();
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(64, mockRandom0);
      int int0 = 2869;
      BigInteger bigInteger1 = bigInteger0.pow(2869);
      Base64 base64_1 = new Base64(76);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      bigInteger0.modPow(bigInteger1, bigInteger1);
      // Undeclared exception!
      Base64.decodeBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(117, mockRandom1);
      bigInteger0.getLowestSetBit();
      BigInteger bigInteger1 = bigInteger0.pow(589);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(117);
      // Undeclared exception!
      Base64.encodeBase64(byteArray0, false);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Base64 base64_0 = new Base64();
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(64, mockRandom0);
      BigInteger bigInteger1 = bigInteger0.pow(2869);
      Base64 base64_1 = new Base64(76);
      base64_1.encodeToString((byte[]) null);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      // Undeclared exception!
      Base64.encodeBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Base64 base64_0 = new Base64();
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(64, mockRandom0);
      BigInteger bigInteger1 = bigInteger0.pow(2869);
      Base64 base64_1 = new Base64(76);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      // Undeclared exception!
      base64_0.encode(byteArray0, 76, 1392);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[2] = (byte)2;
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)2;
      Base64.encodeBase64URLSafe(byteArray1);
      byteArray1[1] = (byte)2;
      byteArray1[2] = (byte)2;
      byteArray1[3] = (byte)2;
      Base64.isBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64.isBase64((byte)2);
      Base64 base64_1 = new Base64(false);
      base64_1.decode(byteArray2, (int) (byte)2, 82);
      byte[] byteArray3 = Base64.discardWhitespace(byteArray0);
      base64_0.encode(byteArray3, (int) (byte)2, (-49));
      Base64 base64_2 = new Base64(true);
      base64_1.avail();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Base64 base64_0 = new Base64();
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(64, mockRandom0);
      BigInteger bigInteger1 = bigInteger0.pow(2869);
      Base64 base64_1 = new Base64();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      // Undeclared exception!
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Base64 base64_0 = new Base64();
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(64, mockRandom0);
      BigInteger bigInteger1 = bigInteger0.pow(2869);
      Base64 base64_1 = new Base64(76);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      // Undeclared exception!
      Base64.encodeBase64String(byteArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(117, mockRandom1);
      bigInteger0.getLowestSetBit();
      BigInteger bigInteger1 = bigInteger0.pow(571);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(117);
      // Undeclared exception!
      Base64.encodeBase64URLSafeString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(117, mockRandom1);
      bigInteger0.getLowestSetBit();
      BigInteger bigInteger1 = bigInteger0.pow(571);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      bigInteger1.subtract(bigInteger0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Base64.decodeInteger(byteArray1);
      // Undeclared exception!
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Base64 base64_0 = new Base64();
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(64, mockRandom0);
      BigInteger bigInteger1 = bigInteger0.pow(2869);
      Base64 base64_1 = new Base64(4);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      // Undeclared exception!
      Base64.isArrayByteBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Base64 base64_0 = new Base64();
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(64, mockRandom0);
      BigInteger bigInteger1 = bigInteger0.pow(2869);
      Base64 base64_1 = new Base64(4);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      // Undeclared exception!
      base64_1.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8231, mockRandom0);
      BigInteger bigInteger1 = bigInteger0.pow(4);
      Base64 base64_0 = new Base64(8231);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)102;
      Base64.encodeBase64Chunked(byteArray0);
      base64_0.decode(byteArray1);
      // Undeclared exception!
      Base64.encodeBase64(byteArray0, true, false, 8231);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Base64 base64_0 = new Base64();
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(64, mockRandom0);
      BigInteger bigInteger1 = bigInteger0.pow(2869);
      bigInteger1.shiftRight((-506));
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      // Undeclared exception!
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Base64 base64_0 = new Base64();
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(64, mockRandom0);
      BigInteger bigInteger1 = bigInteger0.pow(2869);
      Base64 base64_1 = new Base64(4);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      // Undeclared exception!
      base64_0.decode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8231, mockRandom0);
      BigInteger bigInteger1 = bigInteger0.pow(1324);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = null;
      base64_0.encode((byte[]) null, (-12), (-12));
      int int0 = 1219;
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, (-12), 1219);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(648, mockRandom0);
      mockRandom0.longs(61L);
      mockRandom0.ints((long) 648, (-2289), 648);
      mockRandom0.nextLong();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(false);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 0, 648);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 104
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(4134, mockRandom0);
      mockRandom0.longs((long) 4134);
      mockRandom0.nextLong();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(684, byteArray1.length);
      
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray0);
      assertTrue(bigInteger1.equals((Object)bigInteger0));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64 base64_0 = new Base64(7);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte) (-108);
      byteArray0[7] = (byte)4;
      byteArray0[8] = (byte)62;
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertEquals(18, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(1833, byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-26);
      byteArray1[2] = (byte) (-49);
      byteArray1[3] = (byte) (-3);
      byteArray1[4] = (byte) (-116);
      byteArray1[5] = (byte)115;
      byteArray1[6] = (byte) (-62);
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(1657, byteArray0, false);
      Object object0 = base64_0.decode((Object) "%n3FZ[m0#\"XMK|EP:PL");
      // Undeclared exception!
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)26;
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean0);
      
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false, true, 10);
      assertArrayEquals(new byte[] {(byte)65, (byte)68, (byte)56, (byte)95, (byte)65, (byte)82, (byte)111, (byte)65}, byteArray2);
      assertEquals(8, byteArray2.length);
      
      Base64 base64_0 = new Base64(false);
      byte[] byteArray3 = base64_0.decode(byteArray0);
      int int0 = base64_0.readResults(byteArray3, (byte)1, (-1));
      assertEquals((-1), int0);
      assertEquals(0, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray3 = new byte[0];
      Base64.isArrayByteBase64(byteArray3);
      byte[] byteArray4 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray5 = Base64.encodeBase64(byteArray2, true, true, 76);
      base64_0.decode(byteArray5);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray5, true, true, 57);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (96) than the specified maxium size of 57
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Base64.encodeBase64String((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte) (-109);
      byteArray0[4] = (byte)32;
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
      
      Base64 base64_0 = new Base64(false);
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray0);
      assertEquals((byte)0, bigInteger1.byteValue());
      
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-91);
      byteArray1[1] = (byte)10;
      byteArray1[2] = (byte) (-91);
      byteArray1[3] = (byte)13;
      byteArray1[4] = (byte) (-91);
      byteArray1[5] = (byte) (-91);
      Base64.encodeBase64(byteArray1, false, false);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, false, true, 13);
      assertArrayEquals(new byte[] {(byte)112, (byte)81, (byte)113, (byte)108, (byte)68, (byte)97, (byte)87, (byte)108}, byteArray3);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = Base64.decodeBase64("fXsq{_,e7");
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = new BigInteger(byteArray1);
      bigInteger0.xor(bigInteger1);
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64(byteArray1, false, true, 64);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      //  // Unstable assertion: assertEquals(12, byteArray2.length);
      
      byte[] byteArray3 = new byte[9];
      byteArray3[0] = (byte) (-91);
      byteArray3[2] = (byte) (-109);
      byteArray3[3] = (byte)9;
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)125, (byte)123, (byte)42, (byte) (-3), (byte) (-18)}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)102, (byte)88, (byte)115, (byte)113, (byte)47, (byte)101, (byte)52, (byte)61, (byte) (-94), (byte) (-82)}, byteArray4);
      //  // Unstable assertion: assertEquals(5, byteArray1.length);
      
      byte[] byteArray5 = Base64.discardWhitespace(byteArray3);
      //  // Unstable assertion: assertEquals(8, byteArray5.length);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      Base64.isBase64((byte)123);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte)123;
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true, (int) (byte)123);
      assertArrayEquals(new byte[] {(byte)101, (byte)51, (byte)116, (byte)55, (byte)101, (byte)51, (byte)116, (byte)55}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte)63;
      byteArray0[6] = (byte)85;
      byteArray0[6] = (byte)126;
      base64_0.encode(byteArray0, (int) (byte) (-123), (int) (byte) (-123));
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, 67, 1741);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.decodeBase64((byte[]) null);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Base64.decodeBase64((String) null);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64URLSafeString((byte[]) null);
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.isArrayByteBase64(byteArray1);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
      
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte) (-1);
      base64_0.encode(byteArray0, (-1), (-1));
      boolean boolean0 = base64_0.hasData();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte)89;
      byteArray0[6] = (byte) (-121);
      byteArray0[7] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(14, byteArray1.length);
      
      byteArray0[8] = (byte) (-109);
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("hhjjQcBZhwCT", string0);
      
      Base64.encodeBase64((byte[]) null, true);
      boolean boolean0 = base64_0.hasData();
      assertFalse(boolean0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = false;
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte) (-62);
      byteArray0[6] = (byte)21;
      byteArray0[7] = (byte) (-94);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_1 = null;
      try {
        base64_1 = new Base64((byte)112, byteArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [D\u001B\uFFFDp\uFFFD\u0015\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
      
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(38, byteArray1.length);
      
      Base64 base64_0 = new Base64(false);
      Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      base64_0.decode(byteArray0, 15, 1);
      byte[] byteArray2 = new byte[4];
      byteArray2[1] = (byte) (-58);
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      base64_0.decode(byteArray2);
      byte[] byteArray4 = new byte[1];
      byteArray4[0] = (byte) (-58);
      String string0 = Base64.encodeBase64String(byteArray4);
      assertEquals("xg==", string0);
      
      BigInteger bigInteger0 = new BigInteger(byteArray3);
      byte[] byteArray5 = Base64.encodeInteger(bigInteger0);
      assertEquals(4, byteArray5.length);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)103;
      boolean boolean0 = Base64.isBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      boolean boolean1 = Base64.isBase64((byte)103);
      assertFalse(boolean1 == boolean0);
      
      Base64 base64_0 = new Base64(false);
      base64_0.decode(byteArray1, 0, 124);
      Base64.discardWhitespace(byteArray1);
      byte[] byteArray2 = base64_0.decode(byteArray1);
      assertEquals(11, byteArray2.length);
      assertEquals(18, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)10;
      Base64 base64_0 = new Base64(124, byteArray0);
      base64_0.decode(byteArray0, (int) (byte) (-9), (-342));
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte)10;
      byteArray0[8] = (byte)10;
      Base64 base64_0 = new Base64((byte)10, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertEquals(30, byteArray1.length);
      
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Base64 base64_0 = new Base64(8, (byte[]) null, true);
      byte[] byteArray0 = base64_0.decode((byte[]) null);
      assertNull(byteArray0);
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Base64.encodeBase64((byte[]) null, false, false);
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.encodeBase64Chunked((byte[]) null);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64.encodeBase64(byteArray0, false, false, 117);
      BigInteger bigInteger2 = Base64.decodeInteger(byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals((byte)1, bigInteger2.byteValue());
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte) (-45);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte) (-68);
      byteArray0[6] = (byte)123;
      byteArray0[7] = (byte)90;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 3, 110);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)36;
      byteArray0[1] = (byte)36;
      Base64.isBase64("org.apache.commons.codec.binary.StringUtils");
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64((byte) (-122), byteArray0, false);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (int) (byte)0, (int) (byte)36);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.binary.Base64");
      Base64 base64_0 = new Base64();
      byte byte0 = (byte) (-64);
      byte byte1 = (byte)122;
      Base64.isBase64(byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64((byte) (-114));
      Base64 base64_1 = new Base64(false);
      // Undeclared exception!
      try { 
        base64_1.decode(byteArray0, 6, (int) (byte)55);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 24
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(93, byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64.encodeBase64(byteArray1);
      byte[] byteArray2 = base64_0.decode(",|F");
      base64_0.encode(byteArray0);
      boolean boolean0 = Base64.isBase64(byteArray2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)26;
      byteArray0[6] = (byte)8;
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.isBase64((byte)61);
      Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)11, byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)96;
      byteArray1[1] = (byte) (-8);
      byteArray1[2] = (byte)96;
      byteArray1[3] = (byte)8;
      byteArray1[4] = (byte)26;
      byteArray1[5] = (byte)11;
      byteArray1[6] = (byte)25;
      byteArray1[7] = (byte)26;
      base64_0.readResults(byteArray1, (byte)27, (-2351));
      base64_0.decode((Object) "YPgbC_8aCA");
      try { 
        base64_0.encode((Object) "YPgbC_8aCA");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[2] = (byte)2;
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)2;
      byteArray1[1] = (byte)2;
      byteArray1[2] = (byte)2;
      byteArray1[3] = (byte)2;
      Base64.isBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64.isBase64((byte)2);
      Base64 base64_1 = new Base64(false);
      base64_1.decode(byteArray2, (int) (byte)2, 82);
      byte[] byteArray3 = Base64.discardWhitespace(byteArray0);
      base64_0.encode(byteArray3, (int) (byte)2, (-49));
      Base64 base64_2 = new Base64(true);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      Base64 base64_0 = new Base64();
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      //  // Unstable assertion: assertEquals("orgapachecommonscodecDecoderExceptio", string0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray3 = new byte[0];
      Base64.isArrayByteBase64(byteArray3);
      boolean boolean0 = Base64.isBase64(byteArray2);
      //  // Unstable assertion: assertFalse(boolean0);
      
      Base64 base64_1 = new Base64(true);
      Base64.encodeBase64(byteArray3, false, true);
      byte[] byteArray4 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray5 = Base64.encodeBase64(byteArray2, false, true, 76);
      byte[] byteArray6 = base64_0.decode(byteArray5);
      //  // Unstable assertion: assertEquals(50, byteArray2.length);
      //  // Unstable assertion: assertEquals(50, byteArray6.length);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      Base64.decodeInteger(byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte) (-1);
      Base64.encodeBase64(byteArray0, true, false);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      assertEquals(6, byteArray2.length);
      
      byte[] byteArray3 = new byte[1];
      byteArray3[0] = (byte) (-1);
      byte[] byteArray4 = Base64.encodeBase64(byteArray3, false, false, (int) (byte)95);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray4);
      assertArrayEquals(new byte[] {(byte)47, (byte)119, (byte)61, (byte)61}, byteArray4);
      assertEquals((byte) (-1), bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[2] = (byte)2;
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)2;
      byteArray1[2] = (byte)2;
      byteArray1[3] = (byte)2;
      byteArray1[4] = (byte)2;
      base64_0.decode(byteArray1, (int) (byte)2, (int) (byte)2);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)103;
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64((byte)103);
      Base64 base64_0 = new Base64(true);
      base64_0.decode(byteArray1, 0, 124);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      base64_0.encode(byteArray2, (int) (byte)103, 75);
      byte[] byteArray3 = new byte[9];
      byteArray3[1] = (byte)103;
      byte[] byteArray4 = Base64.CHUNK_SEPARATOR;
      assertFalse(byteArray4.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[2] = (byte)2;
      boolean boolean0 = false;
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = null;
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, (int) (byte)2, 16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray1, 1, 1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)111, (byte)113, (byte)52, (byte) (-94), (byte) (-82)}, byteArray1);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray3 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray4 = Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      //  // Unstable assertion: assertEquals(27, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte byte0 = (byte)2;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      Base64.encodeBase64(byteArray0, false, false);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)2;
      byteArray1[1] = (byte)2;
      Base64.isBase64("Parameter supplied to Base64 encode is not a byte[]");
      byte byte1 = (byte)0;
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray2, (-2909), 2180);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2909
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)0;
      byteArray1[2] = (byte) (-2);
      byteArray1[2] = (byte) (-122);
      base64_0.encode(byteArray1, (int) (byte) (-122), 0);
      Base64.isBase64("QDX$V(DBQV");
      byteArray0[0] = (byte)0;
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64 base64_1 = new Base64(false);
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray1, (int) (byte)0, 574);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base64.isBase64(byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64((byte)103);
      Base64 base64_0 = new Base64(true);
      base64_0.decode(byteArray0, 0, 0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)103;
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray2, 75, 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 75
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(68, byteArray0);
      base64_0.decode(",|F");
      byte[] byteArray1 = new byte[1];
      byte byte0 = (byte)59;
      byteArray1[0] = (byte)59;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte)19;
      byteArray0[5] = (byte)125;
      Base64.encodeBase64String(byteArray0);
      base64_0.encode((byte[]) null);
      String string0 = base64_0.encodeToString((byte[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      Base64.encodeBase64(byteArray0, false, false);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)2;
      byteArray1[1] = (byte)2;
      byteArray1[2] = (byte)2;
      byteArray1[3] = (byte)2;
      byteArray1[4] = (byte)2;
      base64_0.decode(byteArray1, (int) (byte)2, (int) (byte)2);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, true, (int) (byte)2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of 2
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(622, byteArray0);
      base64_0.decode((String) null);
      Base64 base64_1 = new Base64(false);
      Base64 base64_2 = new Base64();
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)1;
      byteArray1[2] = (byte)15;
      byteArray1[3] = (byte) (-16);
      byteArray1[4] = (byte)123;
      byteArray1[5] = (byte) (-22);
      byte[] byteArray2 = base64_2.decode(byteArray1);
      assertFalse(base64_2.isUrlSafe());
      assertEquals(0, byteArray2.length);
      
      byte[] byteArray3 = new byte[5];
      byteArray3[0] = (byte)1;
      byteArray3[1] = (byte) (-57);
      byteArray3[2] = (byte) (-16);
      byteArray3[3] = (byte)8;
      byteArray3[4] = (byte)16;
      boolean boolean0 = Base64.isBase64(byteArray3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-6);
      byte[] byteArray1 = new byte[5];
      byteArray1[3] = (byte) (-6);
      byteArray1[1] = (byte) (-6);
      byteArray1[2] = (byte) (-6);
      byteArray0[7] = (byte) (-6);
      byteArray1[4] = (byte) (-6);
      Base64 base64_0 = new Base64((byte) (-6), byteArray1);
      base64_0.decode((String) null);
      Base64 base64_1 = new Base64(true);
      Base64 base64_2 = new Base64(1119, (byte[]) null);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      assertFalse(byteArray2.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-12);
      byteArray0[4] = (byte)0;
      Base64.isBase64((byte) (-12));
      Base64 base64_0 = new Base64((byte) (-12), byteArray0, false);
      Object object0 = base64_0.decode((Object) "`q^|");
      Object object1 = base64_0.decode(object0);
      base64_0.encode(object1);
      Base64 base64_1 = new Base64();
      Object object2 = base64_1.encode(object1);
      assertFalse(base64_1.isUrlSafe());
      assertSame(object2, object0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 76);
      assertEquals(14, byteArray1.length);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(1, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Base64.encodeBase64((byte[]) null, false, false);
      Base64.encodeBase64((byte[]) null, true, true);
      Base64 base64_0 = new Base64();
      base64_0.decode((byte[]) null, (-2335), (-2002));
      byte[] byteArray0 = Base64.encodeBase64URLSafe((byte[]) null);
      assertNull(byteArray0);
      
      Base64.encodeBase64((byte[]) null, true, true, 68);
      base64_0.decode((byte[]) null, (-2335), 68);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(68, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64 base64_1 = new Base64(58, byteArray1, true);
      base64_1.encode(byteArray0);
      boolean boolean0 = Base64.isBase64((byte)95);
      assertTrue(boolean0);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, true);
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte) (-43);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)64;
      Base64.decodeBase64((String) null);
      Base64.encodeBase64((byte[]) null, false, false);
      Base64 base64_0 = new Base64(65);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      boolean boolean0 = Base64.isBase64(byteArray1);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      Base64.encodeBase64(byteArray0, false, true);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64 base64_0 = new Base64();
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)0;
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger0);
      base64_0.encode(byteArray1, (-1333), (-352));
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray3 = base64_0.encode(byteArray1);
      base64_0.decode(byteArray2, (-2566), (-2566));
      assertFalse(byteArray2.equals((Object)byteArray3));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte) (-122);
      byteArray0[4] = (byte) (-95);
      byteArray0[5] = (byte)0;
      Base64 base64_0 = new Base64(103, byteArray0);
      base64_0.encode(byteArray0, (-37), (int) (byte) (-95));
      boolean boolean0 = Base64.isBase64("OIf=k.G;:$?x~!xX$>");
      assertFalse(boolean0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      base64_0.encode(byteArray1, 103, (int) (byte) (-122));
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_1 = new Base64(103, byteArray0, true);
      byte[] byteArray2 = base64_1.encode(byteArray1);
      int int0 = base64_1.readResults(byteArray0, (byte)0, 1081);
      assertEquals((-1), int0);
      
      base64_0.decode(byteArray2, (-4422), 15);
      assertEquals(12, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true);
      Base64.encodeBase64(byteArray0, true, true);
      Base64 base64_0 = new Base64();
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)0;
      base64_0.decode(byteArray2, (-2335), (-2335));
      Base64.encodeBase64URLSafe(byteArray1);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, true, (int) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeBase64((byte[]) null);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = BigInteger.ZERO;
      bigInteger2.longValueExact();
      BigInteger bigInteger3 = bigInteger2.not();
      bigInteger0.divideAndRemainder(bigInteger3);
      Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64((byte)48);
      base64_0.encode((byte[]) null);
      try { 
        base64_0.encode((Object) bigInteger2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = new byte[1];
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte) (-2);
      byteArray2[2] = (byte) (-122);
      base64_0.encode(byteArray2, (int) (byte) (-122), 0);
      Base64.isBase64("QDX$V(DBQV");
      byteArray1[0] = (byte)0;
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger0);
      base64_0.encode(byteArray1, (-352), (int) (byte)0);
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.encode(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, (int) (byte)0, 8165);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)103;
      boolean boolean0 = Base64.isBase64(byteArray0);
      //  // Unstable assertion: assertTrue(boolean0);
      
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64((byte)103);
      Base64 base64_0 = new Base64(true);
      base64_0.decode(byteArray1, 0, (-1));
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      base64_0.encode(byteArray2, (int) (byte)103, 75);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)90, (byte)119, (byte)61, (byte)61, (byte) (-94), (byte) (-82)}, byteArray2);
      
      byte[] byteArray3 = new byte[9];
      byteArray3[0] = (byte)103;
      byteArray3[1] = (byte)103;
      byteArray3[2] = (byte)103;
      byteArray3[3] = (byte)103;
      byteArray3[4] = (byte)103;
      byteArray3[5] = (byte)103;
      byteArray3[6] = (byte)103;
      byteArray3[7] = (byte)103;
      byteArray3[8] = (byte)103;
      String string0 = Base64.encodeBase64String(byteArray3);
      //  // Unstable assertion: assertEquals("Z2dnZ2dnZ2dn", string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-107);
      byteArray0[0] = (byte) (-107);
      base64_0.readResults(byteArray0, (byte) (-107), 4100);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-107);
      byteArray1[1] = (byte)58;
      byteArray1[2] = (byte) (-107);
      byteArray1[3] = (byte) (-107);
      byteArray1[4] = (byte) (-107);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)0;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      Base64.encodeBase64(byteArray0, false, true);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0, (int) (byte)0, (-949));
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte) (-94), (byte) (-82)}, byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)81, (byte)85, (byte)71, (byte)105, (byte)114, (byte)103}, byteArray3);
      //  // Unstable assertion: assertEquals(6, byteArray3.length);
      
      Base64.encodeBase64(byteArray0, true, true, 64);
      byte[] byteArray4 = new byte[0];
      base64_0.decode(byteArray4, 57, 1);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)1;
      boolean boolean0 = Base64.isBase64((byte)1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Base64.isBase64("");
      Base64.decodeBase64((String) null);
      byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.EncoderException");
      //  // Unstable assertion: assertEquals(27, byteArray0.length);
      
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-72);
      byteArray1[1] = (byte) (-72);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      Base64 base64_0 = new Base64((byte) (-72), byteArray1, true);
      boolean boolean0 = Base64.isBase64(byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)117, (byte)76, (byte)103, (byte) (-94), (byte) (-82)}, byteArray2);
      //  // Unstable assertion: assertEquals(5, byteArray2.length);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)1;
      boolean boolean0 = Base64.isBase64("9r6(._c");
      assertFalse(boolean0);
      
      byte[] byteArray1 = Base64.decodeBase64("org.apache.commons.codeE.EncoderExceptio/");
      assertEquals(27, byteArray1.length);
      
      byte[] byteArray2 = Base64.decodeBase64("");
      base64_0.encodeToString(byteArray2);
      assertFalse(base64_0.isUrlSafe());
      
      String string0 = Base64.encodeBase64String(byteArray2);
      assertEquals("", string0);
      
      Base64.discardWhitespace(byteArray2);
      boolean boolean1 = Base64.isArrayByteBase64(byteArray2);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Base64.isBase64("");
      Base64.isBase64("");
      Base64.decodeBase64("d^`&qpQA=w#$'k8GU");
      byte[] byteArray0 = Base64.decodeBase64("96(._c");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray1);
      assertEquals(6, byteArray1.length);
      
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-9), (byte) (-81), (byte) (-36)}, byteArray0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(0, byteArray2.length);
      
      byte[] byteArray3 = new byte[5];
      byteArray3[0] = (byte)5;
      byteArray3[1] = (byte)35;
      byteArray3[2] = (byte) (-9);
      byteArray3[3] = (byte)93;
      byteArray3[4] = (byte) (-107);
      String string0 = Base64.encodeBase64String(byteArray3);
      assertEquals("BSP3XZU=", string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[2];
      Base64 base64_1 = new Base64();
      byte[] byteArray1 = new byte[2];
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray3 = base64_0.decode(byteArray2);
      String string0 = base64_0.encodeToString(byteArray2);
      assertEquals("", string0);
      assertFalse(base64_0.isUrlSafe());
      assertSame(byteArray2, byteArray3);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)103;
      boolean boolean0 = Base64.isBase64(byteArray0);
      //  // Unstable assertion: assertTrue(boolean0);
      
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64((byte)103);
      Base64 base64_0 = new Base64(true);
      base64_0.decode(byteArray1, 0, (-1));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)90, (byte)119, (byte)61, (byte)61, (byte)2, (byte) (-82)}, byteArray1);
      //  // Unstable assertion: assertEquals(6, byteArray1.length);
      
      byte[] byteArray2 = base64_0.decode(",|F");
      //  // Unstable assertion: assertEquals(0, byteArray2.length);
      
      byte[] byteArray3 = base64_0.decode(byteArray0);
      //  // Unstable assertion: assertEquals(0, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Base64 base64_0 = new Base64(1);
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-24);
      Base64.encodeBase64URLSafeString(byteArray1);
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)103;
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isArrayByteBase64(byteArray1);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)103, byteArray1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [Zw==\uFFFD\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-19);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte)0;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertArrayEquals(new byte[] {(byte)2}, byteArray1);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte) (-28);
      byte byte1 = (byte) (-34);
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte) (-1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, (int) (byte)50);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(17, byteArray1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [ADLk3v8\uFFFD\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = new byte[1];
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte) (-2);
      byteArray2[2] = (byte) (-122);
      base64_0.encode(byteArray2, (int) (byte) (-122), 0);
      boolean boolean0 = Base64.isBase64("QDX$V(DBzQVl");
      assertFalse(boolean0);
      
      byteArray1[0] = (byte)0;
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(1, byteArray3.length);
      
      base64_0.encode(byteArray1, (-352), (int) (byte)0);
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.encode(byteArray0);
      String string0 = base64_0.encodeToString(byteArray0);
      String string1 = Base64.encodeBase64String(byteArray0);
      assertTrue(string1.equals((Object)string0));
      
      byte[] byteArray4 = new byte[5];
      byteArray4[0] = (byte)0;
      byteArray4[1] = (byte)0;
      byteArray4[2] = (byte)0;
      byteArray4[3] = (byte)0;
      byteArray4[4] = (byte)0;
      byte[] byteArray5 = Base64.discardWhitespace(byteArray4);
      assertEquals(5, byteArray5.length);
      
      boolean boolean1 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Base64 base64_0 = new Base64(2);
      Base64.decodeBase64(".[Yg8y2FN->");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-46);
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-57);
      base64_0.encodeToString(byteArray0);
      Base64.isBase64("");
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.encodeInteger(bigInteger0);
      byteArray0[3] = (byte)77;
      base64_0.encode(byteArray0);
      Base64.decodeBase64((String) null);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)77;
      byteArray1[1] = (byte)77;
      byteArray1[2] = (byte)1;
      byteArray1[3] = (byte)82;
      byteArray1[4] = (byte)82;
      byteArray1[5] = (byte)1;
      Base64.isArrayByteBase64(byteArray1);
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-82);
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)86;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD\u0000\u0000}\uFFFDV]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      Base64 base64_0 = new Base64();
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.hasData();
      Base64.encodeBase64(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.longValueExact();
      bigInteger1.not();
      // Undeclared exception!
      try { 
        bigInteger0.divideAndRemainder(bigInteger1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger divide by zero
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      bigInteger0.bitCount();
      Base64 base64_0 = new Base64(1731);
      bigInteger0.isProbablePrime(99);
      byte[] byteArray2 = base64_0.decode(byteArray1);
      bigInteger0.negate();
      bigInteger0.byteValueExact();
      base64_0.encodeToString(byteArray0);
      base64_0.readResults(byteArray2, 1731, 0);
      bigInteger0.shiftLeft(0);
      base64_0.encodeToString(byteArray2);
      try { 
        base64_0.decode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.decodeBase64(byteArray0);
      String string0 = null;
      Base64.decodeBase64((String) null);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      int int0 = 248;
      Base64 base64_0 = new Base64(248);
      Base64.encodeBase64(byteArray1, true, true, 0);
      int int1 = 2128;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 248, 2128);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 248
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)1;
      Base64.encodeBase64Chunked(byteArray0);
      byteArray0[0] = (byte)1;
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte)76;
      byteArray1[2] = (byte)76;
      byteArray1[3] = (byte)76;
      byteArray1[4] = (byte)1;
      byteArray1[5] = (byte)76;
      Base64.encodeBase64(byteArray0);
      byteArray1[6] = (byte)76;
      Base64.isBase64("");
      Base64.encodeBase64String(byteArray1);
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)1;
      byte byte1 = (byte)0;
      byteArray0[3] = (byte)0;
      base64_0.encode(byteArray0, (int) (byte)1, (int) (byte)0);
      base64_0.isUrlSafe();
      Base64.isBase64((byte) (-128));
      base64_0.hasData();
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (int) (byte)76, (int) (byte)1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 76
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = Base64.isBase64("");
      assertTrue(boolean0);
      
      Base64 base64_0 = new Base64((-1));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte)35;
      byteArray0[4] = (byte)34;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(5, byteArray1.length);
      
      byte[] byteArray2 = new byte[0];
      byte[] byteArray3 = base64_0.decode(byteArray2);
      String string0 = base64_0.encodeToString(byteArray3);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("a4MkD");
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      //  // Unstable assertion: assertEquals(10, byteArray2.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)89, (byte)84, (byte)82, (byte)78, (byte)97, (byte)119, (byte)61, (byte)61, (byte)10, (byte) (-82)}, byteArray2);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.isProbablePrime((-1131));
      bigInteger0.flipBit(5602);
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      //  // Unstable assertion: assertEquals(4, byteArray3.length);
      
      Base64 base64_0 = new Base64(true);
      boolean boolean0 = base64_0.isUrlSafe();
      //  // Unstable assertion: assertTrue(boolean0);
      
      byte[] byteArray4 = new byte[3];
      byteArray4[0] = (byte)109;
      byteArray4[1] = (byte)89;
      byteArray4[2] = (byte)0;
      byte[] byteArray5 = base64_0.decode(byteArray4);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-103)}, byteArray5);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.avail();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64.encodeBase64(byteArray1, false, true);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, (-949), 105);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -949
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-95);
      Base64 base64_0 = new Base64((-4229), byteArray0);
      base64_0.decode(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64("Cl");
      base64_0.readResults(byteArray0, (-2217), (-4229));
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      byte[] byteArray3 = new byte[3];
      byteArray3[0] = (byte) (-1);
      base64_0.readResults(byteArray2, (-2810), (-4229));
      byteArray3[1] = (byte) (-1);
      byteArray3[2] = (byte) (-1);
      byte[] byteArray4 = Base64.encodeBase64URLSafe(byteArray3);
      assertArrayEquals(new byte[] {(byte)95, (byte)95, (byte)95, (byte)95}, byteArray4);
      
      byte[] byteArray5 = base64_0.decode("?$J66~:");
      assertArrayEquals(new byte[] {(byte)39, (byte) (-82)}, byteArray5);
      
      base64_0.encode(byteArray2, (int) (byte) (-1), (-113));
      base64_0.readResults(byteArray1, (-113), 4193);
      assertArrayEquals(new byte[] {(byte)10}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Base64.isBase64("");
      Base64 base64_0 = new Base64((-1));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte)63;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)51, 1682);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 51
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = 0;
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = null;
      Base64.isBase64("");
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, (-3377), 617);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64URLSafe((byte[]) null);
      int int0 = 0;
      Base64 base64_0 = new Base64(0);
      base64_0.encode((byte[]) null);
      Base64.decodeBase64("");
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte) (-105);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true, (int) (byte)106);
      Base64.encodeBase64String(byteArray1);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(117, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000j\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte) (-100);
      byteArray0[6] = (byte)52;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)18;
      base64_0.decode(byteArray0, (int) (byte)0, (int) (byte) (-100));
      boolean boolean0 = base64_0.isUrlSafe();
      assertTrue(boolean0);
      
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-57);
      byteArray1[2] = (byte)47;
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      assertArrayEquals(new byte[] {(byte)65, (byte)77, (byte)99, (byte)118}, byteArray2);
      assertEquals(4, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = 390;
      Base64 base64_0 = new Base64(390);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)89;
      boolean boolean0 = true;
      Base64.encodeBase64(byteArray0, true);
      byte byte0 = (byte)55;
      base64_0.readResults(byteArray0, 977, 977);
      int int1 = 2053;
      int int2 = 3506;
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-115);
      Base64.isArrayByteBase64(byteArray0);
      boolean boolean0 = Base64.isBase64(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-115);
      byteArray1[1] = (byte) (-115);
      byteArray1[2] = (byte) (-115);
      byteArray1[3] = (byte) (-115);
      byteArray1[4] = (byte) (-115);
      Base64.decodeInteger(byteArray1);
      Base64.isArrayByteBase64(byteArray1);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64((byte) (-115), byteArray0, false);
      byte[] byteArray2 = base64_0.decode("4'p@R!p");
      base64_0.encode(byteArray2, 404, (int) (byte) (-115));
      assertArrayEquals(new byte[] {(byte) (-30), (byte) (-108), (byte)105}, byteArray2);
      assertEquals(3, byteArray2.length);
      
      Base64.encodeBase64(byteArray0, false, true);
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, false, false);
      assertArrayEquals(new byte[] {(byte)106, (byte)81, (byte)61, (byte)61}, byteArray3);
      
      boolean boolean1 = base64_0.isUrlSafe();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-89);
      byteArray0[0] = (byte) (-89);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-89);
      byteArray1[1] = (byte) (-89);
      byteArray1[2] = (byte) (-89);
      byteArray1[3] = (byte) (-89);
      byteArray1[4] = (byte) (-89);
      Base64.encodeBase64(byteArray1, true);
      Base64 base64_0 = new Base64((byte) (-89), byteArray0, true);
      String string0 = "^0";
      Base64.decodeBase64("^0");
      Object object0 = new Object();
      Object object1 = new Object();
      try { 
        base64_0.encode(object1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Base64 base64_0 = new Base64((-1), (byte[]) null, true);
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Base64 base64_0 = new Base64(1);
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte)93;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false);
      assertEquals(12, byteArray2.length);
      
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)1;
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("AJYjTK4AAQ==", string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)113;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)72;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-62);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(9, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-20), (byte)110, (byte) (-1), (byte)113, (byte)0, (byte)72, (byte)0, (byte) (-62)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      Base64 base64_0 = new Base64((-4148), byteArray0, true);
      Object object0 = base64_0.decode((Object) "W5kNSg'zY");
      Object object1 = base64_0.encode(object0);
      Object object2 = base64_0.encode(object1);
      base64_0.encode(object2);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      assertArrayEquals(new byte[] {(byte)101, (byte)119, (byte)65, (byte)65}, byteArray1);
      
      int int0 = base64_0.readResults(byteArray0, 0, (byte)0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte) (-43);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)64;
      byteArray0[6] = (byte)88;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-1);
      Base64.encodeBase64(byteArray0, true, false);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(107, byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD_\uFFFD\u0000f@X\u0000\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-62);
      Base64 base64_0 = new Base64((-1), byteArray0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte) (-4);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte)48;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-1536), byteArray1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [ADVJBy38/wEw\uFFFD\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-86);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false);
      assertEquals(10, byteArray1.length);
      
      Base64 base64_0 = new Base64();
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("vZYAqg==", string0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte) (-72));
      assertFalse(boolean0);
  }
}
