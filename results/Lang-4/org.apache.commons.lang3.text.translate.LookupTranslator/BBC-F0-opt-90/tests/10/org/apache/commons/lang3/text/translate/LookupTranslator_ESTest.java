/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 00:32:05 GMT 2021
 */

package org.apache.commons.lang3.text.translate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.CharBuffer;
import org.apache.commons.lang3.text.translate.CharSequenceTranslator;
import org.apache.commons.lang3.text.translate.LookupTranslator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LookupTranslator_ESTest extends LookupTranslator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharSequence[][] charSequenceArray0 = new CharSequence[3][4];
      CharSequence[] charSequenceArray1 = new CharSequence[5];
      charSequenceArray1[0] = (CharSequence) "FFFFFFFF";
      CharBuffer charBuffer0 = CharBuffer.allocate(2566);
      CharBuffer charBuffer1 = CharBuffer.allocate(1269);
      StringWriter stringWriter0 = new StringWriter();
      charSequenceArray0[0] = charSequenceArray1;
      CharSequence[] charSequenceArray2 = new CharSequence[2];
      charSequenceArray2[0] = (CharSequence) charBuffer0;
      charSequenceArray0[1] = charSequenceArray2;
      CharSequence[] charSequenceArray3 = new CharSequence[3];
      charSequenceArray3[0] = (CharSequence) charBuffer1;
      charSequenceArray3[1] = (CharSequence) "7FFFFFFF";
      charSequenceArray0[2] = charSequenceArray3;
      LookupTranslator lookupTranslator0 = new LookupTranslator(charSequenceArray0);
      int int0 = lookupTranslator0.translate(charSequenceArray2[0], 6, (Writer) stringWriter0);
      assertEquals("7FFFFFFF", stringWriter0.toString());
      assertEquals(1269, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharSequence[][] charSequenceArray0 = new CharSequence[3][4];
      CharSequence[] charSequenceArray1 = new CharSequence[5];
      charSequenceArray1[0] = (CharSequence) "FFFFFFFF";
      CharBuffer charBuffer0 = CharBuffer.allocate(2566);
      charSequenceArray1[1] = (CharSequence) charBuffer0;
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append(charSequenceArray1[1]);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      charSequenceArray1[4] = (CharSequence) stringBuffer0;
      charSequenceArray0[0] = charSequenceArray1;
      CharSequence[] charSequenceArray2 = new CharSequence[2];
      charSequenceArray2[0] = (CharSequence) charBuffer0;
      charSequenceArray0[1] = charSequenceArray2;
      charSequenceArray0[2] = charSequenceArray1;
      LookupTranslator lookupTranslator0 = new LookupTranslator(charSequenceArray0);
      int int0 = lookupTranslator0.translate(charSequenceArray1[4], 18, (Writer) stringWriter0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharSequence[][] charSequenceArray0 = new CharSequence[3][4];
      CharSequence[] charSequenceArray1 = new CharSequence[5];
      charSequenceArray1[0] = (CharSequence) "FFFFFFFF";
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      charSequenceArray1[4] = (CharSequence) stringBuffer0;
      charSequenceArray0[0] = charSequenceArray1;
      charSequenceArray0[1] = charSequenceArray0[0];
      charSequenceArray0[2] = charSequenceArray0[1];
      LookupTranslator lookupTranslator0 = new LookupTranslator(charSequenceArray0);
      int int0 = lookupTranslator0.translate(charSequenceArray1[4], 18, (Writer) stringWriter0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[10];
      charSequenceArray0[0] = (CharSequence) "4B";
      CharSequence[][] charSequenceArray1 = new CharSequence[7][0];
      charSequenceArray1[0] = charSequenceArray0;
      charSequenceArray1[1] = charSequenceArray0;
      charSequenceArray1[2] = charSequenceArray0;
      StringWriter stringWriter0 = new StringWriter(2);
      charSequenceArray1[3] = charSequenceArray1[1];
      charSequenceArray1[4] = charSequenceArray0;
      charSequenceArray1[5] = charSequenceArray0;
      charSequenceArray1[6] = charSequenceArray0;
      LookupTranslator lookupTranslator0 = new LookupTranslator(charSequenceArray1);
      // Undeclared exception!
      try { 
        lookupTranslator0.translate(charSequenceArray0[0], (-65534), (Writer) stringWriter0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharSequence[][] charSequenceArray0 = new CharSequence[0][3];
      LookupTranslator lookupTranslator0 = new LookupTranslator(charSequenceArray0);
      // Undeclared exception!
      try { 
        lookupTranslator0.translate((CharSequence) null, 59, (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.translate.LookupTranslator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      CharBuffer charBuffer0 = CharBuffer.allocate(59);
      charSequenceArray0[0] = (CharSequence) charBuffer0;
      CharSequence[][] charSequenceArray1 = new CharSequence[4][2];
      charSequenceArray1[0] = charSequenceArray0;
      charSequenceArray1[1] = charSequenceArray0;
      charSequenceArray1[2] = charSequenceArray0;
      charSequenceArray1[3] = charSequenceArray0;
      LookupTranslator lookupTranslator0 = new LookupTranslator(charSequenceArray1);
      StringWriter stringWriter0 = new StringWriter(11);
      // Undeclared exception!
      try { 
        lookupTranslator0.translate((CharSequence) charBuffer0, Integer.MAX_VALUE, (Writer) stringWriter0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharSequence[][] charSequenceArray0 = new CharSequence[5][6];
      CharSequence[] charSequenceArray1 = new CharSequence[8];
      CharBuffer charBuffer0 = CharBuffer.allocate(59);
      charSequenceArray1[0] = (CharSequence) charBuffer0;
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      charSequenceArray0[0] = charSequenceArray1;
      charBuffer0.put('(');
      charSequenceArray0[1] = charSequenceArray0[0];
      CharSequence[] charSequenceArray2 = new CharSequence[2];
      charSequenceArray2[0] = (CharSequence) charBuffer1;
      charSequenceArray0[2] = charSequenceArray2;
      LookupTranslator lookupTranslator0 = null;
      try {
        lookupTranslator0 = new LookupTranslator(charSequenceArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharSequence[][] charSequenceArray0 = new CharSequence[5][8];
      CharSequence[] charSequenceArray1 = new CharSequence[5];
      charSequenceArray1[0] = (CharSequence) "0";
      charSequenceArray0[0] = charSequenceArray1;
      charSequenceArray0[1] = charSequenceArray1;
      CharSequence[] charSequenceArray2 = new CharSequence[0];
      charSequenceArray0[2] = charSequenceArray2;
      LookupTranslator lookupTranslator0 = null;
      try {
        lookupTranslator0 = new LookupTranslator(charSequenceArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[10];
      String string0 = CharSequenceTranslator.hex('K');
      charSequenceArray0[0] = (CharSequence) "4B";
      CharSequence[][] charSequenceArray1 = new CharSequence[3][4];
      charSequenceArray1[0] = charSequenceArray0;
      charSequenceArray1[1] = charSequenceArray0;
      charSequenceArray1[2] = charSequenceArray0;
      LookupTranslator lookupTranslator0 = new LookupTranslator(charSequenceArray1);
      String string1 = lookupTranslator0.translate((CharSequence) string0);
      assertEquals("4B", string1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharSequence[][] charSequenceArray0 = new CharSequence[3][4];
      LookupTranslator lookupTranslator0 = null;
      try {
        lookupTranslator0 = new LookupTranslator(charSequenceArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.translate.LookupTranslator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LookupTranslator lookupTranslator0 = new LookupTranslator((CharSequence[][]) null);
  }
}
