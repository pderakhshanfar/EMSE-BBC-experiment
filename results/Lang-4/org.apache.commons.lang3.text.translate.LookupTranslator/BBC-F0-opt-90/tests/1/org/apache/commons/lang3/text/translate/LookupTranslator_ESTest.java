/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 00:09:21 GMT 2021
 */

package org.apache.commons.lang3.text.translate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.CharBuffer;
import org.apache.commons.lang3.text.translate.LookupTranslator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LookupTranslator_ESTest extends LookupTranslator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "FFFFFA60";
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "FFFFFA60");
      charSequenceArray0[1] = (CharSequence) charBuffer0;
      CharSequence[][] charSequenceArray1 = new CharSequence[5][7];
      charSequenceArray1[0] = charSequenceArray0;
      charSequenceArray1[1] = charSequenceArray0;
      charSequenceArray1[2] = charSequenceArray0;
      CharSequence[] charSequenceArray2 = new CharSequence[4];
      char[] charArray0 = new char[3];
      CharBuffer charBuffer1 = CharBuffer.wrap(charArray0);
      charSequenceArray2[0] = (CharSequence) charBuffer1;
      charBuffer1.get(charArray0);
      charSequenceArray2[1] = (CharSequence) charBuffer0;
      charSequenceArray1[3] = charSequenceArray2;
      charSequenceArray1[4] = charSequenceArray0;
      LookupTranslator lookupTranslator0 = new LookupTranslator(charSequenceArray1);
      String string0 = lookupTranslator0.translate(charSequenceArray0[1]);
      assertEquals("FFFFFA60FFFFFFA60FFFFFFA60FFFFFFA60FFFFFFA60FFFFFFA60AFFFFFA606FFFFFA600", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "FFFFFA60";
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "FFFFFA60");
      charSequenceArray0[1] = (CharSequence) charBuffer0;
      CharSequence[][] charSequenceArray1 = new CharSequence[5][7];
      charSequenceArray1[0] = charSequenceArray0;
      charSequenceArray1[1] = charSequenceArray0;
      charSequenceArray1[2] = charSequenceArray0;
      CharSequence[] charSequenceArray2 = new CharSequence[4];
      char[] charArray0 = new char[3];
      CharBuffer charBuffer1 = CharBuffer.wrap(charArray0);
      charSequenceArray2[0] = (CharSequence) charBuffer1;
      charSequenceArray1[3] = charSequenceArray2;
      charSequenceArray1[4] = charSequenceArray0;
      LookupTranslator lookupTranslator0 = new LookupTranslator(charSequenceArray1);
      String string0 = lookupTranslator0.translate(charSequenceArray0[1]);
      assertEquals("FFFFFA60", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charSequenceArray0[0] = (CharSequence) charBuffer0;
      CharSequence[][] charSequenceArray1 = new CharSequence[9][9];
      charSequenceArray1[0] = charSequenceArray0;
      charSequenceArray1[1] = charSequenceArray0;
      charSequenceArray1[2] = charSequenceArray0;
      charSequenceArray1[3] = charSequenceArray0;
      CharSequence[] charSequenceArray2 = new CharSequence[4];
      charSequenceArray2[0] = (CharSequence) "7FFFFFFF";
      charSequenceArray1[4] = charSequenceArray2;
      LookupTranslator lookupTranslator0 = null;
      try {
        lookupTranslator0 = new LookupTranslator(charSequenceArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LookupTranslator lookupTranslator0 = new LookupTranslator((CharSequence[][]) null);
      StringWriter stringWriter0 = new StringWriter(0);
      char[] charArray0 = new char[7];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      int int0 = lookupTranslator0.translate((CharSequence) charBuffer0, 0, (Writer) stringWriter0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charSequenceArray0[0] = (CharSequence) charBuffer0;
      CharSequence[][] charSequenceArray1 = new CharSequence[8][9];
      charSequenceArray1[0] = charSequenceArray0;
      charSequenceArray1[1] = charSequenceArray0;
      charSequenceArray1[2] = charSequenceArray0;
      charSequenceArray1[3] = charSequenceArray0;
      charSequenceArray1[4] = charSequenceArray0;
      charSequenceArray1[5] = charSequenceArray0;
      charSequenceArray1[6] = charSequenceArray0;
      charSequenceArray1[7] = charSequenceArray0;
      charSequenceArray0[1] = (CharSequence) "\u0000";
      LookupTranslator lookupTranslator0 = new LookupTranslator(charSequenceArray1);
      StringWriter stringWriter0 = new StringWriter();
      int int0 = lookupTranslator0.translate((CharSequence) charBuffer0, 0, (Writer) stringWriter0);
      assertEquals("\u0000", stringWriter0.toString());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charSequenceArray0[0] = (CharSequence) charBuffer0;
      CharSequence[][] charSequenceArray1 = new CharSequence[8][9];
      charSequenceArray1[0] = charSequenceArray0;
      charSequenceArray1[1] = charSequenceArray0;
      charSequenceArray1[2] = charSequenceArray0;
      charSequenceArray1[3] = charSequenceArray0;
      charSequenceArray1[4] = charSequenceArray0;
      charSequenceArray1[5] = charSequenceArray0;
      charSequenceArray1[6] = charSequenceArray0;
      charSequenceArray1[7] = charSequenceArray0;
      LookupTranslator lookupTranslator0 = new LookupTranslator(charSequenceArray1);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        lookupTranslator0.translate((CharSequence) "\u0000", (-1534), (Writer) stringWriter0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charSequenceArray0[0] = (CharSequence) charBuffer0;
      CharSequence[][] charSequenceArray1 = new CharSequence[8][9];
      charSequenceArray1[0] = charSequenceArray0;
      charSequenceArray1[1] = charSequenceArray0;
      charSequenceArray1[2] = charSequenceArray0;
      charSequenceArray1[3] = charSequenceArray0;
      charSequenceArray1[4] = charSequenceArray0;
      charSequenceArray1[5] = charSequenceArray1[3];
      charSequenceArray1[6] = charSequenceArray0;
      charSequenceArray1[7] = charSequenceArray0;
      LookupTranslator lookupTranslator0 = new LookupTranslator(charSequenceArray1);
      StringWriter stringWriter0 = new StringWriter(2242);
      // Undeclared exception!
      try { 
        lookupTranslator0.translate(charSequenceArray0[0], (-1), (Writer) stringWriter0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      CharSequence[][] charSequenceArray0 = new CharSequence[9][4];
      CharSequence[] charSequenceArray1 = new CharSequence[2];
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charSequenceArray1[0] = (CharSequence) charBuffer0;
      CharSequence[][] charSequenceArray2 = new CharSequence[8][9];
      charSequenceArray2[3] = charSequenceArray1;
      charSequenceArray2[4] = charSequenceArray1;
      charSequenceArray2[5] = charSequenceArray2[3];
      charSequenceArray0[0] = charSequenceArray1;
      charSequenceArray0[1] = charSequenceArray2[3];
      charSequenceArray0[2] = charSequenceArray2[4];
      charSequenceArray0[3] = charSequenceArray2[5];
      charSequenceArray0[4] = charSequenceArray0[0];
      charSequenceArray0[5] = charSequenceArray0[0];
      charSequenceArray0[6] = charSequenceArray0[1];
      CharSequence[] charSequenceArray3 = new CharSequence[0];
      charSequenceArray0[7] = charSequenceArray3;
      LookupTranslator lookupTranslator0 = null;
      try {
        lookupTranslator0 = new LookupTranslator(charSequenceArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      LookupTranslator lookupTranslator0 = new LookupTranslator((CharSequence[][]) null);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        lookupTranslator0.translate((CharSequence) null, 1668, (Writer) stringWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.translate.LookupTranslator", e);
      }
  }
}
