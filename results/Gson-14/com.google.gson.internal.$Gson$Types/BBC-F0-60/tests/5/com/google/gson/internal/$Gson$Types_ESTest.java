/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 07:43:11 GMT 2021
 */

package com.google.gson.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.lang.reflect.WildcardType;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class $Gson$Types_ESTest extends $Gson$Types_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Type[] typeArray0 = new Type[6];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) class0;
      ParameterizedType parameterizedType0 = .Gson.Types.newParameterizedTypeWithOwner(class0, class0, typeArray0);
      Properties properties0 = new Properties();
      Object object0 = properties0.put(parameterizedType0, typeArray0[2]);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class0;
      ParameterizedType parameterizedType0 = .Gson.Types.newParameterizedTypeWithOwner(class0, class0, typeArray0);
      Properties properties0 = new Properties();
      Object object0 = new Object();
      Object object1 = properties0.put(parameterizedType0, object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class class1 = (Class).Gson.Types.resolve(class0, class0, class0);
      .Gson.Types.checkNotPrimitive(class1);
      assertFalse(class1.isEnum());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Properties> class0 = Properties.class;
      WildcardType wildcardType0 = .Gson.Types.subtypeOf(class0);
      Class<String> class1 = String.class;
      Class<Integer> class2 = Integer.class;
      Type type0 = .Gson.Types.getGenericSupertype(wildcardType0, class1, class2);
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) class2;
      typeArray0[1] = typeArray0[0];
      ParameterizedType parameterizedType0 = .Gson.Types.newParameterizedTypeWithOwner(type0, type0, typeArray0);
      Class<?> class3 = .Gson.Types.getRawType(parameterizedType0);
      assertEquals("class java.lang.Integer", class3.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Type type0 = .Gson.Types.resolve((Type) null, class0, class0);
      Type type1 = .Gson.Types.resolve(type0, class0, (Type) null);
      assertNull(type1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = .Gson.Types.hashCodeOrZero((Object) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<String> class0 = String.class;
      Type type0 = .Gson.Types.getSupertype((Type) null, class0, class0);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<String> class0 = String.class;
      Type type0 = .Gson.Types.getGenericSupertype((Type) null, class0, class0);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = .Gson.Types.equal((Object) null, object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        .Gson.Types.supertypeOf((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        .Gson.Types.subtypeOf((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      WildcardType wildcardType0 = .Gson.Types.subtypeOf(class0);
      Type[] typeArray0 = new Type[7];
      // Undeclared exception!
      try { 
        .Gson.Types.newParameterizedTypeWithOwner(wildcardType0, (Type) null, typeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<?> class1 = .Gson.Types.getRawType(class0);
      Class<String> class2 = String.class;
      // Undeclared exception!
      try { 
        .Gson.Types.getSupertype(class2, (Class<?>) null, class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Properties> class1 = Properties.class;
      // Undeclared exception!
      try { 
        .Gson.Types.getSupertype((Type) null, class0, class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        .Gson.Types.getMapKeyAndValueTypes((Type) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Object> class0 = Object.class;
      GenericArrayType genericArrayType0 = .Gson.Types.arrayOf(class0);
      Class<String> class1 = String.class;
      // Undeclared exception!
      try { 
        .Gson.Types.getGenericSupertype(genericArrayType0, class1, (Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Types", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Object> class0 = Object.class;
      WildcardType wildcardType0 = .Gson.Types.subtypeOf(class0);
      // Undeclared exception!
      try { 
        .Gson.Types.getCollectionElementType(wildcardType0, (Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        .Gson.Types.getArrayComponentType((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Types", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Properties> class0 = Properties.class;
      WildcardType wildcardType0 = .Gson.Types.subtypeOf(class0);
      // Undeclared exception!
      try { 
        .Gson.Types.getArrayComponentType(wildcardType0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.gson.internal.$Gson$Types$WildcardTypeImpl cannot be cast to java.lang.Class
         //
         verifyException("com.google.gson.internal.$Gson$Types", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Object> class0 = Object.class;
      WildcardType wildcardType0 = .Gson.Types.subtypeOf(class0);
      Type type0 = .Gson.Types.resolve((Type) null, class0, wildcardType0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GenericArrayType genericArrayType0 = .Gson.Types.arrayOf((Type) null);
      Class<Object> class0 = Object.class;
      boolean boolean0 = .Gson.Types.equals((Type) genericArrayType0, (Type) class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GenericArrayType genericArrayType0 = .Gson.Types.arrayOf((Type) null);
      Class<String> class0 = String.class;
      GenericArrayType genericArrayType1 = .Gson.Types.arrayOf(class0);
      boolean boolean0 = .Gson.Types.equals((Type) genericArrayType0, (Type) genericArrayType1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Type type0 = .Gson.Types.resolve((Type) null, class0, class0);
      WildcardType wildcardType0 = .Gson.Types.subtypeOf(type0);
      Class<?> class1 = .Gson.Types.getRawType(wildcardType0);
      assertFalse(class1.isInterface());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Type type0 = .Gson.Types.canonicalize((Type) null);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GenericArrayType genericArrayType0 = .Gson.Types.arrayOf((Type) null);
      Type type0 = .Gson.Types.canonicalize(genericArrayType0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Type type0 = .Gson.Types.resolve(class0, class0, class0);
      Class class1 = (Class).Gson.Types.canonicalize(type0);
      assertFalse(class1.isEnum());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<Object> class1 = Object.class;
      Class class2 = (Class).Gson.Types.getGenericSupertype((Type) null, class0, class1);
      WildcardType wildcardType0 = .Gson.Types.supertypeOf(class0);
      Properties properties0 = new Properties();
      properties0.put(wildcardType0, class2);
      assertEquals(1, class2.getModifiers());
      assertEquals("class java.lang.Object", class2.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<Object> class1 = Object.class;
      Class class2 = (Class).Gson.Types.getGenericSupertype((Type) null, class0, class1);
      assertNotNull(class2);
      
      WildcardType wildcardType0 = .Gson.Types.subtypeOf(class1);
      Properties properties0 = new Properties();
      properties0.put(wildcardType0, class2);
      assertEquals(1, class2.getModifiers());
      assertEquals("class java.lang.Object", class2.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<Properties> class0 = Properties.class;
      WildcardType wildcardType0 = .Gson.Types.subtypeOf(class0);
      WildcardType wildcardType1 = .Gson.Types.supertypeOf(wildcardType0);
      Type type0 = .Gson.Types.canonicalize(wildcardType1);
      WildcardType wildcardType2 = .Gson.Types.supertypeOf(wildcardType1);
      boolean boolean0 = .Gson.Types.equals(type0, (Type) wildcardType2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<Object> class0 = Object.class;
      GenericArrayType genericArrayType0 = .Gson.Types.arrayOf(class0);
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      ParameterizedType parameterizedType0 = .Gson.Types.newParameterizedTypeWithOwner(class0, genericArrayType0, typeArray0);
      Type type0 = .Gson.Types.canonicalize(parameterizedType0);
      ParameterizedType parameterizedType1 = .Gson.Types.newParameterizedTypeWithOwner(class0, type0, typeArray0);
      boolean boolean0 = .Gson.Types.equals(type0, (Type) parameterizedType1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Type[] typeArray0 = new Type[0];
      ParameterizedType parameterizedType0 = .Gson.Types.newParameterizedTypeWithOwner((Type) null, (Type) null, typeArray0);
      ParameterizedType parameterizedType1 = .Gson.Types.newParameterizedTypeWithOwner(parameterizedType0, (Type) null, typeArray0);
      ParameterizedType parameterizedType2 = .Gson.Types.newParameterizedTypeWithOwner(parameterizedType1, parameterizedType0, typeArray0);
      boolean boolean0 = .Gson.Types.equals((Type) parameterizedType1, (Type) parameterizedType2);
      assertFalse(parameterizedType2.equals((Object)parameterizedType0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Type[] typeArray0 = .Gson.Types.EMPTY_TYPE_ARRAY;
      Class<String> class0 = String.class;
      ParameterizedType parameterizedType0 = .Gson.Types.newParameterizedTypeWithOwner((Type) null, class0, typeArray0);
      assertNotNull(parameterizedType0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<Object> class1 = Object.class;
      WildcardType wildcardType0 = .Gson.Types.supertypeOf(class0);
      Type type0 = .Gson.Types.resolve((Type) null, class1, wildcardType0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Properties> class1 = Properties.class;
      Class class2 = (Class).Gson.Types.getGenericSupertype(class1, class1, class0);
      Type[] typeArray0 = new Type[9];
      typeArray0[0] = (Type) class2;
      typeArray0[1] = (Type) class2;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class2;
      typeArray0[5] = (Type) class1;
      typeArray0[6] = (Type) class2;
      typeArray0[7] = (Type) class0;
      WildcardType wildcardType0 = .Gson.Types.subtypeOf(typeArray0[2]);
      typeArray0[8] = (Type) wildcardType0;
      ParameterizedType parameterizedType0 = .Gson.Types.newParameterizedTypeWithOwner(class1, class2, typeArray0);
      .Gson.Types.resolve(wildcardType0, class0, parameterizedType0);
      assertEquals(17, class2.getModifiers());
      assertEquals("class java.lang.String", class2.toString());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Class<Properties> class0 = Properties.class;
      WildcardType wildcardType0 = .Gson.Types.subtypeOf(class0);
      GenericArrayType genericArrayType0 = .Gson.Types.arrayOf(wildcardType0);
      Class<?> class1 = .Gson.Types.getRawType(genericArrayType0);
      .Gson.Types.resolve(class1, class0, genericArrayType0);
      assertEquals("class [Ljava.util.Properties;", class1.toString());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      GenericArrayType genericArrayType0 = .Gson.Types.arrayOf((Type) null);
      Class<String> class0 = String.class;
      GenericArrayType genericArrayType1 = .Gson.Types.arrayOf(class0);
      Class<?> class1 = .Gson.Types.getRawType(genericArrayType1);
      Class<Object> class2 = Object.class;
      Type type0 = .Gson.Types.resolve(genericArrayType0, class2, class1);
      // Undeclared exception!
      try { 
        .Gson.Types.getCollectionElementType(type0, class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Class<Properties> class0 = Properties.class;
      Class<Integer> class1 = Integer.class;
      Type[] typeArray0 = .Gson.Types.getMapKeyAndValueTypes(class0, class1);
      assertEquals(2, typeArray0.length);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Type type0 = .Gson.Types.resolve((Type) null, class0, class0);
      WildcardType wildcardType0 = .Gson.Types.subtypeOf(type0);
      GenericArrayType genericArrayType0 = .Gson.Types.arrayOf(wildcardType0);
      Type type1 = .Gson.Types.getArrayComponentType(genericArrayType0);
      assertNotNull(type1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Class<Properties> class0 = Properties.class;
      Type type0 = .Gson.Types.getArrayComponentType(class0);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Properties> class1 = Properties.class;
      Type type0 = .Gson.Types.getGenericSupertype((Type) null, class0, class1);
      // Undeclared exception!
      try { 
        .Gson.Types.newParameterizedTypeWithOwner(type0, class0, (Type[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<?> class1 = .Gson.Types.getRawType(class0);
      Class<Properties> class2 = Properties.class;
      Type[] typeArray0 = .Gson.Types.getMapKeyAndValueTypes(class1, class2);
      assertEquals(2, typeArray0.length);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Class<Properties> class0 = Properties.class;
      WildcardType wildcardType0 = .Gson.Types.subtypeOf(class0);
      Class<Integer> class1 = Integer.class;
      Type type0 = .Gson.Types.getSupertype(wildcardType0, class1, class1);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = .Gson.Types.typeToString(class0);
      assertEquals("java.lang.Object", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        .Gson.Types.typeToString((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Object object0 = new Object();
      int int0 = .Gson.Types.hashCodeOrZero(object0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Type type0 = .Gson.Types.resolve(class0, class0, class0);
      WildcardType wildcardType0 = .Gson.Types.subtypeOf(class0);
      Type type1 = .Gson.Types.canonicalize(wildcardType0);
      boolean boolean0 = .Gson.Types.equals(type1, type0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Type[] typeArray0 = new Type[0];
      ParameterizedType parameterizedType0 = .Gson.Types.newParameterizedTypeWithOwner((Type) null, (Type) null, typeArray0);
      boolean boolean0 = .Gson.Types.equals((Type) null, (Type) parameterizedType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Class<Object> class0 = Object.class;
      GenericArrayType genericArrayType0 = .Gson.Types.arrayOf(class0);
      GenericArrayType genericArrayType1 = .Gson.Types.arrayOf(genericArrayType0);
      WildcardType wildcardType0 = .Gson.Types.subtypeOf(genericArrayType1);
      WildcardType wildcardType1 = .Gson.Types.subtypeOf(genericArrayType0);
      boolean boolean0 = .Gson.Types.equals((Type) wildcardType0, (Type) wildcardType1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      ParameterizedType parameterizedType0 = .Gson.Types.newParameterizedTypeWithOwner(class0, class0, typeArray0);
      Type[] typeArray1 = new Type[2];
      typeArray1[0] = (Type) class0;
      typeArray1[1] = (Type) parameterizedType0;
      ParameterizedType parameterizedType1 = .Gson.Types.newParameterizedTypeWithOwner(typeArray0[1], typeArray0[2], typeArray1);
      boolean boolean0 = .Gson.Types.equals((Type) parameterizedType1, (Type) parameterizedType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<?> class1 = .Gson.Types.getRawType(class0);
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) class1;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class1;
      typeArray0[3] = (Type) class1;
      ParameterizedType parameterizedType0 = .Gson.Types.newParameterizedTypeWithOwner(class1, class1, typeArray0);
      ParameterizedType parameterizedType1 = .Gson.Types.newParameterizedTypeWithOwner(class1, class0, typeArray0);
      boolean boolean0 = .Gson.Types.equals((Type) parameterizedType0, (Type) parameterizedType1);
      assertTrue(boolean0);
  }
}
