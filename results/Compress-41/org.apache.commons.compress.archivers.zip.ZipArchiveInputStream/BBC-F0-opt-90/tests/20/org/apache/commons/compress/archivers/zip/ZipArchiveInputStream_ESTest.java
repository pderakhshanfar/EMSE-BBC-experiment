/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 16:15:39 GMT 2021
 */

package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Enumeration;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.zip.AsiExtraField;
import org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.apache.commons.compress.archivers.zip.ZipExtraField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ZipArchiveInputStream_ESTest extends ZipArchiveInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0);
      zipArchiveInputStream0.skip(0L);
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.getNextZipEntry();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[42];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "y88c@-Iw`z{L%{uCA=");
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      zipArchiveInputStream0.getNextZipEntry();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[34];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, (String) null);
      zipArchiveInputStream0.getNextEntry();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZipArchiveInputStream.matches(byteArray0, 4);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, "SETUID");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      zipArchiveInputStream0.read(byteArray0);
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte) (-12);
      byteArray0[6] = (byte) (-91);
      byteArray0[7] = (byte)20;
      byteArray0[8] = (byte)0;
      zipArchiveInputStream0.read(byteArray0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("SETUID");
      jarArchiveEntry0.setVersionMadeBy(845);
      zipArchiveInputStream0.skip(0);
      zipArchiveInputStream0.canReadEntryData(jarArchiveEntry0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[4];
      sequenceInputStream0.available();
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-80);
      sequenceInputStream0.mark((byte)95);
      byteArray0[2] = (byte)95;
      byteArray0[2] = (byte) (-91);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0, (String) null, true, true);
      zipArchiveInputStream0.mark(432);
      System.setCurrentTimeMillis(0L);
      zipArchiveInputStream0.getNextEntry();
      zipArchiveInputStream0.skip(0);
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0);
      zipArchiveInputStream1.getNextZipEntry();
      zipArchiveInputStream0.skip(2195L);
      zipArchiveInputStream0.canReadEntryData((ArchiveEntry) null);
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.mark((-675));
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0, "UTF8", true, false);
      zipArchiveInputStream0.mark(16);
      System.setCurrentTimeMillis((-505L));
      zipArchiveInputStream0.getNextEntry();
      zipArchiveInputStream0.skip(1024L);
      zipArchiveInputStream0.getNextEntry();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, "SETUID");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte) (-32);
      byteArray0[5] = (byte)85;
      ZipArchiveInputStream.matches(byteArray0, 84446);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ZipArchiveInputStream.matches(byteArray0, 291);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)89;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte)89;
      byteArray0[6] = (byte)89;
      byteArray0[7] = (byte)89;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      zipArchiveInputStream0.getNextZipEntry();
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0, (String) null, true);
      zipArchiveInputStream1.mark((byte)89);
      System.setCurrentTimeMillis((-5849L));
      zipArchiveInputStream0.getNextEntry();
      zipArchiveInputStream0.skip(0L);
      zipArchiveInputStream0.getNextEntry();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[4];
      sequenceInputStream0.available();
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-80);
      sequenceInputStream0.mark((byte)95);
      byteArray0[2] = (byte)95;
      byteArray0[2] = (byte) (-91);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0, (String) null, true, true);
      zipArchiveInputStream0.mark(432);
      System.setCurrentTimeMillis(0L);
      zipArchiveInputStream0.getNextEntry();
      zipArchiveInputStream0.skip(0);
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0);
      zipArchiveInputStream1.getNextZipEntry();
      zipArchiveInputStream0.skip(2195L);
      zipArchiveInputStream0.canReadEntryData((ArchiveEntry) null);
      zipArchiveInputStream0.close();
      zipArchiveInputStream0.getNextEntry();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte)89;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[6] = (byte)89;
      byteArray0[7] = (byte)89;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      zipArchiveInputStream0.getNextZipEntry();
      zipArchiveInputStream0.mark((byte)89);
      System.setCurrentTimeMillis((byte)89);
      zipArchiveInputStream0.getNextEntry();
      zipArchiveInputStream0.skip((byte)89);
      zipArchiveInputStream0.getNextEntry();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Enumeration<PushbackInputStream> enumeration1 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      sequenceInputStream0.available();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream1);
      sequenceInputStream2.mark(882);
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(sequenceInputStream1, sequenceInputStream1);
      byte[] byteArray0 = new byte[0];
      sequenceInputStream3.read(byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, (String) null, false, true);
      zipArchiveInputStream0.mark(4);
      zipArchiveInputStream0.skip(12L);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-80);
      byteArray1[1] = (byte) (-80);
      byteArray1[2] = (byte)46;
      byteArray1[3] = (byte)95;
      byteArray1[4] = (byte) (-80);
      ZipArchiveInputStream.matches(byteArray1, (byte)46);
      zipArchiveInputStream0.getNextZipEntry();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      byte byte0 = (byte)0;
      zipArchiveInputStream0.close();
      zipArchiveInputStream0.getNextEntry();
      System.setCurrentTimeMillis(432L);
      zipArchiveInputStream0.getNextEntry();
      try { 
        zipArchiveInputStream0.skip(16L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The stream is closed
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 9484);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        ZipArchiveInputStream.matches(byteArray0, 9484);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      System.setCurrentTimeMillis(1742L);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)30;
      ZipArchiveInputStream.matches(byteArray0, (-582));
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.skip(2149L);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      zipArchiveInputStream0.getNextZipEntry();
      ZipArchiveInputStream.matches(byteArray0, (byte)46);
      ZipArchiveInputStream.matches(byteArray0, (byte)84);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)63;
      byteArray1[1] = (byte)57;
      byteArray1[2] = (byte)57;
      byteArray1[3] = (byte)30;
      byteArray1[4] = (byte)30;
      byteArray1[5] = (byte) (-20);
      ZipArchiveInputStream.matches(byteArray1, 2142524101);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[4];
      sequenceInputStream0.available();
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-80);
      sequenceInputStream0.mark((byte)95);
      byteArray0[2] = (byte)46;
      byteArray0[2] = (byte) (-91);
      sequenceInputStream0.read(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0, (String) null, true, true);
      zipArchiveInputStream0.mark(432);
      System.setCurrentTimeMillis(0L);
      zipArchiveInputStream0.getNextEntry();
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.skip((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("!F;");
      zipArchiveInputStream0.canReadEntryData(tarArchiveEntry0);
      zipArchiveInputStream0.close();
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("", 0L);
      zipArchiveInputStream0.canReadEntryData(cpioArchiveEntry0);
      zipArchiveInputStream0.close();
      zipArchiveInputStream0.getNextEntry();
      byte[] byteArray0 = new byte[3];
      zipArchiveInputStream0.getNextEntry();
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte) (-1);
      zipArchiveInputStream0.available();
      zipArchiveInputStream0.getNextZipEntry();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      zipArchiveInputStream0.read(byteArray0, (int) (byte) (-8), 16);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, (String) null, true);
      try { 
        zipArchiveInputStream0.getNextZipEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("!F;");
      zipArchiveInputStream0.canReadEntryData(tarArchiveEntry0);
      zipArchiveInputStream0.close();
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("", 0L);
      zipArchiveInputStream0.canReadEntryData(cpioArchiveEntry0);
      zipArchiveInputStream0.close();
      zipArchiveInputStream0.getNextEntry();
      byte[] byteArray0 = new byte[3];
      zipArchiveInputStream0.getNextEntry();
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte) (-1);
      try { 
        zipArchiveInputStream0.read(byteArray0, (int) (byte) (-1), (int) (byte)20);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The stream is closed
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte) (-43);
      byteArray0[5] = (byte) (-1);
      ZipArchiveInputStream.matches(byteArray0, 1501);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.close();
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, "", false, false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      zipArchiveInputStream0.close();
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("", 0L);
      zipArchiveInputStream0.canReadEntryData(cpioArchiveEntry0);
      zipArchiveInputStream0.close();
      zipArchiveInputStream0.getNextEntry();
      try { 
        zipArchiveInputStream0.skip(4294967295L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The stream is closed
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      zipArchiveInputStream0.close();
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("", 0L);
      cpioArchiveEntry0.setInode((-1078L));
      zipArchiveInputStream0.canReadEntryData(cpioArchiveEntry0);
      zipArchiveInputStream0.close();
      zipArchiveInputStream0.getNextEntry();
      zipArchiveInputStream0.getNextEntry();
      zipArchiveInputStream0.getNextEntry();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)63;
      zipArchiveInputStream0.mark((byte)63);
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.skip((-975L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[4];
      sequenceInputStream0.available();
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-80);
      sequenceInputStream0.mark((byte)95);
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte) (-91);
      sequenceInputStream0.read(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0, (String) null, true, true);
      zipArchiveInputStream0.mark(432);
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.skip((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = null;
      int int0 = 1576;
      // Undeclared exception!
      try { 
        ZipArchiveInputStream.matches((byte[]) null, 1576);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      long long0 = (-2220L);
      short short0 = (short)4910;
      String string0 = "%NljH7C";
      String string1 = "";
      String string2 = "";
      try { 
        zipArchiveInputStream0.getNextEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, "U", false, true);
      zipArchiveInputStream0.close();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)71;
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)30;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 326, (byte)30);
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, "'/F)\"9a8 ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // '/F)\"9a8 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      pipedInputStream0.mark((byte)0);
      byteArray0[0] = (byte)0;
      pipedOutputStream0.write(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, "", true);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)89;
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      ZipArchiveInputStream.matches(byteArray0, (byte)89);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("5/EU.mlzFi_!.5");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, (String) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte)65;
      ZipArchiveInputStream.matches(byteArray0, 0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte) (-4);
      byteArray0[6] = (byte)25;
      byteArray0[7] = (byte) (-98);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1000, (-958));
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, "\"'#", false, false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // \"'#
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }
}
