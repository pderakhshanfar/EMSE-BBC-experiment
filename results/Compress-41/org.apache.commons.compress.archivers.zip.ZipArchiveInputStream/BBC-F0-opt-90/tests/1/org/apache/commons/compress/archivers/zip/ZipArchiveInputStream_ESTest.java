/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 22:13:29 GMT 2021
 */

package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.file.attribute.FileTime;
import java.util.Enumeration;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.apache.commons.compress.archivers.zip.ZipExtraField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ZipArchiveInputStream_ESTest extends ZipArchiveInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)80;
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0, "Ru", true, true);
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.getNextZipEntry();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 1024);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(bufferedInputStream0, "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream");
      zipArchiveInputStream0.skip(1024);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte) (-40);
      byteArray0[4] = (byte) (-40);
      byteArray0[5] = (byte) (-40);
      byteArray0[6] = (byte) (-40);
      try { 
        zipArchiveInputStream0.getNextEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      System.setCurrentTimeMillis(127L);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2398), 4286);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      zipArchiveInputStream0.read(byteArray0, (-2398), (-2398));
      byteArrayInputStream0.mark(4286);
      byteArrayInputStream0.markSupported();
      zipArchiveInputStream0.skip(36864L);
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.getNextZipEntry();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
      zipArchiveInputStream0.skip(1036L);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("splitting");
      zipArchiveInputStream0.canReadEntryData(jarArchiveEntry0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, "org.apache.commons.compress.archivers.zip.ZipEncodingHelper", true);
      zipArchiveInputStream0.skip(1037L);
      zipArchiveInputStream0.mark(30);
      zipArchiveInputStream0.skip(30);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-94);
      byteArray0[6] = (byte)65;
      ZipArchiveInputStream.matches(byteArray0, (byte)1);
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0, "org.apache.commons.compress.archivers.zip.ZipEncodingHelper", false);
      zipArchiveInputStream1.close();
      ZipArchiveInputStream.matches(byteArray0, 12);
      ZipArchiveInputStream.matches(byteArray0, (byte)1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, "org.apache.commons.compress.archivers.zip.ZipEncodingHelper", true);
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0, "org.apache.commons.compress.archivers.zip.ZipEncodingHelper", true, false);
      zipArchiveInputStream1.close();
      MockFile.createTempFile("6lY8`xi bn-L|B:F#<", (String) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte) (-25);
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte)15;
      ZipArchiveInputStream.matches(byteArray0, (byte)15);
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("");
      zipArchiveInputStream1.canReadEntryData(tarArchiveEntry0);
      zipArchiveInputStream0.getNextEntry();
      try { 
        zipArchiveInputStream0.read(byteArray0, (int) (byte)15, 2553);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The stream is closed
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)38;
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, (String) null, false, true);
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0, (String) null, false);
      zipArchiveInputStream0.read(byteArray0, (int) (byte)39, (int) (byte)0);
      zipArchiveInputStream1.canReadEntryData((ArchiveEntry) null);
      ZipArchiveInputStream.matches(byteArray0, (byte)0);
      zipArchiveInputStream1.close();
      zipArchiveInputStream1.getBytesRead();
      try { 
        zipArchiveInputStream0.read(byteArray0, (-1), 423);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The stream is closed
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        ZipArchiveInputStream.matches(byteArray0, 1809);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, "IMPLODING", true, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)42;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-9);
      byteArray0[3] = (byte)12;
      byte byte0 = (byte)94;
      byteArray0[4] = (byte)94;
      zipArchiveInputStream0.read(byteArray0);
      byte[] byteArray1 = null;
      zipArchiveInputStream0.read((byte[]) null, (-1073741823), 199);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1L));
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", false);
      zipArchiveInputStream0.canReadEntryData(tarArchiveEntry0);
      // Undeclared exception!
      try { 
        ZipArchiveInputStream.matches((byte[]) null, 12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      byte[] byteArray0 = new byte[2];
      zipArchiveInputStream0.read(byteArray0, 973, 0);
      byteArray0[0] = (byte) (-13);
      zipArchiveInputStream0.read();
      ZipArchiveInputStream.matches(byteArray0, 247);
      try { 
        zipArchiveInputStream0.getNextZipEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)38;
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, "BZLIB", true);
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0);
      zipArchiveInputStream1.getNextZipEntry();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      MockFile mockFile0 = new MockFile("");
      File file0 = MockFile.createTempFile("CzY9AD#I", "lMw_PWp~g{{Jc", (File) mockFile0);
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      String string0 = "sZT";
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0, "sZT", true, true);
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0);
      zipArchiveInputStream1.canReadEntryData(tarArchiveEntry0);
      ZipArchiveInputStream.matches(byteArray0, 16877);
      zipArchiveInputStream1.getNextZipEntry();
      ZipArchiveInputStream zipArchiveInputStream2 = null;
      try {
        zipArchiveInputStream2 = new ZipArchiveInputStream(zipArchiveInputStream0, "", false, true);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)29;
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry("kC", "kC");
      ZipArchiveInputStream.matches(byteArray0, 4);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 99
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-47);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte) (-67);
      byteArray0[8] = (byte) (-69);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, (String) null, true, true);
      zipArchiveInputStream0.read(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)12;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-69);
      byteArray1[3] = (byte) (-67);
      byteArray1[4] = (byte)101;
      byteArray1[5] = (byte)11;
      byteArray1[6] = (byte) (-67);
      byteArray1[7] = (byte)121;
      byteArray1[8] = (byte)0;
      zipArchiveInputStream0.read(byteArray1, (int) (byte) (-47), (-47));
      ZipArchiveInputStream.matches(byteArray0, (byte)12);
      zipArchiveInputStream0.close();
      try { 
        zipArchiveInputStream0.skip((byte)121);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The stream is closed
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, "org.apache.commons.compress.archivers.arj.LocalFileHeader", true);
      try { 
        zipArchiveInputStream0.getNextEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)38;
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      zipArchiveInputStream0.close();
      String string0 = "`/wO+eSr";
      File file0 = MockFile.createTempFile("`/wO+eSr", "Pnt");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
      zipArchiveInputStream0.canReadEntryData(tarArchiveEntry0);
      ZipArchiveInputStream.matches(byteArray0, 16877);
      zipArchiveInputStream0.getNextZipEntry();
      ZipArchiveInputStream zipArchiveInputStream1 = null;
      try {
        zipArchiveInputStream1 = new ZipArchiveInputStream(sequenceInputStream0, "", false, false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-47);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte) (-67);
      byteArray0[8] = (byte) (-69);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, (String) null, true, true);
      zipArchiveInputStream0.read(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)12;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-69);
      byteArray1[3] = (byte) (-67);
      byteArray1[4] = (byte)101;
      byteArray1[5] = (byte)11;
      byteArray1[6] = (byte) (-67);
      byteArray1[7] = (byte)121;
      byteArray1[8] = (byte)0;
      zipArchiveInputStream0.read(byteArray1, (int) (byte) (-47), (-47));
      zipArchiveInputStream0.canReadEntryData((ArchiveEntry) null);
      ZipArchiveInputStream.matches(byteArray0, (byte)12);
      zipArchiveInputStream0.close();
      zipArchiveInputStream0.skip((byte)0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte)41;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-3880), (-3880));
      byteArrayInputStream0.markSupported();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pushbackInputStream0);
      pushbackInputStream0.markSupported();
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0, "BZLIB");
      zipArchiveInputStream1.close();
      zipArchiveInputStream1.close();
      zipArchiveInputStream1.getNextEntry();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, "org.apache.commons.compress.archivers.zip.ZipEncodingHelper", true);
      zipArchiveInputStream0.skip(9223372036854775807L);
      zipArchiveInputStream0.mark(960);
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0, "3l", true, true);
      zipArchiveInputStream0.close();
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "6lY8`xi bn-L|B:F#<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, "", true, true);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertNotNull(zipArchiveInputStream0);
      
      byte[] byteArray0 = new byte[2];
      int int0 = zipArchiveInputStream0.read(byteArray0, 973, 0);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte)0;
      int int1 = 0;
      int int2 = zipArchiveInputStream0.available();
      assertEquals(0, int2);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      zipArchiveInputStream0.read(byteArray0);
      zipArchiveInputStream0.read(byteArray0, 0, 3597);
      zipArchiveInputStream0.read(byteArray0, 0, (-1));
      zipArchiveInputStream0.close();
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.skip((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte) (-95);
      byteArray0[5] = (byte) (-102);
      byteArray0[6] = (byte)95;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-85), (byte)12, (byte)0, (byte)26, (byte) (-95), (byte) (-102), (byte)95, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-85), (byte)12, (byte)0, (byte)26, (byte) (-95), (byte) (-102), (byte)95, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertNotNull(zipArchiveInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0);
      assertArrayEquals(new byte[] {(byte) (-85), (byte)12, (byte)0, (byte)26, (byte) (-95), (byte) (-102), (byte)95, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream1.getCount());
      assertEquals(0L, zipArchiveInputStream1.getBytesRead());
      assertNotNull(zipArchiveInputStream1);
      assertFalse(zipArchiveInputStream1.equals((Object)zipArchiveInputStream0));
      
      int int0 = zipArchiveInputStream1.read(byteArray0, (int) (byte) (-102), (int) (byte)0);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte) (-85), (byte)12, (byte)0, (byte)26, (byte) (-95), (byte) (-102), (byte)95, (byte)0, (byte)0}, byteArray0);
      assertNotSame(zipArchiveInputStream0, zipArchiveInputStream1);
      assertNotSame(zipArchiveInputStream1, zipArchiveInputStream0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream1.getCount());
      assertEquals(0L, zipArchiveInputStream1.getBytesRead());
      assertFalse(zipArchiveInputStream0.equals((Object)zipArchiveInputStream1));
      assertFalse(zipArchiveInputStream1.equals((Object)zipArchiveInputStream0));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)102;
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, 336);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)80, (byte)102}, byteArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)38;
      int int0 = 336;
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, 336);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)39, (byte)0, (byte)38}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte)93;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)0;
      byte byte2 = (byte)58;
      byteArray0[3] = (byte)58;
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, (byte)93);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)93, (byte)0, (byte)58}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      int int0 = sequenceInputStream0.available();
      assertEquals(0, int0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, 4262);
      assertNotNull(bufferedInputStream0);
      
      int int1 = bufferedInputStream0.read(byteArray0);
      assertEquals((-1), int1);
      assertArrayEquals(new byte[] {(byte)0, (byte)93, (byte)0, (byte)58}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertFalse(int1 == int0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(bufferedInputStream0, "dd /Z+,`sJ*6>PRp(", false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // dd /Z+,`sJ*6>PRp(
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = 4095;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 4095);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, "@-e`<Jv`nUS7EhnK", false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // @-e`<Jv`nUS7EhnK
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)0;
      int int0 = 0;
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, 0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-34), (byte)92, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      int int1 = (-950);
      int int2 = 1168;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-950), 1168);
      assertArrayEquals(new byte[] {(byte) (-34), (byte)92, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(953, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      // Undeclared exception!
      try { 
        byteArrayInputStream0.read(byteArray0, 382, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0);
      assertFalse(fileDescriptor0.valid());
      assertNotNull(bufferedInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(bufferedInputStream0, "3P[ U");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 3P[ U
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }
}
