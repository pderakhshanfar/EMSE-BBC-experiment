/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 04:35:29 GMT 2021
 */

package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Enumeration;
import java.util.jar.JarEntry;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.zip.FallbackZipEncoding;
import org.apache.commons.compress.archivers.zip.GeneralPurposeBit;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ZipArchiveInputStream_ESTest extends ZipArchiveInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0);
      long long0 = zipArchiveInputStream1.skip(1024L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[34];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      zipArchiveInputStream0.getNextZipEntry();
      zipArchiveInputStream0.getNextEntry();
      zipArchiveInputStream0.close();
      assertEquals(34L, zipArchiveInputStream0.getBytesRead());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      zipArchiveInputStream0.getNextEntry();
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(30L, zipArchiveInputStream0.getBytesRead());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)64;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-754), (byte)20);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      zipArchiveInputStream0.skip((byte)69);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.getNextEntry();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)58;
      ZipArchiveInputStream.matches(byteArray0, (byte)80);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 30);
      String string0 = "*";
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(pushbackInputStream0, "*", false, false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // *
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)64;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-754), (byte)20);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      zipArchiveInputStream0.skip((byte)69);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(byteArrayInputStream1);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveInputStream1.canReadEntryData(zipArchiveEntry0);
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.getNextZipEntry();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)15;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2147483646), (byte) (-33));
      byteArrayInputStream0.markSupported();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      zipArchiveInputStream0.skip(3133);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0);
      // Undeclared exception!
      zipArchiveInputStream0.getNextZipEntry();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
      zipArchiveInputStream0.available();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("VUB(lY+9");
      zipArchiveEntry0.setGeneralPurposeBit((GeneralPurposeBit) null);
      zipArchiveInputStream0.canReadEntryData((ArchiveEntry) null);
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.canReadEntryData(zipArchiveEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 30;
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        ZipArchiveInputStream.matches((byte[]) null, 170);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte byte0 = (byte)0;
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        ZipArchiveInputStream.matches(byteArray0, (byte)77);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      zipArchiveInputStream0.available();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("");
      zipArchiveInputStream0.canReadEntryData(zipArchiveEntry0);
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)117;
      byte byte0 = (byte)77;
      try { 
        pipedInputStream0.read(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)110;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, bufferedInputStream0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      zipArchiveInputStream0.read();
      zipArchiveInputStream0.mark((byte) (-96));
      zipArchiveInputStream0.read(byteArray0, (int) (byte)0, (int) (byte)0);
      zipArchiveInputStream0.close();
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(pipedInputStream0);
      try { 
        zipArchiveInputStream1.getNextZipEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe closed
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0, (String) null);
      zipArchiveInputStream0.available();
      zipArchiveInputStream1.getNextEntry();
      pipedInputStream0.markSupported();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)108;
      byteArray0[1] = (byte)77;
      byte[] byteArray1 = new byte[4];
      zipArchiveInputStream1.close();
      assertEquals(0, zipArchiveInputStream1.getCount());
      
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray1, 4);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3133, 49);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      long long0 = zipArchiveInputStream0.skip(0L);
      assertEquals(0L, long0);
      
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, 82);
      assertFalse(boolean0);
      
      zipArchiveInputStream0.read(byteArray0, (int) (byte)0, (int) (byte)0);
      zipArchiveInputStream0.read(byteArray0, (-429), (int) (byte)0);
      zipArchiveInputStream0.getNextZipEntry();
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0, (String) null);
      zipArchiveInputStream0.available();
      zipArchiveInputStream1.getNextEntry();
      byte byte0 = (byte)108;
      pipedInputStream0.markSupported();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)108;
      byteArray0[1] = (byte)77;
      byte[] byteArray1 = new byte[4];
      zipArchiveInputStream1.close();
      try { 
        zipArchiveInputStream0.skip((byte)77);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The stream is closed
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0, (String) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-46);
      zipArchiveInputStream0.available();
      byteArray0[1] = (byte) (-119);
      zipArchiveInputStream1.read(byteArray0, (int) (byte) (-119), (int) (byte) (-46));
      zipArchiveInputStream1.read();
      zipArchiveInputStream1.mark(750);
      zipArchiveInputStream1.skip(9223372036854775807L);
      zipArchiveInputStream1.read(byteArray0, (-1), (-1372));
      zipArchiveInputStream1.close();
      zipArchiveInputStream0.getNextEntry();
      zipArchiveInputStream0.canReadEntryData((ArchiveEntry) null);
      zipArchiveInputStream0.getNextZipEntry();
      zipArchiveInputStream1.getNextEntry();
      zipArchiveInputStream1.getNextZipEntry();
      ZipArchiveInputStream.matches(byteArray0, (byte)29);
      ArchiveEntry archiveEntry0 = zipArchiveInputStream0.getNextEntry();
      assertNull(archiveEntry0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0, (String) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-46);
      zipArchiveInputStream0.available();
      byteArray0[1] = (byte) (-119);
      zipArchiveInputStream1.read(byteArray0, (int) (byte) (-119), (int) (byte) (-46));
      zipArchiveInputStream1.read();
      zipArchiveInputStream1.mark(750);
      int int0 = zipArchiveInputStream1.read(byteArray0, (-1), (-1372));
      assertEquals((-1), int0);
      
      zipArchiveInputStream1.close();
      zipArchiveInputStream0.getNextEntry();
      boolean boolean0 = zipArchiveInputStream0.canReadEntryData((ArchiveEntry) null);
      zipArchiveInputStream0.getNextZipEntry();
      zipArchiveInputStream1.getNextEntry();
      zipArchiveInputStream1.getNextZipEntry();
      zipArchiveInputStream1.getNextEntry();
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-119);
      byteArray1[1] = (byte) (-119);
      byteArray1[2] = (byte)115;
      byteArray1[3] = (byte) (-119);
      byteArray1[4] = (byte) (-119);
      byteArray1[5] = (byte) (-119);
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte) (-119);
      byteArray1[8] = (byte) (-119);
      boolean boolean1 = ZipArchiveInputStream.matches(byteArray1, 0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        zipArchiveInputStream1.skip((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3133, 46);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      zipArchiveInputStream0.skip(0L);
      ZipArchiveInputStream.matches(byteArray0, 82);
      zipArchiveInputStream0.read(byteArray0, (int) (byte)0, (int) (byte)0);
      int int0 = zipArchiveInputStream0.read(byteArray0, (-429), (int) (byte)0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      byte[] byteArray0 = new byte[2];
      sequenceInputStream0.mark((byte)46);
      sequenceInputStream0.read(byteArray0);
      sequenceInputStream0.read(byteArray0, (int) (byte)46, (int) (byte)46);
      sequenceInputStream0.available();
      sequenceInputStream0.skip(0L);
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)0;
      zipArchiveInputStream0.read(byteArray0, 0, 3254);
      zipArchiveInputStream0.getNextEntry();
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
      zipArchiveInputStream0.available();
      try { 
        zipArchiveInputStream0.getNextEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0, (String) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-46);
      zipArchiveInputStream0.available();
      byteArray0[1] = (byte) (-119);
      zipArchiveInputStream0.read(byteArray0);
      zipArchiveInputStream1.read(byteArray0, (int) (byte) (-119), (int) (byte) (-46));
      zipArchiveInputStream1.read();
      zipArchiveInputStream1.mark(750);
      zipArchiveInputStream1.skip(9223372036854775807L);
      zipArchiveInputStream1.read(byteArray0, (-1), (-1372));
      zipArchiveInputStream1.close();
      zipArchiveInputStream0.getNextEntry();
      zipArchiveInputStream0.canReadEntryData((ArchiveEntry) null);
      zipArchiveInputStream0.getNextZipEntry();
      zipArchiveInputStream1.getNextEntry();
      zipArchiveInputStream1.getNextZipEntry();
      ZipArchiveInputStream.matches(byteArray0, (byte)29);
      zipArchiveInputStream0.getNextEntry();
      zipArchiveInputStream1.close();
      assertEquals(0L, zipArchiveInputStream1.getBytesRead());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte)109;
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, 2412);
      assertFalse(boolean0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 2412);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, "org.apache.commons.compress.archivers.zip.AsiExtraField");
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(zipArchiveInputStream0, pipedInputStream0);
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(sequenceInputStream0, "org.apache.commons.compress.archivers.zip.AsiExtraField", true);
      long long0 = zipArchiveInputStream0.skip(789L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0, (String) null);
      zipArchiveInputStream0.available();
      zipArchiveInputStream1.getNextEntry();
      byte byte0 = (byte)77;
      pipedInputStream0.markSupported();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)108;
      byteArray0[1] = (byte)77;
      byte[] byteArray1 = new byte[4];
      zipArchiveInputStream1.close();
      byteArray1[0] = (byte)20;
      byteArray1[1] = (byte)77;
      byteArray1[2] = (byte)77;
      byteArray1[3] = (byte)108;
      try { 
        pipedInputStream0.read(byteArray1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0, (String) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-46);
      zipArchiveInputStream0.available();
      byteArray0[1] = (byte) (-119);
      zipArchiveInputStream1.read(byteArray0, (int) (byte) (-119), (int) (byte) (-46));
      zipArchiveInputStream1.read();
      zipArchiveInputStream1.mark(750);
      zipArchiveInputStream1.read(byteArray0, (-1), (-1372));
      zipArchiveInputStream1.close();
      zipArchiveInputStream0.getNextEntry();
      zipArchiveInputStream0.canReadEntryData((ArchiveEntry) null);
      zipArchiveInputStream0.getNextZipEntry();
      zipArchiveInputStream1.getNextEntry();
      zipArchiveInputStream1.getNextZipEntry();
      zipArchiveInputStream1.getNextEntry();
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-119);
      byteArray1[1] = (byte) (-119);
      byteArray1[2] = (byte)115;
      byteArray1[3] = (byte) (-119);
      byteArray1[4] = (byte) (-119);
      try { 
        zipArchiveInputStream1.read(byteArray0, (-1911), (-1));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The stream is closed
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      JarEntry jarEntry0 = new JarEntry("The entry doesn't have this timestamp");
      jarEntry0.setComment("The entry doesn't have this timestamp");
      jarEntry0.getCodeSigners();
      JarArchiveEntry jarArchiveEntry0 = null;
      try {
        jarArchiveEntry0 = new JarArchiveEntry(jarEntry0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ZIP compression method can not be negative: -1
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      byte[] byteArray0 = new byte[2];
      sequenceInputStream0.mark((byte)46);
      sequenceInputStream0.read(byteArray0);
      sequenceInputStream0.read(byteArray0, (int) (byte)46, (int) (byte)46);
      sequenceInputStream0.available();
      sequenceInputStream0.skip(0L);
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)0;
      zipArchiveInputStream0.read(byteArray0, 0, 3254);
      zipArchiveInputStream0.getNextEntry();
      zipArchiveInputStream0.close();
      MockFile mockFile0 = new MockFile((String) null, "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$1");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      FallbackZipEncoding fallbackZipEncoding0 = new FallbackZipEncoding("mA()3CK]\"y8#(");
      try { 
        fallbackZipEncoding0.decode(byteArray0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, "", false, false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte)105;
      byteArray0[6] = (byte) (-67);
      byteArray0[7] = (byte)29;
      byteArray0[8] = (byte)117;
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, (byte)29);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, "Z/t+)&F>z");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Z/t+)&F>z
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(dataInputStream0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pushbackInputStream0, "UTF8", false, true);
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.getNextEntry();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      String string0 = "";
      boolean boolean0 = true;
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, "", true);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      ZipArchiveInputStream.matches(byteArray0, (byte) (-57));
      ZipArchiveInputStream.matches(byteArray0, (byte)0);
      String string0 = "2";
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("2");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }
}
