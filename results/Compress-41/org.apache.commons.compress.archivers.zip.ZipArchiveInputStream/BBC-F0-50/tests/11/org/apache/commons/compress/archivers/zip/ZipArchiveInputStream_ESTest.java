/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 22:35:55 GMT 2021
 */

package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Enumeration;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ZipArchiveInputStream_ESTest extends ZipArchiveInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte)30;
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte)41;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-4083), 3245);
      assertArrayEquals(new byte[] {(byte)41, (byte)41, (byte)41, (byte)41, (byte)41, (byte)30, (byte)4, (byte)41}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertEquals(3245, byteArrayInputStream0.available());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)41, (byte)41, (byte)41, (byte)41, (byte)41, (byte)30, (byte)4, (byte)41}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(pushbackInputStream0);
      assertEquals(3245, byteArrayInputStream0.available());
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pushbackInputStream0);
      assertArrayEquals(new byte[] {(byte)41, (byte)41, (byte)41, (byte)41, (byte)41, (byte)30, (byte)4, (byte)41}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(3245, byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.getNextZipEntry();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      long long0 = zipArchiveInputStream0.skip(1024L);
      assertEquals(0L, long0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)80;
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, (byte)89);
      assertArrayEquals(new byte[] {(byte)80, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertFalse(boolean0);
      
      System.setCurrentTimeMillis((byte)89);
      SequenceInputStream sequenceInputStream0 = null;
      try {
        sequenceInputStream0 = new SequenceInputStream((Enumeration<? extends InputStream>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte) (-21);
      byteArray0[5] = (byte) (-119);
      byteArray0[6] = (byte)89;
      byteArray0[7] = (byte)19;
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, (byte)19);
      assertArrayEquals(new byte[] {(byte)80, (byte) (-69), (byte)8, (byte)66, (byte) (-21), (byte) (-119), (byte)89, (byte)19}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertFalse(boolean0);
      
      System.setCurrentTimeMillis((byte) (-69));
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      int int0 = sequenceInputStream0.read();
      assertEquals((-1), int0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0, "o,e-", true);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // o,e-
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      assertNotNull(bufferedInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(dataInputStream0, (InputStream) null);
      assertNotNull(sequenceInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[35];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 4, (byte)60);
      assertEquals(35, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertEquals(31, byteArrayInputStream0.available());
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("ybR/xzF+|w,");
      assertNotNull(jarArchiveEntry0);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("ybR/xzF+|w,", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals("ybR/xzF+|w,", jarArchiveEntry0.getName());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      assertEquals(35, byteArray0.length);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(31, byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(byteArrayInputStream0, (String) null, false, false);
      assertEquals(35, byteArray0.length);
      assertNotNull(zipArchiveInputStream1);
      assertFalse(zipArchiveInputStream1.equals((Object)zipArchiveInputStream0));
      assertEquals(31, byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream1.getBytesRead());
      assertEquals(0, zipArchiveInputStream1.getCount());
      
      boolean boolean0 = zipArchiveInputStream1.canReadEntryData(jarArchiveEntry0);
      assertEquals(35, byteArray0.length);
      assertNotSame(zipArchiveInputStream1, zipArchiveInputStream0);
      assertFalse(boolean0);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertFalse(zipArchiveInputStream1.equals((Object)zipArchiveInputStream0));
      assertEquals(31, byteArrayInputStream0.available());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("ybR/xzF+|w,", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals("ybR/xzF+|w,", jarArchiveEntry0.getName());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0L, zipArchiveInputStream1.getBytesRead());
      assertEquals(0, zipArchiveInputStream1.getCount());
      
      ZipArchiveEntry zipArchiveEntry0 = zipArchiveInputStream1.getNextZipEntry();
      assertEquals(35, byteArray0.length);
      assertNotSame(zipArchiveInputStream1, zipArchiveInputStream0);
      assertNull(zipArchiveEntry0);
      assertFalse(zipArchiveInputStream1.equals((Object)zipArchiveInputStream0));
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(30, zipArchiveInputStream1.getCount());
      assertEquals(30L, zipArchiveInputStream1.getBytesRead());
      
      int int0 = zipArchiveInputStream0.read(byteArray0, 3, (-1));
      assertEquals(35, byteArray0.length);
      assertNotSame(zipArchiveInputStream0, zipArchiveInputStream1);
      assertEquals((-1), int0);
      assertFalse(zipArchiveInputStream0.equals((Object)zipArchiveInputStream1));
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[35];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 4, (byte)60);
      assertEquals(35, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertEquals(31, byteArrayInputStream0.available());
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      assertEquals(35, byteArray0.length);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(31, byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      byteArrayInputStream0.mark(2993);
      assertEquals(35, byteArray0.length);
      assertEquals(31, byteArrayInputStream0.available());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      ArchiveEntry archiveEntry0 = zipArchiveInputStream0.getNextEntry();
      assertEquals(35, byteArray0.length);
      assertNull(archiveEntry0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(30, zipArchiveInputStream0.getCount());
      assertEquals(30L, zipArchiveInputStream0.getBytesRead());
      
      long long0 = zipArchiveInputStream0.skip(40960L);
      assertEquals(35, byteArray0.length);
      assertEquals(0L, long0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(30, zipArchiveInputStream0.getCount());
      assertEquals(30L, zipArchiveInputStream0.getBytesRead());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, (String) null, true);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0, (String) null, true);
      assertNotNull(zipArchiveInputStream1);
      assertFalse(zipArchiveInputStream1.equals((Object)zipArchiveInputStream0));
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0L, zipArchiveInputStream1.getBytesRead());
      assertEquals(0, zipArchiveInputStream1.getCount());
      
      zipArchiveInputStream1.close();
      assertNotSame(zipArchiveInputStream0, zipArchiveInputStream1);
      assertNotSame(zipArchiveInputStream1, zipArchiveInputStream0);
      assertFalse(zipArchiveInputStream0.equals((Object)zipArchiveInputStream1));
      assertFalse(zipArchiveInputStream1.equals((Object)zipArchiveInputStream0));
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0L, zipArchiveInputStream1.getBytesRead());
      assertEquals(0, zipArchiveInputStream1.getCount());
      
      long long0 = 1403L;
      try { 
        zipArchiveInputStream0.skip(1403L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The stream is closed
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.getNextEntry();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(mockFileInputStream0, (String) null, false);
      assertNotNull(zipArchiveInputStream0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)3;
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, (byte)16);
      assertArrayEquals(new byte[] {(byte)86, (byte)9, (byte)0, (byte)16, (byte)3}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(boolean0);
      
      int int0 = zipArchiveInputStream0.read(byteArray0, 205, (int) (byte)86);
      assertArrayEquals(new byte[] {(byte)86, (byte)9, (byte)0, (byte)16, (byte)3}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals((-1), int0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      try { 
        zipArchiveInputStream0.getNextZipEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, (String) null, true);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        ZipArchiveInputStream.matches(byteArray0, 2579);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InputStream inputStream0 = null;
      int int0 = 211;
      // Undeclared exception!
      try { 
        ZipArchiveInputStream.matches((byte[]) null, 211);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, (String) null, true);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      long long0 = zipArchiveInputStream0.skip(4294967295L);
      assertEquals(0L, long0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      sequenceInputStream0.close();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte)0;
      int int0 = sequenceInputStream0.read(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-4), (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals((-1), int0);
      
      Enumeration<PushbackInputStream> enumeration1 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      assertNotNull(sequenceInputStream1);
      assertFalse(sequenceInputStream1.equals((Object)sequenceInputStream0));
      
      int int1 = sequenceInputStream1.read(byteArray0, 1033, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-4), (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotSame(sequenceInputStream1, sequenceInputStream0);
      assertEquals((-1), int1);
      assertFalse(sequenceInputStream1.equals((Object)sequenceInputStream0));
      assertTrue(int1 == int0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      assertNotNull(zipArchiveInputStream0);
      assertFalse(sequenceInputStream0.equals((Object)sequenceInputStream1));
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      boolean boolean0 = zipArchiveInputStream0.canReadEntryData((ArchiveEntry) null);
      assertNotSame(sequenceInputStream0, sequenceInputStream1);
      assertFalse(boolean0);
      assertFalse(sequenceInputStream0.equals((Object)sequenceInputStream1));
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      zipArchiveInputStream0.close();
      assertNotSame(sequenceInputStream0, sequenceInputStream1);
      assertFalse(sequenceInputStream0.equals((Object)sequenceInputStream1));
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      int int2 = sequenceInputStream1.read();
      assertNotSame(sequenceInputStream1, sequenceInputStream0);
      assertEquals((-1), int2);
      assertFalse(sequenceInputStream1.equals((Object)sequenceInputStream0));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      long long0 = zipArchiveInputStream0.skip((byte)0);
      assertNotSame(sequenceInputStream0, sequenceInputStream1);
      assertEquals(0L, long0);
      assertFalse(sequenceInputStream0.equals((Object)sequenceInputStream1));
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      long long1 = sequenceInputStream0.skip((-3002L));
      assertNotSame(sequenceInputStream0, sequenceInputStream1);
      assertEquals(0L, long1);
      assertTrue(long1 == long0);
      assertFalse(sequenceInputStream0.equals((Object)sequenceInputStream1));
      
      ZipArchiveEntry zipArchiveEntry0 = zipArchiveInputStream0.getNextZipEntry();
      assertNotSame(sequenceInputStream0, sequenceInputStream1);
      assertNull(zipArchiveEntry0);
      assertFalse(sequenceInputStream0.equals((Object)sequenceInputStream1));
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      ZipArchiveEntry zipArchiveEntry1 = zipArchiveInputStream0.getNextZipEntry();
      assertNotSame(sequenceInputStream0, sequenceInputStream1);
      assertNull(zipArchiveEntry1);
      assertFalse(sequenceInputStream0.equals((Object)sequenceInputStream1));
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      zipArchiveInputStream0.close();
      assertNotSame(sequenceInputStream0, sequenceInputStream1);
      assertFalse(sequenceInputStream0.equals((Object)sequenceInputStream1));
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      zipArchiveInputStream0.close();
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      long long0 = zipArchiveInputStream0.getBytesRead();
      assertEquals(0L, long0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      zipArchiveInputStream0.close();
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.skip((-1274L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)25;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)25, 0);
      assertArrayEquals(new byte[] {(byte)25}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertEquals((-24), byteArrayInputStream0.available());
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, 4, 1);
      assertArrayEquals(new byte[] {(byte)25}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArrayInputStream1);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals((-3), byteArrayInputStream1.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)25);
      assertArrayEquals(new byte[] {(byte)25}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(bufferedInputStream0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertEquals((-24), byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)25}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(dataInputStream0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertEquals((-24), byteArrayInputStream0.available());
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, (String) null, true);
      assertArrayEquals(new byte[] {(byte)25}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(zipArchiveInputStream0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertEquals((-24), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, 4);
      assertArrayEquals(new byte[] {(byte)25}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte) (-12);
      byteArray0[6] = (byte)20;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 4, (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)12, (byte) (-48), (byte)0, (byte)101, (byte) (-12), (byte)20}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 4);
      assertArrayEquals(new byte[] {(byte)0, (byte)12, (byte) (-48), (byte)0, (byte)101, (byte) (-12), (byte)20}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(bufferedInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)12, (byte) (-48), (byte)0, (byte)101, (byte) (-12), (byte)20}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(dataInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0, (String) null, true);
      assertArrayEquals(new byte[] {(byte)0, (byte)12, (byte) (-48), (byte)0, (byte)101, (byte) (-12), (byte)20}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)12;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)20;
      byteArray1[3] = (byte) (-90);
      byteArray1[4] = (byte) (-48);
      byteArray1[5] = (byte) (-48);
      byteArray1[6] = (byte)20;
      byteArray1[7] = (byte) (-48);
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(dataInputStream0, (String) null);
      assertArrayEquals(new byte[] {(byte)0, (byte)12, (byte) (-48), (byte)0, (byte)101, (byte) (-12), (byte)20}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(zipArchiveInputStream1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(zipArchiveInputStream1.equals((Object)zipArchiveInputStream0));
      assertEquals(0, zipArchiveInputStream1.getCount());
      assertEquals(0L, zipArchiveInputStream1.getBytesRead());
      assertEquals(0, byteArrayInputStream0.available());
      
      int int0 = zipArchiveInputStream1.read(byteArray1, (-431), (int) (byte) (-90));
      assertArrayEquals(new byte[] {(byte)0, (byte)12, (byte) (-48), (byte)0, (byte)101, (byte) (-12), (byte)20}, byteArray0);
      assertArrayEquals(new byte[] {(byte)12, (byte)0, (byte)20, (byte) (-90), (byte) (-48), (byte) (-48), (byte)20, (byte) (-48)}, byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(zipArchiveInputStream1, zipArchiveInputStream0);
      assertNotSame(byteArray1, byteArray0);
      assertEquals((-1), int0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(zipArchiveInputStream1.equals((Object)zipArchiveInputStream0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, zipArchiveInputStream1.getCount());
      assertEquals(0L, zipArchiveInputStream1.getBytesRead());
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte) (-63);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-55), 2000);
      assertArrayEquals(new byte[] {(byte) (-48), (byte)20, (byte)20, (byte) (-63)}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertEquals(59, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 2000);
      assertArrayEquals(new byte[] {(byte) (-48), (byte)20, (byte)20, (byte) (-63)}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotNull(bufferedInputStream0);
      assertEquals(59, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-48), (byte)20, (byte)20, (byte) (-63)}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotNull(dataInputStream0);
      assertEquals(59, byteArrayInputStream0.available());
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(bufferedInputStream0, (String) null, true);
      assertArrayEquals(new byte[] {(byte) (-48), (byte)20, (byte)20, (byte) (-63)}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(59, byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(bufferedInputStream0, "ADDR", true);
      assertArrayEquals(new byte[] {(byte) (-48), (byte)20, (byte)20, (byte) (-63)}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotNull(zipArchiveInputStream1);
      assertFalse(zipArchiveInputStream1.equals((Object)zipArchiveInputStream0));
      assertEquals(59, byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream1.getBytesRead());
      assertEquals(0, zipArchiveInputStream1.getCount());
      
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.getNextEntry();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 178, (-2011));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertEquals((-2011), byteArrayInputStream0.available());
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(zipArchiveInputStream0);
      assertEquals((-2011), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      ArchiveEntry archiveEntry0 = zipArchiveInputStream0.getNextEntry();
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNull(archiveEntry0);
      assertEquals((-2011), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      int int0 = zipArchiveInputStream0.read();
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals((-1), int0);
      assertEquals((-2011), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      long long0 = zipArchiveInputStream0.skip(178);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0L, long0);
      assertEquals((-2011), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(zipArchiveInputStream1);
      assertFalse(zipArchiveInputStream1.equals((Object)zipArchiveInputStream0));
      assertEquals((-2011), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0, zipArchiveInputStream1.getCount());
      assertEquals(0L, zipArchiveInputStream1.getBytesRead());
      
      zipArchiveInputStream1.close();
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotSame(zipArchiveInputStream0, zipArchiveInputStream1);
      assertNotSame(zipArchiveInputStream1, zipArchiveInputStream0);
      assertFalse(zipArchiveInputStream0.equals((Object)zipArchiveInputStream1));
      assertFalse(zipArchiveInputStream1.equals((Object)zipArchiveInputStream0));
      assertEquals((-2011), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0, zipArchiveInputStream1.getCount());
      assertEquals(0L, zipArchiveInputStream1.getBytesRead());
      
      boolean boolean0 = zipArchiveInputStream1.canReadEntryData((ArchiveEntry) null);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotSame(zipArchiveInputStream0, zipArchiveInputStream1);
      assertNotSame(zipArchiveInputStream1, zipArchiveInputStream0);
      assertFalse(boolean0);
      assertFalse(zipArchiveInputStream0.equals((Object)zipArchiveInputStream1));
      assertFalse(zipArchiveInputStream1.equals((Object)zipArchiveInputStream0));
      assertEquals((-2011), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0, zipArchiveInputStream1.getCount());
      assertEquals(0L, zipArchiveInputStream1.getBytesRead());
      
      ArchiveEntry archiveEntry1 = zipArchiveInputStream0.getNextEntry();
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotSame(zipArchiveInputStream0, zipArchiveInputStream1);
      assertNull(archiveEntry1);
      assertFalse(zipArchiveInputStream0.equals((Object)zipArchiveInputStream1));
      assertEquals((-2011), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      try { 
        zipArchiveInputStream0.read(byteArray0, 469, 178);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The stream is closed
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte) (-12);
      byteArray0[6] = (byte)20;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 4, (byte) (-22));
      assertArrayEquals(new byte[] {(byte)0, (byte)20, (byte) (-48), (byte) (-22), (byte)101, (byte) (-12), (byte)20}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertEquals((-22), byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 4);
      assertArrayEquals(new byte[] {(byte)0, (byte)20, (byte) (-48), (byte) (-22), (byte)101, (byte) (-12), (byte)20}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(bufferedInputStream0);
      assertEquals((-22), byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)20, (byte) (-48), (byte) (-22), (byte)101, (byte) (-12), (byte)20}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(dataInputStream0);
      assertEquals((-22), byteArrayInputStream0.available());
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0, (String) null, true);
      assertArrayEquals(new byte[] {(byte)0, (byte)20, (byte) (-48), (byte) (-22), (byte)101, (byte) (-12), (byte)20}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(zipArchiveInputStream0);
      assertEquals((-22), byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)20;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)20;
      byteArray1[3] = (byte) (-90);
      byteArray1[4] = (byte) (-48);
      byteArray1[5] = (byte) (-48);
      long long0 = zipArchiveInputStream0.skip(0L);
      assertArrayEquals(new byte[] {(byte)0, (byte)20, (byte) (-48), (byte) (-22), (byte)101, (byte) (-12), (byte)20}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(0L, long0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals((-22), byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 178, (-2011));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertEquals((-2011), byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(dataInputStream0);
      assertEquals((-2011), byteArrayInputStream0.available());
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(zipArchiveInputStream0);
      assertEquals((-2011), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      ArchiveEntry archiveEntry0 = zipArchiveInputStream0.getNextEntry();
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNull(archiveEntry0);
      assertEquals((-2011), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      int int0 = zipArchiveInputStream0.read();
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals((-1), int0);
      assertEquals((-2011), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      long long0 = zipArchiveInputStream0.skip(178);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0L, long0);
      assertEquals((-2011), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(zipArchiveInputStream1);
      assertFalse(zipArchiveInputStream1.equals((Object)zipArchiveInputStream0));
      assertEquals((-2011), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream1.getBytesRead());
      assertEquals(0, zipArchiveInputStream1.getCount());
      
      zipArchiveInputStream1.close();
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotSame(zipArchiveInputStream0, zipArchiveInputStream1);
      assertNotSame(zipArchiveInputStream1, zipArchiveInputStream0);
      assertFalse(zipArchiveInputStream0.equals((Object)zipArchiveInputStream1));
      assertFalse(zipArchiveInputStream1.equals((Object)zipArchiveInputStream0));
      assertEquals((-2011), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream1.getBytesRead());
      assertEquals(0, zipArchiveInputStream1.getCount());
      
      boolean boolean0 = zipArchiveInputStream1.canReadEntryData((ArchiveEntry) null);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotSame(zipArchiveInputStream0, zipArchiveInputStream1);
      assertNotSame(zipArchiveInputStream1, zipArchiveInputStream0);
      assertFalse(boolean0);
      assertFalse(zipArchiveInputStream0.equals((Object)zipArchiveInputStream1));
      assertFalse(zipArchiveInputStream1.equals((Object)zipArchiveInputStream0));
      assertEquals((-2011), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream1.getBytesRead());
      assertEquals(0, zipArchiveInputStream1.getCount());
      
      ArchiveEntry archiveEntry1 = zipArchiveInputStream0.getNextEntry();
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotSame(zipArchiveInputStream0, zipArchiveInputStream1);
      assertNull(archiveEntry1);
      assertFalse(zipArchiveInputStream0.equals((Object)zipArchiveInputStream1));
      assertEquals((-2011), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte)0;
      int int0 = sequenceInputStream0.read(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-4), (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals((-1), int0);
      
      Enumeration<PushbackInputStream> enumeration1 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      assertNotNull(sequenceInputStream1);
      assertFalse(sequenceInputStream1.equals((Object)sequenceInputStream0));
      
      int int1 = sequenceInputStream1.read(byteArray0, 1033, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-4), (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotSame(sequenceInputStream1, sequenceInputStream0);
      assertEquals((-1), int1);
      assertFalse(sequenceInputStream1.equals((Object)sequenceInputStream0));
      assertTrue(int1 == int0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      assertNotNull(zipArchiveInputStream0);
      assertFalse(sequenceInputStream0.equals((Object)sequenceInputStream1));
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      boolean boolean0 = zipArchiveInputStream0.canReadEntryData((ArchiveEntry) null);
      assertNotSame(sequenceInputStream0, sequenceInputStream1);
      assertFalse(boolean0);
      assertFalse(sequenceInputStream0.equals((Object)sequenceInputStream1));
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      zipArchiveInputStream0.close();
      assertNotSame(sequenceInputStream0, sequenceInputStream1);
      assertFalse(sequenceInputStream0.equals((Object)sequenceInputStream1));
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      int int2 = sequenceInputStream1.read();
      assertNotSame(sequenceInputStream1, sequenceInputStream0);
      assertEquals((-1), int2);
      assertFalse(sequenceInputStream1.equals((Object)sequenceInputStream0));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      long long0 = zipArchiveInputStream0.skip((byte)0);
      assertNotSame(sequenceInputStream0, sequenceInputStream1);
      assertEquals(0L, long0);
      assertFalse(sequenceInputStream0.equals((Object)sequenceInputStream1));
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      long long1 = sequenceInputStream0.skip((-3002L));
      assertNotSame(sequenceInputStream0, sequenceInputStream1);
      assertEquals(0L, long1);
      assertTrue(long1 == long0);
      assertFalse(sequenceInputStream0.equals((Object)sequenceInputStream1));
      
      ZipArchiveEntry zipArchiveEntry0 = zipArchiveInputStream0.getNextZipEntry();
      assertNotSame(sequenceInputStream0, sequenceInputStream1);
      assertNull(zipArchiveEntry0);
      assertFalse(sequenceInputStream0.equals((Object)sequenceInputStream1));
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      ZipArchiveEntry zipArchiveEntry1 = zipArchiveInputStream0.getNextZipEntry();
      assertNotSame(sequenceInputStream0, sequenceInputStream1);
      assertNull(zipArchiveEntry1);
      assertFalse(sequenceInputStream0.equals((Object)sequenceInputStream1));
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      try { 
        zipArchiveInputStream0.read(byteArray0, 2134701007, 61440);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The stream is closed
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      sequenceInputStream0.mark(9559);
      boolean boolean0 = false;
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0, "EXPANDING_LEVEL_4", false, false);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      ZipArchiveEntry zipArchiveEntry0 = zipArchiveInputStream0.getNextZipEntry();
      assertNull(zipArchiveEntry0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      try { 
        sequenceInputStream0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)20;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)101;
      byteArray0[6] = (byte)20;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 4, (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)20, (byte)0, (byte)0, (byte)101, (byte)0, (byte)20}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 4);
      assertArrayEquals(new byte[] {(byte)0, (byte)20, (byte)0, (byte)0, (byte)101, (byte)0, (byte)20}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(bufferedInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)20, (byte)0, (byte)0, (byte)101, (byte)0, (byte)20}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(dataInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0, (String) null, true);
      assertArrayEquals(new byte[] {(byte)0, (byte)20, (byte)0, (byte)0, (byte)101, (byte)0, (byte)20}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(dataInputStream0, "yyF2", false);
      assertArrayEquals(new byte[] {(byte)0, (byte)20, (byte)0, (byte)0, (byte)101, (byte)0, (byte)20}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(zipArchiveInputStream1);
      assertFalse(zipArchiveInputStream1.equals((Object)zipArchiveInputStream0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream1.getBytesRead());
      assertEquals(0, zipArchiveInputStream1.getCount());
      
      ArchiveEntry archiveEntry0 = zipArchiveInputStream0.getNextEntry();
      assertArrayEquals(new byte[] {(byte)0, (byte)20, (byte)0, (byte)0, (byte)101, (byte)0, (byte)20}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotSame(zipArchiveInputStream0, zipArchiveInputStream1);
      assertNull(archiveEntry0);
      assertFalse(zipArchiveInputStream0.equals((Object)zipArchiveInputStream1));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      boolean boolean0 = zipArchiveInputStream1.canReadEntryData((ArchiveEntry) null);
      assertArrayEquals(new byte[] {(byte)0, (byte)20, (byte)0, (byte)0, (byte)101, (byte)0, (byte)20}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotSame(zipArchiveInputStream1, zipArchiveInputStream0);
      assertFalse(boolean0);
      assertFalse(zipArchiveInputStream1.equals((Object)zipArchiveInputStream0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream1.getBytesRead());
      assertEquals(0, zipArchiveInputStream1.getCount());
      
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.skip((-1940L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, (-156));
      assertArrayEquals(new byte[] {(byte)31, (byte) (-109), (byte)70, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(boolean0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3045, 0);
      assertArrayEquals(new byte[] {(byte)31, (byte) (-109), (byte)70, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertEquals((-3040), byteArrayInputStream0.available());
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, "PPMD", false, true);
      assertArrayEquals(new byte[] {(byte)31, (byte) (-109), (byte)70, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(zipArchiveInputStream0);
      assertEquals((-3040), byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      zipArchiveInputStream0.close();
      assertArrayEquals(new byte[] {(byte)31, (byte) (-109), (byte)70, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals((-3040), byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 9, (byte)25);
      assertEquals(11, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertEquals(2, byteArrayInputStream0.available());
      
      MockFile mockFile0 = new MockFile("*={fPQ=zJS}", "*={fPQ=zJS}");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile("*={fPQ=zJS}");
      assertNotNull(mockFile1);
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      assertEquals(11, byteArray0.length);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("Lb`S)'{K?");
      assertNotNull(zipArchiveEntry0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals("Lb`S)'{K?", zipArchiveEntry0.toString());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals("Lb`S)'{K?", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertNull(zipArchiveEntry0.getComment());
      
      long long0 = zipArchiveInputStream0.skip(9);
      assertEquals(11, byteArray0.length);
      assertEquals(0L, long0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      ArchiveEntry archiveEntry0 = zipArchiveInputStream0.getNextEntry();
      assertEquals(11, byteArray0.length);
      assertNull(archiveEntry0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2, zipArchiveInputStream0.getCount());
      assertEquals(2L, zipArchiveInputStream0.getBytesRead());
      
      int int0 = zipArchiveInputStream0.read(byteArray0, (-1), (int) (byte)25);
      assertEquals(11, byteArray0.length);
      assertEquals((-1), int0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2, zipArchiveInputStream0.getCount());
      assertEquals(2L, zipArchiveInputStream0.getBytesRead());
      
      boolean boolean0 = zipArchiveInputStream0.canReadEntryData(zipArchiveEntry0);
      assertEquals(11, byteArray0.length);
      assertFalse(boolean0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2, zipArchiveInputStream0.getCount());
      assertEquals(2L, zipArchiveInputStream0.getBytesRead());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals("Lb`S)'{K?", zipArchiveEntry0.toString());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals("Lb`S)'{K?", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertNull(zipArchiveEntry0.getComment());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte)0;
      int int0 = sequenceInputStream0.read(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-81), (byte) (-4), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals((-1), int0);
      
      byte byte0 = (byte)23;
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte)0;
      int int1 = sequenceInputStream0.read(byteArray0, (int) (byte)0, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte) (-81), (byte) (-4), (byte)0, (byte)23, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      boolean boolean0 = zipArchiveInputStream0.canReadEntryData((ArchiveEntry) null);
      assertFalse(boolean0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      zipArchiveInputStream0.close();
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      int int2 = sequenceInputStream0.read();
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.skip((byte) (-4));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, (String) null, true);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      try { 
        zipArchiveInputStream0.getNextEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = null;
      boolean boolean0 = ZipArchiveInputStream.matches((byte[]) null, (-3153));
      assertFalse(boolean0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      String string0 = "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry";
      int int0 = (-1367);
      // Undeclared exception!
      try { 
        pipedInputStream0.read((byte[]) null, 2, (-1367));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)25;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)25, 0);
      assertArrayEquals(new byte[] {(byte)25}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertEquals((-24), byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)25}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(dataInputStream0);
      assertEquals((-24), byteArrayInputStream0.available());
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)25}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(zipArchiveInputStream0);
      assertEquals((-24), byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      int int0 = zipArchiveInputStream0.read();
      assertArrayEquals(new byte[] {(byte)25}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals((-1), int0);
      assertEquals((-24), byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      int int1 = zipArchiveInputStream0.read(byteArray0, 0, 0);
      assertArrayEquals(new byte[] {(byte)25}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals((-24), byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      int int2 = zipArchiveInputStream0.read(byteArray0, (-1367), 0);
      assertArrayEquals(new byte[] {(byte)25}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-24), byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-127);
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte1 = (byte) (-113);
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte) (-16);
      byte byte2 = (byte)4;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)118;
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, 26);
      assertArrayEquals(new byte[] {(byte) (-127), (byte)0, (byte) (-113), (byte)18, (byte) (-16), (byte)4, (byte)118}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertFalse(boolean0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-16), (-731));
      assertArrayEquals(new byte[] {(byte) (-127), (byte)0, (byte) (-113), (byte)18, (byte) (-16), (byte)4, (byte)118}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertEquals((-731), byteArrayInputStream0.available());
      
      boolean boolean1 = byteArrayInputStream0.markSupported();
      assertArrayEquals(new byte[] {(byte) (-127), (byte)0, (byte) (-113), (byte)18, (byte) (-16), (byte)4, (byte)118}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals((-731), byteArrayInputStream0.available());
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-127), (byte)0, (byte) (-113), (byte)18, (byte) (-16), (byte)4, (byte)118}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(zipArchiveInputStream0);
      assertEquals((-731), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      int int0 = byteArrayInputStream0.read();
      assertArrayEquals(new byte[] {(byte) (-127), (byte)0, (byte) (-113), (byte)18, (byte) (-16), (byte)4, (byte)118}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals((-1), int0);
      assertEquals((-731), byteArrayInputStream0.available());
      
      int int1 = zipArchiveInputStream0.available();
      assertArrayEquals(new byte[] {(byte) (-127), (byte)0, (byte) (-113), (byte)18, (byte) (-16), (byte)4, (byte)118}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals((-731), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      zipArchiveInputStream0.mark((byte) (-127));
      assertArrayEquals(new byte[] {(byte) (-127), (byte)0, (byte) (-113), (byte)18, (byte) (-16), (byte)4, (byte)118}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals((-731), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      ArchiveEntry archiveEntry0 = zipArchiveInputStream0.getNextEntry();
      assertArrayEquals(new byte[] {(byte) (-127), (byte)0, (byte) (-113), (byte)18, (byte) (-16), (byte)4, (byte)118}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNull(archiveEntry0);
      assertEquals((-731), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      ZipArchiveInputStream zipArchiveInputStream1 = null;
      try {
        zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0, "=]._Jh@vDA'psXN)", true, true);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // =]._Jh@vDA'psXN)
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(mockFileInputStream0, (String) null, true);
      assertNotNull(zipArchiveInputStream0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      long long0 = zipArchiveInputStream0.skip(857L);
      assertEquals(0L, long0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      assertNotNull(zipArchiveInputStream0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      boolean boolean0 = true;
      ZipArchiveInputStream zipArchiveInputStream1 = null;
      try {
        zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0, "", true);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0);
      assertNotNull(bufferedInputStream0);
      assertFalse(fileDescriptor0.valid());
      
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(bufferedInputStream0, "The stream is closed");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // The stream is closed
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-51);
      byteArray0[0] = (byte) (-51);
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte2 = (byte) (-83);
      byteArray0[2] = (byte) (-83);
      byte byte3 = (byte)0;
      byteArray0[3] = (byte)0;
      byte byte4 = (byte) (-79);
      byteArray0[4] = (byte) (-79);
      byte byte5 = (byte) (-72);
      byteArray0[5] = (byte) (-72);
      byte byte6 = (byte)0;
      byteArray0[6] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-51), (byte)0, (byte) (-83), (byte)0, (byte) (-79), (byte) (-72), (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertEquals(7, byteArrayInputStream0.available());
      
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, "~c7r(0.", false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ~c7r(0.
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }
}
