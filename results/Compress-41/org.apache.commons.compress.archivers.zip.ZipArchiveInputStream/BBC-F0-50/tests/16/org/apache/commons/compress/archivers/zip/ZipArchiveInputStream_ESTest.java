/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 02:23:03 GMT 2021
 */

package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Enumeration;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;
import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.zip.GeneralPurposeBit;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ZipArchiveInputStream_ESTest extends ZipArchiveInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ZipArchiveInputStream.matches(byteArray0, (byte)80);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0, (String) null, false, false);
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.getNextEntry();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)80;
      ZipArchiveInputStream.matches(byteArray0, (byte)80);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1), (byte)80);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.getNextEntry();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2130574326), (byte)80);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      zipArchiveInputStream0.skip(10000L);
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.getNextZipEntry();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte) (-95);
      ZipArchiveInputStream.matches(byteArray0, 9575);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)83;
      ZipArchiveInputStream.matches(byteArray0, (-1));
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setGeneralPurposeBit((GeneralPurposeBit) null);
      zipArchiveInputStream0.canReadEntryData(zipArchiveEntry0);
      zipArchiveInputStream0.getNextEntry();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      pushbackInputStream0.markSupported();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-29);
      ZipArchiveInputStream.matches(byteArray0, 57);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pushbackInputStream0, "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte byte0 = (byte)97;
      int int0 = 1619;
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        ZipArchiveInputStream.matches((byte[]) null, (byte)97);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
      zipArchiveInputStream0.skip(0L);
      zipArchiveInputStream0.close();
      zipArchiveInputStream0.getNextEntry();
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.skip((-751L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
      zipArchiveInputStream0.read();
      zipArchiveInputStream0.skip(1024L);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pushbackInputStream0);
      zipArchiveInputStream0.skip(1135L);
      zipArchiveInputStream0.close();
      zipArchiveInputStream0.getNextEntry();
      try { 
        zipArchiveInputStream0.skip(32768L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The stream is closed
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)97;
      byteArray0[0] = (byte)97;
      InputStream inputStream0 = null;
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, "UTF8", true);
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(zipArchiveInputStream1, zipArchiveInputStream0);
      ZipArchiveInputStream zipArchiveInputStream2 = new ZipArchiveInputStream(sequenceInputStream0);
      zipArchiveInputStream1.getNextZipEntry();
      try { 
        zipArchiveInputStream0.getNextEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pushbackInputStream0);
      byte[] byteArray0 = new byte[1];
      zipArchiveInputStream0.skip(1135L);
      pushbackInputStream0.markSupported();
      zipArchiveInputStream0.close();
      zipArchiveInputStream0.getNextEntry();
      ZipArchiveInputStream.matches(byteArray0, 228);
      zipArchiveInputStream0.getNextZipEntry();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(zipArchiveInputStream0);
      byte[] byteArray0 = new byte[3];
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(sequenceInputStream0);
      zipArchiveInputStream0.getNextZipEntry();
      zipArchiveInputStream0.getNextEntry();
      zipArchiveInputStream1.close();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.mark(0);
      byteArrayInputStream0.close();
      zipArchiveInputStream0.markSupported();
      byteArrayInputStream0.markSupported();
      ZipArchiveInputStream zipArchiveInputStream2 = new ZipArchiveInputStream(zipArchiveInputStream0, (String) null, true, true);
      zipArchiveInputStream2.markSupported();
      ZipArchiveInputStream.matches(byteArray0, (-965));
      ZipArchiveInputStream zipArchiveInputStream3 = new ZipArchiveInputStream(pushbackInputStream0);
      zipArchiveInputStream3.getNextZipEntry();
      ZipArchiveInputStream.matches(byteArray0, (-1));
      zipArchiveInputStream0.getNextEntry();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(zipArchiveInputStream0);
      byte[] byteArray0 = new byte[3];
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(sequenceInputStream0);
      zipArchiveInputStream0.getNextZipEntry();
      zipArchiveInputStream0.getNextEntry();
      // Undeclared exception!
      try { 
        zipArchiveInputStream1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pushbackInputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      zipArchiveInputStream0.close();
      zipArchiveInputStream0.close();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveInputStream0.canReadEntryData(zipArchiveEntry0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream((PipedOutputStream) null, 65281);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-4);
      byte byte0 = (byte) (-45);
      byteArray0[2] = (byte) (-45);
      byteArray0[3] = (byte) (-43);
      byteArray0[4] = (byte) (-7);
      ZipArchiveInputStream.matches(byteArray0, 4);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 216, (byte) (-4));
      byteArrayInputStream0.read(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0);
      ZipArchiveInputStream zipArchiveInputStream1 = null;
      try {
        zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0, "~tjt+ELW<L_m$k*]5");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ~tjt+ELW<L_m$k*]5
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pushbackInputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[7] = (byte)0;
      zipArchiveInputStream0.read(byteArray0, 118, 49);
      zipArchiveInputStream0.skip(118);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(bufferedInputStream0);
      zipArchiveInputStream0.close();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte) (-62);
      byteArray0[4] = (byte) (-62);
      byteArray0[5] = (byte) (-62);
      byteArray0[6] = (byte) (-62);
      byteArray0[7] = (byte) (-62);
      byteArray0[8] = (byte) (-62);
      try { 
        zipArchiveInputStream0.read(byteArray0, (int) (byte) (-62), (int) (byte) (-62));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The stream is closed
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pushbackInputStream0);
      byte[] byteArray0 = new byte[1];
      zipArchiveInputStream0.skip(1135L);
      zipArchiveInputStream0.close();
      zipArchiveInputStream0.getNextEntry();
      ZipArchiveInputStream.matches(byteArray0, 228);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      File file0 = MockFile.createTempFile("The dictionary size must be 4096 or 8192", "org.apache.commons.compress.archivers.zip.ZipShort");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-4);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(mockFileInputStream0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-4);
      byteArray1[1] = (byte) (-4);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, 16, 1689);
      byteArrayInputStream0.markSupported();
      zipArchiveInputStream0.markSupported();
      zipArchiveInputStream0.mark(26);
      ZipArchiveInputStream.matches(byteArray1, 1198);
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0);
      zipArchiveInputStream1.getNextZipEntry();
      ZipArchiveInputStream.matches(byteArray1, (-1));
      zipArchiveInputStream0.getNextEntry();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(zipArchiveInputStream0);
      byte[] byteArray0 = new byte[3];
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(sequenceInputStream0);
      zipArchiveInputStream0.getNextZipEntry();
      zipArchiveInputStream0.getNextEntry();
      zipArchiveInputStream1.close();
      zipArchiveInputStream0.close();
      zipArchiveInputStream0.canReadEntryData((ArchiveEntry) null);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((PipedOutputStream) null, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[39];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      zipArchiveInputStream0.getNextZipEntry();
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      zipArchiveInputStream0.available();
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.skip((-4191L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      File file0 = MockFile.createTempFile("The dictionary size must be 4096 or 8192", "org.apache.commons.compress.archivers.zip.ZipShort");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-4);
      mockFileInputStream0.markSupported();
      byteArray0[2] = (byte) (-128);
      mockFileInputStream0.markSupported();
      byteArray0[3] = (byte)3;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[4] = (byte)0;
      mockFileInputStream0.markSupported();
      byteArray0[5] = (byte)0;
      mockFileInputStream0.read(byteArray0, (int) (byte)0, (int) (byte) (-128));
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(mockFileInputStream0);
      mockFileInputStream0.markSupported();
      zipArchiveInputStream0.read(byteArray0, (-1711), (int) (byte)0);
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("lQ\"&Af$x");
      cpioArchiveEntry0.getChksum();
      zipArchiveInputStream0.canReadEntryData(cpioArchiveEntry0);
      zipArchiveInputStream0.canReadEntryData(cpioArchiveEntry0);
      ZipArchiveInputStream.matches(byteArray0, (-314));
      ZipArchiveInputStream.matches(byteArray0, 1374);
      try { 
        zipArchiveInputStream0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      File file0 = MockFile.createTempFile("The dictionary size must be 4096 or 8192", "org.apache.commons.compress.archivers.zip.ZipShort");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-4);
      mockFileInputStream0.markSupported();
      byteArray0[2] = (byte) (-128);
      mockFileInputStream0.markSupported();
      byteArray0[3] = (byte)3;
      mockFileInputStream0.markSupported();
      byteArray0[4] = (byte)0;
      mockFileInputStream0.markSupported();
      byteArray0[5] = (byte)0;
      mockFileInputStream0.read(byteArray0, (int) (byte)0, (int) (byte) (-128));
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(mockFileInputStream0);
      mockFileInputStream0.markSupported();
      zipArchiveInputStream0.read(byteArray0, (-1711), (int) (byte)0);
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("lQ\"&Af$x");
      cpioArchiveEntry0.getChksum();
      zipArchiveInputStream0.canReadEntryData(cpioArchiveEntry0);
      zipArchiveInputStream0.canReadEntryData(cpioArchiveEntry0);
      ZipArchiveInputStream.matches(byteArray0, (-314));
      ZipArchiveInputStream.matches(byteArray0, 1374);
      zipArchiveInputStream0.close();
      try { 
        mockFileInputStream0.read(byteArray0, 1673, 1374);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-63);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)118;
      byteArray0[8] = (byte)0;
      ZipArchiveInputStream.matches(byteArray0, (byte)0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, "U[8m'[#=z3L'nP");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // U[8m'[#=z3L'nP
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      byte byte0 = (byte)10;
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("$o", (byte)10, false);
      zipArchiveInputStream0.canReadEntryData(tarArchiveEntry0);
      try { 
        zipArchiveInputStream0.getNextZipEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)97;
      ZipArchiveInputStream.matches(byteArray0, 1619);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        pipedInputStream0.read(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(bufferedInputStream0);
      zipArchiveInputStream0.close();
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.skip((-751L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      String string0 = "";
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0, "", true);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(mockFileInputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-62);
      zipArchiveInputStream0.read(byteArray0, 4161, (int) (byte)8);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, ", dateTimeAccessed=", false, false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // , dateTimeAccessed=
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = 369;
      // Undeclared exception!
      try { 
        ZipArchiveInputStream.matches(byteArray0, 369);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, "O-+}+h8m`p=OYYA4/S");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // O-+}+h8m`p=OYYA4/S
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 12;
      PipedInputStream pipedInputStream0 = new PipedInputStream(12);
      pipedInputStream0.close();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, (String) null, false);
      try { 
        zipArchiveInputStream0.getNextZipEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }
}
