/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 22:34:01 GMT 2021
 */

package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.file.attribute.FileTime;
import java.util.Enumeration;
import java.util.concurrent.TimeUnit;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.zip.GeneralPurposeBit;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ZipArchiveInputStream_ESTest extends ZipArchiveInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)80;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2513), (byte)80);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, "LINK", true, true);
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.getNextEntry();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0);
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.getNextZipEntry();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[31];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      zipArchiveInputStream0.getNextZipEntry();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setGeneralPurposeBit((GeneralPurposeBit) null);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, "5", true);
      zipArchiveInputStream0.read();
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.canReadEntryData(zipArchiveEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2146784823), (byte)126);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.getNextZipEntry();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      zipArchiveInputStream0.close();
      try { 
        zipArchiveInputStream0.read((byte[]) null, 2135, 2135);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The stream is closed
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte) (-34);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)25;
      ZipArchiveInputStream.matches(byteArray0, 65280);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      System.setCurrentTimeMillis((-82L));
      System.setCurrentTimeMillis((-82L));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)76;
      ZipArchiveInputStream.matches(byteArray0, (byte)76);
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream", true);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InputStream inputStream0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      zipArchiveInputStream0.close();
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0);
      byte[] byteArray0 = new byte[0];
      int int0 = 8;
      // Undeclared exception!
      try { 
        ZipArchiveInputStream.matches(byteArray0, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      zipArchiveInputStream0.skip(1024L);
      byte[] byteArray0 = new byte[6];
      zipArchiveInputStream0.close();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte) (-116);
      byte byte0 = (byte)37;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte)4;
      byte byte1 = (byte)4;
      try { 
        zipArchiveInputStream0.read(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The stream is closed
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(zipArchiveInputStream0, 1410);
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(bufferedInputStream0, (String) null, true, false);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[0];
      sequenceInputStream0.read(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0, (String) null, false);
      sequenceInputStream0.read(byteArray0, 1024, 1024);
      zipArchiveInputStream0.read(byteArray0, 15, 0);
      zipArchiveInputStream0.skip(4370L);
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, "encryption");
      try { 
        zipArchiveInputStream0.getNextEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0, "org.apache.commons.compress.archivers.zip.PKWareExtraHeader$EncryptionAlgorithm");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // org.apache.commons.compress.archivers.zip.PKWareExtraHeader$EncryptionAlgorithm
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream");
      byte[] byteArray0 = new byte[5];
      zipArchiveInputStream0.markSupported();
      byteArray0[0] = (byte) (-60);
      byte byte0 = (byte) (-121);
      try { 
        zipArchiveInputStream0.getNextZipEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-47);
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)4;
      ZipArchiveInputStream.matches(byteArray0, (byte)4);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, "Y<$Kp", false, true);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Y<$Kp
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = null;
      int int0 = 695;
      // Undeclared exception!
      try { 
        ZipArchiveInputStream.matches((byte[]) null, 695);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-37);
      ZipArchiveInputStream.matches(byteArray0, 1024);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 9555);
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(pushbackInputStream0, ".FN", false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // .FN
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)98;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)42;
      ZipArchiveInputStream.matches(byteArray0, (-357));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)0;
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      zipArchiveInputStream0.skip((byte)0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 30);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
      ZipArchiveInputStream zipArchiveInputStream1 = null;
      try {
        zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0, "", false, true);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      zipArchiveInputStream0.close();
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4, "nC)s&~TZ04jI", (short)4);
      zipArchiveInputStream0.canReadEntryData(cpioArchiveEntry0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      zipArchiveInputStream0.skip(1024L);
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte)4;
      byteArray0[1] = (byte)4;
      zipArchiveInputStream0.read(byteArray0, (int) (byte)4, (-543));
      ZipArchiveInputStream.matches(byteArray0, (byte)37);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      zipArchiveInputStream0.close();
      zipArchiveInputStream0.getNextEntry();
      zipArchiveInputStream0.getNextEntry();
      zipArchiveInputStream0.canReadEntryData((ArchiveEntry) null);
      zipArchiveInputStream0.getNextZipEntry();
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("org.apache.commons.compress.archivers.zip.ZipEightByteInteger", (byte)18);
      zipArchiveInputStream0.canReadEntryData(tarArchiveEntry0);
      try { 
        zipArchiveInputStream0.skip((byte)18);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The stream is closed
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      zipArchiveInputStream0.close();
      zipArchiveInputStream0.markSupported();
      zipArchiveInputStream0.close();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0, "5", false);
      zipArchiveInputStream1.read();
      zipArchiveInputStream1.canReadEntryData(zipArchiveEntry0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[0];
      sequenceInputStream0.read(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0, (String) null, false);
      sequenceInputStream0.read(byteArray0, 1024, 1024);
      zipArchiveInputStream0.read(byteArray0, 15, 0);
      zipArchiveInputStream0.skip(4370L);
      zipArchiveInputStream0.close();
      zipArchiveInputStream0.close();
      zipArchiveInputStream0.getNextZipEntry();
      zipArchiveInputStream0.close();
      zipArchiveInputStream0.getNextEntry();
      zipArchiveInputStream0.getNextEntry();
      zipArchiveInputStream0.canReadEntryData((ArchiveEntry) null);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-19);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      zipArchiveInputStream0.read(byteArray0);
      zipArchiveInputStream0.getNextZipEntry();
      zipArchiveInputStream0.getNextEntry();
      zipArchiveInputStream0.getNextEntry();
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.skip((byte) (-82));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      boolean boolean0 = pipedInputStream0.markSupported();
      assertFalse(boolean0);
      assertEquals(0, pipedInputStream0.available());
      
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, "%[M", true, true);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // %[M
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }
}
