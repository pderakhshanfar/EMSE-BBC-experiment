/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 12 12:16:57 GMT 2021
 */

package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Enumeration;
import java.util.jar.JarEntry;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.zip.AsiExtraField;
import org.apache.commons.compress.archivers.zip.GeneralPurposeBit;
import org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ZipArchiveInputStream_ESTest extends ZipArchiveInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      GeneralPurposeBit generalPurposeBit0 = zipArchiveEntry0.getGeneralPurposeBit();
      generalPurposeBit0.useDataDescriptor(true);
      zipArchiveEntry0.setGeneralPurposeBit(generalPurposeBit0);
      zipArchiveEntry0.setMethod(0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      zipArchiveInputStream0.canReadEntryData(zipArchiveEntry0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setMethod(0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")Y%)_QNA");
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0);
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.getNextEntry();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, (InputStream) null);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream1);
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.getNextZipEntry();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "#,?b-FU=RL2Z$X'.U]");
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)80;
      byteArray0[0] = (byte)80;
      int int0 = 1678;
      // Undeclared exception!
      try { 
        ZipArchiveInputStream.matches(byteArray0, 1678);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      zipArchiveInputStream0.getNextZipEntry();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setMethod(0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      zipArchiveInputStream0.canReadEntryData(zipArchiveEntry0);
      try { 
        zipArchiveInputStream0.getNextEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream((InputStream) null);
      zipArchiveInputStream1.skip(1024L);
      AsiExtraField asiExtraField0 = new AsiExtraField();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)3;
      ZipArchiveInputStream.matches(byteArray0, 604);
      ZipArchiveInputStream.matches(byteArray0, (byte)3);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)21;
      byteArray1[1] = (byte) (-18);
      byteArray1[2] = (byte)3;
      byteArray1[3] = (byte) (-18);
      byteArray1[4] = (byte) (-18);
      byteArray1[5] = (byte) (-18);
      byteArray1[6] = (byte) (-18);
      byteArray1[7] = (byte)3;
      zipArchiveInputStream0.read(byteArray1, (int) (byte)3, (-1510));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        ZipArchiveInputStream.matches(byteArray0, 1433);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)116;
      byteArray0[0] = (byte)116;
      byte byte1 = (byte) (-72);
      byteArray0[1] = (byte) (-72);
      byte byte2 = (byte)12;
      byteArray0[2] = (byte)12;
      ZipArchiveInputStream.matches(byteArray0, 0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)116;
      int int0 = 237;
      ZipArchiveInputStream.matches(byteArray1, 237);
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pushbackInputStream0);
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      byteArrayInputStream0.mark((byte) (-24));
      zipArchiveInputStream0.getBytesRead();
      zipArchiveInputStream0.getNextEntry();
      byteArrayInputStream0.mark((byte) (-24));
      zipArchiveInputStream0.canReadEntryData((ArchiveEntry) null);
      zipArchiveInputStream0.close();
      ZipArchiveInputStream.matches(byteArray0, 4);
      ZipArchiveInputStream.matches(byteArray0, 2531);
      try { 
        zipArchiveInputStream0.skip(2531);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The stream is closed
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      byte byte0 = (byte) (-17);
      ZipArchiveInputStream.matches((byte[]) null, (byte) (-4));
      // Undeclared exception!
      try { 
        ZipArchiveInputStream.matches((byte[]) null, 112);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      byteArrayInputStream0.mark((byte)14);
      byteArrayInputStream0.close();
      zipArchiveInputStream0.getBytesRead();
      zipArchiveInputStream0.close();
      zipArchiveInputStream0.skip(0L);
      zipArchiveInputStream0.getNextEntry();
      byteArrayInputStream0.mark((byte)14);
      AsiExtraField asiExtraField0 = new AsiExtraField();
      zipArchiveInputStream0.canReadEntryData((ArchiveEntry) null);
      zipArchiveInputStream0.skip(0L);
      ZipArchiveInputStream.matches(byteArray0, 3536);
      try { 
        zipArchiveInputStream0.skip(2339);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The stream is closed
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)26;
      byteArray0[7] = (byte)8;
      byteArray0[8] = (byte)45;
      int int0 = 477;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-810), 477);
      byteArrayInputStream0.reset();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      byteArrayInputStream0.mark(477);
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.getNextEntry();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte)28;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)28, (byte)28);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      zipArchiveInputStream0.read();
      byteArrayInputStream0.markSupported();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, (byte)28, (byte)28);
      byteArrayInputStream1.reset();
      byteArrayInputStream1.read();
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(byteArrayInputStream1);
      byteArrayInputStream0.mark(45);
      zipArchiveInputStream0.skip(4294967296L);
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0, 61440, (-1));
      byteArrayInputStream2.mark(118);
      byteArrayInputStream0.reset();
      ZipArchiveInputStream.matches(byteArray0, 2835);
      JarArchiveEntry jarArchiveEntry0 = null;
      try {
        jarArchiveEntry0 = new JarArchiveEntry((JarEntry) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // entry
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ZipArchiveInputStream.matches(byteArray0, (-1162));
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0);
      int int0 = 676;
      try { 
        zipArchiveInputStream0.getNextZipEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte)117;
      byte byte0 = (byte)45;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)26;
      byte byte1 = (byte)8;
      byteArray0[7] = (byte)8;
      byteArray0[8] = (byte)45;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-810), 477);
      byteArrayInputStream0.reset();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      byteArrayInputStream0.mark(477);
      zipArchiveInputStream0.skip(477);
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.getNextZipEntry();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      zipArchiveInputStream0.mark(382);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-122);
      byteArray0[5] = (byte) (-115);
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte)117;
      byteArray0[8] = (byte) (-36);
      sequenceInputStream0.read(byteArray0, (int) (byte) (-116), (int) (byte) (-36));
      zipArchiveInputStream0.markSupported();
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.skip((-1576L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)26;
      byteArray0[7] = (byte)8;
      byteArray0[8] = (byte)45;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-810), 477);
      byteArrayInputStream0.reset();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      byteArrayInputStream0.mark(477);
      zipArchiveInputStream0.skip(477);
      byteArrayInputStream0.mark((byte)45);
      byteArrayInputStream0.reset();
      ZipArchiveInputStream.matches(byteArray0, 15);
      JarArchiveEntry jarArchiveEntry0 = null;
      try {
        jarArchiveEntry0 = new JarArchiveEntry((JarEntry) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // entry
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)116, (byte)116);
      byteArrayInputStream0.reset();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      byteArrayInputStream0.mark((-2969));
      zipArchiveInputStream0.skip((byte)0);
      byteArrayInputStream0.mark(2339);
      AsiExtraField asiExtraField0 = new AsiExtraField();
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("}(}~zjw,:fMB");
      jarArchiveEntry0.addExtraField(asiExtraField0);
      zipArchiveInputStream0.canReadEntryData((ArchiveEntry) null);
      zipArchiveInputStream0.getBytesRead();
      ZipArchiveInputStream.matches(byteArray0, (byte)45);
      ZipArchiveInputStream.matches(byteArray0, 86);
      zipArchiveInputStream0.close();
      try { 
        zipArchiveInputStream0.read(byteArray0, (int) (byte)45, (-2698));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The stream is closed
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte)28;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)28, (byte)28);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      zipArchiveInputStream0.read();
      byteArrayInputStream0.markSupported();
      byteArrayInputStream0.read();
      byteArrayInputStream0.close();
      zipArchiveInputStream0.read(byteArray0, (int) (byte)28, 61440);
      byte[] byteArray1 = new byte[0];
      zipArchiveInputStream0.read(byteArray1, 1, 1755);
      byteArrayInputStream0.reset();
      zipArchiveInputStream0.canReadEntryData((ArchiveEntry) null);
      zipArchiveInputStream0.close();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ZipArchiveInputStream.matches(byteArray0, (-1162));
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0);
      try { 
        zipArchiveInputStream0.getNextEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte)28;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)28, (byte)28);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      zipArchiveInputStream0.read(byteArray0, (int) (byte)28, (-1219));
      byteArrayInputStream0.markSupported();
      zipArchiveInputStream0.getNextZipEntry();
      zipArchiveInputStream0.getNextZipEntry();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)30;
      sequenceInputStream0.read(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0, "qYCBO", true);
      sequenceInputStream0.read((byte[]) null, 673, 673);
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0, "qYCBO");
      zipArchiveInputStream1.canReadEntryData((ArchiveEntry) null);
      zipArchiveInputStream1.getNextEntry();
      zipArchiveInputStream1.getNextZipEntry();
      zipArchiveInputStream0.close();
      try { 
        zipArchiveInputStream0.read((byte[]) null, 225, 673);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The stream is closed
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)26;
      byteArray0[7] = (byte)8;
      byteArray0[8] = (byte)45;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-810), 477);
      byteArrayInputStream0.reset();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      byteArrayInputStream0.mark(477);
      zipArchiveInputStream0.skip(477);
      byteArrayInputStream0.mark((byte)45);
      AsiExtraField asiExtraField0 = new AsiExtraField();
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("}(}~zjw,:fMB");
      jarArchiveEntry0.addExtraField(asiExtraField0);
      zipArchiveInputStream0.canReadEntryData(jarArchiveEntry0);
      zipArchiveInputStream0.skip(192L);
      ZipArchiveInputStream.matches(byteArray0, (byte)0);
      ZipArchiveInputStream.matches(byteArray0, (byte)0);
      zipArchiveInputStream0.skip(0);
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.getNextZipEntry();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte)28;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)28, (byte)28);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      zipArchiveInputStream0.read();
      byteArrayInputStream0.markSupported();
      byteArrayInputStream0.read();
      byteArrayInputStream0.close();
      zipArchiveInputStream0.read(byteArray0, (int) (byte)28, 61440);
      byte[] byteArray1 = new byte[0];
      zipArchiveInputStream0.read(byteArray1, 1, 1755);
      byteArrayInputStream0.close();
      byteArrayInputStream0.reset();
      zipArchiveInputStream0.canReadEntryData((ArchiveEntry) null);
      zipArchiveInputStream0.close();
      zipArchiveInputStream0.getNextZipEntry();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      zipArchiveInputStream0.markSupported();
      zipArchiveInputStream0.read(byteArray0);
      try { 
        zipArchiveInputStream0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "QJb=B");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.mark((-1414));
      zipArchiveInputStream0.close();
      AsiExtraField asiExtraField0 = new AsiExtraField();
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("org.apache.commons.compress.archivers.zip.X7875_NewUnix");
      jarArchiveEntry0.addExtraField(asiExtraField0);
      zipArchiveInputStream0.canReadEntryData(jarArchiveEntry0);
      zipArchiveInputStream0.close();
      ZipArchiveInputStream.matches(byteArray0, 2145382391);
      ZipArchiveInputStream.matches(byteArray0, 2531);
      try { 
        zipArchiveInputStream0.skip(976L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The stream is closed
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte)106;
      ZipArchiveInputStream.matches(byteArray0, 0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 0);
      BufferedInputStream bufferedInputStream0 = null;
      try {
        bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte) (-13));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, "t", true, true);
      zipArchiveInputStream0.close();
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.skip((-2445L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)116;
      byte byte0 = (byte) (-72);
      byteArray0[1] = (byte) (-72);
      byte byte1 = (byte)12;
      byteArray0[2] = (byte)12;
      ZipArchiveInputStream.matches(byteArray0, 0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)116;
      int int0 = 237;
      ZipArchiveInputStream.matches(byteArray1, 237);
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pushbackInputStream0);
      zipArchiveInputStream0.close();
      try { 
        pushbackInputStream0.read((byte[]) null, 2406, (int) (byte)116);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte) (-120);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)96;
      byteArray0[7] = (byte) (-44);
      byteArray0[8] = (byte) (-16);
      ZipArchiveInputStream.matches(byteArray0, 42);
      String string0 = null;
      // Undeclared exception!
      try { 
        MockFile.createTempFile((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(mockFileInputStream0, (String) null);
      ZipArchiveEntry zipArchiveEntry0 = null;
      try {
        zipArchiveEntry0 = new ZipArchiveEntry((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      boolean boolean0 = true;
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, "kI~\"`2wx\"K[t*DU~", true);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // kI~\"`2wx\"K[t*DU~
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(mockFileInputStream0, ";P5s6EDC`Ox", false, false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ;P5s6EDC`Ox
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(bufferedInputStream0);
      ZipArchiveInputStream zipArchiveInputStream1 = null;
      try {
        zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0, "Truncated ZIP entry: ", false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Truncated ZIP entry: 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      boolean boolean0 = pipedInputStream0.markSupported();
      assertFalse(boolean0);
      assertEquals(0, pipedInputStream0.available());
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertNotNull(zipArchiveInputStream0);
      
      try { 
        pipedInputStream0.skip(914L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }
}
