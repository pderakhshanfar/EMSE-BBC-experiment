/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 02:21:28 GMT 2021
 */

package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Enumeration;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ZipArchiveInputStream_ESTest extends ZipArchiveInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte) (-97);
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ZipArchiveInputStream.matches(byteArray0, 43);
      ZipArchiveInputStream.matches(byteArray0, (byte) (-97));
      ZipArchiveInputStream.matches(byteArray0, (byte) (-97));
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-65), 92);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0);
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.getNextEntry();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      zipArchiveInputStream0.getNextZipEntry();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      zipArchiveInputStream0.getNextEntry();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ZipArchiveInputStream.matches(byteArray0, (byte)80);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2244), (byte)80);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, "b", true);
      zipArchiveInputStream0.available();
      zipArchiveInputStream0.read(byteArray0, 0, (-2146316536));
      zipArchiveInputStream0.read(byteArray0, 0, (-64));
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.getNextZipEntry();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      zipArchiveInputStream0.skip(4294967296L);
      zipArchiveInputStream0.skip(0L);
      System.setCurrentTimeMillis(0L);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte)106;
      byteArray0[7] = (byte)22;
      byteArray0[8] = (byte)41;
      ZipArchiveInputStream.matches(byteArray0, 59);
      try { 
        zipArchiveInputStream0.getNextZipEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream((InputStream) null);
      zipArchiveInputStream1.skip(1024L);
      ZipArchiveInputStream zipArchiveInputStream2 = new ZipArchiveInputStream(zipArchiveInputStream0);
      // Undeclared exception!
      try { 
        zipArchiveInputStream2.skip((-1421L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      zipArchiveInputStream0.skip(6L);
      zipArchiveInputStream0.close();
      zipArchiveInputStream0.skip(0L);
      zipArchiveInputStream0.getNextZipEntry();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      zipArchiveInputStream0.close();
      zipArchiveInputStream0.getBytesRead();
      try { 
        zipArchiveInputStream0.skip(589L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The stream is closed
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      zipArchiveInputStream0.markSupported();
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(sequenceInputStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)97;
      ZipArchiveInputStream.matches(byteArray0, 4);
      zipArchiveInputStream1.getNextZipEntry();
      File file0 = MockFile.createTempFile("P-hi)O. vAzRCe>4W", "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      ZipArchiveInputStream zipArchiveInputStream2 = null;
      try {
        zipArchiveInputStream2 = new ZipArchiveInputStream(zipArchiveInputStream1, "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream", false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      zipArchiveInputStream0.markSupported();
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(sequenceInputStream0);
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Dwk", (byte)97);
      ZipArchiveInputStream zipArchiveInputStream2 = new ZipArchiveInputStream(zipArchiveInputStream0, "Dwk", false, false);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("len(");
      zipArchiveInputStream2.canReadEntryData(jarArchiveEntry0);
      byte[] byteArray0 = new byte[0];
      zipArchiveInputStream1.read(byteArray0, 1073741824, 1698);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0);
      zipArchiveInputStream1.markSupported();
      ZipArchiveInputStream zipArchiveInputStream2 = new ZipArchiveInputStream(zipArchiveInputStream1);
      ZipArchiveInputStream zipArchiveInputStream3 = new ZipArchiveInputStream(zipArchiveInputStream1, "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", true, false);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("");
      zipArchiveInputStream3.canReadEntryData(jarArchiveEntry0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte)97;
      byteArray0[7] = (byte)97;
      byteArray0[8] = (byte)97;
      ZipArchiveInputStream.matches(byteArray0, 0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte)74;
      sequenceInputStream0.read(byteArray0);
      ZipArchiveInputStream.matches(byteArray0, (byte)74);
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(sequenceInputStream0);
      try { 
        zipArchiveInputStream0.getNextEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)74;
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte)74;
      File file0 = MockFile.createTempFile("+#b<ZT", "e97tAYm/2:0", (File) null);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      zipArchiveInputStream0.skip((byte)74);
      try { 
        zipArchiveInputStream0.getNextEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0);
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0);
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)0);
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.getNextZipEntry();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.read();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      zipArchiveInputStream0.getNextEntry();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)86;
      sequenceInputStream0.available();
      byteArray0[1] = (byte)0;
      sequenceInputStream0.read(byteArray0, (int) (byte) (-30), 1);
      byteArray0[2] = (byte) (-30);
      sequenceInputStream0.mark((-1131));
      sequenceInputStream0.skip(16L);
      byteArray0[3] = (byte) (-24);
      zipArchiveInputStream0.read(byteArray0, (int) (byte)0, 0);
      zipArchiveInputStream0.canReadEntryData((ArchiveEntry) null);
      zipArchiveInputStream0.close();
      zipArchiveInputStream0.canReadEntryData((ArchiveEntry) null);
      zipArchiveInputStream0.canReadEntryData((ArchiveEntry) null);
      zipArchiveInputStream0.canReadEntryData((ArchiveEntry) null);
      zipArchiveInputStream0.close();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      zipArchiveInputStream0.close();
      zipArchiveInputStream0.close();
      try { 
        zipArchiveInputStream0.skip(1819L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The stream is closed
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.read();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      zipArchiveInputStream0.getNextEntry();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)0;
      sequenceInputStream0.read(byteArray0, (int) (byte) (-30), 1);
      byteArray0[2] = (byte) (-30);
      sequenceInputStream0.mark((-1131));
      sequenceInputStream0.skip(16L);
      byteArray0[3] = (byte) (-24);
      zipArchiveInputStream0.read(byteArray0, (int) (byte)0, 0);
      zipArchiveInputStream0.canReadEntryData((ArchiveEntry) null);
      sequenceInputStream0.markSupported();
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      // Undeclared exception!
      try { 
        ZipArchiveInputStream.matches((byte[]) null, 3226);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-2);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 9524, (byte) (-1));
      byteArrayInputStream0.close();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, "ZI");
      zipArchiveInputStream0.close();
      byteArrayInputStream0.mark((-3505));
      ZipArchiveInputStream zipArchiveInputStream1 = null;
      try {
        zipArchiveInputStream1 = new ZipArchiveInputStream(byteArrayInputStream0, "aiQZ+S!)HlsZzwY!", true);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // aiQZ+S!)HlsZzwY!
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)84;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte)16;
      zipArchiveInputStream0.read(byteArray0);
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(", firstChapter=", false);
      zipArchiveInputStream0.canReadEntryData(tarArchiveEntry0);
      tarArchiveEntry0.setGroupId(4294967296L);
      zipArchiveInputStream0.canReadEntryData(tarArchiveEntry0);
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.getNextEntry();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)67;
      ZipArchiveInputStream.matches(byteArray0, (byte)74);
      File file0 = MockFile.createTempFile("+#b<ZT", "+#b<ZT", (File) null);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(mockFileInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, (String) null, false, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte) (-25);
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte)64;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      ZipArchiveInputStream.matches(byteArray0, (byte)0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        ZipArchiveInputStream.matches(byteArray0, 4726);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-7);
      byteArray0[1] = (byte)1;
      ZipArchiveInputStream.matches(byteArray0, 0);
      File file0 = MockFile.createTempFile("org.apache.commons.compress.compressors.lzw.LZWInputStream", "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(mockFileInputStream0, "org.apache.commons.compress.compressors.lzw.LZWInputStream", false);
      zipArchiveInputStream0.skip((byte)0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      zipArchiveInputStream0.markSupported();
      zipArchiveInputStream0.skip(0L);
      zipArchiveInputStream0.skip(0L);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)15;
      sequenceInputStream0.read(byteArray0);
      sequenceInputStream0.close();
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte) (-2);
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)0;
      ZipArchiveInputStream.matches(byteArray1, (-1135));
      zipArchiveInputStream0.getNextEntry();
      sequenceInputStream0.read(byteArray1);
      zipArchiveInputStream0.skip(2L);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(mockFileInputStream0, "NXfe`li(z-jLU");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // NXfe`li(z-jLU
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, "", true);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-65);
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte) (-97);
      byte byte1 = (byte)14;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ZipArchiveInputStream.matches(byteArray0, 43);
      ZipArchiveInputStream.matches(byteArray0, (byte) (-97));
      ZipArchiveInputStream.matches(byteArray0, (byte) (-97));
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)121, 92);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream");
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0);
      zipArchiveInputStream1.getNextEntry();
      zipArchiveInputStream1.canReadEntryData((ArchiveEntry) null);
      zipArchiveInputStream1.close();
      ZipArchiveInputStream.matches(byteArray0, (byte) (-65));
      zipArchiveInputStream1.available();
      try { 
        zipArchiveInputStream1.read(byteArray0, (int) (byte)0, 1919);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The stream is closed
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte)1;
      ZipArchiveInputStream.matches(byteArray0, 0);
      File file0 = MockFile.createTempFile("org.apache.commons.compress.compressors.lzw.LZWInputStream", "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(mockFileInputStream0, "org.apache.commons.compress.compressors.lzw.LZWInputStream", false);
      zipArchiveInputStream0.skip((byte)1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0);
      byte[] byteArray0 = new byte[0];
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Dwk", (byte) (-92));
      zipArchiveInputStream0.canReadEntryData(tarArchiveEntry0);
      // Undeclared exception!
      try { 
        dataInputStream0.readByte();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
      String string0 = null;
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0, (String) null, true, true);
      zipArchiveInputStream1.markSupported();
      zipArchiveInputStream0.skip(134630224L);
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.skip((-542L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, "}b)Z8v^", true, true);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // }b)Z8v^
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      byte byte0 = (byte)0;
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("k5HJzRH)zPC(~iKTu", (byte)0);
      try { 
        zipArchiveInputStream0.getNextZipEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte)1;
      ZipArchiveInputStream.matches(byteArray0, 0);
      File file0 = MockFile.createTempFile("org.apache.commons.compress.compressors.lzw.LZWInputStream", "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(mockFileInputStream0);
      zipArchiveInputStream0.getNextZipEntry();
      zipArchiveInputStream0.close();
      zipArchiveInputStream0.getNextEntry();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.read();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      zipArchiveInputStream0.getNextEntry();
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)86;
      byteArray0[0] = (byte)86;
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte2 = (byte) (-30);
      sequenceInputStream0.read(byteArray0, (int) (byte) (-30), 1);
      byteArray0[2] = (byte) (-30);
      byte byte3 = (byte) (-24);
      sequenceInputStream0.mark((-1131));
      sequenceInputStream0.skip(16L);
      byteArray0[3] = (byte) (-24);
      zipArchiveInputStream0.read(byteArray0, (int) (byte)0, 0);
      zipArchiveInputStream0.canReadEntryData((ArchiveEntry) null);
      zipArchiveInputStream0.close();
      zipArchiveInputStream0.canReadEntryData((ArchiveEntry) null);
      zipArchiveInputStream0.canReadEntryData((ArchiveEntry) null);
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.skip((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)68;
      ZipArchiveInputStream.matches(byteArray0, (byte)0);
      ZipArchiveInputStream.matches(byteArray0, 0);
      String string0 = "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$1";
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$1");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }
}
