/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 22:14:48 GMT 2021
 */

package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.net.URI;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Enumeration;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.ar.ArArchiveEntry;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ZipArchiveInputStream_ESTest extends ZipArchiveInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte)80;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "The stream is closed");
      byteArray0[5] = (byte) (-19);
      byteArray0[6] = (byte)80;
      byteArray0[7] = (byte)30;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-4450), (byte)26);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      byteArrayInputStream0.markSupported();
      zipArchiveInputStream0.skip(16L);
      byteArrayInputStream0.reset();
      zipArchiveInputStream0.read(byteArray0, 32780, (int) (byte) (-89));
      zipArchiveInputStream0.read(byteArray0, (int) (byte) (-89), (-1));
      zipArchiveInputStream0.available();
      ArArchiveEntry arArchiveEntry0 = new ArArchiveEntry("The stream is closed", (byte)52, (byte)80, (byte)0, (-1), (byte) (-89));
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.getNextZipEntry();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte)80;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "The stream is closed");
      byteArray0[5] = (byte) (-19);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)30;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-4450), (byte)26);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      byteArrayInputStream0.markSupported();
      zipArchiveInputStream0.skip(16L);
      byteArrayInputStream0.reset();
      zipArchiveInputStream0.read(byteArray0, 32780, (int) (byte) (-89));
      zipArchiveInputStream0.read(byteArray0, (int) (byte) (-89), (-1));
      zipArchiveInputStream0.available();
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.getNextEntry();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        ZipArchiveInputStream.matches((byte[]) null, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      zipArchiveInputStream0.close();
      ZipArchiveInputStream.matches(byteArray0, 2203);
      try { 
        zipArchiveInputStream0.read(byteArray0, 2203, 2203);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The stream is closed
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      MockFile mockFile0 = new MockFile("", ")R6^'ccn|1tA");
      ArArchiveEntry arArchiveEntry0 = new ArArchiveEntry(mockFile0, "");
      zipArchiveInputStream0.canReadEntryData(arArchiveEntry0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)21;
      arArchiveEntry0.getLastModifiedDate();
      byteArray0[2] = (byte)44;
      arArchiveEntry0.getLastModifiedDate();
      byteArray0[0] = (byte) (-27);
      byteArray0[4] = (byte) (-30);
      byteArray0[5] = (byte)126;
      byteArray0[6] = (byte)82;
      zipArchiveInputStream0.read(byteArray0, (-2140027106), (int) (byte)126);
      zipArchiveInputStream0.close();
      zipArchiveInputStream0.canReadEntryData(arArchiveEntry0);
      ZipArchiveInputStream.matches(byteArray0, 2);
      try { 
        zipArchiveInputStream0.skip((byte)82);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The stream is closed
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      int int0 = 26;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      zipArchiveInputStream0.close();
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0, "52:");
      ZipArchiveInputStream.matches(byteArray0, 26);
      try { 
        zipArchiveInputStream1.getNextEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The stream is closed
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      zipArchiveInputStream0.available();
      zipArchiveInputStream0.getNextEntry();
      zipArchiveInputStream0.getNextZipEntry();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      zipArchiveInputStream0.markSupported();
      zipArchiveInputStream0.mark((-1));
      zipArchiveInputStream0.read(byteArray0, 0, (-914));
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(sequenceInputStream0, "USER_EXEC", false);
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte) (-126);
      byteArray0[5] = (byte) (-117);
      byteArray0[6] = (byte) (-9);
      byteArray0[7] = (byte)35;
      try { 
        zipArchiveInputStream0.getNextZipEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte) (-13);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)105, (byte)105);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      zipArchiveInputStream0.skip((byte)105);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = null;
      int int0 = 35;
      // Undeclared exception!
      try { 
        ZipArchiveInputStream.matches((byte[]) null, 35);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      MockFile mockFile0 = new MockFile("", ")R6^'ccn|1tA");
      MockFile mockFile1 = new MockFile(mockFile0, "This archive needs a preset dictionary which is not supported by Commons Compress.");
      ArArchiveEntry arArchiveEntry0 = new ArArchiveEntry(mockFile1, "");
      zipArchiveInputStream0.canReadEntryData(arArchiveEntry0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-27);
      byteArray0[4] = (byte) (-30);
      byteArray0[5] = (byte)126;
      byteArray0[6] = (byte)82;
      zipArchiveInputStream0.read(byteArray0, (-2140027106), (int) (byte)126);
      zipArchiveInputStream0.close();
      zipArchiveInputStream0.canReadEntryData(arArchiveEntry0);
      ZipArchiveInputStream.matches(byteArray0, 2);
      zipArchiveInputStream0.close();
      CpioArchiveEntry cpioArchiveEntry0 = null;
      try {
        cpioArchiveEntry0 = new CpioArchiveEntry((byte) (-27), "Truncated ZIP entry: ", (byte) (-101));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown header type
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0, "mldS7MvpXW1+", true);
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.skip((-1370));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, "mldS7MvpXW1+", true);
      zipArchiveInputStream0.skip(1311L);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      zipArchiveInputStream0.close();
      zipArchiveInputStream0.available();
      zipArchiveInputStream0.getNextEntry();
      zipArchiveInputStream0.getNextZipEntry();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte)16;
      byteArray0[7] = (byte)0;
      ZipArchiveInputStream.matches(byteArray0, 2203);
      ZipArchiveInputStream.matches(byteArray0, (byte)0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      zipArchiveInputStream0.read((byte[]) null, 0, 0);
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      zipArchiveInputStream0.canReadEntryData(sevenZArchiveEntry0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      String string0 = "CDHQL";
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pushbackInputStream0, "CDHQL");
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0, "CDHQL", true, false);
      URI uRI0 = MockURI.aFTPURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0);
      zipArchiveInputStream0.close();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte) (-105);
      byteArray0[7] = (byte)2;
      byteArray0[8] = (byte)12;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)81, (-1370));
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, "org.apache.commons.compress.archivers.zip.ZipLong");
      zipArchiveInputStream0.getNextEntry();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)51;
      ZipArchiveInputStream.matches(byteArray0, 2203);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, (String) null, true, false);
      zipArchiveInputStream0.skip(0L);
      zipArchiveInputStream0.markSupported();
      zipArchiveInputStream0.mark((-1375));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      zipArchiveInputStream0.read(byteArray0, 1369, (-914));
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(pipedInputStream0, "USER_EXEC", true);
      zipArchiveInputStream1.close();
      zipArchiveInputStream1.getNextEntry();
      ZipArchiveInputStream.matches(byteArray0, (-81));
      try { 
        zipArchiveInputStream0.getNextEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      zipArchiveInputStream0.available();
      zipArchiveInputStream0.getNextEntry();
      zipArchiveInputStream0.getNextZipEntry();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte)16;
      byteArray0[7] = (byte)0;
      ZipArchiveInputStream.matches(byteArray0, 2203);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte) (-26);
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte)31;
      byteArray0[6] = (byte)37;
      byteArray0[7] = (byte)30;
      ZipArchiveInputStream.matches(byteArray0, (byte)37);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[42];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      zipArchiveInputStream0.getNextZipEntry();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, "UTF8", true);
      long long0 = 210L;
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)26;
      byteArray0[0] = (byte)26;
      byte byte1 = (byte)1;
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.getLastModifiedDate();
      zipArchiveEntry0.setVersionRequired((byte)26);
      zipArchiveEntry0.equals((Object) null);
      zipArchiveInputStream0.canReadEntryData(zipArchiveEntry0);
      try { 
        zipArchiveInputStream0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ZipArchiveInputStream.matches(byteArray0, (byte)0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, "%3!eiW.e{&", false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // %3!eiW.e{&
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)17;
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, "G]ZkkfWWS");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // G]ZkkfWWS
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(13);
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, "7!K1", false, true);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 7!K1
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        ZipArchiveInputStream.matches(byteArray0, 26);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte) (-58);
      ZipArchiveInputStream.matches(byteArray0, (-329));
  }
}
