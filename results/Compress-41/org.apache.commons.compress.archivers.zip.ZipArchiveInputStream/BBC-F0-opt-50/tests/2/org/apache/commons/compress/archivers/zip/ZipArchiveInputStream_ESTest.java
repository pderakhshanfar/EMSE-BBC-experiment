/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 12 12:15:36 GMT 2021
 */

package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Enumeration;
import java.util.zip.ZipEntry;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ZipArchiveInputStream_ESTest extends ZipArchiveInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, 2128136948);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(boolean0);
      
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      assertNotNull(pushbackInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertNotNull(zipArchiveInputStream0);
      
      zipArchiveInputStream0.close();
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(pushbackInputStream0);
      assertEquals(0L, zipArchiveInputStream1.getBytesRead());
      assertEquals(0, zipArchiveInputStream1.getCount());
      assertFalse(zipArchiveInputStream1.equals((Object)zipArchiveInputStream0));
      assertNotNull(zipArchiveInputStream1);
      
      ArchiveEntry archiveEntry0 = zipArchiveInputStream1.getNextEntry();
      assertNotSame(zipArchiveInputStream1, zipArchiveInputStream0);
      assertEquals(0L, zipArchiveInputStream1.getBytesRead());
      assertEquals(0, zipArchiveInputStream1.getCount());
      assertFalse(zipArchiveInputStream1.equals((Object)zipArchiveInputStream0));
      assertNull(archiveEntry0);
      
      try { 
        zipArchiveInputStream0.skip(1024L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The stream is closed
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)80;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 80, 80);
      assertEquals((-74), byteArrayInputStream0.available());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)80, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, (-1309), 80);
      assertEquals(80, byteArrayInputStream1.available());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)80, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(byteArrayInputStream1);
      
      byteArrayInputStream1.reset();
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertEquals(80, byteArrayInputStream1.available());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)80, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream1, (String) null, false, true);
      assertEquals(80, byteArrayInputStream1.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)80, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(zipArchiveInputStream0);
      
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.getNextZipEntry();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertNotNull(zipArchiveInputStream0);
      
      zipArchiveInputStream0.close();
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      ZipArchiveEntry zipArchiveEntry0 = zipArchiveInputStream0.getNextZipEntry();
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertNull(zipArchiveEntry0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-103);
      try { 
        zipArchiveInputStream0.read(byteArray0, (int) (byte)86, 1648);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The stream is closed
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, 2128136948);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(boolean0);
      
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      assertNotNull(pushbackInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertNotNull(zipArchiveInputStream0);
      
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InputStream inputStream0 = null;
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertNotNull(zipArchiveInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream((InputStream) null);
      assertEquals(0L, zipArchiveInputStream1.getBytesRead());
      assertEquals(0, zipArchiveInputStream1.getCount());
      assertFalse(zipArchiveInputStream1.equals((Object)zipArchiveInputStream0));
      assertNotNull(zipArchiveInputStream1);
      
      boolean boolean0 = false;
      ZipArchiveInputStream zipArchiveInputStream2 = new ZipArchiveInputStream((InputStream) null, "INODE", false);
      assertEquals(0, zipArchiveInputStream2.getCount());
      assertEquals(0L, zipArchiveInputStream2.getBytesRead());
      assertFalse(zipArchiveInputStream2.equals((Object)zipArchiveInputStream1));
      assertFalse(zipArchiveInputStream2.equals((Object)zipArchiveInputStream0));
      assertNotNull(zipArchiveInputStream2);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)15;
      byteArray0[0] = (byte)90;
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte) (-53);
      int int0 = zipArchiveInputStream2.read(byteArray0);
      assertNotSame(zipArchiveInputStream2, zipArchiveInputStream1);
      assertNotSame(zipArchiveInputStream2, zipArchiveInputStream0);
      assertEquals(0, zipArchiveInputStream2.getCount());
      assertEquals(0L, zipArchiveInputStream2.getBytesRead());
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)90, (byte)0, (byte) (-82), (byte) (-53)}, byteArray0);
      assertEquals((-1), int0);
      assertFalse(zipArchiveInputStream2.equals((Object)zipArchiveInputStream1));
      assertFalse(zipArchiveInputStream2.equals((Object)zipArchiveInputStream0));
      
      try { 
        zipArchiveInputStream0.getNextZipEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)80;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 80, 80);
      assertEquals((-74), byteArrayInputStream0.available());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)80, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      assertEquals((-74), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)80, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(zipArchiveInputStream0);
      
      ArchiveEntry archiveEntry0 = zipArchiveInputStream0.getNextEntry();
      assertEquals((-74), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)80, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNull(archiveEntry0);
      
      long long0 = zipArchiveInputStream0.skip((byte)0);
      assertEquals((-74), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)80, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0L, long0);
      
      boolean boolean1 = ZipArchiveInputStream.matches(byteArray0, 80);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)80, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ArchiveEntry archiveEntry1 = zipArchiveInputStream0.getNextEntry();
      assertEquals((-74), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)80, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNull(archiveEntry1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)43;
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, (byte) (-120));
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-120), (byte)43}, byteArray0);
      assertFalse(boolean0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      assertNotNull(pushbackInputStream0);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry(", dateTimeCreated=");
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(", dateTimeCreated=", jarArchiveEntry0.getName());
      assertEquals(", dateTimeCreated=", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertNotNull(jarArchiveEntry0);
      
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-120);
      byteArray1[1] = (byte) (-120);
      byteArray1[2] = (byte) (-120);
      byteArray1[3] = (byte)55;
      byteArray1[4] = (byte) (-120);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, (-1), (byte)55);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(5, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-120), (byte) (-120), (byte) (-120), (byte)55, (byte) (-120)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArrayInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(5, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-120), (byte) (-120), (byte) (-120), (byte)55, (byte) (-120)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(zipArchiveInputStream0);
      
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.getNextEntry();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)43;
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, (byte) (-120));
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-120), (byte)43}, byteArray0);
      assertFalse(boolean0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      assertNotNull(pushbackInputStream0);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry(", dateTimeCreated=");
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(", dateTimeCreated=", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(", dateTimeCreated=", jarArchiveEntry0.toString());
      assertNull(jarArchiveEntry0.getComment());
      assertNotNull(jarArchiveEntry0);
      
      long long0 = jarArchiveEntry0.getTime();
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(", dateTimeCreated=", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(", dateTimeCreated=", jarArchiveEntry0.toString());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), long0);
      
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream((InputStream) null);
      assertFalse(pushbackInputStream1.equals((Object)pushbackInputStream0));
      assertNotNull(pushbackInputStream1);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pushbackInputStream1);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertFalse(pushbackInputStream1.equals((Object)pushbackInputStream0));
      assertNotNull(zipArchiveInputStream0);
      
      long long1 = zipArchiveInputStream0.skip(1193L);
      assertNotSame(pushbackInputStream1, pushbackInputStream0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0L, long1);
      assertFalse(pushbackInputStream1.equals((Object)pushbackInputStream0));
      assertFalse(long1 == long0);
      
      boolean boolean1 = ZipArchiveInputStream.matches(byteArray0, 3037);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-120), (byte)43}, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)110;
      byteArray1[1] = (byte)110;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, (byte)110, 26126);
      assertEquals((-108), byteArrayInputStream0.available());
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)110, (byte)110}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArrayInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      assertEquals((-108), byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)110, (byte)110}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(zipArchiveInputStream0);
      
      ArchiveEntry archiveEntry0 = zipArchiveInputStream0.getNextEntry();
      assertNotSame(byteArray1, byteArray0);
      assertEquals((-108), byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)110, (byte)110}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNull(archiveEntry0);
      
      long long0 = zipArchiveInputStream0.skip((byte)110);
      assertNotSame(byteArray1, byteArray0);
      assertEquals((-108), byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)110, (byte)110}, byteArray1);
      assertEquals(0L, long0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, (byte)110);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      boolean boolean1 = zipArchiveInputStream0.canReadEntryData((ArchiveEntry) null);
      assertNotSame(byteArray1, byteArray0);
      assertEquals((-108), byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)110, (byte)110}, byteArray1);
      assertFalse(boolean1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(boolean1 == boolean0);
      
      ZipArchiveEntry zipArchiveEntry0 = zipArchiveInputStream0.getNextZipEntry();
      assertNotSame(byteArray1, byteArray0);
      assertEquals((-108), byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)110, (byte)110}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNull(zipArchiveEntry0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertNotNull(zipArchiveInputStream0);
      
      zipArchiveInputStream0.close();
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      zipArchiveInputStream0.close();
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)15;
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      assertNotNull(pushbackInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertNotNull(zipArchiveInputStream0);
      
      zipArchiveInputStream0.close();
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      
      try { 
        zipArchiveInputStream0.skip((byte)15);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The stream is closed
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, 2128136948);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(boolean0);
      
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      assertNotNull(pushbackInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertNotNull(zipArchiveInputStream0);
      
      zipArchiveInputStream0.close();
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(pushbackInputStream0);
      assertEquals(0L, zipArchiveInputStream1.getBytesRead());
      assertEquals(0, zipArchiveInputStream1.getCount());
      assertFalse(zipArchiveInputStream1.equals((Object)zipArchiveInputStream0));
      assertNotNull(zipArchiveInputStream1);
      
      ArchiveEntry archiveEntry0 = zipArchiveInputStream1.getNextEntry();
      assertNotSame(zipArchiveInputStream1, zipArchiveInputStream0);
      assertEquals(0L, zipArchiveInputStream1.getBytesRead());
      assertEquals(0, zipArchiveInputStream1.getCount());
      assertFalse(zipArchiveInputStream1.equals((Object)zipArchiveInputStream0));
      assertNull(archiveEntry0);
      
      try { 
        zipArchiveInputStream0.skip(877L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The stream is closed
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      assertFalse(fileDescriptor0.valid());
      assertNotNull(pushbackInputStream0);
      
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)110;
      byteArray1[1] = (byte)110;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, (byte)110, 26126);
      assertEquals((-108), byteArrayInputStream0.available());
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)110, (byte)110}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArrayInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      assertEquals((-108), byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)110, (byte)110}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(zipArchiveInputStream0);
      
      ArchiveEntry archiveEntry0 = zipArchiveInputStream0.getNextEntry();
      assertNotSame(byteArray1, byteArray0);
      assertEquals((-108), byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)110, (byte)110}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNull(archiveEntry0);
      
      boolean boolean0 = byteArrayInputStream0.markSupported();
      assertNotSame(byteArray1, byteArray0);
      assertEquals((-108), byteArrayInputStream0.available());
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)110, (byte)110}, byteArray1);
      assertTrue(boolean0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      long long0 = zipArchiveInputStream0.skip((byte)110);
      assertNotSame(byteArray1, byteArray0);
      assertEquals((-108), byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)110, (byte)110}, byteArray1);
      assertEquals(0L, long0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean1 = ZipArchiveInputStream.matches(byteArray0, (byte)110);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean1 == boolean0);
      
      int int0 = zipArchiveInputStream0.read(byteArray1, 1931, (-1));
      assertNotSame(byteArray1, byteArray0);
      assertEquals((-108), byteArrayInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)110, (byte)110}, byteArray1);
      assertEquals((-1), int0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, 4);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(boolean0);
      
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      assertNotNull(pushbackInputStream0);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry(", dateTimeCreated=");
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(", dateTimeCreated=", jarArchiveEntry0.toString());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(", dateTimeCreated=", jarArchiveEntry0.getName());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertNotNull(jarArchiveEntry0);
      
      long long0 = jarArchiveEntry0.getTime();
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(", dateTimeCreated=", jarArchiveEntry0.toString());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(", dateTimeCreated=", jarArchiveEntry0.getName());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), long0);
      
      String string0 = "";
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, (String) null, false, true);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertNotNull(zipArchiveInputStream0);
      
      boolean boolean1 = zipArchiveInputStream0.canReadEntryData(jarArchiveEntry0);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(", dateTimeCreated=", jarArchiveEntry0.toString());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(", dateTimeCreated=", jarArchiveEntry0.getName());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "WORLD_READ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      assertFalse(fileDescriptor0.valid());
      assertNotNull(pushbackInputStream0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)110;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)110, 26126);
      assertEquals((-108), byteArrayInputStream0.available());
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)110, (byte)110}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      assertEquals((-108), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)110, (byte)110}, byteArray0);
      assertNotNull(zipArchiveInputStream0);
      
      ArchiveEntry archiveEntry0 = zipArchiveInputStream0.getNextEntry();
      assertEquals((-108), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)110, (byte)110}, byteArray0);
      assertNull(archiveEntry0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ArchiveEntry archiveEntry1 = zipArchiveInputStream0.getNextEntry();
      assertEquals((-108), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)110, (byte)110}, byteArray0);
      assertNull(archiveEntry1);
      
      ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(mockFileInputStream0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0L, zipArchiveInputStream1.getBytesRead());
      assertEquals(0, zipArchiveInputStream1.getCount());
      assertFalse(zipArchiveInputStream1.equals((Object)zipArchiveInputStream0));
      assertNotNull(zipArchiveInputStream1);
      
      ZipArchiveEntry zipArchiveEntry0 = zipArchiveInputStream0.getNextZipEntry();
      assertNotSame(zipArchiveInputStream0, zipArchiveInputStream1);
      assertEquals((-108), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)110, (byte)110}, byteArray0);
      assertFalse(zipArchiveInputStream0.equals((Object)zipArchiveInputStream1));
      assertNull(zipArchiveEntry0);
      
      try { 
        zipArchiveInputStream1.getNextEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)43;
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, (byte) (-120));
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-120), (byte)43}, byteArray0);
      assertFalse(boolean0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      assertNotNull(pushbackInputStream0);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry(", dateTimeCreated=");
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(", dateTimeCreated=", jarArchiveEntry0.toString());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(", dateTimeCreated=", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertNotNull(jarArchiveEntry0);
      
      long long0 = jarArchiveEntry0.getTime();
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(", dateTimeCreated=", jarArchiveEntry0.toString());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(", dateTimeCreated=", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals((-1L), long0);
      
      String string0 = null;
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, (String) null, true, false);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertNotNull(zipArchiveInputStream0);
      
      boolean boolean1 = zipArchiveInputStream0.canReadEntryData(jarArchiveEntry0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(", dateTimeCreated=", jarArchiveEntry0.toString());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(", dateTimeCreated=", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean2 = jarArchiveEntry0.equals(object0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(", dateTimeCreated=", jarArchiveEntry0.toString());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(", dateTimeCreated=", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = ZipArchiveInputStream.matches(byteArray0, (byte)43);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-120), (byte)43}, byteArray0);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      try { 
        zipArchiveInputStream0.getNextEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte)20;
      boolean boolean1 = ZipArchiveInputStream.matches(byteArray0, (byte)80);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)80, (byte)99, (byte)15, (byte) (-8), (byte) (-79), (byte)20}, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = ZipArchiveInputStream.matches(byteArray0, (byte) (-79));
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)80, (byte)99, (byte)15, (byte) (-8), (byte) (-79), (byte)20}, byteArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      int int0 = (-725);
      boolean boolean3 = ZipArchiveInputStream.matches(byteArray0, (-725));
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)80, (byte)99, (byte)15, (byte) (-8), (byte) (-79), (byte)20}, byteArray0);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0, "]", false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ]
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      assertFalse(fileDescriptor0.valid());
      assertNotNull(pushbackInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pushbackInputStream0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertNotNull(zipArchiveInputStream0);
      
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-53);
      // Undeclared exception!
      try { 
        zipArchiveInputStream0.skip((byte) (-53));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte) (-73);
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, 26126);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)110, (byte) (-73), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      // Undeclared exception!
      try { 
        ZipArchiveInputStream.matches(byteArray1, 9563);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      assertFalse(fileDescriptor0.valid());
      assertNotNull(pushbackInputStream0);
      
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)110;
      byteArray1[1] = (byte)110;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, (byte)110, 26126);
      assertEquals((-108), byteArrayInputStream0.available());
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)110, (byte)110}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArrayInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      assertEquals((-108), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)110, (byte)110}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(zipArchiveInputStream0);
      
      ArchiveEntry archiveEntry0 = zipArchiveInputStream0.getNextEntry();
      assertNotSame(byteArray1, byteArray0);
      assertEquals((-108), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)110, (byte)110}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNull(archiveEntry0);
      
      long long0 = zipArchiveInputStream0.skip((byte)110);
      assertNotSame(byteArray1, byteArray0);
      assertEquals((-108), byteArrayInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)110, (byte)110}, byteArray1);
      assertEquals(0L, long0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, (byte)110);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      assertFalse(byteArray0.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 26126;
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        ZipArchiveInputStream.matches((byte[]) null, 26126);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte) (-73);
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, 26126);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)110, (byte) (-73), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-73);
      byteArray1[1] = (byte) (-73);
      boolean boolean1 = ZipArchiveInputStream.matches(byteArray1, (byte) (-73));
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-73), (byte) (-73)}, byteArray1);
      assertFalse(boolean1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = ZipArchiveInputStream.matches(byteArray0, (byte)110);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)110, (byte) (-73), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)15;
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, 6);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)15}, byteArray0);
      assertFalse(boolean0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      assertNotNull(pushbackInputStream0);
      
      byte[] byteArray1 = null;
      String string0 = ", dateTimeCreated=";
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry(", dateTimeCreated=");
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(", dateTimeCreated=", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(", dateTimeCreated=", jarArchiveEntry0.toString());
      assertNull(jarArchiveEntry0.getComment());
      assertNotNull(jarArchiveEntry0);
      
      long long0 = jarArchiveEntry0.getTime();
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(", dateTimeCreated=", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(", dateTimeCreated=", jarArchiveEntry0.toString());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), long0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(pushbackInputStream0, "", true, false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertNotNull(zipArchiveInputStream0);
      
      try { 
        zipArchiveInputStream0.getNextZipEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte)35;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-108);
      byteArray0[8] = (byte)92;
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, (byte) (-17));
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-76), (byte) (-17), (byte) (-102), (byte)35, (byte)0, (byte)0, (byte)0, (byte) (-108), (byte)92}, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, "EXPANDING_LEVEL_3");
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertNotNull(zipArchiveInputStream0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(zipArchiveInputStream0, pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertNotNull(sequenceInputStream0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte) (-32);
      byteArray0[6] = (byte)106;
      byteArray0[7] = (byte)0;
      // Undeclared exception!
      try { 
        sequenceInputStream0.read(byteArray0, (-892), (-2646));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte) (-120);
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte) (-45);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-81), (byte)0, (byte)88, (byte) (-120), (byte)6, (byte) (-45)}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      long long0 = byteArrayInputStream0.skip(106L);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-81), (byte)0, (byte)88, (byte) (-120), (byte)6, (byte) (-45)}, byteArray0);
      assertEquals(7L, long0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, "G\"GZ,CCYQ[Z%\"zP", true, true);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // G\"GZ,CCYQ[Z%\"zP
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      assertFalse(fileDescriptor0.valid());
      assertNotNull(pushbackInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pushbackInputStream0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertNotNull(zipArchiveInputStream0);
      
      try { 
        zipArchiveInputStream0.getNextEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, (String) null, true, true);
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertNotNull(zipArchiveInputStream0);
      
      int int0 = (-2310);
      PushbackInputStream pushbackInputStream0 = null;
      try {
        pushbackInputStream0 = new PushbackInputStream(zipArchiveInputStream0, (-2310));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size <= 0
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, "j'G[4[e%Lj.NxnR", true);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // j'G[4[e%Lj.NxnR
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 26;
      PipedInputStream pipedInputStream0 = new PipedInputStream(26);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertNotNull(zipArchiveInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(zipArchiveInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertNotNull(bufferedInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, zipArchiveInputStream0.getCount());
      assertEquals(0L, zipArchiveInputStream0.getBytesRead());
      assertNotNull(pushbackInputStream0);
      
      ZipArchiveInputStream zipArchiveInputStream1 = null;
      try {
        zipArchiveInputStream1 = new ZipArchiveInputStream(pushbackInputStream0, "o=tC Lc");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // o=tC Lc
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }
}
