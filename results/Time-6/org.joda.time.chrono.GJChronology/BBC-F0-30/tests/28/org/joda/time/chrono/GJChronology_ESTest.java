/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 12:00:13 GMT 2021
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Years;
import org.joda.time.chrono.AssembledChronology;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.field.SkipDateTimeField;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GJChronology_ESTest extends GJChronology_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(97);
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 97);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(gJChronology0);
      long long0 = dateTimeField0.addWrapField((long) 0, 4);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(10368000000L, long0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(gJChronology0);
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0);
      skipDateTimeField0.getDifferenceAsLong((-64L), 0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(819);
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 819);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      Instant instant0 = gJChronology0.getGregorianCutover();
      JulianChronology julianChronology0 = new JulianChronology(gJChronology0, instant0, 3);
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(julianChronology0);
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(julianChronology0, dateTimeField0);
      skipDateTimeField0.getDifferenceAsLong(1649L, 0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(819L, instant0.getMillis());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(gJChronology0);
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0);
      long long0 = skipDateTimeField0.getDifferenceAsLong((-12219292800000L), 3);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-4646L), long0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      MutablePeriod mutablePeriod0 = new MutablePeriod(29, 3969, 28, 1038, 3969, (-1803), 3969, 564);
      int[] intArray0 = gJChronology0.get((ReadablePeriod) mutablePeriod0, (-12219292800000L), (long) 3969);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertArrayEquals(new int[] {387, 2, 2, 3, 0, 0, 3, 969}, intArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Months months0 = Months.TWELVE;
      LocalTime localTime0 = LocalTime.now((Chronology) gJChronology0);
      LocalTime localTime1 = localTime0.withPeriodAdded(months0, 73281310);
      assertTrue(localTime1.equals((Object)localTime0));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Period period0 = new Period(0, 0, (PeriodType) null, gJChronology0);
      int[] intArray0 = gJChronology0.get((ReadablePeriod) period0, (-32248886399052L), 20995200032L);
      assertArrayEquals(new int[] {1022, 7, 1, 1, 23, 59, 59, 84}, intArray0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Years years0 = Years.MAX_VALUE;
      Instant instant0 = new Instant(219L);
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      int[] intArray0 = gJChronology0.get((ReadablePeriod) years0, 31083597720021L, (-1526L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertArrayEquals(new int[] {(-985)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(91);
      Years years0 = Years.MIN_VALUE;
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 91);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      gJChronology0.get((ReadablePeriod) years0, 0L, (-3731L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      MutableDateTime mutableDateTime0 = new MutableDateTime((-250L));
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(gJChronology0);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, dateTimeZone0);
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(zonedChronology0, dateTimeField0);
      long long0 = skipDateTimeField0.roundHalfFloor((-1757L));
      assertEquals(0L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(gJChronology0);
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0);
      skipDateTimeField0.roundHalfFloor(0L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      MonthDay monthDay0 = new MonthDay((-2089L), (Chronology) gJChronology0);
      MonthDay monthDay1 = monthDay0.withMonthOfYear(3);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(31, monthDay1.getDayOfMonth());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3);
      System.setCurrentTimeMillis(3);
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.minus((long) 3);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime1);
      MonthDay monthDay0 = new MonthDay(3, 1, gJChronology0);
      MonthDay monthDay1 = monthDay0.withMonthOfYear(1);
      assertEquals(2, monthDay1.size());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(gJChronology0);
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0);
      int int0 = skipDateTimeField0.getMinimumValue((-12219292800000L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(gJChronology0);
      dateTimeField0.getLeapAmount(1);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(buddhistChronology0);
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, dateTimeZone0, (DurationField) null, (DurationField) null, (DurationField) null);
      boolean boolean0 = zonedChronology_ZonedDateTimeField0.isLeap((-12219292800000L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.millisOfSecond();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0);
      long long0 = skipDateTimeField0.set((-12219292799997L), "0");
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-12219292800000L), long0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTime dateTime0 = DateTime.now((Chronology) buddhistChronology0);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime0, 1);
      LocalDateTime localDateTime0 = new LocalDateTime((DateTimeZone) null);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      LocalDateTime localDateTime1 = localDateTime0.withFieldAdded(durationFieldType0, (-1));
      // Undeclared exception!
      try { 
        gJChronology0.set(localDateTime1, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 7 for dayOfMonth is not supported
         //
         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      MonthDay monthDay0 = new MonthDay((-2089L), (Chronology) gJChronology0);
      MonthDay monthDay1 = monthDay0.minusMonths(3);
      assertEquals(30, monthDay1.getDayOfMonth());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 1);
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      Locale locale0 = Locale.JAPAN;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(gJChronology0);
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0);
      String string0 = skipDateTimeField0.getAsShortText(1L, locale0);
      assertEquals("1", string0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(819);
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 819);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      Locale locale0 = Locale.GERMAN;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(gJChronology0);
      dateTimeField0.getAsText((long) 0, locale0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DateTime dateTime0 = new DateTime(1, 1, 1, 1, 1, 1, (DateTimeZone) null);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime0, 1);
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[Etc/UTC,cutover=0001-01-01T01:01:01.000Z,mdfw=1]", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3);
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) null, 3);
      boolean boolean0 = gJChronology0.equals(gJChronology1);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(3, gJChronology1.getMinimumDaysInFirstWeek());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateTime dateTime0 = new DateTime((DateTimeZone) fixedDateTimeZone0);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) dateTime0);
      GJChronology gJChronology1 = GJChronology.getInstance();
      boolean boolean0 = gJChronology0.equals(gJChronology1);
      assertFalse(boolean0);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 0, 3);
      LocalDateTime localDateTime0 = new LocalDateTime((long) 0, (Chronology) gJChronology0);
      DateTime dateTime0 = localDateTime0.toDateTime();
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(3, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      try { 
        gJChronology0.getDateTimeMillis(12, 2, 1148, 0, 1609, 1609, 12);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1609 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) dateTime0);
      LocalDateTime localDateTime0 = new LocalDateTime((Object) null, gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-4571));
      // Undeclared exception!
      try { 
        GJChronology.getInstance(dateTimeZone0, (-29411078400000L), 20);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 20
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      gJChronology0.assemble(assembledChronology_Fields0);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      gJChronology0.julianToGregorianByYear(1123200000L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      long long0 = gJChronology0.julianToGregorianByYear(28857600000L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(27734400000L, long0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      long long0 = gJChronology0.julianToGregorianByYear(3600000L);
      assertEquals((-1119600000L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      long long0 = gJChronology0.julianToGregorianByWeekyear(1209600000L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      long long0 = gJChronology0.julianToGregorianByWeekyear(63072000000L);
      assertEquals(62467200000L, long0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      long long0 = gJChronology0.julianToGregorianByWeekyear(0);
      assertEquals((-1209600000L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      long long0 = gJChronology0.gregorianToJulianByYear(0L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1123200000L, long0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      gJChronology0.gregorianToJulianByYear((-12219292800000L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      long long0 = gJChronology0.gregorianToJulianByWeekyear((-1209600000L));
      assertEquals(0L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      long long0 = gJChronology0.gregorianToJulianByWeekyear((-1));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1209599999L, long0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      long long0 = gJChronology0.gregorianToJulianByWeekyear((-12219292800000L));
      assertEquals((-12218688000000L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      Interval interval0 = new Interval(0L, 0L);
      DateTime dateTime0 = interval0.getStart();
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0);
      Instant instant0 = gJChronology1.getGregorianCutover();
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0L, instant0.getMillis());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      long long0 = gJChronology0.getDateTimeMillis(3127, 5, 5, 8, 5, 8, 2);
      assertEquals(36522086708002L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTime dateTime0 = DateTime.now((Chronology) buddhistChronology0);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime0, 1);
      long long0 = gJChronology0.getDateTimeMillis(948, 1, 28, 948);
      assertEquals((-32248454399052L), long0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      // Undeclared exception!
      try { 
        gJChronology0.gregorianToJulianByYear(9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 292278994 for year must be in the range [-292269054,292272992]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 0
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      // Undeclared exception!
      try { 
        gJChronology0.assemble((AssembledChronology.Fields) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.GJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      long long0 = gJChronology0.getDateTimeMillis(1, 1, 1, 0, 0, 0, 0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-62135769600000L), long0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      try { 
        gJChronology0.getDateTimeMillis(53, 564, (-2147483647), 30, 3, (-3070), (-3070));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 30 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      try { 
        gJChronology0.getDateTimeMillis(500, 2, 2, 601, 2, (-1734), 601);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 601 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      MonthDay monthDay0 = MonthDay.now((Chronology) gJChronology0);
      monthDay0.toLocalDate(4412);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(14, monthDay0.getDayOfMonth());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      GJChronology gJChronology1 = (GJChronology)gJChronology0.withZone(dateTimeZone0);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-6));
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTime dateTime0 = DateTime.now((Chronology) buddhistChronology0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0, 1);
      LocalDateTime localDateTime0 = dateTime0.toLocalDateTime();
      localDateTime0.withWeekyear(41);
      long long0 = gJChronology0.set(localDateTime0, 1);
      assertEquals(18527862081326L, long0);
      
      GJChronology gJChronology1 = GJChronology.getInstance();
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      gJChronology0.getGregorianCutover();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      int int0 = gJChronology0.getMinimumDaysInFirstWeek();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(97);
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 97);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(gJChronology0);
      long long0 = dateTimeField0.addWrapField(2601L, (-3617));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(18316802601L, long0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(97);
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 97);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(gJChronology0);
      long long0 = dateTimeField0.addWrapField((-3291L), 761);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-18489603291L), long0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      MutableDateTime mutableDateTime0 = new MutableDateTime(1295L);
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(gJChronology1);
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0);
      skipDateTimeField0.getDifferenceAsLong((-1427L), 5);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(819);
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 819);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(gJChronology0);
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0);
      long long0 = skipDateTimeField0.getDifferenceAsLong(3, (-2391L));
      assertEquals(0L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(843);
      Years years0 = Years.TWO;
      MutableDateTime mutableDateTime0 = new MutableDateTime(2434L);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      long long0 = gJChronology0.add((ReadablePeriod) years0, (long) 1, 1);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(61948800001L, long0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(10);
      MutableDateTime mutableDateTime0 = new MutableDateTime(2723L);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      Years years0 = Years.THREE;
      long long0 = gJChronology0.add((ReadablePeriod) years0, (long) 4, (-1570));
      assertEquals((-148636339199996L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(843);
      Years years0 = Years.ZERO;
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 843);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      int[] intArray0 = gJChronology0.get((ReadablePeriod) years0, (-115121001600003L), 73281320L);
      assertArrayEquals(new int[] {3648}, intArray0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      MutablePeriod mutablePeriod0 = new MutablePeriod(80, 3969, 28, 29, (-1279), (-1279), 80, 410);
      int[] intArray0 = gJChronology0.get((ReadablePeriod) mutablePeriod0, (long) (-1279), (-79301721600000L));
      assertArrayEquals(new int[] {(-2513), (-11), (-2), 0, (-23), (-59), (-58), (-721)}, intArray0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-267));
      Years years0 = Years.TWO;
      MutableDateTime mutableDateTime0 = new MutableDateTime((-115121001600262L));
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      int[] intArray0 = gJChronology0.get((ReadablePeriod) years0, (long) 5, (-115121001600262L));
      assertArrayEquals(new int[] {(-3649)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(843);
      Years years0 = Years.ZERO;
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 843);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      int[] intArray0 = gJChronology0.get((ReadablePeriod) years0, (-115121001600000L), 73281320L);
      assertArrayEquals(new int[] {3648}, intArray0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(gJChronology0);
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0);
      long long0 = skipDateTimeField0.getDifferenceAsLong((-661L), 97L);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-292269056), skipDateTimeField0.getMinimumValue());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2262));
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(gJChronology0);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, dateTimeZone0);
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(zonedChronology0, dateTimeField0);
      long long0 = skipDateTimeField0.roundHalfFloor((-1207L));
      assertEquals(2262L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(845);
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(gJChronology0);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, dateTimeZone0);
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(zonedChronology0, dateTimeField0);
      long long0 = skipDateTimeField0.roundHalfFloor(86400000L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1123199155L, long0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, 0L, 4);
      DateTimeField dateTimeField0 = gJChronology0.dayOfMonth();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0);
      long long0 = skipDateTimeField0.roundHalfFloor((-1568L));
      assertEquals(0L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(815);
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 819);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(gJChronology0);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, dateTimeZone0);
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(zonedChronology0, dateTimeField0);
      long long0 = skipDateTimeField0.roundHalfFloor(815);
      assertEquals(978307199185L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (-2743L), 2);
      DateTime dateTime0 = new DateTime((-2743L), (Chronology) gJChronology0);
      DateTime dateTime1 = dateTime0.withTimeAtStartOfDay();
      assertEquals(2, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-86400002L), dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.dayOfYear();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0);
      LocalDate localDate0 = new LocalDate(604800L);
      int[] intArray0 = new int[3];
      intArray0[0] = 15;
      intArray0[1] = 28;
      // Undeclared exception!
      try { 
        skipDateTimeField0.getMaximumValue((ReadablePartial) localDate0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfMonth must be in the range [1,31]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(gJChronology0);
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0);
      int int0 = skipDateTimeField0.getMinimumValue((-2919L));
      assertEquals(1, int0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) null);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) mutableDateTime0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(gJChronology0);
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0);
      int int0 = skipDateTimeField0.getMinimumValue((-2074L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(gJChronology0);
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0);
      int int0 = skipDateTimeField0.getMinimumValue((long) 3);
      assertEquals(0, int0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(815);
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 819);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(gJChronology0);
      dateTimeField0.getLeapAmount(4);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(815);
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(gJChronology0);
      dateTimeField0.getLeapAmount(4);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(815);
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 819);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(gJChronology0);
      dateTimeField0.isLeap(1421L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(815);
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 819);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(gJChronology0);
      dateTimeField0.isLeap((-649L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.centuryOfEra();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(islamicChronology0, dateTimeField0);
      long long0 = skipDateTimeField0.set((-52731647999995L), "9");
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-33797087999995L), long0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = gJChronology0.dayOfMonth();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField((Chronology) null, dateTimeField0);
      long long0 = skipDateTimeField0.set((-12219292800000L), "9");
      assertEquals((-12219811200000L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = gJChronology0.hourOfDay();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(islamicChronology0, dateTimeField0);
      long long0 = skipDateTimeField0.set(349L, "9");
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(32400349L, long0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-86399999), 1, 883, 5, 2);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(date0);
      long long0 = gJChronology0.set(localDateTime0, 0);
      assertEquals((-12219292800000L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Instant instant0 = new Instant((-1838L));
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime((Chronology) buddhistChronology0);
      DateTime dateTime0 = mutableDateTime0.toDateTimeISO();
      LocalDateTime localDateTime0 = dateTime0.toLocalDateTime();
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0);
      // Undeclared exception!
      try { 
        gJChronology0.set(localDateTime0, 1003L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 31 for dayOfMonth is not supported
         //
         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((-1600L));
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) mutableDateTime0);
      MonthDay monthDay0 = new MonthDay((-2494L), (Chronology) gJChronology0);
      // Undeclared exception!
      try { 
        gJChronology0.set(monthDay0, (-1600L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 18 for dayOfMonth is not supported
         //
         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-468));
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) (-468));
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      MonthDay monthDay0 = new MonthDay((long) (-468), (Chronology) gJChronology0);
      // Undeclared exception!
      try { 
        gJChronology0.set(monthDay0, (-86400000L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 18 for dayOfMonth is not supported
         //
         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      MonthDay monthDay0 = new MonthDay((-2089L), (Chronology) gJChronology0);
      Period period0 = new Period(1, 0, (PeriodType) null, gJChronology0);
      MonthDay monthDay1 = monthDay0.minus(period0);
      assertEquals(31, monthDay1.getDayOfMonth());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Locale locale0 = Locale.JAPAN;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(gJChronology0);
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0);
      String string0 = skipDateTimeField0.getAsShortText(1L, locale0);
      assertEquals("1", string0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      MutableDateTime mutableDateTime0 = new MutableDateTime(1295L);
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      Locale locale0 = Locale.UK;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(gJChronology1);
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0);
      String string0 = skipDateTimeField0.getAsShortText((long) 1, locale0);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertEquals("Dec", string0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(815);
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 819);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      Locale locale0 = Locale.GERMAN;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(gJChronology0);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, dateTimeZone0);
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(zonedChronology0, dateTimeField0);
      DurationField durationField0 = skipDateTimeField0.getDurationField();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, dateTimeZone0, durationField0, durationField0, durationField0);
      String string0 = zonedChronology_ZonedDateTimeField0.getAsText((long) 0, locale0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("Januar", string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.minuteOfDay();
      Locale locale0 = Locale.GERMAN;
      String string0 = dateTimeField0.getAsText((-79269407999052L), locale0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) gJChronology0);
      localDateTime0.minusHours((-5984));
      DateTime dateTime0 = localDateTime0.toDateTime((DateTimeZone) null);
      DateTime dateTime1 = dateTime0.withTimeAtStartOfDay();
      GJChronology gJChronology1 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime1);
      assertNotSame(gJChronology1, gJChronology0);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Instant instant0 = new Instant();
      DateTime dateTime0 = instant0.toDateTime((DateTimeZone) fixedDateTimeZone0);
      MutableDateTime mutableDateTime0 = dateTime0.toMutableDateTime();
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) mutableDateTime0, 5);
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[UTC,cutover=2014-02-14T20:21:21.320Z,mdfw=5]", string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(31536000000L);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[Etc/UTC,cutover=1971-01-01]", string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[UTC]", string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      GJChronology gJChronology1 = (GJChronology)gJChronology0.withUTC();
      boolean boolean0 = gJChronology1.equals(gJChronology0);
      assertFalse(boolean0);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1426);
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      MutableDateTime mutableDateTime0 = MutableDateTime.parse("", dateTimeFormatter0);
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      boolean boolean0 = gJChronology0.equals(gJChronology1);
      assertFalse(boolean0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      boolean boolean0 = gJChronology0.equals(assembledChronology_Fields0);
      assertFalse(boolean0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      boolean boolean0 = gJChronology0.equals(gJChronology0);
      assertTrue(boolean0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 1);
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      boolean boolean0 = gJChronology0.equals(gJChronology1);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(752);
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 752);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      try { 
        gJChronology0.getDateTimeMillis(2275, 2, 29, 4, 5, 1, 29);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 29 for dayOfMonth must be in the range [1,28]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      try { 
        gJChronology0.getDateTimeMillis(2, 2, 29, 0, 1, 1, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 29 for dayOfMonth must be in the range [1,28]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      try { 
        gJChronology0.getDateTimeMillis(0, (-1), 5062500, (-976), 5062500, 1, 24);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -976 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(815);
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 819);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate(mutableDateTime0, gJChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Specified date does not exist
         //
         verifyException("org.joda.time.chrono.GJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(10);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTime dateTime0 = DateTime.now((Chronology) buddhistChronology0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0, 1);
      MonthDay monthDay0 = new MonthDay(1, 10, gJChronology0);
      LocalDate localDate0 = monthDay0.toLocalDate(354);
      assertEquals(3, localDate0.size());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2);
      MutableDateTime mutableDateTime0 = new MutableDateTime((-12219292800000L));
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      long long0 = gJChronology0.getDateTimeMillis(4676, 2, 4, 1);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(85396031999999L, long0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      try { 
        gJChronology0.getDateTimeMillis(1694, 1694, 25650000, (-3137));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -3137 for millisOfDay must be in the range [0,86399999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      GJChronology gJChronology1 = (GJChronology)gJChronology0.withZone((DateTimeZone) null);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(15271875);
      // Undeclared exception!
      try { 
        GJChronology.getInstance(dateTimeZone0, (-12219292800000L), 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 10
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Months months0 = Months.TWELVE;
      LocalTime localTime0 = LocalTime.now((Chronology) gJChronology0);
      LocalTime localTime1 = localTime0.withPeriodAdded(months0, (-439));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertTrue(localTime1.equals((Object)localTime0));
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(buddhistChronology0);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gregorianChronology0, dateTimeField0);
      long long0 = skipDateTimeField0.getDifferenceAsLong((-530L), (-530L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = gJChronology0.dayOfYear();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0);
      long long0 = skipDateTimeField0.getDifferenceAsLong(79L, (-1427L));
      assertEquals(0L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(gJChronology0);
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0);
      Locale locale0 = new Locale("knm?3-");
      String string0 = skipDateTimeField0.getAsText(0, locale0);
      assertNull(string0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 0, 3);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      LocalDateTime localDateTime0 = new LocalDateTime((long) 4, (Chronology) lenientChronology0);
      DateTime dateTime0 = localDateTime0.toDateTime(dateTimeZone0);
      assertEquals(3, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(4L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      MonthDay monthDay0 = new MonthDay((-2089L), (Chronology) gJChronology0);
      Period period0 = new Period((-2089L), (-12219292800000L), (PeriodType) null, gJChronology0);
      MonthDay monthDay1 = monthDay0.minus(period0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(2, monthDay1.getDayOfMonth());
      assertEquals(3, monthDay1.getMonthOfYear());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.minuteOfDay();
      Locale locale0 = Locale.US;
      dateTimeField0.getMaximumTextLength(locale0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(819);
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 819);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(gJChronology0);
      // Undeclared exception!
      try { 
        dateTimeField0.getDifference(632L, 1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Locale locale0 = Locale.GERMAN;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(gJChronology0);
      dateTimeField0.getMaximumShortTextLength(locale0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = gJChronology0.yearOfEra();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0);
      MonthDay monthDay0 = new MonthDay((Chronology) gJChronology0);
      int[] intArray0 = new int[9];
      // Undeclared exception!
      try { 
        skipDateTimeField0.addWrapField((ReadablePartial) monthDay0, 1, intArray0, (-1946));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(815);
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 819);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(gJChronology0);
      Locale locale0 = Locale.forLanguageTag("\"bgCz@[5cl$>AOIHw");
      // Undeclared exception!
      try { 
        dateTimeField0.getAsShortText((-4909), locale0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4909
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 2, 2);
      StrictChronology strictChronology0 = StrictChronology.getInstance(gJChronology0);
      MonthDay monthDay0 = new MonthDay(280L, (Chronology) strictChronology0);
      MonthDay monthDay1 = monthDay0.withDayOfMonth(2);
      assertEquals(2, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, monthDay1.getMonthOfYear());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      // Undeclared exception!
      try { 
        gJChronology0.gregorianToJulianByWeekyear(31536000000L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 53 for weekOfWeekyear must be in the range [1,52]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DateTime dateTime0 = new DateTime((Object) null, (DateTimeZone) null);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime0);
      gJChronology0.hashCode();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = gJChronology0.centuryOfEra();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0);
      long long0 = skipDateTimeField0.set(1209600000L, "9");
      assertEquals((-34711027200000L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      // Undeclared exception!
      try { 
        gJChronology0.julianToGregorianByWeekyear((-62135769538999L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 53 for weekOfWeekyear must be in the range [1,52]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
}
