/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 10:52:18 GMT 2021
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.YearMonth;
import org.joda.time.chrono.AssembledChronology;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.field.MillisDurationField;
import org.joda.time.field.OffsetDateTimeField;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GJChronology_ESTest extends GJChronology_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(4);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 5, 2);
      DateTimeField dateTimeField0 = gJChronology0.year();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-38));
      offsetDateTimeField0.getDifferenceAsLong(0, 1);
      assertEquals(292278955, offsetDateTimeField0.getMaximumValue());
      assertEquals((-292269093), offsetDateTimeField0.getMinimumValue());
      assertEquals(2, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = gJChronology0.year();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-505));
      long long0 = offsetDateTimeField0.getDifferenceAsLong((-12219292800000L), (-12219292800000L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0L, long0);
      assertEquals(292278488, offsetDateTimeField0.getMaximumValue());
      assertEquals((-292269560), offsetDateTimeField0.getMinimumValue());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Period period0 = Period.minutes((-2447));
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      DateTime dateTime0 = new DateTime((long) (-2447), (Chronology) gJChronology0);
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0);
      int[] intArray0 = gJChronology1.get((ReadablePeriod) period0, (-2564L), (long) (-2447));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 117}, intArray0);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      LocalDate localDate0 = new LocalDate((-12219292800000L), (Chronology) gJChronology0);
      Period period0 = new Period((-12219292800000L), (PeriodType) null);
      LocalDate localDate1 = localDate0.withPeriodAdded(period0, 767);
      assertNotSame(localDate1, localDate0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Period period0 = Period.seconds(2);
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (long) 0, 3);
      int[] intArray0 = gJChronology1.get((ReadablePeriod) period0, (-79240032000000L), 21859200000L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertArrayEquals(new int[] {2511, 8, 1, 3, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Period period0 = new Period(1, 1, 1, 1, 1, 1, 1, 1);
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 1, (Chronology) buddhistChronology0);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) mutableDateTime0);
      int[] intArray0 = gJChronology0.get((ReadablePeriod) period0, 25142400001L, (long) 0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertArrayEquals(new int[] {0, (-10), 1, 5, 23, 59, 59, 999}, intArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 1);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) mutableDateTime0, 4);
      Period period0 = Period.days(0);
      int[] intArray0 = gJChronology0.get((ReadablePeriod) period0, (long) 1, (-2172L));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, (-2), (-173)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 1);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      DateTimeField dateTimeField0 = gJChronology0.clockhourOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 5);
      mutableDateTime0.setRounding((DateTimeField) offsetDateTimeField0, 2);
      assertEquals(3600000L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      YearMonth yearMonth0 = new YearMonth((-471L), (Chronology) gJChronology0);
      // Undeclared exception!
      try { 
        yearMonth0.withMonthOfYear(14);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 14 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (long) 0, 4);
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      MonthDay monthDay0 = MonthDay.parse("", dateTimeFormatter0);
      monthDay0.withChronologyRetainFields(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.era();
      dateTimeField0.getLeapAmount((-12219292800000L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.millisOfSecond();
      dateTimeField0.isLeap((-1543L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.millisOfSecond();
      Locale locale0 = Locale.KOREA;
      // Undeclared exception!
      try { 
        dateTimeField0.set(0L, "", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"\" for millisOfSecond is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 1, (Chronology) buddhistChronology0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0, 1);
      LocalDate localDate0 = new LocalDate(1036800000L, (Chronology) gJChronology0);
      // Undeclared exception!
      try { 
        Minutes.minutesBetween((ReadablePartial) localDate0, (ReadablePartial) localDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1970 for year is not supported
         //
         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      MutableDateTime mutableDateTime0 = new MutableDateTime((-12219638400000L), (Chronology) gJChronology0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      LocalDate localDate0 = new LocalDate((-12219638400000L), (Chronology) gJChronology1);
      Minutes.minutesBetween((ReadablePartial) localDate0, (ReadablePartial) localDate0);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertFalse(gJChronology0.equals((Object)gJChronology1));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 1, (Chronology) buddhistChronology0);
      String string0 = mutableDateTime0.toString("aE");
      assertEquals("AMThu", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      MutableDateTime mutableDateTime0 = new MutableDateTime(1000000L);
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0, 5);
      String string0 = gJChronology1.toString();
      assertEquals("GJChronology[UTC,cutover=1970-01-01T00:16:40.000Z,mdfw=5]", string0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 0, 0);
      LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime(dateTimeZone0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0, 1);
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[Etc/UTC,cutover=0000-12-31T20:21:21.320Z,mdfw=1]", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) (-911), (Chronology) buddhistChronology0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0, 3);
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      boolean boolean0 = gJChronology0.equals(gJChronology1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(4965);
      DateTime dateTime0 = new DateTime();
      DateTime dateTime1 = dateTime0.withWeekyear(720);
      Duration duration0 = new Duration(1239L, 1239L);
      DateTime dateTime2 = dateTime1.plus((ReadableDuration) duration0);
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime2);
      boolean boolean0 = gJChronology0.equals(gJChronology1);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertFalse(boolean0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) mutableDateTime0);
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) gJChronology0);
      DateTime dateTime0 = localDateTime0.toDateTime((DateTimeZone) fixedDateTimeZone0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1392409281320L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      try { 
        gJChronology0.getDateTimeMillis(1793, 2, 450, 2772, 29, (-729), (-729));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2772 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      try { 
        gJChronology0.getDateTimeMillis((-1000), (-2011), 2776, 16, (-1000), (-192), (-1768));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1000 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      Instant instant0 = GJChronology.DEFAULT_CUTOVER;
      LocalDateTime localDateTime0 = new LocalDateTime(instant0, gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      GJChronology gJChronology1 = (GJChronology)gJChronology0.withUTC();
      assertNotSame(gJChronology1, gJChronology0);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 1);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) mutableDateTime0, 4);
      long long0 = gJChronology0.julianToGregorianByYear(1123200000L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      long long0 = gJChronology0.julianToGregorianByYear(31083597720000L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(31081869720000L, long0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateTime dateTime0 = DateTime.parse("", dateTimeFormatter0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0, 1);
      long long0 = gJChronology0.julianToGregorianByYear((-12219292800000L));
      assertEquals((-12220156800000L), long0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      long long0 = gJChronology0.julianToGregorianByWeekyear(31536000000L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(30326400000L, long0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      long long0 = gJChronology0.julianToGregorianByWeekyear(1324L);
      assertEquals((-1209598676L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      long long0 = gJChronology0.gregorianToJulianByYear(1439L);
      assertEquals(1123201439L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      long long0 = gJChronology0.gregorianToJulianByYear((-12219292800000L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-12218428800000L), long0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      long long0 = gJChronology0.gregorianToJulianByWeekyear((-61247059199996L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-61247059199996L), long0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateTime dateTime0 = DateTime.parse("", dateTimeFormatter0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0, 1);
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertEquals(0L, instant0.getMillis());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Instant instant0 = new Instant(365L);
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      Instant instant1 = gJChronology0.getGregorianCutover();
      assertSame(instant1, instant0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 1, (Chronology) buddhistChronology0);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) mutableDateTime0);
      long long0 = gJChronology0.getDateTimeMillis(4129, 4, 2, 5, 0, 1, 10);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(68139378001010L, long0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      long long0 = gJChronology0.getDateTimeMillis(3584, 1, 1, 1);
      assertEquals(50932886400001L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 1);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) mutableDateTime0, 4);
      // Undeclared exception!
      try { 
        gJChronology0.julianToGregorianByWeekyear((-62135769600000L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 53 for weekOfWeekyear must be in the range [1,52]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      // Undeclared exception!
      try { 
        gJChronology0.gregorianToJulianByYear((-62135765938999L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for year is not supported
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 0, 0);
      LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime(dateTimeZone0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0, 5);
      // Undeclared exception!
      try { 
        gJChronology0.gregorianToJulianByWeekyear(5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 53 for weekOfWeekyear must be in the range [1,52]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      MonthDay monthDay0 = MonthDay.now();
      LocalDate localDate0 = monthDay0.toLocalDate((-1976));
      LocalTime localTime0 = LocalTime.now();
      DateTime dateTime0 = localDate0.toDateTime(localTime0);
      DateTime dateTime1 = dateTime0.withDayOfWeek(1);
      // Undeclared exception!
      try { 
        GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 29 for dayOfMonth must be in the range [1,28]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      // Undeclared exception!
      try { 
        GJChronology.getInstance(dateTimeZone0, 0L, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: -1
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 1, (Chronology) buddhistChronology0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      try { 
        gJChronology0.getDateTimeMillis((-291), (-258), 2070, (-4252));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -4252 for millisOfDay must be in the range [0,86399999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      // Undeclared exception!
      try { 
        gJChronology0.assemble((AssembledChronology.Fields) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.GJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((-12219292800010L));
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.millisOfSecond();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 2);
      mutableDateTime0.setRounding((DateTimeField) offsetDateTimeField0, 3);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-12219292800010L), mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 1);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) mutableDateTime0);
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      gJChronology0.assemble(assembledChronology_Fields0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (-62135593138999L), 5);
      long long0 = gJChronology0.getDateTimeMillis(2, 2, 4, 4, 2, 5, 0);
      assertEquals((-62101108675000L), long0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Instant instant0 = new Instant(365L);
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      long long0 = gJChronology0.getDateTimeMillis(2, 1, 3, 2103);
      assertEquals((-62104060797897L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 0, 0);
      LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime(dateTimeZone0);
      // Undeclared exception!
      try { 
        GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0, 80);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 80
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      LocalDateTime localDateTime0 = new LocalDateTime();
      DateTime dateTime0 = localDateTime0.toDateTime(dateTimeZone0);
      // Undeclared exception!
      try { 
        GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 0
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Instant instant0 = new Instant();
      DateTimeZone dateTimeZone0 = instant0.getZone();
      // Undeclared exception!
      try { 
        GJChronology.getInstance(dateTimeZone0, (ReadableInstant) null, (-3564));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: -3564
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      gJChronology0.assemble(assembledChronology_Fields0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      int int0 = gJChronology0.getMinimumDaysInFirstWeek();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(4);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      DateTimeField dateTimeField0 = gJChronology0.year();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 3);
      long long0 = offsetDateTimeField0.getDifferenceAsLong(1120L, (-2183L));
      assertEquals((-292269052), offsetDateTimeField0.getMinimumValue());
      assertEquals(0L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.centuryOfEra();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1182);
      long long0 = offsetDateTimeField0.getDifferenceAsLong(0, 1000000000000000L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-316L), long0);
      assertEquals(2923972, offsetDateTimeField0.getMaximumValue());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 0, 1);
      Months months0 = Months.TWO;
      long long0 = gJChronology0.add((ReadablePeriod) months0, (-1542L), 1);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(4233598458L, long0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Months months0 = Months.ELEVEN;
      MutableDateTime mutableDateTime0 = new MutableDateTime((-173710396799995L), (Chronology) gJChronology0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(14, 4);
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      LocalDate localDate0 = new LocalDate((-173710396799995L), (Chronology) gJChronology1);
      LocalDate localDate1 = localDate0.plus(months0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotSame(localDate1, localDate0);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      Period period0 = Period.minutes(1);
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 1, (Chronology) buddhistChronology0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0, 4);
      int[] intArray0 = gJChronology0.get((ReadablePeriod) period0, (-2147483648L), 1514L);
      assertArrayEquals(new int[] {0, 1, 0, (-5), (-3), (-28), (-34), (-838)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      Period period0 = Period.minutes(1);
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 1, (Chronology) buddhistChronology0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0, 4);
      int[] intArray0 = gJChronology0.get((ReadablePeriod) period0, 0L, (-12219292800000L));
      assertArrayEquals(new int[] {(-387), (-2), (-2), 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 0, 1);
      YearMonth yearMonth0 = YearMonth.now((Chronology) gJChronology0);
      YearMonth yearMonth1 = yearMonth0.plusMonths((-584));
      assertEquals(6, yearMonth1.getMonthOfYear());
      assertEquals(1965, yearMonth1.getYear());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Period period0 = Period.seconds(2);
      int[] intArray0 = gJChronology0.get((ReadablePeriod) period0, (-79240032000000L), 21859200000L);
      assertArrayEquals(new int[] {2511, 8, 1, 3, 0, 0, 0, 0}, intArray0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 1, (Chronology) buddhistChronology0);
      mutableDateTime0.setWeekyear(15);
      assertEquals((-78829631999999L), mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(4);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 5, 2);
      DateTimeField dateTimeField0 = gJChronology0.year();
      long long0 = dateTimeField0.roundCeiling(0);
      assertEquals(1123199996L, long0);
      assertEquals(2, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      MutableDateTime mutableDateTime0 = new MutableDateTime((-12219292800000L));
      DateTimeField dateTimeField0 = gJChronology0.clockhourOfDay();
      mutableDateTime0.setRounding(dateTimeField0, 2);
      assertEquals((-12219292800000L), mutableDateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      DateTimeField dateTimeField0 = gJChronology0.year();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-2475));
      long long0 = offsetDateTimeField0.roundHalfFloor(1392336000000L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-292271530), offsetDateTimeField0.getMinimumValue());
      assertEquals(1389654000000L, long0);
      assertEquals(292276518, offsetDateTimeField0.getMaximumValue());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      MutableDateTime mutableDateTime0 = new MutableDateTime((-61341832654000L), (Chronology) gJChronology0);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology1 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) mutableDateTime0);
      assertNotSame(gJChronology1, gJChronology0);
      
      LocalDate localDate0 = new LocalDate((-61341832654000L), (Chronology) gJChronology1);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      LocalDate localDate0 = new LocalDate((long) 4, (Chronology) gJChronology0);
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 5;
      intArray0[2] = 3;
      gJChronology0.validate(localDate0, intArray0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 1, (Chronology) buddhistChronology0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      MonthDay monthDay0 = new MonthDay(86399999L);
      monthDay0.withChronologyRetainFields(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.centuryOfEra();
      dateTimeField0.getLeapAmount(6201);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.centuryOfEra();
      dateTimeField0.getLeapAmount((-62040988800000L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(4);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 5, 2);
      DateTimeField dateTimeField0 = gJChronology0.year();
      dateTimeField0.isLeap(1);
      assertEquals(2, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(4);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 5, 2);
      DateTimeField dateTimeField0 = gJChronology0.year();
      dateTimeField0.isLeap((-836));
      assertEquals(2, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(5);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = gJChronology0.year();
      // Undeclared exception!
      try { 
        dateTimeField0.set((-12244089599985L), "org.joda.time.chrono.GJChronology$ImpreciseCutoverField");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"org.joda.time.chrono.GJChronology$ImpreciseCutoverField\" for year is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 1);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) mutableDateTime0, 4);
      LocalDate localDate0 = new LocalDate((long) 4, (Chronology) gJChronology0);
      // Undeclared exception!
      try { 
        localDate0.toDateTimeAtCurrentTime((DateTimeZone) fixedDateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 19 for dayOfMonth is not supported
         //
         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      LocalDate localDate0 = new LocalDate((-12219292800000L), (Chronology) gJChronology0);
      Minutes.minutesBetween((ReadablePartial) localDate0, (ReadablePartial) localDate0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(4);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 5, 2);
      LocalDateTime localDateTime0 = new LocalDateTime(1L);
      // Undeclared exception!
      try { 
        gJChronology0.set(localDateTime0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1 for dayOfMonth is not supported
         //
         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      YearMonth yearMonth0 = new YearMonth((Chronology) gJChronology0);
      Period period0 = Period.seconds(2049);
      YearMonth yearMonth1 = yearMonth0.plus(period0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(2014, yearMonth1.getYear());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Instant instant0 = gJChronology0.getGregorianCutover();
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime((Chronology) gJChronology0);
      mutableDateTime0.toString("aE");
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      MutableDateTime mutableDateTime0 = new MutableDateTime((-62135609918680L), (Chronology) gJChronology0);
      String string0 = mutableDateTime0.toString("aE");
      assertEquals("PMSun", string0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 86400000L, 2);
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[UTC,cutover=1970-01-02,mdfw=2]", string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[+01:00,cutover=2014-02-14T20:21:21.320Z]", string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[UTC]", string0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      GJChronology gJChronology1 = GJChronology.getInstance();
      boolean boolean0 = gJChronology1.equals(gJChronology0);
      assertFalse(boolean0);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 1, (Chronology) buddhistChronology0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0, 1);
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      boolean boolean0 = gJChronology1.equals(gJChronology0);
      assertFalse(boolean0);
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(4965);
      DateTime dateTime0 = new DateTime();
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0);
      boolean boolean0 = gJChronology0.equals(gJChronology1);
      assertFalse(boolean0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      boolean boolean0 = gJChronology0.equals(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((-12219292800010L));
      GJChronology gJChronology0 = GJChronology.getInstance();
      boolean boolean0 = gJChronology0.equals(mutableDateTime0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      long long0 = gJChronology0.getDateTimeMillis(1, 2, 3, 1, 18, 5, 1);
      assertEquals((-62132913714999L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(29, 2, 29, 20, 20, 29, gJChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 29 for dayOfMonth must be in the range [1,28]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime((-366), 2, (-1007), 1, 2867, 3, 2, gJChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2867 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(1889, 2, 29, 2, 2, 29, gJChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 29 for dayOfMonth must be in the range [1,28]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      try { 
        gJChronology0.getDateTimeMillis(2, 24, 3, 450, (-759), (-2158), (-2231));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 450 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 1, (Chronology) buddhistChronology0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      YearMonth yearMonth0 = new YearMonth((long) 1, (Chronology) gJChronology0);
      // Undeclared exception!
      try { 
        yearMonth0.toInterval();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Specified date does not exist
         //
         verifyException("org.joda.time.chrono.GJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      YearMonth yearMonth0 = new YearMonth((-471L), (Chronology) gJChronology0);
      Interval interval0 = yearMonth0.toInterval((DateTimeZone) null);
      assertEquals((-2678400000L), interval0.getStartMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0L, interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      GJChronology gJChronology1 = (GJChronology)gJChronology0.withZone((DateTimeZone) null);
      assertNotSame(gJChronology1, gJChronology0);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(4);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 5, 2);
      LocalDateTime localDateTime0 = new LocalDateTime(1392409281324L, (Chronology) gJChronology0);
      DateTime dateTime0 = localDateTime0.toDateTime();
      assertEquals(1392409281328L, dateTime0.getMillis());
      assertEquals(2, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (-12219292800000L), 2);
      assertEquals(2, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      Period period0 = Period.hours(1);
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 1, (Chronology) buddhistChronology0);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) mutableDateTime0);
      int[] intArray0 = gJChronology0.get((ReadablePeriod) period0, 25142400002L, (long) 0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertArrayEquals(new int[] {0, (-10), 1, 5, 23, 59, 59, 998}, intArray0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, dateTimeZone0);
      LocalDateTime localDateTime0 = new LocalDateTime();
      MonthDay monthDay0 = new MonthDay(localDateTime0, zonedChronology0);
      MonthDay monthDay1 = monthDay0.plusDays(1929);
      assertEquals(28, monthDay1.getDayOfMonth());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.millisOfSecond();
      int int0 = dateTimeField0.getDifference(1, 86397005L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-86397004), int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.millisOfSecond();
      Locale locale0 = Locale.CHINESE;
      dateTimeField0.getMaximumShortTextLength(locale0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.millisOfSecond();
      LocalDate localDate0 = new LocalDate((-1L));
      dateTimeField0.getMinimumValue((ReadablePartial) localDate0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      MonthDay monthDay0 = new MonthDay(2, 29);
      // Undeclared exception!
      try { 
        monthDay0.withChronologyRetainFields(gJChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 29 for dayOfMonth must not be larger than 28
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.millisOfSecond();
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Locale locale0 = Locale.ROOT;
      String string0 = dateTimeField0.getAsShortText((ReadablePartial) localDateTime0, locale0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("320", string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
      DateTime dateTime0 = new DateTime(1, 0, 93, 0, 93, lenientChronology0);
      assertEquals((-79234756020000L), dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      long long0 = gJChronology0.gregorianToJulianByWeekyear(576L);
      assertEquals(1209600576L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(5);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 5, 2);
      DateTimeField dateTimeField0 = gJChronology0.year();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-11));
      offsetDateTimeField0.getDifferenceAsLong(4, (-1L));
      assertEquals(2, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(292278982, offsetDateTimeField0.getMaximumValue());
      assertEquals((-292269066), offsetDateTimeField0.getMinimumValue());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((-12219292800000L));
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(8);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      DateTimeField dateTimeField0 = gJChronology0.year();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
      long long0 = offsetDateTimeField0.getDifferenceAsLong((-122216096318680L), 3250L);
      assertEquals((-3873L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(292278994, offsetDateTimeField0.getMaximumValue());
      assertEquals((-292269054), offsetDateTimeField0.getMinimumValue());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      gJChronology0.hashCode();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(5);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = gJChronology0.year();
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      Locale locale0 = Locale.TAIWAN;
      String string0 = dateTimeField0.getAsText((ReadablePartial) localDateTime0, locale0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("2014", string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 1);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) mutableDateTime0);
      DateTimeField dateTimeField0 = gJChronology0.dayOfMonth();
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, fixedDateTimeZone0, millisDurationField0, millisDurationField0, millisDurationField0);
      // Undeclared exception!
      try { 
        zonedChronology_ZonedDateTimeField0.set((long) 1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"\" for dayOfMonth is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 1);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) mutableDateTime0, 3);
      long long0 = gJChronology0.julianToGregorianByWeekyear(1209600000L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      LocalDate localDate0 = new LocalDate(520L, (Chronology) gJChronology0);
      Period period0 = Period.days(0);
      LocalDate localDate1 = localDate0.plus(period0);
      assertSame(localDate1, localDate0);
  }
}
