/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 04:18:44 GMT 2021
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationField;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.YearMonth;
import org.joda.time.chrono.AssembledChronology;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.field.OffsetDateTimeField;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GJChronology_ESTest extends GJChronology_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = gJChronology0.centuryOfEra();
      dateTimeField0.getMinimumValue((long) 1);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.centuryOfEra();
      long long0 = dateTimeField0.getDifferenceAsLong((-12219292800000L), (-12219292800000L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 1208L, 1);
      Period period0 = new Period(868, 95, 868, 868, 868, 868, 868, 1);
      int[] intArray0 = gJChronology0.get((ReadablePeriod) period0, 1208L, 1692L);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 484}, intArray0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Months months0 = Months.ELEVEN;
      int[] intArray0 = gJChronology0.get((ReadablePeriod) months0, 1969L, (-12219292800000L));
      assertArrayEquals(new int[] {(-4646)}, intArray0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      Period period0 = new Period((-2324), (-2324), 4153, (-2139127679), 10, 0, (-2324), (-4191));
      int[] intArray0 = gJChronology0.get((ReadablePeriod) period0, 31536000000L, (-1120L));
      assertArrayEquals(new int[] {(-1), 0, 0, 0, 0, 0, (-1), (-120)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, 1036800000L, 1);
      MonthDay monthDay0 = new MonthDay(1, 1, gJChronology0);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 3801600000L, 1);
      MonthDay monthDay0 = new MonthDay(3801600000L);
      monthDay0.withChronologyRetainFields(gJChronology0);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      DateTimeField dateTimeField0 = gJChronology0.centuryOfEra();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, dateTimeZone0, (DurationField) null, (DurationField) null, (DurationField) null);
      zonedChronology_ZonedDateTimeField0.getLeapAmount((-1L));
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      DateTimeField dateTimeField0 = gJChronology0.centuryOfEra();
      dateTimeField0.isLeap(0);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.centuryOfEra();
      // Undeclared exception!
      try { 
        dateTimeField0.set((-12219292800000L), "$e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"$e\" for centuryOfEra is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (long) 1, 1);
      LocalDate localDate0 = new LocalDate((long) 1, (Chronology) gJChronology0);
      // Undeclared exception!
      try { 
        localDate0.toDateTimeAtCurrentTime((DateTimeZone) fixedDateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 19 for dayOfMonth is not supported
         //
         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (-12220502400000L), 1);
      YearMonth yearMonth0 = new YearMonth((-12220502400000L), (Chronology) gJChronology0);
      YearMonth yearMonth1 = yearMonth0.minusMonths((-1277));
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(3, yearMonth1.getMonthOfYear());
      assertEquals(1689, yearMonth1.getYear());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      YearMonth yearMonth0 = new YearMonth((long) 1, (Chronology) gJChronology0);
      // Undeclared exception!
      try { 
        Hours.hoursBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1970 for year is not supported
         //
         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      DateTimeField dateTimeField0 = gJChronology0.centuryOfEra();
      dateTimeField0.getAsShortText((long) 3);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (-300L), 6);
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[Etc/UTC,cutover=1969-12-31T23:59:59.700Z,mdfw=6]", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      DateTime dateTime0 = new DateTime(1, 1, 1, 1, 1, dateTimeZone0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0);
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[Etc/UTC,cutover=0001-01-01T01:01:00.000Z]", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 0L, 1);
      LocalDate localDate0 = LocalDate.now();
      LocalDate localDate1 = localDate0.withYear(1);
      DateTime dateTime0 = localDate1.toDateTimeAtCurrentTime();
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0);
      boolean boolean0 = gJChronology0.equals(gJChronology1);
      assertFalse(boolean0);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, 3801600000L, 1);
      YearMonth yearMonth0 = new YearMonth(3801600000L, (Chronology) gJChronology0);
      // Undeclared exception!
      try { 
        yearMonth0.toInterval();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Specified date does not exist
         //
         verifyException("org.joda.time.chrono.GJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 0L, 1);
      YearMonth yearMonth0 = new YearMonth((long) 1, (Chronology) gJChronology0);
      Interval interval0 = yearMonth0.toInterval();
      assertEquals(2678400000L, interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      long long0 = gJChronology0.julianToGregorianByYear(1123200000L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      long long0 = gJChronology0.julianToGregorianByYear(1921449600001L);
      assertEquals(1920326400001L, long0);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      long long0 = gJChronology0.julianToGregorianByYear(0);
      assertEquals((-1123200000L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      long long0 = gJChronology0.julianToGregorianByWeekyear(1209600000L);
      assertEquals(0L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      long long0 = gJChronology0.julianToGregorianByWeekyear(2629746000L);
      assertEquals(1420146000L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      long long0 = gJChronology0.julianToGregorianByWeekyear(0L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-1209600000L), long0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      long long0 = gJChronology0.gregorianToJulianByYear((-1123200000L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 0L, 1);
      long long0 = gJChronology0.gregorianToJulianByYear(2382L);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1123202382L, long0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      long long0 = gJChronology0.gregorianToJulianByYear((-79271568000000L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-79240550400000L), long0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      long long0 = gJChronology0.gregorianToJulianByWeekyear((-1209600000L));
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      long long0 = gJChronology0.gregorianToJulianByWeekyear((-79271568000000L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-79240118400000L), long0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      Instant instant0 = new Instant();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      Instant instant1 = gJChronology0.getGregorianCutover();
      assertSame(instant1, instant0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      gJChronology0.getGregorianCutover();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      long long0 = gJChronology0.getDateTimeMillis(15356250, 1, 1, 15356250);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(484534276978556250L, long0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (-4L), 1);
      long long0 = gJChronology0.getDateTimeMillis(11, 1, 11, 11);
      assertEquals((-61819372799989L), long0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      // Undeclared exception!
      try { 
        gJChronology0.julianToGregorianByWeekyear((-62135769599999L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 53 for weekOfWeekyear must be in the range [1,52]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Instant instant0 = new Instant();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime(dateTimeZone0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      // Undeclared exception!
      try { 
        gJChronology0.gregorianToJulianByYear(9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 292278994 for year must be in the range [-292269054,292272992]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      // Undeclared exception!
      try { 
        gJChronology0.gregorianToJulianByWeekyear(31535999985L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 53 for weekOfWeekyear must be in the range [1,52]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      // Undeclared exception!
      try { 
        gJChronology0.assemble((AssembledChronology.Fields) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.GJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 726L, 1);
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      gJChronology0.assemble(assembledChronology_Fields0);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      long long0 = gJChronology0.getDateTimeMillis(1, 1, 1, 1, 1, 1, 1);
      assertEquals((-62135765938999L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      LocalDateTime localDateTime0 = new LocalDateTime((-12219292800000L), (Chronology) gJChronology0);
      DateTime dateTime0 = localDateTime0.toDateTime(dateTimeZone0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-12219292800000L), dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime((-1542), (-1542), (-1881), (-1881), (-515), (-2387), 1, gJChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1881 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      try { 
        gJChronology0.getDateTimeMillis(45, 2, (-2605), 1, 29, 1, 45);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2605 for dayOfMonth must be in the range [1,28]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      YearMonth yearMonth0 = new YearMonth((-1599L), (Chronology) gJChronology0);
      // Undeclared exception!
      try { 
        yearMonth0.toInterval();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Specified date does not exist
         //
         verifyException("org.joda.time.chrono.GJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (-4L), 1);
      GJChronology gJChronology1 = (GJChronology)gJChronology0.withZone(dateTimeZone0);
      assertEquals(1, gJChronology1.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      // Undeclared exception!
      try { 
        GJChronology.getInstance(dateTimeZone0, (ReadableInstant) null, 1454);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 1454
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-3134));
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      DateTime dateTime0 = mutableDateTime0.toDateTime();
      // Undeclared exception!
      try { 
        GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0, 719527);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 719527
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 0L, 1);
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0L, instant0.getMillis());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      gJChronology0.assemble(assembledChronology_Fields0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      int int0 = gJChronology0.getMinimumDaysInFirstWeek();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      ZonedChronology.getInstance(gJChronology0, dateTimeZone0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      DateTimeField dateTimeField0 = gJChronology0.centuryOfEra();
      dateTimeField0.getMinimumValue(0L);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      DateTimeField dateTimeField0 = gJChronology0.centuryOfEra();
      dateTimeField0.getMinimumValue((-1328L));
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      DateTimeField dateTimeField0 = gJChronology0.centuryOfEra();
      dateTimeField0.getDifferenceAsLong((-2040L), (-2040L));
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      DateTimeField dateTimeField0 = gJChronology0.centuryOfEra();
      dateTimeField0.getDifferenceAsLong(86397960L, (-2636L));
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      DateTimeField dateTimeField0 = gJChronology0.centuryOfEra();
      dateTimeField0.getDifferenceAsLong((-2040L), 1);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 1208L, 1);
      Period period0 = new Period(868, 95, 868, 868, 868, 868, 868, 1);
      int[] intArray0 = gJChronology0.get((ReadablePeriod) period0, 1208L, 620L);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, (-588)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1, 58, (-541), 246);
      GJChronology gJChronology0 = GJChronology.getInstance();
      int[] intArray0 = gJChronology0.get((ReadablePeriod) mutablePeriod0, (-194421513600000L), 45259152969600000L);
      assertArrayEquals(new int[] {1440366, 4, 0, 6, 0, 0, 0, 0}, intArray0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      YearMonth yearMonth0 = new YearMonth((long) 1, (Chronology) lenientChronology0);
      Seconds.secondsBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      assertEquals(1, yearMonth0.getMonthOfYear());
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1970, yearMonth0.getYear());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Months months0 = Months.TWELVE;
      GJChronology gJChronology0 = GJChronology.getInstance();
      long long0 = gJChronology0.add((ReadablePeriod) months0, (long) 1, (-3124));
      assertEquals((-98553283199999L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 2678400000L, 1);
      YearMonth yearMonth0 = new YearMonth((long) 1, (Chronology) gJChronology0);
      YearMonth yearMonth1 = yearMonth0.plusMonths(1);
      assertEquals(2, yearMonth1.getMonthOfYear());
      assertEquals(12, yearMonth0.getMonthOfYear());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 1555200000L, 1);
      YearMonth yearMonth0 = new YearMonth(1958L, (Chronology) gJChronology0);
      Interval interval0 = yearMonth0.toInterval();
      assertEquals(1123200000L, interval0.getEndMillis());
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-1555200000L), interval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      DateTime dateTime0 = new DateTime(817L, (Chronology) gJChronology0);
      DateTime dateTime1 = dateTime0.plusMonths((-1037));
      assertEquals((-2726092799183L), dateTime1.getMillis());
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 1409529600000L, 1);
      YearMonth yearMonth0 = new YearMonth(1409529600000L, (Chronology) gJChronology0);
      YearMonth yearMonth1 = yearMonth0.minusMonths(1);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(2014, yearMonth1.getYear());
      assertEquals(8, yearMonth1.getMonthOfYear());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      LocalDate localDate0 = new LocalDate((Object) null, buddhistChronology0);
      LocalDate localDate1 = localDate0.withWeekyear(91);
      assertFalse(localDate1.equals((Object)localDate0));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      MutableDateTime mutableDateTime0 = new MutableDateTime((-2759L), (DateTimeZone) null);
      DateTimeField dateTimeField0 = gJChronology0.centuryOfEra();
      mutableDateTime0.setRounding(dateTimeField0, 3);
      assertEquals(978307199999L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      MutableDateTime mutableDateTime0 = new MutableDateTime((-35154432002228L), (DateTimeZone) null);
      DateTimeField dateTimeField0 = gJChronology0.centuryOfEra();
      mutableDateTime0.setRounding(dateTimeField0, 3);
      assertEquals((-33733929600000L), mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.yearOfCentury();
      long long0 = dateTimeField0.roundCeiling((-12219292800000L));
      assertEquals((-12212553600000L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 0L, 1);
      DateTimeField dateTimeField0 = gJChronology0.dayOfYear();
      long long0 = dateTimeField0.roundCeiling((-5714L));
      assertEquals((-1L), long0);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (-62135765938999L), 2);
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate((-62135765938999L), (Chronology) gJChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for year is not supported
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      YearMonth yearMonth0 = new YearMonth((long) 1, (Chronology) lenientChronology0);
      Interval interval0 = yearMonth0.toInterval(dateTimeZone0);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(2678399999L, interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      MonthDay monthDay0 = new MonthDay(4174L);
      MonthDay monthDay1 = monthDay0.withChronologyRetainFields(gJChronology0);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      LocalDate localDate0 = LocalDate.now((Chronology) gJChronology0);
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      gJChronology0.validate(localDate0, intArray0);
      assertArrayEquals(new int[] {1, 1, 1}, intArray0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      DateTimeField dateTimeField0 = gJChronology0.centuryOfEra();
      dateTimeField0.getLeapAmount(2);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 1409529599997L, 1);
      DateTimeField dateTimeField0 = gJChronology0.centuryOfEra();
      int int0 = dateTimeField0.getLeapAmount((-354L));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      DateTimeField dateTimeField0 = gJChronology0.centuryOfEra();
      dateTimeField0.isLeap(5);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      DateTimeField dateTimeField0 = gJChronology0.centuryOfEra();
      dateTimeField0.isLeap((-1165L));
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      DateTimeField dateTimeField0 = gJChronology0.centuryOfEra();
      long long0 = dateTimeField0.set((long) 1, "20");
      assertEquals(1L, long0);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      DateTimeField dateTimeField0 = gJChronology0.centuryOfEra();
      long long0 = dateTimeField0.set(1409551200000L, "20");
      assertEquals((-1745085600000L), long0);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      DateTimeField dateTimeField0 = gJChronology0.centuryOfEra();
      long long0 = dateTimeField0.set((-2135L), "20");
      assertEquals((-2135L), long0);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1840);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 31449600000L, 1);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      YearMonth yearMonth0 = new YearMonth(30412800000L, (Chronology) lenientChronology0);
      // Undeclared exception!
      try { 
        yearMonth0.toInterval(dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1970 for year is not supported
         //
         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      StrictChronology strictChronology0 = StrictChronology.getInstance(lenientChronology0);
      YearMonth yearMonth0 = new YearMonth((long) 1, (Chronology) strictChronology0);
      // Undeclared exception!
      try { 
        yearMonth0.toInterval();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1 for dayOfMonth is not supported
         //
         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      Period period0 = new Period(1, 1, 1, 1);
      YearMonth yearMonth0 = new YearMonth((-1599L), (Chronology) gJChronology0);
      YearMonth yearMonth1 = yearMonth0.withPeriodAdded(period0, 1);
      assertEquals(1969, yearMonth1.getYear());
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      DateTimeField dateTimeField0 = gJChronology0.centuryOfEra();
      dateTimeField0.getAsShortText((long) 0);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      MutableDateTime mutableDateTime0 = new MutableDateTime(2678400000L, dateTimeZone0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0, 4);
      DateTimeField dateTimeField0 = gJChronology0.centuryOfEra();
      String string0 = dateTimeField0.getAsShortText((-1190L));
      assertEquals("20", string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      DateTimeField dateTimeField0 = gJChronology0.centuryOfEra();
      Locale locale0 = Locale.ITALIAN;
      dateTimeField0.getAsText((long) 1, locale0);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      DateTimeField dateTimeField0 = gJChronology0.centuryOfEra();
      Locale locale0 = Locale.JAPAN;
      String string0 = dateTimeField0.getAsText((-62099042250998L), locale0);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 1555200000L, 1);
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[UTC,cutover=1970-01-19,mdfw=1]", string0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[Etc/UTC]", string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Chronology chronology0 = gJChronology0.withUTC();
      boolean boolean0 = ((GJChronology) chronology0).equals(gJChronology0);
      assertFalse(boolean0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 0L, 1);
      LocalDate localDate0 = LocalDate.now();
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime();
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0);
      boolean boolean0 = gJChronology0.equals(gJChronology1);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertFalse(boolean0);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) null, 1);
      boolean boolean0 = gJChronology1.equals(gJChronology0);
      assertFalse(boolean0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertFalse(gJChronology0.equals((Object)gJChronology1));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      boolean boolean0 = gJChronology0.equals(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Instant instant0 = new Instant(2427L);
      boolean boolean0 = gJChronology0.equals(instant0);
      assertFalse(boolean0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      long long0 = gJChronology0.getDateTimeMillis(1970, 1, 1, 1, 1, 1, 1);
      assertEquals(3661001L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      try { 
        gJChronology0.getDateTimeMillis(501, 2, 30, 60, 60, 1, 30);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 60 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      try { 
        gJChronology0.getDateTimeMillis(2, 2, 29, 2, 2, 0, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 29 for dayOfMonth must be in the range [1,28]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      try { 
        gJChronology0.getDateTimeMillis(11, 3, (-3554), 0, 11, 2, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -3554 for dayOfMonth must be in the range [1,31]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      MonthDay monthDay0 = new MonthDay((-1L));
      MonthDay monthDay1 = monthDay0.withChronologyRetainFields(gJChronology0);
      monthDay1.toLocalDate(1969);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 0L, 1);
      try { 
        gJChronology0.getDateTimeMillis(1, 163, 1, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 163 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      GJChronology gJChronology1 = (GJChronology)gJChronology0.withZone((DateTimeZone) null);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(4752);
      // Undeclared exception!
      try { 
        GJChronology.getInstance(dateTimeZone0, (-12219292800000L), 2707);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 2707
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = gJChronology0.yearOfCentury();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 29);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(offsetDateTimeField0, dateTimeZone0, (DurationField) null, (DurationField) null, (DurationField) null);
      long long0 = zonedChronology_ZonedDateTimeField0.getDifferenceAsLong(880L, 2);
      assertEquals(0L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.clockhourOfHalfday();
      long long0 = dateTimeField0.getDifferenceAsLong((-2040L), 296);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      DateTimeField dateTimeField0 = gJChronology0.centuryOfEra();
      LocalDate localDate0 = new LocalDate((Chronology) buddhistChronology0);
      Locale locale0 = new Locale("NoMinutes", "");
      String string0 = dateTimeField0.getAsText((ReadablePartial) localDate0, 2, locale0);
      assertEquals("2", string0);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 0L, 1);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      YearMonth yearMonth0 = new YearMonth((long) 1, (Chronology) lenientChronology0);
      Interval interval0 = yearMonth0.toInterval();
      assertEquals(2678400000L, interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      MonthDay monthDay0 = new MonthDay((long) 1, (Chronology) gJChronology0);
      MonthDay monthDay1 = monthDay0.plusDays((-64));
      assertEquals(29, monthDay1.getDayOfMonth());
      assertEquals(10, monthDay1.getMonthOfYear());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      DateTimeField dateTimeField0 = gJChronology0.centuryOfEra();
      Locale locale0 = Locale.CHINESE;
      dateTimeField0.getMaximumTextLength(locale0);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      DateTimeField dateTimeField0 = gJChronology0.centuryOfEra();
      Locale locale0 = Locale.ENGLISH;
      dateTimeField0.getMaximumShortTextLength(locale0);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      DateTimeField dateTimeField0 = gJChronology0.centuryOfEra();
      YearMonth yearMonth0 = YearMonth.now(dateTimeZone0);
      dateTimeField0.getMinimumValue((ReadablePartial) yearMonth0);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      DateTimeField dateTimeField0 = gJChronology0.centuryOfEra();
      Locale locale0 = Locale.JAPAN;
      String string0 = dateTimeField0.getAsShortText(1, locale0);
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      long long0 = gJChronology0.gregorianToJulianByWeekyear(1235L);
      assertEquals(1209601235L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      gJChronology0.hashCode();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = gJChronology0.centuryOfEra();
      long long0 = dateTimeField0.roundCeiling((-5691L));
      assertEquals(978307199999L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      LocalDate localDate0 = new LocalDate(1, 1, 3, buddhistChronology0);
      LocalDate localDate1 = localDate0.withWeekyear(3706);
      assertFalse(localDate1.equals((Object)localDate0));
  }
}
