/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 22:48:12 GMT 2021
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.DateTimeException;
import java.time.ZoneOffset;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.chrono.AssembledChronology;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GJChronology_ESTest extends GJChronology_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0, islamicChronology_LeapYearPatternType0);
      DateTime dateTime0 = new DateTime(1391234399986L, (Chronology) islamicChronology0);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) dateTime0);
      Instant instant0 = dateTime0.toInstant();
      PeriodType periodType0 = PeriodType.standard();
      MutablePeriod mutablePeriod0 = new MutablePeriod(instant0, instant0, periodType0);
      int[] intArray0 = gJChronology0.get((ReadablePeriod) mutablePeriod0, 1391234399986L, (-454L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertArrayEquals(new int[] {(-44), (-1), (-1), (-6), (-6), 0, 0, (-440)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0, islamicChronology_LeapYearPatternType0);
      DateTime dateTime0 = new DateTime(1391234399986L, (Chronology) islamicChronology0);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) dateTime0);
      Instant instant0 = Instant.now();
      MutablePeriod mutablePeriod0 = new MutablePeriod(dateTime0, instant0, (PeriodType) null);
      int[] intArray0 = gJChronology0.get((ReadablePeriod) mutablePeriod0, (-62064921599988L), 1391234399986L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertArrayEquals(new int[] {2010, 10, (-1), (-5), (-18), 0, 0, (-26)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      LocalDateTime localDateTime0 = new LocalDateTime((long) 1, (Chronology) lenientChronology0);
      LocalDateTime localDateTime1 = localDateTime0.withFields(localDateTime0);
      assertSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 3, 3);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      DateTime dateTime0 = new DateTime(3, 3, 2917, 1416, (-951), 8, lenientChronology0);
      assertEquals((-61810617052003L), dateTime0.getMillis());
      assertEquals(3, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 3, 3);
      DateTime dateTime0 = new DateTime(3, 3, 3, 3, 3, dateTimeZone0);
      Instant instant0 = dateTime0.toInstant();
      PeriodType periodType0 = PeriodType.standard();
      MutablePeriod mutablePeriod0 = new MutablePeriod(instant0, instant0, periodType0);
      int[] intArray0 = gJChronology0.get((ReadablePeriod) mutablePeriod0, (-12219292800000L), 100000000000L);
      assertArrayEquals(new int[] {390, 4, 3, 5, 9, 46, 40, 0}, intArray0);
      assertEquals(3, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTime dateTime0 = new DateTime((-3560L), (Chronology) buddhistChronology0);
      Instant instant0 = new Instant((long) 1);
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0);
      PeriodType periodType0 = PeriodType.standard();
      MutablePeriod mutablePeriod0 = new MutablePeriod(instant0, instant0, periodType0);
      int[] intArray0 = gJChronology0.get((ReadablePeriod) mutablePeriod0, (-3560L), (long) 1);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 3, 561}, intArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, 0L, 3);
      MonthDay monthDay0 = new MonthDay(1L);
      monthDay0.withChronologyRetainFields(gJChronology0);
      assertEquals(3, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 31083597720000L, 3);
      YearMonth yearMonth0 = new YearMonth(31083597720000L);
      YearMonth yearMonth1 = yearMonth0.withChronologyRetainFields(gJChronology0);
      // Undeclared exception!
      try { 
        yearMonth1.plusYears(3190);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2954 for year is not supported
         //
         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      Instant instant0 = new Instant((-12219292800000L));
      LocalDateTime localDateTime0 = new LocalDateTime(instant0, buddhistChronology0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      LocalDateTime localDateTime0 = new LocalDateTime(0L, (Chronology) lenientChronology0);
      // Undeclared exception!
      try { 
        gJChronology0.set(localDateTime0, (-78829804799999L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 19 for dayOfMonth is not supported
         //
         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      YearMonth yearMonth0 = new YearMonth((-9223372036854775808L), (Chronology) gJChronology0);
      // Undeclared exception!
      try { 
        Months.monthsBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -292269055 for year is not supported
         //
         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 3, 3);
      YearMonth yearMonth0 = new YearMonth(1504L);
      YearMonth yearMonth1 = yearMonth0.withChronologyRetainFields(gJChronology0);
      // Undeclared exception!
      try { 
        Months.monthsBetween((ReadablePartial) yearMonth1, (ReadablePartial) yearMonth1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1970 for year is not supported
         //
         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1631));
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 0L, 2);
      YearMonth yearMonth0 = new YearMonth(3533L);
      YearMonth yearMonth1 = yearMonth0.withChronologyRetainFields(gJChronology0);
      Months.monthsBetween((ReadablePartial) yearMonth1, (ReadablePartial) yearMonth1);
      assertEquals(2, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(7);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 3, 7);
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[+00:00:00.007,cutover=1970-01-01T00:00:00.003Z,mdfw=7]", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 3, 3);
      DateTime dateTime0 = new DateTime(3, 3, 3, 3, 3, 3, gJChronology0);
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0);
      String string0 = gJChronology1.toString();
      assertEquals("GJChronology[+00:00:00.003,cutover=0003-03-01T03:03:02.997Z]", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 3, 3);
      DateTime dateTime0 = new DateTime(3, 3, 3, 3, 3, dateTimeZone0);
      Instant instant0 = dateTime0.toInstant();
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      boolean boolean0 = gJChronology0.equals(gJChronology1);
      assertFalse(boolean0);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertEquals(3, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(78, 0, 78, 0, 499, gJChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 499 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 3, 3);
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      gJChronology0.assemble(assembledChronology_Fields0);
      assertEquals(3, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3);
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      DateTime dateTime0 = localDateTime0.toDateTime();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0, 3);
      Chronology chronology0 = gJChronology0.withUTC();
      assertNotSame(chronology0, gJChronology0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(6);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 6, 6);
      long long0 = gJChronology0.julianToGregorianByYear(1123200000L);
      assertEquals(0L, long0);
      assertEquals(6, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      long long0 = gJChronology0.julianToGregorianByYear(8448451200000L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(8447155200000L, long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      long long0 = gJChronology0.julianToGregorianByWeekyear(1209600000L);
      assertEquals(0L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      long long0 = gJChronology0.julianToGregorianByWeekyear(63158400000L);
      assertEquals(62553600000L, long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      long long0 = gJChronology0.julianToGregorianByWeekyear(0L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-1209600000L), long0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      long long0 = gJChronology0.gregorianToJulianByYear((-1123200000L));
      assertEquals(0L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      long long0 = gJChronology0.gregorianToJulianByYear(2408L);
      assertEquals(1123202408L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      long long0 = gJChronology0.gregorianToJulianByYear((-10132387200000L));
      assertEquals((-10131523200000L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 3, 3);
      long long0 = gJChronology0.gregorianToJulianByWeekyear((-12219292800000L));
      assertEquals((-12218083200000L), long0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      gJChronology0.getZone();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime((long) 0, (Chronology) gJChronology0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2);
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0);
      Instant instant0 = gJChronology1.getGregorianCutover();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0L, instant0.getMillis());
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0, islamicChronology_LeapYearPatternType0);
      DateTime dateTime0 = new DateTime(1391234399986L, (Chronology) islamicChronology0);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) dateTime0);
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1391234399986L, instant0.getMillis());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3);
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      DateTime dateTime0 = localDateTime0.toDateTime();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0, 3);
      long long0 = gJChronology0.getDateTimeMillis(3, 3, 28, 1, 29, 29, 29);
      assertEquals((-62065261830974L), long0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 3, 3);
      long long0 = gJChronology0.getDateTimeMillis(2675, 3, 7, 91);
      assertEquals(22253270400088L, long0);
      assertEquals(3, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      long long0 = gJChronology0.getDateTimeMillis(1873, 2, 5, 2);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-3057955199998L), long0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      // Undeclared exception!
      try { 
        gJChronology0.julianToGregorianByWeekyear((-45000230400000L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 53 for weekOfWeekyear must be in the range [1,52]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 3, 3);
      // Undeclared exception!
      try { 
        gJChronology0.gregorianToJulianByYear((-62167219200000L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for year is not supported
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      // Undeclared exception!
      try { 
        gJChronology0.gregorianToJulianByWeekyear(31557600000L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 53 for weekOfWeekyear must be in the range [1,52]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      // Undeclared exception!
      try { 
        GJChronology.getInstance(dateTimeZone0, (-9223372017043200000L), 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 292278995 for weekyear must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      // Undeclared exception!
      try { 
        gJChronology0.assemble((AssembledChronology.Fields) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.GJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      DateTime dateTime0 = new DateTime(81, 81, 81, 81, 81, 81, lenientChronology0);
      assertEquals((-59393655459000L), dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (long) 0, 4);
      YearMonth yearMonth0 = new YearMonth((-4843L));
      YearMonth yearMonth1 = yearMonth0.withChronologyRetainFields(gJChronology0);
      Interval interval0 = yearMonth1.toInterval();
      assertEquals((-1555200000L), interval0.getStartMillis());
      assertEquals(0L, interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      long long0 = gJChronology0.getDateTimeMillis(4517, 3, 3, 5, 3, 0, 1);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(80380875780001L, long0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      try { 
        gJChronology0.getDateTimeMillis(901, 3, 3, 3, 83325984, 50, 83325984);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 83325984 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0, islamicChronology_LeapYearPatternType0);
      DateTime dateTime0 = new DateTime(15778800000L, (Chronology) islamicChronology0);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) dateTime0);
      try { 
        gJChronology0.getDateTimeMillis(100, 2, 2, 20, 83, 617, 20);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 83 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      DateTime dateTime0 = localDateTime0.toDateTime();
      // Undeclared exception!
      try { 
        GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 0
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      
      GJChronology gJChronology1 = GJChronology.getInstance();
      GJChronology gJChronology2 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) null, 1);
      boolean boolean0 = gJChronology2.equals(gJChronology1);
      assertFalse(gJChronology1.equals((Object)gJChronology2));
      assertFalse(gJChronology2.equals((Object)gJChronology0));
      assertNotSame(gJChronology2, gJChronology0);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 3;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3);
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.minusMinutes(3);
      localDateTime0.millisOfDay();
      DateTime dateTime0 = localDateTime1.toDateTime();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0, 3);
      GJChronology.getInstance();
      gJChronology0.julianToGregorianByYear(3);
      localDateTime0.withFields(localDateTime1);
      int int1 = 208;
      dateTimeZone0.getOffset((ReadableInstant) dateTime0);
      // Undeclared exception!
      try { 
        ZoneOffset.ofHoursMinutes(208, 3);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Zone offset hours not in valid range: value 208 is not in the range -18 to 18
         //
         verifyException("java.time.ZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3);
      Instant instant0 = new Instant((long) 3);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0, 2);
      GJChronology gJChronology1 = (GJChronology)gJChronology0.withZone(dateTimeZone0);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology1);
      YearMonth yearMonth0 = YearMonth.now((Chronology) lenientChronology0);
      Interval interval0 = yearMonth0.toInterval();
      assertEquals(1393632000000L, interval0.getEndMillis());
      assertEquals(2, gJChronology1.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      gJChronology0.getGregorianCutover();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0, islamicChronology_LeapYearPatternType0);
      DateTime dateTime0 = new DateTime(1391234399986L, (Chronology) islamicChronology0);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) dateTime0);
      int int0 = gJChronology0.getMinimumDaysInFirstWeek();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      YearMonth yearMonth0 = new YearMonth((long) 1);
      YearMonth yearMonth1 = yearMonth0.withChronologyRetainFields(lenientChronology0);
      Months.monthsBetween((ReadablePartial) yearMonth1, (ReadablePartial) yearMonth0);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 2, 2);
      Years years0 = Years.TWO;
      int[] intArray0 = gJChronology0.get((ReadablePeriod) years0, (-31536000000L), (long) 2);
      assertArrayEquals(new int[] {1}, intArray0);
      assertEquals(2, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTime dateTime0 = new DateTime((long) 1, (Chronology) gJChronology0);
      DateTime dateTime1 = dateTime0.withWeekyear(4);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-62040988799999L), dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 3, 3);
      DateTime dateTime0 = new DateTime((long) 3, (Chronology) gJChronology0);
      DateTime dateTime1 = dateTime0.withTimeAtStartOfDay();
      assertEquals(3, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-3L), dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      MonthDay monthDay0 = new MonthDay(9, 29);
      MonthDay monthDay1 = monthDay0.plusMonths(29);
      // Undeclared exception!
      try { 
        monthDay1.withChronologyRetainFields(gJChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 29 for dayOfMonth must not be larger than 28
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 3, 3);
      MonthDay monthDay0 = new MonthDay(2016L);
      MonthDay monthDay1 = monthDay0.withChronologyRetainFields(gJChronology0);
      MonthDay monthDay2 = monthDay1.plusMonths(1);
      assertEquals(2, monthDay2.getMonthOfYear());
      assertEquals(1, monthDay2.getDayOfMonth());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, 31083597720000L, 3);
      MonthDay monthDay0 = new MonthDay(82428451197390L);
      monthDay0.withChronologyRetainFields(gJChronology0);
      assertEquals(3, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 1123200000L, 3);
      YearMonth yearMonth0 = new YearMonth(4853L);
      YearMonth yearMonth1 = yearMonth0.withChronologyRetainFields(gJChronology0);
      // Undeclared exception!
      try { 
        Months.monthsBetween((ReadablePartial) yearMonth1, (ReadablePartial) yearMonth0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1970 for year is not supported
         //
         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 3, 3);
      LocalDateTime localDateTime0 = LocalDateTime.now();
      DateTime dateTime0 = new DateTime((long) 14, (Chronology) gJChronology0);
      PeriodType periodType0 = PeriodType.standard();
      MutablePeriod mutablePeriod0 = new MutablePeriod(dateTime0, dateTime0, periodType0);
      YearMonth yearMonth0 = new YearMonth(localDateTime0, gJChronology0);
      YearMonth yearMonth1 = yearMonth0.minus(mutablePeriod0);
      assertNotSame(yearMonth0, yearMonth1);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 3, 3);
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[+00:00:00.003,cutover=1970-01-01T00:00:00.003Z,mdfw=3]", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime((long) 0, (Chronology) gJChronology0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2);
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0);
      String string0 = gJChronology1.toString();
      assertEquals("GJChronology[+00:00:00.002,cutover=1970-01-01]", string0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[UTC]", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      GJChronology gJChronology1 = GJChronology.getInstanceUTC();
      boolean boolean0 = gJChronology0.equals(gJChronology1);
      assertFalse(boolean0);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      boolean boolean0 = gJChronology0.equals(julianChronology0);
      assertFalse(boolean0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      boolean boolean0 = gJChronology0.equals(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) null, 1);
      boolean boolean0 = gJChronology1.equals(gJChronology0);
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(boolean0);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime(3, 3, 3, 3, 3, 3, gJChronology0);
      assertEquals((-62067416217000L), dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      try { 
        gJChronology0.getDateTimeMillis(1, 2, 29, 5, 3, 1, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 29 for dayOfMonth must be in the range [1,28]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      try { 
        gJChronology0.getDateTimeMillis(1, 2, 46, 5, (-5552), (-2797), 999);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -5552 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      LocalDateTime localDateTime0 = new LocalDateTime((-12219292800000L), (Chronology) gJChronology0);
      DateTime dateTime0 = localDateTime0.toDateTime((DateTimeZone) null);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-12219292800000L), dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 3, 3);
      YearMonth yearMonth0 = new YearMonth((long) 1, (Chronology) gJChronology0);
      // Undeclared exception!
      try { 
        yearMonth0.toInterval();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Specified date does not exist
         //
         verifyException("org.joda.time.chrono.GJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 3, 3);
      try { 
        gJChronology0.getDateTimeMillis(3, 3, 25734375, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 25734375 for dayOfMonth must be in the range [1,31]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      LocalTime localTime0 = LocalTime.fromMillisOfDay(0L, (Chronology) gJChronology0);
      DateTime dateTime0 = localTime0.toDateTimeToday((DateTimeZone) null);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1392336000000L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      // Undeclared exception!
      try { 
        GJChronology.getInstance(dateTimeZone0, (-12219292800000L), 60);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 60
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 3, 3);
      Weeks weeks0 = Weeks.TWO;
      Duration duration0 = weeks0.toStandardDuration();
      Period period0 = duration0.toPeriod();
      int[] intArray0 = gJChronology0.get((ReadablePeriod) period0, 10000000000000000L, (-411L));
      assertEquals(3, gJChronology0.getMinimumDaysInFirstWeek());
      assertArrayEquals(new int[] {(-316887), (-5), 1, 4, 6, 13, 19, 589}, intArray0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.secondOfMinute();
      long long0 = dateTimeField0.getDifferenceAsLong(1540L, 1073741823L);
      assertEquals((-1073740L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 3, 3);
      MonthDay monthDay0 = new MonthDay((-135L), (Chronology) gJChronology0);
      MonthDay monthDay1 = monthDay0.plusDays(3);
      assertEquals(18, monthDay0.getDayOfMonth());
      assertEquals(3, monthDay1.getDayOfMonth());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 2678400000L, 1);
      YearMonth yearMonth0 = new YearMonth(2678400000L);
      YearMonth yearMonth1 = yearMonth0.withChronologyRetainFields(gJChronology0);
      YearMonth yearMonth2 = yearMonth1.minusMonths(1);
      assertEquals(1, yearMonth2.getMonthOfYear());
      assertEquals(1970, yearMonth2.getYear());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.secondOfMinute();
      LocalDate localDate0 = LocalDate.now((Chronology) gJChronology0);
      Locale locale0 = Locale.GERMAN;
      String string0 = dateTimeField0.getAsShortText((ReadablePartial) localDate0, 2410, locale0);
      assertEquals("2410", string0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 2678400000L, 1);
      long long0 = gJChronology0.gregorianToJulianByWeekyear(2678400000L);
      assertEquals(3888000000L, long0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      LocalDateTime localDateTime0 = new LocalDateTime((long) 1, (Chronology) lenientChronology0);
      LocalDateTime localDateTime1 = localDateTime0.minusYears(1938);
      LocalDateTime localDateTime2 = localDateTime1.withFields(localDateTime0);
      assertTrue(localDateTime2.equals((Object)localDateTime0));
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Years years0 = Years.years((-4172));
      long long0 = gJChronology0.add((ReadablePeriod) years0, (long) (-4172), (-4172));
      assertEquals(549267178809595828L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      LocalDateTime localDateTime0 = new LocalDateTime((-954L), (Chronology) lenientChronology0);
      DateTime dateTime0 = localDateTime0.toDateTime();
      DateTime dateTime1 = dateTime0.withWeekyear(86394008);
      assertEquals(2726269426742399046L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      gJChronology0.hashCode();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }
}
