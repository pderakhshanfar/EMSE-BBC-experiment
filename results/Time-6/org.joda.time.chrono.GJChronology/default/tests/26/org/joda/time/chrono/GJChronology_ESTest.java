/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 01 17:54:38 GMT 2021
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.chrono.AssembledChronology;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GJChronology_ESTest extends GJChronology_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      Instant instant0 = new Instant();
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(instant0);
      
      Instant instant1 = instant0.withMillis((-12219292800000L));
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertFalse(instant1.equals((Object)instant0));
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals((-12219292800000L), instant1.getMillis());
      assertNotNull(instant1);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant1);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals((-12219292800000L), instant1.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      Duration duration0 = Duration.standardSeconds(2203L);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(36L, duration0.getStandardMinutes());
      assertEquals(2203000L, duration0.getMillis());
      assertEquals(2203L, duration0.getStandardSeconds());
      assertNotNull(duration0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(instant0, duration0);
      assertFalse(instant0.equals((Object)instant1));
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(36L, duration0.getStandardMinutes());
      assertEquals(2203000L, duration0.getMillis());
      assertEquals(2203L, duration0.getStandardSeconds());
      assertNotNull(mutablePeriod0);
      
      int[] intArray0 = gJChronology0.get((ReadablePeriod) mutablePeriod0, (-12219292800000L), 2203L);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertEquals(8, intArray0.length);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals((-12219292800000L), instant1.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(36L, duration0.getStandardMinutes());
      assertEquals(2203000L, duration0.getMillis());
      assertEquals(2203L, duration0.getStandardSeconds());
      assertArrayEquals(new int[] {387, 2, 2, 3, 0, 0, 2, 203}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 770L, 1);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      Period period0 = Period.years((-3226));
      assertNotNull(period0);
      
      int[] intArray0 = gJChronology0.get((ReadablePeriod) period0, (-596L), 770L);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(8, intArray0.length);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 1, 366}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      LocalDate localDate0 = new LocalDate((-12219292800000L), (Chronology) gJChronology0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      Instant instant0 = new Instant();
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(instant0);
      
      Duration duration0 = Duration.millis(76);
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(76L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardSeconds());
      assertNotNull(duration0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(instant0, duration0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(76L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardSeconds());
      assertNotNull(mutablePeriod0);
      
      LocalDate localDate1 = localDate0.plus(mutablePeriod0);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(3, localDate0.size());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(76L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+02:00", dateTimeZone0.getID());
      assertEquals("+02:00", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 2, dateTimeZone0);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+02:00", dateTimeZone0.getID());
      assertEquals("+02:00", dateTimeZone0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(2L, mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime0);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) mutableDateTime0);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+02:00", dateTimeZone0.getID());
      assertEquals("+02:00", dateTimeZone0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(2L, mutableDateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      Years years0 = Years.ONE;
      assertEquals(1, years0.getYears());
      assertEquals(1, years0.size());
      assertNotNull(years0);
      
      int[] intArray0 = gJChronology0.get((ReadablePeriod) years0, (long) 2, (-1757L));
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, intArray0.length);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+02:00", dateTimeZone0.getID());
      assertEquals("+02:00", dateTimeZone0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(2L, mutableDateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, years0.getYears());
      assertEquals(1, years0.size());
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      LocalDate localDate0 = new LocalDate((-12219292800000L), (Chronology) gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1439), (-1439), (-1439), (-1439), (-1439), (-1439), (-1439), (-1439));
      assertNotNull(mutablePeriod0);
      
      LocalDate localDate1 = localDate0.plus(mutablePeriod0);
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      assertFalse(localDate1.equals((Object)localDate0));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 0L, 1);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      Partial partial0 = new Partial(dateTimeFieldType0, 1, gJChronology0);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (long) 2, 2);
      assertEquals(2, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      LocalDate localDate0 = new LocalDate((-1321L), (Chronology) gJChronology0);
      assertEquals(2, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalDate localDate1 = localDate0.withDayOfYear(2);
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      assertFalse(localDate1.equals((Object)localDate0));
      assertEquals(2, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      
      LocalDate localDate2 = localDate1.minusDays(2);
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate0, localDate2);
      assertNotSame(localDate1, localDate2);
      assertNotSame(localDate1, localDate0);
      assertNotSame(localDate2, localDate1);
      assertNotSame(localDate2, localDate0);
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(localDate2.equals((Object)localDate1));
      assertFalse(localDate2.equals((Object)localDate0));
      assertEquals(2, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate2.size());
      assertNotNull(localDate2);
      
      // Undeclared exception!
      try { 
        localDate2.withFields(localDate1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1969 for year is not supported
         //
         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-23));
      assertEquals("-23:00", dateTimeZone0.getID());
      assertEquals("-23:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      assertEquals("-23:00", dateTimeZone0.getID());
      assertEquals("-23:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      DateTime dateTime0 = DateTime.now();
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0);
      assertEquals("-23:00", dateTimeZone0.getID());
      assertEquals("-23:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      // Undeclared exception!
      try { 
        gJChronology0.set(localDate0, (-237L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 13 for dayOfMonth is not supported
         //
         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
      assertEquals("+02:00", dateTimeZone0.toString());
      assertEquals("+02:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      assertEquals("+02:00", dateTimeZone0.toString());
      assertEquals("+02:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      Instant instant0 = new Instant();
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(instant0);
      
      Instant instant1 = instant0.withMillis(2);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertFalse(instant1.equals((Object)instant0));
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(2L, instant1.getMillis());
      assertNotNull(instant1);
      
      DateTime dateTime0 = instant1.toDateTime();
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(2L, instant1.getMillis());
      assertEquals(2L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      LocalTime localTime0 = dateTime0.toLocalTime();
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(2L, instant1.getMillis());
      assertEquals(2L, dateTime0.getMillis());
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      long long0 = gJChronology0.set(localTime0, (-12219292800000L));
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertEquals((-12219299999998L), long0);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertEquals("+02:00", dateTimeZone0.toString());
      assertEquals("+02:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(2L, instant1.getMillis());
      assertEquals(2L, dateTime0.getMillis());
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, 359L, 5);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals(5, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[UTC,cutover=1970-01-01T00:00:00.359Z,mdfw=5]", string0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals(5, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      DateTime dateTime0 = new DateTime(1, 1, 1, 1, 1, 1, 1);
      assertEquals((-62135593138999L), dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals((-62135593138999L), dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      String string0 = gJChronology0.toString();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("GJChronology[Etc/UTC,cutover=0001-01-01T01:01:01.001Z]", string0);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals((-62135593138999L), dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
      assertEquals("+02:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+02:00", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      assertEquals("+02:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+02:00", dateTimeZone0.getID());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
      assertEquals("+02:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+02:00", dateTimeZone0.getID());
      assertEquals(3, localDate0.size());
      assertEquals(1392336000000L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0);
      assertEquals("+02:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+02:00", dateTimeZone0.getID());
      assertEquals(3, localDate0.size());
      assertEquals(1392336000000L, dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0, 2);
      assertNotSame(gJChronology1, gJChronology0);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertEquals("+02:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+02:00", dateTimeZone0.getID());
      assertEquals(3, localDate0.size());
      assertEquals(1392336000000L, dateTime0.getMillis());
      assertEquals(2, gJChronology1.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology1);
      
      boolean boolean0 = gJChronology0.equals(gJChronology1);
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(gJChronology1, gJChronology0);
      assertFalse(boolean0);
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertEquals("+02:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+02:00", dateTimeZone0.getID());
      assertEquals(3, localDate0.size());
      assertEquals(1392336000000L, dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(2, gJChronology1.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+02:00", dateTimeZone0.toString());
      assertEquals("+02:00", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      Instant instant0 = new Instant();
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(instant0);
      
      DateTime dateTime0 = instant0.toDateTime();
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0, 2);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+02:00", dateTimeZone0.toString());
      assertEquals("+02:00", dateTimeZone0.getID());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(2, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0);
      assertNotSame(gJChronology1, gJChronology0);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+02:00", dateTimeZone0.toString());
      assertEquals("+02:00", dateTimeZone0.getID());
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology1);
      
      boolean boolean0 = gJChronology1.equals(gJChronology0);
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(gJChronology1, gJChronology0);
      assertFalse(boolean0);
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+02:00", dateTimeZone0.toString());
      assertEquals("+02:00", dateTimeZone0.getID());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(2, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      try { 
        gJChronology0.getDateTimeMillis(2, 2, 2, 2, (-1141), 2, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1141 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      try { 
        gJChronology0.getDateTimeMillis(23, 23, 23, 23, 23, 23, 23);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 23 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      gJChronology0.assemble(assembledChronology_Fields0);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      GJChronology gJChronology1 = (GJChronology)gJChronology0.withUTC();
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(gJChronology1, gJChronology0);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (long) 2, 2);
      assertEquals(2, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      long long0 = gJChronology0.julianToGregorianByYear(1123200000L);
      assertEquals(0L, long0);
      assertEquals(2, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
      assertEquals("+02:00", dateTimeZone0.getID());
      assertEquals("+02:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      assertEquals("+02:00", dateTimeZone0.getID());
      assertEquals("+02:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      long long0 = gJChronology0.julianToGregorianByYear(1123200002L);
      assertEquals(2L, long0);
      assertEquals("+02:00", dateTimeZone0.getID());
      assertEquals("+02:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      long long0 = gJChronology0.julianToGregorianByYear(1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals((-1123199999L), long0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
      assertEquals("+02:00", dateTimeZone0.getID());
      assertEquals("+02:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      Instant instant0 = new Instant();
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(instant0);
      
      DateTime dateTime0 = instant0.toDateTime();
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0, 2);
      assertEquals("+02:00", dateTimeZone0.getID());
      assertEquals("+02:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(2, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      long long0 = gJChronology0.julianToGregorianByWeekyear(2629746000L);
      assertEquals(1420146000L, long0);
      assertEquals("+02:00", dateTimeZone0.getID());
      assertEquals("+02:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(2, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      long long0 = gJChronology0.gregorianToJulianByYear(43200000L);
      assertEquals(1166400000L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      long long0 = gJChronology0.gregorianToJulianByYear((-79271568000000L));
      assertEquals(1, BuddhistChronology.BE);
      assertEquals((-79240550400000L), long0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      long long0 = gJChronology0.gregorianToJulianByWeekyear(1486L);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1209601486L, long0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      long long0 = gJChronology0.gregorianToJulianByWeekyear((-24437894400000L));
      assertEquals((-24437289600000L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+02:00", dateTimeZone0.getID());
      assertEquals("+02:00", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 0L, 2);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+02:00", dateTimeZone0.getID());
      assertEquals("+02:00", dateTimeZone0.toString());
      assertEquals(2, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+02:00", dateTimeZone0.getID());
      assertEquals("+02:00", dateTimeZone0.toString());
      assertEquals(2, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0L, instant0.getMillis());
      assertNotNull(instant0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      long long0 = gJChronology0.getDateTimeMillis(2871, 2, 2, 2871);
      assertEquals(28435622402871L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      // Undeclared exception!
      try { 
        gJChronology0.julianToGregorianByWeekyear((-62135765938999L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 53 for weekOfWeekyear must be in the range [1,52]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      // Undeclared exception!
      try { 
        gJChronology0.gregorianToJulianByYear((-62135765938999L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for year is not supported
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      // Undeclared exception!
      try { 
        gJChronology0.gregorianToJulianByWeekyear(9972208800068L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 53 for weekOfWeekyear must be in the range [1,52]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      // Undeclared exception!
      try { 
        GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (long) (-638), (-638));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: -638
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      try { 
        gJChronology0.getDateTimeMillis((-2003), (-2003), (-2003), (-2003));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2003 for millisOfDay must be in the range [0,86399999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      // Undeclared exception!
      try { 
        gJChronology0.assemble((AssembledChronology.Fields) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.GJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      long long0 = gJChronology0.getDateTimeMillis(1, 1, 1, 1, 1, 1, 1);
      assertEquals((-62135765938999L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      long long0 = gJChronology0.getDateTimeMillis(6094, 1, 28, 1, 28, 1, 28);
      assertEquals(130143288481028L, long0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      long long0 = gJChronology0.getDateTimeMillis(1, 1, 1, 1);
      assertEquals((-62135769599999L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      GJChronology gJChronology1 = (GJChronology)gJChronology0.withZone(fixedDateTimeZone0);
      assertSame(gJChronology0, gJChronology1);
      assertSame(gJChronology1, gJChronology0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      // Undeclared exception!
      try { 
        GJChronology.getInstance(dateTimeZone0, (ReadableInstant) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 0
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
      assertEquals("+02:00", dateTimeZone0.toString());
      assertEquals("+02:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      DateTime dateTime0 = new DateTime(2, 2, 2, 2, 2, 2, dateTimeZone0);
      assertEquals("+02:00", dateTimeZone0.toString());
      assertEquals("+02:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals((-62101295878000L), dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0, 2);
      assertEquals("+02:00", dateTimeZone0.toString());
      assertEquals("+02:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals((-62101295878000L), dateTime0.getMillis());
      assertEquals(2, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0);
      assertNotSame(gJChronology1, gJChronology0);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertEquals("+02:00", dateTimeZone0.toString());
      assertEquals("+02:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals((-62101295878000L), dateTime0.getMillis());
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology1);
      
      boolean boolean0 = gJChronology0.equals(gJChronology1);
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(gJChronology1, gJChronology0);
      assertFalse(boolean0);
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertEquals("+02:00", dateTimeZone0.toString());
      assertEquals("+02:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals((-62101295878000L), dateTime0.getMillis());
      assertEquals(2, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
      assertEquals("+02:00", dateTimeZone0.getID());
      assertEquals("+02:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      Instant instant0 = new Instant();
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(instant0);
      
      DateTime dateTime0 = instant0.toDateTime();
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0, 1);
      assertEquals("+02:00", dateTimeZone0.getID());
      assertEquals("+02:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      Instant instant1 = gJChronology0.getGregorianCutover();
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertTrue(instant1.equals((Object)instant0));
      assertEquals("+02:00", dateTimeZone0.getID());
      assertEquals("+02:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1392409281320L, instant1.getMillis());
      assertNotNull(instant1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) null);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      int int0 = gJChronology0.getMinimumDaysInFirstWeek();
      assertEquals(4, int0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(2, 2);
      assertEquals("+02:02", dateTimeZone0.getID());
      assertEquals("+02:02", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 2, 2);
      assertEquals("+02:02", dateTimeZone0.getID());
      assertEquals("+02:02", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(2, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(2, 2, 2, 2);
      assertNotNull(mutablePeriod0);
      
      int[] intArray0 = gJChronology0.get((ReadablePeriod) mutablePeriod0, (-62135769600034L), (long) 2);
      assertEquals(8, intArray0.length);
      assertEquals("+02:02", dateTimeZone0.getID());
      assertEquals("+02:02", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(2, gJChronology0.getMinimumDaysInFirstWeek());
      assertArrayEquals(new int[] {1969, 0, 0, 0, 0, 0, 0, 36}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(2, 2);
      assertEquals("+02:02", dateTimeZone0.getID());
      assertEquals("+02:02", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 2, 2);
      assertEquals("+02:02", dateTimeZone0.getID());
      assertEquals("+02:02", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(2, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(2, 2, 2, 2);
      assertNotNull(mutablePeriod0);
      
      int[] intArray0 = gJChronology0.get((ReadablePeriod) mutablePeriod0, (-2147483648L), (long) 2);
      assertEquals(8, intArray0.length);
      assertEquals("+02:02", dateTimeZone0.getID());
      assertEquals("+02:02", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(2, gJChronology0.getMinimumDaysInFirstWeek());
      assertArrayEquals(new int[] {0, 1, 0, (-5), (-3), (-28), (-36), (-350)}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (long) 1, 1);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      Period period0 = new Period();
      assertNotNull(period0);
      
      int[] intArray0 = gJChronology0.get((ReadablePeriod) period0, (-1555199999L), 2259L);
      assertEquals(8, intArray0.length);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertArrayEquals(new int[] {0, 1, 0, 0, 0, 0, 2, 258}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (-1555199999L), 2);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals(2, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(2, 2, 2, 2);
      assertNotNull(mutablePeriod0);
      
      int[] intArray0 = gJChronology0.get((ReadablePeriod) mutablePeriod0, (long) 2, (-2147483648L));
      assertEquals(8, intArray0.length);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals(2, gJChronology0.getMinimumDaysInFirstWeek());
      assertArrayEquals(new int[] {0, (-1), 0, 6, 3, 28, 36, 350}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      MonthDay monthDay0 = null;
      try {
        monthDay0 = new MonthDay(2, 29, gJChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 29 for dayOfMonth must not be larger than 28
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldType0, 0, gJChronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      Partial partial0 = new Partial(dateTimeFieldType0, 1, gJChronology0);
      assertEquals(1, partial0.size());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      LocalDate localDate0 = new LocalDate((long) 1, (Chronology) gJChronology0);
      // Undeclared exception!
      try { 
        gJChronology0.set(localDate0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 19 for dayOfMonth is not supported
         //
         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(6, 6);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 365L, 6);
      LocalDateTime localDateTime0 = new LocalDateTime(365L, (Chronology) gJChronology0);
      // Undeclared exception!
      try { 
        Minutes.minutesBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1970 for year is not supported
         //
         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      YearMonth yearMonth0 = YearMonth.now((Chronology) gJChronology0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      DateTime dateTime0 = new DateTime((long) 1, dateTimeZone0);
      Months months0 = Months.monthsBetween((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      YearMonth yearMonth1 = yearMonth0.plus(months0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(2, yearMonth1.getMonthOfYear());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 2, 2);
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[+02:00,cutover=1970-01-01T00:00:00.002Z,mdfw=2]", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[UTC]", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(7);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 7, 7);
      GJChronology gJChronology1 = GJChronology.getInstance();
      boolean boolean0 = gJChronology0.equals(gJChronology1);
      assertFalse(boolean0);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      GJChronology gJChronology1 = GJChronology.getInstance();
      boolean boolean0 = gJChronology0.equals(gJChronology1);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertFalse(boolean0);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      boolean boolean0 = gJChronology0.equals(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 0L, 1);
      boolean boolean0 = gJChronology0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      try { 
        gJChronology0.getDateTimeMillis(2430, 2, 4288, (-1394), (-1431655764), 93, 93);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1394 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      try { 
        gJChronology0.getDateTimeMillis(2, 2, 29, 2, 29, 29, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 29 for dayOfMonth must be in the range [1,28]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      try { 
        gJChronology0.getDateTimeMillis((-1579), 0, 1, 1, (-1304), 1025, 1025);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1304 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      long long0 = gJChronology0.getDateTimeMillis(1, 1, 1, 1);
      assertEquals((-62135769599999L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      YearMonth yearMonth0 = YearMonth.now((Chronology) gJChronology0);
      Interval interval0 = yearMonth0.toInterval();
      assertEquals(1393632000000L, interval0.getEndMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      GJChronology gJChronology1 = (GJChronology)gJChronology0.withZone((DateTimeZone) null);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 1418947200000L, 2);
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) gJChronology0);
      String string0 = localDateTime0.toString();
      assertEquals(2, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("2014-02-01T22:21:21.320", string0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (-12219292800000L), 2);
      assertEquals(2, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Period period0 = Period.minutes(9);
      int[] intArray0 = gJChronology0.get((ReadablePeriod) period0, (long) 9, (-57944419200000L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertArrayEquals(new int[] {(-1836), (-2), 0, (-6), 0, 0, 0, (-9)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      MonthDay monthDay0 = new MonthDay((Chronology) gJChronology0);
      MonthDay monthDay1 = monthDay0.plusDays((-9));
      assertEquals(5, monthDay1.getDayOfMonth());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(2, monthDay1.getMonthOfYear());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (long) 2, 2);
      gJChronology0.hashCode();
      assertEquals(2, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (-62135593138999L), 2);
      LocalDate localDate0 = new LocalDate((-62135593138999L), (Chronology) gJChronology0);
      MutablePeriod mutablePeriod0 = new MutablePeriod(4407, 4407, 1667, 4407, (-1), (-2069), 733, (-2069));
      LocalDate localDate1 = localDate0.plus(mutablePeriod0);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      DateTime dateTime0 = new DateTime((Chronology) null);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0);
      long long0 = gJChronology0.julianToGregorianByWeekyear((-1698L));
      assertEquals((-1209601698L), long0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      gJChronology0.getGregorianCutover();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDate localDate0 = LocalDate.now();
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0);
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[Etc/UTC,cutover=2014-02-14]", string0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      Partial partial0 = new Partial(dateTimeFieldType0, 2, gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Chronology chronology0 = gJChronology0.getBase();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(chronology0);
      long long0 = lenientChronology0.getDateTimeMillis(2, 2, 2, 4, 91, 4, 91);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-62101448935909L), long0);
  }
}
