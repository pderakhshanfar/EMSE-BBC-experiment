/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 13:53:22 GMT 2020
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.MonthDay;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.chrono.AssembledChronology;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GJChronology_ESTest extends GJChronology_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 4, 2);
      assertNotNull(gJChronology0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(2, gJChronology0.getMinimumDaysInFirstWeek());
      
      Days days0 = Days.TWO;
      assertNotNull(days0);
      assertEquals(1, days0.size());
      assertEquals(2, days0.getDays());
      
      Period period0 = days0.toPeriod();
      assertNotNull(period0);
      assertEquals(1, days0.size());
      assertEquals(2, days0.getDays());
      
      int[] intArray0 = gJChronology0.get((ReadablePeriod) period0, 956L, 0L);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, (-956)}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(2, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, days0.size());
      assertEquals(2, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      YearMonth yearMonth0 = new YearMonth((Chronology) gJChronology0);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertNotNull(yearMonth0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(2, yearMonth0.getMonthOfYear());
      
      Years years0 = Years.yearsBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertNotNull(years0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(1, years0.size());
      assertEquals(0, years0.getYears());
      
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (long) 1, 2);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertNotNull(gJChronology1);
      assertNotSame(gJChronology1, gJChronology0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(2, gJChronology1.getMinimumDaysInFirstWeek());
      
      int[] intArray0 = gJChronology1.get((ReadablePeriod) years0, (long) 1, (long) 2);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(gJChronology1, gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(1, years0.size());
      assertEquals(0, years0.getYears());
      assertEquals(2, gJChronology1.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      
      LocalDate localDate0 = new LocalDate(918518400000L, (DateTimeZone) fixedDateTimeZone0);
      assertNotNull(localDate0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals(3, localDate0.size());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime(918518400000L);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertNotNull(mutableDateTime0);
      assertEquals(918518400000L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) mutableDateTime0, 4);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertNotNull(gJChronology0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals(918518400000L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      // Undeclared exception!
      try { 
        gJChronology0.set(localDate0, 100000000000000000L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2 for monthOfYear is not supported
         //
         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      
      LocalDate localDate0 = new LocalDate((-12219292800000L), dateTimeZone0);
      assertNotNull(localDate0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals(3, localDate0.size());
      
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime(dateTimeZone0);
      assertNotNull(dateTime0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals(3, localDate0.size());
      assertEquals((-12219219518680L), dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.minusYears(333);
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals(3, localDate0.size());
      assertEquals((-12219219518680L), dateTime0.getMillis());
      assertEquals((-22727619518680L), dateTime1.getMillis());
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime1, 1);
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertNotNull(gJChronology0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals(3, localDate0.size());
      assertEquals((-12219219518680L), dateTime0.getMillis());
      assertEquals((-22727619518680L), dateTime1.getMillis());
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      
      String string0 = gJChronology0.toString();
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertNotNull(string0);
      assertEquals("GJChronology[Etc/UTC,cutover=1249-10-15T20:21:21.320Z,mdfw=1]", string0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals(3, localDate0.size());
      assertEquals((-12219219518680L), dateTime0.getMillis());
      assertEquals((-22727619518680L), dateTime1.getMillis());
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      
      DateTime dateTime0 = new DateTime((long) 1);
      assertNotNull(dateTime0);
      assertEquals(1L, dateTime0.getMillis());
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0, 1);
      assertNotNull(gJChronology0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals(1L, dateTime0.getMillis());
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertNotNull(gJChronology1);
      assertNotSame(gJChronology1, gJChronology0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      
      boolean boolean0 = gJChronology0.equals(gJChronology1);
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertFalse(boolean0);
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(gJChronology1, gJChronology0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals(1L, dateTime0.getMillis());
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      try { 
        gJChronology0.getDateTimeMillis((-1457), 2, 1277, (-1810), (-1810), 2950, 1277);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1810 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      
      // Undeclared exception!
      try { 
        GJChronology.getInstance(dateTimeZone0, (-62135596799999L), 352831696);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 352831696
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      gJChronology0.assemble(assembledChronology_Fields0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      GJChronology gJChronology1 = (GJChronology)gJChronology0.withUTC();
      assertNotNull(gJChronology1);
      assertSame(gJChronology0, gJChronology1);
      assertSame(gJChronology1, gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) mutableDateTime0);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertNotNull(gJChronology0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      long long0 = gJChronology0.julianToGregorianByYear(1392336000000L);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1391212800000L, long0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Instant instant0 = new Instant();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      DateTimeZone dateTimeZone0 = instant0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      assertNotNull(gJChronology0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      long long0 = gJChronology0.julianToGregorianByYear((-2032L));
      assertEquals((-1123202032L), long0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      long long0 = gJChronology0.julianToGregorianByWeekyear(1209600000L);
      assertEquals(0L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      assertNotNull(dateTimeZone0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 10000000000000000L, 4);
      assertNotNull(gJChronology0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      long long0 = gJChronology0.julianToGregorianByWeekyear(10000000000000000L);
      assertEquals(9999793763200000L, long0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      long long0 = gJChronology0.gregorianToJulianByYear(434L);
      assertEquals(1123200434L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      long long0 = gJChronology0.gregorianToJulianByYear((-12219292800000L));
      assertEquals((-12218428800000L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      long long0 = gJChronology0.gregorianToJulianByWeekyear((-79269926399996L));
      assertEquals((-79239081599996L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) mutableDateTime0, 4);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertNotNull(gJChronology0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertNotNull(instant0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1392409281320L, instant0.getMillis());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(gJChronology0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertNotNull(instant0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-12219292800000L), instant0.getMillis());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      DateTime dateTime0 = new DateTime();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      MutableDateTime mutableDateTime0 = dateTime0.toMutableDateTime();
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertNotNull(gJChronology0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      long long0 = gJChronology0.getDateTimeMillis(23118750, 2, 27, 4811);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(729495121766404811L, long0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      long long0 = gJChronology0.getDateTimeMillis(1, 1, 1, 1);
      assertEquals((-62135769599999L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      // Undeclared exception!
      try { 
        gJChronology0.gregorianToJulianByYear((-62135769599999L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for year is not supported
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      // Undeclared exception!
      try { 
        gJChronology0.gregorianToJulianByWeekyear((-62166355200000L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for year is not supported
         //
         verifyException("org.joda.time.field.SkipDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      // Undeclared exception!
      try { 
        gJChronology0.assemble((AssembledChronology.Fields) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.GJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      long long0 = gJChronology0.getDateTimeMillis(5, 5, 5, 5, 5, 5, 5);
      assertEquals((-61998807294995L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      try { 
        gJChronology0.getDateTimeMillis(0, 0, 0, 0, 0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(gJChronology0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      GJChronology gJChronology1 = (GJChronology)gJChronology0.withZone(fixedDateTimeZone0);
      assertNotNull(gJChronology1);
      assertSame(gJChronology0, gJChronology1);
      assertSame(gJChronology1, gJChronology0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTime dateTime0 = new DateTime(385L);
      assertNotNull(dateTime0);
      assertEquals(385L, dateTime0.getMillis());
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0, 1);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertNotNull(gJChronology1);
      assertNotSame(gJChronology1, gJChronology0);
      assertEquals(385L, dateTime0.getMillis());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, gJChronology1.getMinimumDaysInFirstWeek());
      
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      MonthDay monthDay0 = new MonthDay(385L, (Chronology) gJChronology0);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertNotNull(monthDay0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(2, monthDay0.size());
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(1, monthDay0.getDayOfMonth());
      
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      assertNotNull(dateTimeFormatter0);
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      Integer integer0 = new Integer((-30));
      assertNotNull(integer0);
      assertEquals((-30), (int)integer0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals((-30), (int)dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      
      MutableDateTime mutableDateTime0 = MutableDateTime.parse("", dateTimeFormatter1);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotNull(mutableDateTime0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals((-30), (int)dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      DateTime dateTime1 = monthDay0.toDateTime(mutableDateTime0);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertNotNull(dateTime1);
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(2, monthDay0.size());
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(1, monthDay0.getDayOfMonth());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals((-30), (int)dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, dateTime1.getMillis());
      
      long long0 = gJChronology1.set(monthDay0, 385L);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertEquals(385L, long0);
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(gJChronology1, gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(385L, dateTime0.getMillis());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, gJChronology1.getMinimumDaysInFirstWeek());
      assertEquals(2, monthDay0.size());
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(1, monthDay0.getDayOfMonth());
      
      Integer integer1 = Integer.getInteger("", 1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1, (int)integer1);
      
      boolean boolean0 = gJChronology1.equals("");
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertFalse(boolean0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(gJChronology1, gJChronology0);
      assertEquals(385L, dateTime0.getMillis());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, gJChronology1.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(29);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:00.029", dateTimeZone0.toString());
      assertEquals("+00:00:00.029", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      // Undeclared exception!
      try { 
        GJChronology.getInstance(dateTimeZone0, (ReadableInstant) null, 29);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 29
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      
      DateTime dateTime0 = mutableDateTime0.toDateTimeISO();
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertNotNull(dateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0L, dateTime0.getMillis());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0, 2);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertNotNull(gJChronology0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0L, dateTime0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals(2, gJChronology0.getMinimumDaysInFirstWeek());
      
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertNotNull(instant0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0L, dateTime0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals(2, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0L, instant0.getMillis());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1871));
      assertNotNull(dateTimeZone0);
      assertEquals("-00:00:01.871", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:01.871", dateTimeZone0.toString());
      
      Instant instant0 = new Instant((long) (-1871));
      assertNotNull(instant0);
      assertEquals((-1871L), instant0.getMillis());
      
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime(dateTimeZone0);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertNotNull(mutableDateTime0);
      assertEquals("-00:00:01.871", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:01.871", dateTimeZone0.toString());
      assertEquals((-1871L), instant0.getMillis());
      assertEquals((-1871L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertNotNull(gJChronology0);
      assertEquals("-00:00:01.871", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:01.871", dateTimeZone0.toString());
      assertEquals((-1871L), instant0.getMillis());
      assertEquals((-1871L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      int int0 = gJChronology0.getMinimumDaysInFirstWeek();
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(4, int0);
      assertEquals("-00:00:01.871", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:01.871", dateTimeZone0.toString());
      assertEquals((-1871L), instant0.getMillis());
      assertEquals((-1871L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Instant instant0 = new Instant();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      Years years0 = Years.years(5);
      assertNotNull(years0);
      assertEquals(1, years0.size());
      assertEquals(5, years0.getYears());
      
      DateTimeZone dateTimeZone0 = instant0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 2, 4);
      assertNotNull(gJChronology0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      long long0 = gJChronology0.add((ReadablePeriod) years0, (long) 2, 3);
      assertEquals(473385600002L, long0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1, years0.size());
      assertEquals(5, years0.getYears());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      
      Years years0 = Years.THREE;
      assertNotNull(years0);
      assertEquals(1, years0.size());
      assertEquals(3, years0.getYears());
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 17135452800000L, 2);
      assertNotNull(gJChronology0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals(2, gJChronology0.getMinimumDaysInFirstWeek());
      
      int[] intArray0 = gJChronology0.get((ReadablePeriod) years0, (long) 5, 17135452800000L);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {543}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals(1, years0.size());
      assertEquals(3, years0.getYears());
      assertEquals(2, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      Years years0 = Years.THREE;
      assertNotNull(years0);
      assertEquals(3, years0.getYears());
      assertEquals(1, years0.size());
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 918518400037L, 2);
      assertNotNull(gJChronology0);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(2, gJChronology0.getMinimumDaysInFirstWeek());
      
      int[] intArray0 = gJChronology0.get((ReadablePeriod) years0, 918518400037L, (long) 1);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-29)}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(3, years0.getYears());
      assertEquals(1, years0.size());
      assertEquals(2, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) gJChronology0);
      assertNotNull(localDateTime0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(4, localDateTime0.size());
      
      LocalDate localDate0 = localDateTime0.toLocalDate();
      assertNotNull(localDate0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(4, localDateTime0.size());
      assertEquals(3, localDate0.size());
      
      LocalDate localDate1 = localDate0.withWeekyear(1);
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotNull(localDate1);
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(4, localDateTime0.size());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0, 3);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertNotNull(gJChronology1);
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(gJChronology1, gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(3, gJChronology1.getMinimumDaysInFirstWeek());
      
      LocalDate localDate0 = LocalDate.now((Chronology) gJChronology1);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertNotNull(localDate0);
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(gJChronology1, gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(3, gJChronology1.getMinimumDaysInFirstWeek());
      assertEquals(3, localDate0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      MonthDay monthDay0 = new MonthDay((-2950L), (Chronology) gJChronology0);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(monthDay0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(2, monthDay0.size());
      assertEquals(31, monthDay0.getDayOfMonth());
      assertEquals(12, monthDay0.getMonthOfYear());
      
      MonthDay monthDay1 = monthDay0.withMonthOfYear(2);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertFalse(monthDay1.equals((Object)monthDay0));
      assertNotNull(monthDay1);
      assertNotSame(monthDay0, monthDay1);
      assertNotSame(monthDay1, monthDay0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(2, monthDay0.size());
      assertEquals(31, monthDay0.getDayOfMonth());
      assertEquals(12, monthDay0.getMonthOfYear());
      assertEquals(28, monthDay1.getDayOfMonth());
      assertEquals(2, monthDay1.getMonthOfYear());
      assertEquals(2, monthDay1.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      
      DateTime dateTime0 = new DateTime((long) 1);
      assertNotNull(dateTime0);
      assertEquals(1L, dateTime0.getMillis());
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0, 1);
      assertNotNull(gJChronology0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals(1L, dateTime0.getMillis());
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      
      MonthDay monthDay0 = new MonthDay((long) 1, (Chronology) gJChronology0);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertNotNull(monthDay0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals(1L, dateTime0.getMillis());
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 1;
      buddhistChronology0.validate(monthDay0, intArray0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertArrayEquals(new int[] {1, 1, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals(1L, dateTime0.getMillis());
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      YearMonth yearMonth0 = new YearMonth((long) 2, (Chronology) gJChronology0);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertNotNull(yearMonth0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1970, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(1, yearMonth0.getMonthOfYear());
      
      long long0 = gJChronology0.set(yearMonth0, (-61154870400000L));
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1970, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(1, yearMonth0.getMonthOfYear());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (long) 3, 2);
      LocalDateTime localDateTime0 = new LocalDateTime((-1000L), (DateTimeZone) fixedDateTimeZone0);
      // Undeclared exception!
      try { 
        gJChronology0.set(localDateTime0, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 31 for dayOfMonth is not supported
         //
         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTime dateTime0 = new DateTime((long) 1);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0, 1);
      MonthDay monthDay0 = new MonthDay((-62135769599999L), (Chronology) gJChronology0);
      // Undeclared exception!
      try { 
        gJChronology0.set(monthDay0, 30585600000L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1 for dayOfMonth is not supported
         //
         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0, 5);
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[Etc/UTC,cutover=1970-01-01,mdfw=5]", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[UTC]", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      GJChronology gJChronology1 = GJChronology.getInstance();
      boolean boolean0 = gJChronology0.equals(gJChronology1);
      assertFalse(boolean0);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTime dateTime0 = DateTime.now(dateTimeZone0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 5, 5);
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0, 4);
      boolean boolean0 = gJChronology0.equals(gJChronology1);
      assertEquals(5, gJChronology0.getMinimumDaysInFirstWeek());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      boolean boolean0 = gJChronology0.equals(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      long long0 = gJChronology0.getDateTimeMillis(2622, 3, 1, 5, 2, 2, 0);
      assertEquals(20580238922000L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      try { 
        gJChronology0.getDateTimeMillis((-1), 2, 2, 5, 5, 2, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      try { 
        gJChronology0.getDateTimeMillis(29, 2, 29, 29, 29, 29, 1199);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 29 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      try { 
        gJChronology0.getDateTimeMillis(28, 28, 28, 28, 28, 28, 360);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 28 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTime dateTime0 = new DateTime((long) 1);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0, 1);
      YearMonth yearMonth0 = new YearMonth((-1131L), (Chronology) gJChronology0);
      // Undeclared exception!
      try { 
        yearMonth0.toInterval();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Specified date does not exist
         //
         verifyException("org.joda.time.chrono.GJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      YearMonth yearMonth0 = new YearMonth((-12219292800000L), (Chronology) gJChronology0);
      assertEquals(1582, yearMonth0.getYear());
      
      Interval interval0 = yearMonth0.toInterval();
      assertEquals((-12219638400000L), interval0.getStartMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-12217824000000L), interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      try { 
        gJChronology0.getDateTimeMillis(168, (-142), (-142), 168);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -142 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      GJChronology gJChronology1 = (GJChronology)gJChronology0.withZone((DateTimeZone) null);
      assertNotSame(gJChronology1, gJChronology0);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      // Undeclared exception!
      try { 
        GJChronology.getInstance(dateTimeZone0, (-12219292800000L), 26);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 26
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      MonthDay monthDay0 = new MonthDay((-1460L), (Chronology) gJChronology0);
      MonthDay monthDay1 = monthDay0.minusDays(18);
      assertEquals(13, monthDay1.getDayOfMonth());
      assertEquals(12, monthDay1.getMonthOfYear());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 918518400037L, 2);
      MonthDay monthDay0 = new MonthDay(2, 5, gJChronology0);
      assertEquals(2, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      long long0 = gJChronology0.gregorianToJulianByWeekyear(0L);
      assertEquals(1209600000L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 3, 2);
      gJChronology0.hashCode();
      assertEquals(2, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      EthiopicChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology.getInstance((DateTimeZone) null);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();
      DateTime dateTime0 = new DateTime((long) 1);
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0, 1);
      LocalDate localDate0 = new LocalDate(1, 1, 1, gJChronology0);
      PeriodType periodType0 = PeriodType.yearDayTime();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      MutablePeriod mutablePeriod0 = new MutablePeriod(1, 1320L, periodType0, buddhistChronology0);
      LocalDate localDate1 = localDate0.minus(mutablePeriod0);
      LocalDate localDate2 = localDate1.plusYears(1);
      LocalDate localDate3 = localDate2.withDayOfWeek(1);
      Years years0 = Years.yearsBetween((ReadablePartial) localDate3, (ReadablePartial) localDate0);
      GJChronology gJChronology2 = GJChronology.getInstance(dateTimeZone1, (long) 1, 1);
      gJChronology1.get((ReadablePeriod) years0, 10800000L, (long) 1);
      assertEquals(0, years0.getYears());
      assertSame(gJChronology1, gJChronology2);
      
      GJChronology gJChronology3 = GJChronology.getInstance(dateTimeZone0, 10800000L, 1);
      String string0 = gJChronology3.toString();
      assertEquals("GJChronology[Etc/UTC,cutover=1970-01-01T03:00:00.000Z,mdfw=1]", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      YearMonth yearMonth0 = new YearMonth((-12219292800000L), (Chronology) lenientChronology0);
      Interval interval0 = yearMonth0.toInterval();
      assertEquals((-12217824000000L), interval0.getEndMillis());
      assertEquals((-12219638400000L), interval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      MonthDay monthDay0 = new MonthDay((-62135769599999L), (Chronology) gJChronology0);
      Period period0 = Period.ZERO;
      MonthDay monthDay1 = monthDay0.plus(period0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, monthDay1.getDayOfMonth());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      long long0 = gJChronology0.julianToGregorianByWeekyear(0L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-1209600000L), long0);
  }
}
