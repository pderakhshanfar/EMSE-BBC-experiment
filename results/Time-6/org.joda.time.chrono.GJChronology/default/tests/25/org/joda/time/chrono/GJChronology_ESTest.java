/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 01 17:54:15 GMT 2021
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeZone;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.MonthDay;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePeriod;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.chrono.AssembledChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GJChronology_ESTest extends GJChronology_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(1524, 1524, 352831697, (-644));
      assertNotNull(mutablePeriod0);
      
      int[] intArray0 = gJChronology0.get((ReadablePeriod) mutablePeriod0, (-12219292800000L), (-7666L));
      assertEquals(8, intArray0.length);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {387, 2, 2, 2, 23, 59, 52, 334}, intArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((-2044), 467, 2428, 1);
      assertNotNull(mutablePeriod0);
      
      int[] intArray0 = gJChronology0.get((ReadablePeriod) mutablePeriod0, 613L, (-12219292800000L));
      assertEquals(8, intArray0.length);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-387), (-2), (-2), (-3), 0, 0, 0, (-613)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      DateTime dateTime0 = new DateTime((-12219292800000L), (Chronology) gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-12219292800000L), dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      Years years0 = Years.TWO;
      assertEquals(2, years0.getYears());
      assertEquals(1, years0.size());
      assertNotNull(years0);
      
      DateTime dateTime1 = dateTime0.minus((ReadablePeriod) years0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-12219292800000L), dateTime0.getMillis());
      assertEquals(2, years0.getYears());
      assertEquals(1, years0.size());
      assertEquals((-12281500800000L), dateTime1.getMillis());
      assertNotNull(dateTime1);
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      Instant instant0 = new Instant(0L);
      assertEquals(0L, instant0.getMillis());
      assertNotNull(instant0);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals(0L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertNotNull(mutablePeriod0);
      
      int[] intArray0 = gJChronology0.get((ReadablePeriod) mutablePeriod0, (-27734400000L), 10800000L);
      assertEquals(8, intArray0.length);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals(0L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0, 11, 0, 0, 3, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      Instant instant0 = new Instant(946L);
      assertEquals(946L, instant0.getMillis());
      assertNotNull(instant0);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(946L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(4, (-852), 4, 4);
      assertNotNull(mutablePeriod0);
      
      int[] intArray0 = gJChronology0.get((ReadablePeriod) mutablePeriod0, 946L, (long) (-852));
      assertEquals(8, intArray0.length);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(946L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, (-1), (-798)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Instant instant0 = new Instant(1L);
      assertEquals(1L, instant0.getMillis());
      assertNotNull(instant0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(27);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.027", dateTimeZone0.getID());
      assertEquals("+00:00:00.027", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      assertEquals(1L, instant0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.027", dateTimeZone0.getID());
      assertEquals("+00:00:00.027", dateTimeZone0.toString());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      MonthDay monthDay0 = new MonthDay(31449600000L, (Chronology) gJChronology0);
      assertEquals(1L, instant0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.027", dateTimeZone0.getID());
      assertEquals("+00:00:00.027", dateTimeZone0.toString());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(31, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(12, monthDay0.getMonthOfYear());
      assertNotNull(monthDay0);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      
      // Undeclared exception!
      try { 
        monthDay0.plusMonths(27);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 31 for dayOfMonth is not supported
         //
         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(4, "dayOfYear");
      assertEquals("java.util.SimpleTimeZone[id=dayOfYear,offset=4,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("dayOfYear", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(4, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertNotNull(simpleTimeZone0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0, locale0);
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("java.util.SimpleTimeZone[id=dayOfYear,offset=4,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("dayOfYear", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(4, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=dayOfYear,offset=4,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=324,ZONE_OFFSET=4,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertNotNull(date0);
      
      LocalDate localDate0 = LocalDate.fromDateFields(date0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("java.util.SimpleTimeZone[id=dayOfYear,offset=4,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("dayOfYear", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(4, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=dayOfYear,offset=4,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=324,ZONE_OFFSET=4,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      long long0 = gJChronology0.set(localDate0, 0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("java.util.SimpleTimeZone[id=dayOfYear,offset=4,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("dayOfYear", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(4, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=dayOfYear,offset=4,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=324,ZONE_OFFSET=4,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals(3, localDate0.size());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-12219292800000L), long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now((DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime0);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) mutableDateTime0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      LocalDate localDate0 = new LocalDate();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      // Undeclared exception!
      try { 
        gJChronology0.set(localDate0, 260L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 14 for dayOfMonth is not supported
         //
         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Instant instant0 = GJChronology.DEFAULT_CUTOVER;
      assertEquals((-12219292800000L), instant0.getMillis());
      assertNotNull(instant0);
      
      Instant instant1 = instant0.plus((-3247L));
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals((-12219292803247L), instant1.getMillis());
      assertNotNull(instant1);
      assertFalse(instant1.equals((Object)instant0));
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      
      DateTime dateTime0 = instant1.toDateTime();
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals((-12219292803247L), instant1.getMillis());
      assertEquals((-12219292803247L), dateTime0.getMillis());
      assertNotNull(dateTime0);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime0);
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals((-12219292803247L), instant1.getMillis());
      assertEquals((-12219292803247L), dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      
      String string0 = gJChronology0.toString();
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals((-12219292803247L), instant1.getMillis());
      assertEquals((-12219292803247L), dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(string0);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertEquals("GJChronology[Etc/UTC,cutover=1582-10-14T23:59:56.753Z]", string0);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime0);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) mutableDateTime0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      GJChronology gJChronology1 = GJChronology.getInstance();
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology1);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertNotSame(gJChronology1, gJChronology0);
      
      boolean boolean0 = gJChronology0.equals(gJChronology1);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertFalse(boolean0);
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(gJChronology1, gJChronology0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(1, 2, 2147483623, 1276, 0, 946, gJChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1276 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      try { 
        gJChronology0.getDateTimeMillis(60, (-1198), 2, 60, 292271022, 2014, 60);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 60 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (-62166096007666L), 4);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      gJChronology0.assemble(assembledChronology_Fields0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      GJChronology gJChronology1 = (GJChronology)gJChronology0.withUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology1);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(gJChronology1, gJChronology0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      long long0 = gJChronology0.julianToGregorianByYear(10000000000000000L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(9999793590400000L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, 291L, 3);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals(3, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      long long0 = gJChronology0.julianToGregorianByYear(4);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals(3, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-1123199996L), long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      long long0 = gJChronology0.julianToGregorianByWeekyear(10368000000L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(9158400000L, long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      long long0 = gJChronology0.gregorianToJulianByYear(977L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1123200977L, long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Instant instant0 = Instant.now();
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(instant0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      DateTime dateTime0 = instant0.toDateTime((DateTimeZone) fixedDateTimeZone0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) dateTime0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      long long0 = gJChronology0.gregorianToJulianByYear((-12219292800000L));
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-12218428800000L), long0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      long long0 = gJChronology0.gregorianToJulianByWeekyear(2044L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1209602044L, long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      long long0 = gJChronology0.gregorianToJulianByWeekyear((-62032852555996L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-62032852555996L), long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (long) 0, 3);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(3, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(3, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0L, instant0.getMillis());
      assertNotNull(instant0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) null);
      assertNotNull(gregorianChronology0);
      
      DateTime dateTime0 = new DateTime((Object) null, gregorianChronology0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(instant0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      long long0 = gJChronology0.getDateTimeMillis(292278993, 1, 29, 2052);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(9223371988012802052L, long0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      // Undeclared exception!
      try { 
        gJChronology0.gregorianToJulianByYear(9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 292278994 for year must be in the range [-292269054,292272992]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      // Undeclared exception!
      try { 
        gJChronology0.gregorianToJulianByWeekyear(31449600000L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 53 for weekOfWeekyear must be in the range [1,52]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Instant instant0 = new Instant(9223371988012802242L);
      assertEquals(9223371988012802242L, instant0.getMillis());
      assertNotNull(instant0);
      
      DateTimeZone dateTimeZone0 = instant0.getZone();
      assertEquals(9223371988012802242L, instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      // Undeclared exception!
      try { 
        GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 292278994 for weekyear must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      // Undeclared exception!
      try { 
        GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (long) 1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 0
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      // Undeclared exception!
      try { 
        gJChronology0.assemble((AssembledChronology.Fields) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.GJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      long long0 = gJChronology0.getDateTimeMillis(4, 4, 4, 4, 4, 4, 4);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-62033025355996L), long0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      try { 
        gJChronology0.getDateTimeMillis(4, 4, 4, 4, 4, (-44), 921);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -44 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime0);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      // Undeclared exception!
      try { 
        GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) mutableDateTime0, 292272984);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 292272984
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      Instant instant0 = new Instant(9999999999999976L);
      assertEquals(9999999999999976L, instant0.getMillis());
      assertNotNull(instant0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime(9999999999999976L, (Chronology) islamicChronology0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals(9999999999999976L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Instant instant1 = instant0.plus((long) 5);
      assertEquals(9999999999999976L, instant0.getMillis());
      assertEquals(9999999999999981L, instant1.getMillis());
      assertNotNull(instant1);
      assertFalse(instant1.equals((Object)instant0));
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (long) 0, 3);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals(3, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      String string0 = gJChronology0.toString();
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals(3, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(string0);
      assertEquals("GJChronology[UTC,cutover=1970-01-01,mdfw=3]", string0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      assertFalse(dateTimeZone0.equals((Object)fixedDateTimeZone0));
      assertNotSame(dateTimeZone0, fixedDateTimeZone0);
      
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant1, 5);
      assertEquals(9999999999999976L, instant0.getMillis());
      assertEquals(9999999999999981L, instant1.getMillis());
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(5, gJChronology1.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology1);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(dateTimeZone0.equals((Object)fixedDateTimeZone0));
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertNotSame(dateTimeZone0, fixedDateTimeZone0);
      assertNotSame(gJChronology1, gJChronology0);
      
      String string1 = gJChronology1.toString();
      assertEquals(9999999999999976L, instant0.getMillis());
      assertEquals(9999999999999981L, instant1.getMillis());
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(5, gJChronology1.getMinimumDaysInFirstWeek());
      assertNotNull(string1);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(dateTimeZone0.equals((Object)fixedDateTimeZone0));
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("GJChronology[+00:00:00.001,cutover=318857-05-20T17:46:39.981Z,mdfw=5]", string1);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertNotSame(dateTimeZone0, fixedDateTimeZone0);
      assertNotSame(gJChronology1, gJChronology0);
      
      GJChronology gJChronology2 = (GJChronology)gJChronology0.withZone(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals(3, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(3, gJChronology2.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology2);
      assertFalse(fixedDateTimeZone0.equals((Object)dateTimeZone0));
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(gJChronology2.equals((Object)gJChronology1));
      assertNotSame(fixedDateTimeZone0, dateTimeZone0);
      assertSame(gJChronology0, gJChronology2);
      assertNotSame(gJChronology0, gJChronology1);
      assertSame(gJChronology2, gJChronology0);
      assertNotSame(gJChronology2, gJChronology1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) null, (-2699));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: -2699
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      Instant instant0 = new Instant((-1355L));
      assertEquals((-1355L), instant0.getMillis());
      assertNotNull(instant0);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals((-1355L), instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      Instant instant1 = gJChronology0.getGregorianCutover();
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals((-1355L), instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-1355L), instant1.getMillis());
      assertNotNull(instant1);
      assertSame(instant0, instant1);
      assertSame(instant1, instant0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      int int0 = gJChronology0.getMinimumDaysInFirstWeek();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertNotNull(mutablePeriod0);
      
      int[] intArray0 = gJChronology0.get((ReadablePeriod) mutablePeriod0, (long) 580, (-72915465599947L));
      assertEquals(8, intArray0.length);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-2311), (-7), 0, 0, 0, 0, 0, (-527)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      Period period0 = Period.months(4);
      assertNotNull(period0);
      
      long long0 = gJChronology0.add((ReadablePeriod) period0, (long) 4, 4);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(41904000004L, long0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      Instant instant0 = new Instant(706L);
      assertEquals(706L, instant0.getMillis());
      assertNotNull(instant0);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(706L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      MonthDay monthDay0 = new MonthDay(706L, (Chronology) gJChronology0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(706L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(2, monthDay0.size());
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(1, monthDay0.getMonthOfYear());
      assertNotNull(monthDay0);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      
      MonthDay monthDay1 = monthDay0.minusMonths(3);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(706L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(2, monthDay0.size());
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay1.size());
      assertEquals(10, monthDay1.getMonthOfYear());
      assertEquals(1, monthDay1.getDayOfMonth());
      assertNotNull(monthDay1);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertFalse(monthDay1.equals((Object)monthDay0));
      assertNotSame(monthDay0, monthDay1);
      assertNotSame(monthDay1, monthDay0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      Instant instant0 = new Instant(946L);
      assertEquals(946L, instant0.getMillis());
      assertNotNull(instant0);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(946L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(9, 543, (-1), 9);
      assertNotNull(mutablePeriod0);
      
      int[] intArray0 = gJChronology0.get((ReadablePeriod) mutablePeriod0, 28771200000L, 543L);
      assertEquals(8, intArray0.length);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(946L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0, (-11), 0, 2, 0, 0, 0, 543}, intArray0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now((DateTimeZone) fixedDateTimeZone0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime0);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) mutableDateTime0, 4);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      DateTimeField dateTimeField0 = gJChronology0.yearOfCentury();
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(dateTimeField0);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      mutableDateTime0.setRounding(dateTimeField0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(1, mutableDateTime0.getRoundingMode());
      assertEquals(1389657600000L, mutableDateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Instant instant0 = new Instant();
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0);
      LocalDate localDate0 = LocalDate.now((Chronology) gJChronology0);
      // Undeclared exception!
      try { 
        localDate0.toDateTimeAtCurrentTime((DateTimeZone) fixedDateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1 for dayOfMonth is not supported
         //
         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      MonthDay monthDay0 = new MonthDay((-4952L), (Chronology) gJChronology0);
      MonthDay monthDay1 = monthDay0.withMonthOfYear(6);
      assertEquals(30, monthDay1.getDayOfMonth());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Instant instant0 = new Instant();
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0);
      MonthDay monthDay0 = new MonthDay(706L, (Chronology) gJChronology0);
      MonthDay monthDay1 = monthDay0.withMonthOfYear(1);
      assertEquals(19, monthDay1.getDayOfMonth());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Instant instant0 = new Instant(706L);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0);
      MonthDay monthDay0 = new MonthDay(706L, (Chronology) gJChronology0);
      MonthDay monthDay1 = monthDay0.withMonthOfYear(1);
      assertEquals(1, monthDay1.getDayOfMonth());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Instant instant0 = new Instant(2592000000L);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0);
      MonthDay monthDay0 = new MonthDay((-1292L), (Chronology) gJChronology0);
      MonthDay monthDay1 = monthDay0.plusMonths(1);
      assertEquals(31, monthDay1.getDayOfMonth());
      assertEquals(18, monthDay0.getDayOfMonth());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      MonthDay monthDay0 = MonthDay.now((Chronology) gJChronology0);
      Period period0 = Period.ZERO;
      MonthDay monthDay1 = monthDay0.minus(period0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(14, monthDay1.getDayOfMonth());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Instant instant0 = GJChronology.DEFAULT_CUTOVER;
      DateTime dateTime0 = instant0.toDateTime();
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime0);
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[Etc/UTC]", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      GJChronology gJChronology1 = GJChronology.getInstanceUTC();
      boolean boolean0 = gJChronology1.equals(gJChronology0);
      assertFalse(boolean0);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(2, 1);
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      boolean boolean0 = gJChronology0.equals(gJChronology1);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertFalse(boolean0);
      assertEquals(1, gJChronology1.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      boolean boolean0 = gJChronology0.equals(fixedDateTimeZone0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      boolean boolean0 = gJChronology0.equals(gJChronology0);
      assertTrue(boolean0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, 291L, 3);
      GJChronology gJChronology1 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, 291L, 4);
      boolean boolean0 = gJChronology0.equals(gJChronology1);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      long long0 = gJChronology0.getDateTimeMillis(28181217, 1, 3, 1, 0, 3, 3);
      assertEquals(889251145203603003L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      try { 
        gJChronology0.getDateTimeMillis(2, 2, 2, 101, 2, 2, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 101 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      try { 
        gJChronology0.getDateTimeMillis(2, 2, 29, 2, 2, 29, 29);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 29 for dayOfMonth must be in the range [1,28]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      long long0 = gJChronology0.getDateTimeMillis(4, 4, 4, 4);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-62033039999996L), long0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Instant instant0 = new Instant(665L);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0);
      YearMonth yearMonth0 = new YearMonth(instant0, gJChronology0);
      // Undeclared exception!
      try { 
        yearMonth0.toInterval((DateTimeZone) fixedDateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Specified date does not exist
         //
         verifyException("org.joda.time.chrono.GJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      try { 
        gJChronology0.getDateTimeMillis(884, 884, 884, 884);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 884 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Instant instant0 = new Instant(0L);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0);
      YearMonth yearMonth0 = new YearMonth(instant0, gJChronology0);
      Interval interval0 = yearMonth0.toInterval();
      assertEquals(2678400000L, interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      GJChronology gJChronology1 = (GJChronology)gJChronology0.withZone((DateTimeZone) null);
      assertNotSame(gJChronology1, gJChronology0);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (-12219292800000L), 4);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Period period0 = Period.months(25);
      long long0 = gJChronology0.add((ReadablePeriod) period0, (-12313123199931L), 25);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-10670313599931L), long0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Instant instant0 = new Instant((-1577L));
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0);
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) (-1651));
      int[] intArray0 = gJChronology0.get((ReadablePeriod) mutablePeriod0, (long) (-1651), 63071999914L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertArrayEquals(new int[] {2, 0, 1, 6, 0, 0, 1, 565}, intArray0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      MonthDay monthDay0 = MonthDay.now((Chronology) gJChronology0);
      MonthDay monthDay1 = monthDay0.minusDays(1);
      assertEquals(13, monthDay1.getDayOfMonth());
      assertEquals(2, monthDay1.getMonthOfYear());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (long) 0, 3);
      MonthDay monthDay0 = new MonthDay((long) 0, (Chronology) gJChronology0);
      MonthDay monthDay1 = monthDay0.withMonthOfYear(1);
      assertEquals(1, monthDay1.getDayOfMonth());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      StrictChronology.getInstance(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      gJChronology0.hashCode();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Instant instant0 = new Instant((-1577L));
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0);
      long long0 = gJChronology0.julianToGregorianByWeekyear((-2819L));
      assertEquals((-1209602819L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Instant instant0 = new Instant(31083597720000L);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1439));
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      YearMonth yearMonth0 = new YearMonth(instant0, gJChronology0);
      Period period0 = null;
      try {
        period0 = new Period(yearMonth0, yearMonth0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2954 for year is not supported
         //
         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      DateTime dateTime0 = new DateTime(1239, 1239, (-2999), (-2999), (-2999), lenientChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-20082128340000L), dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Instant instant0 = new Instant((-1577L));
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0);
      LocalDate localDate0 = new LocalDate((Chronology) gJChronology0);
      localDate0.withWeekyear(1391);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      YearMonth yearMonth0 = null;
      try {
        yearMonth0 = new YearMonth(741, 741, gJChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 741 for monthOfYear must not be larger than 12
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }
}
