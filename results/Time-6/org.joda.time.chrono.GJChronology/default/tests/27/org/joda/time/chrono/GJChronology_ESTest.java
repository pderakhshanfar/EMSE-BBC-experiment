/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 01 17:55:42 GMT 2021
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.DurationField;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.chrono.AssembledChronology;
import org.joda.time.chrono.BasicMonthOfYearDateTimeField;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GJYearOfEraDateTimeField;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.field.DelegatedDateTimeField;
import org.joda.time.field.SkipDateTimeField;
import org.joda.time.field.ZeroIsMaxDateTimeField;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GJChronology_ESTest extends GJChronology_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Instant instant0 = new Instant((long) 0);
      assertNotNull(instant0);
      assertEquals(0L, instant0.getMillis());
      
      DateTimeZone dateTimeZone0 = instant0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals(0L, instant0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      assertNotNull(gJChronology0);
      assertEquals(0L, instant0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      DateTimeField dateTimeField0 = gJChronology0.yearOfEra();
      assertNotNull(dateTimeField0);
      assertEquals(0L, instant0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      assertNotNull(delegatedDateTimeField0);
      assertEquals(0L, instant0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("yearOfEra", delegatedDateTimeField0.getName());
      
      int int0 = delegatedDateTimeField0.getMaximumValue((long) 0);
      assertEquals(292278993, int0);
      assertEquals(0L, instant0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("yearOfEra", delegatedDateTimeField0.getName());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      DateTimeField dateTimeField0 = gJChronology0.yearOfCentury();
      assertNotNull(dateTimeField0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertTrue(dateTimeField0.isSupported());
      assertEquals("yearOfCentury", dateTimeField0.getName());
      
      int int0 = dateTimeField0.getMinimumValue((-12219292800000L));
      assertEquals(1, int0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertTrue(dateTimeField0.isSupported());
      assertEquals("yearOfCentury", dateTimeField0.getName());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Instant instant0 = new Instant((long) 0);
      assertNotNull(instant0);
      assertEquals(0L, instant0.getMillis());
      
      DateTimeZone dateTimeZone0 = instant0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals(0L, instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      assertNotNull(gJChronology0);
      assertEquals(0L, instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      DateTimeField dateTimeField0 = gJChronology0.yearOfEra();
      assertNotNull(dateTimeField0);
      assertEquals(0L, instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      assertEquals(0L, instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      GJYearOfEraDateTimeField gJYearOfEraDateTimeField0 = new GJYearOfEraDateTimeField(dateTimeField0, copticChronology0);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(gJYearOfEraDateTimeField0);
      assertEquals(0L, instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("yearOfEra", gJYearOfEraDateTimeField0.getName());
      assertEquals(1, gJYearOfEraDateTimeField0.getMinimumValue());
      assertTrue(gJYearOfEraDateTimeField0.isSupported());
      
      DurationField durationField0 = gJYearOfEraDateTimeField0.getDurationField();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(durationField0);
      assertEquals(0L, instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("yearOfEra", gJYearOfEraDateTimeField0.getName());
      assertEquals(1, gJYearOfEraDateTimeField0.getMinimumValue());
      assertTrue(gJYearOfEraDateTimeField0.isSupported());
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(durationField0, dateTimeZone0);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(zonedChronology_ZonedDurationField0);
      assertEquals(0L, instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("yearOfEra", gJYearOfEraDateTimeField0.getName());
      assertEquals(1, gJYearOfEraDateTimeField0.getMinimumValue());
      assertTrue(gJYearOfEraDateTimeField0.isSupported());
      assertTrue(zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
      
      long long0 = zonedChronology_ZonedDurationField0.getDifferenceAsLong((-2090L), 0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(0L, long0);
      assertEquals(0L, instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("yearOfEra", gJYearOfEraDateTimeField0.getName());
      assertEquals(1, gJYearOfEraDateTimeField0.getMinimumValue());
      assertTrue(gJYearOfEraDateTimeField0.isSupported());
      assertTrue(zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Instant instant0 = new Instant((long) 0);
      assertNotNull(instant0);
      assertEquals(0L, instant0.getMillis());
      
      DateTimeZone dateTimeZone0 = instant0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals(0L, instant0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      assertNotNull(gJChronology0);
      assertEquals(0L, instant0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      DateTimeField dateTimeField0 = gJChronology0.yearOfEra();
      assertNotNull(dateTimeField0);
      assertEquals(0L, instant0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      assertEquals(0L, instant0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      GJYearOfEraDateTimeField gJYearOfEraDateTimeField0 = new GJYearOfEraDateTimeField(dateTimeField0, copticChronology0);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(gJYearOfEraDateTimeField0);
      assertEquals(0L, instant0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertTrue(gJYearOfEraDateTimeField0.isSupported());
      assertEquals(1, gJYearOfEraDateTimeField0.getMinimumValue());
      assertEquals("yearOfEra", gJYearOfEraDateTimeField0.getName());
      
      DurationField durationField0 = gJYearOfEraDateTimeField0.getDurationField();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(durationField0);
      assertEquals(0L, instant0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertTrue(gJYearOfEraDateTimeField0.isSupported());
      assertEquals(1, gJYearOfEraDateTimeField0.getMinimumValue());
      assertEquals("yearOfEra", gJYearOfEraDateTimeField0.getName());
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(durationField0, dateTimeZone0);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(zonedChronology_ZonedDurationField0);
      assertEquals(0L, instant0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertTrue(gJYearOfEraDateTimeField0.isSupported());
      assertEquals(1, gJYearOfEraDateTimeField0.getMinimumValue());
      assertEquals("yearOfEra", gJYearOfEraDateTimeField0.getName());
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
      assertTrue(zonedChronology_ZonedDurationField0.isSupported());
      
      long long0 = zonedChronology_ZonedDurationField0.getDifferenceAsLong(1L, 0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(0L, long0);
      assertEquals(0L, instant0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertTrue(gJYearOfEraDateTimeField0.isSupported());
      assertEquals(1, gJYearOfEraDateTimeField0.getMinimumValue());
      assertEquals("yearOfEra", gJYearOfEraDateTimeField0.getName());
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
      assertTrue(zonedChronology_ZonedDurationField0.isSupported());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Instant instant0 = new Instant((long) 0);
      assertNotNull(instant0);
      assertEquals(0L, instant0.getMillis());
      
      DateTimeZone dateTimeZone0 = instant0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals(0L, instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      assertNotNull(gJChronology0);
      assertEquals(0L, instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      DateTimeField dateTimeField0 = gJChronology0.yearOfEra();
      assertNotNull(dateTimeField0);
      assertEquals(0L, instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      assertEquals(0L, instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      GJYearOfEraDateTimeField gJYearOfEraDateTimeField0 = new GJYearOfEraDateTimeField(dateTimeField0, copticChronology0);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(gJYearOfEraDateTimeField0);
      assertEquals(0L, instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("yearOfEra", gJYearOfEraDateTimeField0.getName());
      assertEquals(1, gJYearOfEraDateTimeField0.getMinimumValue());
      assertTrue(gJYearOfEraDateTimeField0.isSupported());
      
      DurationField durationField0 = gJYearOfEraDateTimeField0.getDurationField();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(durationField0);
      assertEquals(0L, instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("yearOfEra", gJYearOfEraDateTimeField0.getName());
      assertEquals(1, gJYearOfEraDateTimeField0.getMinimumValue());
      assertTrue(gJYearOfEraDateTimeField0.isSupported());
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(durationField0, dateTimeZone0);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(zonedChronology_ZonedDurationField0);
      assertEquals(0L, instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("yearOfEra", gJYearOfEraDateTimeField0.getName());
      assertEquals(1, gJYearOfEraDateTimeField0.getMinimumValue());
      assertTrue(gJYearOfEraDateTimeField0.isSupported());
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
      assertTrue(zonedChronology_ZonedDurationField0.isSupported());
      
      long long0 = zonedChronology_ZonedDurationField0.getDifferenceAsLong(0, 3600L);
      assertEquals(1, CopticChronology.AM);
      assertEquals(0L, long0);
      assertEquals(0L, instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("yearOfEra", gJYearOfEraDateTimeField0.getName());
      assertEquals(1, gJYearOfEraDateTimeField0.getMinimumValue());
      assertTrue(gJYearOfEraDateTimeField0.isSupported());
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
      assertTrue(zonedChronology_ZonedDurationField0.isSupported());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Instant instant0 = new Instant((long) 0);
      assertNotNull(instant0);
      assertEquals(0L, instant0.getMillis());
      
      DateTimeZone dateTimeZone0 = instant0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals(0L, instant0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      assertNotNull(gJChronology0);
      assertEquals(0L, instant0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      DateTimeField dateTimeField0 = gJChronology0.yearOfEra();
      assertNotNull(dateTimeField0);
      assertEquals(0L, instant0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      assertEquals(0L, instant0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      GJYearOfEraDateTimeField gJYearOfEraDateTimeField0 = new GJYearOfEraDateTimeField(dateTimeField0, copticChronology0);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(gJYearOfEraDateTimeField0);
      assertEquals(0L, instant0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("yearOfEra", gJYearOfEraDateTimeField0.getName());
      assertEquals(1, gJYearOfEraDateTimeField0.getMinimumValue());
      assertTrue(gJYearOfEraDateTimeField0.isSupported());
      
      DurationField durationField0 = gJYearOfEraDateTimeField0.getDurationField();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(durationField0);
      assertEquals(0L, instant0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("yearOfEra", gJYearOfEraDateTimeField0.getName());
      assertEquals(1, gJYearOfEraDateTimeField0.getMinimumValue());
      assertTrue(gJYearOfEraDateTimeField0.isSupported());
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(durationField0, dateTimeZone0);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(zonedChronology_ZonedDurationField0);
      assertEquals(0L, instant0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("yearOfEra", gJYearOfEraDateTimeField0.getName());
      assertEquals(1, gJYearOfEraDateTimeField0.getMinimumValue());
      assertTrue(gJYearOfEraDateTimeField0.isSupported());
      assertTrue(zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
      
      long long0 = zonedChronology_ZonedDurationField0.add((long) 0, (long) 0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(0L, long0);
      assertEquals(0L, instant0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("yearOfEra", gJYearOfEraDateTimeField0.getName());
      assertEquals(1, gJYearOfEraDateTimeField0.getMinimumValue());
      assertTrue(gJYearOfEraDateTimeField0.isSupported());
      assertTrue(zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      Months months0 = Months.months(796);
      assertNotNull(months0);
      assertEquals(1, months0.size());
      assertEquals(796, months0.getMonths());
      
      long long0 = gJChronology0.add((ReadablePeriod) months0, (-12219292800000L), 796);
      assertEquals(1654029936000000L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, months0.size());
      assertEquals(796, months0.getMonths());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Instant instant0 = new Instant((long) 0);
      assertNotNull(instant0);
      assertEquals(0L, instant0.getMillis());
      
      DateTimeZone dateTimeZone0 = instant0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals(0L, instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      assertNotNull(gJChronology0);
      assertEquals(0L, instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      PeriodType periodType0 = PeriodType.yearMonthDay();
      assertNotNull(periodType0);
      assertEquals(3, periodType0.size());
      assertEquals("YearMonthDay", periodType0.getName());
      
      Period period0 = new Period((-12243225600000L), 0, periodType0, gJChronology0);
      assertNotNull(period0);
      assertEquals(0L, instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(3, periodType0.size());
      assertEquals("YearMonthDay", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(gJChronology0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      
      PeriodType periodType0 = PeriodType.yearDayTime();
      assertNotNull(periodType0);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      
      Period period0 = new Period(1, (-24L), periodType0, gJChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(period0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Instant instant0 = new Instant((long) 0);
      assertNotNull(instant0);
      assertEquals(0L, instant0.getMillis());
      
      DateTimeZone dateTimeZone0 = instant0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals(0L, instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      assertNotNull(gJChronology0);
      assertEquals(0L, instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      DateTimeField dateTimeField0 = gJChronology0.yearOfEra();
      assertNotNull(dateTimeField0);
      assertEquals(0L, instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, dateTimeZone0, (DurationField) null, (DurationField) null, (DurationField) null);
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      assertEquals(0L, instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertTrue(zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("yearOfEra", zonedChronology_ZonedDateTimeField0.getName());
      
      long long0 = zonedChronology_ZonedDateTimeField0.roundHalfEven((-759L));
      assertEquals(0L, long0);
      assertEquals(0L, instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertTrue(zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("yearOfEra", zonedChronology_ZonedDateTimeField0.getName());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Instant instant0 = new Instant((long) 0);
      assertNotNull(instant0);
      assertEquals(0L, instant0.getMillis());
      
      DateTimeZone dateTimeZone0 = instant0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals(0L, instant0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      assertNotNull(gJChronology0);
      assertEquals(0L, instant0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      DateTimeField dateTimeField0 = gJChronology0.dayOfYear();
      assertNotNull(dateTimeField0);
      assertEquals(0L, instant0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, dateTimeZone0, (DurationField) null, (DurationField) null, (DurationField) null);
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      assertEquals(0L, instant0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("dayOfYear", zonedChronology_ZonedDateTimeField0.getName());
      assertTrue(zonedChronology_ZonedDateTimeField0.isSupported());
      
      long long0 = zonedChronology_ZonedDateTimeField0.roundHalfEven((-1199L));
      assertEquals(0L, long0);
      assertEquals(0L, instant0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("dayOfYear", zonedChronology_ZonedDateTimeField0.getName());
      assertTrue(zonedChronology_ZonedDateTimeField0.isSupported());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      assertNotNull(dateTimeFormatter0);
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTime dateTime0 = dateTimeFormatter0.parseDateTime("");
      assertNotNull(dateTime0);
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(0L, dateTime0.getMillis());
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0);
      assertNotNull(gJChronology0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[UTC,cutover=1970-01-01]", string0);
      assertNotNull(string0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      YearMonth yearMonth0 = new YearMonth((-3488L));
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertNotNull(yearMonth0);
      assertEquals(1969, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(12, yearMonth0.getMonthOfYear());
      
      YearMonth yearMonth1 = yearMonth0.withChronologyRetainFields(gJChronology0);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth1, yearMonth0);
      assertNotNull(yearMonth1);
      assertFalse(yearMonth1.equals((Object)yearMonth0));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1969, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(12, yearMonth0.getMonthOfYear());
      assertEquals(1969, yearMonth1.getYear());
      assertEquals(12, yearMonth1.getMonthOfYear());
      assertEquals(2, yearMonth1.size());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(gJChronology0);
      assertNotNull(dateTimeField0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertTrue(dateTimeField0.isSupported());
      assertEquals("weekOfWeekyear", dateTimeField0.getName());
      
      long long0 = dateTimeField0.addWrapField((-12218428800047L), (-6));
      assertEquals((-12222057600047L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertTrue(dateTimeField0.isSupported());
      assertEquals("weekOfWeekyear", dateTimeField0.getName());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      DateTimeField dateTimeField0 = gJChronology0.hourOfDay();
      assertNotNull(dateTimeField0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("hourOfDay", dateTimeField0.getName());
      assertTrue(dateTimeField0.isSupported());
      
      int int0 = dateTimeField0.getLeapAmount(1);
      assertEquals(0, int0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("hourOfDay", dateTimeField0.getName());
      assertTrue(dateTimeField0.isSupported());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      DateTimeField dateTimeField0 = gJChronology0.halfdayOfDay();
      assertNotNull(dateTimeField0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertTrue(dateTimeField0.isSupported());
      assertEquals("halfdayOfDay", dateTimeField0.getName());
      
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0);
      assertNotNull(skipDateTimeField0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertTrue(dateTimeField0.isSupported());
      assertEquals("halfdayOfDay", dateTimeField0.getName());
      assertEquals(1, skipDateTimeField0.getMinimumValue());
      assertEquals("halfdayOfDay", skipDateTimeField0.getName());
      
      boolean boolean0 = skipDateTimeField0.isLeap((-12219292800000L));
      assertFalse(boolean0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertTrue(dateTimeField0.isSupported());
      assertEquals("halfdayOfDay", dateTimeField0.getName());
      assertEquals(1, skipDateTimeField0.getMinimumValue());
      assertEquals("halfdayOfDay", skipDateTimeField0.getName());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Instant instant0 = new Instant((long) 0);
      assertNotNull(instant0);
      assertEquals(0L, instant0.getMillis());
      
      DateTimeZone dateTimeZone0 = instant0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals(0L, instant0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0, 1);
      assertNotNull(gJChronology0);
      assertEquals(0L, instant0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      
      DateTimeField dateTimeField0 = gJChronology0.yearOfCentury();
      assertNotNull(dateTimeField0);
      assertEquals(0L, instant0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, 92);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      
      DurationField durationField0 = basicMonthOfYearDateTimeField0.getLeapDurationField();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(durationField0);
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, dateTimeZone0, durationField0, durationField0, durationField0);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      assertEquals(0L, instant0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertTrue(zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("yearOfCentury", zonedChronology_ZonedDateTimeField0.getName());
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      long long0 = zonedChronology_ZonedDateTimeField0.set((long) 0, "70", locale0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(0L, long0);
      assertEquals(0L, instant0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertTrue(zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("yearOfCentury", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertNotNull(instant0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-12219292800000L), instant0.getMillis());
      
      LocalDate localDate0 = new LocalDate(instant0);
      assertNotNull(localDate0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals(3, localDate0.size());
      
      LocalTime localTime0 = LocalTime.fromMillisOfDay(21260793600000L, (Chronology) gJChronology0);
      assertNotNull(localTime0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.withFields(localDate0);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotNull(localTime1);
      assertTrue(localTime1.equals((Object)localTime0));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals(3, localDate0.size());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      DateTimeField dateTimeField0 = gJChronology0.hourOfDay();
      assertNotNull(dateTimeField0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("hourOfDay", dateTimeField0.getName());
      assertTrue(dateTimeField0.isSupported());
      
      long long0 = dateTimeField0.addWrapField((-12219292800000L), (-3739));
      assertEquals((-12219274800000L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("hourOfDay", dateTimeField0.getName());
      assertTrue(dateTimeField0.isSupported());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      YearMonth yearMonth0 = new YearMonth((Chronology) gJChronology0);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertNotNull(yearMonth0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(2, yearMonth0.size());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2014, yearMonth0.getYear());
      
      YearMonth yearMonth1 = yearMonth0.minusYears(1);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth1, yearMonth0);
      assertNotNull(yearMonth1);
      assertFalse(yearMonth1.equals((Object)yearMonth0));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(2, yearMonth0.size());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth1.getMonthOfYear());
      assertEquals(2, yearMonth1.size());
      assertEquals(2013, yearMonth1.getYear());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Instant instant0 = new Instant((long) 1);
      assertNotNull(instant0);
      assertEquals(1L, instant0.getMillis());
      
      DateTimeZone dateTimeZone0 = instant0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals(1L, instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0, 1);
      assertNotNull(gJChronology0);
      assertEquals(1L, instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      
      DateTimeField dateTimeField0 = gJChronology0.yearOfCentury();
      assertNotNull(dateTimeField0);
      assertEquals(1L, instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      
      DurationField durationField0 = gJChronology0.millis();
      assertNotNull(durationField0);
      assertEquals(1L, instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1L, durationField0.getUnitMillis());
      assertEquals("millis", durationField0.getName());
      assertTrue(durationField0.isPrecise());
      assertEquals("DurationField[millis]", durationField0.toString());
      assertTrue(durationField0.isSupported());
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, dateTimeZone0, durationField0, durationField0, durationField0);
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      assertEquals(1L, instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1L, durationField0.getUnitMillis());
      assertEquals("millis", durationField0.getName());
      assertTrue(durationField0.isPrecise());
      assertEquals("DurationField[millis]", durationField0.toString());
      assertTrue(durationField0.isSupported());
      assertTrue(zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("yearOfCentury", zonedChronology_ZonedDateTimeField0.getName());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      
      String string0 = zonedChronology_ZonedDateTimeField0.getAsShortText((long) 1, locale0);
      assertEquals("70", string0);
      assertNotNull(string0);
      assertEquals(1L, instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1L, durationField0.getUnitMillis());
      assertEquals("millis", durationField0.getName());
      assertTrue(durationField0.isPrecise());
      assertEquals("DurationField[millis]", durationField0.toString());
      assertTrue(durationField0.isSupported());
      assertTrue(zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("yearOfCentury", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      DateTimeField dateTimeField0 = gJChronology0.yearOfCentury();
      assertNotNull(dateTimeField0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("yearOfCentury", dateTimeField0.getName());
      assertTrue(dateTimeField0.isSupported());
      
      String string0 = dateTimeField0.getAsText((-12219292798786L));
      assertEquals("82", string0);
      assertNotNull(string0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("yearOfCentury", dateTimeField0.getName());
      assertTrue(dateTimeField0.isSupported());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      
      GJChronology gJChronology1 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (long) 3, 3);
      assertNotSame(gJChronology1, gJChronology0);
      assertNotNull(gJChronology1);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals(3, gJChronology1.getMinimumDaysInFirstWeek());
      
      boolean boolean0 = gJChronology1.equals(gJChronology0);
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(gJChronology1, gJChronology0);
      assertFalse(boolean0);
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals(3, gJChronology1.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      try { 
        gJChronology0.getDateTimeMillis(0, 2, 1497, 2014, 2, 12740625, 12740625);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2014 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      try { 
        gJChronology0.getDateTimeMillis(1206, 0, 1206, (-1810), 1145, (-1810), 1145);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1810 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      gJChronology0.assemble(assembledChronology_Fields0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      GJChronology gJChronology1 = (GJChronology)gJChronology0.withUTC();
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(gJChronology1, gJChronology0);
      assertNotNull(gJChronology1);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeZone0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(gJChronology0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      
      long long0 = gJChronology0.julianToGregorianByYear(1123200000L);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0L, long0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(gJChronology0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      
      long long0 = gJChronology0.julianToGregorianByYear(100000000000000L);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(99996803200000L, long0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (long) 1, 4);
      assertNotNull(gJChronology0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      long long0 = gJChronology0.julianToGregorianByYear(4);
      assertEquals((-1123199996L), long0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      long long0 = gJChronology0.julianToGregorianByWeekyear(1209600000L);
      assertEquals(0L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      long long0 = gJChronology0.julianToGregorianByWeekyear(30617280249L);
      assertEquals(29407680249L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      long long0 = gJChronology0.gregorianToJulianByYear(239L);
      assertEquals(1123200239L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      long long0 = gJChronology0.gregorianToJulianByYear((-12219292800000L));
      assertEquals((-12218428800000L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (long) 1, 4);
      assertNotNull(gJChronology0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      long long0 = gJChronology0.gregorianToJulianByWeekyear(1);
      assertEquals(1209600001L, long0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      assertNotNull(dateTimeZone0);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      assertNotNull(dateTimeFormatter0);
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      
      DateTime dateTime0 = dateTimeFormatter0.parseDateTime("");
      assertNotNull(dateTime0);
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(0L, dateTime0.getMillis());
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0);
      assertNotNull(gJChronology0);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertNotNull(instant0);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0L, instant0.getMillis());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      long long0 = gJChronology0.getDateTimeMillis(10000, 5, 5, 1, 5, 1, 685);
      assertEquals(253413104701685L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      assertNotNull(gJChronology0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      long long0 = gJChronology0.getDateTimeMillis(292272984, 2, 2, 76);
      assertEquals(9223182362563200076L, long0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      // Undeclared exception!
      try { 
        gJChronology0.gregorianToJulianByYear((-62135769539999L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for year is not supported
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      // Undeclared exception!
      try { 
        gJChronology0.gregorianToJulianByWeekyear((-62135769539999L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for year is not supported
         //
         verifyException("org.joda.time.field.SkipDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      try { 
        gJChronology0.getDateTimeMillis(1, 0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      DateTimeField dateTimeField0 = gJChronology0.yearOfCentury();
      assertNotNull(dateTimeField0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("yearOfCentury", dateTimeField0.getName());
      assertTrue(dateTimeField0.isSupported());
      
      long long0 = dateTimeField0.roundHalfEven((-12217824000008L));
      assertEquals((-12212553600000L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("yearOfCentury", dateTimeField0.getName());
      assertTrue(dateTimeField0.isSupported());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      // Undeclared exception!
      try { 
        gJChronology0.assemble((AssembledChronology.Fields) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.GJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      long long0 = gJChronology0.getDateTimeMillis(1, 1, 1, 0, 1, 0, 1);
      assertEquals((-62135769539999L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Instant instant0 = new Instant();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      DateTimeZone dateTimeZone0 = instant0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      // Undeclared exception!
      try { 
        GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0, (-1758));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: -1758
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3059);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:03.059", dateTimeZone0.toString());
      assertEquals("+00:00:03.059", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      Instant instant0 = new Instant((Object) null);
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime((Chronology) copticChronology0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0, 1);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertNotNull(gJChronology0);
      assertEquals("+00:00:03.059", dateTimeZone0.toString());
      assertEquals("+00:00:03.059", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      
      Instant instant1 = gJChronology0.getGregorianCutover();
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertNotNull(instant1);
      assertTrue(instant1.equals((Object)instant0));
      assertEquals("+00:00:03.059", dateTimeZone0.toString());
      assertEquals("+00:00:03.059", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1392409281320L, instant1.getMillis());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) null, 1780);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 1780
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertNotNull(instant0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-12219292800000L), instant0.getMillis());
      
      DateTime dateTime0 = instant0.toDateTime((Chronology) gJChronology0);
      assertNotNull(dateTime0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals((-12219292800000L), dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.withMillisOfSecond(0);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertNotNull(dateTime1);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals((-12219292800000L), dateTime0.getMillis());
      assertEquals((-12219292800000L), dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      int int0 = gJChronology0.getMinimumDaysInFirstWeek();
      assertEquals(4, int0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Instant instant0 = new Instant((long) 0);
      assertNotNull(instant0);
      assertEquals(0L, instant0.getMillis());
      
      DateTimeZone dateTimeZone0 = instant0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals(0L, instant0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      assertNotNull(gJChronology0);
      assertEquals(0L, instant0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      DateTimeField dateTimeField0 = gJChronology0.era();
      assertNotNull(dateTimeField0);
      assertEquals(0L, instant0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      assertNotNull(zeroIsMaxDateTimeField0);
      assertEquals(0L, instant0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("hourOfDay", zeroIsMaxDateTimeField0.getName());
      
      DurationField durationField0 = zeroIsMaxDateTimeField0.getLeapDurationField();
      assertNull(durationField0);
      assertEquals(0L, instant0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("hourOfDay", zeroIsMaxDateTimeField0.getName());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      DateTimeField dateTimeField0 = gJChronology0.weekyearOfCentury();
      assertNotNull(dateTimeField0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("weekyearOfCentury", dateTimeField0.getName());
      assertTrue(dateTimeField0.isSupported());
      
      int int0 = dateTimeField0.getMinimumValue(100000000000000L);
      assertEquals(1, int0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("weekyearOfCentury", dateTimeField0.getName());
      assertTrue(dateTimeField0.isSupported());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Instant instant0 = new Instant((long) 1);
      assertNotNull(instant0);
      assertEquals(1L, instant0.getMillis());
      
      DateTimeZone dateTimeZone0 = instant0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals(1L, instant0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0, 1);
      assertNotNull(gJChronology0);
      assertEquals(1L, instant0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      
      DateTimeField dateTimeField0 = gJChronology0.yearOfCentury();
      assertNotNull(dateTimeField0);
      assertEquals(1L, instant0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      
      DurationField durationField0 = gJChronology0.millis();
      assertNotNull(durationField0);
      assertEquals(1L, instant0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertTrue(durationField0.isSupported());
      assertEquals("millis", durationField0.getName());
      assertEquals("DurationField[millis]", durationField0.toString());
      assertTrue(durationField0.isPrecise());
      assertEquals(1L, durationField0.getUnitMillis());
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, dateTimeZone0, durationField0, durationField0, durationField0);
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      assertEquals(1L, instant0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertTrue(durationField0.isSupported());
      assertEquals("millis", durationField0.getName());
      assertEquals("DurationField[millis]", durationField0.toString());
      assertTrue(durationField0.isPrecise());
      assertEquals(1L, durationField0.getUnitMillis());
      assertTrue(zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("yearOfCentury", zonedChronology_ZonedDateTimeField0.getName());
      
      long long0 = zonedChronology_ZonedDateTimeField0.addWrapField((long) 0, 0);
      assertEquals(0L, long0);
      assertEquals(1L, instant0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertTrue(durationField0.isSupported());
      assertEquals("millis", durationField0.getName());
      assertEquals("DurationField[millis]", durationField0.toString());
      assertTrue(durationField0.isPrecise());
      assertEquals(1L, durationField0.getUnitMillis());
      assertTrue(zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("yearOfCentury", zonedChronology_ZonedDateTimeField0.getName());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Instant instant0 = new Instant((long) 0);
      assertNotNull(instant0);
      assertEquals(0L, instant0.getMillis());
      
      DateTimeZone dateTimeZone0 = instant0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals(0L, instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      assertNotNull(gJChronology0);
      assertEquals(0L, instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      DateTimeField dateTimeField0 = gJChronology0.yearOfEra();
      assertNotNull(dateTimeField0);
      assertEquals(0L, instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      assertEquals(0L, instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      
      GJYearOfEraDateTimeField gJYearOfEraDateTimeField0 = new GJYearOfEraDateTimeField(dateTimeField0, copticChronology0);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(gJYearOfEraDateTimeField0);
      assertEquals(0L, instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertTrue(gJYearOfEraDateTimeField0.isSupported());
      assertEquals("yearOfEra", gJYearOfEraDateTimeField0.getName());
      assertEquals(1, gJYearOfEraDateTimeField0.getMinimumValue());
      
      DurationField durationField0 = gJYearOfEraDateTimeField0.getDurationField();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(durationField0);
      assertEquals(0L, instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertTrue(gJYearOfEraDateTimeField0.isSupported());
      assertEquals("yearOfEra", gJYearOfEraDateTimeField0.getName());
      assertEquals(1, gJYearOfEraDateTimeField0.getMinimumValue());
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(durationField0, dateTimeZone0);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(zonedChronology_ZonedDurationField0);
      assertEquals(0L, instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertTrue(gJYearOfEraDateTimeField0.isSupported());
      assertEquals("yearOfEra", gJYearOfEraDateTimeField0.getName());
      assertEquals(1, gJYearOfEraDateTimeField0.getMinimumValue());
      assertTrue(zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
      
      long long0 = zonedChronology_ZonedDurationField0.getDifferenceAsLong((-5346L), (-5346L));
      assertEquals(1, CopticChronology.AM);
      assertEquals(0L, long0);
      assertEquals(0L, instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertTrue(gJYearOfEraDateTimeField0.isSupported());
      assertEquals("yearOfEra", gJYearOfEraDateTimeField0.getName());
      assertEquals(1, gJYearOfEraDateTimeField0.getMinimumValue());
      assertTrue(zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      DurationField durationField0 = gJChronology0.centuries();
      assertNotNull(durationField0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("centuries", durationField0.getName());
      assertTrue(durationField0.isSupported());
      
      long long0 = durationField0.getDifferenceAsLong((-1669L), (-12244003202095L));
      assertEquals(3L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("centuries", durationField0.getName());
      assertTrue(durationField0.isSupported());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Instant instant0 = new Instant((long) 0);
      assertNotNull(instant0);
      assertEquals(0L, instant0.getMillis());
      
      DateTimeZone dateTimeZone0 = instant0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals(0L, instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      assertNotNull(gJChronology0);
      assertEquals(0L, instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      DateTimeField dateTimeField0 = gJChronology0.yearOfEra();
      assertNotNull(dateTimeField0);
      assertEquals(0L, instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      assertEquals(0L, instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      GJYearOfEraDateTimeField gJYearOfEraDateTimeField0 = new GJYearOfEraDateTimeField(dateTimeField0, copticChronology0);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(gJYearOfEraDateTimeField0);
      assertEquals(0L, instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertTrue(gJYearOfEraDateTimeField0.isSupported());
      assertEquals(1, gJYearOfEraDateTimeField0.getMinimumValue());
      assertEquals("yearOfEra", gJYearOfEraDateTimeField0.getName());
      
      DurationField durationField0 = gJYearOfEraDateTimeField0.getDurationField();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(durationField0);
      assertEquals(0L, instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertTrue(gJYearOfEraDateTimeField0.isSupported());
      assertEquals(1, gJYearOfEraDateTimeField0.getMinimumValue());
      assertEquals("yearOfEra", gJYearOfEraDateTimeField0.getName());
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(durationField0, dateTimeZone0);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(zonedChronology_ZonedDurationField0);
      assertEquals(0L, instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertTrue(gJYearOfEraDateTimeField0.isSupported());
      assertEquals(1, gJYearOfEraDateTimeField0.getMinimumValue());
      assertEquals("yearOfEra", gJYearOfEraDateTimeField0.getName());
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
      assertTrue(zonedChronology_ZonedDurationField0.isSupported());
      
      long long0 = zonedChronology_ZonedDurationField0.getDifferenceAsLong((-1L), 1);
      assertEquals(1, CopticChronology.AM);
      assertEquals(0L, long0);
      assertEquals(0L, instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertTrue(gJYearOfEraDateTimeField0.isSupported());
      assertEquals(1, gJYearOfEraDateTimeField0.getMinimumValue());
      assertEquals("yearOfEra", gJYearOfEraDateTimeField0.getName());
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
      assertTrue(zonedChronology_ZonedDurationField0.isSupported());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      Months months0 = Months.SEVEN;
      assertNotNull(months0);
      assertEquals(7, months0.getMonths());
      assertEquals(1, months0.size());
      
      long long0 = gJChronology0.add((ReadablePeriod) months0, (-9223372036854775808L), 3300);
      assertEquals((-9223311288496375808L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(7, months0.getMonths());
      assertEquals(1, months0.size());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      Months months0 = Months.TWO;
      assertNotNull(months0);
      assertEquals(2, months0.getMonths());
      assertEquals(1, months0.size());
      
      long long0 = gJChronology0.add((ReadablePeriod) months0, (long) (-1), (-1));
      assertEquals((-5270400001L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(2, months0.getMonths());
      assertEquals(1, months0.size());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      Months months0 = Months.SEVEN;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      assertEquals(7, months0.getMonths());
      
      long long0 = gJChronology0.add((ReadablePeriod) months0, 0L, (-1500));
      assertEquals((-27611798400000L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, months0.size());
      assertEquals(7, months0.getMonths());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Instant instant0 = new Instant((long) 0);
      assertNotNull(instant0);
      assertEquals(0L, instant0.getMillis());
      
      DateTimeZone dateTimeZone0 = instant0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals(0L, instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      assertNotNull(gJChronology0);
      assertEquals(0L, instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      PeriodType periodType0 = PeriodType.yearMonthDay();
      assertNotNull(periodType0);
      assertEquals(3, periodType0.size());
      assertEquals("YearMonthDay", periodType0.getName());
      
      Period period0 = new Period((-12243225600008L), 0, periodType0, gJChronology0);
      assertNotNull(period0);
      assertEquals(0L, instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(3, periodType0.size());
      assertEquals("YearMonthDay", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      PeriodType periodType0 = PeriodType.years();
      assertNotNull(periodType0);
      assertEquals("Years", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      Period period0 = new Period((-31178271599949L), (-1526L), periodType0, gJChronology0);
      assertNotNull(period0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("Years", periodType0.getName());
      assertEquals(1, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Instant instant0 = new Instant((long) 0);
      assertNotNull(instant0);
      assertEquals(0L, instant0.getMillis());
      
      DateTimeZone dateTimeZone0 = instant0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals(0L, instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      assertNotNull(gJChronology0);
      assertEquals(0L, instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      PeriodType periodType0 = PeriodType.yearMonthDay();
      assertNotNull(periodType0);
      assertEquals("YearMonthDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      
      java.time.LocalDate localDate0 = MockLocalDate.ofYearDay(1, 15);
      assertNotNull(localDate0);
      
      IslamicChronology islamicChronology0 = new IslamicChronology(gJChronology0, localDate0, (IslamicChronology.LeapYearPatternType) null);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      assertEquals(0L, instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      Period period0 = new Period(10000000000L, (-1L), periodType0, islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(period0);
      assertEquals(0L, instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("YearMonthDay", periodType0.getName());
      assertEquals(3, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertNotNull(periodType0);
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      
      Period period0 = new Period(1601L, (-62009539200008L), periodType0, gJChronology0);
      assertNotNull(period0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) gJChronology0);
      assertNotNull(localDateTime0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.withWeekyear(19);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.weekyear();
      long long0 = dateTimeField0.roundHalfEven((-12219292800010L));
      assertEquals((-12212380800000L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.yearOfCentury();
      long long0 = dateTimeField0.roundHalfEven((-27869529599970L));
      assertEquals((-27864259200000L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      DateTimeField dateTimeField0 = gJChronology0.yearOfCentury();
      long long0 = dateTimeField0.roundHalfEven(1);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.yearOfCentury();
      LocalTime localTime0 = new LocalTime(2305L);
      int[] intArray0 = new int[1];
      intArray0[0] = 1334;
      // Undeclared exception!
      try { 
        dateTimeField0.set((ReadablePartial) localTime0, 1334, intArray0, (-2147483646));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(gJChronology0);
      long long0 = dateTimeField0.addWrapField((-12218428800000L), (-899));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-12237782400000L), long0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Instant instant0 = new Instant((long) 0);
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      DateTimeField dateTimeField0 = gJChronology0.era();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, dateTimeZone0, (DurationField) null, (DurationField) null, (DurationField) null);
      int int0 = zonedChronology_ZonedDateTimeField0.getMinimumValue((long) 0);
      assertEquals(1, int0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.hourOfDay();
      int int0 = dateTimeField0.getMinimumValue(412L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.hourOfDay();
      dateTimeField0.getLeapAmount((-12219292800000L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.hourOfDay();
      dateTimeField0.getLeapAmount((-61996320000000L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.weekyearOfCentury();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0);
      skipDateTimeField0.isLeap(1);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.secondOfDay();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0, (-1483));
      skipDateTimeField0.isLeap((-31177785599949L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Instant instant0 = new Instant((long) 1);
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0, 1);
      DateTimeField dateTimeField0 = gJChronology0.yearOfCentury();
      DurationField durationField0 = gJChronology0.millis();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, dateTimeZone0, durationField0, durationField0, durationField0);
      Locale locale0 = Locale.ENGLISH;
      long long0 = zonedChronology_ZonedDateTimeField0.set((long) 0, "70", locale0);
      assertEquals(30412800000L, long0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.hourOfDay();
      Locale locale0 = Locale.CHINA;
      long long0 = dateTimeField0.set((-42521587200010L), "0", locale0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-42521670000010L), long0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Instant instant0 = new Instant((long) 0);
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0, 1);
      DateTimeField dateTimeField0 = gJChronology0.yearOfCentury();
      DurationField durationField0 = gJChronology0.millis();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, dateTimeZone0, durationField0, durationField0, durationField0);
      Locale locale0 = Locale.GERMAN;
      long long0 = zonedChronology_ZonedDateTimeField0.set(31535996678L, "69", locale0);
      assertEquals((-3322L), long0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.yearOfCentury();
      Locale locale0 = Locale.GERMAN;
      long long0 = dateTimeField0.set((-12219292800000L), "70", locale0);
      assertEquals((-12597120000000L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.yearOfCentury();
      Locale locale0 = Locale.CHINA;
      long long0 = dateTimeField0.set(591L, "70", locale0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(591L, long0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      YearMonth yearMonth0 = new YearMonth();
      long long0 = gJChronology0.set(yearMonth0, (-27869529599970L));
      assertEquals(1391212800030L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.dayOfYear();
      // Undeclared exception!
      try { 
        dateTimeField0.addWrapField((-9223372036854775785L), (-3884));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 102 for dayOfYear is not supported
         //
         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      YearMonth yearMonth0 = new YearMonth((-9223372036854775797L), (Chronology) gJChronology0);
      // Undeclared exception!
      try { 
        yearMonth0.minusYears((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -292269055 for year is not supported
         //
         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      YearMonth yearMonth0 = YearMonth.now();
      YearMonth yearMonth1 = yearMonth0.withChronologyRetainFields(gJChronology0);
      MutablePeriod mutablePeriod0 = new MutablePeriod((-963), 286, 286, 1);
      YearMonth yearMonth2 = yearMonth1.withPeriodAdded(mutablePeriod0, (-963));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(2, yearMonth2.getMonthOfYear());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.yearOfCentury();
      Locale locale0 = Locale.CHINA;
      String string0 = dateTimeField0.getAsShortText(591L, locale0);
      assertEquals("70", string0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.yearOfCentury();
      String string0 = dateTimeField0.getAsShortText((-27869529599970L), (Locale) null);
      assertEquals("86", string0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.hourOfDay();
      dateTimeField0.getAsText((-12219292800000L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.yearOfCentury();
      String string0 = dateTimeField0.getAsText((-62008502400000L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("5", string0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[Etc/UTC,cutover=1970-01-01T00:00:00.001Z,mdfw=1]", string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Instant instant0 = new Instant((-42521587200000L));
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[UTC,cutover=0622-07-19]", string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[UTC]", string0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      GJChronology gJChronology1 = GJChronology.getInstanceUTC();
      boolean boolean0 = gJChronology1.equals(gJChronology0);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertFalse(boolean0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Instant instant0 = new Instant((-42521587200000L));
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      boolean boolean0 = gJChronology0.equals(instant0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      boolean boolean0 = gJChronology0.equals(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      try { 
        gJChronology0.getDateTimeMillis(2014, 2, (-3430), 2014, 2014, 2014, 292278993);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2014 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      try { 
        gJChronology0.getDateTimeMillis(2, 2, 29, 29, 2, 2, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 29 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      try { 
        gJChronology0.getDateTimeMillis(2615625, 2615625, 2615625, 2615625, 2615625, 2615625, 2615625);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2615625 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      YearMonth yearMonth0 = new YearMonth((Chronology) gJChronology0);
      Interval interval0 = yearMonth0.toInterval();
      assertEquals(1393632000000L, interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      long long0 = gJChronology0.getDateTimeMillis(1, 1, 1, 0);
      assertEquals((-62135769600000L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      GJChronology gJChronology1 = (GJChronology)gJChronology0.withZone((DateTimeZone) null);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        GJChronology.getInstance((DateTimeZone) null, (-27611798400000L), 1131);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 1131
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(793);
      // Undeclared exception!
      try { 
        GJChronology.getInstance(dateTimeZone0, (-12219292800000L), 793);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 793
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.hourOfDay();
      long long0 = dateTimeField0.getDifferenceAsLong((-1736L), (-1736L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.hourOfDay();
      Locale locale0 = Locale.PRC;
      String string0 = dateTimeField0.getAsText(2305, locale0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("2305", string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.hourOfDay();
      long long0 = dateTimeField0.add(0L, 0L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      MonthDay monthDay0 = MonthDay.now((Chronology) gJChronology0);
      Days days0 = Days.SEVEN;
      MonthDay monthDay1 = monthDay0.plus(days0);
      assertEquals(21, monthDay1.getDayOfMonth());
      assertEquals(2, monthDay1.getMonthOfYear());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      YearMonth yearMonth0 = new YearMonth(5, 5, gJChronology0);
      Interval interval0 = yearMonth0.toInterval();
      assertEquals((-61996492800000L), interval0.getEndMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.hourOfDay();
      Locale locale0 = Locale.FRANCE;
      dateTimeField0.getMaximumTextLength(locale0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Instant instant0 = new Instant((long) 0);
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0, 1);
      DateTimeField dateTimeField0 = gJChronology0.minuteOfHour();
      DurationField durationField0 = gJChronology0.days();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, dateTimeZone0, durationField0, durationField0, durationField0);
      int int0 = zonedChronology_ZonedDateTimeField0.getDifference((-405L), (-405L));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      YearMonth yearMonth0 = new YearMonth(5, 5, gJChronology0);
      DateTimeField dateTimeField0 = gJChronology0.weekyearOfCentury();
      dateTimeField0.getMaximumValue((ReadablePartial) yearMonth0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.yearOfCentury();
      Locale locale0 = Locale.GERMAN;
      dateTimeField0.getMaximumShortTextLength(locale0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      Instant instant0 = new Instant((long) 1);
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0, 1);
      DateTimeField dateTimeField0 = gJChronology0.yearOfCentury();
      DurationField durationField0 = gJChronology0.millis();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, dateTimeZone0, durationField0, durationField0, durationField0);
      int int0 = zonedChronology_ZonedDateTimeField0.getMinimumValue((ReadablePartial) yearMonth0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.hourOfDay();
      Locale locale0 = Locale.KOREA;
      String string0 = dateTimeField0.getAsShortText(1, locale0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.hourOfDay();
      boolean boolean0 = dateTimeField0.isLenient();
      assertFalse(boolean0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      long long0 = gJChronology0.gregorianToJulianByWeekyear((-61996334400023L));
      assertEquals((-61996939200023L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      gJChronology0.hashCode();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) gJChronology0);
      DateTime dateTime0 = localDateTime0.toDateTime(dateTimeZone0);
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0, 1);
      Years years0 = Years.ONE;
      long long0 = gJChronology1.add((ReadablePeriod) years0, (long) 1245, 1245);
      assertEquals(39287289601245L, long0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      try { 
        gJChronology0.getDateTimeMillis(1206, 105, 1440, 1206, 0, 346, 1206);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1206 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Instant instant0 = new Instant((long) 0);
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      GJChronology gJChronology1 = GJChronology.getInstanceUTC();
      boolean boolean0 = gJChronology1.equals(gJChronology0);
      assertFalse(boolean0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertFalse(gJChronology0.equals((Object)gJChronology1));
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      long long0 = gJChronology0.julianToGregorianByWeekyear((-62009539200000L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-62008934400000L), long0);
  }
}
