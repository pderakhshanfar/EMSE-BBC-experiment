/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 13:54:31 GMT 2020
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDateTime;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.chrono.AssembledChronology;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GJEraDateTimeField;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.LimitChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.field.DelegatedDateTimeField;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GJChronology_ESTest extends GJChronology_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Instant instant0 = new Instant(3297L);
      assertEquals(3297L, instant0.getMillis());
      assertNotNull(instant0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime(3297L);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(3297L, mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime0);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, 3297L, 2);
      assertEquals(2, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      try { 
        gJChronology0.getDateTimeMillis(2147483646, 2, 29, (-1), (-3533), 1, 2147483646);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Instant instant0 = new Instant(3272L);
      assertEquals(3272L, instant0.getMillis());
      assertNotNull(instant0);
      
      Interval interval0 = new Interval(instant0, (ReadableDuration) null);
      assertEquals(3272L, instant0.getMillis());
      assertEquals(3272L, interval0.getEndMillis());
      assertEquals(3272L, interval0.getStartMillis());
      assertNotNull(interval0);
      
      Interval interval1 = interval0.withDurationAfterStart((ReadableDuration) null);
      assertEquals(3272L, instant0.getMillis());
      assertEquals(3272L, interval0.getEndMillis());
      assertEquals(3272L, interval0.getStartMillis());
      assertEquals(3272L, interval1.getEndMillis());
      assertEquals(3272L, interval1.getStartMillis());
      assertNotNull(interval1);
      assertSame(interval0, interval1);
      assertSame(interval1, interval0);
      
      DateTime dateTime0 = interval1.getStart();
      assertEquals(3272L, instant0.getMillis());
      assertEquals(3272L, interval0.getEndMillis());
      assertEquals(3272L, interval0.getStartMillis());
      assertEquals(3272L, interval1.getEndMillis());
      assertEquals(3272L, interval1.getStartMillis());
      assertEquals(3272L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      assertSame(interval0, interval1);
      assertSame(interval1, interval0);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime0);
      assertEquals(3272L, instant0.getMillis());
      assertEquals(3272L, interval0.getEndMillis());
      assertEquals(3272L, interval0.getStartMillis());
      assertEquals(3272L, interval1.getEndMillis());
      assertEquals(3272L, interval1.getStartMillis());
      assertEquals(3272L, dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      assertSame(interval0, interval1);
      assertSame(interval1, interval0);
      
      Hours hours0 = Hours.FIVE;
      assertEquals(5, hours0.getHours());
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      assertEquals("centuries", durationFieldType0.getName());
      assertEquals("centuries", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      GJChronology gJChronology1 = GJChronology.getInstance();
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology1);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertNotSame(gJChronology1, gJChronology0);
      
      System.setCurrentTimeMillis(3600000L);
      boolean boolean0 = gJChronology1.equals(gJChronology0);
      assertFalse(boolean0);
      assertEquals(3272L, instant0.getMillis());
      assertEquals(3272L, interval0.getEndMillis());
      assertEquals(3272L, interval0.getStartMillis());
      assertEquals(3272L, interval1.getEndMillis());
      assertEquals(3272L, interval1.getStartMillis());
      assertEquals(3272L, dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertSame(interval0, interval1);
      assertSame(interval1, interval0);
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(gJChronology1, gJChronology0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      Instant instant0 = new Instant((-75546518400000L));
      assertEquals((-75546518400000L), instant0.getMillis());
      assertNotNull(instant0);
      
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals((-75546518400000L), instant0.getMillis());
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology1);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(gJChronology1, gJChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology1);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals((-75546518400000L), instant0.getMillis());
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertNotNull(lenientChronology0);
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(gJChronology1, gJChronology0);
      
      YearMonth yearMonth0 = new YearMonth((-75546518400000L), (Chronology) gJChronology1);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals((-75546518400000L), instant0.getMillis());
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertEquals((-424), yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(1, yearMonth0.getMonthOfYear());
      assertNotNull(yearMonth0);
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      
      // Undeclared exception!
      try { 
        yearMonth0.minusYears(2147483623);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -424 for year is not supported
         //
         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((-1L), (DateTimeZone) null);
      assertEquals((-1L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime0);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      Period period0 = Period.minutes(11);
      assertNotNull(period0);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) mutableDateTime0);
      assertEquals((-1L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      GJChronology gJChronology1 = GJChronology.getInstance((DateTimeZone) null, 30412800000L, 1);
      assertEquals(1, gJChronology1.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology1);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertNotSame(gJChronology1, gJChronology0);
      
      long long0 = gJChronology1.julianToGregorianByWeekyear(86399999L);
      assertEquals((-1123200001L), long0);
      assertEquals(1, gJChronology1.getMinimumDaysInFirstWeek());
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertNotSame(gJChronology1, gJChronology0);
      
      LocalDate localDate0 = new LocalDate(30412800000L, (Chronology) gJChronology1);
      assertEquals(1, gJChronology1.getMinimumDaysInFirstWeek());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      
      int[] intArray0 = gJChronology1.get((ReadablePartial) localDate0, 200L);
      assertArrayEquals(new int[] {1969, 12, 19}, intArray0);
      assertEquals(1, gJChronology1.getMinimumDaysInFirstWeek());
      assertEquals(3, localDate0.size());
      assertNotNull(intArray0);
      assertEquals(3, intArray0.length);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertNotSame(gJChronology1, gJChronology0);
      
      Instant instant0 = gJChronology1.getGregorianCutover();
      assertEquals(1, gJChronology1.getMinimumDaysInFirstWeek());
      assertEquals(30412800000L, instant0.getMillis());
      assertNotNull(instant0);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertNotSame(gJChronology1, gJChronology0);
      
      GJChronology gJChronology2 = GJChronology.getInstance((DateTimeZone) null, (-1L), 5);
      assertEquals(5, gJChronology2.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology2);
      assertFalse(gJChronology2.equals((Object)gJChronology0));
      assertFalse(gJChronology2.equals((Object)gJChronology1));
      assertNotSame(gJChronology2, gJChronology0);
      assertNotSame(gJChronology2, gJChronology1);
      
      LocalDate localDate1 = localDate0.withPeriodAdded(period0, 5);
      assertEquals(1, gJChronology1.getMinimumDaysInFirstWeek());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertFalse(gJChronology1.equals((Object)gJChronology2));
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertNotSame(gJChronology1, gJChronology2);
      assertNotSame(gJChronology1, gJChronology0);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Instant instant0 = new Instant((-1L));
      assertEquals((-1L), instant0.getMillis());
      assertNotNull(instant0);
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime0);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      int int0 = instant0.compareTo((ReadableInstant) mutableDateTime0);
      assertEquals((-1), int0);
      assertEquals((-1L), instant0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      Period period0 = Period.minutes(7);
      assertNotNull(period0);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) instant0);
      assertEquals((-1L), instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      long long0 = gJChronology0.julianToGregorianByWeekyear((-1L));
      assertEquals((-1209600001L), long0);
      assertEquals((-1L), instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      GJChronology gJChronology1 = GJChronology.getInstance((DateTimeZone) null);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology1);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertNotSame(gJChronology1, gJChronology0);
      
      GJChronology gJChronology2 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) instant0, 7);
      assertEquals((-1L), instant0.getMillis());
      assertEquals(7, gJChronology2.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology2);
      assertFalse(gJChronology2.equals((Object)gJChronology1));
      assertFalse(gJChronology2.equals((Object)gJChronology0));
      assertNotSame(gJChronology2, gJChronology1);
      assertNotSame(gJChronology2, gJChronology0);
      
      boolean boolean0 = gJChronology0.equals(gJChronology2);
      assertFalse(boolean0);
      assertEquals((-1L), instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(7, gJChronology2.getMinimumDaysInFirstWeek());
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(gJChronology0.equals((Object)gJChronology2));
      assertFalse(gJChronology2.equals((Object)gJChronology1));
      assertFalse(gJChronology2.equals((Object)gJChronology0));
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(gJChronology0, gJChronology2);
      assertNotSame(gJChronology2, gJChronology1);
      assertNotSame(gJChronology2, gJChronology0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(14);
      assertEquals("+00:00:00.014", dateTimeZone0.getID());
      assertEquals("+00:00:00.014", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals("+00:00:00.014", dateTimeZone0.getID());
      assertEquals("+00:00:00.014", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      assertEquals("centuries", durationFieldType0.getName());
      assertEquals("centuries", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) buddhistChronology0);
      assertEquals("+00:00:00.014", dateTimeZone0.getID());
      assertEquals("+00:00:00.014", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0, 1);
      assertEquals("+00:00:00.014", dateTimeZone0.getID());
      assertEquals("+00:00:00.014", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      LocalDate localDate0 = new LocalDate((long) 1, (Chronology) gJChronology0);
      assertEquals("+00:00:00.014", dateTimeZone0.getID());
      assertEquals("+00:00:00.014", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      int[] intArray0 = localDate0.getValues();
      assertArrayEquals(new int[] {1969, 12, 19}, intArray0);
      assertEquals("+00:00:00.014", dateTimeZone0.getID());
      assertEquals("+00:00:00.014", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(3, localDate0.size());
      assertNotNull(intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      gJChronology0.validate(localDate0, intArray0);
      assertArrayEquals(new int[] {1969, 12, 19}, intArray0);
      assertEquals("+00:00:00.014", dateTimeZone0.getID());
      assertEquals("+00:00:00.014", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(3, localDate0.size());
      assertEquals(3, intArray0.length);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      GJChronology gJChronology1 = GJChronology.getInstance();
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology1);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertNotSame(gJChronology1, gJChronology0);
      
      long long0 = gJChronology1.getDateTimeMillis(86399999, 1, 1, 1);
      assertEquals(2726458454044800001L, long0);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertNotSame(gJChronology1, gJChronology0);
      
      try { 
        gJChronology0.getDateTimeMillis((-1608), 0, 14, 22, 1687, 0, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1687 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      LocalDate localDate0 = new LocalDate((-12219292800000L), (Chronology) gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 4345;
      // Undeclared exception!
      try { 
        localDate0.withField(dateTimeFieldType0, 4345);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 4345 for yearOfCentury must be in the range [1,100]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(120);
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      Instant instant0 = new Instant((long) 1);
      assertEquals(1L, instant0.getMillis());
      assertNotNull(instant0);
      
      Interval interval0 = new Interval(instant0, (ReadableDuration) null);
      assertEquals(1L, instant0.getMillis());
      assertEquals(1L, interval0.getStartMillis());
      assertEquals(1L, interval0.getEndMillis());
      assertNotNull(interval0);
      
      Interval interval1 = new Interval((-78924412800171L), 1);
      assertEquals(1L, interval1.getEndMillis());
      assertEquals((-78924412800171L), interval1.getStartMillis());
      assertNotNull(interval1);
      assertFalse(interval1.equals((Object)interval0));
      
      Period period0 = interval0.toPeriod();
      assertEquals(1L, instant0.getMillis());
      assertEquals(1L, interval0.getStartMillis());
      assertEquals(1L, interval0.getEndMillis());
      assertNotNull(period0);
      assertFalse(interval0.equals((Object)interval1));
      assertNotSame(interval0, interval1);
      
      DateTime dateTime0 = interval0.getStart();
      assertEquals(1L, instant0.getMillis());
      assertEquals(1L, interval0.getStartMillis());
      assertEquals(1L, interval0.getEndMillis());
      assertEquals(1L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      assertFalse(interval0.equals((Object)interval1));
      assertNotSame(interval0, interval1);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0);
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1L, instant0.getMillis());
      assertEquals(1L, interval0.getStartMillis());
      assertEquals(1L, interval0.getEndMillis());
      assertEquals(1L, dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      assertFalse(interval0.equals((Object)interval1));
      assertNotSame(interval0, interval1);
      
      long long0 = gJChronology0.julianToGregorianByWeekyear(1209600000L);
      assertEquals(0L, long0);
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1L, instant0.getMillis());
      assertEquals(1L, interval0.getStartMillis());
      assertEquals(1L, interval0.getEndMillis());
      assertEquals(1L, dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertFalse(interval0.equals((Object)interval1));
      assertNotSame(interval0, interval1);
      
      LocalDate localDate0 = new LocalDate(1209600000L, (Chronology) gJChronology0);
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1L, instant0.getMillis());
      assertEquals(1L, interval0.getStartMillis());
      assertEquals(1L, interval0.getEndMillis());
      assertEquals(1L, dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      assertFalse(interval0.equals((Object)interval1));
      
      int[] intArray0 = gJChronology0.get((ReadablePartial) localDate0, 1L);
      assertArrayEquals(new int[] {1970, 1, 1}, intArray0);
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1L, instant0.getMillis());
      assertEquals(1L, interval0.getStartMillis());
      assertEquals(1L, interval0.getEndMillis());
      assertEquals(1L, dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(3, localDate0.size());
      assertNotNull(intArray0);
      assertEquals(3, intArray0.length);
      assertFalse(interval0.equals((Object)interval1));
      assertNotSame(interval0, interval1);
      
      Instant instant1 = gJChronology0.getGregorianCutover();
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1L, instant0.getMillis());
      assertEquals(1L, interval0.getStartMillis());
      assertEquals(1L, interval0.getEndMillis());
      assertEquals(1L, dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1L, instant1.getMillis());
      assertNotNull(instant1);
      assertFalse(interval0.equals((Object)interval1));
      assertTrue(instant1.equals((Object)instant0));
      assertNotSame(instant0, instant1);
      assertNotSame(interval0, interval1);
      assertNotSame(instant1, instant0);
      
      GJChronology gJChronology1 = GJChronology.getInstance();
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology1);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertNotSame(gJChronology1, gJChronology0);
      
      LocalDate localDate1 = localDate0.withPeriodAdded(period0, 120);
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1L, instant0.getMillis());
      assertEquals(1L, interval0.getStartMillis());
      assertEquals(1L, interval0.getEndMillis());
      assertEquals(1L, dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertTrue(instant0.equals((Object)instant1));
      assertFalse(interval0.equals((Object)interval1));
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertNotSame(instant0, instant1);
      assertNotSame(interval0, interval1);
      assertNotSame(gJChronology0, gJChronology1);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
      
      GJChronology gJChronology2 = GJChronology.getInstance(dateTimeZone0);
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, gJChronology2.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology2);
      assertFalse(gJChronology2.equals((Object)gJChronology0));
      assertFalse(gJChronology2.equals((Object)gJChronology1));
      assertNotSame(gJChronology2, gJChronology0);
      assertNotSame(gJChronology2, gJChronology1);
      
      int int0 = gJChronology2.getMinimumDaysInFirstWeek();
      assertEquals(4, int0);
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, gJChronology2.getMinimumDaysInFirstWeek());
      assertFalse(gJChronology2.equals((Object)gJChronology0));
      assertFalse(gJChronology2.equals((Object)gJChronology1));
      assertNotSame(gJChronology2, gJChronology0);
      assertNotSame(gJChronology2, gJChronology1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      Instant instant0 = new Instant(0L);
      assertEquals(0L, instant0.getMillis());
      assertNotNull(instant0);
      
      Interval interval0 = new Interval(instant0, (ReadableDuration) null);
      assertEquals(0L, instant0.getMillis());
      assertEquals(0L, interval0.getStartMillis());
      assertEquals(0L, interval0.getEndMillis());
      assertNotNull(interval0);
      
      Period period0 = Period.minutes((-2115903005));
      assertNotNull(period0);
      
      DateTime dateTime0 = interval0.getStart();
      assertEquals(0L, instant0.getMillis());
      assertEquals(0L, interval0.getStartMillis());
      assertEquals(0L, interval0.getEndMillis());
      assertEquals(0L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(0L, instant0.getMillis());
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology1);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(gJChronology1, gJChronology0);
      
      DateTime dateTime1 = dateTime0.toDateTime();
      assertEquals(0L, instant0.getMillis());
      assertEquals(0L, interval0.getStartMillis());
      assertEquals(0L, interval0.getEndMillis());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, dateTime1.getMillis());
      assertNotNull(dateTime1);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      
      GJChronology gJChronology2 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime1);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(0L, instant0.getMillis());
      assertEquals(0L, interval0.getStartMillis());
      assertEquals(0L, interval0.getEndMillis());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, dateTime1.getMillis());
      assertEquals(4, gJChronology2.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology2);
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(gJChronology2.equals((Object)gJChronology0));
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(gJChronology0, gJChronology2);
      assertSame(dateTime0, dateTime1);
      assertSame(dateTime1, dateTime0);
      assertSame(gJChronology2, gJChronology1);
      assertNotSame(gJChronology2, gJChronology0);
      
      LocalDate localDate0 = new LocalDate(31536000000L, (Chronology) gJChronology2);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(0L, instant0.getMillis());
      assertEquals(0L, interval0.getStartMillis());
      assertEquals(0L, interval0.getEndMillis());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, dateTime1.getMillis());
      assertEquals(4, gJChronology2.getMinimumDaysInFirstWeek());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(gJChronology0.equals((Object)gJChronology2));
      assertFalse(gJChronology2.equals((Object)gJChronology0));
      
      int[] intArray0 = gJChronology1.get((ReadablePartial) localDate0, 0L);
      assertArrayEquals(new int[] {1970, 1, 1}, intArray0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(0L, instant0.getMillis());
      assertEquals(0L, interval0.getStartMillis());
      assertEquals(0L, interval0.getEndMillis());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertEquals(0L, dateTime1.getMillis());
      assertEquals(4, gJChronology2.getMinimumDaysInFirstWeek());
      assertEquals(3, localDate0.size());
      assertNotNull(intArray0);
      assertEquals(3, intArray0.length);
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(gJChronology0.equals((Object)gJChronology2));
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertFalse(gJChronology2.equals((Object)gJChronology0));
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(gJChronology0, gJChronology2);
      assertSame(dateTime0, dateTime1);
      assertNotSame(gJChronology1, gJChronology0);
      assertSame(gJChronology1, gJChronology2);
      assertSame(dateTime1, dateTime0);
      assertSame(gJChronology2, gJChronology1);
      assertNotSame(gJChronology2, gJChronology0);
      
      DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();
      assertEquals("Etc/UTC", dateTimeZone1.toString());
      assertEquals("Etc/UTC", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertNotNull(dateTimeZone1);
      assertTrue(dateTimeZone1.equals((Object)dateTimeZone0));
      assertNotSame(dateTimeZone1, dateTimeZone0);
      
      Instant instant1 = gJChronology1.getGregorianCutover();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(0L, instant0.getMillis());
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertEquals(0L, instant1.getMillis());
      assertNotNull(instant1);
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(gJChronology0.equals((Object)gJChronology2));
      assertTrue(dateTimeZone0.equals((Object)dateTimeZone1));
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertTrue(instant1.equals((Object)instant0));
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(gJChronology0, gJChronology2);
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(instant0, instant1);
      assertNotSame(gJChronology1, gJChronology0);
      assertSame(gJChronology1, gJChronology2);
      assertNotSame(instant1, instant0);
      
      GJChronology gJChronology3 = GJChronology.getInstance(dateTimeZone1, (ReadableInstant) instant0);
      assertEquals(0L, instant0.getMillis());
      assertEquals("Etc/UTC", dateTimeZone1.toString());
      assertEquals("Etc/UTC", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals(4, gJChronology3.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology3);
      assertTrue(instant0.equals((Object)instant1));
      assertTrue(dateTimeZone1.equals((Object)dateTimeZone0));
      assertFalse(gJChronology3.equals((Object)gJChronology0));
      assertNotSame(instant0, instant1);
      assertNotSame(dateTimeZone1, dateTimeZone0);
      assertSame(gJChronology3, gJChronology1);
      assertNotSame(gJChronology3, gJChronology0);
      assertSame(gJChronology3, gJChronology2);
      
      gJChronology0.validate(localDate0, intArray0);
      assertArrayEquals(new int[] {1970, 1, 1}, intArray0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(0L, instant0.getMillis());
      assertEquals(0L, interval0.getStartMillis());
      assertEquals(0L, interval0.getEndMillis());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertEquals(0L, dateTime1.getMillis());
      assertEquals(4, gJChronology2.getMinimumDaysInFirstWeek());
      assertEquals(3, localDate0.size());
      assertEquals(3, intArray0.length);
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(gJChronology0.equals((Object)gJChronology3));
      assertFalse(gJChronology0.equals((Object)gJChronology2));
      assertTrue(dateTimeZone0.equals((Object)dateTimeZone1));
      assertTrue(instant0.equals((Object)instant1));
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertFalse(gJChronology2.equals((Object)gJChronology0));
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(gJChronology0, gJChronology3);
      assertNotSame(gJChronology0, gJChronology2);
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(instant0, instant1);
      assertSame(dateTime0, dateTime1);
      assertNotSame(gJChronology1, gJChronology0);
      assertSame(gJChronology1, gJChronology2);
      assertSame(gJChronology1, gJChronology3);
      assertSame(dateTime1, dateTime0);
      assertSame(gJChronology2, gJChronology1);
      assertNotSame(gJChronology2, gJChronology0);
      assertSame(gJChronology2, gJChronology3);
      
      int int0 = gJChronology1.getMinimumDaysInFirstWeek();
      assertEquals(4, int0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(0L, instant0.getMillis());
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(gJChronology0.equals((Object)gJChronology3));
      assertFalse(gJChronology0.equals((Object)gJChronology2));
      assertTrue(dateTimeZone0.equals((Object)dateTimeZone1));
      assertTrue(instant0.equals((Object)instant1));
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(gJChronology0, gJChronology3);
      assertNotSame(gJChronology0, gJChronology2);
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(instant0, instant1);
      assertNotSame(gJChronology1, gJChronology0);
      assertSame(gJChronology1, gJChronology2);
      assertSame(gJChronology1, gJChronology3);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 120;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(120);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      Instant instant0 = new Instant(1L);
      assertEquals(1L, instant0.getMillis());
      assertNotNull(instant0);
      
      Interval interval0 = new Interval(instant0, (ReadableDuration) null);
      assertEquals(1L, instant0.getMillis());
      assertEquals(1L, interval0.getEndMillis());
      assertEquals(1L, interval0.getStartMillis());
      assertNotNull(interval0);
      
      Interval interval1 = new Interval(1, 31578552000L);
      assertEquals(31578552000L, interval1.getEndMillis());
      assertEquals(1L, interval1.getStartMillis());
      assertNotNull(interval1);
      assertFalse(interval1.equals((Object)interval0));
      
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      Interval interval2 = localDate0.toInterval(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals(3, localDate0.size());
      assertEquals(1392422399880L, interval2.getEndMillis());
      assertEquals(1392335999880L, interval2.getStartMillis());
      assertNotNull(interval2);
      assertFalse(interval2.equals((Object)interval0));
      assertFalse(interval2.equals((Object)interval1));
      assertNotSame(interval2, interval0);
      assertNotSame(interval2, interval1);
      
      Period period0 = interval2.toPeriod();
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals(3, localDate0.size());
      assertEquals(1392422399880L, interval2.getEndMillis());
      assertEquals(1392335999880L, interval2.getStartMillis());
      assertNotNull(period0);
      assertFalse(interval2.equals((Object)interval0));
      assertFalse(interval2.equals((Object)interval1));
      assertNotSame(interval2, interval0);
      assertNotSame(interval2, interval1);
      
      DateTime dateTime0 = interval0.getStart();
      assertEquals(1L, instant0.getMillis());
      assertEquals(1L, interval0.getEndMillis());
      assertEquals(1L, interval0.getStartMillis());
      assertEquals(1L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      assertFalse(interval0.equals((Object)interval1));
      assertFalse(interval0.equals((Object)interval2));
      assertNotSame(interval0, interval1);
      assertNotSame(interval0, interval2);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals(1L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      // Undeclared exception!
      try { 
        gJChronology0.julianToGregorianByWeekyear((-78924412800171L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 53 for weekOfWeekyear must be in the range [1,52]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      Instant instant0 = new Instant(3272L);
      assertEquals(3272L, instant0.getMillis());
      assertNotNull(instant0);
      
      Interval interval0 = new Interval(instant0, (ReadableDuration) null);
      assertEquals(3272L, instant0.getMillis());
      assertEquals(3272L, interval0.getStartMillis());
      assertEquals(3272L, interval0.getEndMillis());
      assertNotNull(interval0);
      
      Interval interval1 = interval0.withDurationAfterStart((ReadableDuration) null);
      assertEquals(3272L, instant0.getMillis());
      assertEquals(3272L, interval0.getStartMillis());
      assertEquals(3272L, interval0.getEndMillis());
      assertEquals(3272L, interval1.getEndMillis());
      assertEquals(3272L, interval1.getStartMillis());
      assertNotNull(interval1);
      assertSame(interval0, interval1);
      assertSame(interval1, interval0);
      
      DateTime dateTime0 = interval1.getStart();
      assertEquals(3272L, instant0.getMillis());
      assertEquals(3272L, interval0.getStartMillis());
      assertEquals(3272L, interval0.getEndMillis());
      assertEquals(3272L, interval1.getEndMillis());
      assertEquals(3272L, interval1.getStartMillis());
      assertEquals(3272L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      assertSame(interval0, interval1);
      assertSame(interval1, interval0);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) instant0);
      assertEquals(3272L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      long long0 = gJChronology0.julianToGregorianByWeekyear(3272L);
      assertEquals((-1209596728L), long0);
      assertEquals(3272L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      LocalDate localDate0 = new LocalDate(1421L, (Chronology) gJChronology0);
      assertEquals(3272L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      int[] intArray0 = gJChronology0.get((ReadablePartial) localDate0, 1421L);
      assertArrayEquals(new int[] {1969, 12, 19}, intArray0);
      assertEquals(3272L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(3, localDate0.size());
      assertNotNull(intArray0);
      assertEquals(3, intArray0.length);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      Instant instant1 = gJChronology0.getGregorianCutover();
      assertEquals(3272L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(3272L, instant1.getMillis());
      assertNotNull(instant1);
      assertTrue(instant1.equals((Object)instant0));
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology1);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertNotSame(gJChronology1, gJChronology0);
      
      PeriodType periodType0 = PeriodType.time();
      assertEquals("Time", periodType0.getName());
      assertEquals(4, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.yearMonthDay();
      assertEquals("YearMonthDay", periodType1.getName());
      assertEquals(3, periodType1.size());
      assertNotNull(periodType1);
      assertFalse(periodType1.equals((Object)periodType0));
      assertNotSame(periodType1, periodType0);
      
      Period period0 = new Period((-1209596728L), periodType0, (Chronology) gJChronology1);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertEquals("Time", periodType0.getName());
      assertEquals(4, periodType0.size());
      assertNotNull(period0);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertFalse(periodType0.equals((Object)periodType1));
      
      Period period1 = period0.normalizedStandard(periodType0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertEquals("Time", periodType0.getName());
      assertEquals(4, periodType0.size());
      assertNotNull(period1);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertFalse(periodType0.equals((Object)periodType1));
      assertTrue(period1.equals((Object)period0));
      assertNotSame(gJChronology1, gJChronology0);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      
      LocalDate localDate1 = localDate0.withCenturyOfEra(2269);
      assertEquals(3, localDate1.size());
      assertEquals(3272L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate1);
      assertFalse(localDate1.equals((Object)localDate0));
      assertTrue(instant0.equals((Object)instant1));
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertNotSame(localDate1, localDate0);
      assertNotSame(instant0, instant1);
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(localDate0, localDate1);
      
      // Undeclared exception!
      try { 
        gJChronology1.validate(localDate0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 19 for dayOfMonth must not be larger than 18
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Instant instant0 = new Instant(3275L);
      assertEquals(3275L, instant0.getMillis());
      assertNotNull(instant0);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) instant0);
      assertEquals(3275L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      assertEquals(3275L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(lenientChronology0);
      
      GJChronology gJChronology1 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) instant0);
      assertEquals(3275L, instant0.getMillis());
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology1);
      assertSame(gJChronology1, gJChronology0);
      
      Period period0 = new Period(2144845461, (-1115L), gJChronology0);
      assertEquals(3275L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(period0);
      
      Instant instant1 = gJChronology1.getGregorianCutover();
      assertEquals(3275L, instant0.getMillis());
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertEquals(3275L, instant1.getMillis());
      assertNotNull(instant1);
      assertSame(instant0, instant1);
      assertSame(gJChronology1, gJChronology0);
      assertSame(instant1, instant0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      GJChronology gJChronology1 = GJChronology.getInstance();
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology1);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertNotSame(gJChronology1, gJChronology0);
      
      boolean boolean0 = gJChronology0.equals(gJChronology1);
      assertFalse(boolean0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(gJChronology1, gJChronology0);
      
      GJChronology gJChronology2 = (GJChronology)gJChronology0.withUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(4, gJChronology2.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology2);
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(gJChronology2.equals((Object)gJChronology1));
      assertSame(gJChronology0, gJChronology2);
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(gJChronology2, gJChronology1);
      assertSame(gJChronology2, gJChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)gJChronology1.getZone();
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("Etc/UTC", fixedDateTimeZone0.getID());
      assertEquals("Etc/UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertFalse(gJChronology1.equals((Object)gJChronology2));
      assertNotSame(gJChronology1, gJChronology0);
      assertNotSame(gJChronology1, gJChronology2);
      
      DateTimeZone.setDefault(fixedDateTimeZone0);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("Etc/UTC", fixedDateTimeZone0.getID());
      assertEquals("Etc/UTC", fixedDateTimeZone0.toString());
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertFalse(gJChronology1.equals((Object)gJChronology2));
      assertNotSame(gJChronology1, gJChronology0);
      assertNotSame(gJChronology1, gJChronology2);
      
      long long0 = gJChronology0.julianToGregorianByWeekyear((-79239513600000L));
      assertEquals((-79270358400000L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertSame(gJChronology0, gJChronology2);
      assertNotSame(gJChronology0, gJChronology1);
      
      LocalDate localDate0 = new LocalDate(1L, (Chronology) gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      
      int[] intArray0 = gJChronology0.get((ReadablePartial) localDate0, (-79270358400000L));
      assertArrayEquals(new int[] {(-543), 1, 15}, intArray0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(3, localDate0.size());
      assertNotNull(intArray0);
      assertEquals(3, intArray0.length);
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertSame(gJChronology0, gJChronology2);
      assertNotSame(gJChronology0, gJChronology1);
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.getDefault();
      assertTrue(fixedDateTimeZone1.isFixed());
      assertEquals("Etc/UTC", fixedDateTimeZone1.toString());
      assertEquals("Etc/UTC", fixedDateTimeZone1.getID());
      assertNotNull(fixedDateTimeZone1);
      assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
      
      Instant instant0 = gJChronology2.getGregorianCutover();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(4, gJChronology2.getMinimumDaysInFirstWeek());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertNotNull(instant0);
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(gJChronology2.equals((Object)gJChronology1));
      assertSame(gJChronology0, gJChronology2);
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(gJChronology2, gJChronology1);
      assertSame(gJChronology2, gJChronology0);
      
      DateTime dateTime0 = DateTime.now((Chronology) gJChronology2);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(4, gJChronology2.getMinimumDaysInFirstWeek());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(gJChronology2.equals((Object)gJChronology1));
      assertSame(gJChronology0, gJChronology2);
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(gJChronology2, gJChronology1);
      assertSame(gJChronology2, gJChronology0);
      
      DateTime dateTime1 = dateTime0.withWeekyear(89);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(4, gJChronology2.getMinimumDaysInFirstWeek());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals((-59354912318680L), dateTime1.getMillis());
      assertNotNull(dateTime1);
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(gJChronology2.equals((Object)gJChronology1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertSame(gJChronology0, gJChronology2);
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(gJChronology2, gJChronology1);
      assertSame(gJChronology2, gJChronology0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      
      GJChronology gJChronology3 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone1, (ReadableInstant) dateTime1);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(4, gJChronology2.getMinimumDaysInFirstWeek());
      assertTrue(fixedDateTimeZone1.isFixed());
      assertEquals("Etc/UTC", fixedDateTimeZone1.toString());
      assertEquals("Etc/UTC", fixedDateTimeZone1.getID());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals((-59354912318680L), dateTime1.getMillis());
      assertEquals(4, gJChronology3.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology3);
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(gJChronology2.equals((Object)gJChronology1));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(gJChronology3.equals((Object)gJChronology2));
      assertFalse(gJChronology3.equals((Object)gJChronology1));
      assertFalse(gJChronology3.equals((Object)gJChronology0));
      assertNotSame(gJChronology0, gJChronology3);
      assertSame(gJChronology0, gJChronology2);
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(gJChronology2, gJChronology3);
      assertNotSame(gJChronology2, gJChronology1);
      assertSame(gJChronology2, gJChronology0);
      assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(gJChronology3, gJChronology2);
      assertNotSame(gJChronology3, gJChronology1);
      assertNotSame(gJChronology3, gJChronology0);
      
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 89;
      intArray1[1] = 89;
      intArray1[2] = 89;
      intArray1[3] = 89;
      intArray1[4] = 89;
      intArray1[5] = 89;
      intArray1[6] = 89;
      intArray1[7] = 89;
      intArray1[8] = 89;
      // Undeclared exception!
      try { 
        gJChronology1.validate(localDate0, intArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 89 for monthOfYear must not be larger than 12
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Instant instant0 = new Instant(3296L);
      assertEquals(3296L, instant0.getMillis());
      assertNotNull(instant0);
      
      Interval interval0 = new Interval(instant0, (ReadableDuration) null);
      assertEquals(3296L, instant0.getMillis());
      assertEquals(3296L, interval0.getEndMillis());
      assertEquals(3296L, interval0.getStartMillis());
      assertNotNull(interval0);
      
      Interval interval1 = interval0.withEndMillis(3296L);
      assertEquals(3296L, instant0.getMillis());
      assertEquals(3296L, interval0.getEndMillis());
      assertEquals(3296L, interval0.getStartMillis());
      assertEquals(3296L, interval1.getStartMillis());
      assertEquals(3296L, interval1.getEndMillis());
      assertNotNull(interval1);
      assertSame(interval0, interval1);
      assertSame(interval1, interval0);
      
      DateTime dateTime0 = interval1.getStart();
      assertEquals(3296L, instant0.getMillis());
      assertEquals(3296L, interval0.getEndMillis());
      assertEquals(3296L, interval0.getStartMillis());
      assertEquals(3296L, interval1.getStartMillis());
      assertEquals(3296L, interval1.getEndMillis());
      assertEquals(3296L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      assertSame(interval0, interval1);
      assertSame(interval1, interval0);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime0);
      assertEquals(3296L, instant0.getMillis());
      assertEquals(3296L, interval0.getEndMillis());
      assertEquals(3296L, interval0.getStartMillis());
      assertEquals(3296L, interval1.getStartMillis());
      assertEquals(3296L, interval1.getEndMillis());
      assertEquals(3296L, dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      assertSame(interval0, interval1);
      assertSame(interval1, interval0);
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) gJChronology0);
      assertEquals(3296L, instant0.getMillis());
      assertEquals(3296L, interval0.getEndMillis());
      assertEquals(3296L, interval0.getStartMillis());
      assertEquals(3296L, interval1.getStartMillis());
      assertEquals(3296L, interval1.getEndMillis());
      assertEquals(3296L, dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime0);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertSame(interval0, interval1);
      assertSame(interval1, interval0);
      
      GJChronology gJChronology1 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) instant0, 4);
      assertEquals(3296L, instant0.getMillis());
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology1);
      assertSame(gJChronology1, gJChronology0);
      
      long long0 = gJChronology0.gregorianToJulianByYear((-1123200000L));
      assertEquals(0L, long0);
      assertEquals(3296L, instant0.getMillis());
      assertEquals(3296L, interval0.getEndMillis());
      assertEquals(3296L, interval0.getStartMillis());
      assertEquals(3296L, interval1.getStartMillis());
      assertEquals(3296L, interval1.getEndMillis());
      assertEquals(3296L, dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertSame(interval0, interval1);
      assertSame(interval1, interval0);
      assertSame(gJChronology0, gJChronology1);
      
      Instant instant1 = new Instant();
      assertEquals(1392409281320L, instant1.getMillis());
      assertNotNull(instant1);
      assertFalse(instant1.equals((Object)instant0));
      
      try { 
        gJChronology1.getDateTimeMillis(1927, 292279006, (-276), 623191204, (-760), 623191204, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 623191204 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(120);
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      Instant instant0 = new Instant((long) 120);
      assertEquals(120L, instant0.getMillis());
      assertNotNull(instant0);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals(120L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals(120L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(lenientChronology0);
      
      long long0 = lenientChronology0.getDateTimeMillis((-2206), (-1), (-1), 120);
      assertEquals((-131757321600000L), long0);
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals(120L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      Chronology chronology0 = lenientChronology0.withZone(dateTimeZone0);
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals(120L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(chronology0);
      assertTrue(chronology0.equals((Object)lenientChronology0));
      assertNotSame(lenientChronology0, chronology0);
      assertNotSame(chronology0, lenientChronology0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      Period period0 = new Period(15778476000L, (-2206), ethiopicChronology0);
      assertNotNull(period0);
      assertEquals(1, EthiopicChronology.EE);
      
      GJChronology gJChronology1 = GJChronology.getInstance();
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology1);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertNotSame(gJChronology1, gJChronology0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((-2596L));
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-2596L), mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime0);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.minuteOfDay();
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-2596L), mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime_Property0);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-2596L), mutableDateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-2596L), mutableDateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(lenientChronology0);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      Months months0 = Months.months((-814));
      assertEquals((-814), months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      LenientChronology lenientChronology1 = LenientChronology.getInstance(gJChronology0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-2596L), mutableDateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(lenientChronology1);
      assertTrue(lenientChronology1.equals((Object)lenientChronology0));
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertNotSame(lenientChronology1, lenientChronology0);
      
      int[] intArray0 = lenientChronology1.get((ReadablePeriod) months0, 1L, (-79268889603635L));
      assertArrayEquals(new int[] {(-30155)}, intArray0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-2596L), mutableDateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-814), months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(lenientChronology1.equals((Object)lenientChronology0));
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertNotSame(lenientChronology1, lenientChronology0);
      
      Chronology chronology0 = lenientChronology1.withZone((DateTimeZone) null);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-2596L), mutableDateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(chronology0);
      assertTrue(lenientChronology1.equals((Object)lenientChronology0));
      assertTrue(chronology0.equals((Object)lenientChronology0));
      assertTrue(chronology0.equals((Object)lenientChronology1));
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertNotSame(lenientChronology1, lenientChronology0);
      assertNotSame(lenientChronology1, chronology0);
      assertNotSame(chronology0, lenientChronology0);
      assertNotSame(chronology0, lenientChronology1);
      
      Period period0 = new Period((-2596L), 2, lenientChronology1);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-2596L), mutableDateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(period0);
      assertTrue(lenientChronology1.equals((Object)lenientChronology0));
      assertTrue(lenientChronology1.equals((Object)chronology0));
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      GJChronology gJChronology1 = GJChronology.getInstance();
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology1);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertNotSame(gJChronology1, gJChronology0);
      
      // Undeclared exception!
      try { 
        GJChronology.getInstance((DateTimeZone) null, (long) 3, 460);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 460
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(120);
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTime dateTime0 = new DateTime((long) 1, dateTimeZone0);
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals(1L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      DateTime dateTime1 = dateTime0.minusDays(120);
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals(1L, dateTime0.getMillis());
      assertEquals((-10367999999L), dateTime1.getMillis());
      assertNotNull(dateTime1);
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      assertEquals("centuries", durationFieldType0.getName());
      assertEquals("centuries", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      DateTime dateTime2 = dateTime1.withFieldAdded(durationFieldType0, (-544));
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals(1L, dateTime0.getMillis());
      assertEquals((-10367999999L), dateTime1.getMillis());
      assertEquals("centuries", durationFieldType0.getName());
      assertEquals("centuries", durationFieldType0.toString());
      assertEquals((-1716708556799999L), dateTime2.getMillis());
      assertNotNull(dateTime2);
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      
      int int0 = dateTimeZone0.getOffset((ReadableInstant) dateTime1);
      assertEquals(120, int0);
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals(1L, dateTime0.getMillis());
      assertEquals((-10367999999L), dateTime1.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime2);
      
      DateTimeZone dateTimeZone1 = buddhistChronology0.getZone();
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals("+00:00:00.120", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone1.toString());
      assertNotNull(dateTimeZone1);
      assertTrue(dateTimeZone1.equals((Object)dateTimeZone0));
      assertEquals(1, BuddhistChronology.BE);
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTimeZone1, dateTimeZone0);
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) buddhistChronology0);
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime0);
      assertTrue(dateTimeZone0.equals((Object)dateTimeZone1));
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertNotSame(dateTimeZone0, dateTimeZone1);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone1, (ReadableInstant) mutableDateTime0, 1);
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals("+00:00:00.120", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone1.toString());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      assertTrue(dateTimeZone0.equals((Object)dateTimeZone1));
      assertTrue(dateTimeZone1.equals((Object)dateTimeZone0));
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTimeZone1, dateTimeZone0);
      
      long long0 = gJChronology0.gregorianToJulianByYear(1);
      assertEquals(1123200001L, long0);
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals("+00:00:00.120", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone1.toString());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertTrue(dateTimeZone0.equals((Object)dateTimeZone1));
      assertTrue(dateTimeZone1.equals((Object)dateTimeZone0));
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTimeZone1, dateTimeZone0);
      
      Instant instant0 = new Instant();
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(instant0);
      
      Integer integer0 = new Integer(276);
      assertEquals(276, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      long long1 = gJChronology0.julianToGregorianByWeekyear(2);
      assertEquals((-1209599998L), long1);
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals("+00:00:00.120", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone1.toString());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertTrue(dateTimeZone0.equals((Object)dateTimeZone1));
      assertTrue(dateTimeZone1.equals((Object)dateTimeZone0));
      assertFalse(long1 == long0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTimeZone1, dateTimeZone0);
      
      Years years0 = Years.years(1412);
      assertEquals(1412, years0.getYears());
      assertEquals(1, years0.size());
      assertNotNull(years0);
      
      long long2 = gJChronology0.add((ReadablePeriod) years0, (-1630L), 3);
      assertEquals(133674105598370L, long2);
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals("+00:00:00.120", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone1.toString());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1412, years0.getYears());
      assertEquals(1, years0.size());
      assertTrue(dateTimeZone0.equals((Object)dateTimeZone1));
      assertTrue(dateTimeZone1.equals((Object)dateTimeZone0));
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTimeZone1, dateTimeZone0);
      
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[+00:00:00.120,cutover=2014-02-14T20:21:21.320Z,mdfw=1]", string0);
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals("+00:00:00.120", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone1.toString());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(string0);
      assertTrue(dateTimeZone0.equals((Object)dateTimeZone1));
      assertTrue(dateTimeZone1.equals((Object)dateTimeZone0));
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTimeZone1, dateTimeZone0);
      
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((-79268889603644L));
      assertEquals((-79268889603644L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime0);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) mutableDateTime0);
      assertEquals((-79268889603644L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      assertEquals((-79268889603644L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(lenientChronology0);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      long long0 = lenientChronology0.getDateTimeMillis((-1446), (-1), 5, (-2655));
      assertEquals((-107773027202655L), long0);
      assertEquals((-79268889603644L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      Chronology chronology0 = lenientChronology0.withZone((DateTimeZone) null);
      assertEquals((-79268889603644L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(chronology0);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertSame(lenientChronology0, chronology0);
      assertSame(chronology0, lenientChronology0);
      
      Period period0 = new Period((-2596L), (-12219292800000L), lenientChronology0);
      assertEquals((-79268889603644L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(period0);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      GJChronology gJChronology1 = GJChronology.getInstance();
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology1);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertNotSame(gJChronology1, gJChronology0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(120);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      boolean boolean0 = dateTimeZone0.isFixed();
      assertTrue(boolean0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((-42521587200000L), dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-42521587200000L), mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime0);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-42521587200000L), mutableDateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      long long0 = gJChronology0.julianToGregorianByWeekyear(120);
      assertEquals((-1209599880L), long0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-42521587200000L), mutableDateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      gJChronology0.hashCode();
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-42521587200000L), mutableDateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[+00:00:00.120,cutover=0622-07-19]", string0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-42521587200000L), mutableDateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(string0);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      gJChronology0.hashCode();
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-42521587200000L), mutableDateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      GJChronology gJChronology1 = GJChronology.getInstance();
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology1);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertNotSame(gJChronology1, gJChronology0);
      
      boolean boolean1 = gJChronology1.equals(gJChronology0);
      assertFalse(boolean1);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-42521587200000L), mutableDateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertFalse(boolean1 == boolean0);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(gJChronology1, gJChronology0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Instant instant0 = new Instant((-201L));
      assertEquals((-201L), instant0.getMillis());
      assertNotNull(instant0);
      
      DateTimeZone dateTimeZone0 = instant0.getZone();
      assertEquals((-201L), instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      assertEquals((-201L), instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      long long0 = gJChronology0.julianToGregorianByWeekyear(0L);
      assertEquals((-1209600000L), long0);
      assertEquals((-201L), instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField(copticChronology0);
      assertEquals("era", gJEraDateTimeField0.getName());
      assertFalse(gJEraDateTimeField0.isLenient());
      assertEquals(1, gJEraDateTimeField0.getMaximumValue());
      assertEquals(0, gJEraDateTimeField0.getMinimumValue());
      assertTrue(gJEraDateTimeField0.isSupported());
      assertNotNull(gJEraDateTimeField0);
      assertEquals(1, CopticChronology.AM);
      
      long long1 = gJEraDateTimeField0.roundHalfFloor((-932L));
      assertEquals((-53174534400000L), long1);
      assertEquals("era", gJEraDateTimeField0.getName());
      assertFalse(gJEraDateTimeField0.isLenient());
      assertEquals(1, gJEraDateTimeField0.getMaximumValue());
      assertEquals(0, gJEraDateTimeField0.getMinimumValue());
      assertTrue(gJEraDateTimeField0.isSupported());
      assertFalse(long1 == long0);
      assertEquals(1, CopticChronology.AM);
      
      boolean boolean0 = instant0.isEqual(0L);
      assertFalse(boolean0);
      assertEquals((-201L), instant0.getMillis());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
      assertEquals((-201L), instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime0);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      int int0 = instant0.compareTo((ReadableInstant) mutableDateTime0);
      assertEquals((-1), int0);
      assertEquals((-201L), instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      assembledChronology_Fields0.weekyearOfCentury = (DateTimeField) gJEraDateTimeField0;
      assertEquals("era", gJEraDateTimeField0.getName());
      assertFalse(gJEraDateTimeField0.isLenient());
      assertEquals(1, gJEraDateTimeField0.getMaximumValue());
      assertEquals(0, gJEraDateTimeField0.getMinimumValue());
      assertTrue(gJEraDateTimeField0.isSupported());
      
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(gJEraDateTimeField0);
      assertEquals("era", gJEraDateTimeField0.getName());
      assertFalse(gJEraDateTimeField0.isLenient());
      assertEquals(1, gJEraDateTimeField0.getMaximumValue());
      assertEquals(0, gJEraDateTimeField0.getMinimumValue());
      assertTrue(gJEraDateTimeField0.isSupported());
      assertEquals("era", delegatedDateTimeField0.getName());
      assertNotNull(delegatedDateTimeField0);
      assertEquals(1, CopticChronology.AM);
      
      assembledChronology_Fields0.dayOfWeek = (DateTimeField) delegatedDateTimeField0;
      assertEquals("era", gJEraDateTimeField0.getName());
      assertFalse(gJEraDateTimeField0.isLenient());
      assertEquals(1, gJEraDateTimeField0.getMaximumValue());
      assertEquals(0, gJEraDateTimeField0.getMinimumValue());
      assertTrue(gJEraDateTimeField0.isSupported());
      assertEquals("era", delegatedDateTimeField0.getName());
      
      gJChronology0.assemble(assembledChronology_Fields0);
      assertEquals((-201L), instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      GJChronology gJChronology1 = (GJChronology)gJChronology0.withZone(dateTimeZone0);
      assertEquals((-201L), instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology1);
      assertSame(gJChronology0, gJChronology1);
      assertSame(gJChronology1, gJChronology0);
      
      GJChronology gJChronology2 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0, 6);
      assertEquals(6, gJChronology2.getMinimumDaysInFirstWeek());
      assertEquals((-201L), instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(gJChronology2);
      assertFalse(gJChronology2.equals((Object)gJChronology1));
      assertFalse(gJChronology2.equals((Object)gJChronology0));
      assertNotSame(gJChronology2, gJChronology1);
      assertNotSame(gJChronology2, gJChronology0);
      
      gJChronology0.assemble(assembledChronology_Fields0);
      assertEquals((-201L), instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertFalse(gJChronology0.equals((Object)gJChronology2));
      assertSame(gJChronology0, gJChronology1);
      assertNotSame(gJChronology0, gJChronology2);
      
      GJChronology gJChronology3 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      assertEquals((-201L), instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, gJChronology3.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology3);
      assertFalse(gJChronology3.equals((Object)gJChronology2));
      assertNotSame(gJChronology3, gJChronology2);
      assertSame(gJChronology3, gJChronology0);
      assertSame(gJChronology3, gJChronology1);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.getDefault();
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("Etc/UTC", fixedDateTimeZone0.getID());
      assertEquals("Etc/UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      assertFalse(fixedDateTimeZone0.equals((Object)dateTimeZone0));
      assertNotSame(fixedDateTimeZone0, dateTimeZone0);
      
      LocalDate localDate0 = LocalDate.now((Chronology) copticChronology0);
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      assertEquals(1, CopticChronology.AM);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = 3;
      intArray0[2] = 4;
      gJChronology0.validate(localDate0, intArray0);
      assertArrayEquals(new int[] {(-1), 3, 4}, intArray0);
      assertEquals((-201L), instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(3, localDate0.size());
      assertEquals(3, intArray0.length);
      assertFalse(dateTimeZone0.equals((Object)fixedDateTimeZone0));
      assertFalse(gJChronology0.equals((Object)gJChronology2));
      assertEquals(1, CopticChronology.AM);
      assertNotSame(dateTimeZone0, fixedDateTimeZone0);
      assertSame(gJChronology0, gJChronology3);
      assertSame(gJChronology0, gJChronology1);
      assertNotSame(gJChronology0, gJChronology2);
      
      System.setCurrentTimeMillis(3);
      String string0 = gJChronology2.toString();
      assertEquals("GJChronology[UTC,cutover=1969-12-31T23:59:59.799Z,mdfw=6]", string0);
      assertEquals(6, gJChronology2.getMinimumDaysInFirstWeek());
      assertEquals((-201L), instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(string0);
      assertFalse(gJChronology2.equals((Object)gJChronology3));
      assertFalse(gJChronology2.equals((Object)gJChronology1));
      assertFalse(gJChronology2.equals((Object)gJChronology0));
      assertFalse(dateTimeZone0.equals((Object)fixedDateTimeZone0));
      assertNotSame(gJChronology2, gJChronology3);
      assertNotSame(gJChronology2, gJChronology1);
      assertNotSame(gJChronology2, gJChronology0);
      assertNotSame(dateTimeZone0, fixedDateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      MutableDateTime mutableDateTime0 = new MutableDateTime((-2596L));
      assertEquals((-2596L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime0);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) mutableDateTime0);
      assertEquals((-2596L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(3, 2, 91, 2872, 1, 2, 2872, gJChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2872 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((-2596L));
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-2596L), mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime0);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.minuteOfDay();
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-2596L), mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime_Property0);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-2596L), mutableDateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-2596L), mutableDateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(lenientChronology0);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      Chronology chronology0 = lenientChronology0.withZone((DateTimeZone) null);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-2596L), mutableDateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(chronology0);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertSame(lenientChronology0, chronology0);
      assertSame(chronology0, lenientChronology0);
      
      Period period0 = new Period((-79268889603644L), (-2596L), chronology0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-2596L), mutableDateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(period0);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      Instant instant0 = new Instant(14L);
      assertEquals(14L, instant0.getMillis());
      assertNotNull(instant0);
      
      Interval interval0 = new Interval(instant0, (ReadableDuration) null);
      assertEquals(14L, instant0.getMillis());
      assertEquals(14L, interval0.getEndMillis());
      assertEquals(14L, interval0.getStartMillis());
      assertNotNull(interval0);
      
      Interval interval1 = new Interval(14L, 14L);
      assertEquals(14L, interval1.getStartMillis());
      assertEquals(14L, interval1.getEndMillis());
      assertNotNull(interval1);
      assertFalse(interval1.equals((Object)interval0));
      
      Interval interval2 = new Interval(instant0, (ReadableDuration) null);
      assertEquals(14L, instant0.getMillis());
      assertEquals(14L, interval2.getStartMillis());
      assertEquals(14L, interval2.getEndMillis());
      assertNotNull(interval2);
      assertFalse(interval2.equals((Object)interval1));
      assertTrue(interval2.equals((Object)interval0));
      
      Period period0 = interval2.toPeriod();
      assertEquals(14L, instant0.getMillis());
      assertEquals(14L, interval2.getStartMillis());
      assertEquals(14L, interval2.getEndMillis());
      assertNotNull(period0);
      assertFalse(interval2.equals((Object)interval1));
      assertTrue(interval2.equals((Object)interval0));
      assertNotSame(interval2, interval1);
      assertNotSame(interval2, interval0);
      
      DateTime dateTime0 = interval2.getStart();
      assertEquals(14L, instant0.getMillis());
      assertEquals(14L, interval2.getStartMillis());
      assertEquals(14L, interval2.getEndMillis());
      assertEquals(14L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      assertFalse(interval2.equals((Object)interval1));
      assertTrue(interval2.equals((Object)interval0));
      assertNotSame(interval2, interval1);
      assertNotSame(interval2, interval0);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) instant0);
      assertEquals(14L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      Period period1 = new Period(14L, (-1L), gJChronology0);
      assertEquals(14L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      LimitChronology limitChronology0 = LimitChronology.getInstance(gJChronology0, (ReadableDateTime) null, (ReadableDateTime) null);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(limitChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(fixedDateTimeZone0, dateTimeZone0);
      assertSame(dateTimeZone0, fixedDateTimeZone0);
      
      DateTime dateTime0 = new DateTime(787L, dateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(787L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      assertEquals(1, BuddhistChronology.BE);
      
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      assertEquals("centuries", durationFieldType0.getName());
      assertEquals("centuries", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      DateTime dateTime1 = DateTime.now();
      assertEquals(1392409281320L, dateTime1.getMillis());
      assertNotNull(dateTime1);
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertNotSame(dateTime1, dateTime0);
      
      GJChronology gJChronology1 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology1);
      assertSame(gJChronology1, gJChronology0);
      
      YearMonth yearMonth0 = new YearMonth((Chronology) gJChronology1);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertEquals(2, yearMonth0.size());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertNotNull(yearMonth0);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      
      int[] intArray0 = gJChronology1.get((ReadablePartial) yearMonth0, (-697L));
      assertArrayEquals(new int[] {1969, 12}, intArray0);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertEquals(2, yearMonth0.size());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertNotNull(intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertSame(gJChronology1, gJChronology0);
      
      DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("Etc/UTC", dateTimeZone1.getID());
      assertEquals("Etc/UTC", dateTimeZone1.toString());
      assertNotNull(dateTimeZone1);
      assertFalse(dateTimeZone1.equals((Object)dateTimeZone0));
      assertFalse(dateTimeZone1.equals((Object)fixedDateTimeZone0));
      assertNotSame(dateTimeZone1, dateTimeZone0);
      assertNotSame(dateTimeZone1, fixedDateTimeZone0);
      
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertNotNull(instant0);
      assertSame(gJChronology0, gJChronology1);
      
      try { 
        gJChronology1.getDateTimeMillis(1, 2, 1, 28, 21, 56, (-482));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 28 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      boolean boolean0 = gJChronology0.equals("");
      assertFalse(boolean0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      Period period0 = new Period(5097600000L, (-12219292800000L), gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(period0);
      
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      gJChronology0.hashCode();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      GJChronology gJChronology1 = GJChronology.getInstance();
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology1);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertNotSame(gJChronology1, gJChronology0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime0);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNotNull(dateTimeFormatter0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals("UTC", dateTimeZone1.toString());
      assertNotNull(dateTimeZone1);
      assertFalse(dateTimeZone1.equals((Object)dateTimeZone0));
      assertNotSame(dateTimeZone1, dateTimeZone0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone1);
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals("GMT", timeZone0.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeZone1.equals((Object)dateTimeZone0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeZone1, dateTimeZone0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      
      Instant instant0 = Instant.parse("", dateTimeFormatter1);
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals("GMT", timeZone0.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(0L, instant0.getMillis());
      assertNotNull(instant0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeZone1.equals((Object)dateTimeZone0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeZone1, dateTimeZone0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      
      Duration duration0 = new Duration(1360L, (-727L));
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals((-2087L), duration0.getMillis());
      assertEquals((-2L), duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertNotNull(duration0);
      
      Instant instant1 = instant0.plus((ReadableDuration) duration0);
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals("GMT", timeZone0.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(0L, instant0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals((-2087L), duration0.getMillis());
      assertEquals((-2L), duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals((-2087L), instant1.getMillis());
      assertNotNull(instant1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeZone1.equals((Object)dateTimeZone0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(instant1.equals((Object)instant0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeZone1, dateTimeZone0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant1);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals("GMT", timeZone0.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(0L, instant0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals((-2087L), duration0.getMillis());
      assertEquals((-2L), duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals((-2087L), instant1.getMillis());
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology1);
      assertFalse(dateTimeZone0.equals((Object)dateTimeZone1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeZone1.equals((Object)dateTimeZone0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeZone1, dateTimeZone0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertNotSame(gJChronology1, gJChronology0);
      
      long long0 = gJChronology1.julianToGregorianByWeekyear(3801600000L);
      assertEquals(2592000000L, long0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals("GMT", timeZone0.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertTrue(dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertEquals(0L, instant0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals((-2087L), duration0.getMillis());
      assertEquals((-2L), duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals((-2087L), instant1.getMillis());
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertFalse(dateTimeZone0.equals((Object)dateTimeZone1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeZone1.equals((Object)dateTimeZone0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeZone1, dateTimeZone0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertNotSame(gJChronology1, gJChronology0);
      
      Hours hours0 = Hours.FIVE;
      assertEquals(5, hours0.getHours());
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      LocalDate localDate0 = new LocalDate((-12219292800000L), (Chronology) gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 0
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(120);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      Instant instant0 = new Instant((long) 120);
      assertEquals(120L, instant0.getMillis());
      assertNotNull(instant0);
      
      Interval interval0 = new Interval(instant0, (ReadableDuration) null);
      assertEquals(120L, instant0.getMillis());
      assertEquals(120L, interval0.getStartMillis());
      assertEquals(120L, interval0.getEndMillis());
      assertNotNull(interval0);
      
      Interval interval1 = interval0.withDurationAfterStart((ReadableDuration) null);
      assertEquals(120L, instant0.getMillis());
      assertEquals(120L, interval0.getStartMillis());
      assertEquals(120L, interval0.getEndMillis());
      assertEquals(120L, interval1.getStartMillis());
      assertEquals(120L, interval1.getEndMillis());
      assertNotNull(interval1);
      assertSame(interval0, interval1);
      assertSame(interval1, interval0);
      
      DateTime dateTime0 = interval0.getStart();
      assertEquals(120L, instant0.getMillis());
      assertEquals(120L, interval0.getStartMillis());
      assertEquals(120L, interval0.getEndMillis());
      assertEquals(120L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      assertSame(interval0, interval1);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals(120L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      long long0 = gJChronology0.julianToGregorianByWeekyear(120);
      assertEquals((-1209599880L), long0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals(120L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      Hours hours0 = Hours.FIVE;
      assertEquals(5, hours0.getHours());
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      LocalDate localDate0 = new LocalDate((-1414L), (Chronology) gJChronology0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals(120L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      int[] intArray0 = gJChronology0.get((ReadablePartial) localDate0, (-1209599880L));
      assertArrayEquals(new int[] {1969, 12, 5}, intArray0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals(120L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(3, localDate0.size());
      assertNotNull(intArray0);
      assertEquals(3, intArray0.length);
      
      DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();
      assertEquals("Etc/UTC", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("Etc/UTC", dateTimeZone1.getID());
      assertNotNull(dateTimeZone1);
      assertFalse(dateTimeZone1.equals((Object)dateTimeZone0));
      assertNotSame(dateTimeZone1, dateTimeZone0);
      
      Instant instant1 = gJChronology0.getGregorianCutover();
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals(120L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(120L, instant1.getMillis());
      assertNotNull(instant1);
      assertFalse(dateTimeZone0.equals((Object)dateTimeZone1));
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertSame(instant0, instant1);
      assertSame(instant1, instant0);
      
      gJChronology0.validate(localDate0, intArray0);
      assertArrayEquals(new int[] {1969, 12, 5}, intArray0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals(120L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(3, localDate0.size());
      assertEquals(3, intArray0.length);
      assertFalse(dateTimeZone0.equals((Object)dateTimeZone1));
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertSame(instant0, instant1);
      
      System.setCurrentTimeMillis((-42521587200000L));
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[+00:00:00.120,cutover=1970-01-01T00:00:00.120Z]", string0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals(120L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(string0);
      assertFalse(dateTimeZone0.equals((Object)dateTimeZone1));
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertSame(instant0, instant1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      Instant instant0 = new Instant(3272L);
      assertEquals(3272L, instant0.getMillis());
      assertNotNull(instant0);
      
      Interval interval0 = new Interval(instant0, (ReadableDuration) null);
      assertEquals(3272L, instant0.getMillis());
      assertEquals(3272L, interval0.getEndMillis());
      assertEquals(3272L, interval0.getStartMillis());
      assertNotNull(interval0);
      
      Interval interval1 = interval0.withDurationAfterStart((ReadableDuration) null);
      assertEquals(3272L, instant0.getMillis());
      assertEquals(3272L, interval0.getEndMillis());
      assertEquals(3272L, interval0.getStartMillis());
      assertEquals(3272L, interval1.getEndMillis());
      assertEquals(3272L, interval1.getStartMillis());
      assertNotNull(interval1);
      assertSame(interval0, interval1);
      assertSame(interval1, interval0);
      
      DateTime dateTime0 = interval1.getStart();
      assertEquals(3272L, instant0.getMillis());
      assertEquals(3272L, interval0.getEndMillis());
      assertEquals(3272L, interval0.getStartMillis());
      assertEquals(3272L, interval1.getEndMillis());
      assertEquals(3272L, interval1.getStartMillis());
      assertEquals(3272L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      assertSame(interval0, interval1);
      assertSame(interval1, interval0);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime0);
      assertEquals(3272L, instant0.getMillis());
      assertEquals(3272L, interval0.getEndMillis());
      assertEquals(3272L, interval0.getStartMillis());
      assertEquals(3272L, interval1.getEndMillis());
      assertEquals(3272L, interval1.getStartMillis());
      assertEquals(3272L, dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      assertSame(interval0, interval1);
      assertSame(interval1, interval0);
      
      long long0 = gJChronology0.julianToGregorianByWeekyear(3272L);
      assertEquals((-1209596728L), long0);
      assertEquals(3272L, instant0.getMillis());
      assertEquals(3272L, interval0.getEndMillis());
      assertEquals(3272L, interval0.getStartMillis());
      assertEquals(3272L, interval1.getEndMillis());
      assertEquals(3272L, interval1.getStartMillis());
      assertEquals(3272L, dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertSame(interval0, interval1);
      assertSame(interval1, interval0);
      
      Hours hours0 = Hours.FIVE;
      assertEquals(5, hours0.getHours());
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      LocalDate localDate0 = new LocalDate(3272L, (Chronology) gJChronology0);
      assertEquals(3272L, instant0.getMillis());
      assertEquals(3272L, interval0.getEndMillis());
      assertEquals(3272L, interval0.getStartMillis());
      assertEquals(3272L, interval1.getEndMillis());
      assertEquals(3272L, interval1.getStartMillis());
      assertEquals(3272L, dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      int[] intArray0 = gJChronology0.get((ReadablePartial) localDate0, 220L);
      assertArrayEquals(new int[] {1969, 12, 19}, intArray0);
      assertEquals(3272L, instant0.getMillis());
      assertEquals(3272L, interval0.getEndMillis());
      assertEquals(3272L, interval0.getStartMillis());
      assertEquals(3272L, interval1.getEndMillis());
      assertEquals(3272L, interval1.getStartMillis());
      assertEquals(3272L, dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(3, localDate0.size());
      assertNotNull(intArray0);
      assertEquals(3, intArray0.length);
      assertSame(interval0, interval1);
      assertSame(interval1, interval0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      Instant instant1 = gJChronology0.getGregorianCutover();
      assertEquals(3272L, instant0.getMillis());
      assertEquals(3272L, interval0.getEndMillis());
      assertEquals(3272L, interval0.getStartMillis());
      assertEquals(3272L, interval1.getEndMillis());
      assertEquals(3272L, interval1.getStartMillis());
      assertEquals(3272L, dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(3272L, instant1.getMillis());
      assertNotNull(instant1);
      assertTrue(instant1.equals((Object)instant0));
      assertNotSame(instant0, instant1);
      assertSame(interval0, interval1);
      assertSame(interval1, interval0);
      assertNotSame(instant1, instant0);
      
      // Undeclared exception!
      try { 
        gJChronology0.validate(localDate0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 19 for dayOfMonth must not be larger than 18
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(120);
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      boolean boolean0 = dateTimeZone0.isFixed();
      assertTrue(boolean0);
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      
      Interval interval0 = new Interval((ReadableInstant) null, (ReadableDuration) null);
      assertEquals(1392409281320L, interval0.getStartMillis());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertNotNull(interval0);
      
      Duration duration0 = Duration.standardDays(1);
      assertEquals(1L, duration0.getStandardDays());
      assertEquals(86400L, duration0.getStandardSeconds());
      assertEquals(86400000L, duration0.getMillis());
      assertEquals(1440L, duration0.getStandardMinutes());
      assertEquals(24L, duration0.getStandardHours());
      assertNotNull(duration0);
      
      Interval interval1 = interval0.withDurationAfterStart(duration0);
      assertEquals(1392409281320L, interval0.getStartMillis());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals(1L, duration0.getStandardDays());
      assertEquals(86400L, duration0.getStandardSeconds());
      assertEquals(86400000L, duration0.getMillis());
      assertEquals(1440L, duration0.getStandardMinutes());
      assertEquals(24L, duration0.getStandardHours());
      assertEquals(1392409281320L, interval1.getStartMillis());
      assertEquals(1392495681320L, interval1.getEndMillis());
      assertNotNull(interval1);
      assertFalse(interval1.equals((Object)interval0));
      assertNotSame(interval0, interval1);
      assertNotSame(interval1, interval0);
      
      DateTime dateTime0 = interval0.getStart();
      assertEquals(1392409281320L, interval0.getStartMillis());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      assertFalse(interval0.equals((Object)interval1));
      assertNotSame(interval0, interval1);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0);
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals(1392409281320L, interval0.getStartMillis());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      assertFalse(interval0.equals((Object)interval1));
      assertNotSame(interval0, interval1);
      
      long long0 = gJChronology0.julianToGregorianByWeekyear((-330L));
      assertEquals((-1209600330L), long0);
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals(1392409281320L, interval0.getStartMillis());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertFalse(interval0.equals((Object)interval1));
      assertNotSame(interval0, interval1);
      
      Hours hours0 = Hours.FIVE;
      assertEquals(1, hours0.size());
      assertEquals(5, hours0.getHours());
      assertNotNull(hours0);
      
      LocalDate localDate0 = new LocalDate((-58376588367996L), (Chronology) gJChronology0);
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals(1392409281320L, interval0.getStartMillis());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      assertFalse(interval0.equals((Object)interval1));
      
      int[] intArray0 = gJChronology0.get((ReadablePartial) localDate0, (-42521587200000L));
      assertArrayEquals(new int[] {622, 7, 16}, intArray0);
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals(1392409281320L, interval0.getStartMillis());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(3, localDate0.size());
      assertNotNull(intArray0);
      assertEquals(3, intArray0.length);
      assertFalse(interval0.equals((Object)interval1));
      assertNotSame(interval0, interval1);
      
      DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();
      assertEquals("Etc/UTC", dateTimeZone1.toString());
      assertEquals("Etc/UTC", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertNotNull(dateTimeZone1);
      assertFalse(dateTimeZone1.equals((Object)dateTimeZone0));
      assertNotSame(dateTimeZone1, dateTimeZone0);
      
      DateTimeZone dateTimeZone2 = DateTimeZone.getDefault();
      assertTrue(dateTimeZone2.isFixed());
      assertEquals("Etc/UTC", dateTimeZone2.getID());
      assertEquals("Etc/UTC", dateTimeZone2.toString());
      assertNotNull(dateTimeZone2);
      assertFalse(dateTimeZone2.equals((Object)dateTimeZone0));
      assertSame(dateTimeZone2, dateTimeZone1);
      assertNotSame(dateTimeZone2, dateTimeZone0);
      
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals(1392409281320L, interval0.getStartMillis());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(instant0);
      assertFalse(dateTimeZone0.equals((Object)dateTimeZone1));
      assertFalse(dateTimeZone0.equals((Object)dateTimeZone2));
      assertFalse(interval0.equals((Object)interval1));
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTimeZone0, dateTimeZone2);
      assertNotSame(interval0, interval1);
      
      System.setCurrentTimeMillis(120);
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals(1392409281320L, interval0.getStartMillis());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(gJChronology1);
      assertFalse(dateTimeZone0.equals((Object)dateTimeZone1));
      assertFalse(dateTimeZone0.equals((Object)dateTimeZone2));
      assertFalse(interval0.equals((Object)interval1));
      assertSame(gJChronology1, gJChronology0);
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTimeZone0, dateTimeZone2);
      assertNotSame(interval0, interval1);
      assertSame(gJChronology0, gJChronology1);
      
      boolean boolean1 = gJChronology1.equals(gJChronology0);
      assertTrue(boolean1);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals(1392409281320L, interval0.getStartMillis());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1392409281320L, instant0.getMillis());
      assertFalse(dateTimeZone0.equals((Object)dateTimeZone1));
      assertFalse(dateTimeZone0.equals((Object)dateTimeZone2));
      assertTrue(boolean1 == boolean0);
      assertFalse(interval0.equals((Object)interval1));
      assertSame(gJChronology1, gJChronology0);
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTimeZone0, dateTimeZone2);
      assertNotSame(interval0, interval1);
      assertSame(gJChronology0, gJChronology1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      MonthDay monthDay0 = MonthDay.now((Chronology) gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertNotNull(monthDay0);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      
      MonthDay monthDay1 = monthDay0.plusDays(1);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay1.size());
      assertEquals(15, monthDay1.getDayOfMonth());
      assertEquals(2, monthDay1.getMonthOfYear());
      assertNotNull(monthDay1);
      assertFalse(monthDay1.equals((Object)monthDay0));
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertNotSame(monthDay0, monthDay1);
      assertNotSame(monthDay1, monthDay0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertNotNull(mutablePeriod0);
      
      MonthDay monthDay2 = monthDay0.withPeriodAdded(mutablePeriod0, 735);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(14, monthDay2.getDayOfMonth());
      assertEquals(2, monthDay2.getMonthOfYear());
      assertEquals(2, monthDay2.size());
      assertNotNull(monthDay2);
      assertFalse(monthDay0.equals((Object)monthDay1));
      assertTrue(monthDay2.equals((Object)monthDay0));
      assertFalse(monthDay2.equals((Object)monthDay1));
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertNotSame(monthDay0, monthDay2);
      assertNotSame(monthDay0, monthDay1);
      assertNotSame(monthDay2, monthDay1);
      assertNotSame(monthDay2, monthDay0);
      
      long long0 = gJChronology0.gregorianToJulianByWeekyear(680L);
      assertEquals(1209600680L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      int[] intArray0 = gJChronology0.get((ReadablePartial) monthDay0, (-12219292800000L));
      assertArrayEquals(new int[] {10, 15}, intArray0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertNotNull(intArray0);
      assertEquals(2, intArray0.length);
      assertFalse(monthDay0.equals((Object)monthDay1));
      assertTrue(monthDay0.equals((Object)monthDay2));
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotSame(monthDay0, monthDay2);
      assertNotSame(monthDay0, monthDay1);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertNotNull(instant0);
      
      gJChronology0.validate(monthDay1, intArray0);
      assertArrayEquals(new int[] {10, 15}, intArray0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay1.size());
      assertEquals(15, monthDay1.getDayOfMonth());
      assertEquals(2, monthDay1.getMonthOfYear());
      assertEquals(2, intArray0.length);
      assertFalse(monthDay0.equals((Object)monthDay1));
      assertTrue(monthDay0.equals((Object)monthDay2));
      assertFalse(monthDay1.equals((Object)monthDay0));
      assertFalse(monthDay1.equals((Object)monthDay2));
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertNotSame(monthDay0, monthDay2);
      assertNotSame(monthDay0, monthDay1);
      assertNotSame(monthDay1, monthDay0);
      assertNotSame(monthDay1, monthDay2);
      
      System.setCurrentTimeMillis(1);
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[Etc/UTC]", string0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 0
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      MonthDay monthDay0 = MonthDay.now((Chronology) gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertNotNull(monthDay0);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      
      MonthDay monthDay1 = monthDay0.plusDays((-1804));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(3, monthDay1.getMonthOfYear());
      assertEquals(2, monthDay1.size());
      assertEquals(8, monthDay1.getDayOfMonth());
      assertNotNull(monthDay1);
      assertFalse(monthDay1.equals((Object)monthDay0));
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertNotSame(monthDay0, monthDay1);
      assertNotSame(monthDay1, monthDay0);
      
      long long0 = gJChronology0.gregorianToJulianByWeekyear((-613L));
      assertEquals(1209599387L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      LocalDateTime localDateTime0 = new LocalDateTime((-1867L), (Chronology) gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int[] intArray0 = gJChronology0.get((ReadablePartial) localDateTime0, (-2625L));
      assertArrayEquals(new int[] {1969, 12, 31, 86397375}, intArray0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(4, localDateTime0.size());
      assertNotNull(intArray0);
      assertEquals(4, intArray0.length);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertNotNull(instant0);
      
      gJChronology0.validate(localDateTime0, intArray0);
      assertArrayEquals(new int[] {1969, 12, 31, 86397375}, intArray0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, intArray0.length);
      
      System.setCurrentTimeMillis((-1804));
      // Undeclared exception!
      try { 
        GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0, (-2178));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: -2178
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      long long0 = gJChronology0.julianToGregorianByWeekyear((-499L));
      assertEquals((-1209600499L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      Hours hours0 = Hours.FIVE;
      assertEquals(5, hours0.getHours());
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      LocalDate localDate0 = new LocalDate(11L, (Chronology) gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalDate localDate1 = new LocalDate((Object) null, gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertFalse(localDate1.equals((Object)localDate0));
      
      int[] intArray0 = gJChronology0.get((ReadablePartial) localDate1, 1L);
      assertArrayEquals(new int[] {1970, 1, 1}, intArray0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(3, localDate1.size());
      assertNotNull(intArray0);
      assertEquals(3, intArray0.length);
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(localDate1, localDate0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertNotNull(instant0);
      
      gJChronology0.validate(localDate0, intArray0);
      assertArrayEquals(new int[] {1970, 1, 1}, intArray0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertEquals(3, intArray0.length);
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      
      System.setCurrentTimeMillis((-57969216000000L));
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[UTC]", string0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(120);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      boolean boolean0 = dateTimeZone0.isFixed();
      assertTrue(boolean0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      
      DateTime dateTime0 = new DateTime((-3082L), dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals((-3082L), dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      DateTime dateTime1 = dateTime0.minusDays(120);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals((-3082L), dateTime0.getMillis());
      assertEquals((-10368003082L), dateTime1.getMillis());
      assertNotNull(dateTime1);
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      assertEquals("centuries", durationFieldType0.getName());
      assertEquals("centuries", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      DateTime dateTime2 = dateTime1.withFieldAdded(durationFieldType0, (-544));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals((-3082L), dateTime0.getMillis());
      assertEquals((-10368003082L), dateTime1.getMillis());
      assertEquals("centuries", durationFieldType0.getName());
      assertEquals("centuries", durationFieldType0.toString());
      assertEquals((-1716708556803082L), dateTime2.getMillis());
      assertNotNull(dateTime2);
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "T");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      gJChronology0.assemble((AssembledChronology.Fields) null);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      MonthDay monthDay0 = new MonthDay(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertNotNull(monthDay0);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      
      LocalDate localDate0 = monthDay0.toLocalDate(18);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      
      long long0 = gJChronology0.gregorianToJulianByWeekyear(7L);
      assertEquals(1209600007L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      long long1 = gJChronology0.julianToGregorianByYear(1296000635L);
      assertEquals(172800635L, long1);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertFalse(long1 == long0);
      
      long long2 = gJChronology0.getDateTimeMillis((-1580), 1, 2, 1822);
      assertEquals((-111996691198178L), long2);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[Etc/UTC]", string0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(string0);
      
      DateTimeZone dateTimeZone1 = gJChronology0.getZone();
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("Etc/UTC", dateTimeZone1.getID());
      assertEquals("Etc/UTC", dateTimeZone1.toString());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(dateTimeZone1);
      assertFalse(dateTimeZone1.equals((Object)dateTimeZone0));
      assertNotSame(dateTimeZone1, dateTimeZone0);
      
      GJChronology gJChronology1 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology1);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertNotSame(gJChronology1, gJChronology0);
      
      GJChronology gJChronology2 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology2.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology2);
      assertFalse(gJChronology2.equals((Object)gJChronology0));
      assertNotSame(gJChronology2, gJChronology0);
      assertSame(gJChronology2, gJChronology1);
      
      String string1 = gJChronology0.toString();
      assertEquals("GJChronology[Etc/UTC]", string1);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(gJChronology0.equals((Object)gJChronology2));
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(gJChronology0, gJChronology2);
      
      System.setCurrentTimeMillis(2678400000L);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(120);
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      boolean boolean0 = dateTimeZone0.isFixed();
      assertTrue(boolean0);
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "f:Z3's@O3&I!ff46w");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      BuddhistChronology buddhistChronology1 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology1);
      assertFalse(buddhistChronology1.equals((Object)buddhistChronology0));
      assertEquals(1, BuddhistChronology.BE);
      assertNotSame(buddhistChronology1, buddhistChronology0);
      
      DateTimeZone dateTimeZone1 = buddhistChronology1.getZone();
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertNotNull(dateTimeZone1);
      assertFalse(buddhistChronology1.equals((Object)buddhistChronology0));
      assertFalse(dateTimeZone1.equals((Object)dateTimeZone0));
      assertEquals(1, BuddhistChronology.BE);
      assertNotSame(buddhistChronology1, buddhistChronology0);
      assertNotSame(dateTimeZone1, dateTimeZone0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(lenientChronology0);
      assertFalse(dateTimeZone0.equals((Object)dateTimeZone1));
      assertFalse(buddhistChronology0.equals((Object)buddhistChronology1));
      assertEquals(1, BuddhistChronology.BE);
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(buddhistChronology0, buddhistChronology1);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(lenientChronology0, dateTimeZone0);
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(zonedChronology0);
      assertFalse(dateTimeZone0.equals((Object)dateTimeZone1));
      assertFalse(buddhistChronology0.equals((Object)buddhistChronology1));
      assertEquals(1, BuddhistChronology.BE);
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(buddhistChronology0, buddhistChronology1);
      
      DateTimeZone dateTimeZone2 = zonedChronology0.getZone();
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(dateTimeZone2.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone2.getID());
      assertEquals("+00:00:00.120", dateTimeZone2.toString());
      assertNotNull(dateTimeZone2);
      assertFalse(dateTimeZone0.equals((Object)dateTimeZone1));
      assertFalse(buddhistChronology0.equals((Object)buddhistChronology1));
      assertFalse(dateTimeZone2.equals((Object)dateTimeZone1));
      assertEquals(1, BuddhistChronology.BE);
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone0, dateTimeZone2);
      assertNotSame(buddhistChronology0, buddhistChronology1);
      assertNotSame(dateTimeZone2, dateTimeZone1);
      assertSame(dateTimeZone2, dateTimeZone0);
      
      try { 
        buddhistChronology0.getDateTimeMillis(1036, 8, 13421772, 90, 11, 90, 8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 13421772 for dayOfMonth must be in the range [1,31]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Hours hours0 = Hours.FIVE;
      assertEquals(5, hours0.getHours());
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      MonthDay monthDay0 = MonthDay.now((Chronology) gJChronology0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertNotNull(monthDay0);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      
      MonthDay monthDay1 = monthDay0.plusDays((-1492));
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(1, monthDay1.getMonthOfYear());
      assertEquals(2, monthDay1.size());
      assertEquals(14, monthDay1.getDayOfMonth());
      assertNotNull(monthDay1);
      assertFalse(monthDay1.equals((Object)monthDay0));
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotSame(monthDay0, monthDay1);
      assertNotSame(monthDay1, monthDay0);
      
      long long0 = gJChronology0.gregorianToJulianByWeekyear(383L);
      assertEquals(1209600383L, long0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      GJChronology gJChronology1 = (GJChronology)gJChronology0.withUTC();
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology1);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(gJChronology1, gJChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)gJChronology0.getZone();
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("Etc/UTC", fixedDateTimeZone0.getID());
      assertEquals("Etc/UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertTrue(fixedDateTimeZone0.equals((Object)dateTimeZone0));
      assertNotSame(dateTimeZone0, fixedDateTimeZone0);
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(fixedDateTimeZone0, dateTimeZone0);
      
      long long1 = gJChronology0.set(monthDay1, 119);
      assertEquals(1123200119L, long1);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(1, monthDay1.getMonthOfYear());
      assertEquals(2, monthDay1.size());
      assertEquals(14, monthDay1.getDayOfMonth());
      assertTrue(dateTimeZone0.equals((Object)fixedDateTimeZone0));
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(monthDay0.equals((Object)monthDay1));
      assertFalse(monthDay1.equals((Object)monthDay0));
      assertFalse(long1 == long0);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotSame(dateTimeZone0, fixedDateTimeZone0);
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(monthDay0, monthDay1);
      assertNotSame(monthDay1, monthDay0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "uW}ufoYi-s6");
      assertFalse(boolean0);
      
      gJChronology0.assemble((AssembledChronology.Fields) null);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertTrue(dateTimeZone0.equals((Object)fixedDateTimeZone0));
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertNotSame(dateTimeZone0, fixedDateTimeZone0);
      assertNotSame(gJChronology0, gJChronology1);
      
      // Undeclared exception!
      try { 
        monthDay1.toLocalDate(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for year is not supported
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      MonthDay monthDay0 = MonthDay.now((Chronology) gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertNotNull(monthDay0);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      
      MonthDay monthDay1 = monthDay0.plusDays(1);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay1.size());
      assertEquals(2, monthDay1.getMonthOfYear());
      assertEquals(15, monthDay1.getDayOfMonth());
      assertNotNull(monthDay1);
      assertFalse(monthDay1.equals((Object)monthDay0));
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotSame(monthDay0, monthDay1);
      assertNotSame(monthDay1, monthDay0);
      
      long long0 = gJChronology0.gregorianToJulianByWeekyear(680L);
      assertEquals(1209600680L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      int[] intArray0 = gJChronology0.get((ReadablePartial) monthDay0, (-12219292800000L));
      assertArrayEquals(new int[] {10, 15}, intArray0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertNotNull(intArray0);
      assertEquals(2, intArray0.length);
      assertFalse(monthDay0.equals((Object)monthDay1));
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertNotSame(monthDay0, monthDay1);
      
      GJChronology gJChronology1 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology1);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertNotSame(gJChronology1, gJChronology0);
      
      GJChronology gJChronology2 = (GJChronology)gJChronology1.withUTC();
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertEquals(4, gJChronology2.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology2);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertFalse(gJChronology2.equals((Object)gJChronology0));
      assertNotSame(gJChronology1, gJChronology0);
      assertSame(gJChronology1, gJChronology2);
      assertNotSame(gJChronology2, gJChronology0);
      assertSame(gJChronology2, gJChronology1);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)gJChronology0.getZone();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("Etc/UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("Etc/UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      assertFalse(gJChronology0.equals((Object)gJChronology2));
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertNotSame(gJChronology0, gJChronology2);
      assertNotSame(gJChronology0, gJChronology1);
      
      GJChronology gJChronology3 = (GJChronology)gJChronology1.withUTC();
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertEquals(4, gJChronology3.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology3);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertFalse(gJChronology3.equals((Object)gJChronology0));
      assertSame(gJChronology1, gJChronology3);
      assertNotSame(gJChronology1, gJChronology0);
      assertSame(gJChronology1, gJChronology2);
      assertNotSame(gJChronology3, gJChronology0);
      assertSame(gJChronology3, gJChronology1);
      assertSame(gJChronology3, gJChronology2);
      
      long long1 = gJChronology1.gregorianToJulianByWeekyear(1);
      assertEquals(1209600001L, long1);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertFalse(long1 == long0);
      assertSame(gJChronology1, gJChronology3);
      assertNotSame(gJChronology1, gJChronology0);
      assertSame(gJChronology1, gJChronology2);
      
      GJChronology gJChronology4 = GJChronology.getInstance((DateTimeZone) null, 0L, 1);
      assertEquals(1, gJChronology4.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology4);
      assertFalse(gJChronology4.equals((Object)gJChronology3));
      assertFalse(gJChronology4.equals((Object)gJChronology1));
      assertFalse(gJChronology4.equals((Object)gJChronology0));
      assertFalse(gJChronology4.equals((Object)gJChronology2));
      assertNotSame(gJChronology4, gJChronology3);
      assertNotSame(gJChronology4, gJChronology1);
      assertNotSame(gJChronology4, gJChronology0);
      assertNotSame(gJChronology4, gJChronology2);
      
      Instant instant0 = gJChronology4.getGregorianCutover();
      assertEquals(1, gJChronology4.getMinimumDaysInFirstWeek());
      assertEquals(0L, instant0.getMillis());
      assertNotNull(instant0);
      assertFalse(gJChronology4.equals((Object)gJChronology3));
      assertFalse(gJChronology4.equals((Object)gJChronology1));
      assertFalse(gJChronology4.equals((Object)gJChronology0));
      assertFalse(gJChronology4.equals((Object)gJChronology2));
      assertNotSame(gJChronology4, gJChronology3);
      assertNotSame(gJChronology4, gJChronology1);
      assertNotSame(gJChronology4, gJChronology0);
      assertNotSame(gJChronology4, gJChronology2);
      
      boolean boolean2 = gJChronology4.equals((Object) null);
      assertFalse(boolean2);
      assertEquals(1, gJChronology4.getMinimumDaysInFirstWeek());
      assertFalse(gJChronology4.equals((Object)gJChronology3));
      assertFalse(gJChronology4.equals((Object)gJChronology1));
      assertFalse(gJChronology4.equals((Object)gJChronology0));
      assertFalse(gJChronology4.equals((Object)gJChronology2));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(gJChronology4, gJChronology3);
      assertNotSame(gJChronology4, gJChronology1);
      assertNotSame(gJChronology4, gJChronology0);
      assertNotSame(gJChronology4, gJChronology2);
      
      GJChronology gJChronology5 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (long) 0, 1);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("Etc/UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("Etc/UTC", fixedDateTimeZone0.getID());
      assertEquals(1, gJChronology5.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology5);
      assertFalse(gJChronology0.equals((Object)gJChronology4));
      assertFalse(gJChronology0.equals((Object)gJChronology2));
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(gJChronology0.equals((Object)gJChronology3));
      assertFalse(gJChronology5.equals((Object)gJChronology0));
      assertFalse(gJChronology5.equals((Object)gJChronology1));
      assertFalse(gJChronology5.equals((Object)gJChronology3));
      assertFalse(gJChronology5.equals((Object)gJChronology2));
      assertNotSame(gJChronology0, gJChronology4);
      assertNotSame(gJChronology0, gJChronology2);
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(gJChronology0, gJChronology3);
      assertNotSame(gJChronology0, gJChronology5);
      assertNotSame(gJChronology5, gJChronology0);
      assertSame(gJChronology5, gJChronology4);
      assertNotSame(gJChronology5, gJChronology1);
      assertNotSame(gJChronology5, gJChronology3);
      assertNotSame(gJChronology5, gJChronology2);
      
      GJChronology gJChronology6 = (GJChronology)gJChronology4.withZone(fixedDateTimeZone0);
      assertEquals(1, gJChronology6.getMinimumDaysInFirstWeek());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("Etc/UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("Etc/UTC", fixedDateTimeZone0.getID());
      assertEquals(1, gJChronology4.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology6);
      assertFalse(gJChronology6.equals((Object)gJChronology1));
      assertFalse(gJChronology6.equals((Object)gJChronology3));
      assertFalse(gJChronology6.equals((Object)gJChronology2));
      assertFalse(gJChronology6.equals((Object)gJChronology0));
      assertFalse(gJChronology0.equals((Object)gJChronology4));
      assertFalse(gJChronology0.equals((Object)gJChronology2));
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(gJChronology0.equals((Object)gJChronology3));
      assertFalse(gJChronology0.equals((Object)gJChronology5));
      assertFalse(gJChronology4.equals((Object)gJChronology3));
      assertFalse(gJChronology4.equals((Object)gJChronology1));
      assertFalse(gJChronology4.equals((Object)gJChronology0));
      assertFalse(gJChronology4.equals((Object)gJChronology2));
      assertNotSame(gJChronology6, gJChronology1);
      assertNotSame(gJChronology6, gJChronology3);
      assertNotSame(gJChronology6, gJChronology2);
      assertSame(gJChronology6, gJChronology5);
      assertSame(gJChronology6, gJChronology4);
      assertNotSame(gJChronology6, gJChronology0);
      assertNotSame(gJChronology0, gJChronology6);
      assertNotSame(gJChronology0, gJChronology4);
      assertNotSame(gJChronology0, gJChronology2);
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(gJChronology0, gJChronology3);
      assertNotSame(gJChronology0, gJChronology5);
      assertNotSame(gJChronology4, gJChronology3);
      assertSame(gJChronology4, gJChronology6);
      assertNotSame(gJChronology4, gJChronology1);
      assertSame(gJChronology4, gJChronology5);
      assertNotSame(gJChronology4, gJChronology0);
      assertNotSame(gJChronology4, gJChronology2);
      
      long long2 = gJChronology1.julianToGregorianByWeekyear(119L);
      assertEquals((-1209599881L), long2);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(gJChronology1.equals((Object)gJChronology4));
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertFalse(gJChronology1.equals((Object)gJChronology5));
      assertFalse(gJChronology1.equals((Object)gJChronology6));
      assertNotSame(gJChronology1, gJChronology4);
      assertSame(gJChronology1, gJChronology3);
      assertNotSame(gJChronology1, gJChronology0);
      assertNotSame(gJChronology1, gJChronology5);
      assertNotSame(gJChronology1, gJChronology6);
      assertSame(gJChronology1, gJChronology2);
      
      GJChronology gJChronology7 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) instant0);
      assertEquals(4, gJChronology7.getMinimumDaysInFirstWeek());
      assertEquals(1, gJChronology4.getMinimumDaysInFirstWeek());
      assertEquals(0L, instant0.getMillis());
      assertNotNull(gJChronology7);
      assertFalse(gJChronology7.equals((Object)gJChronology2));
      assertFalse(gJChronology7.equals((Object)gJChronology5));
      assertFalse(gJChronology7.equals((Object)gJChronology0));
      assertFalse(gJChronology7.equals((Object)gJChronology1));
      assertFalse(gJChronology7.equals((Object)gJChronology3));
      assertFalse(gJChronology7.equals((Object)gJChronology4));
      assertFalse(gJChronology7.equals((Object)gJChronology6));
      assertFalse(gJChronology4.equals((Object)gJChronology3));
      assertFalse(gJChronology4.equals((Object)gJChronology1));
      assertFalse(gJChronology4.equals((Object)gJChronology0));
      assertFalse(gJChronology4.equals((Object)gJChronology2));
      assertNotSame(gJChronology7, gJChronology2);
      assertNotSame(gJChronology7, gJChronology5);
      assertNotSame(gJChronology7, gJChronology0);
      assertNotSame(gJChronology7, gJChronology1);
      assertNotSame(gJChronology7, gJChronology3);
      assertNotSame(gJChronology7, gJChronology4);
      assertNotSame(gJChronology7, gJChronology6);
      assertNotSame(gJChronology4, gJChronology3);
      assertSame(gJChronology4, gJChronology6);
      assertNotSame(gJChronology4, gJChronology1);
      assertNotSame(gJChronology4, gJChronology7);
      assertSame(gJChronology4, gJChronology5);
      assertNotSame(gJChronology4, gJChronology0);
      assertNotSame(gJChronology4, gJChronology2);
      
      boolean boolean3 = gJChronology4.equals(fixedDateTimeZone0);
      assertFalse(boolean3);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("Etc/UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("Etc/UTC", fixedDateTimeZone0.getID());
      assertEquals(1, gJChronology4.getMinimumDaysInFirstWeek());
      assertFalse(gJChronology0.equals((Object)gJChronology6));
      assertFalse(gJChronology0.equals((Object)gJChronology4));
      assertFalse(gJChronology0.equals((Object)gJChronology7));
      assertFalse(gJChronology0.equals((Object)gJChronology2));
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(gJChronology0.equals((Object)gJChronology3));
      assertFalse(gJChronology0.equals((Object)gJChronology5));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(gJChronology4.equals((Object)gJChronology3));
      assertFalse(gJChronology4.equals((Object)gJChronology1));
      assertFalse(gJChronology4.equals((Object)gJChronology7));
      assertFalse(gJChronology4.equals((Object)gJChronology0));
      assertFalse(gJChronology4.equals((Object)gJChronology2));
      assertNotSame(gJChronology0, gJChronology6);
      assertNotSame(gJChronology0, gJChronology4);
      assertNotSame(gJChronology0, gJChronology7);
      assertNotSame(gJChronology0, gJChronology2);
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(gJChronology0, gJChronology3);
      assertNotSame(gJChronology0, gJChronology5);
      assertNotSame(gJChronology4, gJChronology3);
      assertSame(gJChronology4, gJChronology6);
      assertNotSame(gJChronology4, gJChronology1);
      assertNotSame(gJChronology4, gJChronology7);
      assertSame(gJChronology4, gJChronology5);
      assertNotSame(gJChronology4, gJChronology0);
      assertNotSame(gJChronology4, gJChronology2);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      Instant instant0 = new Instant(3272L);
      assertEquals(3272L, instant0.getMillis());
      assertNotNull(instant0);
      
      Interval interval0 = new Interval(instant0, (ReadableDuration) null);
      assertEquals(3272L, instant0.getMillis());
      assertEquals(3272L, interval0.getStartMillis());
      assertEquals(3272L, interval0.getEndMillis());
      assertNotNull(interval0);
      
      Interval interval1 = interval0.withDurationAfterStart((ReadableDuration) null);
      assertEquals(3272L, instant0.getMillis());
      assertEquals(3272L, interval0.getStartMillis());
      assertEquals(3272L, interval0.getEndMillis());
      assertEquals(3272L, interval1.getStartMillis());
      assertEquals(3272L, interval1.getEndMillis());
      assertNotNull(interval1);
      assertSame(interval0, interval1);
      assertSame(interval1, interval0);
      
      DateTime dateTime0 = interval1.getStart();
      assertEquals(3272L, instant0.getMillis());
      assertEquals(3272L, interval0.getStartMillis());
      assertEquals(3272L, interval0.getEndMillis());
      assertEquals(3272L, interval1.getStartMillis());
      assertEquals(3272L, interval1.getEndMillis());
      assertEquals(3272L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      assertSame(interval0, interval1);
      assertSame(interval1, interval0);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime0);
      assertEquals(3272L, instant0.getMillis());
      assertEquals(3272L, interval0.getStartMillis());
      assertEquals(3272L, interval0.getEndMillis());
      assertEquals(3272L, interval1.getStartMillis());
      assertEquals(3272L, interval1.getEndMillis());
      assertEquals(3272L, dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      assertSame(interval0, interval1);
      assertSame(interval1, interval0);
      
      long long0 = gJChronology0.julianToGregorianByWeekyear(3272L);
      assertEquals((-1209596728L), long0);
      assertEquals(3272L, instant0.getMillis());
      assertEquals(3272L, interval0.getStartMillis());
      assertEquals(3272L, interval0.getEndMillis());
      assertEquals(3272L, interval1.getStartMillis());
      assertEquals(3272L, interval1.getEndMillis());
      assertEquals(3272L, dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertSame(interval0, interval1);
      assertSame(interval1, interval0);
      
      Hours hours0 = Hours.FIVE;
      assertEquals(1, hours0.size());
      assertEquals(5, hours0.getHours());
      assertNotNull(hours0);
      
      LocalDate localDate0 = new LocalDate(3272L, (Chronology) gJChronology0);
      assertEquals(3272L, instant0.getMillis());
      assertEquals(3272L, interval0.getStartMillis());
      assertEquals(3272L, interval0.getEndMillis());
      assertEquals(3272L, interval1.getStartMillis());
      assertEquals(3272L, interval1.getEndMillis());
      assertEquals(3272L, dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      int[] intArray0 = gJChronology0.get((ReadablePartial) localDate0, 220L);
      assertArrayEquals(new int[] {1969, 12, 19}, intArray0);
      assertEquals(3272L, instant0.getMillis());
      assertEquals(3272L, interval0.getStartMillis());
      assertEquals(3272L, interval0.getEndMillis());
      assertEquals(3272L, interval1.getStartMillis());
      assertEquals(3272L, interval1.getEndMillis());
      assertEquals(3272L, dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(3, localDate0.size());
      assertNotNull(intArray0);
      assertEquals(3, intArray0.length);
      assertSame(interval0, interval1);
      assertSame(interval1, interval0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      Instant instant1 = gJChronology0.getGregorianCutover();
      assertEquals(3272L, instant0.getMillis());
      assertEquals(3272L, interval0.getStartMillis());
      assertEquals(3272L, interval0.getEndMillis());
      assertEquals(3272L, interval1.getStartMillis());
      assertEquals(3272L, interval1.getEndMillis());
      assertEquals(3272L, dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(3272L, instant1.getMillis());
      assertNotNull(instant1);
      assertTrue(instant1.equals((Object)instant0));
      assertNotSame(instant0, instant1);
      assertSame(interval0, interval1);
      assertSame(interval1, interval0);
      assertNotSame(instant1, instant0);
      
      System.setCurrentTimeMillis(3272L);
      try { 
        gJChronology0.getDateTimeMillis((-1096), (-597), (-597), (-1096), 1023, (-597), 372);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1096 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      MonthDay monthDay0 = MonthDay.now((Chronology) gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertNotNull(monthDay0);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      
      MonthDay monthDay1 = monthDay0.plusDays(1);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay1.getMonthOfYear());
      assertEquals(2, monthDay1.size());
      assertEquals(15, monthDay1.getDayOfMonth());
      assertNotNull(monthDay1);
      assertFalse(monthDay1.equals((Object)monthDay0));
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertNotSame(monthDay0, monthDay1);
      assertNotSame(monthDay1, monthDay0);
      
      long long0 = gJChronology0.gregorianToJulianByWeekyear(680L);
      assertEquals(1209600680L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      int[] intArray0 = gJChronology0.get((ReadablePartial) monthDay0, (-12219292800000L));
      assertArrayEquals(new int[] {10, 15}, intArray0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertNotNull(intArray0);
      assertEquals(2, intArray0.length);
      assertFalse(monthDay0.equals((Object)monthDay1));
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotSame(monthDay0, monthDay1);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertNotNull(instant0);
      
      int int0 = (-2146787090);
      // Undeclared exception!
      try { 
        GJChronology.getInstance(dateTimeZone0, (-12219292800000L), (-2146787090));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: -2146787090
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(120);
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(2233);
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("+00:00:02.233", dateTimeZone1.toString());
      assertEquals("+00:00:02.233", dateTimeZone1.getID());
      assertNotNull(dateTimeZone1);
      assertFalse(dateTimeZone1.equals((Object)dateTimeZone0));
      assertNotSame(dateTimeZone1, dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(buddhistChronology0);
      assertFalse(dateTimeZone0.equals((Object)dateTimeZone1));
      assertEquals(1, BuddhistChronology.BE);
      assertNotSame(dateTimeZone0, dateTimeZone1);
      
      boolean boolean0 = dateTimeZone1.isFixed();
      assertTrue(boolean0);
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("+00:00:02.233", dateTimeZone1.toString());
      assertEquals("+00:00:02.233", dateTimeZone1.getID());
      assertFalse(dateTimeZone1.equals((Object)dateTimeZone0));
      assertNotSame(dateTimeZone1, dateTimeZone0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((-42521587200000L), dateTimeZone1);
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("+00:00:02.233", dateTimeZone1.toString());
      assertEquals("+00:00:02.233", dateTimeZone1.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-42521587200000L), mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime0);
      assertFalse(dateTimeZone1.equals((Object)dateTimeZone0));
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone1, (ReadableInstant) mutableDateTime0);
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("+00:00:02.233", dateTimeZone1.toString());
      assertEquals("+00:00:02.233", dateTimeZone1.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-42521587200000L), mutableDateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      assertFalse(dateTimeZone1.equals((Object)dateTimeZone0));
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertNotSame(dateTimeZone1, dateTimeZone0);
      
      gJChronology0.hashCode();
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("+00:00:02.233", dateTimeZone1.toString());
      assertEquals("+00:00:02.233", dateTimeZone1.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-42521587200000L), mutableDateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertFalse(dateTimeZone1.equals((Object)dateTimeZone0));
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertNotSame(dateTimeZone1, dateTimeZone0);
      
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[+00:00:02.233,cutover=0622-07-19]", string0);
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("+00:00:02.233", dateTimeZone1.toString());
      assertEquals("+00:00:02.233", dateTimeZone1.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-42521587200000L), mutableDateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(string0);
      assertFalse(dateTimeZone1.equals((Object)dateTimeZone0));
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertNotSame(dateTimeZone1, dateTimeZone0);
      
      MutableDateTime mutableDateTime1 = new MutableDateTime();
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertNotNull(mutableDateTime1);
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      DateTimeZone dateTimeZone2 = DateTimeZone.forOffsetMillis(3);
      assertTrue(dateTimeZone2.isFixed());
      assertEquals("+00:00:00.003", dateTimeZone2.getID());
      assertEquals("+00:00:00.003", dateTimeZone2.toString());
      assertNotNull(dateTimeZone2);
      assertFalse(dateTimeZone2.equals((Object)dateTimeZone1));
      assertFalse(dateTimeZone2.equals((Object)dateTimeZone0));
      assertNotSame(dateTimeZone2, dateTimeZone1);
      assertNotSame(dateTimeZone2, dateTimeZone0);
      
      // Undeclared exception!
      try { 
        GJChronology.getInstance(dateTimeZone2, (ReadableInstant) mutableDateTime1, (-864));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: -864
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      MonthDay monthDay0 = MonthDay.now((Chronology) gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertNotNull(monthDay0);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      
      MonthDay monthDay1 = monthDay0.plusDays(1);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay1.getMonthOfYear());
      assertEquals(15, monthDay1.getDayOfMonth());
      assertEquals(2, monthDay1.size());
      assertNotNull(monthDay1);
      assertFalse(monthDay1.equals((Object)monthDay0));
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertNotSame(monthDay0, monthDay1);
      assertNotSame(monthDay1, monthDay0);
      
      long long0 = gJChronology0.gregorianToJulianByWeekyear(680L);
      assertEquals(1209600680L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      int[] intArray0 = gJChronology0.get((ReadablePartial) monthDay0, (-12219292800000L));
      assertArrayEquals(new int[] {10, 15}, intArray0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertNotNull(intArray0);
      assertEquals(2, intArray0.length);
      assertFalse(monthDay0.equals((Object)monthDay1));
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotSame(monthDay0, monthDay1);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertNotNull(instant0);
      
      gJChronology0.validate(monthDay1, intArray0);
      assertArrayEquals(new int[] {10, 15}, intArray0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay1.getMonthOfYear());
      assertEquals(15, monthDay1.getDayOfMonth());
      assertEquals(2, monthDay1.size());
      assertEquals(2, intArray0.length);
      assertFalse(monthDay0.equals((Object)monthDay1));
      assertFalse(monthDay1.equals((Object)monthDay0));
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertNotSame(monthDay0, monthDay1);
      assertNotSame(monthDay1, monthDay0);
      
      System.setCurrentTimeMillis((-367L));
      try { 
        gJChronology0.getDateTimeMillis(18, 1612, (-1), 41, 93, 0, 676);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 41 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(120);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      boolean boolean0 = dateTimeZone0.isFixed();
      assertTrue(boolean0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((-42521587200000L), dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals((-42521587200000L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime0);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals((-42521587200000L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      gJChronology0.hashCode();
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals((-42521587200000L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[+00:00:00.120,cutover=0622-07-19]", string0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals((-42521587200000L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(string0);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      
      MutableDateTime mutableDateTime1 = new MutableDateTime();
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertNotNull(mutableDateTime1);
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      // Undeclared exception!
      try { 
        GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime1, 1023);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 1023
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(120);
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      boolean boolean0 = dateTimeZone0.isFixed();
      assertTrue(boolean0);
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      
      DateTime dateTime0 = new DateTime((-3082L), dateTimeZone0);
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals((-3082L), dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      DateTime dateTime1 = dateTime0.minusDays(120);
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals((-3082L), dateTime0.getMillis());
      assertEquals((-10368003082L), dateTime1.getMillis());
      assertNotNull(dateTime1);
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      assertEquals("centuries", durationFieldType0.getName());
      assertEquals("centuries", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      DateTime dateTime2 = dateTime1.withFieldAdded(durationFieldType0, (-544));
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals((-3082L), dateTime0.getMillis());
      assertEquals((-10368003082L), dateTime1.getMillis());
      assertEquals("centuries", durationFieldType0.getName());
      assertEquals("centuries", durationFieldType0.toString());
      assertEquals((-1716708556803082L), dateTime2.getMillis());
      assertNotNull(dateTime2);
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      YearMonth yearMonth0 = new YearMonth((Chronology) buddhistChronology0);
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals(2557, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertNotNull(yearMonth0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      
      int[] intArray0 = gJChronology0.get((ReadablePartial) yearMonth0, (-1185L));
      assertArrayEquals(new int[] {1969, 12}, intArray0);
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(2557, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertNotNull(intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      
      DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();
      assertEquals("Etc/UTC", dateTimeZone1.toString());
      assertEquals("Etc/UTC", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertNotNull(dateTimeZone1);
      assertFalse(dateTimeZone1.equals((Object)dateTimeZone0));
      assertNotSame(dateTimeZone1, dateTimeZone0);
      
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertNotNull(instant0);
      
      System.setCurrentTimeMillis(120);
      long long0 = gJChronology0.getDateTimeMillis(120, 3, 17, 1, 0, 32, 4);
      assertEquals((-58373909967996L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      MonthDay monthDay0 = MonthDay.now((Chronology) gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertNotNull(monthDay0);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      
      int int0 = 119;
      MonthDay monthDay1 = monthDay0.plusDays(119);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(6, monthDay1.getMonthOfYear());
      assertEquals(2, monthDay1.size());
      assertEquals(13, monthDay1.getDayOfMonth());
      assertNotNull(monthDay1);
      assertFalse(monthDay1.equals((Object)monthDay0));
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotSame(monthDay0, monthDay1);
      assertNotSame(monthDay1, monthDay0);
      
      long long0 = gJChronology0.gregorianToJulianByWeekyear(680L);
      assertEquals(1209600680L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      GJChronology gJChronology1 = (GJChronology)gJChronology0.withUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology1);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(gJChronology1, gJChronology0);
      
      long long1 = gJChronology0.set(monthDay0, 0);
      assertEquals(3801600000L, long1);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(monthDay0.equals((Object)monthDay1));
      assertFalse(long1 == long0);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(monthDay0, monthDay1);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "uW}ufoYi-s6");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)gJChronology0.getZone();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("Etc/UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("Etc/UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertNotSame(gJChronology0, gJChronology1);
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)gJChronology0.getZone();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertTrue(fixedDateTimeZone1.isFixed());
      assertEquals("Etc/UTC", fixedDateTimeZone1.getID());
      assertEquals("Etc/UTC", fixedDateTimeZone1.toString());
      assertNotNull(fixedDateTimeZone1);
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertNotSame(gJChronology0, gJChronology1);
      assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
      
      gJChronology0.assemble((AssembledChronology.Fields) null);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertNotSame(gJChronology0, gJChronology1);
      
      int int1 = 30;
      LocalDate localDate0 = monthDay0.toLocalDate(30);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(monthDay0.equals((Object)monthDay1));
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(monthDay0, monthDay1);
      
      long long2 = gJChronology0.gregorianToJulianByWeekyear(3801600000L);
      assertEquals(5011200000L, long2);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertNotSame(gJChronology0, gJChronology1);
      
      boolean boolean3 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      long long3 = gJChronology0.julianToGregorianByYear(0);
      assertEquals((-1123200000L), long3);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertNotSame(gJChronology0, gJChronology1);
      
      int int2 = (-85);
      try { 
        gJChronology0.getDateTimeMillis((-1528), 1, 0, (-85));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -85 for millisOfDay must be in the range [0,86399999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      long long0 = gJChronology0.julianToGregorianByWeekyear((-499L));
      assertEquals((-1209600499L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      Hours hours0 = Hours.FIVE;
      assertEquals(1, hours0.size());
      assertEquals(5, hours0.getHours());
      assertNotNull(hours0);
      
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      GJChronology gJChronology1 = (GJChronology)gJChronology0.withZone(dateTimeZone0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology1);
      assertSame(gJChronology0, gJChronology1);
      assertSame(gJChronology1, gJChronology0);
      
      // Undeclared exception!
      try { 
        gJChronology1.gregorianToJulianByWeekyear(9223354850140800120L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 292278449 for weekyear must be in the range [-292269055,292272992]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(120);
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      boolean boolean0 = dateTimeZone0.isFixed();
      assertTrue(boolean0);
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      
      DateTime dateTime0 = new DateTime((-3082L), dateTimeZone0);
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals((-3082L), dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      DateTime dateTime1 = dateTime0.minusDays(120);
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals((-3082L), dateTime0.getMillis());
      assertEquals((-10368003082L), dateTime1.getMillis());
      assertNotNull(dateTime1);
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      
      int int0 = dateTimeZone0.getOffset((ReadableInstant) dateTime1);
      assertEquals(120, int0);
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals((-3082L), dateTime0.getMillis());
      assertEquals((-10368003082L), dateTime1.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      
      DateTimeZone dateTimeZone1 = buddhistChronology0.getZone();
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone1.toString());
      assertEquals("+00:00:00.120", dateTimeZone1.getID());
      assertNotNull(dateTimeZone1);
      assertTrue(dateTimeZone1.equals((Object)dateTimeZone0));
      assertEquals(1, BuddhistChronology.BE);
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTimeZone1, dateTimeZone0);
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) buddhistChronology0);
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime0);
      assertTrue(dateTimeZone0.equals((Object)dateTimeZone1));
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotSame(dateTimeZone0, dateTimeZone1);
      
      Date date0 = mutableDateTime0.toDate();
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      assertTrue(dateTimeZone0.equals((Object)dateTimeZone1));
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotSame(dateTimeZone0, dateTimeZone1);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone1, (ReadableInstant) mutableDateTime0, 1);
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone1.toString());
      assertEquals("+00:00:00.120", dateTimeZone1.getID());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      assertTrue(dateTimeZone0.equals((Object)dateTimeZone1));
      assertTrue(dateTimeZone1.equals((Object)dateTimeZone0));
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTimeZone1, dateTimeZone0);
      
      long long0 = gJChronology0.add(1L, (long) 2, 6);
      assertEquals(13L, long0);
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone1.toString());
      assertEquals("+00:00:00.120", dateTimeZone1.getID());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertTrue(dateTimeZone0.equals((Object)dateTimeZone1));
      assertTrue(dateTimeZone1.equals((Object)dateTimeZone0));
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTimeZone1, dateTimeZone0);
      
      LocalDate localDate0 = new LocalDate(9223354850140800000L, (Chronology) gJChronology0);
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone1.toString());
      assertEquals("+00:00:00.120", dateTimeZone1.getID());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      assertTrue(dateTimeZone0.equals((Object)dateTimeZone1));
      assertTrue(dateTimeZone1.equals((Object)dateTimeZone0));
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      int[] intArray0 = gJChronology0.get((ReadablePartial) localDate0, (long) 3);
      assertArrayEquals(new int[] {1969, 12, 19}, intArray0);
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone1.toString());
      assertEquals("+00:00:00.120", dateTimeZone1.getID());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(3, localDate0.size());
      assertNotNull(intArray0);
      assertEquals(3, intArray0.length);
      assertTrue(dateTimeZone0.equals((Object)dateTimeZone1));
      assertTrue(dateTimeZone1.equals((Object)dateTimeZone0));
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTimeZone1, dateTimeZone0);
      
      DateTimeZone dateTimeZone2 = DateTimeZone.getDefault();
      assertTrue(dateTimeZone2.isFixed());
      assertEquals("Etc/UTC", dateTimeZone2.toString());
      assertEquals("Etc/UTC", dateTimeZone2.getID());
      assertNotNull(dateTimeZone2);
      assertFalse(dateTimeZone2.equals((Object)dateTimeZone1));
      assertFalse(dateTimeZone2.equals((Object)dateTimeZone0));
      assertNotSame(dateTimeZone2, dateTimeZone1);
      assertNotSame(dateTimeZone2, dateTimeZone0);
      
      long long1 = gJChronology0.julianToGregorianByYear(49L);
      assertEquals((-1123199951L), long1);
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone1.toString());
      assertEquals("+00:00:00.120", dateTimeZone1.getID());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertTrue(dateTimeZone0.equals((Object)dateTimeZone1));
      assertFalse(dateTimeZone0.equals((Object)dateTimeZone2));
      assertTrue(dateTimeZone1.equals((Object)dateTimeZone0));
      assertFalse(dateTimeZone1.equals((Object)dateTimeZone2));
      assertFalse(long1 == long0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTimeZone0, dateTimeZone2);
      assertNotSame(dateTimeZone1, dateTimeZone2);
      assertNotSame(dateTimeZone1, dateTimeZone0);
      
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone1.toString());
      assertEquals("+00:00:00.120", dateTimeZone1.getID());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(instant0);
      assertTrue(dateTimeZone0.equals((Object)dateTimeZone1));
      assertFalse(dateTimeZone0.equals((Object)dateTimeZone2));
      assertTrue(dateTimeZone1.equals((Object)dateTimeZone0));
      assertFalse(dateTimeZone1.equals((Object)dateTimeZone2));
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTimeZone0, dateTimeZone2);
      assertNotSame(dateTimeZone1, dateTimeZone2);
      assertNotSame(dateTimeZone1, dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      LimitChronology limitChronology0 = LimitChronology.getInstance(gJChronology0, (ReadableDateTime) null, (ReadableDateTime) null);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(limitChronology0);
      
      Chronology chronology0 = limitChronology0.withUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(chronology0);
      assertSame(limitChronology0, chronology0);
      assertSame(chronology0, limitChronology0);
      
      Duration duration0 = Duration.standardSeconds(787L);
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(13L, duration0.getStandardMinutes());
      assertEquals(787000L, duration0.getMillis());
      assertEquals(787L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertNotNull(duration0);
      
      Duration duration1 = new Duration(0L, 1209600000L);
      assertEquals(1209600000L, duration1.getMillis());
      assertEquals(20160L, duration1.getStandardMinutes());
      assertEquals(1209600L, duration1.getStandardSeconds());
      assertEquals(336L, duration1.getStandardHours());
      assertEquals(14L, duration1.getStandardDays());
      assertNotNull(duration1);
      assertFalse(duration1.equals((Object)duration0));
      
      Duration duration2 = duration1.plus((ReadableDuration) duration0);
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(13L, duration0.getStandardMinutes());
      assertEquals(787000L, duration0.getMillis());
      assertEquals(787L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1209600000L, duration1.getMillis());
      assertEquals(20160L, duration1.getStandardMinutes());
      assertEquals(1209600L, duration1.getStandardSeconds());
      assertEquals(336L, duration1.getStandardHours());
      assertEquals(14L, duration1.getStandardDays());
      assertEquals(1210387000L, duration2.getMillis());
      assertEquals(14L, duration2.getStandardDays());
      assertEquals(336L, duration2.getStandardHours());
      assertEquals(1210387L, duration2.getStandardSeconds());
      assertEquals(20173L, duration2.getStandardMinutes());
      assertNotNull(duration2);
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(duration2.equals((Object)duration1));
      assertFalse(duration2.equals((Object)duration0));
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration2);
      assertNotSame(duration1, duration0);
      assertNotSame(duration2, duration1);
      assertNotSame(duration2, duration0);
      
      Period period0 = duration2.toPeriod((Chronology) limitChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(13L, duration0.getStandardMinutes());
      assertEquals(787000L, duration0.getMillis());
      assertEquals(787L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1209600000L, duration1.getMillis());
      assertEquals(20160L, duration1.getStandardMinutes());
      assertEquals(1209600L, duration1.getStandardSeconds());
      assertEquals(336L, duration1.getStandardHours());
      assertEquals(14L, duration1.getStandardDays());
      assertEquals(1210387000L, duration2.getMillis());
      assertEquals(14L, duration2.getStandardDays());
      assertEquals(336L, duration2.getStandardHours());
      assertEquals(1210387L, duration2.getStandardSeconds());
      assertEquals(20173L, duration2.getStandardMinutes());
      assertNotNull(period0);
      assertFalse(duration0.equals((Object)duration2));
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration2));
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(duration2.equals((Object)duration1));
      assertFalse(duration2.equals((Object)duration0));
      assertSame(limitChronology0, chronology0);
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration2);
      assertNotSame(duration1, duration0);
      assertNotSame(duration2, duration1);
      assertNotSame(duration2, duration0);
      
      Period period1 = period0.withSeconds((-16));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(13L, duration0.getStandardMinutes());
      assertEquals(787000L, duration0.getMillis());
      assertEquals(787L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1209600000L, duration1.getMillis());
      assertEquals(20160L, duration1.getStandardMinutes());
      assertEquals(1209600L, duration1.getStandardSeconds());
      assertEquals(336L, duration1.getStandardHours());
      assertEquals(14L, duration1.getStandardDays());
      assertEquals(1210387000L, duration2.getMillis());
      assertEquals(14L, duration2.getStandardDays());
      assertEquals(336L, duration2.getStandardHours());
      assertEquals(1210387L, duration2.getStandardSeconds());
      assertEquals(20173L, duration2.getStandardMinutes());
      assertNotNull(period1);
      assertFalse(duration0.equals((Object)duration2));
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration2));
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(duration2.equals((Object)duration1));
      assertFalse(duration2.equals((Object)duration0));
      assertFalse(period1.equals((Object)period0));
      assertSame(limitChronology0, chronology0);
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration2);
      assertNotSame(duration1, duration0);
      assertNotSame(duration2, duration1);
      assertNotSame(duration2, duration0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      
      Period period2 = period0.plusYears((-16));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(13L, duration0.getStandardMinutes());
      assertEquals(787000L, duration0.getMillis());
      assertEquals(787L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1209600000L, duration1.getMillis());
      assertEquals(20160L, duration1.getStandardMinutes());
      assertEquals(1209600L, duration1.getStandardSeconds());
      assertEquals(336L, duration1.getStandardHours());
      assertEquals(14L, duration1.getStandardDays());
      assertEquals(1210387000L, duration2.getMillis());
      assertEquals(14L, duration2.getStandardDays());
      assertEquals(336L, duration2.getStandardHours());
      assertEquals(1210387L, duration2.getStandardSeconds());
      assertEquals(20173L, duration2.getStandardMinutes());
      assertNotNull(period2);
      assertFalse(duration0.equals((Object)duration2));
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration2));
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(duration2.equals((Object)duration1));
      assertFalse(duration2.equals((Object)duration0));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertSame(limitChronology0, chronology0);
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration2);
      assertNotSame(duration1, duration0);
      assertNotSame(duration2, duration1);
      assertNotSame(duration2, duration0);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      
      long long0 = limitChronology0.add((ReadablePeriod) period2, 259200000L, 3375);
      assertEquals((-1699992425475000L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(13L, duration0.getStandardMinutes());
      assertEquals(787000L, duration0.getMillis());
      assertEquals(787L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1209600000L, duration1.getMillis());
      assertEquals(20160L, duration1.getStandardMinutes());
      assertEquals(1209600L, duration1.getStandardSeconds());
      assertEquals(336L, duration1.getStandardHours());
      assertEquals(14L, duration1.getStandardDays());
      assertEquals(1210387000L, duration2.getMillis());
      assertEquals(14L, duration2.getStandardDays());
      assertEquals(336L, duration2.getStandardHours());
      assertEquals(1210387L, duration2.getStandardSeconds());
      assertEquals(20173L, duration2.getStandardMinutes());
      assertFalse(duration0.equals((Object)duration2));
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration2));
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(duration2.equals((Object)duration1));
      assertFalse(duration2.equals((Object)duration0));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertSame(limitChronology0, chronology0);
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration2);
      assertNotSame(duration1, duration0);
      assertNotSame(duration2, duration1);
      assertNotSame(duration2, duration0);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      GJChronology gJChronology1 = GJChronology.getInstance();
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology1);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertNotSame(gJChronology1, gJChronology0);
      
      GJChronology gJChronology2 = (GJChronology)gJChronology1.withZone(dateTimeZone0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertEquals(4, gJChronology2.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology2);
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertFalse(gJChronology2.equals((Object)gJChronology1));
      assertNotSame(gJChronology0, gJChronology1);
      assertSame(gJChronology0, gJChronology2);
      assertNotSame(gJChronology1, gJChronology2);
      assertNotSame(gJChronology1, gJChronology0);
      assertSame(gJChronology2, gJChronology0);
      assertNotSame(gJChronology2, gJChronology1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();
      assertEquals("Etc/UTC", dateTimeZone1.getID());
      assertEquals("Etc/UTC", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertNotNull(dateTimeZone1);
      assertFalse(dateTimeZone1.equals((Object)dateTimeZone0));
      assertNotSame(dateTimeZone1, dateTimeZone0);
      
      long long0 = gJChronology0.julianToGregorianByYear(0);
      assertEquals((-1123200000L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertNotNull(instant0);
      
      long long1 = gJChronology0.julianToGregorianByWeekyear((-1123200000L));
      assertEquals((-2332800000L), long1);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertFalse(long1 == long0);
      
      int int0 = gJChronology0.getMinimumDaysInFirstWeek();
      assertEquals(4, int0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      Period period0 = new Period((-79268889603644L), 1537L, gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(period0);
      
      int[] intArray0 = gJChronology0.get((ReadablePeriod) period0, (-1517L));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, (-1), (-517)}, intArray0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(intArray0);
      assertEquals(8, intArray0.length);
      
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-1171), "", 4497, 794, 4497, 2, (-1171), 659, 2, 2147483618, (-489));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month 4497
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      Period period0 = new Period(9223354850140800000L, (-78986188800000L), gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(period0);
      
      int[] intArray0 = gJChronology0.get((ReadablePeriod) period0, (-1472L));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, (-1), (-472)}, intArray0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(intArray0);
      assertEquals(8, intArray0.length);
      
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-929), "", 3690, 57, (-1690), (-929), (-1069), 2147483623, 794, 2147483623, (-489));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month 3690
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(120);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      boolean boolean0 = dateTimeZone0.isFixed();
      assertTrue(boolean0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      
      DateTime dateTime0 = new DateTime((-3082L), dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals((-3082L), dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      DateTime dateTime1 = dateTime0.minusDays(120);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals((-3082L), dateTime0.getMillis());
      assertEquals((-10368003082L), dateTime1.getMillis());
      assertNotNull(dateTime1);
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      
      int int0 = dateTimeZone0.getOffset((ReadableInstant) dateTime1);
      assertEquals(120, int0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals((-3082L), dateTime0.getMillis());
      assertEquals((-10368003082L), dateTime1.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      
      DateTimeZone dateTimeZone1 = buddhistChronology0.getZone();
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals("+00:00:00.120", dateTimeZone1.toString());
      assertEquals("+00:00:00.120", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertNotNull(dateTimeZone1);
      assertTrue(dateTimeZone1.equals((Object)dateTimeZone0));
      assertEquals(1, BuddhistChronology.BE);
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTimeZone1, dateTimeZone0);
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) buddhistChronology0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime0);
      assertTrue(dateTimeZone0.equals((Object)dateTimeZone1));
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotSame(dateTimeZone0, dateTimeZone1);
      
      Date date0 = mutableDateTime0.toDate();
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      assertTrue(dateTimeZone0.equals((Object)dateTimeZone1));
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotSame(dateTimeZone0, dateTimeZone1);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone1, (ReadableInstant) mutableDateTime0, 1);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals("+00:00:00.120", dateTimeZone1.toString());
      assertEquals("+00:00:00.120", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      assertTrue(dateTimeZone0.equals((Object)dateTimeZone1));
      assertTrue(dateTimeZone1.equals((Object)dateTimeZone0));
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTimeZone1, dateTimeZone0);
      
      long long0 = gJChronology0.add(1L, (long) 2, 6);
      assertEquals(13L, long0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals("+00:00:00.120", dateTimeZone1.toString());
      assertEquals("+00:00:00.120", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertTrue(dateTimeZone0.equals((Object)dateTimeZone1));
      assertTrue(dateTimeZone1.equals((Object)dateTimeZone0));
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTimeZone1, dateTimeZone0);
      
      long long1 = gJChronology0.gregorianToJulianByYear(1);
      assertEquals(1123200001L, long1);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals("+00:00:00.120", dateTimeZone1.toString());
      assertEquals("+00:00:00.120", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertTrue(dateTimeZone0.equals((Object)dateTimeZone1));
      assertTrue(dateTimeZone1.equals((Object)dateTimeZone0));
      assertFalse(long1 == long0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTimeZone1, dateTimeZone0);
      
      Instant instant0 = new Instant();
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(instant0);
      
      DateTime dateTime2 = dateTime0.plusMinutes(3);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.120", dateTimeZone0.getID());
      assertEquals("+00:00:00.120", dateTimeZone0.toString());
      assertEquals((-3082L), dateTime0.getMillis());
      assertEquals(176918L, dateTime2.getMillis());
      assertNotNull(dateTime2);
      assertTrue(dateTimeZone0.equals((Object)dateTimeZone1));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      
      int int1 = (-1432);
      try { 
        gJChronology0.getDateTimeMillis((-276), 2, 4, (-1432), 91, 5, (-1730));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1432 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      long long0 = gJChronology0.julianToGregorianByWeekyear(359453406412800803L);
      assertEquals(359446024224000803L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      Hours hours0 = Hours.FIVE;
      assertEquals(1, hours0.size());
      assertEquals(5, hours0.getHours());
      assertNotNull(hours0);
      
      Integer integer0 = null;
      Integer integer1 = Integer.getInteger("", (Integer) null);
      assertNull(integer1);
      
      Object object0 = gJChronology0.getParam();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(object0);
      
      boolean boolean0 = hours0.equals(object0);
      assertFalse(boolean0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, hours0.size());
      assertEquals(5, hours0.getHours());
      
      // Undeclared exception!
      try { 
        gJChronology0.get((ReadablePeriod) hours0, 359446024224000803L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 99846117840
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      String string0 = "";
      int int0 = (-2683);
      Period period0 = new Period((-63L), 543L, gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(period0);
      
      int[] intArray0 = gJChronology0.get((ReadablePeriod) period0, 543L);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 543}, intArray0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(intArray0);
      assertEquals(8, intArray0.length);
      
      long long0 = gJChronology0.gregorianToJulianByYear((-79302585599880L));
      assertEquals((-79271567999880L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      DateTimeZone dateTimeZone0 = null;
      // Undeclared exception!
      try { 
        GJChronology.getInstance((DateTimeZone) null, (long) (-2683), (-2705));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: -2705
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      gJChronology0.assemble(assembledChronology_Fields0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      long long0 = gJChronology0.julianToGregorianByWeekyear((-499L));
      assertEquals((-1209600499L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      long long1 = gJChronology0.gregorianToJulianByWeekyear((-1209600499L));
      assertEquals((-499L), long1);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertFalse(long1 == long0);
      
      Hours hours0 = Hours.FIVE;
      assertEquals(5, hours0.getHours());
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      try { 
        gJChronology0.getDateTimeMillis((-86399999), (-86399999), (-86399999), (-86399999));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -86399999 for millisOfDay must be in the range [0,86399999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      long long0 = gJChronology0.julianToGregorianByYear(580L);
      assertEquals((-1123199420L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      Instant instant0 = Instant.now();
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(instant0);
      
      Instant instant1 = instant0.minus((-1123199420L));
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1393532480740L, instant1.getMillis());
      assertNotNull(instant1);
      assertFalse(instant1.equals((Object)instant0));
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      
      DateTimeZone dateTimeZone0 = instant1.getZone();
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1393532480740L, instant1.getMillis());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime(580L, (DateTimeZone) null);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(580L, mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime0);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      
      int int0 = dateTimeZone0.getOffset((ReadableInstant) mutableDateTime0);
      assertEquals(0, int0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1393532480740L, instant1.getMillis());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(580L, mutableDateTime0.getMillis());
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeZone dateTimeZone1 = buddhistChronology0.getZone();
      assertEquals("Etc/UTC", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("Etc/UTC", dateTimeZone1.getID());
      assertNotNull(dateTimeZone1);
      assertFalse(dateTimeZone1.equals((Object)dateTimeZone0));
      assertEquals(1, BuddhistChronology.BE);
      assertNotSame(dateTimeZone1, dateTimeZone0);
      
      MutableDateTime mutableDateTime1 = MutableDateTime.now((Chronology) gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertNotNull(mutableDateTime1);
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      
      Date date0 = mutableDateTime1.toDate();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime1, 4);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1393532480740L, instant1.getMillis());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology1);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(dateTimeZone0.equals((Object)dateTimeZone1));
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotSame(gJChronology1, gJChronology0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string0 = dateTimeZone1.getName((-1123199420L), locale0);
      assertEquals("+00:00", string0);
      assertEquals("Etc/UTC", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("Etc/UTC", dateTimeZone1.getID());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(string0);
      assertFalse(dateTimeZone1.equals((Object)dateTimeZone0));
      assertEquals(1, BuddhistChronology.BE);
      assertNotSame(dateTimeZone1, dateTimeZone0);
      
      ArrayList<GregorianChronology> arrayList0 = new ArrayList<GregorianChronology>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      boolean boolean0 = gJChronology0.equals(arrayList0);
      assertFalse(boolean0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertNotSame(gJChronology0, gJChronology1);
      
      long long1 = gJChronology1.getDateTimeMillis((-1897L), 3, 4, 0, 1);
      assertEquals((-75359999L), long1);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1393532480740L, instant1.getMillis());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(long1 == long0);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(dateTimeZone0.equals((Object)dateTimeZone1));
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotSame(gJChronology1, gJChronology0);
      
      GJChronology gJChronology2 = (GJChronology)gJChronology0.withUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(4, gJChronology2.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology2);
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(gJChronology2.equals((Object)gJChronology1));
      assertFalse(gJChronology2.equals((Object)gJChronology0));
      assertNotSame(gJChronology0, gJChronology2);
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(gJChronology2, gJChronology1);
      assertNotSame(gJChronology2, gJChronology0);
      
      long long2 = gJChronology0.gregorianToJulianByYear((-2409L));
      assertEquals(1123197591L, long2);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertFalse(gJChronology0.equals((Object)gJChronology2));
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertNotSame(gJChronology0, gJChronology2);
      assertNotSame(gJChronology0, gJChronology1);
      
      GJChronology gJChronology3 = GJChronology.getInstance(dateTimeZone1, 2299L, 4);
      assertEquals(4, gJChronology3.getMinimumDaysInFirstWeek());
      assertEquals("Etc/UTC", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("Etc/UTC", dateTimeZone1.getID());
      assertNotNull(gJChronology3);
      assertFalse(gJChronology3.equals((Object)gJChronology0));
      assertFalse(gJChronology3.equals((Object)gJChronology2));
      assertFalse(gJChronology3.equals((Object)gJChronology1));
      assertFalse(dateTimeZone1.equals((Object)dateTimeZone0));
      assertEquals(1, BuddhistChronology.BE);
      assertNotSame(gJChronology3, gJChronology0);
      assertNotSame(gJChronology3, gJChronology2);
      assertNotSame(gJChronology3, gJChronology1);
      assertNotSame(dateTimeZone1, dateTimeZone0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      boolean boolean1 = gJChronology3.equals(gregorianChronology0);
      assertFalse(boolean1);
      assertEquals(4, gJChronology3.getMinimumDaysInFirstWeek());
      assertEquals("Etc/UTC", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("Etc/UTC", dateTimeZone1.getID());
      assertFalse(gJChronology3.equals((Object)gJChronology0));
      assertFalse(gJChronology3.equals((Object)gJChronology2));
      assertFalse(gJChronology3.equals((Object)gJChronology1));
      assertTrue(boolean1 == boolean0);
      assertFalse(dateTimeZone1.equals((Object)dateTimeZone0));
      assertEquals(1, BuddhistChronology.BE);
      assertNotSame(gJChronology3, gJChronology0);
      assertNotSame(gJChronology3, gJChronology2);
      assertNotSame(gJChronology3, gJChronology1);
      assertNotSame(dateTimeZone1, dateTimeZone0);
      
      GJChronology gJChronology4 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1393532480740L, instant1.getMillis());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(580L, mutableDateTime0.getMillis());
      assertEquals(4, gJChronology4.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology4);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(dateTimeZone0.equals((Object)dateTimeZone1));
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(gJChronology4.equals((Object)gJChronology3));
      assertFalse(gJChronology4.equals((Object)gJChronology1));
      assertFalse(gJChronology4.equals((Object)gJChronology0));
      assertFalse(gJChronology4.equals((Object)gJChronology2));
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(gJChronology4, gJChronology3);
      assertNotSame(gJChronology4, gJChronology1);
      assertNotSame(gJChronology4, gJChronology0);
      assertNotSame(gJChronology4, gJChronology2);
      
      GJChronology gJChronology5 = GJChronology.getInstance(dateTimeZone1, (ReadableInstant) instant0, 2);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(2, gJChronology5.getMinimumDaysInFirstWeek());
      assertEquals("Etc/UTC", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("Etc/UTC", dateTimeZone1.getID());
      assertNotNull(gJChronology5);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(gJChronology5.equals((Object)gJChronology1));
      assertFalse(gJChronology5.equals((Object)gJChronology0));
      assertFalse(gJChronology5.equals((Object)gJChronology2));
      assertFalse(gJChronology5.equals((Object)gJChronology4));
      assertFalse(gJChronology5.equals((Object)gJChronology3));
      assertFalse(dateTimeZone1.equals((Object)dateTimeZone0));
      assertEquals(1, BuddhistChronology.BE);
      assertNotSame(instant0, instant1);
      assertNotSame(gJChronology5, gJChronology1);
      assertNotSame(gJChronology5, gJChronology0);
      assertNotSame(gJChronology5, gJChronology2);
      assertNotSame(gJChronology5, gJChronology4);
      assertNotSame(gJChronology5, gJChronology3);
      assertNotSame(dateTimeZone1, dateTimeZone0);
      
      String string1 = gJChronology5.toString();
      assertEquals("GJChronology[Etc/UTC,cutover=2014-02-14T20:21:21.320Z,mdfw=2]", string1);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(2, gJChronology5.getMinimumDaysInFirstWeek());
      assertEquals("Etc/UTC", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("Etc/UTC", dateTimeZone1.getID());
      assertNotNull(string1);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(gJChronology5.equals((Object)gJChronology1));
      assertFalse(gJChronology5.equals((Object)gJChronology0));
      assertFalse(gJChronology5.equals((Object)gJChronology2));
      assertFalse(gJChronology5.equals((Object)gJChronology4));
      assertFalse(gJChronology5.equals((Object)gJChronology3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(dateTimeZone1.equals((Object)dateTimeZone0));
      assertEquals(1, BuddhistChronology.BE);
      assertNotSame(instant0, instant1);
      assertNotSame(gJChronology5, gJChronology1);
      assertNotSame(gJChronology5, gJChronology0);
      assertNotSame(gJChronology5, gJChronology2);
      assertNotSame(gJChronology5, gJChronology4);
      assertNotSame(gJChronology5, gJChronology3);
      assertNotSame(dateTimeZone1, dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      long long0 = gJChronology0.julianToGregorianByYear(580L);
      assertEquals((-1123199420L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      Instant instant0 = Instant.now();
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(instant0);
      
      Instant instant1 = instant0.minus((-1123199420L));
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1393532480740L, instant1.getMillis());
      assertNotNull(instant1);
      assertFalse(instant1.equals((Object)instant0));
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      
      DateTimeZone dateTimeZone0 = instant1.getZone();
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1393532480740L, instant1.getMillis());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime(580L, (DateTimeZone) null);
      assertEquals(580L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime0);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      
      int int0 = dateTimeZone0.getOffset((ReadableInstant) mutableDateTime0);
      assertEquals(0, int0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1393532480740L, instant1.getMillis());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(580L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeZone dateTimeZone1 = buddhistChronology0.getZone();
      assertEquals("Etc/UTC", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("Etc/UTC", dateTimeZone1.getID());
      assertNotNull(dateTimeZone1);
      assertFalse(dateTimeZone1.equals((Object)dateTimeZone0));
      assertEquals(1, BuddhistChronology.BE);
      assertNotSame(dateTimeZone1, dateTimeZone0);
      
      MutableDateTime mutableDateTime1 = MutableDateTime.now((Chronology) gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertNotNull(mutableDateTime1);
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      
      Date date0 = mutableDateTime1.toDate();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime1, 4);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1393532480740L, instant1.getMillis());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology1);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(dateTimeZone0.equals((Object)dateTimeZone1));
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotSame(gJChronology1, gJChronology0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string0 = dateTimeZone1.getName((-1123199420L), locale0);
      assertEquals("+00:00", string0);
      assertEquals("Etc/UTC", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("Etc/UTC", dateTimeZone1.getID());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(string0);
      assertFalse(dateTimeZone1.equals((Object)dateTimeZone0));
      assertEquals(1, BuddhistChronology.BE);
      assertNotSame(dateTimeZone1, dateTimeZone0);
      
      ArrayList<GregorianChronology> arrayList0 = new ArrayList<GregorianChronology>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      boolean boolean0 = gJChronology0.equals(arrayList0);
      assertFalse(boolean0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertNotSame(gJChronology0, gJChronology1);
      
      long long1 = new Integer(1);
      assertEquals(1, long1);
      assertFalse(long1 == long0);
      
      GJChronology gJChronology2 = (GJChronology)gJChronology0.withUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(4, gJChronology2.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology2);
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(gJChronology2.equals((Object)gJChronology1));
      assertFalse(gJChronology2.equals((Object)gJChronology0));
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(gJChronology0, gJChronology2);
      assertNotSame(gJChronology2, gJChronology1);
      assertNotSame(gJChronology2, gJChronology0);
      
      long long2 = gJChronology0.gregorianToJulianByYear((-2393L));
      assertEquals(1123197607L, long2);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(gJChronology0.equals((Object)gJChronology2));
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(gJChronology0, gJChronology2);
      
      GJChronology gJChronology3 = GJChronology.getInstance(dateTimeZone1, 2299L, 4);
      assertEquals(4, gJChronology3.getMinimumDaysInFirstWeek());
      assertEquals("Etc/UTC", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("Etc/UTC", dateTimeZone1.getID());
      assertNotNull(gJChronology3);
      assertFalse(gJChronology3.equals((Object)gJChronology0));
      assertFalse(gJChronology3.equals((Object)gJChronology2));
      assertFalse(gJChronology3.equals((Object)gJChronology1));
      assertFalse(dateTimeZone1.equals((Object)dateTimeZone0));
      assertEquals(1, BuddhistChronology.BE);
      assertNotSame(gJChronology3, gJChronology0);
      assertNotSame(gJChronology3, gJChronology2);
      assertNotSame(gJChronology3, gJChronology1);
      assertNotSame(dateTimeZone1, dateTimeZone0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      boolean boolean1 = gJChronology3.equals(gregorianChronology0);
      assertFalse(boolean1);
      assertEquals(4, gJChronology3.getMinimumDaysInFirstWeek());
      assertEquals("Etc/UTC", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("Etc/UTC", dateTimeZone1.getID());
      assertFalse(gJChronology3.equals((Object)gJChronology0));
      assertFalse(gJChronology3.equals((Object)gJChronology2));
      assertFalse(gJChronology3.equals((Object)gJChronology1));
      assertTrue(boolean1 == boolean0);
      assertFalse(dateTimeZone1.equals((Object)dateTimeZone0));
      assertEquals(1, BuddhistChronology.BE);
      assertNotSame(gJChronology3, gJChronology0);
      assertNotSame(gJChronology3, gJChronology2);
      assertNotSame(gJChronology3, gJChronology1);
      assertNotSame(dateTimeZone1, dateTimeZone0);
      
      GJChronology gJChronology4 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1393532480740L, instant1.getMillis());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(580L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, gJChronology4.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology4);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(dateTimeZone0.equals((Object)dateTimeZone1));
      assertFalse(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(gJChronology4.equals((Object)gJChronology3));
      assertFalse(gJChronology4.equals((Object)gJChronology0));
      assertFalse(gJChronology4.equals((Object)gJChronology2));
      assertFalse(gJChronology4.equals((Object)gJChronology1));
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(gJChronology4, gJChronology3);
      assertNotSame(gJChronology4, gJChronology0);
      assertNotSame(gJChronology4, gJChronology2);
      assertNotSame(gJChronology4, gJChronology1);
      
      int int1 = gJChronology3.hashCode();
      assertEquals(4, gJChronology3.getMinimumDaysInFirstWeek());
      assertEquals("Etc/UTC", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("Etc/UTC", dateTimeZone1.getID());
      assertFalse(gJChronology3.equals((Object)gJChronology0));
      assertFalse(gJChronology3.equals((Object)gJChronology4));
      assertFalse(gJChronology3.equals((Object)gJChronology2));
      assertFalse(gJChronology3.equals((Object)gJChronology1));
      assertFalse(int1 == int0);
      assertFalse(dateTimeZone1.equals((Object)dateTimeZone0));
      assertEquals(1, BuddhistChronology.BE);
      assertNotSame(gJChronology3, gJChronology0);
      assertNotSame(gJChronology3, gJChronology4);
      assertNotSame(gJChronology3, gJChronology2);
      assertNotSame(gJChronology3, gJChronology1);
      assertNotSame(dateTimeZone1, dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = new IslamicChronology.LeapYearPatternType(292278993, 292272992);
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      boolean boolean0 = islamicChronology_LeapYearPatternType0.isLeapYear(292278993);
      assertFalse(boolean0);
      
      IslamicChronology islamicChronology0 = new IslamicChronology(gJChronology0, gJChronology0, islamicChronology_LeapYearPatternType0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(zonedChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeZone dateTimeZone1 = zonedChronology0.getZone();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals("UTC", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertNotNull(dateTimeZone1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      
      try { 
        buddhistChronology0.getDateTimeMillis(20587500, 20587500, 292278993, 2, 1, 1723, (-2049));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 20587500 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      LimitChronology limitChronology0 = LimitChronology.getInstance(gJChronology0, (ReadableDateTime) null, (ReadableDateTime) null);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(limitChronology0);
      
      Chronology chronology0 = limitChronology0.withUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(chronology0);
      assertSame(limitChronology0, chronology0);
      assertSame(chronology0, limitChronology0);
      
      Duration duration0 = Duration.standardSeconds(1931L);
      assertEquals(1931000L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(32L, duration0.getStandardMinutes());
      assertEquals(1931L, duration0.getStandardSeconds());
      assertNotNull(duration0);
      
      Duration duration1 = new Duration((-1186L), (-12219292800000L));
      assertEquals((-203654879L), duration1.getStandardMinutes());
      assertEquals((-3394247L), duration1.getStandardHours());
      assertEquals((-141426L), duration1.getStandardDays());
      assertEquals((-12219292798814L), duration1.getMillis());
      assertEquals((-12219292798L), duration1.getStandardSeconds());
      assertNotNull(duration1);
      assertFalse(duration1.equals((Object)duration0));
      
      Duration duration2 = duration0.plus((ReadableDuration) duration1);
      assertEquals(1931000L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(32L, duration0.getStandardMinutes());
      assertEquals(1931L, duration0.getStandardSeconds());
      assertEquals((-203654879L), duration1.getStandardMinutes());
      assertEquals((-3394247L), duration1.getStandardHours());
      assertEquals((-141426L), duration1.getStandardDays());
      assertEquals((-12219292798814L), duration1.getMillis());
      assertEquals((-12219292798L), duration1.getStandardSeconds());
      assertEquals((-141426L), duration2.getStandardDays());
      assertEquals((-12219290867814L), duration2.getMillis());
      assertEquals((-3394247L), duration2.getStandardHours());
      assertEquals((-12219290867L), duration2.getStandardSeconds());
      assertEquals((-203654847L), duration2.getStandardMinutes());
      assertNotNull(duration2);
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(duration2.equals((Object)duration1));
      assertFalse(duration2.equals((Object)duration0));
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertNotSame(duration1, duration2);
      assertNotSame(duration2, duration1);
      assertNotSame(duration2, duration0);
      
      Period period0 = duration2.toPeriod((Chronology) gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1931000L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(32L, duration0.getStandardMinutes());
      assertEquals(1931L, duration0.getStandardSeconds());
      assertEquals((-203654879L), duration1.getStandardMinutes());
      assertEquals((-3394247L), duration1.getStandardHours());
      assertEquals((-141426L), duration1.getStandardDays());
      assertEquals((-12219292798814L), duration1.getMillis());
      assertEquals((-12219292798L), duration1.getStandardSeconds());
      assertEquals((-141426L), duration2.getStandardDays());
      assertEquals((-12219290867814L), duration2.getMillis());
      assertEquals((-3394247L), duration2.getStandardHours());
      assertEquals((-12219290867L), duration2.getStandardSeconds());
      assertEquals((-203654847L), duration2.getStandardMinutes());
      assertNotNull(period0);
      assertFalse(duration0.equals((Object)duration2));
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(duration1.equals((Object)duration2));
      assertFalse(duration2.equals((Object)duration1));
      assertFalse(duration2.equals((Object)duration0));
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertNotSame(duration1, duration2);
      assertNotSame(duration2, duration1);
      assertNotSame(duration2, duration0);
      
      Period period1 = period0.withSeconds(3375);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1931000L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(32L, duration0.getStandardMinutes());
      assertEquals(1931L, duration0.getStandardSeconds());
      assertEquals((-203654879L), duration1.getStandardMinutes());
      assertEquals((-3394247L), duration1.getStandardHours());
      assertEquals((-141426L), duration1.getStandardDays());
      assertEquals((-12219292798814L), duration1.getMillis());
      assertEquals((-12219292798L), duration1.getStandardSeconds());
      assertEquals((-141426L), duration2.getStandardDays());
      assertEquals((-12219290867814L), duration2.getMillis());
      assertEquals((-3394247L), duration2.getStandardHours());
      assertEquals((-12219290867L), duration2.getStandardSeconds());
      assertEquals((-203654847L), duration2.getStandardMinutes());
      assertNotNull(period1);
      assertFalse(duration0.equals((Object)duration2));
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(duration1.equals((Object)duration2));
      assertFalse(duration2.equals((Object)duration1));
      assertFalse(duration2.equals((Object)duration0));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertNotSame(duration1, duration2);
      assertNotSame(duration2, duration1);
      assertNotSame(duration2, duration0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      
      Period period2 = period1.plusYears(3375);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1931000L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(32L, duration0.getStandardMinutes());
      assertEquals(1931L, duration0.getStandardSeconds());
      assertEquals((-203654879L), duration1.getStandardMinutes());
      assertEquals((-3394247L), duration1.getStandardHours());
      assertEquals((-141426L), duration1.getStandardDays());
      assertEquals((-12219292798814L), duration1.getMillis());
      assertEquals((-12219292798L), duration1.getStandardSeconds());
      assertEquals((-141426L), duration2.getStandardDays());
      assertEquals((-12219290867814L), duration2.getMillis());
      assertEquals((-3394247L), duration2.getStandardHours());
      assertEquals((-12219290867L), duration2.getStandardSeconds());
      assertEquals((-203654847L), duration2.getStandardMinutes());
      assertNotNull(period2);
      assertFalse(duration0.equals((Object)duration2));
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(duration1.equals((Object)duration2));
      assertFalse(duration2.equals((Object)duration1));
      assertFalse(duration2.equals((Object)duration0));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertNotSame(duration1, duration2);
      assertNotSame(duration2, duration1);
      assertNotSame(duration2, duration0);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      
      long long0 = limitChronology0.add((ReadablePeriod) period2, 803L, 3375);
      assertEquals(318213311283178553L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1931000L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(32L, duration0.getStandardMinutes());
      assertEquals(1931L, duration0.getStandardSeconds());
      assertEquals((-203654879L), duration1.getStandardMinutes());
      assertEquals((-3394247L), duration1.getStandardHours());
      assertEquals((-141426L), duration1.getStandardDays());
      assertEquals((-12219292798814L), duration1.getMillis());
      assertEquals((-12219292798L), duration1.getStandardSeconds());
      assertEquals((-141426L), duration2.getStandardDays());
      assertEquals((-12219290867814L), duration2.getMillis());
      assertEquals((-3394247L), duration2.getStandardHours());
      assertEquals((-12219290867L), duration2.getStandardSeconds());
      assertEquals((-203654847L), duration2.getStandardMinutes());
      assertFalse(duration0.equals((Object)duration2));
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(duration1.equals((Object)duration2));
      assertFalse(duration2.equals((Object)duration1));
      assertFalse(duration2.equals((Object)duration0));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertSame(limitChronology0, chronology0);
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertNotSame(duration1, duration2);
      assertNotSame(duration2, duration1);
      assertNotSame(duration2, duration0);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      
      LocalDate localDate0 = new LocalDate(3929L, (Chronology) limitChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      int[] intArray0 = gJChronology0.get((ReadablePartial) localDate0, 2147483647L);
      assertArrayEquals(new int[] {1970, 1, 25}, intArray0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(3, localDate0.size());
      assertNotNull(intArray0);
      assertEquals(3, intArray0.length);
      assertSame(limitChronology0, chronology0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      long long1 = gJChronology0.julianToGregorianByYear((-78703574400000L));
      assertEquals((-78734592000000L), long1);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertFalse(long1 == long0);
      
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertNotNull(instant0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      LimitChronology limitChronology0 = LimitChronology.getInstance(gJChronology0, (ReadableDateTime) null, (ReadableDateTime) null);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(limitChronology0);
      
      Chronology chronology0 = limitChronology0.withUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(chronology0);
      assertSame(limitChronology0, chronology0);
      assertSame(chronology0, limitChronology0);
      
      Chronology chronology1 = limitChronology0.withUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(chronology1);
      assertSame(limitChronology0, chronology1);
      assertSame(limitChronology0, chronology0);
      assertSame(chronology1, limitChronology0);
      assertSame(chronology1, chronology0);
      
      GJChronology gJChronology1 = GJChronology.getInstance();
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology1);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertNotSame(gJChronology1, gJChronology0);
      
      long long0 = gJChronology1.julianToGregorianByYear(30962844000000L);
      assertEquals(30961116000000L, long0);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertNotSame(gJChronology1, gJChronology0);
      
      long long1 = limitChronology0.add((ReadablePeriod) null, 803L, 3375);
      assertEquals(803L, long1);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(long1 == long0);
      assertNotSame(gJChronology0, gJChronology1);
      assertSame(limitChronology0, chronology1);
      assertSame(limitChronology0, chronology0);
      
      LocalDate localDate0 = new LocalDate(803L, chronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      
      int[] intArray0 = gJChronology0.get((ReadablePartial) localDate0, 803L);
      assertArrayEquals(new int[] {1970, 1, 1}, intArray0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(3, localDate0.size());
      assertNotNull(intArray0);
      assertEquals(3, intArray0.length);
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertNotSame(gJChronology0, gJChronology1);
      assertSame(limitChronology0, chronology1);
      assertSame(limitChronology0, chronology0);
      assertSame(chronology0, limitChronology0);
      assertSame(chronology0, chronology1);
      
      boolean boolean0 = gJChronology0.equals("org.joda.time.chrono.GJChronology$CutoverField");
      assertFalse(boolean0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertNotSame(gJChronology0, gJChronology1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      long long0 = gJChronology0.julianToGregorianByYear(580L);
      assertEquals((-1123199420L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      Instant instant0 = Instant.now();
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(instant0);
      
      Instant instant1 = instant0.minus((-1123199420L));
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1393532480740L, instant1.getMillis());
      assertNotNull(instant1);
      assertFalse(instant1.equals((Object)instant0));
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      
      DateTimeZone dateTimeZone0 = instant1.getZone();
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1393532480740L, instant1.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime(580L, (DateTimeZone) null);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(580L, mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime0);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      int int0 = dateTimeZone0.getOffset((ReadableInstant) mutableDateTime0);
      assertEquals(0, int0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1393532480740L, instant1.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(580L, mutableDateTime0.getMillis());
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeZone dateTimeZone1 = buddhistChronology0.getZone();
      assertEquals("Etc/UTC", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("Etc/UTC", dateTimeZone1.getID());
      assertNotNull(dateTimeZone1);
      assertFalse(dateTimeZone1.equals((Object)dateTimeZone0));
      assertEquals(1, BuddhistChronology.BE);
      assertNotSame(dateTimeZone1, dateTimeZone0);
      
      MutableDateTime mutableDateTime1 = MutableDateTime.now((Chronology) gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertNotNull(mutableDateTime1);
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      
      Date date0 = mutableDateTime1.toDate();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime1, 4);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1393532480740L, instant1.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology1);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(dateTimeZone0.equals((Object)dateTimeZone1));
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotSame(gJChronology1, gJChronology0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(locale0);
      
      String string0 = dateTimeZone1.getName((-1123199420L), locale0);
      assertEquals("+00:00", string0);
      assertEquals("Etc/UTC", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("Etc/UTC", dateTimeZone1.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(string0);
      assertFalse(dateTimeZone1.equals((Object)dateTimeZone0));
      assertEquals(1, BuddhistChronology.BE);
      assertNotSame(dateTimeZone1, dateTimeZone0);
      
      ArrayList<GregorianChronology> arrayList0 = new ArrayList<GregorianChronology>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      boolean boolean0 = gJChronology0.equals(arrayList0);
      assertFalse(boolean0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertNotSame(gJChronology0, gJChronology1);
      
      try { 
        gJChronology1.getDateTimeMillis((-1897L), 268, 4, 0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 268 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      ReadableDateTime readableDateTime0 = null;
      LimitChronology limitChronology0 = LimitChronology.getInstance(gJChronology0, (ReadableDateTime) null, (ReadableDateTime) null);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(limitChronology0);
      
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[UTC]", string0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(string0);
      
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now(dateTimeZone0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime0);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      int int0 = 4764;
      mutableDateTime0.addMillis(4764);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409286084L, mutableDateTime0.getMillis());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      try { 
        gJChronology0.getDateTimeMillis(4, (-2056), 3, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2056 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      long long0 = gJChronology0.julianToGregorianByYear(580L);
      assertEquals((-1123199420L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      Instant instant0 = Instant.now();
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(instant0);
      
      Instant instant1 = instant0.minus((-1123199420L));
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1393532480740L, instant1.getMillis());
      assertNotNull(instant1);
      assertFalse(instant1.equals((Object)instant0));
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      
      DateTimeZone dateTimeZone0 = instant1.getZone();
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1393532480740L, instant1.getMillis());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime(580L, (DateTimeZone) null);
      assertEquals(580L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime0);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      int int0 = dateTimeZone0.getOffset((ReadableInstant) mutableDateTime0);
      assertEquals(0, int0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1393532480740L, instant1.getMillis());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(580L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeZone dateTimeZone1 = buddhistChronology0.getZone();
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("Etc/UTC", dateTimeZone1.toString());
      assertEquals("Etc/UTC", dateTimeZone1.getID());
      assertNotNull(dateTimeZone1);
      assertFalse(dateTimeZone1.equals((Object)dateTimeZone0));
      assertEquals(1, BuddhistChronology.BE);
      assertNotSame(dateTimeZone1, dateTimeZone0);
      
      MutableDateTime mutableDateTime1 = MutableDateTime.now((Chronology) gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertNotNull(mutableDateTime1);
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      
      Date date0 = mutableDateTime1.toDate();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime1, 4);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1393532480740L, instant1.getMillis());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology1);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(dateTimeZone0.equals((Object)dateTimeZone1));
      assertFalse(mutableDateTime1.equals((Object)mutableDateTime0));
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotSame(gJChronology1, gJChronology0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertNotNull(locale0);
      
      String string0 = dateTimeZone1.getName((-1123199420L), locale0);
      assertEquals("+00:00", string0);
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("Etc/UTC", dateTimeZone1.toString());
      assertEquals("Etc/UTC", dateTimeZone1.getID());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertNotNull(string0);
      assertFalse(dateTimeZone1.equals((Object)dateTimeZone0));
      assertEquals(1, BuddhistChronology.BE);
      assertNotSame(dateTimeZone1, dateTimeZone0);
      
      ArrayList<GregorianChronology> arrayList0 = new ArrayList<GregorianChronology>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      boolean boolean0 = gJChronology0.equals(arrayList0);
      assertFalse(boolean0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertNotSame(gJChronology0, gJChronology1);
      
      try { 
        gJChronology1.getDateTimeMillis((-1897L), 260, 4, 0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 260 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      GJChronology gJChronology1 = (GJChronology)gJChronology0.withZone(dateTimeZone0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology1);
      assertSame(gJChronology0, gJChronology1);
      assertSame(gJChronology1, gJChronology0);
      
      int int0 = (-2655);
      // Undeclared exception!
      try { 
        GJChronology.getInstance(dateTimeZone0, (-78986188800000L), (-2655));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: -2655
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      LimitChronology limitChronology0 = LimitChronology.getInstance(gJChronology0, (ReadableDateTime) null, (ReadableDateTime) null);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(limitChronology0);
      
      Chronology chronology0 = limitChronology0.withUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(chronology0);
      assertSame(limitChronology0, chronology0);
      assertSame(chronology0, limitChronology0);
      
      int int0 = 3375;
      long long0 = limitChronology0.add((ReadablePeriod) null, 803L, 3375);
      assertEquals(803L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertSame(limitChronology0, chronology0);
      
      LocalDate localDate0 = new LocalDate(803L, chronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      int[] intArray0 = gJChronology0.get((ReadablePartial) localDate0, 803L);
      assertArrayEquals(new int[] {1970, 1, 1}, intArray0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(3, localDate0.size());
      assertNotNull(intArray0);
      assertEquals(3, intArray0.length);
      assertSame(limitChronology0, chronology0);
      assertSame(chronology0, limitChronology0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      long long1 = gJChronology0.julianToGregorianByYear(96L);
      assertEquals((-1123199904L), long1);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertFalse(long1 == long0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone((TimeZone) null);
      assertEquals("Etc/UTC", dateTimeZone1.getID());
      assertEquals("Etc/UTC", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertNotNull(dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology1);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(gJChronology1, gJChronology0);
      
      GJChronology gJChronology2 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology2.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology2);
      assertFalse(gJChronology2.equals((Object)gJChronology1));
      assertSame(gJChronology2, gJChronology0);
      assertNotSame(gJChronology2, gJChronology1);
      
      // Undeclared exception!
      try { 
        GJChronology.getInstance(dateTimeZone0, (ReadableInstant) null, 3375);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 3375
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      GJChronology gJChronology1 = GJChronology.getInstance((DateTimeZone) null);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology1);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertNotSame(gJChronology1, gJChronology0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      DateTimeZone dateTimeZone0 = gJChronology1.getZone();
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertNotSame(gJChronology1, gJChronology0);
      
      GJChronology gJChronology2 = (GJChronology)gJChronology1.withZone((DateTimeZone) null);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertEquals(4, gJChronology2.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology2);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertFalse(gJChronology2.equals((Object)gJChronology0));
      assertSame(gJChronology1, gJChronology2);
      assertNotSame(gJChronology1, gJChronology0);
      assertNotSame(gJChronology2, gJChronology0);
      assertSame(gJChronology2, gJChronology1);
      
      GJChronology gJChronology3 = GJChronology.getInstance();
      assertEquals(4, gJChronology3.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology3);
      assertFalse(gJChronology3.equals((Object)gJChronology0));
      assertNotSame(gJChronology3, gJChronology0);
      assertSame(gJChronology3, gJChronology2);
      assertSame(gJChronology3, gJChronology1);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime(1723L, dateTimeZone0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1723L, mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime0);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1723L, mutableDateTime0.getMillis());
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology1);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(gJChronology1, gJChronology0);
      
      String string0 = gJChronology1.toString();
      assertEquals("GJChronology[Etc/UTC,cutover=1970-01-01T00:00:01.723Z]", string0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1723L, mutableDateTime0.getMillis());
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertNotNull(string0);
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(gJChronology1, gJChronology0);
      
      mutableDateTime0.addMillis((-2056));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-333L), mutableDateTime0.getMillis());
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertNotSame(gJChronology0, gJChronology1);
      
      MutableDateTime mutableDateTime1 = mutableDateTime0.copy();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-333L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals((-333L), mutableDateTime1.getMillis());
      assertNotNull(mutableDateTime1);
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      
      Date date0 = mutableDateTime1.toDate();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-333L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals((-333L), mutableDateTime1.getMillis());
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", date0.toString());
      assertNotNull(date0);
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertTrue(mutableDateTime0.equals((Object)mutableDateTime1));
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      
      GJChronology gJChronology2 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0, 2);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-333L), mutableDateTime0.getMillis());
      assertEquals(2, gJChronology2.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology2);
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertTrue(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(gJChronology2.equals((Object)gJChronology0));
      assertFalse(gJChronology2.equals((Object)gJChronology1));
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertNotSame(gJChronology0, gJChronology2);
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(gJChronology2, gJChronology0);
      assertNotSame(gJChronology2, gJChronology1);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.KOREA;
      assertEquals("ko", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("ko_KR", locale1.toString());
      assertEquals("KOR", locale1.getISO3Country());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("KR", locale1.getCountry());
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      
      String string1 = locale0.getDisplayVariant(locale1);
      assertEquals("", string1);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("ko_KR", locale1.toString());
      assertEquals("KOR", locale1.getISO3Country());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("KR", locale1.getCountry());
      assertNotNull(string1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      
      String string2 = dateTimeZone0.getName(1L, locale0);
      assertEquals("+00:00", string2);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(string2);
      assertFalse(gJChronology0.equals((Object)gJChronology2));
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(gJChronology0, gJChronology2);
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(locale0, locale1);
      
      boolean boolean0 = gJChronology2.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-333L), mutableDateTime0.getMillis());
      assertEquals(2, gJChronology2.getMinimumDaysInFirstWeek());
      assertFalse(gJChronology0.equals((Object)gJChronology2));
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertTrue(mutableDateTime0.equals((Object)mutableDateTime1));
      assertFalse(gJChronology2.equals((Object)gJChronology0));
      assertFalse(gJChronology2.equals((Object)gJChronology1));
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertNotSame(gJChronology0, gJChronology2);
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(gJChronology2, gJChronology0);
      assertNotSame(gJChronology2, gJChronology1);
      
      try { 
        gJChronology0.getDateTimeMillis((long) (-1389), (-1213), 1, 1, (-2480));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1213 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      gJChronology0.hashCode();
      GJChronology gJChronology1 = GJChronology.getInstance();
      long long0 = new Integer((-947));
      Instant instant0 = gJChronology0.getGregorianCutover();
      DateTimeZone dateTimeZone0 = instant0.getZone();
      Chronology chronology0 = gJChronology1.withZone(dateTimeZone0);
      GJChronology gJChronology2 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology2.getMinimumDaysInFirstWeek());
      assertSame(gJChronology2, chronology0);
      
      DateTimeZone dateTimeZone1 = gJChronology0.getZone();
      gJChronology0.hashCode();
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      DurationField durationField0 = durationFieldType0.getField(gJChronology0);
      assembledChronology_Fields0.eras = durationField0;
      gJChronology0.assemble(assembledChronology_Fields0);
      long long1 = gJChronology0.gregorianToJulianByYear((-4136));
      assertEquals(1123195864L, long1);
      
      gJChronology0.getGregorianCutover();
      GJChronology gJChronology3 = GJChronology.getInstance(dateTimeZone1);
      assertSame(gJChronology3, gJChronology1);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      gJChronology0.hashCode();
      gJChronology0.withUTC();
      int int0 = (-4136);
      try { 
        gJChronology0.getDateTimeMillis((-128), (-128), (-128), (-128), (-947), 28, (-4136));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -128 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      long long0 = 6388L;
      int int0 = 941;
      // Undeclared exception!
      try { 
        gJChronology0.assemble((AssembledChronology.Fields) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.GJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      gJChronology0.julianToGregorianByWeekyear((-499L));
      Hours hours0 = Hours.FIVE;
      Integer.getInteger("' ", (Integer) null);
      hours0.equals((Object) null);
      hours0.equals(gJChronology0);
      gJChronology0.get((ReadablePeriod) hours0, (-1209600499L));
      GJChronology gJChronology1 = GJChronology.getInstance();
      gJChronology0.equals(gJChronology1);
      gJChronology0.withUTC();
      DateTimeZone dateTimeZone0 = gJChronology1.getZone();
      gJChronology0.withUTC();
      gJChronology0.gregorianToJulianByWeekyear((-499L));
      gJChronology0.getGregorianCutover();
      gJChronology1.equals(dateTimeZone0);
      int int0 = 93;
      DateTimeZone.setDefault(dateTimeZone0);
      try { 
        gJChronology0.getDateTimeMillis(93, 365, 365, 365);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 365 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Instant instant0 = new Instant((-201L));
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      gJChronology0.julianToGregorianByWeekyear(0L);
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      DateTimeZone.setDefault(dateTimeZone0);
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField(copticChronology0);
      gJEraDateTimeField0.roundHalfFloor((-932L));
      instant0.isEqual(0L);
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
      instant0.compareTo((ReadableInstant) mutableDateTime0);
      assembledChronology_Fields0.weekyearOfCentury = (DateTimeField) gJEraDateTimeField0;
      try { 
        gJChronology0.getDateTimeMillis(5, 5, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfMonth must be in the range [1,31]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      LimitChronology limitChronology0 = LimitChronology.getInstance(gJChronology0, (ReadableDateTime) null, (ReadableDateTime) null);
      Chronology chronology0 = limitChronology0.withUTC();
      limitChronology0.add((ReadablePeriod) null, 803L, 3375);
      LocalDate localDate0 = new LocalDate(803L, chronology0);
      gJChronology0.get((ReadablePartial) localDate0, 803L);
      DateTimeZone.getDefault();
      gJChronology0.julianToGregorianByYear(96L);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      // Undeclared exception!
      try { 
        GJChronology.getInstance(dateTimeZone0, (-376L), 3375);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 3375
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      GJChronology.getInstance(dateTimeZone0);
      long long0 = (-1961L);
      // Undeclared exception!
      try { 
        MutableDateTime.parse("GJ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"GJ\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      int int0 = 29;
      dateTimeZone0.nextTransition(29);
      Locale locale0 = Locale.PRC;
      dateTimeZone0.getShortName((long) 29, locale0);
      int int1 = (-1026);
      try { 
        buddhistChronology0.getDateTimeMillis(521L, 29, 29, 0, (-1026));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 29 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      long long0 = (-1470L);
      int int0 = 3303;
      // Undeclared exception!
      try { 
        GJChronology.getInstance((DateTimeZone) null, (-1470L), 3303);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 3303
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      long long0 = 1723L;
      MutableDateTime mutableDateTime0 = new MutableDateTime(1723L, dateTimeZone0);
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      gJChronology1.toString();
      mutableDateTime0.addMillis((-2056));
      gJChronology1.withUTC();
      try { 
        gJChronology1.getDateTimeMillis(5, 2, 623191204, 623191204);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 623191204 for millisOfDay must be in the range [0,86399999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      int int0 = 120;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(120);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      dateTimeZone0.isFixed();
      DateTime dateTime0 = new DateTime((-3082L), dateTimeZone0);
      DateTime dateTime1 = dateTime0.minusDays(120);
      dateTimeZone0.getOffset((ReadableInstant) dateTime1);
      DateTimeZone dateTimeZone1 = buddhistChronology0.getZone();
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) buddhistChronology0);
      mutableDateTime0.toDate();
      // Undeclared exception!
      try { 
        GJChronology.getInstance(dateTimeZone1, (ReadableInstant) mutableDateTime0, (-2480));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: -2480
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      gJChronology0.julianToGregorianByYear(580L);
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      DateTimeField dateTimeField0 = assembledChronology_Fields0.era;
      assembledChronology_Fields0.year = null;
      assembledChronology_Fields0.secondOfDay = null;
      gJChronology0.assemble(assembledChronology_Fields0);
      int int0 = (-1521);
      gJChronology0.add(0L, (-2652L), (-1521));
      gJChronology0.gregorianToJulianByYear(0L);
      gJChronology0.getGregorianCutover();
      try { 
        gJChronology0.getDateTimeMillis(24, 24, 24, 24, 60, 0, 60);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 24 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      GJChronology.getInstanceUTC();
      // Undeclared exception!
      try { 
        Hours.parseHours("org.joda.time.format.DateTimeFormat");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"org.joda.time.format.DateTimeFormat\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      int int0 = (-2626);
      int int1 = 0;
      try { 
        gJChronology0.getDateTimeMillis(1961, 0, (-2626), 0, (-2626), 1961, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2626 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      DateTimeField dateTimeField0 = assembledChronology_Fields0.weekOfWeekyear;
      Period period0 = new Period(1L, 2147483647L, gJChronology0);
      int int0 = 0;
      Period period1 = period0.multipliedBy(0);
      long long0 = 1388L;
      period1.getSeconds();
      int int1 = (-1440);
      gJChronology0.add((ReadablePeriod) period1, 1388L, (-1440));
      try { 
        DateTimeZone.forOffsetHours((-1440));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: -1440
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }
}
