/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 04:06:57 GMT 2021
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.DurationField;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.chrono.AssembledChronology;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.field.DividedDateTimeField;
import org.joda.time.field.RemainderDateTimeField;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GJChronology_ESTest extends GJChronology_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.year();
      long long0 = dateTimeField0.addWrapField(5097600000L, (-2141534938));
      assertEquals(6206660896953600000L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (long) 3, 4);
      DateTimeField dateTimeField0 = gJChronology0.year();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, dateTimeFieldType0, 1431655765);
      long long0 = remainderDateTimeField0.getDifferenceAsLong((-2L), 1747L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (long) 0, 1);
      DateTimeField dateTimeField0 = gJChronology0.yearOfEra();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, dateTimeFieldType0, 2);
      remainderDateTimeField0.getDifferenceAsLong(0, 0);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Months months0 = Months.TWELVE;
      int[] intArray0 = gJChronology0.get((ReadablePeriod) months0, (-61328188800000L), (-3711L));
      assertArrayEquals(new int[] {23320}, intArray0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (long) 2, 2);
      Period period0 = Period.weeks(2);
      int[] intArray0 = gJChronology0.get((ReadablePeriod) period0, (long) 2, (-10L));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, (-12)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Months months0 = Months.TWELVE;
      int[] intArray0 = gJChronology0.get((ReadablePeriod) months0, (-12219292800000L), (-674L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertArrayEquals(new int[] {4646}, intArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      gJChronology0.assemble(assembledChronology_Fields0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(assembledChronology_Fields0.yearOfEra, dateTimeFieldType0, 2147483607);
      long long0 = remainderDateTimeField0.roundCeiling((-12219292800018L));
      assertEquals((-12212553600000L), long0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      gJChronology0.assemble(assembledChronology_Fields0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(assembledChronology_Fields0.secondOfMinute, dateTimeFieldType0, 684);
      long long0 = remainderDateTimeField0.roundCeiling((-12219292800063L));
      assertEquals((-12219292800000L), long0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (long) 2, 1);
      DateTimeField dateTimeField0 = gJChronology0.year();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, dateTimeFieldType0, 4);
      long long0 = remainderDateTimeField0.roundCeiling(100L);
      assertEquals(31536000000L, long0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      LocalDate localDate0 = new LocalDate((-2315L), (Chronology) gJChronology0);
      MonthDay monthDay0 = new MonthDay(localDate0, gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(31, monthDay0.getDayOfMonth());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      DateTimeField dateTimeField0 = gJChronology0.weekOfWeekyear();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, dateTimeZone0, (DurationField) null, (DurationField) null, (DurationField) null);
      long long0 = zonedChronology_ZonedDateTimeField0.addWrapField(0L, 9);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(5443200000L, long0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.year();
      dateTimeField0.getLeapAmount(28857599994L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (long) 3, 5);
      DateTimeField dateTimeField0 = gJChronology0.year();
      dateTimeField0.isLeap(28857600000L);
      assertEquals(5, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.year();
      Locale locale0 = Locale.JAPANESE;
      long long0 = dateTimeField0.set((long) 2, "1969", locale0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-31535999998L), long0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((Chronology) null);
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime((DateTimeZone) null);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime0);
      // Undeclared exception!
      try { 
        gJChronology0.set(localDate0, 1123200000L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 14 for dayOfMonth is not supported
         //
         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      LocalDate localDate0 = new LocalDate((-12219292800000L), (Chronology) gJChronology0);
      long long0 = gJChronology0.set(localDate0, 2678400000L);
      assertEquals((-12219292800000L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      LocalDate localDate0 = new LocalDate((-12219292800074L), (Chronology) gJChronology0);
      // Undeclared exception!
      try { 
        gJChronology0.set(localDate0, (-5647336506115200000L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 10 for monthOfYear is not supported
         //
         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      LocalDate localDate0 = new LocalDate((-12219292800000L), (Chronology) gJChronology0);
      long long0 = gJChronology0.set(localDate0, (-86400000L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-12219292800000L), long0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      MonthDay monthDay0 = new MonthDay((Chronology) gJChronology0);
      MonthDay monthDay1 = monthDay0.plusDays(3855);
      assertEquals(4, monthDay1.getDayOfMonth());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(9, monthDay1.getMonthOfYear());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (long) 3, 1);
      DateTimeField dateTimeField0 = gJChronology0.year();
      String string0 = dateTimeField0.getAsShortText((long) 3);
      assertEquals("1970", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (long) 3, 5);
      DateTimeField dateTimeField0 = gJChronology0.year();
      String string0 = dateTimeField0.getAsText((long) 3);
      assertEquals("1970", string0);
      assertEquals(5, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (long) 2, 2);
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[Etc/UTC,cutover=1970-01-01T00:00:00.002Z,mdfw=2]", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(33);
      MutablePeriod mutablePeriod0 = new MutablePeriod(33, 839L);
      Instant instant0 = GJChronology.DEFAULT_CUTOVER;
      Duration duration0 = mutablePeriod0.toDurationTo(instant0);
      Interval interval0 = duration0.toIntervalTo(instant0);
      DateTime dateTime0 = interval0.getStart();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0);
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[+00:00:00.033,cutover=1582-10-14T23:59:59.194Z]", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      GJChronology gJChronology1 = GJChronology.getInstance((DateTimeZone) null, (-12219379200018L), 1);
      boolean boolean0 = gJChronology0.equals(gJChronology1);
      assertEquals(1, gJChronology1.getMinimumDaysInFirstWeek());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      try { 
        gJChronology0.getDateTimeMillis((-311), 2, 1687, 2, 11, 1891, 26);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1891 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      try { 
        gJChronology0.getDateTimeMillis(580, 0, 0, (-478), 1712, (-478), 19);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -478 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      Instant instant0 = GJChronology.DEFAULT_CUTOVER;
      LocalDate localDate0 = new LocalDate(instant0, gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (long) 3, 5);
      GJChronology gJChronology1 = (GJChronology)gJChronology0.withUTC();
      assertNotSame(gJChronology1, gJChronology0);
      assertEquals(5, gJChronology1.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      long long0 = gJChronology0.julianToGregorianByYear(1123200000L);
      assertEquals(0L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      long long0 = gJChronology0.julianToGregorianByYear(1000000000000000000L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(999979465052800000L, long0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (long) 0, 4);
      long long0 = gJChronology0.julianToGregorianByYear(0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-1123200000L), long0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      long long0 = gJChronology0.julianToGregorianByWeekyear(1209600000L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      long long0 = gJChronology0.julianToGregorianByWeekyear(30672000000L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(29462400000L, long0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      long long0 = gJChronology0.julianToGregorianByWeekyear(2424L);
      assertEquals((-1209597576L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (long) 0, 4);
      long long0 = gJChronology0.gregorianToJulianByYear((-1123200000L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      long long0 = gJChronology0.gregorianToJulianByYear(2);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1123200002L, long0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      long long0 = gJChronology0.gregorianToJulianByYear((-12219292800000L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-12218428800000L), long0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      long long0 = gJChronology0.gregorianToJulianByWeekyear(1000000000000000L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1000021772800000L, long0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 0, dateTimeZone0);
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      Instant instant0 = gJChronology1.getGregorianCutover();
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertEquals(0L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      gJChronology0.getGregorianCutover();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      long long0 = gJChronology0.getDateTimeMillis(3855, 1, 1, 0);
      assertEquals(59484844800000L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      long long0 = gJChronology0.getDateTimeMillis(11, 11, 11, 11);
      assertEquals((-61793107199989L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      // Undeclared exception!
      try { 
        gJChronology0.julianToGregorianByWeekyear((-62135765938999L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 53 for weekOfWeekyear must be in the range [1,52]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      // Undeclared exception!
      try { 
        gJChronology0.gregorianToJulianByYear((-62135765920999L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for year is not supported
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (long) 3, 5);
      // Undeclared exception!
      try { 
        gJChronology0.gregorianToJulianByWeekyear(86399999L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 53 for weekOfWeekyear must be in the range [1,52]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      // Undeclared exception!
      try { 
        gJChronology0.assemble((AssembledChronology.Fields) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.GJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      gJChronology0.assemble(assembledChronology_Fields0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      try { 
        gJChronology0.getDateTimeMillis((-283), 4, 3, 11, 6, (-209), (-346));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -209 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      LocalDate localDate0 = new LocalDate((-12219292800000L), (Chronology) gJChronology0);
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay(dateTimeZone0);
      assertEquals((-12219292800000L), dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-290));
      GJChronology gJChronology1 = (GJChronology)gJChronology0.withZone(dateTimeZone0);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2139));
      DateTime dateTime0 = DateTime.now();
      // Undeclared exception!
      try { 
        GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0, (-2139));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: -2139
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) null, 70);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 70
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((Chronology) null);
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime((DateTimeZone) null);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime0);
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1392409281320L, instant0.getMillis());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      int int0 = gJChronology0.getMinimumDaysInFirstWeek();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      ZonedChronology.getInstance(gJChronology0, dateTimeZone0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (long) 3, 5);
      DateTimeField dateTimeField0 = gJChronology0.year();
      long long0 = dateTimeField0.addWrapField((long) 3, 422);
      assertEquals(5, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(13317004800003L, long0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      LocalDate localDate0 = new LocalDate();
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0, 1);
      DateTimeField dateTimeField0 = gJChronology0.year();
      DurationField durationField0 = gJChronology0.weekyears();
      DurationField durationField1 = gJChronology0.days();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, dateTimeZone0, durationField0, durationField1, durationField0);
      long long0 = zonedChronology_ZonedDateTimeField0.addWrapField((long) (-2141534973), (-2141534973));
      assertEquals(6205144924127265027L, long0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (long) 3, 4);
      DateTimeField dateTimeField0 = gJChronology0.year();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 11);
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dividedDateTimeField0);
      long long0 = remainderDateTimeField0.getDifferenceAsLong(2, (-42521587200000L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1347L, long0);
      assertEquals(26570817, dividedDateTimeField0.getMaximumValue());
      assertEquals((-26569915), dividedDateTimeField0.getMinimumValue());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (long) 0, 1);
      DateTimeField dateTimeField0 = gJChronology0.yearOfEra();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, dateTimeFieldType0, 2);
      remainderDateTimeField0.getDifferenceAsLong(1022L, 1022L);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (long) 2, 1);
      DateTimeField dateTimeField0 = gJChronology0.year();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, dateTimeFieldType0, 4);
      remainderDateTimeField0.getDifferenceAsLong((byte)127, (-1024L));
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      LocalDate localDate0 = new LocalDate((-12219292800004L), (Chronology) gJChronology0);
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1277), 29, 99, 29, 60, 99, 60, 60);
      LocalDate localDate1 = localDate0.minus(mutablePeriod0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      LocalDate localDate0 = new LocalDate(1392409281320L, (Chronology) gJChronology0);
      MutablePeriod mutablePeriod0 = new MutablePeriod(1712, (-517), 60, (-17), 1712, (-2147483646), 0, (-17));
      localDate0.minus(mutablePeriod0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(6);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 6, 6);
      LocalDate localDate0 = new LocalDate(340L, (Chronology) gJChronology0);
      Period period0 = Period.seconds(91);
      localDate0.withPeriodAdded(period0, 6);
      assertEquals(6, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Months months0 = Months.TWELVE;
      int[] intArray0 = gJChronology0.get((ReadablePeriod) months0, (-61328188800000L), (-12219292799995L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertArrayEquals(new int[] {18674}, intArray0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      LocalDate localDate0 = new LocalDate((-2561L), (Chronology) gJChronology0);
      LocalDate localDate1 = localDate0.plusYears((-1389));
      assertNotSame(localDate1, localDate0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (long) 2, 2);
      Period period0 = Period.weeks(2);
      int[] intArray0 = gJChronology0.get((ReadablePeriod) period0, 62035200000L, 1L);
      assertArrayEquals(new int[] {(-2), 0, 1, 5, 0, 0, 0, 1}, intArray0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      MutablePeriod mutablePeriod0 = new MutablePeriod(1881L, 2);
      int[] intArray0 = gJChronology0.get((ReadablePeriod) mutablePeriod0, 30585600000L, (-12219292800000L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertArrayEquals(new int[] {(-388), (-2), 0, (-6), 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      LocalDate localDate0 = new LocalDate((-2561L), (Chronology) gJChronology0);
      LocalDate localDate1 = localDate0.withWeekyear((-517));
      assertNotSame(localDate1, localDate0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (long) 0, 1);
      DateTimeField dateTimeField0 = gJChronology0.yearOfEra();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, dateTimeFieldType0, 2);
      long long0 = remainderDateTimeField0.roundCeiling((-797L));
      assertEquals(0L, long0);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      gJChronology0.assemble(assembledChronology_Fields0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(assembledChronology_Fields0.minuteOfDay, dateTimeFieldType0, Integer.MAX_VALUE);
      long long0 = remainderDateTimeField0.roundCeiling((-61816435200000L));
      assertEquals((-61816435200000L), long0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.year();
      long long0 = dateTimeField0.roundHalfCeiling((-12219292800000L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-12212553600000L), long0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (long) 3, 1);
      DateTimeField dateTimeField0 = gJChronology0.year();
      LocalTime localTime0 = LocalTime.fromMillisOfDay(4621609281320L);
      int[] intArray0 = new int[3];
      intArray0[1] = 1632;
      // Undeclared exception!
      try { 
        dateTimeField0.getMaximumValue((ReadablePartial) localTime0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (long) 3, 4);
      MonthDay monthDay0 = new MonthDay(159L, (Chronology) gJChronology0);
      MonthDay monthDay1 = monthDay0.withDayOfMonth(4);
      assertEquals(1, monthDay1.getMonthOfYear());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.era();
      // Undeclared exception!
      try { 
        dateTimeField0.addWrapField((long) 13, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MIN > MAX
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (long) 0, 5);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(gJChronology0);
      long long0 = dateTimeField0.addWrapField((long) 0, 3);
      assertEquals(5, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(10800000L, long0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      DateTimeField dateTimeField0 = gJChronology0.year();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, dateTimeZone0, (DurationField) null, (DurationField) null, (DurationField) null);
      int int0 = zonedChronology_ZonedDateTimeField0.getLeapAmount(1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) mutableDateTime0, 5);
      DateTimeField dateTimeField0 = gJChronology0.centuryOfEra();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, fixedDateTimeZone0, (DurationField) null, (DurationField) null, (DurationField) null);
      int int0 = zonedChronology_ZonedDateTimeField0.getLeapAmount(5);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.year();
      dateTimeField0.isLeap((-12219292800000L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      LocalDate localDate0 = new LocalDate();
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0, 1);
      DateTimeField dateTimeField0 = gJChronology0.year();
      DurationField durationField0 = gJChronology0.weekyears();
      DurationField durationField1 = gJChronology0.days();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, dateTimeZone0, durationField0, durationField1, durationField0);
      boolean boolean0 = zonedChronology_ZonedDateTimeField0.isLeap(1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (long) 3, 1);
      DateTimeField dateTimeField0 = gJChronology0.year();
      Locale locale0 = Locale.ENGLISH;
      long long0 = dateTimeField0.set((-12212640000000L), "1969", locale0);
      assertEquals(172800000L, long0);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (long) 3, 5);
      DateTimeField dateTimeField0 = gJChronology0.year();
      Locale locale0 = Locale.CANADA;
      long long0 = dateTimeField0.set((-3160L), "1968", locale0);
      assertEquals(5, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-31536003160L), long0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (long) 3, 2);
      DateTimeField dateTimeField0 = gJChronology0.year();
      Locale locale0 = Locale.ITALY;
      long long0 = dateTimeField0.set(63072000000L, "1970", locale0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.year();
      Locale locale0 = Locale.CANADA;
      long long0 = dateTimeField0.set((-12219292800000L), "1582", locale0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-12219292800000L), long0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      LocalDate localDate0 = new LocalDate(2892L, (Chronology) gJChronology0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, 2892L, 1);
      // Undeclared exception!
      try { 
        gJChronology1.set(localDate0, (-12219292800000L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1 for dayOfMonth is not supported
         //
         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (long) 3, 4);
      LocalDate localDate0 = new LocalDate((long) 4, (Chronology) gJChronology0);
      // Undeclared exception!
      try { 
        gJChronology0.set(localDate0, 3L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 19 for dayOfMonth is not supported
         //
         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Duration duration0 = new Duration((-3444L));
      Period period0 = duration0.toPeriod((PeriodType) null, (Chronology) gJChronology0);
      MonthDay monthDay0 = MonthDay.now((Chronology) gJChronology0);
      MonthDay monthDay1 = monthDay0.plus(period0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(14, monthDay1.getDayOfMonth());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.weekyear();
      String string0 = dateTimeField0.getAsShortText((-1035L));
      assertEquals("1970", string0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (long) 3, 1);
      DateTimeField dateTimeField0 = gJChronology0.year();
      String string0 = dateTimeField0.getAsShortText((long) 1);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("1969", string0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (long) 3, 2);
      DateTimeField dateTimeField0 = gJChronology0.year();
      Locale locale0 = Locale.ITALY;
      String string0 = dateTimeField0.getAsText(100000000L, locale0);
      assertEquals(2, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("1970", string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      Locale locale0 = Locale.CHINESE;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) mutableDateTime0, 5);
      DateTimeField dateTimeField0 = gJChronology0.centuryOfEra();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, fixedDateTimeZone0, (DurationField) null, (DurationField) null, (DurationField) null);
      String string0 = zonedChronology_ZonedDateTimeField0.getAsText(1L, locale0);
      assertEquals("20", string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0, 2);
      DateTimeField dateTimeField0 = gJChronology1.weekOfWeekyear();
      DurationField durationField0 = gJChronology0.eras();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, dateTimeZone0, durationField0, durationField0, durationField0);
      long long0 = zonedChronology_ZonedDateTimeField0.addWrapField((long) 0, 12);
      assertEquals((-24192000000L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (long) 0, 5);
      String string0 = gJChronology1.toString();
      assertEquals("GJChronology[Etc/UTC,cutover=1970-01-01,mdfw=5]", string0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[Etc/UTC]", string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      GJChronology gJChronology1 = GJChronology.getInstance();
      boolean boolean0 = gJChronology1.equals(gJChronology0);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (long) 0, 5);
      GJChronology gJChronology2 = GJChronology.getInstance(dateTimeZone0, (long) 0, 2);
      boolean boolean0 = gJChronology1.equals(gJChronology2);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertFalse(gJChronology2.equals((Object)gJChronology1));
      assertEquals(2, gJChronology2.getMinimumDaysInFirstWeek());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (long) 3, 5);
      GJChronology gJChronology1 = GJChronology.getInstanceUTC();
      boolean boolean0 = gJChronology1.equals(gJChronology0);
      assertEquals(5, gJChronology0.getMinimumDaysInFirstWeek());
      assertFalse(boolean0);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      boolean boolean0 = gJChronology0.equals(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (long) 3, 5);
      boolean boolean0 = gJChronology0.equals((Object) null);
      assertEquals(5, gJChronology0.getMinimumDaysInFirstWeek());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      long long0 = gJChronology0.getDateTimeMillis(1, 1, 1, 1, 1, 19, 1);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-62135765920999L), long0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      long long0 = gJChronology0.getDateTimeMillis(3223, 8, 8, 0, 8, 8, 0);
      assertEquals(39559795688000L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      try { 
        gJChronology0.getDateTimeMillis(28, 2, 2, 2, 11, (-2147483617), 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2147483617 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      try { 
        gJChronology0.getDateTimeMillis(65, 65, 63, 63, 63, 2547, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 63 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      try { 
        gJChronology0.getDateTimeMillis(2, 2, 29, 2, 0, 0, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 29 for dayOfMonth must be in the range [1,28]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (long) 3, 4);
      try { 
        gJChronology0.getDateTimeMillis(0, 1, (-1118), (-141));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -141 for millisOfDay must be in the range [0,86399999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      // Undeclared exception!
      try { 
        GJChronology.getInstance(dateTimeZone0, (-12219292800000L), (-1760));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: -1760
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      LocalDate localDate0 = new LocalDate((-12219292800000L), (Chronology) gJChronology0);
      Period period0 = Period.minutes((-5361));
      LocalDate localDate1 = localDate0.withPeriodAdded(period0, (-5361));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Months months0 = Months.SEVEN;
      int[] intArray0 = gJChronology0.get((ReadablePeriod) months0, (-5565491067600000000L), (-12219292800000L));
      assertArrayEquals(new int[] {2116312590}, intArray0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      DateTimeField dateTimeField0 = gJChronology0.weekOfWeekyear();
      DurationField durationField0 = gJChronology0.eras();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, dateTimeZone0, durationField0, durationField0, durationField0);
      long long0 = zonedChronology_ZonedDateTimeField0.getDifferenceAsLong(1119L, 0);
      assertEquals(0L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (long) 3, 4);
      DateTimeField dateTimeField0 = gJChronology0.year();
      LocalTime localTime0 = LocalTime.now();
      Locale locale0 = Locale.CHINA;
      String string0 = dateTimeField0.getAsText((ReadablePartial) localTime0, (-1434), locale0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("-1434", string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (long) 3, 5);
      DateTimeField dateTimeField0 = gJChronology0.year();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 5);
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dividedDateTimeField0);
      long long0 = remainderDateTimeField0.getDifferenceAsLong((-13686451200000L), 3);
      assertEquals(58455798, dividedDateTimeField0.getMaximumValue());
      assertEquals((-433L), long0);
      assertEquals((-58453811), dividedDateTimeField0.getMinimumValue());
      assertEquals(5, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      MonthDay monthDay0 = new MonthDay((Chronology) gJChronology0);
      MonthDay monthDay1 = monthDay0.plusDays((-4156));
      assertEquals(9, monthDay1.getMonthOfYear());
      assertEquals(29, monthDay1.getDayOfMonth());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.year();
      Locale locale0 = Locale.JAPANESE;
      dateTimeField0.getMaximumTextLength(locale0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.weekOfWeekyear();
      int int0 = dateTimeField0.getDifference(0L, 4766L);
      assertEquals(0, int0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.year();
      LocalTime localTime0 = new LocalTime();
      int int0 = dateTimeField0.getMaximumValue((ReadablePartial) localTime0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(292278993, int0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (long) 3, 5);
      DateTimeField dateTimeField0 = gJChronology0.year();
      Locale locale0 = Locale.PRC;
      dateTimeField0.getMaximumShortTextLength(locale0);
      assertEquals(5, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.year();
      LocalDate localDate0 = new LocalDate((long) 4, (Chronology) gJChronology0);
      int int0 = dateTimeField0.getMinimumValue((ReadablePartial) localDate0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-292269054), int0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.year();
      Locale locale0 = Locale.ITALIAN;
      String string0 = dateTimeField0.getAsShortText(2, locale0);
      assertEquals("2", string0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      LocalDateTime localDateTime0 = new LocalDateTime((Object) null, lenientChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      LocalDate localDate0 = new LocalDate();
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0, 1);
      long long0 = gJChronology0.gregorianToJulianByWeekyear((-12219292800000L));
      assertEquals((-12218083200000L), long0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (long) 3, 5);
      gJChronology0.hashCode();
      assertEquals(5, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = gJChronology0.year();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      DurationField durationField0 = gJChronology0.weeks();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, dateTimeZone0, durationField0, durationField0, durationField0);
      Locale locale0 = Locale.CANADA;
      long long0 = zonedChronology_ZonedDateTimeField0.set(1440L, "1582", locale0);
      assertEquals((-12243225598560L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      GJChronology gJChronology1 = (GJChronology)gJChronology0.withZone((DateTimeZone) null);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate(mutableDateTime0, gJChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Specified date does not exist
         //
         verifyException("org.joda.time.chrono.GJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.weekyear();
      Locale locale0 = Locale.CANADA;
      long long0 = dateTimeField0.set((-62100338277928L), "1970", locale0);
      assertEquals(3549722072L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }
}
