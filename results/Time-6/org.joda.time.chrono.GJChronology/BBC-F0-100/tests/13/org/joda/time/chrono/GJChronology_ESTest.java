/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 12:56:26 GMT 2021
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePeriod;
import org.joda.time.YearMonth;
import org.joda.time.chrono.AssembledChronology;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GJChronology_ESTest extends GJChronology_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-79397280000000L));
      assertEquals((-79397280000000L), dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      DateTime dateTime1 = dateTime0.minus((-79397280000000L));
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals((-79397280000000L), dateTime0.getMillis());
      assertEquals(0L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertNotNull(dateTime1);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals((-79397280000000L), dateTime0.getMillis());
      assertEquals(0L, dateTime1.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertNotNull(gJChronology0);
      
      YearMonth yearMonth0 = new YearMonth(1008L, (Chronology) gJChronology0);
      assertEquals((-79397280000000L), dateTime0.getMillis());
      assertEquals(0L, dateTime1.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1970, yearMonth0.getYear());
      assertEquals(1, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertNotNull(yearMonth0);
      
      YearMonth yearMonth1 = yearMonth0.withMonthOfYear(4);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth1, yearMonth0);
      assertEquals((-79397280000000L), dateTime0.getMillis());
      assertEquals(0L, dateTime1.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1970, yearMonth0.getYear());
      assertEquals(1, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(4, yearMonth1.getMonthOfYear());
      assertEquals(1970, yearMonth1.getYear());
      assertEquals(2, yearMonth1.size());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(yearMonth1.equals((Object)yearMonth0));
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertNotNull(yearMonth1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      Months months0 = Months.MIN_VALUE;
      assertEquals(1, months0.size());
      assertEquals(Integer.MIN_VALUE, months0.getMonths());
      assertNotNull(months0);
      
      int[] intArray0 = gJChronology0.get((ReadablePeriod) months0, (-12219292800000L), (-62104147200000L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, months0.size());
      assertEquals(Integer.MIN_VALUE, months0.getMonths());
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-18969)}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertNotNull(instant0);
      
      Instant instant1 = instant0.minus(1144L);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals((-12219292801144L), instant1.getMillis());
      assertFalse(instant1.equals((Object)instant0));
      assertNotNull(instant1);
      
      DateTime dateTime0 = instant1.toDateTime((Chronology) gJChronology0);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals((-12219292801144L), instant1.getMillis());
      assertEquals((-12219292801144L), dateTime0.getMillis());
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertNotNull(dateTime0);
      
      Months months0 = Months.EIGHT;
      assertEquals(8, months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      Period period0 = new Period();
      assertNotNull(period0);
      
      Period period1 = period0.minus(months0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(8, months0.getMonths());
      assertEquals(1, months0.size());
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      DateTime dateTime1 = dateTime0.minus((ReadablePeriod) period1);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals((-12219292801144L), instant1.getMillis());
      assertEquals((-12219292801144L), dateTime0.getMillis());
      assertEquals(8, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals((-12199161601144L), dateTime1.getMillis());
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertNotNull(dateTime1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      Instant instant0 = GJChronology.DEFAULT_CUTOVER;
      assertEquals((-12219292800000L), instant0.getMillis());
      assertNotNull(instant0);
      
      IslamicChronology islamicChronology0 = new IslamicChronology(gJChronology0, instant0, (IslamicChronology.LeapYearPatternType) null);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      DateTime dateTime0 = instant0.toDateTime((Chronology) islamicChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals((-12219292800000L), dateTime0.getMillis());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(dateTime0);
      
      Months months0 = Months.MIN_VALUE;
      assertEquals(Integer.MIN_VALUE, months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      DateTime dateTime1 = dateTime0.minus((ReadablePeriod) months0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals((-12219292800000L), dateTime0.getMillis());
      assertEquals(Integer.MIN_VALUE, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(5647324314124800000L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(dateTime1);
      
      DateTime dateTime2 = dateTime1.plus((ReadablePeriod) months0);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals((-12219292800000L), dateTime0.getMillis());
      assertEquals(Integer.MIN_VALUE, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(5647324314124800000L, dateTime1.getMillis());
      assertEquals((-12219292800000L), dateTime2.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertTrue(dateTime2.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(dateTime2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      Months months0 = Months.months((-814));
      assertEquals(1, months0.size());
      assertEquals((-814), months0.getMonths());
      assertNotNull(months0);
      
      int[] intArray0 = gJChronology0.get((ReadablePeriod) months0, (-809434430265600000L), (-4294967296L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, months0.size());
      assertEquals((-814), months0.getMonths());
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {307793150}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertNotNull(instant0);
      
      Instant instant1 = instant0.minus(31536000000L);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals((-12250828800000L), instant1.getMillis());
      assertFalse(instant1.equals((Object)instant0));
      assertNotNull(instant1);
      
      DateTime dateTime0 = instant1.toDateTime((Chronology) gJChronology0);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals((-12250828800000L), instant1.getMillis());
      assertEquals((-12250828800000L), dateTime0.getMillis());
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertNotNull(dateTime0);
      
      PeriodType periodType0 = PeriodType.yearMonthDay();
      assertEquals(3, periodType0.size());
      assertEquals("YearMonthDay", periodType0.getName());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(dateTime0, instant0, periodType0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals((-12250828800000L), instant1.getMillis());
      assertEquals((-12250828800000L), dateTime0.getMillis());
      assertEquals(3, periodType0.size());
      assertEquals("YearMonthDay", periodType0.getName());
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertNotNull(mutablePeriod0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-792L));
      assertEquals((-792L), dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime0);
      assertEquals((-792L), dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((-792L), 604800000L, (PeriodType) null, gJChronology0);
      assertEquals((-792L), dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(mutablePeriod0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateTime dateTime0 = new DateTime(1417392000000L, (DateTimeZone) null);
      assertEquals(1417392000000L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime0);
      assertEquals(1417392000000L, dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      YearMonth yearMonth0 = new YearMonth(dateTime0, gJChronology0);
      assertEquals(1417392000000L, dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(12, yearMonth0.getMonthOfYear());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertNotNull(yearMonth0);
      
      Interval interval0 = yearMonth0.toInterval();
      assertEquals(1417392000000L, dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(12, yearMonth0.getMonthOfYear());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(1420070400000L, interval0.getEndMillis());
      assertEquals(1417392000000L, interval0.getStartMillis());
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertNotNull(interval0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      YearMonth yearMonth0 = new YearMonth((Chronology) gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(2, yearMonth0.size());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertNotNull(yearMonth0);
      
      YearMonth yearMonth1 = yearMonth0.withMonthOfYear(12);
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth1, yearMonth0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(2, yearMonth0.size());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2014, yearMonth1.getYear());
      assertEquals(12, yearMonth1.getMonthOfYear());
      assertEquals(2, yearMonth1.size());
      assertFalse(yearMonth1.equals((Object)yearMonth0));
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertNotNull(yearMonth1);
      
      // Undeclared exception!
      try { 
        yearMonth1.withMonthOfYear(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertNotNull(instant0);
      
      Instant instant1 = instant0.minus(591L);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals((-12219292800591L), instant1.getMillis());
      assertFalse(instant1.equals((Object)instant0));
      assertNotNull(instant1);
      
      DateTime dateTime0 = instant1.toDateTime((Chronology) gJChronology0);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals((-12219292800591L), instant1.getMillis());
      assertEquals((-12219292800591L), dateTime0.getMillis());
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertNotNull(dateTime0);
      
      // Undeclared exception!
      try { 
        dateTime0.withDayOfMonth(11);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 11 for dayOfMonth is not supported
         //
         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertNotNull(instant0);
      
      DateTime dateTime0 = instant0.toDateTime((Chronology) gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals((-12219292800000L), dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      // Undeclared exception!
      try { 
        dateTime0.withDayOfMonth(13);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 13 for dayOfMonth is not supported
         //
         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateTime dateTime0 = new DateTime(1417392000000L, (DateTimeZone) null);
      assertEquals(1417392000000L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime0);
      assertEquals(1417392000000L, dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      YearMonth yearMonth0 = new YearMonth(dateTime0, gJChronology0);
      assertEquals(1417392000000L, dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(2, yearMonth0.size());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(12, yearMonth0.getMonthOfYear());
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertNotNull(yearMonth0);
      
      YearMonth yearMonth1 = yearMonth0.minusYears(979);
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth1, yearMonth0);
      assertEquals(1417392000000L, dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(2, yearMonth0.size());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(12, yearMonth0.getMonthOfYear());
      assertEquals(12, yearMonth1.getMonthOfYear());
      assertEquals(2, yearMonth1.size());
      assertEquals(1035, yearMonth1.getYear());
      assertFalse(yearMonth1.equals((Object)yearMonth0));
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertNotNull(yearMonth1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (long) 1, 1);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[UTC,cutover=1970-01-01T00:00:00.001Z,mdfw=1]", string0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateTime dateTime0 = new DateTime(1417392000000L);
      assertEquals(1417392000000L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime0);
      assertEquals(1417392000000L, dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      GJChronology gJChronology1 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime0, 1);
      assertNotSame(gJChronology1, gJChronology0);
      assertEquals(1417392000000L, dateTime0.getMillis());
      assertEquals(1, gJChronology1.getMinimumDaysInFirstWeek());
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertNotNull(gJChronology1);
      
      boolean boolean0 = gJChronology1.equals(gJChronology0);
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(gJChronology1, gJChronology0);
      assertFalse(boolean0);
      assertEquals(1417392000000L, dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, gJChronology1.getMinimumDaysInFirstWeek());
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(gJChronology1.equals((Object)gJChronology0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateTime dateTime0 = new DateTime(1417392000000L);
      assertEquals(1417392000000L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime0);
      assertEquals(1417392000000L, dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      GJChronology gJChronology1 = GJChronology.getInstanceUTC();
      assertNotSame(gJChronology1, gJChronology0);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertNotNull(gJChronology1);
      
      boolean boolean0 = gJChronology0.equals(gJChronology1);
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(gJChronology1, gJChronology0);
      assertFalse(boolean0);
      assertEquals(1417392000000L, dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(gJChronology1.equals((Object)gJChronology0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(2, 2, 2, 2, 4820, 2, 4820, gJChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 4820 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      // Undeclared exception!
      try { 
        GJChronology.getInstance(dateTimeZone0, (-62033040000000L), 1200);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 1200
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      gJChronology0.assemble(assembledChronology_Fields0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotNull(mutableDateTime0);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotNull(gJChronology0);
      
      GJChronology gJChronology1 = (GJChronology)gJChronology0.withUTC();
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(gJChronology1, gJChronology0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotNull(gJChronology1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      long long0 = gJChronology0.julianToGregorianByYear(1123200000L);
      assertEquals(0L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      long long0 = gJChronology0.julianToGregorianByYear(917296283562L);
      assertEquals(916173083562L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      long long0 = gJChronology0.julianToGregorianByYear(1);
      assertEquals((-1123199999L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      long long0 = gJChronology0.julianToGregorianByWeekyear(1209600000L);
      assertEquals(0L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      long long0 = gJChronology0.julianToGregorianByWeekyear(1393459200000L);
      assertEquals(1392249600000L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Instant instant0 = new Instant();
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(instant0);
      
      DateTimeZone dateTimeZone0 = instant0.getZone();
      assertEquals(1392409281320L, instant0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0, 3);
      assertEquals(1392409281320L, instant0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(3, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      long long0 = gJChronology0.julianToGregorianByWeekyear(366);
      assertEquals((-1209599634L), long0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(3, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      long long0 = gJChronology0.gregorianToJulianByYear(1);
      assertEquals(1123200001L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      long long0 = gJChronology0.gregorianToJulianByYear((-12219292800000L));
      assertEquals((-12218428800000L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      long long0 = gJChronology0.gregorianToJulianByWeekyear((-1136L));
      assertEquals(1209598864L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-79397280000000L));
      assertEquals((-79397280000000L), dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      DateTime dateTime1 = dateTime0.minus((-79397280000000L));
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals((-79397280000000L), dateTime0.getMillis());
      assertEquals(0L, dateTime1.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertNotNull(dateTime1);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals((-79397280000000L), dateTime0.getMillis());
      assertEquals(0L, dateTime1.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertNotNull(gJChronology0);
      
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals((-79397280000000L), dateTime0.getMillis());
      assertEquals(0L, dateTime1.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0L, instant0.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertNotNull(instant0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DateTime dateTime0 = new DateTime(1417392000000L);
      assertEquals(1417392000000L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime0);
      assertEquals(1417392000000L, dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertEquals(1417392000000L, dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1417392000000L, instant0.getMillis());
      assertNotNull(instant0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertNotNull(mutableDateTime0);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertNotNull(gJChronology0);
      
      long long0 = gJChronology0.getDateTimeMillis(86399999, 2, 4, 3, 1, 5, 19);
      assertEquals(2726458456993265019L, long0);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      long long0 = gJChronology0.getDateTimeMillis(4, 4, 4, 4);
      assertEquals((-62033039999996L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      // Undeclared exception!
      try { 
        gJChronology0.julianToGregorianByWeekyear((-62135765930999L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 53 for weekOfWeekyear must be in the range [1,52]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      // Undeclared exception!
      try { 
        gJChronology0.gregorianToJulianByYear((-62135765938999L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for year is not supported
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      // Undeclared exception!
      try { 
        gJChronology0.gregorianToJulianByWeekyear(31449600000L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 53 for weekOfWeekyear must be in the range [1,52]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotNull(mutableDateTime0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertNotNull(gJChronology0);
      
      try { 
        gJChronology0.getDateTimeMillis(4, (-2738), (-1072), (-1041));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1041 for millisOfDay must be in the range [0,86399999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      // Undeclared exception!
      try { 
        gJChronology0.assemble((AssembledChronology.Fields) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.GJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      DateTime dateTime0 = localDateTime0.toDateTime((DateTimeZone) fixedDateTimeZone0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(dateTime0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Instant instant0 = new Instant();
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(instant0);
      
      DateTimeZone dateTimeZone0 = instant0.getZone();
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0, 3);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(3, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      try { 
        gJChronology0.getDateTimeMillis((-3954), (-208), (-1150), 60, 3, 690562340, (-1150));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 60 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Instant instant0 = new Instant(983L);
      assertEquals(983L, instant0.getMillis());
      assertNotNull(instant0);
      
      DateTimeZone dateTimeZone0 = instant0.getZone();
      assertEquals(983L, instant0.getMillis());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      // Undeclared exception!
      try { 
        GJChronology.getInstance(dateTimeZone0, (ReadableInstant) null, 2909);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 2909
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-79397280000000L));
      assertEquals((-79397280000000L), dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime0);
      assertEquals((-79397280000000L), dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      int int0 = gJChronology0.getMinimumDaysInFirstWeek();
      assertEquals(4, int0);
      assertEquals((-79397280000000L), dateTime0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotNull(gJChronology0);
      
      Instant instant0 = Instant.now();
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(instant0);
      
      YearMonth yearMonth0 = new YearMonth(instant0, gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertNotNull(yearMonth0);
      
      YearMonth yearMonth1 = yearMonth0.withYear((-2022));
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth1, yearMonth0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(2, yearMonth1.size());
      assertEquals((-2022), yearMonth1.getYear());
      assertEquals(2, yearMonth1.getMonthOfYear());
      assertFalse(yearMonth1.equals((Object)yearMonth0));
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertNotNull(yearMonth1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-79397280000000L));
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      Duration duration0 = new Duration((Object) null);
      Period period0 = duration0.toPeriodTo((ReadableInstant) dateTime0, periodType0);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      int[] intArray0 = gJChronology0.get((ReadablePeriod) period0, 1276546881320L, (-79397280000000L));
      assertArrayEquals(new int[] {(-2557), (-5), (-7), (-20), (-21), (-21), (-320)}, intArray0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Instant instant0 = GJChronology.DEFAULT_CUTOVER;
      DateTime dateTime0 = instant0.toDateTime((Chronology) gJChronology0);
      Months months0 = Months.THREE;
      DateTime dateTime1 = dateTime0.minus((ReadablePeriod) months0);
      DateTime dateTime2 = dateTime1.plus((ReadablePeriod) months0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-12226377600000L), dateTime1.getMillis());
      assertEquals((-12219292800000L), dateTime2.getMillis());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Instant instant0 = GJChronology.DEFAULT_CUTOVER;
      Instant instant1 = instant0.withDurationAdded((-1L), 1);
      DateTime dateTime0 = instant1.toDateTime((Chronology) gJChronology0);
      Months months0 = Months.ELEVEN;
      DateTime dateTime1 = dateTime0.minus((ReadablePeriod) months0);
      DateTime dateTime2 = dateTime1.plus((long) 1);
      DateTime dateTime3 = dateTime2.plus((ReadablePeriod) months0);
      assertFalse(dateTime3.equals((Object)dateTime1));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-12219292800000L), dateTime3.getMillis());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Instant instant0 = gJChronology0.getGregorianCutover();
      Instant instant1 = instant0.minus(584L);
      DateTime dateTime0 = DateTime.now((Chronology) gJChronology0);
      Period period0 = new Period(dateTime0, instant1, (PeriodType) null);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Instant instant0 = gJChronology0.getGregorianCutover();
      DateTime dateTime0 = instant0.toDateTime((Chronology) gJChronology0);
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      DateTime dateTime1 = dateTime0.minusYears(121);
      MutablePeriod mutablePeriod0 = new MutablePeriod(dateTime1, dateTime0, periodType0);
      assertEquals((-16036876800000L), dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(gJChronology0);
      mutableDateTime0.setRounding(dateTimeField0);
      assertEquals(1389571200000L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Instant instant0 = GJChronology.DEFAULT_CUTOVER;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      LocalDateTime localDateTime0 = new LocalDateTime(instant0, gJChronology0);
      DateTime dateTime0 = localDateTime0.toDateTime(dateTimeZone0);
      DateTime dateTime1 = dateTime0.withTimeAtStartOfDay();
      assertEquals((-12219292800001L), dateTime0.getMillis());
      assertEquals((-12219292800001L), dateTime1.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (long) 1, 1);
      MonthDay monthDay0 = new MonthDay((long) 1, (Chronology) gJChronology0);
      // Undeclared exception!
      try { 
        monthDay0.withDayOfMonth((-713));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -713 for dayOfMonth must be in the range [1,18]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DateTime dateTime0 = new DateTime(1417392000000L, (DateTimeZone) null);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime0);
      MonthDay monthDay0 = new MonthDay((Chronology) gJChronology0);
      monthDay0.withDayOfMonth(1);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, monthDay0.getDayOfMonth());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTime dateTime0 = new DateTime(2L);
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0);
      LocalDate localDate0 = new LocalDate((-1L), dateTimeZone0);
      // Undeclared exception!
      try { 
        gJChronology1.set(localDate0, (-3585L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 31 for dayOfMonth is not supported
         //
         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      LocalDate localDate0 = new LocalDate((Chronology) gJChronology0);
      // Undeclared exception!
      try { 
        localDate0.toDateTimeAtCurrentTime();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1 for dayOfMonth is not supported
         //
         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      Instant instant0 = gJChronology0.getGregorianCutover();
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime(dateTimeZone0);
      DateTime dateTime0 = mutableDateTime0.toDateTimeISO();
      LocalDate localDate0 = dateTime0.toLocalDate();
      long long0 = gJChronology0.set(localDate0, 2678400000L);
      assertEquals((-12219292800000L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Instant instant0 = Instant.now();
      YearMonth yearMonth0 = new YearMonth(instant0, gJChronology0);
      Period period0 = Period.days(1);
      YearMonth yearMonth1 = yearMonth0.withPeriodAdded(period0, 89);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(2014, yearMonth1.getYear());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-3562), (-3562), 7593750);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      LocalDate localDate0 = LocalDate.fromDateFields(date0);
      long long0 = gJChronology0.set(localDate0, (-79134624000000L));
      assertEquals((-12219292800000L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Instant instant0 = gJChronology0.getGregorianCutover();
      Instant instant1 = instant0.minus(584L);
      DateTime dateTime0 = instant1.toDateTime((Chronology) gJChronology0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0, 6);
      String string0 = gJChronology1.toString();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("GJChronology[Etc/UTC,cutover=1582-10-14T23:59:59.416Z,mdfw=6]", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DateTime dateTime0 = new DateTime(1417392000000L, (DateTimeZone) null);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime0);
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[Etc/UTC,cutover=2014-12-01]", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[UTC]", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Instant instant0 = GJChronology.DEFAULT_CUTOVER;
      DateTime dateTime0 = instant0.toDateTime((Chronology) gJChronology0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0, 1);
      boolean boolean0 = gJChronology0.equals(gJChronology1);
      assertFalse(boolean0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DateTime dateTime0 = new DateTime(1417392000000L);
      GJChronology gJChronology0 = GJChronology.getInstance();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0);
      boolean boolean0 = gJChronology0.equals(gJChronology1);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      ArrayList<JulianChronology> arrayList0 = new ArrayList<JulianChronology>();
      boolean boolean0 = gJChronology0.equals(arrayList0);
      assertFalse(boolean0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      boolean boolean0 = gJChronology0.equals(gJChronology0);
      assertTrue(boolean0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      GJChronology gJChronology1 = GJChronology.getInstance();
      boolean boolean0 = gJChronology0.equals(gJChronology1);
      assertFalse(boolean0);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      long long0 = gJChronology0.getDateTimeMillis(1, 1, 1, 1, 1, 1, 1);
      assertEquals((-62135765938999L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(2, 2, 60, 60, 4820, 60, 4820, gJChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 60 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      try { 
        gJChronology0.getDateTimeMillis(2, 2, 29, 2, 2, 29, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 29 for dayOfMonth must be in the range [1,28]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      try { 
        gJChronology0.getDateTimeMillis(486, 486, 76, (-2038), 2206, (-2147483642), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2038 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate(mutableDateTime0, gJChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Specified date does not exist
         //
         verifyException("org.joda.time.chrono.GJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DateTime dateTime0 = new DateTime(1417392000000L, (DateTimeZone) null);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime0);
      long long0 = gJChronology0.getDateTimeMillis(12740625, 1, 1, 1);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(401993124393600001L, long0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      GJChronology gJChronology1 = (GJChronology)gJChronology0.withZone((DateTimeZone) null);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertNotSame(gJChronology1, gJChronology0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (-12219292800000L), 4);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Instant instant0 = gJChronology0.getGregorianCutover();
      DateTime dateTime0 = DateTime.now((Chronology) gJChronology0);
      Period period0 = new Period(dateTime0, instant0, (PeriodType) null);
      long long0 = gJChronology0.add((ReadablePeriod) period0, 584L, (-2885));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(39269468299808784L, long0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Instant instant0 = gJChronology0.getGregorianCutover();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      DateTime dateTime0 = instant0.toDateTime((Chronology) lenientChronology0);
      DateTime dateTime1 = dateTime0.withDayOfMonth(24);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-12218515200000L), dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Calendar calendar0 = MockCalendar.getInstance();
      MonthDay monthDay0 = MonthDay.fromCalendarFields(calendar0);
      MonthDay monthDay1 = monthDay0.withChronologyRetainFields(gJChronology0);
      MonthDay monthDay2 = monthDay1.minusDays((-2206));
      monthDay2.withDayOfMonth(1);
      assertEquals(29, monthDay2.getDayOfMonth());
      assertEquals(2, monthDay2.getMonthOfYear());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DateTime dateTime0 = new DateTime(3715200000L);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0);
      MonthDay monthDay0 = new MonthDay(3715200000L, (Chronology) gJChronology0);
      // Undeclared exception!
      try { 
        monthDay0.withDayOfMonth(1702);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1702 for dayOfMonth must be in the range [1,28]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      long long0 = gJChronology0.gregorianToJulianByWeekyear((-61999171200000L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-61999776000000L), long0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      gJChronology0.hashCode();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      long long0 = gJChronology0.gregorianToJulianByYear((-1123200000L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Instant instant0 = gJChronology0.getGregorianCutover();
      Instant instant1 = instant0.minus(686L);
      DateTime dateTime0 = instant1.toDateTime((Chronology) gJChronology0);
      DateTime dateTime1 = dateTime0.withWeekyear(1976);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(212975999314L, dateTime1.getMillis());
  }
}
