/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 16:16:49 GMT 2021
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.chrono.AssembledChronology;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.field.DecoratedDurationField;
import org.joda.time.field.DelegatedDateTimeField;
import org.joda.time.field.MillisDurationField;
import org.joda.time.field.PreciseDurationField;
import org.joda.time.field.SkipDateTimeField;
import org.joda.time.field.SkipUndoDateTimeField;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GJChronology_ESTest extends GJChronology_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Instant instant0 = new Instant(1L);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0);
      DateTimeField dateTimeField0 = gJChronology0.yearOfEra();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0);
      skipDateTimeField0.getMinimumValue(86400L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Instant instant0 = new Instant(0L);
      Duration duration0 = Duration.standardDays(1);
      Period period0 = duration0.toPeriodFrom((ReadableInstant) instant0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      int[] intArray0 = gJChronology0.get((ReadablePeriod) period0, 0L, 1962L);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 1, 962}, intArray0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Instant instant0 = Instant.now();
      Instant instant1 = new Instant(0L);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) instant1);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      YearMonth yearMonth0 = new YearMonth(instant0, lenientChronology0);
      Interval interval0 = yearMonth0.toInterval();
      assertEquals(1393632000000L, interval0.getEndMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Instant instant0 = new Instant(1555200000L);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      YearMonth yearMonth0 = new YearMonth(233L, (Chronology) gJChronology0);
      Interval interval0 = yearMonth0.toInterval();
      assertEquals(1123200000L, interval0.getEndMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-1555200000L), interval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Instant instant0 = new Instant(0L);
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      Years years0 = Years.ONE;
      gJChronology0.get((ReadablePeriod) years0, 0L, (-233L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Instant instant0 = new Instant(1L);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0);
      DateTimeField dateTimeField0 = gJChronology0.centuryOfEra();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0);
      long long0 = skipDateTimeField0.roundHalfEven(0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(978307200000L, long0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Instant instant0 = new Instant(31449600000L);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) instant0);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      MonthDay monthDay0 = new MonthDay(31449600000L, (Chronology) gJChronology0);
      assertEquals(31, monthDay0.getDayOfMonth());
      
      monthDay0.withChronologyRetainFields(lenientChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Instant instant0 = new Instant(5097600000L);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0);
      DateTimeField dateTimeField0 = gJChronology0.dayOfMonth();
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(gJChronology0, dateTimeField0);
      int int0 = skipUndoDateTimeField0.getMinimumValue(5097600000L);
      assertEquals(1, int0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.dayOfMonth();
      dateTimeField0.getLeapAmount((-1L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Instant instant0 = new Instant(1L);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0);
      DateTimeField dateTimeField0 = gJChronology0.yearOfEra();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0);
      skipDateTimeField0.isLeap(1L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Instant instant0 = new Instant(1L);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0);
      DateTimeField dateTimeField0 = gJChronology0.weekyearOfCentury();
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, fixedDateTimeZone0, millisDurationField0, millisDurationField0, millisDurationField0);
      Locale locale0 = Locale.CHINESE;
      // Undeclared exception!
      try { 
        zonedChronology_ZonedDateTimeField0.set(1L, "/-Xy_\"f)", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"/-Xy_\"f)\" for weekyearOfCentury is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Instant instant0 = new Instant(1L);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0);
      DateTimeField dateTimeField0 = gJChronology0.dayOfMonth();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0);
      String string0 = skipDateTimeField0.getAsShortText(100000000L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("2", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Instant instant0 = new Instant(16L);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      DateTimeField dateTimeField0 = gJChronology1.dayOfMonth();
      Locale locale0 = Locale.GERMAN;
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 16L);
      DecoratedDurationField decoratedDurationField0 = new DecoratedDurationField(preciseDurationField0, durationFieldType0);
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, dateTimeZone0, decoratedDurationField0, preciseDurationField0, preciseDurationField0);
      String string0 = zonedChronology_ZonedDateTimeField0.getAsText(16L, locale0);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertNotSame(gJChronology1, gJChronology0);
      assertEquals("1", string0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DateTime dateTime0 = new DateTime((Object) null);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime0, 5);
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[Etc/UTC,cutover=2014-02-14T20:21:21.320Z,mdfw=5]", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Instant instant0 = new Instant((-45L));
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      LocalDate localDate0 = LocalDate.now((Chronology) buddhistChronology0);
      LocalDate localDate1 = localDate0.withWeekyear(1);
      DateTime dateTime0 = localDate1.toDateTime(instant0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0, 1);
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[UTC,cutover=0001-02-18T23:59:59.955Z,mdfw=1]", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Instant instant0 = new Instant();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(21);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0);
      boolean boolean0 = gJChronology0.equals(gJChronology1);
      assertFalse(boolean0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      try { 
        gJChronology0.getDateTimeMillis(9, 2, 1134, (-1086), (-1742), 2, 29);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1086 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      try { 
        gJChronology0.getDateTimeMillis(60, 0, 0, (-1852), 0, 0, (-191));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1852 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Instant instant0 = new Instant(19L);
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      YearMonth yearMonth0 = new YearMonth(instant0, gJChronology0);
      // Undeclared exception!
      try { 
        yearMonth0.toInterval();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Specified date does not exist
         //
         verifyException("org.joda.time.chrono.GJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Instant instant0 = new Instant(0L);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      YearMonth yearMonth0 = new YearMonth(0L, (Chronology) gJChronology0);
      Interval interval0 = yearMonth0.toInterval(dateTimeZone0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(2678400000L, interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (-63141811200000L), 1);
      assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      gJChronology0.assemble(assembledChronology_Fields0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      GJChronology gJChronology1 = (GJChronology)gJChronology0.withUTC();
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Instant instant0 = new Instant(0L);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      long long0 = gJChronology0.julianToGregorianByYear(1123200000L);
      assertEquals(0L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Instant instant0 = new Instant(0L);
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      long long0 = gJChronology0.julianToGregorianByYear(1209600000L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(86400000L, long0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Instant instant0 = new Instant(0L);
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      long long0 = gJChronology0.julianToGregorianByYear(0L);
      assertEquals((-1123200000L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      long long0 = gJChronology0.julianToGregorianByWeekyear(1209600000L);
      assertEquals(0L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      DateTime dateTime0 = new DateTime();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0);
      long long0 = gJChronology0.julianToGregorianByWeekyear(2592000000L);
      assertEquals(1382400000L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Instant instant0 = Instant.now();
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      long long0 = gJChronology0.julianToGregorianByWeekyear(0);
      assertEquals((-1209600000L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Instant instant0 = new Instant(0L);
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      long long0 = gJChronology0.gregorianToJulianByYear((-1123200000L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Instant instant0 = new Instant(0L);
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      long long0 = gJChronology0.gregorianToJulianByYear((-211L));
      assertEquals(1123199789L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      long long0 = gJChronology0.gregorianToJulianByYear((-63141811199982L));
      assertEquals((-63110447999982L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Instant instant0 = new Instant(1555200000L);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) instant0);
      long long0 = gJChronology0.gregorianToJulianByWeekyear((-1676L));
      assertEquals(1209598324L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Instant instant0 = new Instant((-12L));
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      long long0 = gJChronology0.gregorianToJulianByWeekyear((-12219292800000L));
      assertEquals((-12218688000000L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Instant instant0 = new Instant(0L);
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      Instant instant1 = gJChronology0.getGregorianCutover();
      assertSame(instant1, instant0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      DateTime dateTime0 = DateTime.now();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0);
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      long long0 = gJChronology0.getDateTimeMillis(3980, 1, 22, 146);
      assertEquals(63431251200146L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      long long0 = gJChronology0.getDateTimeMillis((-1802), 1, 1, 48);
      assertEquals((-119002607999952L), long0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Instant instant0 = new Instant((-62135596800007L));
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0);
      // Undeclared exception!
      try { 
        gJChronology0.gregorianToJulianByYear((-62135596800007L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for year is not supported
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DateTime dateTime0 = new DateTime((Object) null);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime0, 5);
      // Undeclared exception!
      try { 
        gJChronology0.gregorianToJulianByWeekyear(5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 53 for weekOfWeekyear must be in the range [1,52]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Instant instant0 = new Instant((-9223372035927858177L));
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      // Undeclared exception!
      try { 
        GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 292278994 for weekyear must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      // Undeclared exception!
      try { 
        gJChronology0.assemble((AssembledChronology.Fields) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.GJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime(2, 2, 2, 2, 2, 2, 2, gJChronology0);
      assertEquals((-62101461477998L), dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(2, 2, (-3904), 2, 0, 4413, 0, gJChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 4413 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Instant instant0 = new Instant(1555200000L);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) instant0);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      YearMonth yearMonth0 = new YearMonth(instant0, lenientChronology0);
      yearMonth0.toInterval();
      Chronology chronology0 = gJChronology0.withZone((DateTimeZone) null);
      assertSame(chronology0, gJChronology0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1316);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      buddhistChronology0.withZone(dateTimeZone0);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
      LenientChronology lenientChronology1 = LenientChronology.getInstance(lenientChronology0);
      Chronology chronology0 = lenientChronology1.withZone((DateTimeZone) null);
      DateTime dateTime0 = new DateTime(1, 17971875, 632, 17971875, 292272992, 1, 292272992, chronology0);
      Instant instant0 = new Instant(0L);
      // Undeclared exception!
      try { 
        GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime0, 1316);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 1316
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(283);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      gJChronology0.getGregorianCutover();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Instant instant0 = new Instant(1L);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0);
      int int0 = gJChronology0.getMinimumDaysInFirstWeek();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Instant instant0 = new Instant(1L);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0);
      DateTimeField dateTimeField0 = gJChronology0.yearOfEra();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0);
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(gJChronology0, skipDateTimeField0);
      skipUndoDateTimeField0.getMinimumValue(1L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((Object) null);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) mutableDateTime0);
      DateTimeField dateTimeField0 = gJChronology0.yearOfEra();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0);
      skipDateTimeField0.getMinimumValue((long) 3);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Instant instant0 = GJChronology.DEFAULT_CUTOVER;
      Period period0 = new Period(instant0, instant0);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      int[] intArray0 = gJChronology0.get((ReadablePeriod) period0, (-79271567999911L), (-1369L));
      assertArrayEquals(new int[] {2511, 11, 4, 2, 23, 59, 58, 542}, intArray0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Instant instant0 = new Instant(31449600000L);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) instant0);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      YearMonth yearMonth0 = new YearMonth(instant0, lenientChronology0);
      // Undeclared exception!
      try { 
        yearMonth0.toInterval((DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1970 for year is not supported
         //
         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Instant instant0 = new Instant(26607895200004L);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0);
      Period period0 = Period.seconds(0);
      int[] intArray0 = gJChronology0.get((ReadablePeriod) period0, 1L, 26607895200004L);
      assertArrayEquals(new int[] {843, 2, 0, (-6), (-5), (-59), (-59), (-997)}, intArray0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DateTime dateTime0 = new DateTime((Object) null);
      Duration duration0 = Duration.millis(1);
      Period period0 = duration0.toPeriodFrom((ReadableInstant) dateTime0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      int[] intArray0 = gJChronology0.get((ReadablePeriod) period0, 2598L, (-63141811200000L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertArrayEquals(new int[] {(-2001), (-10), (-2), (-1), 0, 0, (-2), (-598)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      LocalDate localDate0 = new LocalDate((-761), 9, 9, gJChronology0);
      localDate0.withWeekyear(3453);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDate localDate0 = new LocalDate(1L);
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) dateTime0);
      DateTimeField dateTimeField0 = gJChronology0.monthOfYear();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0);
      long long0 = skipDateTimeField0.roundHalfEven((-2189L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Instant instant0 = new Instant(1L);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0);
      DateTimeField dateTimeField0 = gJChronology0.dayOfMonth();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0);
      long long0 = skipDateTimeField0.roundHalfEven(0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Instant instant0 = new Instant(1L);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0);
      DateTimeField dateTimeField0 = gJChronology0.yearOfEra();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0);
      long long0 = skipDateTimeField0.roundHalfEven(1L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.era();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      long long0 = delegatedDateTimeField0.roundHalfEven(100000000L);
      assertEquals((-62135769600000L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Instant instant0 = new Instant(1555200000L);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      MonthDay monthDay0 = new MonthDay((-611L));
      MonthDay monthDay1 = monthDay0.plusMonths(25734374);
      // Undeclared exception!
      try { 
        monthDay1.withChronologyRetainFields(gJChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 29 for dayOfMonth must not be larger than 28
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Instant instant0 = new Instant(1L);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0);
      MonthDay monthDay0 = new MonthDay(0L);
      monthDay0.withChronologyRetainFields(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Instant instant0 = new Instant(1L);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0);
      DateTimeField dateTimeField0 = gJChronology0.dayOfMonth();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0);
      int int0 = skipDateTimeField0.getMinimumValue(30962844000000L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Instant instant0 = new Instant(1L);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0);
      DateTimeField dateTimeField0 = gJChronology0.dayOfMonth();
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(gJChronology0, dateTimeField0);
      skipUndoDateTimeField0.getMinimumValue((-722L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Instant instant0 = new Instant((-12219292800000L));
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0);
      DateTimeField dateTimeField0 = gJChronology0.dayOfMonth();
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(gJChronology0, dateTimeField0);
      int int0 = skipUndoDateTimeField0.getMinimumValue((-12219292800000L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Instant instant0 = new Instant(1L);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0);
      DateTimeField dateTimeField0 = gJChronology0.dayOfMonth();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0);
      DurationField durationField0 = skipDateTimeField0.getRangeDurationField();
      DurationField durationField1 = gJChronology0.minutes();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(skipDateTimeField0, fixedDateTimeZone0, durationField0, durationField0, durationField1);
      zonedChronology_ZonedDateTimeField0.getLeapAmount(1L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-1));
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime("");
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      DateTimeField dateTimeField0 = gJChronology0.dayOfMonth();
      dateTimeField0.getLeapAmount(2);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = gJChronology0.yearOfEra();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0);
      skipDateTimeField0.isLeap(2830L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Instant instant0 = new Instant();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0);
      DateTimeField dateTimeField0 = gJChronology0.yearOfEra();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0);
      skipDateTimeField0.isLeap(1L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.dayOfMonth();
      Locale locale0 = Locale.ENGLISH;
      // Undeclared exception!
      try { 
        dateTimeField0.set((-1652L), "LW6w~", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"LW6w~\" for dayOfMonth is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime0);
      DateTimeField dateTimeField0 = gJChronology0.dayOfMonth();
      Locale locale0 = Locale.ENGLISH;
      // Undeclared exception!
      try { 
        dateTimeField0.set(203L, "Rs6'3I9)", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"Rs6'3I9)\" for dayOfMonth is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Instant instant0 = new Instant(3027L);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0);
      MonthDay monthDay0 = new MonthDay(30585600000L, (Chronology) gJChronology0);
      // Undeclared exception!
      try { 
        monthDay0.plusDays(3879);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 21 for dayOfMonth is not supported
         //
         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Instant instant0 = new Instant(19L);
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      YearMonth yearMonth0 = new YearMonth(instant0, gJChronology0);
      // Undeclared exception!
      try { 
        Weeks.weeksBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1970 for year is not supported
         //
         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Instant instant0 = new Instant(1555200012L);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) instant0);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      YearMonth yearMonth0 = new YearMonth(instant0, lenientChronology0);
      Interval interval0 = yearMonth0.toInterval();
      assertEquals(2678400000L, interval0.getEndMillis());
      assertEquals(1123200000L, interval0.getStartMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Instant instant0 = new Instant(1L);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0);
      DateTimeField dateTimeField0 = gJChronology0.yearOfEra();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0);
      String string0 = skipDateTimeField0.getAsShortText(1L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("1970", string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Instant instant0 = new Instant(1L);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0);
      DateTimeField dateTimeField0 = gJChronology0.yearOfEra();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0);
      skipDateTimeField0.getAsShortText((-15L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      DateTimeField dateTimeField0 = gJChronology0.dayOfMonth();
      Locale locale0 = Locale.GERMAN;
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 16L);
      DecoratedDurationField decoratedDurationField0 = new DecoratedDurationField(preciseDurationField0, durationFieldType0);
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, dateTimeZone0, decoratedDurationField0, preciseDurationField0, preciseDurationField0);
      String string0 = zonedChronology_ZonedDateTimeField0.getAsText(16L, locale0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DateTime dateTime0 = new DateTime((DateTimeZone) null);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime0);
      DateTimeField dateTimeField0 = gJChronology0.dayOfMonth();
      Locale locale0 = Locale.GERMAN;
      String string0 = dateTimeField0.getAsText(63158400000L, locale0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("20", string0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Instant instant0 = new Instant(1555200000L);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[Etc/UTC,cutover=1970-01-19]", string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[Etc/UTC]", string0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      GJChronology gJChronology1 = GJChronology.getInstanceUTC();
      boolean boolean0 = gJChronology1.equals(gJChronology0);
      assertFalse(boolean0);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(283);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (long) 283, 7);
      boolean boolean0 = gJChronology0.equals(gJChronology1);
      assertEquals(7, gJChronology1.getMinimumDaysInFirstWeek());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Instant instant0 = new Instant((-45L));
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      LocalDate localDate0 = LocalDate.now((Chronology) buddhistChronology0);
      DateTime dateTime0 = localDate0.toDateTime(instant0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0, 1);
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      boolean boolean0 = gJChronology0.equals(julianChronology0);
      assertEquals(18527875199955L, dateTime0.getMillis());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) null, 1);
      boolean boolean0 = gJChronology0.equals(gJChronology1);
      assertFalse(boolean0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      DateTime dateTime0 = new DateTime();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0);
      long long0 = gJChronology0.getDateTimeMillis(1, 1, 1, 1, 1, 1, 1);
      assertEquals((-62135765938999L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      DateTime dateTime0 = new DateTime((-2310L), (Chronology) islamicChronology0);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) dateTime0, 1);
      long long0 = gJChronology0.getDateTimeMillis(3570, 1, 1, 1, 1, 1, 112);
      assertEquals(50491126861112L, long0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(2, 2, 29, 2, 2, 2, 29, gJChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 29 for dayOfMonth must be in the range [1,28]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Instant instant0 = new Instant(1L);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0);
      try { 
        gJChronology0.getDateTimeMillis(63, 26, 2585, 2585, 63, 2585, 515);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2585 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDate localDate0 = localDateTime0.toLocalDate();
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime0);
      YearMonth yearMonth0 = new YearMonth((Object) null, gJChronology0);
      // Undeclared exception!
      try { 
        yearMonth0.toInterval();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Specified date does not exist
         //
         verifyException("org.joda.time.chrono.GJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DateTime dateTime0 = new DateTime((Object) null);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime0);
      try { 
        gJChronology0.getDateTimeMillis(0, 0, 4, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1545);
      // Undeclared exception!
      try { 
        GJChronology.getInstance(dateTimeZone0, (-12219292800000L), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 0
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Instant instant0 = new Instant(0L);
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      DateTime dateTime0 = new DateTime((-63113904000000L), (Chronology) gJChronology0);
      Months months0 = Months.SEVEN;
      DateTime dateTime1 = dateTime0.minus((ReadablePeriod) months0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-63132393600000L), dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Instant instant0 = new Instant(4L);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0);
      Period period0 = Period.seconds(0);
      int[] intArray0 = gJChronology0.get((ReadablePeriod) period0, 2629800000L, 0L);
      assertArrayEquals(new int[] {0, (-1), 0, 0, 13, 30, 0, 0}, intArray0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Instant instant0 = new Instant(1L);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0);
      DateTimeField dateTimeField0 = gJChronology0.dayOfMonth();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0);
      skipDateTimeField0.getDifferenceAsLong(1162L, 1L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime0);
      DateTimeField dateTimeField0 = gJChronology0.dayOfMonth();
      Locale locale0 = Locale.ENGLISH;
      String string0 = dateTimeField0.getAsText(0, locale0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DateTime dateTime0 = new DateTime((Object) null);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime0);
      DateTimeField dateTimeField0 = gJChronology0.dayOfMonth();
      Locale locale0 = Locale.CHINA;
      dateTimeField0.getMaximumTextLength(locale0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DateTime dateTime0 = new DateTime((Object) null);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime0);
      DateTimeField dateTimeField0 = gJChronology0.dayOfMonth();
      int int0 = dateTimeField0.getDifference(63158400000L, (-1L));
      assertEquals(731, int0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Instant instant0 = new Instant(1L);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0);
      DateTimeField dateTimeField0 = gJChronology0.dayOfMonth();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0);
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) gJChronology0);
      int int0 = skipDateTimeField0.getMaximumValue((ReadablePartial) localDateTime0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(28, int0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime0);
      DateTimeField dateTimeField0 = gJChronology0.dayOfMonth();
      Locale locale0 = Locale.forLanguageTag("K5rgkZ.0s+6s%t_7VQ");
      dateTimeField0.getMaximumShortTextLength(locale0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DateTime dateTime0 = new DateTime((DateTimeZone) null);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime0);
      DateTimeField dateTimeField0 = gJChronology0.dayOfMonth();
      LocalTime localTime0 = new LocalTime((DateTimeZone) null);
      dateTimeField0.getMinimumValue((ReadablePartial) localTime0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Instant instant0 = Instant.now();
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      MonthDay monthDay0 = MonthDay.now();
      monthDay0.withChronologyRetainFields(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DateTime dateTime0 = new DateTime((Object) null);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime0);
      DateTimeField dateTimeField0 = gJChronology0.dayOfMonth();
      Locale locale0 = Locale.PRC;
      String string0 = dateTimeField0.getAsShortText((-1503), locale0);
      assertEquals("-1503", string0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-1));
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime("");
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      DateTimeField dateTimeField0 = gJChronology0.dayOfMonth();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(lenientChronology0, dateTimeField0);
      long long0 = skipDateTimeField0.roundHalfEven(4);
      assertEquals(3600000L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Instant instant0 = Instant.now();
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      long long0 = gJChronology0.gregorianToJulianByWeekyear((-1209600000L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DateTime dateTime0 = new DateTime((Object) null);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime0);
      gJChronology0.hashCode();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Instant instant0 = new Instant((-62135769600000L));
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes((-1), (-1));
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      YearMonth yearMonth0 = new YearMonth(instant0, gJChronology0);
      Interval interval0 = yearMonth0.toInterval(dateTimeZone0);
      assertEquals((-62135593140000L), interval0.getEndMillis());
      assertEquals((-62138444340000L), interval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      MonthDay monthDay0 = MonthDay.now((Chronology) gJChronology0);
      Period period0 = Period.minutes(65535);
      Period period1 = period0.normalizedStandard((PeriodType) null);
      MonthDay monthDay1 = monthDay0.withPeriodAdded(period1, (-2000));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(9, monthDay1.getMonthOfYear());
      assertEquals(11, monthDay1.getDayOfMonth());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Instant instant0 = new Instant(1L);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0);
      // Undeclared exception!
      try { 
        gJChronology0.julianToGregorianByWeekyear((-62135769600000L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 53 for weekOfWeekyear must be in the range [1,52]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      boolean boolean0 = gJChronology0.equals(gJChronology0);
      assertTrue(boolean0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }
}
