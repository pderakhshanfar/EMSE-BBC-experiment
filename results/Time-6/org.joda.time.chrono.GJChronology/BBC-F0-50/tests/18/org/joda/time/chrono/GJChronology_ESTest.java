/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 12:56:52 GMT 2021
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.chrono.AssembledChronology;
import org.joda.time.chrono.BasicSingleEraDateTimeField;
import org.joda.time.chrono.BasicWeekyearDateTimeField;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.field.DividedDateTimeField;
import org.joda.time.field.OffsetDateTimeField;
import org.joda.time.field.SkipDateTimeField;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GJChronology_ESTest extends GJChronology_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      Object object0 = new Object();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = new IslamicChronology.LeapYearPatternType((-4), (-4));
      IslamicChronology islamicChronology0 = new IslamicChronology(gJChronology0, object0, islamicChronology_LeapYearPatternType0);
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(islamicChronology0);
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0, (-128));
      int int0 = skipDateTimeField0.getMinimumValue((-12219292800000L));
      assertEquals((-292275054), int0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-292269056), skipDateTimeField0.getMinimumValue());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.yearOfEra();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-1586));
      long long0 = offsetDateTimeField0.getDifferenceAsLong((-9223372036854775808L), (-12219292800000L));
      assertEquals(292277407, offsetDateTimeField0.getMaximumValue());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-292270636L), long0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = gJChronology0.monthOfYear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-4));
      long long0 = offsetDateTimeField0.getDifferenceAsLong((-12219292800000L), 1116L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-4646L), long0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Instant instant0 = new Instant((Object) null);
      Duration duration0 = Duration.ZERO;
      DateTimeZone dateTimeZone0 = instant0.getZone();
      Period period0 = duration0.toPeriod();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 3131L, 4);
      int[] intArray0 = gJChronology0.get((ReadablePeriod) period0, 3131L, 3550L);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 419}, intArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Instant instant0 = new Instant((Object) null);
      Duration duration0 = Duration.ZERO;
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      Period period0 = duration0.toPeriod();
      int[] intArray0 = gJChronology0.get((ReadablePeriod) period0, 918518400000L, 1392409281320L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertArrayEquals(new int[] {15, 0, 0, 5, 20, 21, 21, 320}, intArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(7, 7);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 219827220007L, 7);
      Months months0 = Months.TWELVE;
      long long0 = gJChronology0.add((ReadablePeriod) months0, (long) 7, 7);
      assertEquals(219801600007L, long0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Months months0 = Months.FOUR;
      long long0 = gJChronology0.add((ReadablePeriod) months0, (long) 4, 3305);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(34765200000004L, long0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(7, 7);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 219827220007L, 7);
      Months months0 = Months.ZERO;
      int[] intArray0 = gJChronology0.get((ReadablePeriod) months0, (long) 7, 219827220007L);
      assertArrayEquals(new int[] {84}, intArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Instant instant0 = new Instant((Object) null);
      Duration duration0 = Duration.ZERO;
      DateTimeZone dateTimeZone0 = instant0.getZone();
      Period period0 = duration0.toPeriod();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 1L, 4);
      int[] intArray0 = gJChronology0.get((ReadablePeriod) period0, 1L, (-1209599635L));
      assertArrayEquals(new int[] {0, 0, (-1), (-6), (-23), (-59), (-59), (-636)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.monthOfYear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-4));
      long long0 = offsetDateTimeField0.roundHalfEven((-12219292800023L));
      assertEquals((-12219638400000L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      DateTimeField dateTimeField0 = gJChronology0.hourOfDay();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 366);
      long long0 = offsetDateTimeField0.roundHalfEven((-12219292800017L));
      assertEquals((-12219292800000L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.centuryOfEra();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0);
      long long0 = skipDateTimeField0.roundHalfCeiling((-966L));
      assertEquals(978307200000L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Instant instant0 = GJChronology.DEFAULT_CUTOVER;
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 0L, 4);
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[UTC,cutover=1970-01-01]", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(7, 7);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 28857600000L, 7);
      MonthDay monthDay0 = new MonthDay(28857600000L);
      MonthDay monthDay1 = monthDay0.withChronologyRetainFields(gJChronology0);
      assertFalse(monthDay1.equals((Object)monthDay0));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = gJChronology0.hourOfDay();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0, (-812));
      int int0 = skipDateTimeField0.getMinimumValue((-12219292800000L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Instant instant0 = GJChronology.DEFAULT_CUTOVER;
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 1289L, 7);
      DateTimeField dateTimeField0 = gJChronology0.year();
      DurationField durationField0 = gJChronology0.weeks();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, dateTimeZone0, durationField0, durationField0, durationField0);
      zonedChronology_ZonedDateTimeField0.getLeapAmount(1289L);
      assertEquals(7, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.centuryOfEra();
      dateTimeField0.isLeap((-1357L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.monthOfYear();
      Locale locale0 = Locale.KOREA;
      long long0 = dateTimeField0.set((-29L), "4", locale0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-21168000029L), long0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, 1420070400000L, 3);
      YearMonth yearMonth0 = new YearMonth((Chronology) gJChronology1);
      // Undeclared exception!
      try { 
        yearMonth0.toInterval(dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2014 for year is not supported
         //
         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Instant instant0 = Instant.now();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0);
      LocalDate localDate0 = LocalDate.now((Chronology) gJChronology0);
      // Undeclared exception!
      try { 
        localDate0.toDateTimeAtCurrentTime((DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1 for dayOfMonth is not supported
         //
         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = gJChronology0.millisOfSecond();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0, 2645);
      Locale locale0 = Locale.KOREA;
      String string0 = skipDateTimeField0.getAsShortText((-966L), locale0);
      assertEquals("34", string0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.centuryOfEra();
      String string0 = dateTimeField0.getAsText(21260793600000L);
      assertEquals("27", string0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      LocalDate localDate0 = new LocalDate(2, 2, 2, gregorianChronology0);
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay((DateTimeZone) fixedDateTimeZone0);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) dateTime0, 2);
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[UTC,cutover=0002-02-02,mdfw=2]", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Instant instant0 = new Instant((Object) null);
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      gJChronology0.hashCode();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      Instant instant0 = GJChronology.DEFAULT_CUTOVER;
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0, 5);
      boolean boolean0 = gJChronology0.equals(gJChronology1);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertFalse(boolean0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, 1392336000000L, 3);
      boolean boolean0 = gJChronology1.equals(gJChronology0);
      assertFalse(boolean0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      try { 
        gJChronology0.getDateTimeMillis(7, 2, 775, 0, 4, 3, (-2599));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2599 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      try { 
        gJChronology0.getDateTimeMillis((-961), 4, 1884, 0, (-429), 0, 1884);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -429 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, 1392336000000L, 3);
      YearMonth yearMonth0 = new YearMonth((Chronology) gJChronology1);
      // Undeclared exception!
      try { 
        yearMonth0.toInterval(dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Specified date does not exist
         //
         verifyException("org.joda.time.chrono.GJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) mutableDateTime0, 3);
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      gJChronology0.assemble(assembledChronology_Fields0);
      assertEquals(3, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (-279L), 1);
      Chronology chronology0 = gJChronology0.withUTC();
      assertNotSame(chronology0, gJChronology0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      long long0 = gJChronology0.julianToGregorianByYear(1123200000L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      long long0 = gJChronology0.julianToGregorianByYear(1392409281320L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1391286081320L, long0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      long long0 = gJChronology0.julianToGregorianByYear(0L);
      assertEquals((-1123200000L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      long long0 = gJChronology0.julianToGregorianByWeekyear(1209600000L);
      assertEquals(0L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Instant instant0 = new Instant((Object) null);
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      long long0 = gJChronology0.julianToGregorianByWeekyear(21859200000L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(20649600000L, long0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (-279L), 1);
      long long0 = gJChronology0.julianToGregorianByWeekyear(2751L);
      assertEquals((-1209597249L), long0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Instant instant0 = new Instant((Object) null);
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      long long0 = gJChronology0.gregorianToJulianByYear((-1123200000L));
      assertEquals(0L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      long long0 = gJChronology0.gregorianToJulianByYear(11);
      assertEquals(1123200011L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      long long0 = gJChronology0.gregorianToJulianByYear((-173941689600000L));
      assertEquals((-173912659200000L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      long long0 = gJChronology0.gregorianToJulianByWeekyear(1196L);
      assertEquals(1209601196L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      long long0 = gJChronology0.gregorianToJulianByWeekyear((-12219292800000L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-12218688000000L), long0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Instant instant0 = new Instant((Object) null);
      DateTimeZone dateTimeZone0 = instant0.getZone();
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      Instant instant1 = gJChronology0.getGregorianCutover();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0L, instant1.getMillis());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      long long0 = gJChronology0.getDateTimeMillis(73280073, 1, 1, 73280073);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(2312433579183680073L, long0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DateTime dateTime0 = new DateTime(2882L, (DateTimeZone) null);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime0);
      // Undeclared exception!
      try { 
        gJChronology0.julianToGregorianByWeekyear((-78419491200000L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 53 for weekOfWeekyear must be in the range [1,52]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      // Undeclared exception!
      try { 
        gJChronology0.gregorianToJulianByYear((-9223372036854775784L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -292275054 for year must be in the range [-292269054,292272992]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      // Undeclared exception!
      try { 
        gJChronology0.gregorianToJulianByWeekyear(31557540000L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 53 for weekOfWeekyear must be in the range [1,52]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateTime dateTime0 = new DateTime();
      DateTime dateTime1 = dateTime0.minusWeeks(2146145651);
      DateTime dateTime2 = dateTime1.plusMinutes((-3554));
      // Undeclared exception!
      try { 
        GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) dateTime2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 29 for dayOfMonth must be in the range [1,28]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      try { 
        gJChronology0.getDateTimeMillis((-1), 45, (-4730), 45);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 45 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Instant instant0 = new Instant((Object) null);
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      // Undeclared exception!
      try { 
        gJChronology0.assemble((AssembledChronology.Fields) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.GJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Instant instant0 = new Instant((Object) null);
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      long long0 = gJChronology0.getDateTimeMillis(86399999, 1, 14, 1, 4, 0, 0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(2726458455171840000L, long0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      LocalDate localDate0 = new LocalDate(2, 2, 2, gregorianChronology0);
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay((DateTimeZone) fixedDateTimeZone0);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) dateTime0, 2);
      try { 
        gJChronology0.getDateTimeMillis(104, 1, 2, 756, 23, 93, 854);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 756 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      long long0 = gJChronology0.getDateTimeMillis(6, 6, 6, 6);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-61964524799994L), long0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (-279L), 1);
      Chronology chronology0 = gJChronology0.withZone(dateTimeZone0);
      assertSame(gJChronology0, chronology0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "l`]er");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instant instant0 = new Instant((-211714646400000L));
      Duration duration0 = Duration.standardSeconds((-211714646400000L));
      instant0.plus((ReadableDuration) duration0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(7, 7);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0, 2);
      DateTimeZone dateTimeZone1 = gJChronology0.getZone();
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      dateTimeZone0.isStandardOffset((-211714646400000L));
      try { 
        gJChronology1.getDateTimeMillis(7, (-1246), (-1995), 2, 2, 2, (-1995));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1995 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      // Undeclared exception!
      try { 
        GJChronology.getInstance(dateTimeZone0, (ReadableInstant) null, 11);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 11
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Instant instant0 = new Instant((Object) null);
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      Instant instant1 = gJChronology0.getGregorianCutover();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertSame(instant1, instant0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      int int0 = gJChronology0.getMinimumDaysInFirstWeek();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.centuryOfEra();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0);
      skipDateTimeField0.getMinimumValue(1392336000000L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Instant instant0 = new Instant();
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      DateTimeField dateTimeField0 = gJChronology0.weekyearOfCentury();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gregorianChronology0, dateTimeField0);
      skipDateTimeField0.getMinimumValue(1000000000L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.monthOfYear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-4));
      long long0 = offsetDateTimeField0.getDifferenceAsLong((-12219292800023L), 1095L);
      assertEquals((-4646L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = gJChronology0.monthOfYear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-4));
      long long0 = offsetDateTimeField0.getDifferenceAsLong(1095L, (-12219292800000L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(4646L, long0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      DateTimeField dateTimeField0 = gJChronology0.monthOfYear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1, 2234, 798);
      long long0 = offsetDateTimeField0.getDifferenceAsLong((-5382L), (-796L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, 1392336000000L, 3);
      Months months0 = Months.FOUR;
      int[] intArray0 = gJChronology1.get((ReadablePeriod) months0, (long) 2, 5296L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Instant instant0 = GJChronology.DEFAULT_CUTOVER;
      Duration duration0 = new Duration(instant0, instant0);
      Period period0 = duration0.toPeriod();
      int[] intArray0 = gJChronology0.get((ReadablePeriod) period0, (-318L), 3131L);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 3, 449}, intArray0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(7, 7);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 219827220007L, 7);
      Months months0 = Months.TWELVE;
      long long0 = gJChronology0.add((ReadablePeriod) months0, (-1303L), 7);
      assertEquals(220924798697L, long0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      Months months0 = Months.FOUR;
      long long0 = gJChronology0.add((ReadablePeriod) months0, (long) 3, (-1223));
      assertEquals((-12864009599997L), long0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      DateTimeField dateTimeField0 = gJChronology0.monthOfYear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 910);
      DurationField durationField0 = dividedDateTimeField0.getDurationField();
      long long0 = durationField0.subtract(1L, 0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(7, 7);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 219827220007L, 7);
      Months months0 = Months.ZERO;
      int[] intArray0 = gJChronology0.get((ReadablePeriod) months0, (-672L), 219827220007L);
      assertArrayEquals(new int[] {84}, intArray0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      YearMonth yearMonth0 = new YearMonth((Chronology) gJChronology0);
      YearMonth yearMonth1 = yearMonth0.withYear((-787));
      YearMonth yearMonth2 = yearMonth1.minusMonths(948);
      assertEquals(2, yearMonth2.getMonthOfYear());
      assertEquals((-866), yearMonth2.getYear());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Instant instant0 = new Instant();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2389);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      DateTimeField dateTimeField0 = gJChronology0.monthOfYear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 2389);
      long long0 = offsetDateTimeField0.roundHalfEven((-4));
      assertEquals(1123197611L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      DateTimeField dateTimeField0 = gJChronology0.monthOfYear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
      long long0 = offsetDateTimeField0.roundHalfEven(1);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 0L, 1);
      DateTimeField dateTimeField0 = gJChronology0.monthOfYear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 6);
      long long0 = offsetDateTimeField0.roundHalfEven((-2594L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(7, 7);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 219827220007L, 7);
      DateTimeField dateTimeField0 = gJChronology0.monthOfYear();
      long long0 = dateTimeField0.remainder(219827220007L);
      assertEquals(483240007L, long0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      MonthDay monthDay0 = MonthDay.now();
      MonthDay monthDay1 = monthDay0.withDayOfMonth(29);
      // Undeclared exception!
      try { 
        monthDay1.withChronologyRetainFields(gJChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 29 for dayOfMonth must not be larger than 28
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes((-4), (-4));
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 24796800000L, 3);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      Partial partial0 = new Partial(dateTimeFieldType0, 17, gJChronology0);
      assertEquals(1, partial0.size());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Instant instant0 = Instant.now();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(22);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      MonthDay monthDay0 = new MonthDay(dateTimeZone0);
      monthDay0.withChronologyRetainFields(gJChronology0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = gJChronology0.era();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0, 2645);
      int int0 = skipDateTimeField0.getMinimumValue((long) 2645);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = gJChronology0.millisOfSecond();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0, 2645);
      skipDateTimeField0.getMinimumValue((-62134732800000L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.millisOfSecond();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0, 22);
      int int0 = skipDateTimeField0.getMinimumValue((-2295L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(7, 7);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 219827220007L, 7);
      DateTimeField dateTimeField0 = gJChronology0.monthOfYear();
      int int0 = dateTimeField0.getLeapAmount(219827220007L);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(7, 7);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 219827220007L, 7);
      DateTimeField dateTimeField0 = gJChronology0.monthOfYear();
      int int0 = dateTimeField0.getLeapAmount(0L);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      DateTimeField dateTimeField0 = gJChronology0.monthOfYear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 3731);
      DurationField durationField0 = dividedDateTimeField0.getDurationField();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(gregorianChronology0);
      DurationField durationField1 = basicWeekyearDateTimeField0.getLeapDurationField();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, dateTimeZone0, durationField1, durationField0, durationField0);
      boolean boolean0 = zonedChronology_ZonedDateTimeField0.isLeap(1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      DateTimeField dateTimeField0 = gJChronology0.monthOfYear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 910);
      DurationField durationField0 = dividedDateTimeField0.getDurationField();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(gregorianChronology0);
      DurationField durationField1 = basicWeekyearDateTimeField0.getLeapDurationField();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, dateTimeZone0, durationField0, durationField0, durationField1);
      boolean boolean0 = zonedChronology_ZonedDateTimeField0.isLeap((-1L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.monthOfYear();
      Locale locale0 = Locale.FRENCH;
      long long0 = dateTimeField0.set((-9223372036854775808L), "1", locale0);
      assertEquals(9223182615309175808L, long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = gJChronology0.centuryOfEra();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, fixedDateTimeZone0, (DurationField) null, (DurationField) null, (DurationField) null);
      long long0 = zonedChronology_ZonedDateTimeField0.set((long) 3, "4", locale0);
      assertEquals((-50491036799997L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (long) 1, 4);
      DateTimeField dateTimeField0 = gJChronology0.monthOfYear();
      Locale locale0 = Locale.FRENCH;
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, fixedDateTimeZone0, (DurationField) null, (DurationField) null, (DurationField) null);
      long long0 = zonedChronology_ZonedDateTimeField0.set((long) 1, "1", locale0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(7, 7);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (-196097846399989L), 7);
      DateTimeField dateTimeField0 = gJChronology0.monthOfYear();
      Locale locale0 = Locale.FRENCH;
      long long0 = dateTimeField0.set((-196097846399989L), "1", locale0);
      assertEquals((-196124111999989L), long0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(7, 7);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 219827219954L, 7);
      DateTimeField dateTimeField0 = gJChronology0.monthOfYear();
      Locale locale0 = Locale.CHINESE;
      long long0 = dateTimeField0.set((long) 7, "1", locale0);
      assertEquals((-28857599993L), long0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      YearMonth yearMonth0 = new YearMonth((Chronology) gJChronology0);
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = new Period(1392336000012L, periodType0);
      YearMonth yearMonth1 = yearMonth0.minus(period0);
      assertEquals(2, yearMonth1.getMonthOfYear());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Instant instant0 = new Instant((Object) null);
      DateTimeZone dateTimeZone0 = instant0.getZone();
      Locale locale0 = Locale.KOREA;
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      DateTimeField dateTimeField0 = gJChronology0.yearOfCentury();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(copticChronology0, dateTimeField0);
      String string0 = skipDateTimeField0.getAsShortText((long) 1, locale0);
      assertEquals("70", string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.centuryOfEra();
      Locale locale0 = Locale.ITALY;
      String string0 = dateTimeField0.getAsShortText((-173941689600000L), locale0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("36", string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.centuryOfEra();
      String string0 = dateTimeField0.getAsText((-12219292800000L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("16", string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.centuryOfEra();
      String string0 = dateTimeField0.getAsText((-61460719134998L));
      assertEquals("1", string0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(7, 7);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 1418947200000L, 7);
      YearMonth yearMonth0 = new YearMonth((Chronology) gJChronology0);
      YearMonth yearMonth1 = yearMonth0.minus((ReadablePeriod) null);
      yearMonth1.minusMonths((-2096));
      try { 
        gJChronology0.getDateTimeMillis(0, (-59), 0, (-2096), 964, 0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2096 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (long) 6, 6);
      String string0 = gJChronology1.toString();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("GJChronology[UTC,cutover=1970-01-01T00:00:00.006Z,mdfw=6]", string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[Etc/UTC]", string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      GJChronology gJChronology1 = GJChronology.getInstance((DateTimeZone) null);
      boolean boolean0 = gJChronology0.equals(gJChronology1);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertFalse(boolean0);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, 1392336000012L, 3);
      boolean boolean0 = gJChronology0.equals(gJChronology1);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(3, gJChronology1.getMinimumDaysInFirstWeek());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("");
      DurationField durationField0 = basicSingleEraDateTimeField0.getDurationField();
      boolean boolean0 = gJChronology0.equals(durationField0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      boolean boolean0 = gJChronology0.equals(gJChronology0);
      assertTrue(boolean0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) mutableDateTime0, 3);
      GJChronology gJChronology1 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) mutableDateTime0, 1);
      boolean boolean0 = gJChronology0.equals(gJChronology1);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Instant instant0 = new Instant((Object) null);
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      long long0 = gJChronology0.getDateTimeMillis(4, 4, 4, 4, 24, 0, 24);
      assertEquals((-62033024159976L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Instant instant0 = new Instant((Object) null);
      DateTimeZone dateTimeZone0 = instant0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      try { 
        gJChronology0.getDateTimeMillis(4, 2, 7, 2976, 1638, (-906), 173);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2976 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      try { 
        gJChronology0.getDateTimeMillis(1, 2, 29, 2, 29, 29, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 29 for dayOfMonth must be in the range [1,28]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, 1392335999991L, 3);
      YearMonth yearMonth0 = new YearMonth((Chronology) gJChronology1);
      // Undeclared exception!
      try { 
        yearMonth0.toInterval(dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Specified date does not exist
         //
         verifyException("org.joda.time.chrono.GJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      MutableDateTime mutableDateTime0 = MutableDateTime.now((DateTimeZone) fixedDateTimeZone0);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) mutableDateTime0, 2);
      LocalDateTime localDateTime0 = new LocalDateTime(mutableDateTime0, gJChronology0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Instant instant0 = new Instant((Object) null);
      DateTimeZone dateTimeZone0 = instant0.getZone();
      // Undeclared exception!
      try { 
        GJChronology.getInstance(dateTimeZone0, (-12219292800000L), (-1314));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: -1314
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        GJChronology.getInstance((DateTimeZone) null, 9223372007133175832L, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 292278994 for weekyear must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(7, 7);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 28857600002L, 7);
      Months months0 = Months.TWELVE;
      long long0 = gJChronology0.add((ReadablePeriod) months0, (long) 7, 7);
      assertEquals(219801600007L, long0);
      assertEquals(7, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (long) 5, 3);
      Years years0 = Years.TWO;
      int[] intArray0 = gJChronology0.get((ReadablePeriod) years0, 31536000000L, (long) 1);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertEquals(3, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Instant instant0 = new Instant();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2389);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      DateTimeField dateTimeField0 = gJChronology0.monthOfYear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 2389);
      long long0 = offsetDateTimeField0.getDifferenceAsLong(1418947200000L, (-1493L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(540L, long0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = gJChronology0.era();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0, 2645);
      // Undeclared exception!
      try { 
        skipDateTimeField0.getDifferenceAsLong(0L, (-1928L));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.centuryOfEra();
      Locale locale0 = Locale.TAIWAN;
      String string0 = dateTimeField0.getAsText((-379), locale0);
      assertEquals("-379", string0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      YearMonth yearMonth0 = new YearMonth((long) 1);
      YearMonth yearMonth1 = yearMonth0.withChronologyRetainFields(gJChronology0);
      // Undeclared exception!
      try { 
        Months.monthsBetween((ReadablePartial) yearMonth1, (ReadablePartial) yearMonth0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1970 for year is not supported
         //
         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      MonthDay monthDay0 = MonthDay.now((Chronology) gJChronology0);
      MonthDay monthDay1 = monthDay0.plusDays(3);
      assertEquals(2, monthDay1.getMonthOfYear());
      assertEquals(17, monthDay1.getDayOfMonth());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.centuryOfEra();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0);
      Locale locale0 = Locale.UK;
      skipDateTimeField0.getMaximumTextLength(locale0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = gJChronology0.millisOfSecond();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0, 2645);
      Locale locale0 = Locale.KOREA;
      String string0 = skipDateTimeField0.getAsShortText(2645, locale0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals("2645", string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(6, 6);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 1418947200000L, 6);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      LocalDate localDate0 = new LocalDate(6, 975, 4685, lenientChronology0);
      assertEquals(6, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(7, 7);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (-196097846399984L), 7);
      YearMonth yearMonth0 = new YearMonth((-196097846399984L), (Chronology) gJChronology0);
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      // Undeclared exception!
      try { 
        yearMonth0.withFieldAdded(durationFieldType0, 1228);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 11 for monthOfYear is not supported
         //
         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Instant instant0 = Instant.now();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0);
      LocalDate localDate0 = new LocalDate(12L, (Chronology) gJChronology0);
      LocalDate localDate1 = localDate0.withWeekyear(2130);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, 3715199980L, 4);
      LocalDateTime localDateTime0 = new LocalDateTime(3715199980L, (Chronology) gJChronology0);
      DateTime dateTime0 = localDateTime0.toDateTime();
      dateTime0.getHourOfDay();
      DateTime dateTime1 = dateTime0.plusDays(982);
      dateTime1.toDateTime((DateTimeZone) fixedDateTimeZone0);
      dateTime1.plusDays(4);
      Years years0 = Years.TWO;
      assertEquals(2, years0.getYears());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(7, 7);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 219827219954L, 7);
      DateTimeField dateTimeField0 = gJChronology0.monthOfYear();
      LocalTime localTime0 = new LocalTime(1L);
      int[] intArray0 = new int[8];
      dateTimeField0.addWrapField((ReadablePartial) localTime0, 4, intArray0, (-1185));
      assertEquals(7, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      GJChronology gJChronology1 = (GJChronology)gJChronology0.withZone((DateTimeZone) null);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(7, 7);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 28857600002L, 7);
      DateTime dateTime0 = new DateTime(219801600007L, (Chronology) gJChronology0);
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      DateTime dateTime1 = dateTime0.withFieldAdded(durationFieldType0, (-3284));
      assertEquals((-103382438399993L), dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.centuryOfEra();
      Locale locale0 = Locale.TAIWAN;
      dateTimeField0.getMaximumShortTextLength(locale0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }
}
