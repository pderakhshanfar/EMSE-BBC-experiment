/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 09:34:57 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      String string1 = "[ARG...]";
      StringBuffer stringBuffer0 = new StringBuffer("[ARG...]");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, (byte)0, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      String string0 = "";
      Locale locale0 = new Locale("", "");
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      PrintWriter printWriter1 = mockPrintWriter1.append(']');
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter1, (-1), (-1), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-177));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(477, " :: ", "/tDGUK}z", options0, "/tDGUK}z");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      PrintWriter printWriter0 = mockPrintWriter0.append(';');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) printWriter0;
      objectArray0[1] = (Object) mockPrintWriter1;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) printWriter0;
      objectArray0[4] = (Object) mockPrintWriter1;
      Option option0 = new Option("", "", false, "");
      mockPrintWriter1.println((Object) option0);
      PrintWriter printWriter1 = mockPrintWriter1.format("[d~^K}!F-.8Fi", objectArray0);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter1, 20, (Options) null, 20, 20);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("M", "?1'N%hb)c`8/e:)L");
      FileSystemHandling.shouldAllThrowIOExceptions();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options0.addOptionGroup(optionGroup1);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 74, "4xF$F:c-0(>k", options0);
      mockPrintWriter0.write((-146));
      helpFormatter0.setWidth(2982);
      helpFormatter1.getOptionComparator();
      helpFormatter1.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "--", (String) null, options2, (-1381), 2982, "The option '");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Option option0 = new Option("", "?1'N%hb)c`8/e:)L");
      FileSystemHandling.shouldAllThrowIOExceptions();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringBuffer stringBuffer0 = new StringBuffer("sM");
      stringBuffer0.setLength(3);
      helpFormatter0.renderWrappedText(stringBuffer0, (byte) (-1), (-1891), "\n");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, (byte)3, (byte)0, "<");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, (-2), options0, 537, 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "line.separator");
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 1783, options0, 116, 1783);
      helpFormatter0.createPadding(1945);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "?1'N%hb)c`8/e:)L";
      Option option0 = new Option("", "?1'N%hb)c`8/e:)L");
      FileSystemHandling.shouldAllThrowIOExceptions();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      String string1 = null;
      String string2 = "d>6^+2@$82Ff4S$";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string3 = "";
      StringBuffer stringBuffer0 = new StringBuffer("");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, (byte)32, 537, "--");
      // Undeclared exception!
      helpFormatter1.renderOptions(stringBuffer1, 1, options0, (byte)0, 74);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "--", objectArray0);
      helpFormatter0.printHelp(printWriter0, 13, "A CloneNotSupportedException was thrown: ", "usage: ", options0, 13, 13, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      StringBuffer stringBuffer0 = new StringBuffer(74);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 55, 55, "");
      int int0 = 1;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, 1, (-4327), "v}lRHz-_v_g0;_X;Q5");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("$b3a0zkF", "", true, "\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(3, "@`1L]O]=/=;w@s8", " lU9QX_8.6|J&", options1, "", true);
      // Undeclared exception!
      helpFormatter1.printOptions((PrintWriter) null, 1, options0, 73, 91);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "usage: ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      optionGroup0.setRequired(true);
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1, "-", options0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      helpFormatter1.createPadding(1);
      // Undeclared exception!
      helpFormatter0.printHelp(1, "-", "^{", options0, "{?ZkLS+R=g)");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(58, "MP8JGaQz2yVG@>[WH", ", ", (Options) null, "MP8JGaQz2yVG@>[WH");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(".z9.K;6]qhL8I#/}d");
      Options options0 = new Options();
      int int0 = 1915;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, (-55), "=");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]");
      helpFormatter0.defaultArgName = "";
      helpFormatter0.createPadding(0);
      helpFormatter0.getLeftPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(3);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("M", "?1'N%hb)c`8/e:)L");
      FileSystemHandling.shouldAllThrowIOExceptions();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = new Options();
      options2.addOptionGroup(optionGroup1);
      // Undeclared exception!
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1, "iBaW+7MXMQbgdc", options0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("$b3a0zkF", "", true, "\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(3, "@`1L]O]=/=;w@s8", " lU9QX_8.6|J&", options1, "", true);
      helpFormatter0.setWidth(74);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("$b3a0zkF", "", true, "\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setWidth(74);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" [ARG]", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, 10, " ", options0);
      mockPrintWriter0.write(503);
      helpFormatter2.printHelp("--", "arg", options1, "");
      helpFormatter0.setWidth(20);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Options options2 = new Options();
      options0.addOption((String) null, false, "");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3010, "g@I@u#", "Cannot add value, list full.", options0, 2654, 1785, "[ Options: [ short ", false);
      Options options3 = new Options();
      helpFormatter0.setWidth(3010);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("U|VI&q}L2");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Options options2 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "U|VI&q}L2", (String) null, options0, 733, (-181), (String) null, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("-", 1797, (-3947));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("M", "?1'N%hb)c`8/e:)L");
      FileSystemHandling.shouldAllThrowIOExceptions();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter1.printHelp("--", "M", options0, "arg");
      helpFormatter1.setWidth(14);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Option option0 = new Option("", "?1'N%hb)c`8/e:)L");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Option option1 = new Option("arg", "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option1);
      Options options1 = options0.addOptionGroup(optionGroup0);
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Locale locale0 = new Locale("N5JOqtj]+u#e");
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "?1'N%hb)c`8/e:)L", objectArray0);
      helpFormatter0.printUsage(printWriter0, 32, "org.apache.commons.cli.HelpFormatter$OptionComparator", options1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "' contains an illegal character : '", "]", (Options) null, "6g.:F%\"@n5");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.getOption("HaGzLK");
      options0.addOption("", "--", true, "arg");
      Option option0 = new Option("arg", false, "");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-2), "<", "<", options1, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.findWrapPos("]", 0, 0);
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", false, (String) null);
      Option option0 = new Option("arg", "#)noJbx$a~pdN7", true, "]");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp(35, "]", "#)noJbx$a~pdN7", options2, "]", true);
      helpFormatter0.setWidth(0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.findWrapPos("]", 0, 0);
      helpFormatter0.getLeftPadding();
      helpFormatter0.setWidth((-1353));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(" | ", "   ", options0, " | ");
      helpFormatter0.rtrim(" | ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(1);
      StringBuffer stringBuffer0 = new StringBuffer(74);
      helpFormatter0.renderWrappedText(stringBuffer0, 1748, (-577), "M_X%/Yg<Kdz%(b_`F<");
      helpFormatter1.renderOptions(stringBuffer0, 1500, options0, 2467, 3);
      helpFormatter1.rtrim("-");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("3qf^/d|}m'5 Rk$@kG^", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockPrintWriter0.print(0.0F);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "3qf^/d|}m'5 Rk$@kG^", "", options0, 10, 733, "", false);
      Options options1 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter0.renderWrappedText(stringBuffer0, 10, (byte)109, "");
      helpFormatter0.findWrapPos("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", 10, 56);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.findWrapPos("]", 0, 0);
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", false, (String) null);
      Option option0 = new Option("arg", "#)noJbx$a~pdN7", true, "]");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp(35, "]", "#)noJbx$a~pdN7", options2, "]", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setWidth(35);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-3678);
      String string0 = " | ";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" | ", "   ", options0, " | ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      int int0 = (-3829);
      String string0 = "@<";
      int int1 = 10;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 733, "]", "usage: ", options1, (-212), (-3829), "@<", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = false;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("M", "?1'N%hb)c`8/e:)L");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1295), "--", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("arg");
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      mockPrintStream0.append('J');
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-428), "org.apache.commons.cli.HelpFormatter$OptionComparator", "\n", (Options) null, "org.apache.commons.cli.HelpFormatter$OptionComparator", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("arg");
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      mockPrintWriter0.write(111);
      String string0 = "+Ko";
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (-2612), "*ohaB}a8", "--", options0, (-746), (-1088), "org.apache.commons.cli.OptionValidator", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("LZcGxgmPJ:");
      mockPrintStream0.append('J');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      mockPrintStream0.write(byteArray0, (int) (byte)0, 3);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 44, "E~NqM2=SMQnn", "LZcGxgmPJ:", options0, 241, (int) (byte)0, "org.apache.commons.cli.AlreadySelectedException");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 886, "tG>kz4!Vv 3j\"2\"|", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("arg");
      helpFormatter0.getWidth();
      helpFormatter1.getOptionComparator();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(1, "-", "uQ~dd%QGh", options0, "(meLfSS7-_%u4btF", false);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Bc0N5$mW}", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      mockPrintWriter0.write((-1631));
      helpFormatter1.defaultDescPad = 63;
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "Bc0N5$mW}", "", options0, 1, 34, " | ", true);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte) (-94);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      mockPrintWriter0.write(3);
      options0.getOption("");
      helpFormatter0.printHelp("-", "usage: ", options1, "");
      helpFormatter1.setDescPadding((-2));
      helpFormatter0.getOptionComparator();
      helpFormatter1.rtrim("");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = 1;
      mockPrintWriter0.write(3);
      mockFileOutputStream0.write(1948);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 63, "usage: ", options1);
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1, "--", "K", options1, 63, 9, "--", false);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("arg");
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      mockPrintStream0.append('J');
      byte byte0 = (byte)0;
      int int0 = (-1810);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (-488), (String) null, "", (Options) null, (-1810), 3, "usage: ", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("$b3a0zkF", "", true, "\n");
      helpFormatter0.rtrim((String) null);
      Options options1 = options0.addOption((String) null, true, "Illegal option name '");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("3qf^/d|}m'5 Rk$@kG^", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "3qf^/d|}m'5 Rk$@kG^", "", options0, 10, 733, "", false);
      Options options1 = new Options();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)109;
      mockFileOutputStream0.write(byteArray0);
      Options options2 = new Options();
      options2.getOptionGroups();
      helpFormatter0.printOptions(mockPrintWriter0, (-1530), options2, 310, 0);
      helpFormatter0.getOptionComparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 74, "");
      helpFormatter0.getOptionComparator();
      helpFormatter1.getArgName();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("arg");
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Options options0 = null;
      mockPrintStream0.append('J');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      mockPrintStream0.write(byteArray0, (int) (byte)0, 3);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 34, "org.apache.commons.cli.AlreadySelectedException", "tG>kz4!Vv 3j\"2\"|", (Options) null, 3, 1, "org.apache.commons.cli.AlreadySelectedException");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = null;
      Options options1 = options0.addOption((String) null, "-", false, "YyA3k[3w{=,Hg");
      options1.getOption(", ");
      int int0 = 9;
      MockFile mockFile0 = new MockFile((String) null, "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) ", ";
      objectArray0[5] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "-", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 9, "", "", options1, (-2), (-1459), "e&m2uRK\"h>3gBiMzZ", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      mockPrintWriter0.write(3);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "--", "+Ko", options1, 63, 9, "--", false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream0);
      helpFormatter0.getLongOptSeparator();
      Options options2 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getOptionComparator();
      helpFormatter0.setLeftPadding(74);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, 63, "--");
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("3qf^/d|}m'5 Rk$@kG^", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "3qf^/d|}m'5 Rk$@kG^", "", options0, 10, 733, "", false);
      Options options1 = new Options();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)109;
      mockFileOutputStream0.write(byteArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) helpFormatter1;
      objectArray0[1] = (Object) helpFormatter1;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      String string0 = "F;t\"lG-E";
      // Undeclared exception!
      helpFormatter1.printHelp(printWriter0, 1, "F;t\"lG-E", "Illegal option name '", options0, 1, (-1), "");
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("$b3a0zkF", "", true, "\n");
      options1.addOption("arg", "arg", true, "H9g&e~.D*1b68U");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, "wuy9dMS%fb00{~Oq~-U", "W", options0, 6, 13, "W", true);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp("aSEozN2@r", "", options1, ")$i");
      helpFormatter0.rtrim("");
      Option option0 = new Option((String) null, (String) null, true, "");
      Options options2 = options0.addOption(option0);
      helpFormatter0.printHelp(" | ", options2);
      helpFormatter0.setWidth(1738);
      helpFormatter0.setLeftPadding(1);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("$b3a0zkF", "", true, "\n");
      options1.getOption((String) null);
      options1.getOption("\n");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.printHelp(")$i", ")$i", options1, "L;");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultArgName = "v";
      Options options1 = options0.addOption((String) null, "", true, " ");
      Option option0 = options0.getOption("-");
      options0.addOption(option0);
      options1.getOption("S@ML");
      helpFormatter0.printHelp("$b3a0zkF", "", options0, " ]");
      helpFormatter0.setDescPadding(63);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(627);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-319));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      mockPrintStream0.append('q');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      mockPrintStream0.write(byteArray0, 0, (int) (byte)0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-689), "]", "ZW@m'^S|", (Options) null, 0, 74, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 4979, 74, "ZrcKO6");
      Options options0 = new Options();
      Option option0 = new Option((String) null, "W{@46lu)XQyNxp,e");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("GwhK", "#Nja9O=+LNqCnr?", true, "usage: ");
      int int0 = 1136;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, 4979, options2, 1136, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("$b3a0zkF", "", false, "\n");
      options1.getOption((String) null);
      helpFormatter0.printHelp("\n", "\n", options1, "L;");
      helpFormatter0.setDescPadding(2627);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("`p`\"gdcD=-a");
      int int0 = (-5113);
      String string0 = "oaav}70\\[qeyJ`";
      // Undeclared exception!
      try { 
        options1.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1571, "", "(meLfSS7-_%u4btF", options0, "v(9nc]M\"5_[ID", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "org.apache.commons.cli.HelpFormatter$1";
      String string0 = "Illegal option name '";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      options0.addOptionGroup(optionGroup0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      helpFormatter0.printHelp("z\"A;whMw!e`B2;%C)_", "Illegal option name '", options0, "z\"A;whMw!e`B2;%C)_", false);
      int int0 = 109;
      StringWriter stringWriter0 = new StringWriter(109);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "org.apache.commons.cli.HelpFormatter$1", 3, 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      String string0 = "Y,8K[tG=YNh6wg:";
      Options options0 = null;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      helpFormatter0.defaultLeftPad = (int) (byte)51;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)9;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 8, "", (String) null, (Options) null, (int) (byte)51, 245, "Y,8K[tG=YNh6wg:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("3qf^/d|}m'5 Rk$@kG^", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "3qf^/d|}m'5 Rk$@kG^", "", options0, 10, 733, "", false);
      Options options1 = new Options();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)109;
      mockFileOutputStream0.write(byteArray0);
      Options options2 = new Options();
      options2.getOptionGroups();
      helpFormatter0.printOptions(mockPrintWriter0, (-1530), options2, 310, 0);
      helpFormatter0.getOptionComparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setWidth((-1));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      helpFormatter0.defaultLeftPad = (int) (byte)51;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-119);
      mockPrintStream0.write(byteArray0, 0, (int) (byte)0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1063, "5\"&4\"OpF", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      int int0 = 0;
      helpFormatter0.findWrapPos("]", 0, 0);
      helpFormatter0.getLeftPadding();
      helpFormatter0.setWidth((-1353));
      StringBuffer stringBuffer0 = new StringBuffer(3);
      StringBuffer stringBuffer1 = null;
      try {
        stringBuffer1 = new StringBuffer((-1097));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "-", false, "YyA3k[3w{=,Hg");
      options1.getOption(", ");
      options1.getOption("");
      helpFormatter0.printHelp(" ", "5&X(-;)", options0, "");
      helpFormatter0.setDescPadding(37);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 2165;
      Options options1 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      String string0 = helpFormatter0.defaultLongOptPrefix;
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)124;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 310, "__l", "", options1, 310, (-2699), "org.apache.commons.cli.HelpFormatter$OptionComparator", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      helpFormatter0.defaultLeftPad = (int) (byte)51;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)0;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Y,8K[tG=YNh6wg:", "' contains an illegal character : '", (Options) null, "eV[[\"o88\"badUGM`89r");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "   ";
      Options options0 = new Options();
      helpFormatter0.printHelp(" | ", "   ", options0, " | ");
      helpFormatter0.rtrim(" | ");
      String string1 = "";
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)99;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Options options0 = new Options();
      helpFormatter0.printHelp(" | ", "   ", options0, " | ");
      helpFormatter0.rtrim(" | ");
      helpFormatter0.printHelp(10, "--", "]", options0, "]");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "   ";
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      int int0 = 2165;
      Options options1 = new Options();
      int int1 = 310;
      int int2 = 0;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string1 = "+Ko";
      int int3 = 63;
      int int4 = 9;
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1, "--", "+Ko", options1, 63, 9, "--", false);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.findWrapPos("--", 0, 1060);
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setDescPadding((-1));
      helpFormatter0.setLongOptSeparator("--");
      helpFormatter0.getOptionComparator();
      helpFormatter0.setLeftPadding(1060);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("6DQRQMS8B'lyE5]Ua", (Options) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]");
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setDescPadding(74);
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getOptionComparator();
      helpFormatter0.setLeftPadding(1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1353), "arg", "l", options0, "l");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(" | ", "   ", options0, " | ");
      options0.hasLongOption(" ");
      options0.toString();
      helpFormatter0.rtrim(" | ");
      helpFormatter0.printHelp("arg", options0);
      helpFormatter0.setWidth(1);
      helpFormatter0.setOptPrefix("0HfM+G");
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setDescPadding(0);
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("gsHsQt/[6%yOi");
      helpFormatter1.getOptionComparator();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setLongOptSeparator("2&Eq");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setSyntaxPrefix("-");
      helpFormatter1.getOptionComparator();
      helpFormatter1.setNewLine("");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "2&Eq");
      // Undeclared exception!
      try { 
        helpFormatter2.renderWrappedText(stringBuffer0, 513, 3, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)0;
      byte byte0 = (byte) (-119);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (String) null, (Options) null, "Y,8K[tG=YNh6wg:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 388, (-3834), "(meLfSS7-_%u4btF");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, (-3834), 3166, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 15;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 15, (-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(3006);
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.getLongOptSeparator();
      Options options1 = options0.addOption("", "2@! s~RM/7mOQsQG", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1353), "", "", options1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.findWrapPos("--", 0, 1060);
      helpFormatter0.getLeftPadding();
      helpFormatter0.setWidth(0);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      StringBuffer stringBuffer1 = new StringBuffer(3);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 0, (-1), "--");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      helpFormatter0.printHelp(74, "(meLfSS7-_%u4btF", "v(9nc]M\"5_[ID", options0, "v(9nc]M\"5_[ID", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(74);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.println(0.0F);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "DyJ{Fo _/%cqz>]:6");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-74);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]");
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "--");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(" | ", "   ", options0, " | ");
      helpFormatter0.rtrim(" | ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      int int0 = 31;
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 8, options0, 0, 0);
      // Undeclared exception!
      try { 
        stringBuffer1.delete(1, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      int int0 = 74;
      String string0 = "Y,8K[tG=YNh6wg:";
      Options options0 = null;
      int int1 = 0;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)51;
      byte byte0 = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-119);
      int int2 = 0;
      StringBuffer stringBuffer0 = new StringBuffer();
      int int3 = 15;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 15, (Options) null, (byte)0, (byte)9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("m=n");
      helpFormatter0.rtrim("h/xkSY5.$-hn6k'gr");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      int int0 = (-3517);
      BufferedOutputStream bufferedOutputStream0 = null;
      try {
        bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, (-3517));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("$b3a0zkF", "", false, "\n");
      options1.getOption((String) null);
      options1.getOption("org.apache.commons.cli.HelpFormatter$OptionComparator");
      helpFormatter0.printHelp("/$i5$", "/$i5$", options1, "L;");
      helpFormatter0.setDescPadding(2627);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.defaultOptPrefix = "e+O{";
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      int int0 = 667;
      Options options0 = new Options();
      options0.getOption("-");
      helpFormatter0.defaultWidth = 2;
      mockPrintWriter0.print(0.0);
      int int1 = (-74);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-5024), " [ARG]");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      Object[] objectArray0 = new Object[2];
      mockPrintWriter0.println((double) 3);
      objectArray0[0] = (Object) mockPrintWriter0;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte) (-40);
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte)127;
      byteArray0[7] = (byte) (-84);
      byteArray0[8] = (byte) (-65);
      bufferedOutputStream0.write(byteArray0);
      objectArray0[1] = (Object) mockPrintStream0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      mockPrintWriter0.printf("\n", objectArray0);
      String string0 = "va";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1483), "va");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "G!;>W[^_Ax";
      helpFormatter0.setOptPrefix("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("G!;>W[^_Ax", ">bo$ab!CRM:", (Options) null, "G!;>W[^_Ax", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(" | ", "   ", options0, " | ");
      helpFormatter0.rtrim(" | ");
      Option option0 = null;
      try {
        option0 = new Option("JImRNB:p-n9_<", "The option '", true, "The option '");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'JImRNB:p-n9_<' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      mockPrintWriter0.println(object1);
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) "";
      mockPrintWriter0.format((Locale) null, "", objectArray0);
      int int0 = (-1);
      int int1 = 329;
      mockPrintWriter0.checkError();
      String string0 = "SPAx.=SuYZ";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1), 329, "SPAx.=SuYZ");
      helpFormatter0.getNewLine();
      String string1 = "";
      Options options0 = null;
      boolean boolean0 = true;
      helpFormatter0.defaultSyntaxPrefix = "";
      mockPrintWriter0.println((-1.0F));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "SPAx.=SuYZ", (Options) null, "C7CdeAB#!", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 44;
      helpFormatter0.setArgName((String) null);
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      Option option0 = new Option((String) null, false, "G)U5{xfIcycb|vp =j");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", (String) null, false, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options2, "{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "2@! s~RM/7mOQsQG", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1353), "", "", options1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.getSyntaxPrefix();
      String string0 = "3qf^/d|}m'5 Rk$@kG^";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("3qf^/d|}m'5 Rk$@kG^", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2165, "usage: ", "__l", options0, 310, 0, "", false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream0);
      Options options1 = new Options();
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)109;
      byteArray0[0] = (byte)109;
      mockFileOutputStream0.write(byteArray0);
      options1.getOptionGroups();
      int int0 = (-5375);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter1, 74, options1, 74, (-5375));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-2);
      int int1 = 2053;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2), 2053, ">");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-3834), "]", "<G", options0, "(meLfSS7-_%u4btF", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setArgName("");
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Options options0 = null;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-119);
      mockPrintStream0.write(byteArray0, 0, (int) (byte)0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "Y,8K[tG=YNh6wg:", "Y,8K[tG=YNh6wg:", (Options) null, 74, 0, "Y,8K[tG=YNh6wg:");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, true);
      byteArrayOutputStream0.reset();
      int int0 = 10;
      String string0 = "";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 10, 10, "");
      helpFormatter0.getDescPadding();
      String string1 = "!a!7(Q)*\"+\\0f+m:-*?";
      String string2 = ",WS+XMA7%dO";
      Options options0 = new Options();
      String string3 = "org.apache.commons.cli.AlreadySelectedException";
      // Undeclared exception!
      try { 
        options0.addOption("Ff7<&(RhZR", "Ff7<&(RhZR", true, "org.apache.commons.cli.AlreadySelectedException");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'Ff7<&(RhZR' contains an illegal character : '<'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 74;
      int int1 = 0;
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 0, "");
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("org.apache.commons.cli.ParseException", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.ParseException' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setArgName("");
      helpFormatter0.setNewLine("");
      helpFormatter0.setLeftPadding((-1371));
      helpFormatter0.setLongOptPrefix("arg");
      helpFormatter0.setSyntaxPrefix("Kg|lfo");
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("kU@X]z=:'Aq~");
      helpFormatter0.getNewLine();
      helpFormatter0.setDescPadding((-1184));
      helpFormatter0.defaultArgName = "kU@X]z=:'Aq~";
      helpFormatter0.setOptionComparator((Comparator) null);
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "u|0cy*t*_'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2549;
      helpFormatter0.defaultLeftPad = 2549;
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", "hPzhB+I_ ", true, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "-\"6}f/^.'yjFe";
      helpFormatter0.setArgName("-\"6}f/^.'yjFe");
      helpFormatter0.getOptionComparator();
      String string1 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", "\n");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("arg");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("--", "-", (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "rA`x?'8aHVJ";
      Options options0 = new Options();
      helpFormatter0.printHelp("rA`x?'8aHVJ", options0, true);
      OutputStream outputStream0 = null;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, true, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      int int0 = 0;
      helpFormatter0.findWrapPos("--", 0, 1060);
      helpFormatter0.getLeftPadding();
      helpFormatter0.setWidth(0);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 1184, "[ARG...]");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "V.hs1Xt.w>a4GD`eVl";
      String string1 = "";
      MockFile mockFile0 = new MockFile("");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("-", "V.hs1Xt.w>a4GD`eVl", (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }
}
