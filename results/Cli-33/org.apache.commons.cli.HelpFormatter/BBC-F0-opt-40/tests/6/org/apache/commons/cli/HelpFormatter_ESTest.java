/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 14:47:47 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
      helpFormatter0.getLeftPadding();
      helpFormatter0.findWrapPos("arg", 1, 1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.rtrim("-");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("*2mI4R");
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, (-985), ", ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = "";
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1671, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1300));
      helpFormatter0.defaultArgName = "";
      helpFormatter0.getDescPadding();
      String string0 = " ]";
      helpFormatter0.findWrapPos(" ]", 8, 8);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1300));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.rtrim("");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-2242));
      helpFormatter0.getArgName();
      helpFormatter0.getWidth();
      helpFormatter0.defaultLongOptPrefix = ",~}(5!%F5N#X1AZJ+";
      helpFormatter0.getOptPrefix();
      helpFormatter0.getNewLine();
      helpFormatter0.findWrapPos("f+>\"r=0]m&AEMG=Ohd", (-2242), (-2242));
      helpFormatter0.rtrim("\n");
      helpFormatter0.findWrapPos("-", (-4484), 1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(1);
      helpFormatter0.defaultNewLine = ">";
      // Undeclared exception!
      helpFormatter0.printHelp(">", (Options) null);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Options options0 = null;
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("4pu/3", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, 0, "Illegal option name '");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Options options0 = null;
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("x={e+7]=#D", "x={e+7]=#D", (Options) null, "x={e+7]=#D");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(32, "", "", (Options) null, "Up'w)/W ;%+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "5";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 14, options0, 14, 63);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.rtrim("");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", 32, (-1673));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = "XM.%+v";
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(64, "arg", "qVsAQQHM", (Options) null, "arg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.renderOptions((StringBuffer) null, 3461, options0, 3461, 3461);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 32, options0, 32, (-1773));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte) (-113);
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte) (-2);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 1, "usage: ");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("XM.%+v");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "S%i-3<}$-K", false, "XM.%+v");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "\n", (String) null, options1, (-2), 74, "[ARG...]", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      stringWriter0.getBuffer();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.trimToSize();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "org.apache.commons.cli.HelpFormatter$OptionComparator");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('-');
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-755), ";u}MW!Eaj^oC /2RR", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ]");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(" ]");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      Option option0 = new Option("", "-", true, "\n");
      mockPrintWriter0.print((double) (-2));
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "--", " ]", options1, 4618, 4618, ":6", true);
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1, ":6", "--", options2, (-3579), (-1), (String) null, false);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ]");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "-", true, "\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 74, "--", " ]", options1, 4618, 4618, ":6", true);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      // Undeclared exception!
      helpFormatter3.renderOptions(stringBuffer0, 0, options0, 3, 44);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, "Kf{7", "   ", options0, 1805, 44, "Kf{7");
      helpFormatter0.printHelp("Kf{7", options0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.rtrim("arg");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", false, (String) null);
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp(74, " ", ">TlN6x", options1, "", true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ">TlN6x");
      helpFormatter0.rtrim((String) null);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter1.renderWrappedText(stringBuffer0, 3456, 1, "7");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, (Options) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ]");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "-", false, "\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 645, " ]", " ]", options1, 645, 9, "org.apache.commons.cli.Options", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      String string0 = "Kf{7";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1203), "Kf{7", "   ", options0, 1805, 44, "Kf{7");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter2.renderOptions(stringBuffer0, 214, options0, 3357, 3357);
      helpFormatter1.printHelp(3, "0k#:r2T}2]RSM'\rfm8", "'ldd32g'\"$5P", options0, "\"", false);
      helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", options0, false);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter1.rtrim("--");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      int int0 = 44;
      String string0 = "nQCS@S0%83b";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 44, "");
      String string1 = "Cannot add value, list full.";
      String string2 = "#/ \\";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1063), "nQCS@S0%83b");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Option option0 = new Option((String) null, "", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options0 = new Options();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption(option0);
      options2.addOptionGroup(optionGroup1);
      Options options3 = options1.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.printHelp(1753, "org.apache.commons.cli.HelpFormatter$1", "--", options3, "org.apache.commons.cli.HelpFormatter$1", true);
      helpFormatter0.printHelp("-", options0, true);
      HelpFormatter helpFormatter4 = new HelpFormatter();
      helpFormatter3.rtrim("");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "b_[#xR`PX'[";
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "The option '");
      options0.addOption(option0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      options0.getOptions();
      helpFormatter0.rtrim("The option '");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, "LviU%6,2o>jv");
      helpFormatter0.printHelp("The option '", options0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      String string0 = "--";
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) null, 1, (String) null, "--", options1, (-2628), 701, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      helpFormatter0.rtrim("ypb&u");
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "ypb&u");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.rtrim(" | ");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-1351), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      PrintWriter printWriter0 = mockPrintWriter0.append(',');
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "v", "line.separator", options0, 0, 3106, "[");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = false;
      Options options0 = new Options();
      options0.addOptionGroup(optionGroup0);
      Options options1 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 74, "4/BZ66hCB-$H=", ">[%A;><P]q3n", options0, (-1), 3, "&fx;),K'C#~@)Kwd'b");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      helpFormatter0.printHelp((-1), " ] [ long ", "tS", options0, "-", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.rtrim("");
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 74, "arg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "\n");
      options0.toString();
      options1.hasOption("bIH?Ozk&S9snqH+");
      options1.hasShortOption("[");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("sN9=22Dd2");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 69, "r&I]kwr7r_@", "+(N", options0, 31, 1, (String) null, false);
      helpFormatter1.getLongOptPrefix();
      helpFormatter1.getWidth();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 31, "usage: ", "[", options1, 1299, 69, " ] [ long ", false);
      helpFormatter1.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 31, "[");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("{kB#-{C}#b}b>,&PULK");
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
      helpFormatter0.defaultArgName = null;
      helpFormatter0.getArgName();
      stringBuffer0.insert(1, false);
      helpFormatter0.defaultNewLine = "{kB#-{C}#b}b>,&PULK";
      stringBuffer0.append(true);
      helpFormatter0.setSyntaxPrefix("");
      int int0 = 61;
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "AP4C$RD4%$");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // AP4C$RD4%$
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setNewLine("[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]");
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.hasShortOption(" ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]");
      int int0 = (-1);
      helpFormatter0.printHelp((-1), " ] [ long ", "tS", options0, "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", false);
      helpFormatter0.printHelp("[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", options0, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append('k');
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, (-1), "2g$V!", "", options1, (-1), (-1853), "tS");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(74);
      stringWriter0.append('P');
      stringWriter0.getBuffer();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.trimToSize();
      helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.rtrim("iZ4vKz");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "L}`Um/wV(32YQC1V", "L}`Um/wV(32YQC1V", (Options) null, "arg", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "\n");
      options0.toString();
      options1.hasOption("bIH?Ozk&S9snqH+");
      options1.hasShortOption("[");
      options1.hasShortOption("IfLm=s;");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(51, " ", "[", options0, (String) null, true);
      helpFormatter1.printHelp("org.apache.commons.cli.AlreadySelectedException", options0, true);
      helpFormatter0.printHelp("bIH?Ozk&S9snqH+", options1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) options1;
      objectArray0[1] = (Object) "IfLm=s;";
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      helpFormatter1.printUsage(printWriter0, 7, "arg", options0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "-");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.printHelp((-1), "-", "qC", options1, "qC", true);
      helpFormatter0.printHelp("|[AxarN{=Z]`w6~?3a", options0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.rtrim("45P28?");
      // Undeclared exception!
      helpFormatter1.printUsage((PrintWriter) null, 1, "api\"[}=R");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("1)IGk]Q|h'yk{ V8rHY");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("kX}PnrYo");
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 10, "usage: ", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "-");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.defaultLongOptPrefix = "";
      Option option1 = new Option("", true, "");
      helpFormatter0.defaultDescPad = (-1);
      optionGroup0.addOption(option1);
      option0.setRequired(true);
      options1.addOptionGroup(optionGroup0);
      String string0 = "'x<*]pXG?&";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "'x<*]pXG?&", "", options0, "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "-");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.defaultLongOptPrefix = "";
      Option option1 = new Option("", true, "");
      helpFormatter0.defaultDescPad = (-1);
      optionGroup0.addOption(option1);
      option0.setRequired(true);
      options1.addOptionGroup(optionGroup0);
      String string0 = "_7x(Gu";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("_7x(Gu", options0, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "\n");
      options0.toString();
      options1.hasOption("bIH?Ozk&S9snqH+");
      options1.hasShortOption("");
      options1.hasShortOption("--");
      String string0 = "";
      helpFormatter0.printHelp((-1), "bIH?Ozk&S9snqH+", "", options1, "", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("");
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append('<');
      StringWriter stringWriter2 = stringWriter1.append('<');
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      stringBuffer0.trimToSize();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 3, (-1470), "usage: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "-");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.defaultLongOptPrefix = "";
      Option option1 = new Option("", true, "");
      helpFormatter0.defaultDescPad = (-1);
      optionGroup0.addOption(option1);
      option0.setRequired(true);
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.helpOptions();
      options2.toString();
      options2.hasShortOption(" pq`");
      options2.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("o;~S#nh* ERD-Q,~)", options1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", false, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      option0.setRequired(false);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "-");
      Options options2 = options1.addOption((String) null, "--", true, "usage: ");
      Options options3 = options2.addOptionGroup(optionGroup1);
      Options options4 = options3.addOptionGroup(optionGroup1);
      String string0 = " pq`";
      options4.helpOptions();
      options0.toString();
      options0.hasShortOption("' was specified but an option from this group ");
      Options options5 = new Options();
      options5.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("UHFcrqJRq", " :: ", options0, "[ Options: [ short java.util.HashMap@0000000008 ] [ long {--=[ option: null --  [ARG] :: usage:  ]} ]", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      PrintWriter printWriter0 = mockPrintWriter0.append('}');
      Options options0 = new Options();
      helpFormatter0.printUsage(printWriter0, 3, "b:cN#l6M", options0);
      helpFormatter0.defaultSyntaxPrefix = "b_[#xR`PX'[";
      Options options1 = new Options();
      Option option0 = new Option("", false, "arg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("I_2HX");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream0, false);
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      // Undeclared exception!
      try { 
        printWriter0.append((CharSequence) "-", 3, (int) '}');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getOptions();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = new Options();
      helpFormatter0.printHelp(1959, "%}|pwr&! HA?r", ",w<5a#L,D98.7B(N*", options2, "J\"BEX(Sanv5.t&E2", false);
      helpFormatter0.printHelp("63Q0VLt{T", options1, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("/BW");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.rtrim("arg");
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Locale locale0 = new Locale("arg", "9^#h:#6");
      PrintWriter printWriter1 = mockPrintWriter1.printf(locale0, "", (Object[]) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter1, (-1375), "9^#h:#6");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ]";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ]");
      PrintWriter printWriter0 = mockPrintWriter0.append('}');
      int int0 = (-2);
      String string1 = "b:cN#l6M";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-2), "b:cN#l6M", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ]");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "-", false, "\n");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOption(option0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(pipedOutputStream0, false);
      mockPrintWriter1.print("'H!7+:O><");
      Options options2 = options1.addOption("arg", true, "' was specified but an option from this group ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, (-1), (String) null, options2);
      helpFormatter0.rtrim("");
      helpFormatter0.printHelp("Ls0=op<D", options0);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "<");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.defaultLongOptPrefix = "";
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.helpOptions();
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
      options2.hasShortOption(" pq`");
      options2.getOptions();
      helpFormatter0.printHelp("I)[^S2YkfvJ8QT", "cmdLineSyntax not provided", options2, "cmdLineSyntax not provided", true);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("l", "(xeKV}.");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.addOption("", "-", true, "KKA");
      options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("l", options1, false);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "\n");
      options0.toString();
      options1.hasOption("bIH?Ozk&S9snqH+");
      options1.hasShortOption("");
      options1.hasShortOption("--");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.printHelp("Ja_.kBzoZ&f5(&Lob!", "Ja_.kBzoZ&f5(&Lob!", options1, "Ja_.kBzoZ&f5(&Lob!", true);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer(",MIDBB03C");
      int int0 = 1690;
      int int1 = (-2108);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1690, (-2108), "' was specified but an option from this group ");
      StringBuffer stringBuffer2 = helpFormatter0.renderOptions(stringBuffer1, 1690, options0, 1690, 1690);
      // Undeclared exception!
      try { 
        stringBuffer2.delete(74, (-2108));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      options0.hasOption(" ");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getOptions();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp((-1), ",w<5a#L,D98.7B(N*", "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", options1, "", false);
      helpFormatter0.printHelp("]", options1, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2945, (-1), "QO");
      mockPrintWriter0.append((CharSequence) stringBuffer1, 1, 2);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1847, "org.apache.commons.cli.ParseException", "]", options1, 77, 87, "", false);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setArgName("_`q-.hZ=<t%y89)Rh");
      Option option0 = new Option((String) null, true, "arg");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      Options options3 = options2.addOption((String) null, true, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (String) null, options3, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Options options0 = new Options();
      options0.toString();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ] [ long ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2726, (String) null, "[ Options: [ short java.util.HashMap@0000000002 ] [ long {} ]", options1, 19, (-445), "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ",w<5a#L,D98.7B(N\\52";
      Options options0 = new Options();
      options0.toString();
      options0.hasOption(" ");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getOptions();
      options0.addOptionGroup(optionGroup0);
      boolean boolean0 = false;
      int int0 = (-1);
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "", "", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (-437), "|Q2/?{9", "|Q2/?{9", options1, 31, (-437), "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "b_[#xR`PX'[";
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "The option '");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options0.helpOptions();
      options0.toString();
      options0.hasShortOption("'");
      helpFormatter0.printHelp(" pq`", "xiM5y\"=t0", options2, " ", true);
      helpFormatter0.setOptPrefix("org.apache.commons.cli.Util");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding((-1));
      helpFormatter1.setWidth(1);
      helpFormatter0.getOptionComparator();
      helpFormatter1.createPadding(1);
      helpFormatter1.rtrim("AOO;r^*");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", true, " ");
      options0.addOption(option0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "", "", options0, 9, (-1), "y`-S'2]d-C/P\"x", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "b_[#xR`PX'[";
      helpFormatter0.setWidth(1027);
      helpFormatter0.defaultLeftPad = 1027;
      helpFormatter0.rtrim("I<)uH");
      helpFormatter0.setWidth(3723);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "-");
      Option option0 = new Option("", " ?sQ");
      options1.addOption(option0);
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_PREFIX;
      options0.hasOption(" ");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getOptions();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp((-1), ",w<5a#L,D98.7B(N*", "--", options1, "", false);
      helpFormatter0.printHelp("]", options1, false);
      StringWriter stringWriter0 = new StringWriter(1);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 2945, (-1), "QO");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-1574), " ", "usage: ", options0, (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "b_[#xR`PX'[";
      Options options0 = new Options();
      Option option0 = new Option("", false, "arg");
      options0.addOption(option0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 76, "/?#", "", options0, 76, 1847, "b_[#xR`PX'[", true);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "I)[^S2YkfvJ8QT";
      String string1 = "cmdLineSyntax not provided";
      Options options0 = new Options();
      Option option0 = new Option("", "<");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.defaultLongOptPrefix = "";
      Option option1 = new Option("", true, "");
      helpFormatter0.defaultDescPad = (-1);
      optionGroup0.addOption(option1);
      option0.setRequired(true);
      Options options2 = options1.addOptionGroup(optionGroup0);
      String string2 = " pq`";
      options2.helpOptions();
      options2.toString();
      options2.hasShortOption(" pq`");
      optionGroup0.setRequired(true);
      options2.getOptions();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("I)[^S2YkfvJ8QT", "cmdLineSyntax not provided", options2, "cmdLineSyntax not provided", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("[ Options: [ short ");
      helpFormatter0.setNewLine("[ Options: [ short ");
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append('}');
      stringWriter1.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 703, 1047, "org.apache.commons.cli.HelpFormatter$1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      options0.hasOption(" ");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getOptions();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-824), ",w<5a#L,D98.7B(N*", "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", options1, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "b_[#xR`PX'[";
      helpFormatter0.setWidth(1027);
      helpFormatter0.defaultLeftPad = 1027;
      helpFormatter0.rtrim("I<)uH");
      helpFormatter0.setWidth(3736);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "--", false, " ?sQ");
      Option option0 = new Option("", " ?sQ");
      options1.addOption(option0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ?sQ");
      helpFormatter0.printHelp(" ", options0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("[ Options: [ short ");
      helpFormatter0.setNewLine("NO_ARGS_ALLOWED");
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append('D');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      stringBuffer0.ensureCapacity(74);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2548), (-2548), "[ Options: [ short ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Options options0 = new Options();
      options0.toString();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine(":");
      Options options1 = new Options();
      Option option0 = new Option((String) null, "-", true, "--");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup1 = new OptionGroup();
      options2.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(106, "org.apache.commons.cli.OptionGroup", ":", options1, "org.apache.commons.cli.OptionGroup");
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      options0.hasOption(" ");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getOptions();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp((-1), ",w<5a#L,D98.7B(N*", "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", options1, "", false);
      helpFormatter0.printHelp("]", options1, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2945, (-1), "QO");
      mockPrintWriter0.append((CharSequence) stringBuffer1, 1, 2);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "]";
      helpFormatter0.getWidth();
      String string0 = null;
      String string1 = "--";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("-", "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1702;
      helpFormatter0.defaultLeftPad = 1702;
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printHelp("[ Options: [ short ", "org.apache.commons.cli.HelpFormatter", options0, "org.apache.commons.cli.HelpFormatter");
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.HelpFormatter");
      helpFormatter0.createPadding(1702);
      options0.getOptions();
      helpFormatter0.setWidth((-149));
      helpFormatter0.createPadding(32);
      helpFormatter0.setLeftPadding((-1));
      options0.hasShortOption((String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "ze` J", options0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "b_[#xR`PX'[";
      helpFormatter0.setWidth(1027);
      helpFormatter0.defaultLeftPad = 1027;
      helpFormatter0.rtrim("I<)uH");
      helpFormatter0.setWidth(3736);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer("b_[#xR`PX'[");
      helpFormatter0.renderWrappedText(stringBuffer0, 1027, 13, " | ");
      helpFormatter0.setOptPrefix("\"vR\"L>a\"wMmYk");
      helpFormatter0.getOptionComparator();
      helpFormatter0.setLeftPadding(34);
      helpFormatter0.setDescPadding(975);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "b_[#xR`PX'[";
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "The option '");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("IW*Y:a-Op", options1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "b_[#xR`PX'[";
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "The option '");
      options0.addOption(option0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 291, "org.apache.commons.cli.OptionGroup", "The option '", options0, (-1), 18, "/?#", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Options options0 = new Options();
      options0.toString();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ] [ long ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2, "[ Options: [ short java.util.HashMap@0000000002 ] [ long {} ]", "[ Options: [ short java.util.HashMap@0000000002 ] [ long {} ]", options0, (-2), 2726, "[", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(2);
      Options options0 = new Options();
      options0.toString();
      options0.hasOption("-");
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "fx[BmN);6CKXr";
      helpFormatter0.setArgName("fx[BmN);6CKXr");
      helpFormatter0.defaultDescPad = 32;
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printHelp("/F", "", options0, ">2wS$)s.I92R");
      helpFormatter0.setSyntaxPrefix(">2wS$)s.I92R");
      int int0 = 230;
      helpFormatter0.createPadding(230);
      options0.getOptions();
      helpFormatter0.setWidth((-149));
      options0.helpOptions();
      options0.toString();
      options0.hasShortOption("--");
      options0.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", " pq`", options0, "/F", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 1702;
      helpFormatter0.setLongOptSeparator("[ Options: [ short ");
      helpFormatter0.setNewLine("NO_ARGS_ALLOWED");
      Options options0 = new Options();
      Option option0 = new Option("", "", false, "l;E$1hAD");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.getOptionGroups();
      helpFormatter0.printHelp(1702, "org.apache.commons.cli.OptionGroup", "[ Options: [ short ", options2, "' was specified but an option from this group ");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 13, (-1027), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("u a4TcXBq`]]%", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "u a4TcXBq`]]%");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      String string0 = null;
      helpFormatter0.printWrapped(printWriter0, 123, (-4697), "u a4TcXBq`]]%");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockFileOutputStream0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter2, 1, (-2287), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "b_[#xR`PX'[";
      helpFormatter0.setWidth(1027);
      helpFormatter0.defaultLeftPad = 1027;
      helpFormatter0.rtrim("I<)uH");
      helpFormatter0.setWidth(3736);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "--", false, " ?sQ");
      Option option0 = new Option("", " ?sQ");
      options1.addOption(option0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ?sQ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2), options1, 2286, 50);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2834);
      helpFormatter0.defaultWidth = (-2834);
      helpFormatter0.setLeftPadding((-2834));
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      String string0 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      String string1 = "[ARG...]";
      Option option0 = null;
      try {
        option0 = new Option("[ARG...]", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '[ARG...]' contains an illegal character : '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setSyntaxPrefix(" ~WHGI`%k-21");
      helpFormatter0.setLongOptSeparator("");
      int int0 = (-3313);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-3313));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",2>SF1}Zwjg^'");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",2>SF1}Zwjg^'");
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim(",2>SF1}Zwjg^'");
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.defaultWidth = 9;
      helpFormatter0.setLongOptSeparator("I4");
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.findWrapPos("\"", 1816, 1816);
      helpFormatter0.getArgName();
      helpFormatter0.setLongOptPrefix("I4");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getArgName();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      helpFormatter0.printHelp("cmdLineSyntax not provided", options0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "~SW\\G";
      Options options0 = new Options();
      int int0 = (-2257);
      helpFormatter0.setDescPadding((-2257));
      options0.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("~SWG", "~SWG", options0, "~SWG");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      String string0 = "n@i|N>518RaY9HbJ";
      MockFile mockFile0 = new MockFile((File) null, "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, (-1609), options0, (-432), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "b_[#xR`PX'[";
      helpFormatter0.setWidth(1027);
      helpFormatter0.defaultLeftPad = 1027;
      helpFormatter0.rtrim("I<)uH");
      helpFormatter0.setWidth(3736);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "--", false, " ?sQ");
      Option option0 = new Option("", false, "I<)uH");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", " ] [ long ", options2, "\\(^T;oy~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("fx[BmN);6CKXr");
      String string0 = ">2wS$)s.I92R";
      helpFormatter0.defaultDescPad = 32;
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printHelp("/F", "", options0, ">2wS$)s.I92R");
      helpFormatter0.setSyntaxPrefix(">2wS$)s.I92R");
      int int0 = 230;
      helpFormatter0.createPadding(230);
      options0.getOptions();
      helpFormatter0.setWidth((-149));
      int int1 = 2679;
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-149));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(2);
      Options options0 = new Options();
      options0.toString();
      options0.hasOption("-");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getOptions();
      options0.addOptionGroup(optionGroup0);
      boolean boolean0 = false;
      // Undeclared exception!
      helpFormatter0.printHelp(1, "Dm+", "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", options0, "  ", false);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ]");
      PrintWriter printWriter0 = mockPrintWriter0.append('}');
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "b:cN#l6M", options0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(2);
      Options options0 = new Options();
      options0.toString();
      options0.hasOption("-");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getOptions();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(2, ",w<5a#L,D98.7B(N*", "  ", options1, ",w<5a#L,D98.7B(N*", false);
      helpFormatter0.printHelp("[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", options1, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ] [ long ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "arg", (-2), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2;
      helpFormatter0.createPadding(2);
      String string0 = ",w<5a#L,D98.7B(N\\52";
      Options options0 = new Options();
      options0.toString();
      options0.hasOption("-");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getOptions();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(2, ",w<5a#L,D98.7B(N*", "  ", options1, ",w<5a#L,D98.7B(N*", false);
      helpFormatter0.printHelp("[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", options1, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ] [ long ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      int int1 = (-2);
      int int2 = 0;
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "arg", (-2), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "I)[^S2YkfvJ8QT";
      Options options0 = new Options();
      Option option0 = new Option("", "<");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.defaultLongOptPrefix = "";
      Option option1 = new Option("", true, "");
      helpFormatter0.defaultDescPad = (-1);
      optionGroup0.addOption(option1);
      option0.setRequired(true);
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.helpOptions();
      options2.toString();
      options2.hasShortOption(" pq`");
      options2.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("I)[^S2YkfvJ8QT", "cmdLineSyntax not provided", options2, "cmdLineSyntax not provided", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      String string0 = "\"BMEVlIN";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-119), (-4622), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      String string0 = "?[m&nh;2,";
      MockPrintStream mockPrintStream0 = new MockPrintStream("\n");
      int int0 = 615;
      // Undeclared exception!
      try { 
        mockPrintStream0.append((CharSequence) "arg", 615, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.setDescPadding(126);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = null;
      int int0 = 31;
      Options options0 = new Options();
      String string0 = null;
      helpFormatter0.setSyntaxPrefix((String) null);
      String string1 = "B.";
      Option option0 = new Option("arg", "B.");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options2.addOption("Zedjj!hI5-e )WV", false, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'Zedjj!hI5-e )WV' contains an illegal character : '!'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      int int0 = 3599;
      helpFormatter0.setLeftPadding(3599);
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.setWidth((-738));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-Mx5nUrD~'\"q9");
      String string0 = "Uh*Bm=lAQK7AuB";
      String string1 = "/.u`X'l9`#$>g%07~l";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "(xeKV}.");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.addOption("", "-", true, "KKA");
      options1.addOptionGroup(optionGroup0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 1702;
      helpFormatter0.setLongOptSeparator("[ Options: [ short ");
      helpFormatter0.setNewLine("NO_ARGS_ALLOWED");
      Options options0 = new Options();
      Option option0 = new Option("", "", false, "l;E$1hAD");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(1702, "org.apache.commons.cli.OptionGroup", "[ Options: [ short ", options2, "' was specified but an option from this group ");
      helpFormatter0.getOptionComparator();
      assertEquals("[ Options: [ short ", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1));
      String string0 = "<";
      helpFormatter0.setArgName("<");
      helpFormatter0.createPadding(0);
      helpFormatter0.setNewLine("<");
      helpFormatter0.findWrapPos("<", 0, 74);
      helpFormatter0.getLeftPadding();
      String string1 = "EPp'Ea^pW[v";
      Options options0 = new Options();
      Option option0 = new Option("", true, "-");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        options1.addOption("-", false, "L3f_Y;s4tp!Jr");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "xvKDO^C";
      helpFormatter0.defaultNewLine = "xvKDO^C";
      String string1 = "";
      StringBuffer stringBuffer0 = new StringBuffer("");
      int int0 = (-578);
      Options options0 = new Options();
      int int1 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-578), options0, (-140), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("L:1");
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-531));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("7R2 @r+c5#Cz4rLM^W", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("2)Oh5xjQjuKB");
      int int0 = 0;
      String string0 = "org.apache.commons.cli.OptionGroup";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", false, ";zB@t9Sd*H80>6id#%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.rtrim("");
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("", string0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "org.apache.commons.cli.HelpFormatter";
      helpFormatter0.getDescPadding();
      helpFormatter0.setDescPadding(3);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(13);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
      Locale.lookup(linkedList0, list0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) filterOutputStream0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) list0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, " ", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printOptions(printWriter0, 0, options0, 0, 0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      
      helpFormatter0.setWidth(0);
      assertEquals(0, helpFormatter0.defaultWidth);
  }
}
