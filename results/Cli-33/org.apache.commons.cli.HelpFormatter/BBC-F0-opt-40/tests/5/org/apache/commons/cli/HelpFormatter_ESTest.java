/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 08 08:39:46 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.net.URI;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      mockPrintWriter0.write("--");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, "7TS=6ZcJ'q{8!g");
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1, (-2), "--");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("vf");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("-", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      option0.setArgName("");
      helpFormatter0.defaultLeftPad = (-2);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "l ,ib_r:Z;HURP1zBR", "arg", options0, "l ,ib_r:Z;HURP1zBR", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("--");
      helpFormatter0.printHelp(" ", " ", options0, " ");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 34, 34);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", " ", options0, " ");
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 137, "arg", "", options0, 137, 137, "3Kp^,");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator("");
      StringBuffer stringBuffer0 = new StringBuffer("--");
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 97, options0, 97, 606);
      helpFormatter0.renderWrappedText(stringBuffer1, 10, 10, "line.separator");
      StringBuffer stringBuffer2 = new StringBuffer((CharSequence) " ");
      Option option0 = new Option("arg", true, "0BF:~R\u0006T'NtIbO");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      helpFormatter0.defaultDescPad = (-3189);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", "\n", options0, "--");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      option0.setArgName("");
      options1.addOption("", true, "arg");
      helpFormatter0.printHelp((-1), "l ,ib_r:Z;HURP1zBR", "arg", options0, "l ,ib_r:Z;HURP1zBR", true);
      int int0 = helpFormatter0.defaultLeftPad;
      helpFormatter0.getLeftPadding();
      helpFormatter0.getArgName();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = helpFormatter1.defaultSyntaxPrefix;
      helpFormatter1.findWrapPos("{Z='#0$n4e$s", 1, 1);
      helpFormatter0.rtrim("hcoPmd%zB1qH<2z/o");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("l ,ib_r:Z;HURP1zBR");
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      option0.setArgName("");
      options1.addOption("", true, "arg");
      helpFormatter0.printHelp((-1), "l ,ib_r:Z;HURP1zBR", "3TJl1XkY&", options0, "l ,ib_r:Z;HURP1zBR", true);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getArgName();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = helpFormatter1.defaultSyntaxPrefix;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[ Options: [ short ");
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, (-734), "", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      boolean boolean0 = false;
      String string0 = " ";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1866, "", " ", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = new Option("arg", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) " ");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      String string0 = "";
      Options options1 = options0.addOption("", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2), options1, 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      File file0 = MockFile.createTempFile("arg", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      mockPrintWriter0.print(0.0);
      PrintWriter printWriter0 = mockPrintWriter0.append('!');
      String string0 = "P(H#rV;:";
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, "P(H#rV;:");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      Option option0 = new Option("", (String) null, false, "-");
      helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", (String) null, options0, "");
      int int0 = helpFormatter0.defaultWidth;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("e(:/>,+Cmx6,J`");
      Options options1 = options0.addOption((String) null, false, "");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 83, "sw", "", options0, 0, 10, "", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int1 = 1361;
      String string0 = "org.apache.commons.cli.HelpFormatter";
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", options1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options0 = new Options();
      Options options1 = options0.addOptionGroup(optionGroup1);
      option0.setArgName("--");
      options1.addOption("arg", false, "-");
      helpFormatter0.printHelp(13, "G+m^9 EV f\"XWLkiX^", "", options1, "G+m^9 EV f\"XWLkiX^", true);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getArgName();
      String string0 = helpFormatter0.defaultSyntaxPrefix;
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("l ,ib_r:Z;HURP1zBR");
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      option0.setArgName("k");
      options1.addOption("", true, "arg");
      helpFormatter0.printHelp((-1), "l ,ib_r:Z;HURP1zBR", "3TJl1XkY&", options0, "l ,ib_r:Z;HURP1zBR", false);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getArgName();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = helpFormatter1.defaultSyntaxPrefix;
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", "1");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object object0 = new Object();
      Options options0 = new Options();
      Options options1 = new Options();
      Options options2 = new Options();
      Options options3 = options2.addOption("", true, "");
      options3.hasShortOption("arg");
      helpFormatter0.printHelp("1", "1", options3, "");
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "x?CE");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("l ,ib_r:Z;HURP1zBR");
      Options options0 = new Options();
      Option option0 = new Option("arg", "--", true, "--");
      helpFormatter0.printHelp("cUcsWxs", "", options0, "=[}#?V8,");
      MockFile mockFile0 = new MockFile("vl]/OJ~5mZ", "#>(\"+/+h'T=%c+");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 313, "+$~].P", (String) null, options0, 91, (-1014), "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "m/M&D(Zy`;oY6";
      MockFile mockFile0 = new MockFile("usage: ");
      mockFile0.mkdir();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.getCanonicalFile();
      mockFile0.mkdir();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      int int0 = (-2178);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, (-2178), "m/M&D(Zy`;oY6");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      Option option0 = new Option("arg", "-", false, (String) null);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "^Cea", false, "usage: ");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp("1?F#K?Q';pW%HB!Sok", "`KWNU0#N.t'", options2, "*(!^IMX!'S");
      MockFile mockFile0 = new MockFile("#>(\"+/+h'T=%c+", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = 14;
      String string1 = ".<";
      // Undeclared exception!
      try { 
        options1.addOption("T?}2uJAY", (String) null, true, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'T?}2uJAY' contains an illegal character : '?'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      Options options0 = new Options();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      options1.getMatchingOptions("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printHelp(1, "-", (String) null, options1, "dvs");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1866);
      helpFormatter0.getArgName();
      String string0 = helpFormatter0.defaultArgName;
      String string1 = helpFormatter0.defaultLongOptPrefix;
      helpFormatter0.findWrapPos("", 3, 1866);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "");
      options1.addOption("arg", true, "f1UgQ");
      helpFormatter0.printHelp("o~S*Q/!up'X <DIcQQ", "fW", options0, "");
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.createPadding(74);
      String string0 = helpFormatter0.defaultLongOptPrefix;
      helpFormatter0.rtrim("_})X&2,YKxzXV)=");
      Options options0 = new Options();
      helpFormatter0.printHelp("cWHD5zJ", "_})X&2,YKxzXV)=", options0, "cWHD5zJ");
      helpFormatter0.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      options0.addOption("arg", true, "arg");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1866, "                                                                          ", "--", options0, 54, 1866, "                                                                          ", false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 34, "--", " 6YHCZMJ-r)rr", options0, 1866, 1866, " 6YHCZMJ-r)rr");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-1469);
      String string0 = "line.separator";
      Options options0 = new Options();
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("<S\"5K4F?v=qZA|`1tNQ", "line.separator", options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("--");
      Options options0 = new Options();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "usage: ");
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("(l0Mt");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter("usage: ");
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter2, 110, "");
      helpFormatter0.rtrim("Zt");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 74, "--");
      // Undeclared exception!
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter2, 0, 3, "--");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.getOptPrefix();
      String string0 = helpFormatter0.defaultLongOptPrefix;
      helpFormatter0.rtrim("_})X&2,YKxzXV)=");
      Options options0 = new Options();
      helpFormatter0.printHelp("cWHD5zJ", "_})X&2,YKxzXV)=", options0, "cWHD5zJ");
      helpFormatter0.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "fM0h!^hB~0", true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.defaultOptPrefix = "--";
      int int0 = 58;
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "Fr2l", "", options0, (-958), 58, "Fr2l", true);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 97, 97, "");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.rtrim("_})X&2,YKxzXV)=");
      Options options0 = new Options();
      helpFormatter0.printHelp("cWHD5zJ", "_})X&2,YKxzXV)=", options0, "cWHD5zJ");
      helpFormatter0.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "cWHD5zJ");
      Option option0 = new Option((String) null, "fM0h!^hB~0", true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.defaultOptPrefix = "--";
      String string0 = "Fr2l";
      String string1 = "-";
      int int0 = (-958);
      int int1 = 22;
      boolean boolean0 = true;
      Options options1 = new Options();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "", options1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.ensureCapacity(15);
      MockFile mockFile0 = new MockFile("", "--");
      File file0 = MockFile.createTempFile("QeRfFS[VP?b'R9`", "usage: ", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Object object0 = new Object();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 15, "QeRfFS[VP?b'R9`", options2);
      OptionGroup optionGroup1 = new OptionGroup();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.getOptPrefix();
      String string0 = helpFormatter0.defaultLongOptPrefix;
      helpFormatter0.rtrim("_})X&2,YKxzXV)=");
      Options options0 = new Options();
      helpFormatter0.printHelp("cWHD5zJ", "_})X&2,YKxzXV)=", options0, "cWHD5zJ");
      helpFormatter0.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "fM0h!^hB~0", true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.defaultOptPrefix = "--";
      int int0 = 58;
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "Fr2l", "", options0, (-958), 58, "Fr2l", true);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.ensureCapacity(15);
      Option option0 = new Option("l", "usage: ");
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", true, (String) null);
      String string0 = " ] [ long ";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 64, " ] [ long ", "l", options2, 54, (-2), "l", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      Options options0 = new Options();
      helpFormatter0.getSyntaxPrefix();
      Options options1 = new Options();
      MockFile mockFile0 = new MockFile(" ", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1330), "cmdLineSyntax not provided", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("l ,ib_r:Z;HUP1zBR");
      Options options0 = new Options();
      Option option0 = new Option("arg", "--", true, "--");
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", (String) null, options0, "l ,ib_r:Z;HUP1zBR");
      helpFormatter0.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("l ,ib_r:Z;HUP1zBR");
      Options options1 = options0.addOption("arg", true, "[");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, "_!i|6Py8Fa!jfR", "[", options1, 2190, 1, "l ,ib_r:Z;HUP1zBR", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 4, "l ,ib_r:Z;HUP1zBR", "Cannot add val{e, list full.", options1, 2190, (-1763), "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedInputStream pipedInputStream0 = new PipedInputStream(1100);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Options options0 = new Options();
      Option option0 = new Option("", false, "-");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("arg", true, "Zxay");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2, (String) null, "x;_QvQ4VIKJN>FAi?]", options3, 1100, 1100, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.ensureCapacity(32);
      Option option0 = new Option("l", "usage: ");
      Options options0 = new Options();
      helpFormatter0.printHelp("Y&u{zK{qK6,n/", "Fp'|Zxm$G @", options0, "");
      helpFormatter0.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("A\"|FdQrja%");
      Options options1 = options0.addOption("", true, "Mh ^F?q");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 44, "usage: ", "", options1, 0, 1, "Fp'|Zxm$G @", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1594), "cWHD5zJ", "", options0, (-1594), 1, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1866;
      helpFormatter0.setLeftPadding(1866);
      helpFormatter0.getArgName();
      helpFormatter0.getOptPrefix();
      String string0 = helpFormatter0.defaultLongOptPrefix;
      helpFormatter0.rtrim("_})X&2,YKxzXV)=");
      Options options0 = new Options();
      helpFormatter0.printHelp("cWHD5zJ", "_})X&2,YKxzXV)=", options0, "cWHD5zJ");
      helpFormatter0.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      options0.addOption("arg", true, "arg");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1866, "-", "--", options0, 54, 1866, "-", false);
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, ".BJv[v", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, (-1385), options0, 1866, 2097);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.rtrim(",7)9)?az&DW9q ~1f-");
      Options options0 = new Options();
      helpFormatter0.getSyntaxPrefix();
      Options options1 = new Options();
      MockFile mockFile0 = new MockFile("--", "5d.EVyi39{Ty!M>#8");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "usage: ";
      objectArray0[1] = (Object) stringBuffer0;
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) ",7)9)?az&DW9q ~1f-";
      objectArray0[4] = (Object) stringBuffer0;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) options0;
      objectArray0[7] = (Object) ",7)9)?az&DW9q ~1f-";
      objectArray0[8] = (Object) ",7)9)?az&DW9q ~1f-";
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "?TB=7^i|", objectArray0);
      helpFormatter0.printUsage(printWriter0, 64, "?TB=7^i|", options0);
      String string0 = "G3hW-u<#~XgF|I";
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option(" ", " ", false, "G3hW-u<#~XgF|I");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1866;
      helpFormatter0.setLeftPadding(1866);
      helpFormatter0.getArgName();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getNewLine();
      helpFormatter0.findWrapPos("", 3, 1156);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.lookup(linkedList0, linkedList1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter("--");
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter2, 1866, " ?`mb&zn;MO`b|,p!", " ?`mb&zn;MO`b|,p!", options0, 2371, 1866, " ?`mb&zn;MO`b|,p!");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 3, "-", "org.apache.commons.cli.ParseException", options1, 2951, (-1), "   ", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      helpFormatter0.setArgName("");
      String string0 = ", ";
      helpFormatter0.setArgName(", ");
      helpFormatter0.setNewLine("");
      int int0 = 34;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 34, 6, "G)P/!AkD4b*F<");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      Options options0 = new Options();
      helpFormatter0.getSyntaxPrefix();
      Options options1 = new Options();
      Option option0 = new Option("arg", "--");
      Options options2 = new Options();
      Options options3 = options2.addOption("", false, (String) null);
      helpFormatter0.printHelp(64, "G3h-u<#~XgF|I", "", options3, "", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 64, options3, 64, 64);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      Options options0 = new Options();
      Option option0 = new Option("arg", "--", true, "--");
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", (String) null, options0, "");
      MockFile mockFile0 = new MockFile("#>(\"+/+h'T=%c+", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.print((Object) null);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1431, "#>(\"+/+h'T=%c+", "U,1G", options0, 648, 1973, "org.apache.commons.cli.HelpFormatter$1");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 9, "mw", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      Options options0 = new Options();
      Option option0 = new Option("arg", "--", true, "--");
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", (String) null, options0, "");
      MockFile mockFile0 = new MockFile("#>(\"+/+h'T=%c+", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 208, (String) null, "Cannot add value, list full.", options0, (-2686), (-2686), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1866);
      helpFormatter0.getArgName();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getNewLine();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.findWrapPos("-", (-366), 1866);
      helpFormatter0.findWrapPos("", (-1), 1156);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.lookup(linkedList0, linkedList1);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "/&`$Ig";
      objectArray0[2] = (Object) "\n";
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) linkedList1;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("\n");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "usage: ");
      helpFormatter1.printWrapped(printWriter0, 3, "\n");
      helpFormatter0.rtrim("usage: ");
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 976, options0, 26, 3);
      helpFormatter0.renderOptions((StringBuffer) null, 3, options0, 976, 74);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      Options options0 = new Options();
      helpFormatter0.getSyntaxPrefix();
      Options options1 = new Options();
      Options options2 = options0.addOption("", false, "G3hW-u<#~XgF|I");
      helpFormatter0.printHelp("m.DNckc1+_8D3S=", "^1elS0N\"e\"P;#]", options2, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter1.printOptions(mockPrintWriter0, 15, options2, 110, 110);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      Options options0 = new Options();
      Option option0 = new Option("arg", "--", true, "--");
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", (String) null, options0, "");
      MockFile mockFile0 = new MockFile("#>(\"+/+h'T=%c+", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 91, "#>(\"+/+h'T=%c+", "", options0, 111, 2, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Option option0 = new Option("", "usage:I");
      option0.clearValues();
      stringBuffer0.append((Object) option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(4407, "   ", "", (Options) null, "   ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 60, (-1), " ]");
      helpFormatter0.defaultLeftPad = 60;
      Options options0 = new Options();
      Option option0 = new Option("", "org.apache.commons.cli.Option");
      Options options1 = options0.addOption(option0);
      option0.getValues();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 74, 60, "arg");
      helpFormatter0.renderWrappedText(stringBuffer1, (-1), (-517), "");
      option0.setArgs(3);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      helpFormatter0.printHelp("ysmEh>5u%z\"EUd0[\"}", "B", options0, "org.apache.commons.cli.Option");
      MockFile mockFile0 = new MockFile("org.apache.commons.cli.Option", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = new Locale("\n", "ysmEh>5u%z\"EUd0[\"}");
      Locale locale1 = locale0.stripExtensions();
      PrintWriter printWriter0 = mockPrintWriter0.format(locale1, "", (Object[]) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 16, "usage: ");
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1), "tH0&ne:2F", "", options1, (-248), 1, "--", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("--");
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter1.printHelp("-", options0);
      Option option0 = new Option((String) null, false, " ");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("[A8E>t_Ml+uyg", 10, (-2));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 60, (-1), " ]");
      helpFormatter0.defaultLeftPad = 60;
      Options options0 = new Options();
      Option option0 = new Option("", "org.apache.commons.cli.Option");
      Options options1 = options0.addOption(option0);
      option0.getValues();
      StringBuffer stringBuffer2 = helpFormatter0.renderOptions(stringBuffer1, 60, options1, 60, 60);
      helpFormatter0.renderWrappedText(stringBuffer2, (-1), (-517), "");
      option0.setArgs(3);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      helpFormatter0.printHelp("ysmEh>5u%z\"EUd0[\"}", "B", options0, "org.apache.commons.cli.Option");
      MockFile mockFile0 = new MockFile("org.apache.commons.cli.Option", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options2 = options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("%U|B[ii%9N\"$U04!4", "usage: ", options2, "");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter1.createPadding(60);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "arg", "%U|B[ii%9N\"$U04!4", options0, 2627, 3, "org.apache.commons.cli.OptionValidator", false);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      stringBuffer0.ensureCapacity(32);
      Option option0 = new Option("", "usage: ");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "");
      helpFormatter0.printHelp(64, " | ", "", options1, "MOoha-", true);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 109, 1, "arg");
      StringBuffer stringBuffer2 = helpFormatter0.renderOptions(stringBuffer1, 3958, options0, 1, 111);
      helpFormatter0.setLongOptSeparator("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) stringBuffer2;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) stringBuffer2;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-109), 1, "ehj");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.ensureCapacity(32);
      Option option0 = new Option("", "usage: ");
      option0.getValues();
      option0.clearValues();
      stringBuffer0.append((Object) option0);
      Options options0 = new Options();
      helpFormatter0.printHelp("usage: ", "usage: ", options0, "OOce&TM7R}uO~7");
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter$OptionComparator");
      File file0 = MockFile.createTempFile("hz$mWVRf d;JEdM", "--", (File) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-1), options0, 246, (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      Options options0 = new Options();
      Option option0 = new Option("arg", "--", true, "--");
      helpFormatter0.printHelp("[ Options: [ short ", (String) null, options0, "");
      MockFile mockFile0 = new MockFile("3tJ(x2}D}J", "psApt[86Wbd");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1405), "a^F", "psApt[86Wbd", options0, 173, 0, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim(">");
      Options options0 = new Options();
      Option option0 = new Option("arg", "--", true, "--");
      options0.addOption(option0);
      helpFormatter0.printHelp(">", (String) null, options0, ">");
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter$OptionComparator");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 60, (-1), " ]");
      helpFormatter0.defaultLeftPad = 60;
      Options options0 = new Options();
      Option option0 = new Option("", "org.apache.commons.cli.Option");
      Options options1 = options0.addOption(option0);
      option0.getValues();
      StringBuffer stringBuffer2 = helpFormatter0.renderOptions(stringBuffer1, 60, options1, 60, 60);
      helpFormatter0.renderWrappedText(stringBuffer2, (-1), (-517), "");
      option0.setArgs(3);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      helpFormatter0.printHelp("ysmEh>5u%z\"EUd0[\"}", "B", options0, "org.apache.commons.cli.Option");
      MockFile mockFile0 = new MockFile("org.apache.commons.cli.Option", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = new Locale("\n", "ysmEh>5u%z\"EUd0[\"}");
      Locale locale1 = locale0.stripExtensions();
      String string0 = "";
      mockPrintWriter0.format(locale1, "", (Object[]) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 16, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getWidth();
      String string0 = "jAM-Yp23kpk";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("jAM-Yp23kpk");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("-", objectArray0);
      int int0 = 2677;
      Options options0 = new Options();
      options0.hasLongOption("usage: ");
      mockPrintWriter0.println(0L);
      options0.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 2677, "", "jAM-Yp23kpk", options0, 74, 64, "jAM-Yp23kpk", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1866);
      helpFormatter0.getArgName();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getNewLine();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.findWrapPos("-", (-366), 1866);
      helpFormatter0.findWrapPos("", (-1), 1156);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.lookup(linkedList0, linkedList1);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "/&`$Ig";
      objectArray0[2] = (Object) "\n";
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) linkedList1;
      objectArray0[5] = (Object) linkedList1;
      objectArray0[6] = (Object) linkedList1;
      objectArray0[7] = (Object) comparator0;
      objectArray0[8] = (Object) uRI0;
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "/&`$Ig", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 3, "\n");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("y/q&$4:Kjl");
      Options options0 = new Options();
      Option option0 = new Option((String) null, "\n", false, "--");
      option0.clearValues();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      StringBuffer stringBuffer1 = stringBuffer0.append((Object) "--");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, (-2), (-2474), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.ensureCapacity(32);
      Option option0 = new Option("", "usage: ");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "");
      helpFormatter0.printHelp(64, " | ", "", options1, ">UeFeMF}%Lg}F@v2Zt", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderOptions(stringBuffer0, (-1), options0, 3, 1);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 109, 1, "arg");
      StringBuffer stringBuffer2 = helpFormatter1.renderOptions(stringBuffer1, 3958, options0, 1, 111);
      options0.hasLongOption("06+lGXP$n");
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer2, (-1042), 74, " :: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 60, (-1), " ]");
      helpFormatter0.defaultLeftPad = 60;
      Options options0 = new Options();
      Option option0 = new Option("", "org.apache.commons.cli.Option");
      Options options1 = options0.addOption(option0);
      option0.getValues();
      StringBuffer stringBuffer2 = helpFormatter0.renderOptions(stringBuffer1, 60, options1, 60, 60);
      helpFormatter0.renderWrappedText(stringBuffer2, (-1), (-517), "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer3 = helpFormatter1.renderWrappedText(stringBuffer2, 60, (-517), " ]");
      helpFormatter0.renderOptions(stringBuffer0, 871, options0, 1562, 44);
      options0.hasLongOption("arg");
      StringBuffer stringBuffer4 = new StringBuffer(stringBuffer3);
      helpFormatter0.renderWrappedText(stringBuffer4, 34, 44, "-");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("[ Options: [ short ", "arg", options1, "G");
      helpFormatter0.printHelp("L$Ayb7966QmQf|^'it", "--", options0, "G", false);
      helpFormatter1.getNewLine();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.ensureCapacity(32);
      Option option0 = new Option("", "usage: ");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      option0.clearValues();
      StringBuffer stringBuffer1 = stringBuffer0.append((Object) "D;/==u;wdk!\"\"y%paI");
      helpFormatter1.renderWrappedText(stringBuffer1, 29, 1023, "   ");
      helpFormatter1.getLongOptPrefix();
      helpFormatter1.getWidth();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.ensureCapacity(32);
      Option option0 = new Option("", "usage: ");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "");
      helpFormatter0.printHelp(64, " | ", "", options1, ">UeFeMF}%Lg}F@v2Zt", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderOptions(stringBuffer0, (-1), options0, 3, 1);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 109, 1, "arg");
      StringBuffer stringBuffer2 = helpFormatter1.renderOptions(stringBuffer1, 3958, options0, 1, 111);
      options0.hasLongOption("06+lGXP$n");
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer2, (-1042), 74, " :: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1866);
      helpFormatter0.getArgName();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getNewLine();
      helpFormatter0.findWrapPos("", 3, 1156);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.lookup(linkedList0, linkedList1);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      objectArray0[2] = (Object) "\n";
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) linkedList1;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("\n");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      mockPrintWriter0.append((CharSequence) "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1789), "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      helpFormatter0.getSyntaxPrefix();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "\n");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-176), 0, "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("--");
      Options options0 = new Options();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "usage: ");
      helpFormatter0.printHelp("\n", " ", options0, "--");
      helpFormatter0.setLongOptSeparator("org.apaVhe.com9onsccli.HelpFormatter$OptionCompara8or");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim((String) null);
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("usage: ", "Cannot add value, list full.", true, "-Wv4BqHU@gm.6$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "abT1";
      Options options0 = new Options();
      helpFormatter0.printHelp(1376, "abT1", "", options0, "V`W", false);
      Options options1 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", options1, false);
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.setNewLine("org.apache.commons.cli.HelpFormatter");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(false);
      optionGroup0.setRequired(true);
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", (String) null, options2, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 60, (-1), " ]");
      helpFormatter0.defaultLeftPad = 60;
      Options options0 = new Options();
      Option option0 = new Option("", "org.apache.commons.cli.Option");
      option0.getValues();
      helpFormatter0.renderOptions(stringBuffer1, 60, options0, 60, 60);
      helpFormatter0.printHelp("ysmEh>5u%z\"EUd0[\"}", "B", options0, "org.apache.commons.cli.Option");
      helpFormatter0.printHelp(60, "org.apache.commons.cli.Option", "R+P?%Yqu", options0, "O'P");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 60, (-1), " ]");
      helpFormatter0.defaultLeftPad = 60;
      Options options0 = new Options();
      Option option0 = new Option("", "org.apache.commons.cli.Option");
      Options options1 = options0.addOption(option0);
      option0.getValues();
      StringBuffer stringBuffer2 = helpFormatter0.renderOptions(stringBuffer1, 60, options1, 60, 60);
      helpFormatter0.renderWrappedText(stringBuffer2, (-1), (-517), "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      helpFormatter0.printHelp("ysmEh>5u%z\"EUd0[\"}", "B", options0, "org.apache.commons.cli.Option");
      MockFile mockFile0 = new MockFile("org.apache.commons.cli.Option", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1405), "E+", "", options0, (-244), 0, "o:9om+h`&", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "abT1";
      String string1 = "M";
      Options options0 = new Options();
      helpFormatter0.printHelp(1376, "abT1", "M", options0, "", false);
      Options options1 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", options1, false);
      String string2 = null;
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.setNewLine("org.apache.commons.cli.HelpFormatter");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(false);
      Option option0 = new Option((String) null, " :: ");
      options0.addOption(option0);
      option0.getValues();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      Options options2 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, (-2), options2, 1376, 1376);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1376, (-2), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      Options options0 = new Options();
      MockPrintStream mockPrintStream0 = new MockPrintStream("L_kW3$r|ZZ?");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "L_kW3$r|ZZ?";
      objectArray0[1] = (Object) mockPrintStream0;
      mockPrintWriter0.printf(locale0, "", objectArray0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 10, "WN8");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "abT1";
      Options options0 = new Options();
      helpFormatter0.printHelp(1376, "abT1", "", options0, "", false);
      Options options1 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", options1, false);
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.setNewLine("org.apache.commons.cli.HelpFormatter");
      String string1 = "";
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(false);
      optionGroup0.setRequired(true);
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (String) null, options2, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-1);
      helpFormatter0.renderWrappedText(stringBuffer0, 60, (-1), " ]");
      helpFormatter0.defaultLeftPad = 60;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      options0.addOptionGroup(optionGroup0);
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, " :: ", options0, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.ensureCapacity(29);
      Option option0 = new Option("BJZ", "e[b%U6@Y{O~a/");
      option0.clearValues();
      StringBuffer stringBuffer1 = stringBuffer0.append((Object) "");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, (-1202), 0, "BJZ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 60, (-1), " ]");
      helpFormatter0.defaultLeftPad = 60;
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp(60, " ]", " ]", options0, "org.apache.commons.cli.Option", true);
      MockFile mockFile0 = new MockFile("--", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('e');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 1276, "BW");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-1);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 679, 2692, "O),u");
      Options options0 = new Options();
      Option option0 = new Option("", "arg");
      options0.addOption(option0);
      option0.getValues();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, (-1), options0, (-1), 2692);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-1);
      helpFormatter0.renderWrappedText(stringBuffer0, 73, 679, "");
      Options options0 = new Options();
      Option option0 = new Option((String) null, "arg");
      Option option1 = null;
      try {
        option1 = new Option("zIh+C.", false, "zIh+C.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'zIh+C.' contains an illegal character : '+'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      Options options0 = new Options();
      helpFormatter0.getSyntaxPrefix();
      Options options1 = new Options();
      Options options2 = options0.addOption("", false, "G3hW-u<#~XgF|I");
      Options options3 = new Options();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)84;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.printHelp("a0UGF|OT'", "", options2, " ] [ long ", false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.getOptionComparator();
      helpFormatter0.setOptionComparator((Comparator) null);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(114);
      helpFormatter0.getNewLine();
      helpFormatter0.getSyntaxPrefix();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "\n");
      stringWriter1.getBuffer();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "-", 2, 114);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 60, (-1), " ]");
      helpFormatter0.defaultLeftPad = 60;
      Options options0 = new Options();
      Option option0 = new Option("", "org.apache.commons.cli.Option");
      Options options1 = options0.addOption(option0);
      option0.getValues();
      StringBuffer stringBuffer2 = helpFormatter0.renderOptions(stringBuffer1, 60, options1, 60, 60);
      helpFormatter0.renderWrappedText(stringBuffer2, (-1), (-517), "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      helpFormatter0.printHelp("ysmEh>5u%z\"EUd0[\"}", "B", options0, "org.apache.commons.cli.Option");
      MockFile mockFile0 = new MockFile("org.apache.commons.cli.Option", "arg");
      helpFormatter0.printHelp("ysmEh>5u%z\"EUd0[\"}", " ]", options0, (String) null, true);
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1376;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 0, (-568), "<");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Options options0 = new Options();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.printHelp("a0UGF|OT'", "\"6GKxj!k#VVvM/=j}", options0, "a0UGF|OT'", false);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.HelpFormatter";
      String string1 = "M";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1376, "", "M", options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 60, (-1), " ]");
      helpFormatter0.defaultLeftPad = 60;
      Options options0 = new Options();
      Option option0 = new Option("", "org.apache.commons.cli.Option");
      Options options1 = options0.addOption(option0);
      option0.getValues();
      StringBuffer stringBuffer2 = helpFormatter0.renderOptions(stringBuffer1, 60, options1, 60, 60);
      helpFormatter0.renderWrappedText(stringBuffer2, (-1), (-517), "");
      helpFormatter0.printHelp("ysmEh>5u%z\"EUd0[\"}", "B", options0, "org.apache.commons.cli.Option");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      Options options0 = new Options();
      Option option0 = new Option("arg", "--", true, "--");
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (String) null, options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Locale locale0 = Locale.CANADA_FRENCH;
      mockPrintWriter0.print(false);
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) locale0;
      mockPrintWriter0.format(locale0, "-", objectArray0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1355, "2'fNi(Ybm");
      helpFormatter0.setArgName("2'fNi(Ybm");
      helpFormatter0.setLongOptPrefix("GjxNq.X");
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.ensureCapacity(32);
      Option option0 = new Option("", "usage: ");
      option0.clearValues();
      Options options0 = new Options();
      boolean boolean0 = true;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      // Undeclared exception!
      helpFormatter1.printHelp(1, "D;/==u;wdk!\"\"y%paI", "-", options1, "-", true);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      helpFormatter0.getOptionComparator();
      helpFormatter0.setLeftPadding(6);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.Option");
      int int0 = (-1028);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1028));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("qpI7?E");
      helpFormatter0.setWidth((-2238));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", " ", options0, "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getLeftPadding();
      String string0 = "ru(TNY`orc*J";
      helpFormatter0.setSyntaxPrefix("ru(TNY`orc*J");
      String string1 = "I!Z$Je%k";
      int int0 = 776;
      int int1 = 464;
      helpFormatter0.setWidth(464);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1919));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      mockPrintWriter0.append((CharSequence) "--");
      String string0 = "k#wJ-.QE#*1xD";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("-", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = false;
      Option option0 = null;
      try {
        option0 = new Option("--", "-Aee3!koVG=c.O^1XX", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 1845;
      helpFormatter0.setOptPrefix("f~5+C");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      int int0 = 0;
      int int1 = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-1), " ]");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "abT1";
      Options options0 = new Options();
      helpFormatter0.printHelp(1376, "abT1", "M", options0, "", false);
      Options options1 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", options1, false);
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.setNewLine("org.apache.commons.cli.HelpFormatter");
      String string1 = "";
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(false);
      optionGroup0.setRequired(true);
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (String) null, options2, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      String string0 = helpFormatter0.defaultSyntaxPrefix;
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      int int0 = 10;
      String string1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 10, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " | ";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-734), "0)gmk@=_3)6nKITZl_", " | ", options0, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "-");
      Option option0 = new Option("arg", "--", true, "--");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("V9*Q}~B|q", "V9*Q}~B|q", options2, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("org.apache.commons.cli.HelpFormatter");
      String string0 = "%?;&+oOrx";
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option("org.apache.commons.cli.OptionGroup", true, "r,xW# 494w>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.OptionGroup' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.defaultArgName = "";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      mockPrintWriter0.checkError();
      mockPrintWriter0.print(1365.8744583854848);
      mockPrintWriter0.checkError();
      mockPrintWriter0.println(1);
      String string0 = "&";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-38), "&");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Locale locale0 = Locale.CANADA_FRENCH;
      mockPrintWriter0.print(false);
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) locale0;
      mockPrintWriter0.format(locale0, "-", objectArray0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1355, "2'fNi(Ybm");
      Options options0 = new Options();
      helpFormatter0.printHelp("nxw9gR4q+Yu@4Q0$", options0);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      String string0 = "org.apache.commons.cli.HelpFormatter";
      Options options0 = new Options();
      options0.hasOption("VZ/^I<\"B0]JP1");
      String string1 = "&E_\\.a";
      String string2 = " ]";
      String string3 = "B~$?;j=";
      String string4 = "";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      int int1 = 2082;
      helpFormatter0.renderWrappedText(stringBuffer0, 2082, 2082, "&E_.a");
      // Undeclared exception!
      try { 
        options0.addOption("6%D)J4", true, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '6%D)J4' contains an illegal character : '%'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getArgName();
      String string0 = "usage: ";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      int int0 = (-3653);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-3653));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.ensureCapacity(32);
      String string0 = "usage: ";
      Option option0 = new Option("", "usage: ");
      option0.clearValues();
      stringBuffer0.append((Object) option0);
      int int0 = 0;
      String string1 = "\"s";
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "\"s");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      MockFile mockFile0 = new MockFile("");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }
}
