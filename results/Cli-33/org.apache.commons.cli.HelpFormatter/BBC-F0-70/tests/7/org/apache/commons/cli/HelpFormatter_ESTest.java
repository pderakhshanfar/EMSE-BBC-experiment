/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:04:25 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 74, "\n");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, ":RQ|lJ23W9", ":RQ|lJ23W9", options0, 3615, 3615, (String) null, true);
      Option option0 = new Option((String) null, "arg");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "Ul||WFij)4ai:5ZLQ8", (String) null, options1, 3615, 0, " E Jd");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-695);
      helpFormatter0.defaultDescPad = (-695);
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", options0, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "+<W.C0F&Wk";
      helpFormatter0.setOptPrefix(" ");
      File file0 = MockFile.createTempFile("+<W.C0F&Wk", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('t');
      int int0 = 20;
      String string1 = "--";
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 20, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-1012), 2194, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Options options0 = new Options();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "usage: ");
      optionGroup0.addOption(option0);
      Option option1 = new Option("arg", " ", true, "usage: ");
      optionGroup0.addOption(option1);
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("z", "z", options1, "z", true);
      helpFormatter0.findWrapPos("z", (-2), 219);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      Options options0 = new Options();
      helpFormatter0.printHelp("\n", "\n", options0, "\n");
      helpFormatter0.printHelp("arg", "arg", options0, "arg");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption("7", false, " :: ");
      options1.addOption("", true, "");
      helpFormatter0.printHelp("--", "", options0, " :: ", false);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "usage: ", true, "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options0 = new Options();
      Options options1 = options0.addOption(option0);
      Options options2 = options0.addOption(option0);
      options2.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("' was specified but an option from this group ", "usage: ", options1, "[ARG...]", true);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PrintWriter printWriter0 = null;
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, 3, "-");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 27, (String) null, " ", options0, 3, 3, "$Q#zUaC|", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      helpFormatter0.setLeftPadding((-179));
      helpFormatter0.getLeftPadding();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.rtrim("[");
      helpFormatter0.rtrim("usage: ");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptionComparator();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.findWrapPos("nN::&}pa>On^!'", 3, 9);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      options0.toString();
      helpFormatter1.printHelp("arg", "arg", options0, "arg", false);
      helpFormatter1.getLongOptSeparator();
      options0.hasLongOption("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 12, "usage: ", "--", options0, 9, 3, "[ Options: [ short java.util.HashMap@0000000006 ] [ long {} ]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PrintWriter printWriter0 = null;
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 0, 2, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PrintWriter printWriter0 = null;
      int int0 = 0;
      Options options0 = new Options();
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)93;
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, ",4j", ",4j", options0, (int) (byte)93, 2, ",4j");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, (String) null);
      Options options2 = options1.addOption("", true, "line.separator");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3558, (String) null, options2);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "arg", true, "5Yx@");
      option0.addValueForProcessing("arg");
      helpFormatter0.setLeftPadding((-1277));
      option0.setValueSeparator('-');
      optionGroup0.addOption(option0);
      optionGroup0.setRequired(true);
      optionGroup0.toString();
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("]kSe)Yys/I`&iq3bv", "5Yx@", options0, "]kSe)Yys/I`&iq3bv", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Options options0 = new Options();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      options0.getOptionGroups();
      Option option0 = new Option("", "arg", true, "5Yx@");
      option0.addValueForProcessing("arg");
      option0.setValueSeparator('-');
      OptionGroup optionGroup1 = new OptionGroup();
      optionGroup0.toString();
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption((String) null, false, "-");
      helpFormatter1.printHelp(" ", "wXflV&^mk{h", options1, "", true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getOptionComparator();
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "D %E.lHjBUwrX";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 160, "D %E.lHjBUwrX");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-2618);
      Options options0 = new Options();
      Option option0 = new Option("", " ");
      Options options1 = options0.addOption(option0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      option0.setDescription("bAD[,ihM6");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" [ARG]", "a],-", options1, "=r-i+irnxA-", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOption("", true, "-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-320), "]`6gMoioD+o", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.HelpFormatter";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", " ", options0, " ");
      helpFormatter0.getOptionComparator();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      StringWriter stringWriter0 = new StringWriter();
      options0.toString();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, " ", "-", options0, 1, 1, "usage: ", false);
      String string0 = helpFormatter0.defaultNewLine;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-3685), "\n", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("", " ", false, "org.apache.commons.cli.HelpFormatter");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2612), "ls;CA", "ls;CA", options3, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "--");
      Option option0 = new Option("arg", "usage: ", true, "usage: ");
      options1.addOption(option0);
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", "org.apache.commons.cli.HelpFormatter$1", options1, "JJ5k4H5TF5Ly[ADa.e", true);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2, "", "", options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOption("", true, "-");
      helpFormatter0.setWidth((-2023));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("IMBm;D", "c<MaoN;w", options0, "c<MaoN;w", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "Illegal option name '";
      helpFormatter0.getWidth();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      mockFileOutputStream0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      StringWriter stringWriter0 = new StringWriter();
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1352, "Illegal option name '", "Illegal option name '", options0, (-957), (-1683), (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 10;
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-1357), "arg", "--", options0, "^~x'4}8=^", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", " ", options0, " ");
      helpFormatter0.getOptionComparator();
      Options options1 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter0.format("usage: ", (Object[]) null);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, " ", "-", options0, 1, 1, "usage: ", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderOptions((StringBuffer) null, 3172, options0, 8, 3);
      helpFormatter0.renderOptions((StringBuffer) null, 2, options0, 63, 3);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, (-1), "*wrCRf", options0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("", true, "-");
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      String string0 = helpFormatter3.defaultOptPrefix;
      // Undeclared exception!
      try { 
        helpFormatter3.findWrapPos("--", 3, (-693));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", " ", options0, " ");
      helpFormatter0.getOptionComparator();
      Options options1 = new Options();
      String string0 = ":#";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":#");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter0);
      PrintWriter printWriter0 = mockPrintWriter1.format("--", (Object[]) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 2, ":#", ":#", options1, (-2020), 76, ":#", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.findWrapPos("nN::&}pa>On^!'", 3, 9);
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter1.renderWrappedText(stringBuffer0, 1, 12, "\n");
      helpFormatter1.getLongOptSeparator();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      Options options1 = options0.addOption((String) null, true, "<oJOS]>");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 38, "I5d", "--", options1, 74, 74, "\n");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", " ", options0, " ");
      helpFormatter0.getOptionComparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options0.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("kW", true, "\n");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp(".T)#A", " ", options0, "--");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-541), options3, 74, 64);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.findWrapPos("--", 3, 3);
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(1, " ", "oZ+o_[{48nR99IH0p", options0, "--", true);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.findWrapPos("nN::&}pa>On^!'", 3, 9);
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      options0.getOptions();
      String string0 = "[";
      helpFormatter1.printHelp("--", "[", options0, "]");
      helpFormatter1.renderWrappedText(stringBuffer0, 1, 12, "\n");
      Options options1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(13, "'", "arg", (Options) null, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "usage: ");
      Options options1 = options0.addOption(option0);
      options1.getOptions();
      helpFormatter0.printHelp("\n", "\n", options1, (String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((String) null, " ", options1, "--", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("arg", "org.apache.commons.cli.Util");
      Options options0 = new Options();
      Options options1 = options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(" ", "L *9=l-u[!3i}Zo+]ZP", options0, "");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('1');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 13, 3, "--");
      helpFormatter1.renderWrappedText(stringBuffer1, (-1), 32, "arg");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter1.printHelp("G(;", "arg", options1, "!v} Y<>{Yks]]5;yq", true);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.findWrapPos("nN::&}pa>On^!'", 3, 9);
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter1.printHelp("--", "[", options0, "]");
      helpFormatter1.renderWrappedText(stringBuffer0, 1, 12, "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1740, "usage: ", " ", options0, 2776, 83, "]YP", false);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("|P*H", "arg", options1, "arg");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 74, 32, "arg");
      StringBuffer stringBuffer2 = helpFormatter0.renderOptions(stringBuffer1, 3, options1, 74, 74);
      stringBuffer1.append(stringBuffer2);
      helpFormatter1.renderWrappedText(stringBuffer1, 74, (-1012), "arg");
      helpFormatter1.printHelp("arg", "arg", options1, "\n", false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", " | ");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp(52, "-", "7fu5", options1, "C -XiWt%");
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      option0.setOptionalArg(false);
      helpFormatter0.printHelp("LkGMd", "-", options1, "C -XiWt%");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 1, options0, 2, 1442);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", " | ");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp(52, "-", "7fu5", options1, "C -XiWt%");
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\"");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1206), "r{", ":_", options1, 1, 1, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", " ", options0, " ");
      helpFormatter0.getOptionComparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter0.format("usage: ", (Object[]) null);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, " ", "-", options0, 44, 44, "usage: ", false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 117, "-", "--", options0, 74, 1, "", false);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", " ", options0, " ");
      helpFormatter0.getOptionComparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter0.format("usage: ", (Object[]) null);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, " ", "-", options0, 44, 44, "usage: ", false);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter1, (-1), "*wrC]f", options0);
      helpFormatter0.rtrim("--");
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.findWrapPos("nN::&}pa>On^!'", 3, 9);
      StringBuffer stringBuffer0 = new StringBuffer("\n");
      Options options0 = new Options();
      options0.getOptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      String string0 = "?qkt=";
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format("?qkt=", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      mockPrintWriter1.format(";Jg6@YkNf|~v", objectArray0);
      // Undeclared exception!
      helpFormatter1.printHelp(printWriter0, 1, ",l`Cn,$gK)(0", "[", options0, 44, (-651), "-", true);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.findWrapPos("nN::&}pa>On^!'", 3, 74);
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter1.printHelp("--", "[", options0, "]");
      helpFormatter1.renderWrappedText(stringBuffer0, 1, (-1), "");
      String string0 = "&(";
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.rtrim("");
      MockFile mockFile0 = new MockFile("{G,v5e!eU", "#-Ww^R;=+sGuF7h%XGW");
      MockFile mockFile1 = new MockFile(mockFile0, "--");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "", (File) mockFile1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-13));
      helpFormatter0.findWrapPos("Wr&YtpOz'r0S3", 1973, 1973);
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Wr&YtpOz'r0S3", "", options0, "cmdLineSyntax not provided");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", " | ");
      Options options1 = options0.addOption(option0);
      option0.setArgs(1);
      helpFormatter0.printHelp(52, "-", "7fu5", options1, "C -XiWt%");
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      helpFormatter1.printHelp(4, "--", " ", options0, "", true);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(9);
      helpFormatter0.findWrapPos("Wr&YtpOz'r0S3", 1973, 1973);
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      options0.addOption("", true, (String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("cmdLineSyntax not provided", "Go&13aThF(L)J4VX:S", options0, "-");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer1 = new StringBuffer(3);
      helpFormatter1.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", " ", options0, " ");
      helpFormatter0.getOptionComparator();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 3, options0, 40, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", " ", options0, " ");
      helpFormatter0.getOptionComparator();
      options0.hasShortOption("/I6KDag-0w");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter0.format("usage: ", (Object[]) null);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, " ", "-", options0, 44, 44, "usage: ", false);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(9);
      helpFormatter0.findWrapPos("Wr&YtpOz'r0S3", 1973, 1973);
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      helpFormatter0.printHelp("Wr&YtpOz'r0S3", "", options0, "cmdLineSyntax not provided");
      StringBuffer stringBuffer1 = new StringBuffer();
      StringBuffer stringBuffer2 = new StringBuffer(2);
      helpFormatter0.getLongOptPrefix();
      Options options1 = new Options();
      helpFormatter0.setArgName("Wr&YtpOz'r0S3");
      Option option0 = new Option("jbbY", "w,N/=C~nQ", true, "");
      option0.setRequired(false);
      options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("arg", options0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(9);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)100;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("arg");
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = new StringBuffer(0);
      helpFormatter1.getLongOptPrefix();
      Options options0 = new Options();
      Option option0 = new Option("jbbY", "--", true, "");
      Options options1 = options0.addOption(option0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setArgName("arg");
      helpFormatter2.printHelp("arg", options1);
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, 51, options1, 51, (-3453));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(9);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)100;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("arg");
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = new StringBuffer(0);
      helpFormatter1.getLongOptPrefix();
      Options options0 = new Options();
      Option option0 = new Option("jbbY", "--", true, "");
      Options options1 = options0.addOption(option0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("arg", options1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", " ", options0, " ");
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.printHelp("usage: ", "usage: ", options0, "usage: ");
      helpFormatter0.setLongOptSeparator("V2(?{v6A@");
      helpFormatter0.getLeftPadding();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(1);
      // Undeclared exception!
      helpFormatter1.printHelp("arg", "arg", options0, "--", true);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale.forLanguageTag("cmdLineSyntax not provided");
      Object object0 = new Object();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("C}=otIATnj^Y=|p8d_");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("");
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter2, 7, "ls!pE4(c", options0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.printHelp("usage: ", "I5r$28bLZg}", options0, " ", false);
      helpFormatter1.printHelp("`2:T8C*{xwdH);{z", options0, true);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("-", 7, 1263);
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale.forLanguageTag("-");
      Object object0 = new Object();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("C}=otIATnj^Y=|p8d_");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter2, 7, "ls!pE4(c", options0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printOptions(mockPrintWriter2, 887, options0, 74, 3);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("-", 7, 1263);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer1, 13, (-1), "s;r0)j>)sMD%+");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("hb$[E+&");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale.forLanguageTag("");
      Object object0 = new Object();
      options0.hasShortOption("");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("{ *wf*");
      mockPrintWriter1.print(1534.8602686296);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter1, 0, "org.apache.commons.cli.Option", options0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 1263, 44);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", " ", options0, " ");
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.printHelp("usage: ", "usage: ", options0, "usage: ");
      helpFormatter0.setLongOptSeparator("V2(?{v6A@");
      helpFormatter0.getLeftPadding();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 22, 74, "trKKzB{A>kM`>kl.");
      helpFormatter1.printHelp("arg", "arg", options0, "--", true);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((String) null, options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("[DmY>$!IlM.|6s", 7, 1263);
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale.forLanguageTag("cmdLineSyntax not provided");
      Object object0 = new Object();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("C}=otIATnj^Y=|p8d_");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter2, 7, "ls!pE4(c", options0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer1 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 74, (String) null, " ", options0, 34, 1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("usage: ", 1973, 1973);
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("!");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.forLanguageTag("/y035");
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "-", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 18, "usage: ", options0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      helpFormatter0.renderWrappedText(stringBuffer0, (-1), (-1), "!");
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)121;
      byteArray0[6] = (byte)121;
      byteArray0[7] = (byte)115;
      byteArray0[8] = (byte) (-128);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("C<ZN&dp");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter1.renderWrappedText(stringBuffer0, 63, 0, "--");
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      Option option0 = new Option("arg", "-", false, "C<ZN&dp");
      Options options1 = options0.addOption(option0);
      helpFormatter1.printHelp("--", options1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("Wr&YtpOz'r0S3", 1973, 1973);
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("!");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.forLanguageTag("/y035");
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "-", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, (-1), "/y035", options0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 32, "c~Z", "*ezxU!6`$r- @toC%8", options0, 1973, 122, (String) null);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", " ", options0, " ");
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.printHelp("usage: ", "usage: ", options0, "usage: ");
      helpFormatter0.printHelp("cmdLineSyntax not provided", "23~tR|3i8e", options0, "");
      StringWriter stringWriter0 = new StringWriter(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-9), "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1725), (-1725), "`BRtzOgH");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "J";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("J", "", (Options) null, "J", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 2;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2, "ssb", "DKajxHI(OB#am6L", (Options) null, ", ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Wr&\\Yt\\pOz'r0S3";
      int int0 = 1973;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Wr&YtpOz'r0S3", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("-", 7, 1263);
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale.forLanguageTag("-");
      Object object0 = new Object();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("C}=otIATnj^Y=|p8d_");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("=-r<I6*!O,XegL");
      MockPrintWriter mockPrintWriter3 = new MockPrintWriter(mockFileOutputStream0, true);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter4 = new MockPrintWriter(stringWriter0);
      mockPrintWriter4.format("N-_?$!|^@xK", (Object[]) null);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter2, 1, "", "--", options0, 1263, 3, "l", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[6];
      mockPrintWriter0.print((long) 3);
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "<";
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "<", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      mockPrintWriter0.write("usage: ", 1, 3);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 861, "XRt~N");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 861, "T", options0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLeftPadding(861);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("-", "<", options0, "B,l,;{9");
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter1, 861, "");
      helpFormatter1.getOptionComparator();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("l");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockFileOutputStream0, true);
      PrintWriter printWriter1 = mockPrintWriter2.format("]$nS45BzF|<y", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter1, 3, "", "-", options0, (-1831), 22, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('');
      helpFormatter0.printWrapped(printWriter0, 1103, 1103, "uO=x1N*fyR8IO91uyJ");
      // Undeclared exception!
      try { 
        stringBuffer0.insert(74, (CharSequence) "-", 74, 115);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset 74
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("'j#jH{o0#.__::/g");
      Options options0 = new Options();
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      boolean boolean1 = true;
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.forLanguageTag("pWZM");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "/y035";
      objectArray0[2] = (Object) "!";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "'j#jH{o0#.__::/g", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter2, (-1608), "pWZM", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1973;
      helpFormatter0.findWrapPos("Wr&YtpOz'r0S3", 1973, 1973);
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      options0.getOption("--");
      options0.getOption("]");
      int int1 = 266;
      helpFormatter0.printHelp(266, "' was specified but an option from this group ", "p;*P/4}", options0, "p;*P/4}");
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 63, " ");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("Wr&YtpOz'r0S3", 1973, 1973);
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("!");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.forLanguageTag("/y035");
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "-", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 18, "Wr&YtpOz'r0S3", options0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 1973, options0, 3012, 3);
      helpFormatter0.renderWrappedText(stringBuffer1, (-1), 3, "5w;!B2");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "\n";
      PrintWriter printWriter0 = null;
      int int0 = 2342;
      helpFormatter0.defaultLeftPad = 2342;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", "", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte) (-124);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte)92;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (byte)109, 15, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("arg", "arg");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1), "line.separator");
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-356));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      byteArray0[0] = (byte) (-124);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte)92;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding((-7));
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", true, "-");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("-", "--", options2, "--");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[6];
      mockPrintWriter0.print((long) 3);
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "<";
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "<", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      mockPrintWriter0.write("usage: ", 1, 3);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 861, "XRt~N");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 861, "T", options0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("arg", (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLeftPadding(861);
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.printHelp(357, "]", "T", options0, "<");
      helpFormatter0.printUsage(printWriter0, 1698, "", options0);
      helpFormatter0.setDescPadding(0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(88);
      helpFormatter0.defaultSyntaxPrefix = "                                                                                        ";
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option((String) null, "E0");
      Options options2 = options1.addOption(option0);
      int int0 = 74;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 88, options2, 74, 74);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)121;
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte)92;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter1.renderWrappedText(stringBuffer0, 0, 0, "s;r0)j>)sMD%+");
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "]";
      options0.getOption("]");
      String string1 = "p;*P/4}";
      options0.getOption("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1243, "", "", options0, "p;*P/4}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.findWrapPos("nN::&}pa>On^!'", 3, 9);
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter1.printHelp("--", "[", options0, "]");
      helpFormatter1.renderWrappedText(stringBuffer0, 1, 12, "\n");
      helpFormatter0.printHelp("-", "", options0, "&(", true);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLongOptSeparator("Fm6JC'4<&UWr\"aLXNV");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getDescPadding();
      String string0 = "5;I&IqF-P5t,%4";
      helpFormatter0.setOptPrefix("5;I&IqF-P5t,%4");
      helpFormatter0.defaultLeftPad = 433;
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      String string1 = "";
      helpFormatter0.findWrapPos("", 1, 3);
      // Undeclared exception!
      try { 
        MockFile.createTempFile("--", "", (File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("[ARG...]", "[ARG...]", options0, "[ARG...]");
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.printHelp("[ARG...]", "[ARG...]", options0, "[ARG...]");
      helpFormatter0.setLongOptSeparator("[ARG...]");
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLongOptPrefix("3PychF&~d");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ": ,x>";
      helpFormatter0.setSyntaxPrefix(": ,x>");
      helpFormatter0.getLongOptSeparator();
      int int0 = 0;
      String string1 = "   ";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("\n", false, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 1036;
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1036, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      String string0 = "MR;gWAs/iXF/fOx^|=";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-1321), "MR;gWAs/iXF/fOx^|=");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-695);
      helpFormatter0.getLongOptPrefix();
      MockFile mockFile0 = new MockFile("usage: ");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-695), "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "@8\"z:Arl}ns\\";
      helpFormatter0.defaultOptPrefix = "@8\"z:Arl}ns";
      helpFormatter0.getDescPadding();
      helpFormatter0.setLeftPadding(3);
      String string1 = "$";
      String string2 = "B][#%<$-05";
      Options options0 = new Options();
      options0.hasOption("-");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("-", true, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOption("", true, "-");
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          HelpFormatter helpFormatter0 = new HelpFormatter();
          StringBuffer stringBuffer0 = new StringBuffer();
          String string0 = "s;r0\\)j>)sMD%+";
          // Undeclared exception!
          helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "s;r0)j>)sMD%+");
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("Wr&YtpOz'r0S3", 1973, 1973);
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("!");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.forLanguageTag("/y035");
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "-", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 18, "Wr&YtpOz'r0S3", options0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1973, options0, (-587), 3);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.optionComparator = null;
      helpFormatter0.defaultLongOptPrefix = "do<j^V>";
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setSyntaxPrefix("usage: ");
      String string0 = "vdgd\\a$L@xA=!f";
      helpFormatter0.setSyntaxPrefix("vdgda$L@xA=!f");
      helpFormatter0.setSyntaxPrefix("do<j^V>");
      helpFormatter0.findWrapPos("?C0z+yxa4,2h", 0, 0);
      String string1 = "";
      MockFile mockFile0 = new MockFile("", "--");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "usage: ";
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) "usage: ";
      objectArray0[3] = (Object) "do<j^V>";
      objectArray0[4] = (Object) null;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "do<j^V>", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      mockPrintWriter1.append('g');
      int int0 = (-2159);
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("usage: ", false, "M1l$b15B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "arg", true, "5Yx@");
      option0.addValueForProcessing("arg");
      option0.setValueSeparator('-');
      optionGroup0.addOption(option0);
      optionGroup0.toString();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("5Yx@", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('d');
      helpFormatter0.printUsage(printWriter0, (-1), "--", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "5Yx@", "--", options0, (-1), 10, "A:Ot@OirHu2V[r");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(1973, "k7ByMi55;R)+8l", "", options0, (String) null);
      helpFormatter0.printHelp("cmdLineSyntax not provided", "SO", options0, ";}PY9`%-A4:xKl");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printUsage((PrintWriter) null, 1, "--");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("'j#jH{o0#.__::/g");
      Options options0 = new Options();
      options0.getOption("-");
      options0.getOption("p;*P/4}");
      helpFormatter0.printHelp(169, "]", "' was specified but an option from this group ", options0, "");
      helpFormatter0.createPadding(1024);
      helpFormatter0.setNewLine("");
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg", 1, 3);
      helpFormatter0.printWrapped(printWriter0, 169, "'j#jH{o0#.__::/g");
      StringBuffer stringBuffer0 = new StringBuffer("]");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 509, 509, "");
      helpFormatter0.renderWrappedText(stringBuffer1, 509, (-1447), "'j#jH{o0#.__::/g");
      helpFormatter0.createPadding(169);
      helpFormatter0.printHelp("NMx63O8pzly,j", "p;*P/4}", options0, "*yw>");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte) (-124);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)115;
      byte byte0 = (byte)109;
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte)92;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", true, "-");
      helpFormatter1.printHelp("-", "--", options2, "--");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "Illegal option name '";
      helpFormatter0.getWidth();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "arg");
      option0.setArgs(10);
      option0.addValueForProcessing("");
      option0.setValueSeparator('Y');
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.toString();
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 74, "Illegal option name '", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Wr&\\Yt\\pOz'r0S3";
      helpFormatter0.findWrapPos("Wr&YtpOz'r0S3", 2014, 2014);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("--", "usage: ", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "!");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      int int0 = 1568;
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1568, "!");
      mockFileOutputStream0.write(0);
      int int1 = 0;
      char char0 = '^';
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 31, "", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("Wr&YtpOz'r0S3", 1973, 1973);
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("!");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.forLanguageTag("/y035");
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "-", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 18, "Wr&YtpOz'r0S3", options0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-2344), "*ezxU!6`$r- @toC%8", "Wr&YtpOz'r0S3", options0, 1973, (-1), "*ezxU!6`$r- @toC%8");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", " ", options0, " ");
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      helpFormatter1.setOptionComparator(comparator0);
      helpFormatter1.printHelp("-", "", options0, "--", true);
      helpFormatter1.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[6];
      mockPrintWriter0.print((long) 3);
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "<";
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "<", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      mockPrintWriter0.write("usage: ", 1, 3);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 861, "XRt~N");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 861, "T", options0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLeftPadding(861);
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.printHelp(357, "]", "T", options0, "<");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 357, "${<", "]", (Options) null, (-154), 357, "~( k60");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("'j#jH{o0#.__::/g");
      Options options0 = new Options();
      options0.getOption("-");
      options0.getOption("p;*P/4}");
      helpFormatter0.printHelp(169, "]", "' was specified but an option from this group ", options0, "");
      helpFormatter0.createPadding(1024);
      helpFormatter0.setNewLine("");
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg", 1, 3);
      helpFormatter0.printWrapped(printWriter0, 169, "'j#jH{o0#.__::/g");
      StringBuffer stringBuffer0 = new StringBuffer("]");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 509, 509, "");
      helpFormatter0.renderWrappedText(stringBuffer1, 509, (-1447), "'j#jH{o0#.__::/g");
      helpFormatter0.createPadding(169);
      helpFormatter0.printHelp("S5(", "", options0, "");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("Wr&YtpOz'r0S3", 1973, 1973);
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1973, options0, (-587), 3);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "<";
      helpFormatter0.setLongOptPrefix("<");
      String string1 = "]";
      helpFormatter0.setLongOptPrefix("]");
      helpFormatter0.defaultLongOptPrefix = "kqW51Ds)]|cn";
      helpFormatter0.setLeftPadding(317);
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("[", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", (Options) null, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 3;
      helpFormatter0.setWidth(3);
      String string0 = "P>F)fR!\"g1Ai";
      Options options0 = new Options();
      String string1 = "~@@ZUI,G/W4:";
      String string2 = "";
      Option option0 = null;
      try {
        option0 = new Option("~@@ZUI,G/W4:", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '~@@ZUI,G/W4:' contains an illegal character : '~'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      MockFile mockFile0 = new MockFile("arg", "--");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile1, "4tCWOV/,,N-q1XXP`f ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 4tCWOV/,,N-q1XXP`f 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[";
      helpFormatter0.setOptPrefix("[");
      helpFormatter0.getLongOptPrefix();
      String string1 = "";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(1, "-", "-", options0, "-");
  }
}
