/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:05:39 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.FileNotFoundException;
import java.io.ObjectOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = (-574);
      String string0 = "arg";
      String string1 = "Wf";
      String string2 = "";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("*6CcN782nJl>ryS/2");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 106, (String) null, (String) null, options0, 41, 41, "&?sAl`wF1^H<(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, "\n", "b-g6BNbPdU", options1, "--", true);
      helpFormatter1.printHelp("zD0u7k!?^^ ", "usage: ", options0, "R\"a-HMmmhcDx~}Y0@");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(1, "a", "a", options0, "a");
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("s", false, "tZGAc 6~X");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.setSyntaxPrefix("Cannot add value, list full.");
      MockPrintStream mockPrintStream0 = new MockPrintStream("#54hM>_Vo");
      mockPrintStream0.checkError();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 673, "#54hM>_Vo", options1);
      optionGroup1.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), " ", "", options1, "s", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-4437));
      helpFormatter0.getLongOptPrefix();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arg");
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLeftPadding();
      helpFormatter0.rtrim("_02xD07 -A1Mt.kl");
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 11;
      Options options0 = new Options();
      boolean boolean0 = false;
      Option option0 = null;
      try {
        option0 = new Option("-", "Y8=`", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      int int0 = (-2);
      String string0 = "Z$0c+VtU9!s[N>$OzEo";
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("s", false, "tZGAc 6~X");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      boolean boolean0 = true;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 2040, "#54hM>_Vo", "#54hM>_Vo", options0, (-2), 2040, "Z$0c+VtU9!s[N>$OzEo", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("s", false, "tZGAc 6~X");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 2040, "#54hM>_Vo", "#54hM>_Vo", options0, (-2), 2040, "Z$0c+VtU9!s[N>$OzEo", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("<]c");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-545), "[", "org.apache.commons.cli.AlreadySelectedException", options0, (-545), 4343, "org.apache.commons.cli.AlreadySelectedException");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "@8s1k$p");
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1453), "usage: ", "A$we", (Options) null, "A$we");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 19, "2-?l3X0", "2-?l3X0", options0, 19, 1, "{8GGS(H", true);
      Options options1 = new Options();
      String string0 = "02QW/O`:7r!o0;rWn~";
      int int0 = 1041;
      String string1 = "' contains an illegal character : '";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1041, "02QW/O`:7r!o0;rWn~");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("nA", true, " ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(3, " | ", "xqa<RgZ:mV\"k", options1, "-", true);
      helpFormatter1.getOptionComparator();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-449), options1, 2, 36);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setOptPrefix("R*FE)kjENP2hf;XIL3");
      helpFormatter0.printHelp(31, "i(b<-t%/Ws", "org.apache.commons.cli.AlreadySelectedException", options0, "", false);
      helpFormatter0.printHelp(31, "\"", "h*#T\nKp<o)R{l^8", options0, (String) null, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.renderOptions((StringBuffer) null, 7, options0, 108, 2);
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions((StringBuffer) null, 1, (Options) null, 74, (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Locale locale0 = Locale.KOREA;
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 0);
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer1, 0, 0, "3P E$_y#,*=7/");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "m");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-947), "usage: ", "-", options1, "EQL$pCJJF&:IZ-", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption((String) null, true, "/\tkfm+E*y&ex]t0");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(74, "-", "usage: ", options0, "-", true);
      helpFormatter1.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter1;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1970, (String) null, "--", options0, "b48/[qR0RnSqQ%ILc", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-3));
      Options options0 = new Options();
      options0.addOption("n", false, "]");
      options0.addOption("nA", false, "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(31, "nA", "]", options0, "]", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.rtrim("13{");
      helpFormatter0.defaultWidth = 2;
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getNewLine();
      helpFormatter0.findWrapPos("13{", 2, 2);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setWidth(0);
      String string0 = "EFz";
      Options options0 = new Options();
      String string1 = null;
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setOptionComparator((Comparator) null);
      // Undeclared exception!
      helpFormatter0.printHelp("usage: ", options0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(">G_WOX cZ;z", "cmdLineSyntax not provided", options0, "Nip<ikU", false);
      helpFormatter0.printHelp("owxd?gsgWI4", "|mv=s%<]:Xo{", options0, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 2009, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-2246);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getWidth();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), (String) null, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options0, (-266), (-1), "org.apache.commons.cli.OptionGroup", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption((String) null, false, "/\tkfm+E*y&ex]t0");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(74, "-", "usage: ", options0, "-", false);
      helpFormatter1.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 12, 12, " ");
      helpFormatter0.findWrapPos(" ", 12, 12);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption((String) null, " ", false, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 4975, ", ", "uFiP", options2, 4975, (-1), " ] [ long ", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-7));
      Options options0 = new Options();
      options0.addOption("", true, "y0J>*dlmsS%F(O");
      options0.addOption("nA", true, "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("y0J>*dlmsS%F(O", "", options0, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) " ";
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[4] = (Object) stringWriter0;
      objectArray0[5] = (Object) "c)[T9'xP\"EVw/y*!Q^";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, 0, "c)[T9'xP\"EVw/y*!Q^");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, (-1087), " ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "y0J>*dlmsS%F(O");
      options0.addOption("nA", true, "\n");
      helpFormatter0.printHelp("y0J>*dlmsS%F(O", "", options0, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp(74, "org.apache.commons.cli.AlreadySelectedException", "K", options1, "i(b<-t%/Ws", false);
      helpFormatter1.printHelp(26, "-", "Illegal option name '", options1, "-", true);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 33, "`vT");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      String string0 = "Ug9,:.NDLbuki1";
      helpFormatter0.setLongOptSeparator("Ug9,:.NDLbuki1");
      Options options0 = new Options();
      options0.hasLongOption("--");
      helpFormatter0.defaultArgName = "Ug9,:.NDLbuki1";
      helpFormatter0.setLeftPadding(0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 2293, "Ug9,:.NDLbuki1", "Ug9,:.NDLbuki1", options0, 2293, 2293, "Ug9,:.NDLbuki1", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "y0J>*dlmsS%F(O");
      options0.addOption("nA", true, "\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp(74, "org.apache.commons.cli.AlreadySelectedException", "K", options1, "i(b<-t%/Ws", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("D}HS2h?:s>");
      PrintWriter printWriter0 = mockPrintWriter0.append('P');
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped(printWriter0, (-62), 814, "has already been selected: '");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("-", "", options0, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 72, options0, 72, 72);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getDescPadding();
      helpFormatter0.setLeftPadding(0);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "y0J>*dlmsS%F(O");
      options0.addOption("nA", true, "\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp(74, "org.apache.commons.cli.AlreadySelectedException", "K", options1, "i(b<-t%/Ws", false);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.setArgName("");
      MockPrintStream mockPrintStream0 = new MockPrintStream("[ option: ");
      mockPrintStream0.println();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      // Undeclared exception!
      try { 
        helpFormatter3.printUsage((PrintWriter) mockPrintWriter0, (-2387), "<", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setOptPrefix("]");
      Options options1 = options0.addOption("", true, "");
      helpFormatter0.printHelp(1953, "\n", "]", options1, "", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-101), "", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append('M');
      stringWriter1.getBuffer();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 677, "usage: ", "", options0, 1, 9, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("nA", true, (String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp(1351, "nA", "arg", options1, "usage: ", true);
      helpFormatter1.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.getBuffer();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      options0.addOption("", false, "i7]bcT/[");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 677, "c)[T9'xP\"EVw/y*!Q^", "org.apache.commons.cli.OptionGroup", options0, 109, 0, "usage: ", true);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1);
      Options options0 = new Options();
      helpFormatter0.getDescPadding();
      helpFormatter0.setLeftPadding(4504);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      stringWriter1.getBuffer();
      Options options1 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1906), "Rg?", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      String string0 = "org.apache.commons.cli.OptionGroup";
      helpFormatter0.setWidth(0);
      // Undeclared exception!
      helpFormatter0.printHelp("org.apache.commons.cli.OptionGroup", "", (Options) null, "c)[T9'xP\"EVw/y*!Q^");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      Options options0 = new Options();
      options0.addOption("", false, "y0J>*d^sS%F(O");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.getBuffer();
      Options options1 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "g$E", options1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "' was specified but an option from this group ";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("UHV0$");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "' was specified but an option from this group ");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-3997), "UHV0$");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("line.separator");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 5, 5, " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("z)e!HE6<+Yl=%W^", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.rtrim("");
      helpFormatter0.getDescPadding();
      helpFormatter0.setLeftPadding(0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.getBuffer();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, (-1), (-1), "");
      int int0 = 0;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.append(1825);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1200), (-1200), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      Options options0 = new Options();
      Options options1 = options0.addOption("0FLO", true, "y0J>*dlmsS%F(O");
      options1.addOption("", " | ", true, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      doReturn(0).when(comparator0).compare(any(org.apache.commons.cli.Option.class) , any(org.apache.commons.cli.Option.class));
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.printHelp("org.apache.commons.cli.OptionGroup", options1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("nA", true, " ");
      Options options2 = options1.addOption("arg", "--", true, "*4@Z{vzJsjk$L3W,;r");
      helpFormatter0.printHelp(2, "[ARG...]", "[ARG...]", options2, "[ARG...]", true);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      helpFormatter0.rtrim("-");
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "--", true, "org.apache.commons.cli.HelpFormatter$1");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("--", "--", options0, "arg");
      helpFormatter0.getLeftPadding();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) options1;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) options0;
      objectArray0[4] = (Object) optionGroup0;
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) optionGroup1;
      objectArray0[7] = (Object) "-";
      objectArray0[8] = (Object) "";
      // Undeclared exception!
      try { 
        mockPrintStream0.format((String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Options options0 = new Options();
      helpFormatter0.getDescPadding();
      helpFormatter0.setLeftPadding(0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("cAB~$M$U", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('}');
      helpFormatter0.printHelp(printWriter0, 749, "V8^G->t|bn(dt$W;7V", " | ", options0, 3, 3, " ] [ long ", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringBuffer stringBuffer0 = new StringBuffer(1);
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 60, options0, 60, 63);
      options0.hasShortOption("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.printOptions(mockPrintWriter0, 44, options0, 65, 63);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("nA", true, " ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printHelp(1, "Cy+|\"P", "-", options0, "g]8", true);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      helpFormatter0.setLeftPadding(2026);
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptPrefix();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("R\"a-HMm4mhcDx~}Y#0@");
      int int0 = 5453;
      StringBuffer stringBuffer0 = new StringBuffer();
      int int1 = (-2435);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 2026, (-1), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setOptPrefix("]");
      Options options1 = options0.addOption("", true, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(1953, "\n", "eE6rkp3", options1, "", true);
      helpFormatter1.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Options options0 = new Options();
      helpFormatter0.getDescPadding();
      helpFormatter0.setLeftPadding(0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.getBuffer();
      Options options1 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, (String) null, options0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      Options options0 = new Options();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "t");
      Options options1 = options0.addOption("", true, "y0J>*dlmsS%F(O");
      Options options2 = options1.addOption("", " | ", true, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      Option option0 = new Option("", " | ");
      options1.helpOptions();
      Options options4 = options3.addOption(option0);
      Collection collection0 = new LinkedList<Integer>();
      helpFormatter0.printHelp("t", "t", options4, "t", true);
      helpFormatter0.setLeftPadding((-1378));
      helpFormatter0.defaultArgName = "usage: ";
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptPrefix();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("KK-i;Em~KhfM_gT");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 5453, (-2435), "H/g_*`hH[NmpG/sB<-");
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, (-2), "8F/?g&_6!QHg.mwP,");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "y0J>*dlmsS%F(O");
      Options options2 = options1.addOption("", " | ", true, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      Option option0 = new Option("", " | ");
      Options options4 = options3.addOption(option0);
      options4.getOptions();
      helpFormatter0.printHelp("t", "t", options4, "t", true);
      helpFormatter0.setLeftPadding((-1378));
      helpFormatter0.defaultArgName = "usage: ";
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptPrefix();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("KK-i;Em~KhfM_gT");
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 5453, (-2435), "H/g_*`hH[NmpG/sB<-");
      helpFormatter0.renderOptions(stringBuffer1, 5453, options0, 0, 0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("KSok+Gv[(Ec");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-2), options0, 5453, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("~mAm}~psC");
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix((String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(117, "=", "=", options0, "=", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 3, "a)QTt{Q!");
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Options options0 = new Options();
      helpFormatter0.getDescPadding();
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.getBuffer();
      Options options1 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-882), ";}N By5`Zz?R,", ";}N By5`Zz?R,", options0, 5453, 3, "org.apache.commons.cli.OptionGroup", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "y0J>*dlmsS%F(O");
      Options options2 = options1.addOption("", " | ", true, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      Option option0 = new Option("", " | ");
      Options options4 = options3.addOption(option0);
      options4.getOptions();
      helpFormatter0.printHelp("t", "t", options4, "t", true);
      helpFormatter0.setLeftPadding((-1378));
      helpFormatter0.defaultArgName = "usage: ";
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptPrefix();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("KK-i;Em~KhfM_gT");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      helpFormatter1.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, (-2), "Icldm,[7ru`\"q~]y");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("!*{@b?1e$~zu*.zS#");
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix(" ");
      helpFormatter0.printHelp(3, "!*{@b?1e$~zu*.zS#", "Ml!9Zc)R6zT5$f+P,", options0, "org.apache.commons.cli.HelpFormatter", true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 44, "org.apache.commons.cli.HelpFormatter$1", (String) null, options0, 44, 2289, " ", true);
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.append("");
      helpFormatter0.renderOptions(stringBuffer0, 2289, options0, 935, 74);
      StringBuffer stringBuffer1 = new StringBuffer("--");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(objectOutputStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-2630), "", " ", options0, (-2630), (-5077), "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      helpFormatter0.setDescPadding(0);
      Options options0 = new Options();
      helpFormatter0.getDescPadding();
      helpFormatter0.setLeftPadding(0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.getBuffer();
      Options options1 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "$^f-wDuHh(", "q", options1, 1, (-977), "I:0rUt", false);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("!*{@b?1e$~zu*.zS#");
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix(" ");
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptPrefix();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter0, false);
      int int0 = 5453;
      String string0 = "";
      Options options1 = options0.addOption("", false, "}vg3");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 3, "!*{@b?1e$~zu*.zS#", "Ml!9Zc)R6zT5$f+P,", options1, (-404), 3, "w&di~4+ul)pSl", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-3896);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-3896));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.setWidth(1);
      helpFormatter0.getLongOptPrefix();
      String string0 = "\"Cc+K@X(uZ%%+\"K";
      helpFormatter0.findWrapPos("\"Cc+K@X(uZ%%+\"K", (-1168), 1);
      Options options0 = null;
      helpFormatter0.getNewLine();
      String string1 = " FREg;OZyn";
      MockFile mockFile0 = new MockFile("usage: ", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = new Locale(" FREg;OZyn", "D#kZ`178 =Z");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) " FREg;OZyn";
      objectArray0[1] = (Object) "@";
      objectArray0[2] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "@", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, 1, (Options) null, (-3226), (-1168));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "y0J>*dlmsS%F(O");
      Options options2 = options1.addOption("", " | ", true, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      Option option0 = new Option("", " | ");
      Options options4 = options3.addOption(option0);
      options4.getOptions();
      helpFormatter0.printHelp("t", "t", options4, "t", false);
      helpFormatter0.setLeftPadding((-1378));
      helpFormatter0.defaultArgName = "KK-i;Em~KhfM_gT";
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptPrefix();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("KK-i;Em~KhfM_gT");
      Options options5 = options4.addOptionGroup(optionGroup0);
      options5.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" | ", "--", options2, "--", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.getDescPadding();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getDescPadding();
      Locale locale0 = Locale.TAIWAN;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("!*{@b?1e$~zu*.zS#");
      mockPrintWriter0.checkError();
      mockPrintWriter0.print((long) 3);
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("REk|{G(i/$]");
      options0.addOption("arg", true, "R\"a-HMm4mhcDx~}Y#0@");
      helpFormatter0.printHelp(3, "usage: ", " ", options0, "org.apache.commons.cli.HelpFormatter", false);
      helpFormatter0.getOptionComparator();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "R\"a-HMm4mhcDx~}Y#0@");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      options0.addOption("nA", true, "02QW/O`:&r!o0;rWn~");
      helpFormatter0.printHelp(3, "02QW/O`:&r!o0;rWn~", "R\"a-HMm4mhcDx~}Y#0@", options0, "5;wos-4s", true);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.getBuffer();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      String string0 = "org.apache.commons.cli.OptionGroup";
      Option option0 = new Option("", true, "--");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "org.apache.commons.cli.OptionGroup", "", options1, 5453, (-1), "org.apache.commons.cli.OptionGroup", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "xS\"k<\\]e=gmV{`";
      MockPrintStream mockPrintStream0 = new MockPrintStream("xS\"k<]e=gmV{`");
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      helpFormatter0.defaultSyntaxPrefix = ":B &=+Aun;K\"";
      int int0 = 0;
      String string1 = "bNwz95JDLI^,T?@";
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "bNwz95JDLI^,T?@");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getDescPadding();
      Locale locale0 = Locale.TAIWAN;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("!*{@b?1e$~zu*.zS#");
      mockPrintWriter0.checkError();
      mockPrintWriter0.print((long) 3);
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("REk|{G(i/$]");
      options0.addOption("arg", true, "R\"a-HMm4mhcDx~}Y#0@");
      helpFormatter0.printHelp(3, "usage: ", " ", options0, "org.apache.commons.cli.HelpFormatter", false);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "y0J>*dlmsS%F(O");
      Options options2 = options1.addOption("", " | ", true, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      Option option0 = new Option("", " | ");
      Options options4 = options3.addOption(option0);
      options4.getOptions();
      helpFormatter0.printHelp("t", "t", options4, "t", false);
      helpFormatter0.setLeftPadding((-1378));
      helpFormatter0.defaultArgName = "KK-i;Em~KhfM_gT";
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptPrefix();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("KK-i;Em~KhfM_gT");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 5453, "9z<2y_8W", "", options1, 5453, 5453, "", true);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 5453, (-2435), "H/g_*`hH[NmpG/sB<-");
      helpFormatter0.renderOptions(stringBuffer1, 5453, options0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("!*{@b?1e$~zu*.zS#");
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix(" ");
      helpFormatter0.printHelp(3, "!*{@b?1e$~zu*.zS#", "Ml!9Zc)R6zT5$f+P,", options0, "org.apache.commons.cli.HelpFormatter", true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      helpFormatter1.getNewLine();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "usage: ");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-812), "]", "NO~ARGAALLOWED", options0, "NO~ARGAALLOWED", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      helpFormatter0.getDescPadding();
      helpFormatter0.setLeftPadding(0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.getBuffer();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 5453, "c)[T9'xP\"EVw/y*!Q^", ";}N By5`Zz?R,", options0, 5453, 0, "org.apache.commons.cli.OptionGroup", false);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "H_v@\\?;vI)L";
      Options options0 = new Options();
      options0.getOptions();
      String string1 = "+U;O^j6";
      helpFormatter0.printHelp("+U;O^j6", options0);
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "h*?q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("--", "--", options0, "--");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getDescPadding();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      stringWriter0.write(41);
      helpFormatter1.renderOptions(stringBuffer0, (-1052), options0, 3, 14);
      helpFormatter1.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("-");
      helpFormatter0.printHelp(74, "usage: ", " ", options0, " ", false);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptPrefix();
      helpFormatter0.printHelp("usage: ", options0, false);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("arg");
      Locale locale0 = Locale.TAIWAN;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("%~~tiDXv*[");
      mockPrintWriter0.checkError();
      MockFile mockFile0 = new MockFile("'fR}^:4Aq8!7IbOr7e", "--");
      MockPrintWriter mockPrintWriter1 = null;
      try {
        mockPrintWriter1 = new MockPrintWriter(mockFile0, "2XTpc+@Y");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 2XTpc+@Y
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(74);
      helpFormatter0.getDescPadding();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.printHelp(3, ">", "[ Options: [ short ", options0, (String) null, false);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(1);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.findWrapPos("\"Cc+K@X(uZ%%+\"K", 0, 1);
      String string0 = "";
      Options options0 = null;
      String string1 = "--";
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1, (Options) null, 1, 646);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 1;
      helpFormatter0.setWidth(1);
      helpFormatter0.getLongOptPrefix();
      String string0 = "\"Cc+K@X(uZ%%+\"K";
      int int1 = (-1168);
      helpFormatter0.findWrapPos("\"Cc+K@X(uZ%%+\"K", (-1168), 1);
      String string1 = "";
      Options options0 = null;
      String string2 = "--";
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", 0, (-1168));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "y0J>*dlmsS%F(O");
      options1.addOption("", " | ", true, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", " | ");
      Options options2 = options0.addOption(option0);
      helpFormatter0.printHelp("t", "t", options2, "t", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getNewLine();
      helpFormatter0.setOptPrefix("M<*");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix(" ");
      helpFormatter0.printHelp(3, "usage: ", "", options0, "", false);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "y0J>*dlmsS%F(O");
      options0.addOption("nA", true, "\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp(74, "org.apache.commons.cli.AlreadySelectedException", "K", options1, "i(b<-t%/Ws", false);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      Options options0 = new Options();
      Option option0 = new Option((String) null, true, "arg");
      options0.addOption(option0);
      boolean boolean0 = true;
      String string0 = "y0J>*dlmsS%F(O";
      options0.addOption("", true, "y0J>*dlmsS%F(O");
      helpFormatter0.findWrapPos("", 0, 0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("k", "", options0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "--", (Options) null, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(1);
      helpFormatter0.getLongOptPrefix();
      String string0 = "\"Cc+K@X(uZ%%+\"K";
      helpFormatter0.setLongOptPrefix("");
      String string1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 10, (-1584));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(117);
      helpFormatter0.getLongOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.findWrapPos((String) null, 74, 103);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "y0J>*dlmsS%F(O");
      String string0 = " | ";
      String string1 = "-";
      options1.addOption("", " | ", true, "-");
      Options options2 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.OptionGroup", " | ", (Options) null, "org.apache.commons.cli.HelpFormatter$OptionComparator");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth((-1));
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.findWrapPos("IqZ", (-1), (-1));
      String string0 = "";
      Options options1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("%qVkax|", "-Wl5&j", (Options) null, "\"Cc+K@X(uZ%%+\"K");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(1);
      helpFormatter0.getLongOptPrefix();
      String string0 = "\"Cc+K@X(uZ%%+\"K";
      helpFormatter0.findWrapPos("\"Cc+K@X(uZ%%+\"K", 0, 1);
      Options options0 = null;
      String string1 = "{ FREg;OynH";
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\"Cc+K@X(uZ%%+\"K");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "--", (Object[]) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 1, "", "E229\\AX[Z~%aNXjg", (Options) null, 41, 1, "*v2yYL2 =WXc^iz", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getDescPadding();
      Locale locale0 = Locale.TAIWAN;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("!*{@b?1e$~zu*.zS#");
      mockPrintWriter0.checkError();
      mockPrintWriter0.print((long) 3);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "!*{@b?1e$~zu*.zS#";
      objectArray0[1] = (Object) " ";
      mockPrintWriter0.printf(locale0, "Ml!9Zc)R6zT5$f+P,", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, ")9H67~!-n", "", options0, 3, 2876, "[");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      helpFormatter0.getDescPadding();
      helpFormatter0.setLeftPadding(0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.getBuffer();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1794, "");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = (-1);
      options0.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("H_v@?;vI)L", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-777);
      helpFormatter0.findWrapPos("A]+hL` 'u)&Kpo_k", (-777), (-777));
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      int int1 = 0;
      Options options0 = new Options();
      boolean boolean0 = false;
      Option option0 = null;
      try {
        option0 = new Option("\n", "-", false, "n)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.defaultSyntaxPrefix = "M9NVs A< W(H";
      String string0 = "";
      Options options0 = new Options();
      options0.hasOption("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, (String) null, "", options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "/GP$cl");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("arg", "usage: ", false, "U&NZnHI5$P");
      int int0 = 1049;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-4275), options2, 1049, (-254));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("(:M&", "[18i4F", (Options) null, "(:M&", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("[X,=SBQM(,");
      helpFormatter0.setArgName("");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      helpFormatter0.getDescPadding();
      helpFormatter0.setLeftPadding(0);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("rE@id@w");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(" ", "usage: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // usage: 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-2304));
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      int int0 = (-4137);
      String string0 = "";
      Options options0 = new Options();
      String string1 = "arg";
      options0.hasLongOption(" ");
      // Undeclared exception!
      try { 
        options0.addOption(" ", "arg", true, "JL+$BH3;Og8c(b0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Options options0 = new Options();
      helpFormatter0.getDescPadding();
      helpFormatter0.setLeftPadding(0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.getBuffer();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\n");
      helpFormatter0.setDescPadding(0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "y0J>*dlmsS%F(O");
      options0.addOption("nA", true, "\n");
      helpFormatter0.printHelp("y0J>*dlmsS%F(O", "", options0, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp(74, "org.apache.commons.cli.AlreadySelectedException", "K", options1, "i(b<-t%/Ws", false);
      helpFormatter1.printHelp(26, "-", "Illegal option name '", options1, "-", true);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.getBuffer();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "c)[T9'xP\"EVw/y*!Q^", options0, "1yM0<)j}?pl8B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "y0J>*dlmsS%F(O");
      Options options2 = options1.addOption("", " | ", true, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      Option option0 = new Option("", " | ");
      Options options4 = options3.addOption(option0);
      helpFormatter0.printHelp("t", "t", options4, "t", false);
      helpFormatter0.setLeftPadding((-1378));
      helpFormatter0.defaultArgName = "KK-i;Em~KhfM_gT";
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptPrefix();
      assertEquals((-1378), helpFormatter0.defaultLeftPad);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix(" ");
      helpFormatter0.printHelp(3, "usage: ", "", options0, "", true);
      helpFormatter0.getOptionComparator();
      assertEquals(" ", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      helpFormatter0.printHelp(1752, "UW(91[oBgK/h2iG;", "UW(91[oBgK/h2iG;", options0, "UW(91[oBgK/h2iG;");
      assertEquals(3, helpFormatter0.defaultDescPad);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "usage: ";
      int int0 = 44;
      helpFormatter0.defaultDescPad = 44;
      helpFormatter0.getSyntaxPrefix();
      MockFile mockFile0 = new MockFile("d=");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockFile1;
      objectArray0[1] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format("", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      Locale locale0 = Locale.FRENCH;
      mockPrintWriter0.printf(locale0, "1E7", objectArray0);
      String string0 = "Xp";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("i8e8U$BP6A=C0", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'i8e8U$BP6A=C0' contains an illegal character : '='
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(1);
      helpFormatter0.getLongOptPrefix();
      String string0 = "\"Cc+K@X(uZ%%+\"K";
      helpFormatter0.findWrapPos("\"Cc+K@X(uZ%%+\"K", 0, 1);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", (Options) null, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.setDescPadding(74);
      assertEquals(74, helpFormatter0.defaultDescPad);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "P|)ehf|u;";
      String string1 = null;
      helpFormatter0.setArgName((String) null);
      helpFormatter0.defaultLongOptPrefix = "P|)ehf|u;";
      helpFormatter0.getWidth();
      helpFormatter0.getOptPrefix();
      String string2 = null;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("P|)ehf|u;", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setWidth(0);
      String string0 = "";
      String string1 = null;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("\n", "-", false, "3+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "fhM.";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 0, (-854), "fhM.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }
}
