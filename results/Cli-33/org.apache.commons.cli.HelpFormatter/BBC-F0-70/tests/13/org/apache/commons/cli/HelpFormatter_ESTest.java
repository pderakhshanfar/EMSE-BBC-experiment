/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:08:31 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.cli.ParseException", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "org.apache.commons.cli.ParseException");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.setLeftPadding((-1));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arg");
      PrintWriter printWriter0 = null;
      String string0 = "org.apache.commons.cli.OptionValidator";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.OptionValidator", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      optionGroup1.setRequired(true);
      helpFormatter0.printHelp("arg", options1, true);
      Options options2 = options1.addOption("arg", true, "arg");
      helpFormatter0.printHelp(" y+U", options2, false);
      helpFormatter0.rtrim("[");
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultWidth = 1;
      options0.getOptions();
      Collection collection0 = new LinkedList<String>();
      options0.getOptionGroups();
      options0.hasLongOption("");
      MockFile mockFile0 = new MockFile("c]EacqI;`?\"/");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, false);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockFile0;
      PrintWriter printWriter0 = mockPrintWriter0.format("c]EacqI;`?\"/", objectArray0);
      helpFormatter0.printUsage(printWriter0, 2409, "Aj{", options0);
      options0.getOptions();
      // Undeclared exception!
      helpFormatter0.printHelp("[z^h^4FI:{Z_lS", options0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1628, "O,&nT#9*KW:AFi~&ca/", "O,&nT#9*KW:AFi~&ca/", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Kj iN>F-.,-H", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = null;
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("usage: ", options0, true);
      helpFormatter0.getArgName();
      helpFormatter0.createPadding(1028);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.findWrapPos("'", 0, 0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.rtrim("hI;-)8e3~");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[ option: ");
      mockPrintWriter0.format((Locale) null, "arg", (Object[]) null);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option((String) null, false, "");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-206), options2, 33, 3548);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(" ] [ long ", " ] [ long ", options0, "KD->~?u");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "5vJ@A*pt!Xf", options0);
      helpFormatter0.printHelp("\n", "6vu'e2kx6&LM7+z=", options0, "6vu'e2kx6&LM7+z=");
      helpFormatter0.printHelp("5vJ@A*pt!Xf", "KD->~?u", options0, "5vJ@A*pt!Xf");
      helpFormatter0.findWrapPos("6vu'e2kx6&LM7+z=", 1, 1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "";
      Option option0 = new Option("", "cmdLineSyntax not provided", false, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("-^OsH]", "-^OsH]", options1, "L;i@q");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      String string1 = "4";
      Options options2 = options1.addOption("arg", false, "]");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1813), "4", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      Options options1 = options0.addOption("", "usage: ", true, "");
      helpFormatter0.getNewLine();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.setDescPadding((-3477));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\"", "", options1, "\"", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("Cannot add value, list full.", "usage: ", (File) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter1;
      objectArray0[1] = (Object) mockPrintWriter1;
      objectArray0[2] = (Object) "Cannot add value, list full.";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) mockPrintWriter1;
      objectArray0[5] = (Object) file0;
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) null;
      PrintWriter printWriter0 = mockPrintWriter1.printf("", objectArray0);
      helpFormatter0.printUsage(printWriter0, 2045, "/5j`eWIsf@&et=\"Qzi");
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.rtrim("ox4h");
      helpFormatter0.rtrim("ox4h");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setDescPadding(1);
      MockFile mockFile0 = new MockFile((String) null, "Ib.18");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.ITALIAN;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) "Ib.18";
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) null;
      objectArray0[8] = (Object) "Ib.18";
      mockPrintWriter0.format(locale0, "Ib.18", objectArray0);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "usage: ", true, "");
      options1.toString();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("\"", "", options1, "\"", true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 3, "gHk1GQLX:", options0);
      helpFormatter1.printHelp("QrP&?/?L8uR $", "ZJ*8p@#", options2, " ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      helpFormatter0.printHelp("-", options0, true);
      // Undeclared exception!
      try { 
        helpFormatter1.findWrapPos((String) null, 74, (-1303));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-1621));
      String string0 = "";
      helpFormatter0.setArgName("");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, "usage: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // usage: 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "q*x4p&`O.zW@iFo9";
      File file0 = MockFile.createTempFile("$wJVu]0}2t", "q*x4p&`O.zW@iFo9");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) file0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) "q*x4p&`O.zW@iFo9";
      PrintWriter printWriter0 = mockPrintWriter0.format("$wJVu]0}2t", objectArray0);
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      PrintWriter printWriter1 = mockPrintWriter1.printf("]", objectArray0);
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter1, 0, "]");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "usage: ", true, "");
      options1.toString();
      options1.addOption("arg", true, "iQGSO'a =*N%");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(" ", options1, false);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(12);
      Options options0 = new Options();
      helpFormatter0.getOptionComparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.setWidth(74);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 74, "%8s", (String) null, options0, 1, 3, "", false);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(3);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.printHelp(1, "--", "", options0, "", true);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 0;
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, (String) null, false, "");
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options1, 0, 0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "org.apache.commons.cli.ParseException", (String) null, (Options) null, "org.apache.commons.cli.HelpFormatter$OptionComparator", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1305));
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.rtrim("org.apache.commons.cli.Option");
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultWidth = (-1769);
      options0.getOptions();
      options0.getOptions();
      options0.getOptionGroups();
      options0.hasLongOption("");
      MockFile mockFile0 = new MockFile("c]EacqI;`?\"/");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, false);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockFile0;
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      helpFormatter0.printUsage(printWriter0, 2409, "Aj{", options0);
      options0.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[z^h^4FI:{Z_lS", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1285);
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setWidth((-589));
      helpFormatter0.setLeftPadding((-1597));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\n", "\n", options0, "FH0o${EkEEjfk/:DNW");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1305));
      Options options0 = new Options();
      helpFormatter0.getOptionComparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(186);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", options1, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(74);
      helpFormatter0.defaultArgName = null;
      Options options0 = new Options();
      Options options1 = new Options();
      Options options2 = options1.addOption("", true, "I5Zgq}}FE,\"d");
      helpFormatter0.getOptionComparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 15, "line.separator", " :: ", options2, 15, 74, "oEd,)]n", true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "q;\u0005lgn", "QS`} .>\"p.XUi{B;#", options1, 3031, 74, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, (Options) null, 743, 743);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(74);
      helpFormatter0.defaultArgName = null;
      Options options0 = new Options();
      options0.addOption("", "arg", true, (String) null);
      helpFormatter0.defaultOptPrefix = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("arg", options0, true);
      helpFormatter1.getWidth();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(10);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.rtrim("\n");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 3, "\n", "", options0, 0, 11, "Cannot add value, list full.", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "W";
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 1, 1, "-");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer1, 1, 3, "S-");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Object object0 = new Object();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Locale locale0 = Locale.TAIWAN;
      MockPrintStream mockPrintStream0 = new MockPrintStream(" ");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = object0;
      PrintStream printStream0 = mockPrintStream0.printf("usage: ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printStream0, false);
      Locale locale1 = Locale.TAIWAN;
      mockPrintWriter1.printf(locale0, "-", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter1, 74, "::J190M\"BPs^I^BoU,", options0);
      helpFormatter1.getOptionComparator();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-1243), "arg", "-", options0, 3, 74, "0R!*kQ)6fTNvk", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 63, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("W", "W", options0, "KD->~?u");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 74, "8AMSXL-!VB4aR", "Cr(Ot)S)wwiEHVcg", options0, 48, (-1), "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      options1.getOptions();
      helpFormatter0.printHelp("eIHXgl_O7j5Yxj<0F", "eIHXgl_O7j5Yxj<0F", options1, "' was specified but an option from this group ");
      Object object0 = new Object();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      optionGroup0.setSelected((Option) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Locale locale0 = Locale.TAIWAN;
      Locale locale1 = new Locale("arg", "usage: ");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) optionGroup0;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, (-2), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Object object0 = new Object();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Locale locale0 = Locale.TAIWAN;
      MockPrintStream mockPrintStream0 = new MockPrintStream(" ");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = object0;
      PrintStream printStream0 = mockPrintStream0.printf("usage: ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printStream0, false);
      Locale locale1 = Locale.TAIWAN;
      PrintWriter printWriter0 = mockPrintWriter1.printf(locale0, "-", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter1, 74, "::J190M\"BPs^I^BoU,", options0);
      helpFormatter1.getOptionComparator();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter3.printHelp(printWriter0, 3, "", "\"", options0, 3, 3, "\n", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(74);
      helpFormatter0.defaultArgName = null;
      Options options0 = new Options();
      Options options1 = new Options();
      options1.hasLongOption("Sp+2f!pv9eqPB-~");
      options1.addOption((String) null, false, "I5Zgq}}FE,\"d");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("l11*%nj=FB'i{(Zm@2M", options0, false);
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 49, "4=5Ukc_W_O", "usage: ", options1, 74, 74, (String) null);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", " ", true, "2)>1vy+nO.03piJ@Q7d");
      options1.toString();
      Locale locale0 = Locale.TAIWAN;
      locale0.stripExtensions();
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) helpFormatter0;
      mockPrintStream0.printf("2)>1vy+nO.03piJ@Q7d", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Locale locale1 = Locale.TAIWAN;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale1, "", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage(printWriter0, 74, "", options0);
      options1.getMatchingOptions("usage: ");
      helpFormatter1.getOptionComparator();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "usage: ", "\n", options1, 3, 1053, "", true);
      helpFormatter1.printHelp(74, "arg", "/3U{fkQtznq:*", options0, "--", false);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "eIHXgl_O7j5Yxj<0F";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      helpFormatter0.printHelp("eIHXgl_O7j5Yxj<0F", "eIHXgl_O7j5Yxj<0F", options1, "' was specified but an option from this group ");
      Object object0 = new Object();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Locale locale0 = Locale.TAIWAN;
      Locale locale1 = new Locale("arg", "usage: ");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) optionGroup0;
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", " ", true, "2)>1vy+nO.03piJ@Q7d");
      options1.toString();
      Locale locale0 = Locale.TAIWAN;
      Locale locale1 = Locale.JAPAN;
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) helpFormatter0;
      mockPrintStream0.printf("2)>1vy+nO.03piJ@Q7d", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Locale locale2 = Locale.TAIWAN;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale2, "", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage(printWriter0, 74, "", options0);
      helpFormatter1.getOptionComparator();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "usage: ", "\n", options1, 3, 1053, "", true);
      helpFormatter2.printOptions(printWriter0, 2, options1, 74, 102);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = "[s0RA/9AT9Z6:F(";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(44, "", "[s0RA/9AT9Z6:F(", options0, ",i/~t=xWtTw.'@Z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(74);
      Options options0 = new Options();
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) "KD->~?u";
      mockPrintStream0.printf("", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Locale locale0 = Locale.TAIWAN;
      mockPrintWriter0.printf(locale0, "", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, 3, "\"", options0);
      helpFormatter0.getOptionComparator();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1053, "--", "", options0, (-1), 1, "usage: ", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(74);
      Options options0 = new Options();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 74, (String) null, (String) null, options0, 74, 1, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(74);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.rtrim("\n");
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "usage: ", false, "");
      options1.toString();
      helpFormatter0.printHelp("\"", "", options1, "\"", true);
      helpFormatter0.getOptPrefix();
      helpFormatter0.setOptPrefix("'");
      options0.addOption("SSh9", true, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", " ", true, "2)>1vy+nO.03piJ@Q7d");
      options1.toString();
      Options options2 = options1.addOption("", true, "\"");
      String string0 = "org.apache.commons.cli.OptionGroup";
      options2.hasOption("org.apache.commons.cli.OptionGroup");
      boolean boolean0 = false;
      helpFormatter0.printHelp("Yi=erh5#,koI5", "\"", options2, "", false);
      helpFormatter0.getOptPrefix();
      helpFormatter0.setOptPrefix("[ Options: [ short java.util.HashMap@0000000005 ] [ long { =[ option: arg    [ARG] :: 2)>1vy+nO.03piJ@Q7d ]} ]");
      helpFormatter0.printHelp("7e%>Cvu}( (1", "7e%>Cvu}( (1", options1, "");
      Options options3 = new Options();
      helpFormatter0.setOptPrefix("+,J73hU,am!2~");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("eIHXgl_O7j5Yxj<0F", "eIHXgl_O7j5Yxj<0F", options1, "Oe&lo_%*<Z");
      Object object0 = new Object();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Locale locale0 = Locale.TAIWAN;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)14;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte) (-62);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) optionGroup0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, " ", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1230, "arg", options0);
      helpFormatter1.getOptionComparator();
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, (int) (byte)0, "MH2UJ(|", "MH2UJ(|", options1, (int) (byte)63, 497, "usage: ", false);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", " ", true, "2)>1vy+nO.03piJ@Q7d");
      options1.toString();
      Locale locale0 = Locale.TAIWAN;
      locale0.stripExtensions();
      MockPrintStream mockPrintStream0 = new MockPrintStream("Yi=erh5#,koI5");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) helpFormatter0;
      mockPrintStream0.printf("2)>1vy+nO.03piJ@Q7d", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Locale locale1 = Locale.TAIWAN;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale1, "", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage(printWriter0, 74, "", options0);
      helpFormatter1.getOptionComparator();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "usage: ", "\n", options1, 3, 1053, "", true);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setOptPrefix("--");
      Options options1 = new Options();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("eIHXgl_O7j5Yxj<0F", "eIHXgl_O7j5Yxj<0F", options1, "Oe&lo_%*<Z");
      Object object0 = new Object();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Locale locale0 = Locale.TAIWAN;
      locale0.stripExtensions();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) optionGroup0;
      helpFormatter0.printHelp("K@KG>YZ=[9", "K@KG>YZ=[9", options1, "eIHXgl_O7j5Yxj<0F", false);
      helpFormatter0.getOptPrefix();
      helpFormatter0.setOptPrefix((String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2, "NO_ARGS_ALLOWED", "arg", options0, 74, 2, "usage: ");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("eIHXgl_O7j5Yxj<0F", "eIHXgl_O7j5Yxj<0F", options1, "Oe&lo_%*<Z");
      Object object0 = new Object();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Locale locale0 = Locale.TAIWAN;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (int) (byte)63, "Oe&lo_%*<Z", "eIHXgl_O7j5Yxj<0F", options1, 15, (int) (byte) (-1), "eIHXgl_O7j5Yxj<0F");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", " ", true, "2)>1vy+nO.03piJ@Q7d");
      options1.toString();
      String string0 = "\"";
      Options options2 = options1.addOption("", true, "\"");
      options2.hasOption("org.apache.commons.cli.OptionGroup");
      helpFormatter0.printHelp("Yi=erh5#,koI5", "\"", options2, "", false);
      helpFormatter0.getOptPrefix();
      helpFormatter0.setOptPrefix("[ Options: [ short java.util.HashMap@0000000005 ] [ long { =[ option: arg    [ARG] :: 2)>1vy+nO.03piJ@Q7d ]} ]");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 2, "=RI/2MSr", (String) null, options0, 74, 3, "arg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("eIHXgl_O7j5Yxj<0F", "eIHXgl_O7j5Yxj<0F", options1, "Oe&lo_%*<Z");
      Object object0 = new Object();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Locale locale0 = Locale.TAIWAN;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte) (-62);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Locale locale1 = locale0.stripExtensions();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) optionGroup0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale1, " ", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1230, "arg", options0);
      helpFormatter1.getOptionComparator();
      helpFormatter0.printHelp(printWriter0, (int) (byte) (-1), "MH2UJ(|", "MH2UJ(|", options1, (int) (byte)63, 497, "usage: ", false);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(74);
      Options options0 = new Options();
      helpFormatter0.printHelp("\n", "W", options0, "KD->~?u");
      Options options1 = new Options();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1663), "arg", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Locale locale0 = Locale.TAIWAN;
      locale0.stripExtensions();
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 10, 2101, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("YM$}tfbNG(6w_5d%");
      String string0 = null;
      String string1 = "";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, ">Y,b");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("--", "HZe?#8 ;Er l", false, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(74);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      Locale locale0 = Locale.JAPAN;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      Object object1 = new Object();
      objectArray0[0] = object1;
      objectArray0[1] = (Object) "W";
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) helpFormatter0;
      helpFormatter0.setNewLine(", ");
      helpFormatter0.setOptPrefix("kL");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(", ", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(74);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Locale locale0 = Locale.JAPAN;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "usage: ");
      Object object0 = new Object();
      Object object1 = new Object();
      Options options0 = new Options();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) null, 74, "--", "usage: ", options0, 123, 1728, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(74);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("W", 1669, (-2411));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "usage: ", true, "");
      options1.toString();
      helpFormatter0.printHelp("\"", "", options1, "\"", true);
      helpFormatter0.getOptPrefix();
      helpFormatter0.setOptPrefix("'");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("'");
      Options options2 = options0.addOption("SSh9", true, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1, "\"", options2);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "usage: ", true, "");
      options1.toString();
      helpFormatter0.printHelp("\"", "", options1, "\"", true);
      String string0 = helpFormatter0.defaultOptPrefix;
      helpFormatter0.setOptPrefix("'");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("'");
      options0.addOption("", "", true, "-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 97, "'", options0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 74;
      helpFormatter0.setLeftPadding(74);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Locale locale0 = Locale.JAPAN;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      Object object1 = new Object();
      objectArray0[0] = (Object) "A CloneNotSupportedException was thrown: ";
      objectArray0[1] = (Object) "W";
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "--", objectArray0);
      PrintWriter printWriter1 = printWriter0.printf("78h8 ;bKyX<1M0+", objectArray0);
      int int1 = (-115);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter1, (-115), 0, "A CloneNotSupportedException was thrown: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "mIywP.fQ _K#+h5";
      helpFormatter0.rtrim("mIywP.fQ _K#+h5");
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Options options0 = new Options();
      helpFormatter0.printHelp("mIywP.fQ _K#+h5", options0, true);
      String string1 = "D?*M)m";
      // Undeclared exception!
      try { 
        options0.addOption("D?*M)m", true, "[ option: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'D?*M)m' contains an illegal character : '?'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("'PMz_)TAR");
      mockPrintWriter0.print(2030.75312602364);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1336), "'PMz_)TAR");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      mockPrintWriter0.close();
      mockPrintWriter0.write(" ");
      int int0 = (-2);
      mockPrintWriter0.println("-");
      String string0 = "iG ,tiU9";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-2), "iG ,tiU9");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(74);
      String string0 = "A CloneNotSupportedException was thrown: ";
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      int int0 = 3;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 3, options0, 2101, (-2809));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      PrintStream printStream0 = mockPrintStream0.append('1');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      Locale locale0 = Locale.JAPAN;
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      options0.getMatchingOptions("");
      helpFormatter0.renderOptions(stringBuffer0, 74, options0, 8, 8);
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 74, "[");
      helpFormatter0.printHelp(", ", "org.apache.commons.cli.HelpFormatter$1", options0, "]", false);
      helpFormatter0.printHelp("]", options0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-29);
      String string0 = "~|!?bMCAg11PT0~{";
      Options options0 = new Options();
      String string1 = "ys>";
      Option option0 = new Option((String) null, false, "V");
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-29), "~|!?bMCAg11PT0~{", "*bEJ@gVV<", options0, "ys>", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setOptPrefix("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(74);
      Options options0 = new Options();
      helpFormatter0.printHelp("\n", "W", options0, "KD->~?u");
      Options options1 = new Options();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      StringBuffer stringBuffer0 = new StringBuffer("--");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, (byte)74, 1, "P[-");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, (byte)10, (-348), "i*.zHC[ ^@be~TH");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 74, options1, 74, 1919);
      helpFormatter0.renderOptions((StringBuffer) null, (-29), options0, 74, 44);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 1628, 74, "~|!?bMCAg11PT0~{");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "usage: ", true, "");
      options1.toString();
      helpFormatter0.printHelp("\"", "", options1, "\"", true);
      helpFormatter0.getOptPrefix();
      helpFormatter0.setOptPrefix("'");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("'");
      int int0 = 2829;
      String string0 = ";?%r ;yUS&";
      // Undeclared exception!
      try { 
        options1.addOption("t2z7'1ETsOY", true, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 't2z7'1ETsOY' contains an illegal character : '''
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-29);
      String string0 = "~|!?bMCAg11PT0~{";
      Options options0 = new Options();
      String string1 = "ys>";
      Option option0 = new Option((String) null, true, "V");
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-29), "~|!?bMCAg11PT0~{", "*bEJ@gVV<", options0, "ys>", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(2657);
      Options options0 = new Options();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("W", "3wnVX1v=h)`", (Options) null, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(74);
      Options options0 = new Options();
      helpFormatter0.printHelp("\n", "W", options0, "KD->~?u");
      Options options1 = new Options();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 3, (String) null, "", options0, 3, (-979), "se9\"_=K9OH?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("eIHXgl_O7j5Yxj<0F", "eIHXgl_O7j5Yxj<0F", options1, "Oe&lo_%*<Z");
      Options options2 = new Options();
      helpFormatter0.printHelp("-", (String) null, options2, "8,|", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      helpFormatter0.setOptPrefix("");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      FileSystemHandling.shouldAllThrowIOExceptions();
      PrintWriter printWriter0 = null;
      int int0 = (-234);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-234), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 2101;
      Options options0 = new Options();
      int int1 = 74;
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2101, options0, 74, 74);
      helpFormatter0.renderWrappedText(stringBuffer1, 2101, 2101, " ");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        stringBuffer1.setCharAt(1, 'l');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("eIHXgl_O7j5Yxj<0F", "eIHXgl_O7j5Yxj<0F", options1, "Oe&lo_%*<Z");
      Options options2 = new Options();
      options2.toString();
      helpFormatter0.printHelp("6z*P'@Js_lowYm&K3g", "", options2, ">8r^]ff_[", true);
      helpFormatter0.getOptPrefix();
      helpFormatter0.setOptPrefix("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.AlreadySelectedException");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2829, "6z*P'@Js_lowYm&K3g", options2);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)21;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.setOptionComparator(comparator0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 1, options0, 1, 1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(74);
      Options options0 = new Options();
      Options options1 = new Options();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)31;
      byteArray0[5] = (byte) (-96);
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte)4;
      byteArray0[8] = (byte)21;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.printHelp("Sfyq", "A CloneNotSupportedException was thrown: ", options1, "", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "", "Sfyq", options1, "Sfyq", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(74);
      Options options0 = new Options();
      helpFormatter0.printHelp("-", "W", options0, "KD-~?u");
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "W", options1, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setLeftPadding(63);
      helpFormatter0.getOptPrefix();
      helpFormatter0.setOptPrefix("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-3279), "arg", "Y%uv&X", options0, 1, 1177, "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(74);
      Options options0 = new Options();
      helpFormatter0.printHelp("\n", "W", options0, "KD->~?u");
      Options options1 = new Options();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) null, 1, "usage: ", "[", options1, (int) (byte)10, 1, (String) null);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(74);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Locale locale0 = Locale.JAPAN;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      Object object1 = new Object();
      objectArray0[0] = object1;
      objectArray0[1] = (Object) "W";
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) "A CloneNotSupportedException was thrown: ";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "--", objectArray0);
      int int0 = 0;
      String string0 = "78h8 ;bKyX<1M0+";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 0, (-8), "78h8 ;bKyX<1M0+");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(74);
      Options options0 = new Options();
      helpFormatter0.printHelp("\n", "W", options0, "KD->~?u");
      Options options1 = new Options();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, 3, "W", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(74);
      Options options0 = new Options();
      helpFormatter0.printHelp("\n", "W", options0, "KD->~?u");
      Options options1 = new Options();
      byte byte0 = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      StringBuffer stringBuffer0 = new StringBuffer("--");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, (byte)74, 1, "");
      // Undeclared exception!
      try { 
        stringBuffer1.setCharAt((byte)74, '3');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("eIHXgl_O7j5Yxj<0F", "eIHXgl_O7j5Yxj<0F", options1, "Oe&lo_%*<Z");
      Object object0 = new Object();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Locale locale0 = Locale.TAIWAN;
      Locale locale1 = locale0.stripExtensions();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) optionGroup0;
      mockPrintWriter0.printf(locale1, " ", objectArray0);
      String string0 = "HZe?#8 ;Er l";
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 0, "HZe?#8 ;Er l");
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(74);
      Options options0 = new Options();
      helpFormatter0.printHelp("\n", "W", options0, "KD->~?u");
      Options options1 = new Options();
      helpFormatter0.printHelp("arg", "A CloneNotSupportedException was thrown: ", options1, "", true);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      MockFile mockFile0 = new MockFile("(rT2uHE]~jsY.", "--");
      File file0 = MockFile.createTempFile(";;P", "KD->~?u", (File) mockFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1794), "-", "", options0, (-1794), (-1794), "KD->~?u");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("6z*P'@Js_lowYm&K3g", "", options0, ">8r^]ff_[", true);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "NO{|XT[g{HA*ZM%mi9S");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      File file0 = MockFile.createTempFile(">8r^]ff_[", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 17, options0, (-2151), (-2151));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(74);
      Options options0 = new Options();
      helpFormatter0.printHelp("-", "W", options0, "KD-~?u");
      Options options1 = new Options();
      helpFormatter0.printHelp("arg", "A CloneNotSupportedException was thrown: ", options1, "", false);
      helpFormatter0.setArgName("KD-~?u");
      assertEquals("KD-~?u", helpFormatter0.getArgName());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      Options options0 = new Options();
      helpFormatter0.printHelp("6z*P'@Js_lowYm&K3g", "2Xz-Ze{&V1?n@[", options0, "]", false);
      helpFormatter0.getOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix("arg");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", "arg", options0, "6z*P'@Js_lowYm&K3g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      int int0 = helpFormatter0.findWrapPos("", 1669, 722);
      assertEquals((-1), int0);
      
      int int1 = helpFormatter0.getDescPadding();
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, int1);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = stringBuffer0.append(true);
      StringBuffer stringBuffer2 = stringBuffer1.append("");
      helpFormatter0.renderWrappedText(stringBuffer2, 286, 286, "@M%~C");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptPrefix();
      helpFormatter0.getDescPadding();
      helpFormatter0.setOptPrefix(" `& >gzBl.&/F_q");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      StringWriter stringWriter0 = new StringWriter(296);
      stringWriter0.getBuffer();
      int int0 = 763;
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "\n", 3, 763);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("6z*P'@Js_lowYm&K3g", "", options0, ">8r^]ff_[", true);
      String string0 = helpFormatter0.getOptPrefix();
      assertEquals("-", string0);
      
      helpFormatter0.setOptPrefix("-");
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      String string1 = helpFormatter0.getNewLine();
      assertEquals("\n", string1);
      
      String string2 = helpFormatter0.getArgName();
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("arg", string2);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(2657);
      String string0 = "W";
      Options options0 = new Options();
      Options options1 = null;
      String string1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Sfyq", "A CloneNotSupportedException was thrown: ", (Options) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1501));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("A CloneNotSupportedException was thrown: ", "Sfyq", options0, "A CloneNotSupportedException was thrown: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      PrintStream printStream0 = mockPrintStream0.append('1');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) mockFileOutputStream0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) locale0;
      objectArray0[5] = (Object) mockPrintStream0;
      objectArray0[6] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, " ", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 2246, 2246, "-53WiM:Bv%Aj]|");
      helpFormatter0.setNewLine(", ");
      PrintWriter printWriter1 = mockPrintWriter0.format("arg", objectArray0);
      printStream0.print((double) 2246);
      helpFormatter0.printUsage(printWriter1, (-1), ":W}hn-)}@7n#tM1Uj");
      helpFormatter0.getLongOptSeparator();
      assertEquals(", ", helpFormatter0.getNewLine());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      PrintStream printStream0 = mockPrintStream0.append('1');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      Locale locale0 = Locale.FRENCH;
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) mockFileOutputStream0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) locale0;
      objectArray0[5] = (Object) mockPrintStream0;
      objectArray0[6] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, " ", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 2246, 2246, "-53WiM:Bv%Aj]|");
      helpFormatter0.setNewLine(", ");
      assertEquals(", ", helpFormatter0.getNewLine());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      helpFormatter0.rtrim("{|89");
      helpFormatter0.createPadding(548);
      helpFormatter0.setNewLine("{|89");
      helpFormatter0.setLeftPadding(548);
      helpFormatter0.getOptionComparator();
      assertEquals("{|89", helpFormatter0.getNewLine());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1942), "Ymd6b;S8DL]a]upL", "Ymd6b;S8DL]a]upL", (Options) null, "`q2%w");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(3);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      String string0 = "6z*P'@Js\\_lowYm&K3g";
      Options options0 = new Options();
      helpFormatter0.printHelp("6z*P'@Js_lowYm&K3g", "2Xz-Ze{&V1?n@[", options0, "]", false);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("\n", "f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 258;
      helpFormatter0.setDescPadding(258);
      StringWriter stringWriter0 = new StringWriter();
      boolean boolean0 = false;
      String string0 = null;
      // Undeclared exception!
      try { 
        stringWriter0.write((String) null, (-1521), 502);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setOptionComparator((Comparator) null);
      int int0 = helpFormatter0.findWrapPos("&:9", 9, 1669);
      assertEquals((-1), int0);
      
      helpFormatter0.setOptionComparator((Comparator) null);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.setOptionComparator(comparator0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 958, options0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-4582));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(74);
      Options options0 = new Options();
      helpFormatter0.printHelp("Sfyq", "W", options0, "KD-~?u");
      Options options1 = new Options();
      helpFormatter0.printHelp("Sfyq", "A CloneNotSupportedException was thrown: ", options1, "", false);
      assertEquals(74, helpFormatter0.defaultLeftPad);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("33qc=(x5b)3ZMMHGN");
      helpFormatter0.setLeftPadding(261);
      Options options0 = new Options();
      helpFormatter0.printHelp(261, "33qc=(x5b)3ZMMHGN", "org.apache.commons.cli.Option", options0, "");
      helpFormatter0.setWidth((-165));
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLeftPadding();
      int int0 = helpFormatter0.getWidth();
      assertEquals((-165), helpFormatter0.defaultWidth);
      assertEquals((-165), int0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(3240);
      helpFormatter0.getWidth();
      helpFormatter0.getOptPrefix();
      helpFormatter0.defaultWidth = (-1278);
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setLeftPadding((-345));
      helpFormatter0.getLongOptSeparator();
      int int0 = 74;
      String string0 = "Va(k-lgh:q73vpXRiY";
      Options options0 = new Options();
      String string1 = "6GN";
      // Undeclared exception!
      try { 
        options0.addOption(":R-On8?6y|QgHzA", ":R-On8?6y|QgHzA", true, "6GN");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ':R-On8?6y|QgHzA' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      stringBuffer0.append(false);
      stringBuffer0.append("-");
      helpFormatter0.defaultWidth = (-1501);
      String string0 = "Bsx%o";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1501), (-1501), "Bsx%o");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("usage: ", "4(P2aRHz/,");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 4(P2aRHz/,
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(32);
      helpFormatter0.defaultNewLine = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setLongOptPrefix("qD,Lbb8f>sNm");
      helpFormatter0.setWidth(32);
      helpFormatter0.setWidth(0);
      helpFormatter0.findWrapPos("", 0, 0);
      helpFormatter0.getArgName();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.getOptionComparator();
      assertEquals(32, helpFormatter0.defaultLeftPad);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      helpFormatter0.setOptPrefix("");
      int int0 = helpFormatter0.getLeftPadding();
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "xm+C<@vNxh#|c";
      helpFormatter0.setNewLine("xm+C<@vNxh#|c");
      int int0 = 2440;
      String string1 = "";
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "--", true, " ");
      option0.setValueSeparator('\"');
      options0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      OptionGroup optionGroup1 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup1);
      options2.getOption(", ");
      // Undeclared exception!
      try { 
        options2.addOption("/wP&y[!kO\rA", "-", true, "Mp4RF4*84eUJzV");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '/wP&y[!kO\rA' contains an illegal character : '/'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      helpFormatter0.setLongOptSeparator((String) null);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
  }
}
