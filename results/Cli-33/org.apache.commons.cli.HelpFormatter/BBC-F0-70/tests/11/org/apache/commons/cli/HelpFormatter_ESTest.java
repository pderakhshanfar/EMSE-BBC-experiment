/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:07:37 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("sz9ZNg");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption("arg", true, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 599, "sz9ZNg", "sz9ZNg", options2, (-2), (-1), "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth((-2997));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", "arg", options0, "arg", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.createPadding(7);
      helpFormatter0.defaultSyntaxPrefix = null;
      String string1 = "\"";
      helpFormatter0.setLongOptSeparator("\"");
      helpFormatter0.getDescPadding();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getArgName();
      File file0 = MockFile.createTempFile("   ", "[");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(file0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "]";
      helpFormatter0.printHelp(64, ">$", (String) null, options0, "]");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(9);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) ">$");
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 1, "--", (String) null, options0, 0, 3, " ");
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      String string0 = "";
      helpFormatter0.defaultDescPad = 115;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 57, 34, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(3, "!z7KPD", "", options0, "--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 74, "\n");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 103, options0, 31, 31);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", true, "");
      options1.helpOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "m8 uNOF7)\"X~t6DD9";
      Options options0 = new Options();
      Option option0 = new Option("arg", "");
      Options options1 = options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.helpOptions();
      helpFormatter1.setWidth(1);
      // Undeclared exception!
      helpFormatter1.printHelp(" | ", options1, true);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderWrappedText(stringBuffer0, 3, 3, "arg");
      helpFormatter1.findWrapPos("usage: ", 3, 3);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", "?xxr;*1aeprwngo");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      Options options1 = options0.addOption("A$X", "?xxr;*1aeprwngo", false, "?F");
      Option option0 = new Option("arg", false, "Eka4$*9]vPxYj#X");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      option0.setOptionalArg(false);
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 12, "Eka4$*9]vPxYj#X", "org.apache.commons.cli.HelpFormatter$OptionComparator", options0, 3, 74, "usage: ", true);
      helpFormatter0.printHelp("has already been selected: '", "arg", options2, "arg", true);
      StringBuffer stringBuffer0 = new StringBuffer(1865);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1959), options1, 24, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-841));
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      option0.setOptionalArg(true);
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("T}1mx!i6{B@PK&3", "a6Pm#%$)`ML11_s_|V", options1, "T}1mx!i6{B@PK&3", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 2114, " ] [ long ", " ] [ long ", options0, 2114, 34, " ] [ long ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(3, "!|z7KPD", "", options0, "--");
      Option option0 = new Option("", false, "-");
      options0.addOption(option0);
      helpFormatter0.getLeftPadding();
      helpFormatter0.createPadding(1);
      helpFormatter0.getWidth();
      helpFormatter0.findWrapPos("'", (-1), 1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("--", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "-");
      helpFormatter0.printHelp("O5o9UY)8VP", "org.apache.commons.cli.HelpFormatter$1", options1, "org.apache.commons.cli.HelpFormatter$1", true);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3435, 3);
      helpFormatter0.renderWrappedText(stringBuffer1, 3435, (-1571), "usage: ");
      helpFormatter0.defaultSyntaxPrefix = "y#H/";
      helpFormatter0.setOptionComparator((Comparator) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2804), "y#H/", "y#H/", (Options) null, "y#H/", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      options0.addOption("", (String) null, true, (String) null);
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 3, "!|z7KPD");
      helpFormatter0.printHelp("!|z7KPD", "PH/0", options0, "!|z7KPD", false);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Option option0 = new Option("arg", "arg");
      Options options1 = options0.addOption(option0);
      options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      option0.setOptionalArg(true);
      optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2), "6A79B^RP<(8w)^$O(", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 1025, 217);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.setLeftPadding((-2214));
      helpFormatter0.getWidth();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", "arg");
      Options options0 = new Options();
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("arg", true, "--");
      helpFormatter0.printHelp(418, "!|z7KPD", "", options0, "--");
      MockFile mockFile0 = new MockFile("-^\"N@ma{S7'=_ wLv");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      helpFormatter0.printHelp((-1), "-^\"N@ma{S7'=_ wLv", "!|z7KPD", options0, "8 ");
      MockFile mockFile1 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 31, "!|z7KPD", "(_-=*4kb", options2, 418, 418, "", false);
      helpFormatter0.getLeftPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getNewLine();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-2);
      byteArray0[5] = (byte)11;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      File file0 = MockFile.createTempFile("arg", "?xxr;*1aeprwngo");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      Options options1 = options0.addOption("A$X", "?xxr;*1aeprwngo", false, "?F");
      Options options2 = options1.addOption("", true, "org.apache.commons.cli.AlreadySelectedException");
      Option option0 = new Option("", false, "Eka4$*9]vPxYj#X");
      Options options3 = options2.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      options3.addOption(option0);
      helpFormatter0.printHelp(39, "' contains an illegal character : '", "?xxr;*1aeprwngo", options0, "org.apache.commons.cli.AlreadySelectedException");
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3514, (String) null, (String) null, options2, 106, 39, "-", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      options0.addOption("arg", false, "\n");
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 1, options0, 74, 74);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.OptionValidator";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("'", "'", (Options) null, "' was specified but an option from this group ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Option option0 = new Option("", "arg");
      Options options0 = new Options();
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption(option0);
      options2.addOption("arg", true, "--");
      int int0 = 418;
      helpFormatter0.printHelp(418, "!|z7KPD", "", options0, "--");
      MockFile mockFile0 = new MockFile("-^\"-N@ma{S7'=_ wLv");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Options options3 = options2.addOption("BSD", true, "F2");
      StringBuffer stringBuffer0 = new StringBuffer("^h*X|v]r");
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 1, options3, 1, 418);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      helpFormatter0.renderWrappedText(stringBuffer0, 79, 79, "^QG_z=I6SNW#1=4");
      helpFormatter0.createPadding(79);
      MockFile mockFile0 = new MockFile(" ");
      File file0 = MockFile.createTempFile("usage: ", (String) null, (File) mockFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "org.apache.commons.cli.Option", (Object[]) null);
      helpFormatter0.printHelp(printWriter0, 79, "org.apache.commons.cli.Option", (String) null, options0, 79, 79, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", "?xxr;*1aeprwngo");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      Options options1 = options0.addOption("A$X", "?xxr;*1aeprwngo", false, "?F");
      options0.hasLongOption("--");
      options1.addOption("", true, "org.apache.commons.cli.AlreadySelectedException");
      Option option0 = new Option("", false, "Eka4$*9]vPxYj#X");
      mockPrintWriter0.print(" ");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), "A CloneNotSupportedException was thrown: ", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      option0.setOptionalArg(true);
      optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1), "p[", "p[", options2, (-1), (-2), "p[", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      File file0 = MockFile.createTempFile(" | ", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
      Locale.lookup(linkedList0, list0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "M}$}w.!2v", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      Options options1 = new Options();
      helpFormatter1.printHelp(printWriter0, 3, "usage: ", "", options1, 1, 3, "usage: ", false);
      helpFormatter0.renderWrappedText(stringBuffer0, 259, 737, "]");
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      options0.addOption((String) null, "", false, "-");
      helpFormatter0.printHelp("Op`O&3,w}dU$P[q|", "", options0, "Op`O&3,w}dU$P[q|", false);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", "?xxr;*1aeprwngo");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      Options options1 = options0.addOption("A$X", "?xxr;*1aeprwngo", false, "?F");
      Options options2 = options1.addOption("", true, "org.apache.commons.cli.AlreadySelectedException");
      Option option0 = new Option("", false, "Eka4$*9]vPxYj#X");
      Options options3 = options2.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      option0.setOptionalArg(true);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options4 = options3.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 127, "?xxr;*1aeprwngo", "has already been selected: '", options4, (-2), (-1), " F7X171xV[:s^@s", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-1));
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", (Options) null, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      options0.addOption("arg", true, "\n");
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "\n");
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", 639, (-2292));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream("_");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 19, "_");
      helpFormatter0.getLongOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(3);
      helpFormatter1.setNewLine("W3J5~u>i");
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", "arg");
      Options options0 = new Options();
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption("arg", true, "--");
      helpFormatter0.printHelp(418, "!|z7KPD", "", options0, "--");
      MockFile mockFile0 = new MockFile(" ", "arg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      helpFormatter0.printHelp((-1), "-^\"-N@ma{S7'=_ wLv", "!|z7KPD", options0, "   ");
      MockFile mockFile1 = new MockFile("   ");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintStream0, true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 418, "!|z7KPD", "<", options0, 9, 9, "8 ", true);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getNewLine();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "<", (String) null, options3, (-141), 213, "8 ", true);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", "arg");
      Options options0 = new Options();
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption(option0);
      options2.addOption("arg", true, "--");
      helpFormatter0.printHelp(418, "!|z7KPD", "", options0, "--");
      MockFile mockFile0 = new MockFile("-^\"-N@ma{S7'=_ wLv");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      helpFormatter0.printHelp((-1), "-^\"-N@ma{S7'=_ wLv", "!|z7KPD", options0, "   ");
      MockFile mockFile1 = new MockFile("   ");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintStream0, true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 418, "!|z7KPD", "F3tP=IsVFj$J$E%1OR", options0, 9, 9, "8 ", true);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      helpFormatter0.printHelp(1, "sLI#b66H", "", (Options) null, "");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", true, "-");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options1, "ww-UL1<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = ")";
      File file0 = MockFile.createTempFile("arg", "org.apache.commons.cli.HelpFormatter$OptionComparator");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Locale locale0 = Locale.CANADA_FRENCH;
      Locale locale1 = locale0.stripExtensions();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) ")";
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) ")";
      objectArray0[3] = (Object) helpFormatter1;
      objectArray0[4] = (Object) locale1;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale1, "arg", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter1.printOptions(printWriter0, 74, (Options) null, 3, 34);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2588, ":}^jE@W5h2UZ%PT:");
      String string0 = "M?{J-LX";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 33, "g2H1dt_0G", "M?{J-LX", options0, 27, 19, "org.apache.commons.cli.ParseException");
      int int0 = 489;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "", "|S0a\"'<o+&#z^1$>/", options0, 489, 2588, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.checkError();
      mockFile0.setExecutable(true);
      mockFile0.getCanonicalPath();
      mockPrintWriter0.append('-');
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 19, "/experiment/usage: /\n");
      helpFormatter0.getLongOptPrefix();
      int int0 = 18;
      helpFormatter0.setWidth(18);
      helpFormatter0.setNewLine("jp1].y@NN\"7?n`QCq");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 19, "", ".|s8", options0, 929, 970, "Illegal option name '", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "The option '");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", "-", false, "arg");
      helpFormatter0.printHelp("The option '", "Y7jf&rJM:B[2D\"+(", options2, (String) null);
      helpFormatter0.getOptionComparator();
      helpFormatter0.rtrim("The option '");
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[\"3Qn0<A");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, false);
      mockPrintWriter0.append((CharSequence) "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter2, (-536), "m>8Rj{MF&`'TAMY!@", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte) (-121);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Option option0 = new Option("", "");
      Options options0 = new Options();
      Options options1 = options0.addOption(option0);
      options1.addOption(option0);
      Options options2 = new Options();
      helpFormatter0.printHelp((-1), "mMvS$VU-<#q}YNT", "mMvS$VU-<#q}YNT", options1, "8 ");
      MockFile mockFile0 = new MockFile("-");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 32, "8 ", "-^\"-N@ma{S7'=_ wLv", options0, (-1), 2703, "Y>YbMog)D/?=jy3h5", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = null;
      boolean boolean0 = false;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-4226), "", "", (Options) null, (-4685), 10, "org.apache.commons.cli.OptionGroup");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      options0.addOption("arg", true, "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append('8');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      PrintWriter printWriter1 = mockPrintWriter1.append((CharSequence) "AZXDP");
      helpFormatter0.printUsage(printWriter1, 418, "", options0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      StringWriter stringWriter0 = new StringWriter(1);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 6430, 6430, "");
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "");
      Options options1 = new Options();
      PrintWriter printWriter0 = null;
      String string0 = "";
      Options options2 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1), "The option '", "", (Options) null, (-5528), 96, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("arg", true, "!|z7KPD");
      helpFormatter0.printHelp(820, "m8 uNOF7)\"X~t6DD9", "m8 uNOF7)\"X~t6DD9", options2, "!|z7KPD");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2588, ":}^jE@W5h2UZ%PT:");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 19, ":}^jE@W5h2UZ%PT:");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setWidth((-671));
      helpFormatter0.setWidth(19);
      helpFormatter0.setNewLine("l,Z0Uu-,qIO]:,bi3?");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLeftPadding((-671));
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, "-");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (-671), "l,Z0Uu-,qIO]:,bi3?", "-", options0, 162, 905, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 3305, 3305, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      Option option0 = new Option("", "arg");
      Options options0 = new Options();
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption("arg", true, "--");
      helpFormatter0.printHelp(418, "!|z7KPD", "", options0, "--");
      MockFile mockFile0 = new MockFile("-^\"-N@ma{S7'=_ wLv");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-3464), ">", "has already been selected: '", options3, 43, 32, "--", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      mockPrintWriter0.checkError();
      MockFile mockFile0 = new MockFile("xQ`V8EM'$6Ybti}T", "arg");
      mockFile0.setExecutable(false);
      mockFile0.getCanonicalPath();
      mockPrintWriter0.append('<');
      helpFormatter0.setOptionComparator((Comparator) null);
      int int0 = 4;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-4157), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2), "", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockFile0.mkdir();
      mockPrintWriter0.checkError();
      mockFile0.setExecutable(true);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2588, ":}^jE@W5h2UZ%PT:");
      helpFormatter0.rtrim("0OHP^M");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      helpFormatter0.renderWrappedText(stringBuffer0, 9, 9, "d z$Cu1s\"yZrza");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getArgName();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "d z$Cu1s\"yZrza", options0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "org.apache.commons.cli.OptionValidator";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(6, "e5hX+W", "-", (Options) null, "org.apache.commons.cli.OptionValidator");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("\"");
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) "\"";
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "-", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-508), "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "line.separator";
      helpFormatter0.getWidth();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      int int0 = (-237);
      String string0 = "eez-Iz\\LFjd";
      String string1 = ".\"KINe>.5+=iQ0~[";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Option option0 = new Option((String) null, true, "-");
      optionGroup0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("Mh'gc5zbuCH4^", (-1705), 2);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", "Mh'gc5zbuCH4^", (Options) null, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg");
      Options options1 = options0.addOption(option0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("r@HZ");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-2), options1, (-2963), (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      helpFormatter0.rtrim(" ");
      helpFormatter0.setArgName(" ");
      Options options1 = new Options();
      options1.helpOptions();
      options0.hasOption(" ");
      Options options2 = new Options();
      helpFormatter0.printHelp("qe,@ATB;A@M=CkK|^", options1, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter1.printHelp("9r/}6t6y%5dA?l6-M", options1);
      helpFormatter1.setNewLine(" ");
      helpFormatter0.setLeftPadding(3);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 31, 3, "'");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("A CloneNotSupportedException was thrown: ", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.checkError();
      mockFile0.setExecutable(true);
      mockFile0.getCanonicalPath();
      PrintWriter printWriter0 = mockPrintWriter0.append('<');
      helpFormatter0.printWrapped(printWriter0, 4, "' contains an illegal character : '");
      helpFormatter0.getLongOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth((-670));
      helpFormatter0.setWidth(74);
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      helpFormatter0.setLongOptPrefix("C)c_Cw+/n");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      helpFormatter0.rtrim("0OHP^M");
      helpFormatter0.setArgName("qe,@ATB;A@M=CkK|^");
      Options options1 = new Options();
      options1.helpOptions();
      options1.hasOption("-");
      Options options2 = new Options();
      helpFormatter0.printHelp(";`5*l>", options2, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 401, "The option '");
      helpFormatter0.setLongOptPrefix("The option '");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", options0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptPrefix();
      helpFormatter0.printHelp("Z0sPYO/etMjj", options0);
      helpFormatter0.setNewLine("");
      helpFormatter1.setLeftPadding(1133);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]");
      mockPrintWriter0.print('~');
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, (-2981), 1, "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "");
      Options options1 = options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(" | ", options1, true);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setNewLine("m8 uNOF7)\"X~t6DD9");
      helpFormatter0.setLeftPadding((-1));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.checkError();
      mockFile0.setExecutable(true);
      mockFile0.getCanonicalPath();
      mockPrintWriter0.append('<');
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 11, "/experiment/usage: /\n");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setWidth(0);
      helpFormatter0.setWidth(11);
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      helpFormatter0.setWidth(74);
      helpFormatter0.setWidth((-54));
      StringBuffer stringBuffer1 = new StringBuffer();
      Options options1 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 1678, options0, 250, 2529);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("0OHP^M");
      helpFormatter0.setArgName("qe,@ATB;A@M=CkK|^");
      Options options0 = new Options();
      String string0 = ";`5*l>";
      options0.helpOptions();
      options0.hasOption("\n");
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      Options options1 = options0.addOption("arg", true, "\n");
      Option option0 = new Option("AZXDP", "AZXDP", true, "");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp(418, "!|z7KPD", "--", options2, "usage: ");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      mockPrintWriter0.write(31);
      helpFormatter0.printOptions(mockPrintWriter0, 0, options0, 0, 0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2802, "");
      helpFormatter0.defaultDescPad = 44;
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLeftPadding(3897);
      helpFormatter0.printOptions(mockPrintWriter0, 31, options0, 31, 0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(74, "\n", "hZFR=$", options0, "@(A@!$GR4X!", true);
      helpFormatter1.printHelp("&46~", "--", options0, "", true);
      helpFormatter0.createPadding(2802);
      helpFormatter1.getOptionComparator();
      helpFormatter0.setLeftPadding(3897);
      helpFormatter0.setOptPrefix("");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-1626));
      helpFormatter0.getLeftPadding();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 3, "-/7:JQLr2");
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "e";
      helpFormatter0.rtrim("cOHL^M");
      helpFormatter0.defaultSyntaxPrefix = "cOHL^M";
      Option option0 = new Option("p", "");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", true, "--");
      options2.addOption(option0);
      options1.addOption("", true, "arg");
      int int0 = 9;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(9, "", "!|z7KPD", options2, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.rtrim("nn;.VRw%i");
      helpFormatter0.createPadding(1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      Option option0 = new Option("", "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2), 653, "4E5,;`{p");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("arg", false, "!|z7KPD");
      helpFormatter0.printHelp(820, "m8 uNOF7)\"X~t6DD9", "m8 uNOF7)\"X~t6DD9", options2, "!|z7KPD");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      helpFormatter0.renderWrappedText(stringBuffer0, 9, 9, " 8[Eh&#(J1`T(DLO((");
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "IyB$";
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      int int0 = 12;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, (Options) null, 12, 12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.findWrapPos("", (-305), (-305));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getArgName();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.createPadding(0);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("oRd1T:-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.checkError();
      mockFile0.setExecutable(false);
      mockFile0.getCanonicalPath();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      mockPrintWriter0.append('?');
      helpFormatter0.setOptionComparator(comparator0);
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "oRd1T:-");
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      helpFormatter0.setSyntaxPrefix("euBYjOg/&A+.i");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth((-2070));
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((String) null, "", options0, "-", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setLongOptPrefix("");
      String string1 = "\\4y{BJL";
      helpFormatter0.setSyntaxPrefix("\u0004y{BJL");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("-", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "e";
      helpFormatter0.defaultLongOptPrefix = "e";
      helpFormatter0.setOptPrefix("7");
      helpFormatter0.rtrim("cOHL^M");
      helpFormatter0.defaultSyntaxPrefix = "cOHL^M";
      helpFormatter0.setArgName("");
      Options options0 = new Options();
      options0.helpOptions();
      options0.hasOption(";`5*l>");
      // Undeclared exception!
      try { 
        options0.addOption("org.apache.commons.cli.HelpFormatter", false, "[ option: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.HelpFormatter' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "f";
      helpFormatter0.setNewLine("");
      helpFormatter0.setLongOptPrefix("xdrI");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.findWrapPos("xdrI", 0, 341);
      helpFormatter0.setLongOptSeparator("f");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setWidth(0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      int int0 = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2306), "8 ", "", options0, " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "|\\8mjFC!1.qm?cb";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      OptionGroup optionGroup2 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup2);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-147), "=p&L*m:>2V~v", "|8mjFC!1.qm?cb", options1, "|8mjFC!1.qm?cb");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 3;
      String string0 = "rx";
      Options options0 = new Options();
      options0.addOption("rx", false, "   ");
      helpFormatter0.setWidth((-222));
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
      try { 
        optionGroup0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.OptionGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "org.apache.commons.cli.OptionValidator";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", (Options) null, "M?{J-LX", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2588, ":}^jE@W5h2UZ%PT:");
      helpFormatter0.printHelp("M?{J-LX", "", options0, "", true);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      helpFormatter0.rtrim("0OHP^M");
      helpFormatter0.setArgName("qe,@ATB;A@M=CkK|^");
      Options options1 = new Options();
      options1.helpOptions();
      options1.hasOption("-");
      Options options2 = new Options();
      helpFormatter0.printHelp(";`5*l>", options2, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptPrefix();
      helpFormatter0.printHelp("ilgBP(@[qS><@P", options2);
      helpFormatter0.setNewLine("':prpnZD7.tcH.R,");
      helpFormatter0.setLeftPadding(31);
      // Undeclared exception!
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1, 63, "Illegal option name '");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 3435, 3);
      helpFormatter0.renderWrappedText(stringBuffer1, 3435, (-1571), "usage: ");
      helpFormatter0.defaultSyntaxPrefix = "y#H/";
      helpFormatter0.setOptionComparator((Comparator) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2809), "y#H/", "y#H/", (Options) null, "y#H/", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.checkError();
      mockFile0.setExecutable(true);
      mockFile0.getCanonicalPath();
      mockPrintWriter0.append('<');
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 11, "/experiment/usage: /\n");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setWidth(0);
      helpFormatter0.setWidth(11);
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      int int0 = (-3291);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 35, options0, (-2860), (-3291));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ]";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ]");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
      int int0 = 174;
      helpFormatter0.printUsage(printWriter0, 174, " ]");
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption(" ]", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ' ]' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      helpFormatter0.rtrim("0OHP^M");
      helpFormatter0.setArgName("qe,@ATB;A@M=CkK|^");
      Options options1 = new Options();
      options1.helpOptions();
      options1.hasOption("-");
      Options options2 = new Options();
      helpFormatter0.printHelp(";`5*l>", options2, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(",Z", "usage: ", options0, "line.separator");
      helpFormatter1.getLongOptPrefix();
      helpFormatter0.printHelp("ilgBP(@[qS><@P", options2);
      helpFormatter0.setNewLine("':prpnZD7.tcH.R,");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 2218, 3, "--");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", "?xxr;*1aeprwngo");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      Options options1 = options0.addOption("A$X", "?xxr;*1aeprwngo", false, "?F");
      file0.setReadable(false);
      Option option0 = new Option("", false, "Eka4$*9]vPxYj#X");
      options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      option0.setOptionalArg(false);
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 12, "Eka4$*9]vPxYj#X", "org.apache.commons.cli.HelpFormatter$OptionComparator", options0, 3, 74, "usage: ", true);
      Comparator comparator0 = helpFormatter1.getOptionComparator();
      helpFormatter1.setOptionComparator(comparator0);
      helpFormatter1.printHelp("--", "?F", options1, "_C,)U.1a!rNDJz;]p6", true);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "e";
      helpFormatter0.rtrim("cOHL^M");
      helpFormatter0.defaultSyntaxPrefix = "cOHL^M";
      helpFormatter0.setArgName("");
      Options options0 = new Options();
      options0.helpOptions();
      options0.hasOption(";`5*l>");
      helpFormatter0.printHelp("e", options0, true);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.setLeftPadding(31);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      mockPrintWriter0.write(31);
      helpFormatter0.printOptions(mockPrintWriter0, 0, options0, 0, 0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2802, "");
      helpFormatter0.defaultDescPad = 44;
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLeftPadding(3897);
      helpFormatter0.printOptions(mockPrintWriter0, 31, options0, 31, 0);
      helpFormatter0.printHelp(599, "@(A@!$GR4X!", "Y26w!&.4 Y>]w0w7", options0, "", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "@(A@!$GR4X!", options0, "Y26w!&.4 Y>]w0w7", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 3, (-305), "-/7:JQLr2");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "line.separator";
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      options0.hasShortOption("");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      optionGroup0.setSelected((Option) null);
      String string0 = "%~ai$";
      Option option0 = new Option("arg", " ", true, "%~ai$");
      Options options2 = options1.addOption(option0);
      options2.hasOption("org.apache.commons.cli.Option");
      helpFormatter0.defaultWidth = 0;
      // Undeclared exception!
      try { 
        options2.addOption("line.separator", false, "}L7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'line.separator' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setLongOptSeparator((String) null);
      String string1 = "";
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getOptPrefix();
      File file0 = null;
      String string2 = "";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((File) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(", ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.ITALY;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "]j", (Object[]) null);
      int int0 = (-990);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-990), "]j");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "o-Z;ALH`A,NZ+{rCaj");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setArgName("");
      MockFile mockFile0 = new MockFile(" ", "b-H_dDgs?QX6/HGA^1");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("-", "\n", (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.getNewLine();
      helpFormatter0.setDescPadding(0);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "", (Options) null, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2166), options0, (-1700), (-2166));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }
}
