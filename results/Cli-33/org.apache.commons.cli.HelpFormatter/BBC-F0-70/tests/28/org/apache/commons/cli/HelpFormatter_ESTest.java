/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:15:00 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", false, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      optionGroup1.setRequired(true);
      helpFormatter0.printHelp(3, "\n", "--", options1, "--", true);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.setSyntaxPrefix("\n");
      int int0 = 34;
      StringBuffer stringBuffer0 = new StringBuffer(34);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "\n", false, "vNo(");
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options2, 6, 0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "\n", true, "arg");
      option0.setArgName("");
      options0.addOption(option0);
      options0.addOption(option0);
      helpFormatter0.printHelp((-1), "H2(qM'9MWh)}Njr..|o", "arg", options0, "arg", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("eLC)Li");
      Object[] objectArray0 = new Object[1];
      PrintWriter printWriter0 = mockPrintWriter0.format(" | ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage(printWriter0, (-2), "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-3142);
      helpFormatter0.setLeftPadding((-3142));
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setArgName("usage: ");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("usage: ", (Options) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "pY}u";
      helpFormatter0.getOptPrefix();
      MockFile mockFile0 = new MockFile("Ww$", "");
      File file0 = MockFile.createTempFile("pY}u", " ", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) file0;
      objectArray0[1] = (Object) file0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) "pY}u";
      objectArray0[4] = (Object) "Ww$";
      objectArray0[5] = (Object) "pY}u";
      Object object0 = new Object();
      objectArray0[6] = object0;
      objectArray0[7] = (Object) mockPrintWriter1;
      mockPrintWriter0.format("usage: ", objectArray0);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 0, 0, "pY}u");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      helpFormatter0.defaultArgName = "";
      StringBuffer stringBuffer1 = new StringBuffer(74);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 4909, options0, 74, 74);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      helpFormatter0.setWidth(1);
      StringBuffer stringBuffer1 = new StringBuffer("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      MockFile mockFile0 = new MockFile("?B+apH$x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "--");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", false, "?B+apH$x");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2056), "--", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      options0.getMatchingOptions(" ");
      int int0 = (-1418);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-90), ", ", "", options0, (-1418), (-90), "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      helpFormatter0.setSyntaxPrefix("]CoCW?Kx");
      helpFormatter0.printHelp((-1), "\n", "]CoCW?Kx", options0, "", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.createPadding(0);
      Options options0 = new Options();
      Option option0 = new Option("", "");
      Options options1 = options0.addOption(option0);
      String string0 = "oV";
      Options options2 = options1.addOption("oV", "arg", false, "--");
      options2.getOptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      option0.setLongOpt(":kbrqt{wu]~di");
      options1.addOption("", false, "");
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printOptions(mockPrintWriter0, 0, options2, 0, 0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", true, "H2(qM'9MWh)}Njr..|o");
      option0.setArgName("");
      options0.addOption(option0);
      Options options1 = new Options();
      helpFormatter0.printHelp((-1), "H2(qM'9MWh)}Njr..|o", "arg", options0, "arg", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, (String) null, "]CoCW?Kx", options1, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      helpFormatter0.setDescPadding((-522));
      int int0 = 3200;
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      helpFormatter0.getNewLine();
      String string0 = ">NdR\"9Q4y";
      Options options0 = new Options();
      Options options1 = options0.addOption("", "\n", false, "");
      Option option0 = new Option("x", "x", false, "`Zh_N:,!qBIQWO");
      String string1 = "F(:t*<";
      option0.setDescription(string1);
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp(string0, options2);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 2051, "\n");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "crI9&[9<dBwi2hp!O";
      Option option0 = new Option("arg", true, "crI9&[9<dBwi2hp!O");
      option0.setArgName("`jt^> .%$tM']PrUa");
      options0.addOption(option0);
      helpFormatter0.printHelp("[", options0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 2, "+p$h:&)", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-2917);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\n", "--", options0, "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Locale locale0 = Locale.GERMAN;
      Locale locale1 = locale0.stripExtensions();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) locale1;
      objectArray0[3] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) mockPrintWriter0;
      objectArray0[8] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale1, "--", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-1751), (-1751), "`YM-M/(yj,/");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(214);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 1, (-2484), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", "usage: ", true, "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      Locale.lookup(linkedList0, list0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) locale_FilteringMode0;
      objectArray0[3] = (Object) options0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) null;
      mockPrintWriter0.printf((Locale) null, "usage: ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      mockPrintWriter1.append('W');
      PrintWriter printWriter0 = mockPrintWriter1.format((Locale) null, "P", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 10, 10, "qv JwV8:Pnk`");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 4, options0, 597, 105);
      Options options1 = new Options();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", false, (String) null);
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 2597, "", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Locale locale0 = Locale.GERMANY;
      mockPrintWriter0.print((Object) helpFormatter0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) locale0;
      locale0.toLanguageTag();
      objectArray0[3] = (Object) locale0;
      locale0.clone();
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
      helpFormatter0.printUsage(printWriter0, 33, "");
      helpFormatter0.getWidth();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.findWrapPos("usage: ", 33, 74);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      helpFormatter0.printOptions(printWriter0, 3, options0, 13, 33);
      helpFormatter0.printHelp(39, "v[e{I(jP9Sn~%", "", options0, "usage: ", true);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      helpFormatter0.printOptions(mockPrintWriter0, 44, options0, 27, 27);
      Options options1 = new Options();
      helpFormatter0.printHelp("usage: ", "\n", options1, "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1573), "\n", (String) null, options1, 44, (-1573), "3TZ6l9VR&D^=m&4k)", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      String string0 = "";
      boolean boolean0 = false;
      int int0 = 0;
      options1.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 0, options1, 0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(">");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      String string0 = helpFormatter0.defaultArgName;
      mockPrintWriter0.append((CharSequence) "arg");
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1515, "arg", ">", options0, 1, 1, (String) null, true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter1.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "o1";
      Option option0 = new Option("o1", false, "--");
      Comparator<Object> comparator0 = null;
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-366), "+p$h:&)", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) null, 1, 1, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", false, " ");
      optionGroup0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("usage: ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setLongOptSeparator("");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(605);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(objectOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, true);
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, (-1), "841S`@\"8]D]]/\"CLOB");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption("usage: ");
      helpFormatter0.printHelp((-1), "tm!\"u", "tm!\"u", options0, "", false);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("org.apache.commons.cli.Option", 0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.Option", "org.apache.commons.cli.Option", (Options) null, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(806, "QM(3qy*mgb", "", (Options) null, "d|");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2447, 4, "");
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer1, 4, options0, 1470, 2447);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "8EMq[Jy LSaE{");
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options1 = options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) options1;
      objectArray0[1] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) options1;
      objectArray0[4] = (Object) option0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) "8EMq[Jy LSaE{";
      objectArray0[7] = (Object) mockPrintStream0;
      objectArray0[8] = (Object) mockPrintStream0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
      // Undeclared exception!
      helpFormatter1.printUsage(printWriter0, 1, "-", options1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      PrintWriter printWriter0 = null;
      int int0 = 1208;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 772, options1, 772, 15);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("H", false, "");
      helpFormatter0.setOptionComparator((Comparator) null);
      Option option1 = new Option("", "");
      options0.addOption(option1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("line.separator");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1047, "", options0);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.printHelp("#K", ">uW[7&D]F;", options0, "--");
      helpFormatter0.setOptionComparator((Comparator) null);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("cmdLineSyntax not provided", 13, 0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("%?*k");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(printWriter0, 27, " :: ", (String) null, options0, 74, 106, "", false);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "' containsan illeal character : '");
      options1.getOptionGroups();
      Options options2 = new Options();
      options1.hasOption("org.apache.commons.cli.HelpFormatter");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\n");
      helpFormatter0.printHelp(64, ",}{;t&2=$Em=$;#", "", options0, "[}ACWMF_$", false);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-446), options1, 32, 64);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("49IjVT", (String) null, options0, "49IjVT", false);
      helpFormatter0.rtrim("49IjVT");
      Options options1 = new Options();
      helpFormatter0.printHelp("49IjVT", options1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      options1.getOption("d}?I");
      helpFormatter0.getLeftPadding();
      int int0 = 1811;
      options1.hasShortOption("arg");
      helpFormatter0.printHelp(1811, "49IjVT", "49IjVT", options1, "49IjVT");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2222), "49IjVT", "49IjVT", options1, "49IjVT");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "arg");
      options0.addOption(option0);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.printHelp("--", "--", options0, "--");
      helpFormatter0.printHelp(2682, "N6QfT9", "N6QfT9", options0, "+p$h:&)", false);
      MockFile mockFile0 = new MockFile("--", "line.separator");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "6`A$");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) helpFormatter0;
      PrintStream printStream0 = mockPrintStream0.printf("SosX,", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printStream0, false);
      mockPrintWriter1.append((CharSequence) "--");
      Options options0 = new Options();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 12, "arg", ":;NMb", options0, 3, 74, " ", false);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter1.setOptionComparator(comparator0);
      Comparator<Option> comparator1 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter1.setOptionComparator(comparator1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter1.renderWrappedText(stringBuffer0, 74, (-2496), "");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("\n", "]", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " ");
      Options options0 = new Options();
      mockFile0.mkdirs();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 3, (String) null, "", options0, 3038, (-2391), "org.apache.commons.cli.Util", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockFile mockFile0 = new MockFile("+Be+O$khr~Fyn#P");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " ");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1517), "\n", "\n", options0, 44, (-1517), "+Be+O$khr~Fyn#P", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = null;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 4777, (Options) null, 3717, 58);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator("VkJgF\"yW&r|giuwr!2");
      helpFormatter0.printHelp(3011, "VkJgF\"yW&r|giuwr!2", "T~sp:0OMcwo)RvBP", options0, "has already been selected: '", false);
      helpFormatter0.rtrim((String) null);
      helpFormatter0.setLongOptSeparator("");
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(3);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Comparator<String> comparator1 = null;
      helpFormatter0.setOptionComparator((Comparator) null);
      MockFile mockFile0 = new MockFile("--");
      File file0 = MockFile.createTempFile("usage: ", "arg", (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0);
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp(" ", "", options0, "cmdLineSyntax not provided");
      Option option0 = new Option("", " ");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, (-2754), (String) null, options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", false, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options0.addOption("", "usage: ", true, " ");
      optionGroup1.toString();
      helpFormatter0.printHelp(63, "org.apache.commons.cli.HelpFormatter$OptionComparator", "~u9EPEW7qP", options1, "(Q_:vc", true);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Collection collection0 = options0.getOptionGroups();
      int int0 = 74;
      MockFile mockFile0 = new MockFile("/7$SXqM@+h5", "[");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "S5lS6}`YR;.3+\";Nh1L";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) collection0;
      objectArray0[3] = (Object) mockFile0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) options0;
      objectArray0[6] = (Object) "[";
      PrintWriter printWriter0 = mockPrintWriter0.printf("usage: ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1322), "C[}AC%WMF_$", "42", options0, 10, 63, "C[}AC%WMF_$", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      String string0 = null;
      String string1 = "";
      String string2 = "'";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "'", (Options) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("NlG\"0kLLt-Bhs.");
      Options options0 = new Options();
      options0.getOptionGroups();
      String string0 = "S5lS6}`YR;.3+\";Nh1L";
      int int0 = (-1148);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "NlG\"0kLLt-Bhs.", "42", options0, 74, (-1148), "C+iOt|X53al[WXP k", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption((String) null, "usage: ", true, "HTgT1KVElWKL3Gs");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("CrM}<+:", (String) null, (Options) null, "e-e");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "uIVMS?;F3+5!50*cGr'");
      StringBuffer stringBuffer0 = new StringBuffer("--");
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) stringBuffer0);
      Options options0 = new Options();
      mockPrintWriter0.print('v');
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) stringBuffer0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) printWriter0;
      objectArray0[4] = (Object) options0;
      objectArray0[5] = (Object) stringBuffer0;
      objectArray0[6] = (Object) "(";
      objectArray0[7] = (Object) helpFormatter0;
      objectArray0[8] = (Object) printWriter0;
      PrintWriter printWriter1 = mockPrintWriter0.printf("(", objectArray0);
      helpFormatter0.printHelp(printWriter1, 37, "[ option: ", "B< 7?p:/+\"w~ieXv``]", options0, 35, 1777, "B< 7?p:/+\"w~ieXv``]", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter1.setOptionComparator(comparator0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("6Pr.ZAbch\"q", "lSC<gs,`g\"E[ovaz", options0, "lSC<gs,`g\"E[ovaz", true);
      helpFormatter2.findWrapPos("", 1, 427);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("8", "\n", false, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option("", true, " ");
      options2.getOption("\":");
      Options options3 = options2.addOption(option0);
      optionGroup0.toString();
      options3.getMatchingOptions("\n");
      helpFormatter0.printHelp("8", "8", options3, "3");
      option0.setValueSeparator('s');
      helpFormatter0.printHelp("org.apache.commons.cli.OptionGroup", options2, false);
      option0.setArgs((-1));
      helpFormatter0.printHelp("8", "hMTe3RM3W*^ n&W", options3, "-");
      helpFormatter0.setArgName("org.apache.commons.cli.OptionGroup");
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      Option option0 = new Option("", false, "HTgT1KVElWKL3Gs");
      Options options1 = options0.addOption(option0);
      String string0 = "";
      options1.addOption("arg", ":|S(6UZeiu", false, "");
      options1.hasLongOption("");
      // Undeclared exception!
      helpFormatter0.printHelp("HTgT1KVElWKL3Gs", "", options0, "HTgT1KVElWKL3Gs");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "K.8FZmJ%x:HoPadF");
      helpFormatter1.getWidth();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("org.apache.commons.cli.ParseException");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append((CharSequence) "usage: ");
      Options options0 = new Options();
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 78, "arg", "\n", options0, 74, 74, "-", true);
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setOptionComparator((Comparator) null);
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 74, "--", "", options0, (-1977), 74, "usage: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", false, " ");
      optionGroup0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("usage: ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setLongOptSeparator("");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(605);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(objectOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, true);
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 3, "--", "", options0, 1, 53, " ");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.getArgName();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setLongOptSeparator("   ");
      helpFormatter0.setDescPadding(1693);
      helpFormatter0.createPadding(1693);
      helpFormatter0.getLeftPadding();
      int int0 = 1866;
      String string0 = "usage: ";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", "arg", false, "-");
      // Undeclared exception!
      try { 
        options2.addOption("#6w+", true, " ]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '#6w+' contains an illegal character : '#'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MockFile mockFile0 = new MockFile("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      Options options0 = new Options();
      helpFormatter1.printHelp(printWriter0, 74, "usage: ", "\n", options0, 3, 3, "arg", true);
      helpFormatter1.setOptionComparator(comparator0);
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter1.findWrapPos("-", (-1402), 1491);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printHelp(9, "I<SBnu+qA/Q;&pA_", "", options0, "[", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(":lS|CP");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) ":lS|CP";
      objectArray0[1] = (Object) "I<SBnu+qA/Q;&pA_";
      objectArray0[2] = (Object) "[";
      objectArray0[3] = (Object) ":lS|CP";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter0.format("--", objectArray0);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", ":lS|CP");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 9, "", "", options1, 0, (-1), "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      Comparator<Option> comparator2 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator2);
      helpFormatter0.setWidth(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      int int0 = 74;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 449, "", "8", options0, (-1), 74, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Aa[KR!v \"8w,");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      helpFormatter0.rtrim("");
      helpFormatter0.setLongOptSeparator("");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "HTgT1KVElWKL3Gs", true, "-");
      helpFormatter0.printHelp("C[}AC%WMF_$", "C[}AC%WMF_$", options1, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText((StringBuffer) null, 3, 681, "{ *n.H>hsl,]9G)E8-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", false, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(63, "org.apache.commons.cli.HelpFormatter$OptionComparator", "~u9EPEW7qP", options1, "(Q_:vc", true);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.defaultLongOptPrefix = "I<SBnu+qA/Q;&pA_";
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.addOption((String) null, true, (String) null);
      options0.hasOption("I<SBnu+qA/Q;&pA_");
      helpFormatter0.printHelp(58, "0M5H}Fp", "0M5H}Fp", options0, (String) null, true);
      helpFormatter0.rtrim("line.separator");
      helpFormatter0.setLongOptSeparator("--");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("]", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.defaultLongOptPrefix = "42";
      Options options0 = new Options();
      options0.getOptionGroups();
      String string0 = "";
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "/7$SXqM@+h5", "S5lS6}`YR;.3+\";Nh1L", options0, 1, 1, "/7$SXqM@+h5", false);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "HTgT1KVElWKL3Gs", true, "-");
      helpFormatter0.printHelp("C[}AC%WMF_$", "C[}AC%WMF_$", options1, "");
      helpFormatter0.printHelp(1411, "org.apache.commons.cli.HelpFormatter$OptionComparator", "", options1, "", true);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.defaultLongOptPrefix = "42";
      Options options0 = new Options();
      options0.getOptionGroups();
      String string0 = "";
      int int0 = 74;
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "/7$SXqM@+h5", "S5lS6}`YR;.3+\";Nh1L", options0, 74, 74, "/7$SXqM@+h5", false);
      MockPrintWriter mockPrintWriter1 = null;
      try {
        mockPrintWriter1 = new MockPrintWriter((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("-", options0);
      String string0 = "hMTe3RM3W*^ n&W";
      Option option0 = null;
      try {
        option0 = new Option("usage: ", true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "NJsyr_.-ap\u0000E}@~/_");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option("", true, " ");
      String string0 = "\":";
      options2.getOption("\":");
      Options options3 = options2.addOption(option0);
      optionGroup0.toString();
      options3.getMatchingOptions("\n");
      helpFormatter0.printHelp("8", "8", options3, "");
      option0.setValueSeparator('s');
      helpFormatter0.printHelp("org.apache.commons.cli.OptionGroup", options2, false);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2190), (-1), "\":");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter2.printHelp(1, "--", "L", options0, "");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(1042, ">}>e\"OUs*jFpu?ji", (String) null, options0, "@EBr>5.~M!E$");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(115, "kS]h$U", (String) null, (Options) null, "kS]h$U", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      helpFormatter0.printHelp("\n", (String) null, options0, "CSnL>OV[iNj\"iN(s");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-1379), (-309));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = ";yI";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";yI");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 9;
      helpFormatter0.setDescPadding(9);
      helpFormatter0.rtrim(";yI");
      helpFormatter0.setLongOptSeparator(";yI");
      StringWriter stringWriter0 = new StringWriter();
      int int1 = 71;
      // Undeclared exception!
      try { 
        stringWriter0.write((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      Options options0 = new Options();
      String string0 = "";
      Options options1 = options0.addOption("", "NO_ARGS_ALLOWED", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      boolean boolean0 = false;
      Options options3 = options2.addOption("rw", false, " ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-933), options3, (-933), (-933));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1564), "[ARG...]", "", options0, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      helpFormatter0.renderWrappedText(stringBuffer0, 1331, 13, "");
      String string0 = helpFormatter0.createPadding(2442);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1370), (String) null, "", options0, 1764, (-5), string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Aa[KR!v \"8w,";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Aa[KR!v \"8w,");
      mockPrintWriter0.append((CharSequence) "arg");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-486), "Aa[KR!v \"8w,", "Aa[KR!v \"8w,", options0, (-486), 4, "Aa[KR!v \"8w,");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.defaultLongOptPrefix = "I<SBnu+qA/Q;&pA_";
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printHelp(74, "7~4", "", options0, "N)X.Lpj$1c#*W}d", true);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = (-2728);
      String string0 = "CVynRc@ET9P}c";
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "arg");
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2728), "CVynRc@ET9P}c", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.setOptionComparator(comparator0);
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MockFile mockFile0 = new MockFile("");
      File file0 = MockFile.createTempFile("usage: ", " :: ", (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-486), " :: ", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getLeftPadding();
      MockFile mockFile0 = new MockFile("%B0s");
      String string1 = null;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "C[}AC%WMF_$";
      Options options0 = new Options();
      String string1 = "";
      String string2 = "HTgT1KVElWKL3Gs";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "8";
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "NJsyr_.-ap\u0000E}@~/_");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option("", true, " ");
      options2.getOption("\":");
      Options options3 = options2.addOption(option0);
      optionGroup0.toString();
      options3.getMatchingOptions("\n");
      helpFormatter0.printHelp("8", "8", options3, "");
      option0.setValueSeparator('s');
      helpFormatter0.printHelp("org.apache.commons.cli.OptionGroup", options2, false);
      option0.setArgs((-1));
      helpFormatter0.printHelp("8", "hMTe3RM3W*^ n&W", options3, "-");
      helpFormatter0.setArgName("org.apache.commons.cli.OptionGroup");
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.setOptionComparator(comparator0);
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator2;
      Comparator<Object> comparator3 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator3);
      helpFormatter0.setWidth(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      StringBuffer stringBuffer0 = new StringBuffer("--");
      helpFormatter0.renderWrappedText(stringBuffer0, 0, (-2), "");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      PrintWriter printWriter0 = null;
      int int0 = 1;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1, " ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "HTgT1KVElWKL3Gs", true, "-");
      helpFormatter0.printHelp("C[}AC%WMF_$", "C[}AC%WMF_$", options1, "");
      Options options2 = new Options();
      options2.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, (String) null, (String) null, options2, "7~4", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      helpFormatter0.createPadding(3508);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("$]N?U[S");
      helpFormatter0.getWidth();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.findWrapPos("8#lb24/$$t~UI]bz", 0, 1491);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("--", "", false, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Aa[KR!v \"8w,";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Aa[KR!v \"8w,");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      int int0 = 0;
      String string1 = "";
      String string2 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      String string3 = "";
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "Aa[KR!v \"8w,", "", options0, 0, 0, "Aa[KR!v \"8w,");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, " ]");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1721));
      MockFile mockFile0 = new MockFile("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = 31;
      mockPrintWriter0.write(74);
      mockPrintWriter0.println(4352);
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "--", 31, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      Options options0 = null;
      boolean boolean0 = false;
      int int0 = 31;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(31, "", "", (Options) null, "1U3f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptPrefix();
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getSyntaxPrefix();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("usage: ", "-");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // -
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "arg");
      Comparator<Object> comparator0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 2213, "+p$h:&)", "", options0, (-1), (-1338), "+p$h:&)", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.setOptionComparator(comparator0);
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator2;
      Comparator<Object> comparator3 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator3);
      int int0 = 0;
      helpFormatter0.setWidth(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 1051, "G<{8>+/+1\"VZj]7", "org.apache.commons.cli.HelpFormatter$1", (Options) null, 1051, 449, "Y", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.defaultLongOptPrefix = "I<SBnu+qA/Q;&pA_";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, "cmdLineSyntax not provided");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.AlreadySelectedException";
      helpFormatter0.setOptPrefix("org.apache.commons.cli.AlreadySelectedException");
      MockFile mockFile0 = new MockFile(" ", "org.apache.commons.cli.AlreadySelectedException");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "Frv e5F_");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // Frv e5F_
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "8";
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "NJsyr_.-ap\u0000E}@~/_");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option("", true, " ");
      options2.getOption("\":");
      Options options3 = options2.addOption(option0);
      optionGroup0.toString();
      options3.getMatchingOptions("\n");
      helpFormatter0.printHelp("8", "8", options3, "");
      helpFormatter0.printHelp("org.apache.commons.cli.OptionGroup", options2, false);
      helpFormatter0.printHelp("8", "hMTe3RM3W*^ n&W", options3, "-");
      helpFormatter0.setArgName("org.apache.commons.cli.OptionGroup");
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      PrintWriter printWriter0 = null;
      int int0 = 1;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptSeparator();
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 0;
      String string0 = null;
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg");
      option0.getValues();
      helpFormatter0.setLongOptPrefix((String) null);
      Options options1 = options0.addOption(option0);
      boolean boolean0 = false;
      String string1 = "e{;";
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        options1.addOption(" ", false, "e{;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "' was specified but an option from this group ";
      String string0 = "xwBTc18*r!2n3.]";
      Options options0 = new Options();
      options0.hasOption("' was specified but an option from this group ");
      helpFormatter0.defaultArgName = ".X~`,m!";
      // Undeclared exception!
      helpFormatter0.printHelp(0, "org.apache.commons.cli.AlreadySelectedException", "org.apache.commons.cli.AlreadySelectedException", options0, "A=5zK*,Y)<,DV", true);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      String string0 = "arg";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("-", "--", false, ")J%\"h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "}8UKsh.g<_,1S";
      helpFormatter0.rtrim("}8UKsh.g<_,1S");
      MockFile mockFile0 = new MockFile(";xwpBs_u$dU\"<lX4WM", "--");
      mockFile0.mkdir();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = (-2720);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-2720), "}8UKsh.g<_,1S");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 3, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("org.apache.commons.cli.Options");
      assertEquals("org.apache.commons.cli.Options", helpFormatter0.getArgName());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      int int0 = (-1);
      String string0 = "e*ZT";
      Options options0 = new Options();
      options0.addOption("arg", false, "[");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("{z4x)F mXe", true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '{z4x)F mXe' contains an illegal character : '{'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2362;
      helpFormatter0.setWidth(2362);
      String string0 = "";
      Options options0 = new Options();
      boolean boolean0 = false;
      options0.addOption((String) null, "", false, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      String string1 = ">";
      Option option0 = null;
      try {
        option0 = new Option("--", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 182;
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.defaultWidth = 182;
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.setSyntaxPrefix("Y<WmQ~L;X|95Cr^m");
      String string0 = "YU\\+h1";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-2), "YU+h1");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "=Guq\"S";
      String string1 = "/@*WWN-1 =";
      File file0 = MockFile.createTempFile("arg", "/@*WWN-1 =");
      try { 
        MockFile.createTempFile("usage: ", "=Guq\"S", file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }
}
