/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:00:31 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-485);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.defaultLeftPad = (-485);
      helpFormatter0.defaultLongOptPrefix = " ]";
      helpFormatter0.getLeftPadding();
      helpFormatter0.getArgName();
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-485));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter1.printf("arg", objectArray0);
      char[] charArray0 = new char[6];
      charArray0[0] = '.';
      charArray0[1] = '?';
      charArray0[2] = 'v';
      charArray0[3] = 'f';
      charArray0[4] = '3';
      charArray0[5] = '4';
      mockPrintWriter1.print(charArray0);
      Options options0 = new Options();
      int int0 = 476;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 2556, "", "", options0, 476, 476, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      boolean boolean0 = false;
      int int0 = 10;
      String string0 = "(Ms{4Q(\\urRW$!(cM";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(string0, "", (Options) null, "_lF4{*Lbk");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      int int0 = 40;
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 40, "", " ]", options0, 39, 39, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.setNewLine((String) null);
      int int0 = (-672);
      mockPrintWriter0.append('k');
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2585, (-672), ", ");
      helpFormatter0.createPadding(2585);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 11, (-1569), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      String string0 = "xr4k;N$c1";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "xr4k;N$c1");
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-658), "~Oz]t<<'TcYf,*HJ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = null;
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "-");
      MockFile mockFile0 = new MockFile("usage: ", " ");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setLeftPadding((-1837));
      options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1893, "o$+~7=*m'tERyLg", "o$+~7=*m'tERyLg", options0, "o$+~7=*m'tERyLg", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      helpFormatter0.renderWrappedText(stringBuffer0, 2011, 2011, " ");
      helpFormatter0.printHelp(2011, " ", " ", options0, " ", false);
      Options options1 = new Options();
      String string0 = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, "|?hfk(77+c1jvio", (String) null, options1, "$X3Z", false);
      Options options2 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, (-5), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      helpFormatter0.setLongOptSeparator((String) null);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 103, (-161), "--");
      helpFormatter0.renderWrappedText(stringBuffer1, 103, (-1803), "arg");
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.rtrim("?\"fTGuL/g@F^E");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 0;
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("]+\"S");
      helpFormatter0.defaultDescPad = (-1776);
      helpFormatter0.setOptPrefix("");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      helpFormatter0.findWrapPos("", 1887, 1887);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getDescPadding();
      int int0 = 2648;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-954), 1157, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultArgName = "";
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.defaultDescPad = (-2);
      helpFormatter0.getLongOptPrefix();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("bB$DEGykE+B^.u9", "", (Options) null, "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "3V~TI79q<gcg RyMYM";
      MockFile mockFile0 = new MockFile("--", "X; d[e`s]");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(dataOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 34, "3V~TI79q<gcg RyMYM", "3V~TI79q<gcg RyMYM", (Options) null, 11, 11, "X; d[e`s]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      String string1 = "eYdef,F2-SKy[}";
      FileSystemHandling.shouldAllThrowIOExceptions();
      Option option0 = new Option("", "eYdef,F2-SKy[}", true, ">");
      Options options1 = options0.addOption(option0);
      String string2 = "n58d";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options1, "n58d");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      mockPrintWriter0.append((CharSequence) stringBuffer0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 74, "usage: ", "B(kiyyXeK^O", options1, 74, 74, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.findWrapPos("", 0, 2);
      StringBuffer stringBuffer0 = new StringBuffer(2);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getNewLine();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "usage: ");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", true, "\n");
      helpFormatter0.printHelp("--", options2);
      MockFile mockFile0 = new MockFile("arg", "");
      MockFile mockFile1 = new MockFile(mockFile0, "arg");
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2), options0, 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("]", "]", (Options) null, " | ", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "V'$E}j>fo\"{nG=YeV";
      helpFormatter0.setLongOptSeparator("V'$E}j>fo\"{nG=YeV");
      helpFormatter0.setLongOptPrefix((String) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(2440, " ", " ", options0, " ", true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.getArgName();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer(1478);
      helpFormatter0.renderOptions(stringBuffer0, 10, options0, 1, 438);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1944);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)74;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      int int1 = (-414);
      helpFormatter0.defaultDescPad = (-414);
      byteArray0[2] = (byte) (-121);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("2NAnBIS9^2f", (Options) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "O3V!WWf63(B/Jb+";
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer(2696);
      int int0 = 0;
      Options options0 = new Options();
      Options options1 = options0.addOption("", "\n", true, "arg");
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options1, 652, 0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      MockFile mockFile0 = new MockFile("--", "org.apache.commons.cli.AlreadySelectedException");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "arg", false, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.toString();
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "!1");
      MockFile mockFile0 = new MockFile("\n");
      Options options0 = new Options();
      helpFormatter0.getArgName();
      helpFormatter0.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 495, "arg", "", options0, 91, 495, "hTs'='~is+", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      int int0 = 1;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1, (Options) null, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", true, "-");
      MockFile mockFile0 = new MockFile("usage: ", " ");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockFile mockFile2 = new MockFile("\n", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 17, (-2893), "org.apache.commons.cli.OptionValidator");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("jy", false, "\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      optionGroup1.setRequired(true);
      optionGroup1.setSelected(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(74, "jy", "jy", options0, "", true);
      helpFormatter0.getArgName();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "EH]0");
      MockFile mockFile0 = new MockFile((String) null, "");
      MockFile mockFile1 = new MockFile(mockFile0, "--");
      MockFile mockFile2 = new MockFile("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      int int0 = 9;
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "mn", options1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      options1.addOption("arg", false, "[ option: ");
      MockFile mockFile0 = new MockFile("--", "-");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockFile mockFile2 = new MockFile("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options2 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 9, "0omV{", options2);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getArgName();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(9);
      helpFormatter2.renderWrappedText(stringBuffer0, 1, 3, "\n");
      helpFormatter2.rtrim((String) null);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("arg", false, "[ option: ");
      MockFile mockFile0 = new MockFile("--", "-");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockFile mockFile2 = new MockFile("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      options1.addOptionGroup(optionGroup0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 9, "", options1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1098, "0omV{", (String) null, options1, 74, (-195), (String) null, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      Option option0 = new Option("", true, (String) null);
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp("!0J_#Eja`U!", options2);
      MockFile mockFile0 = new MockFile("--", "5u~J!o96UBsLZRWIu=|");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockFile mockFile2 = new MockFile("arg", "zF%!Isgw-Qr;xxR");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2508, "g9\"]ev", options1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "usage: ");
      Options options1 = options0.addOption("arg", true, "-");
      MockFile mockFile0 = new MockFile("usage: ", "'");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockFile mockFile2 = new MockFile("\n", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2893), "'", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Options options1 = new Options();
      MockFile mockFile0 = new MockFile("B^.XE0]0>}Bz[l)-)#");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = 23;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 23, (String) null, "YR[abG[DS", options1, (-1154), (-47), "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "g9\"]ev";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", false, "[ option: ");
      MockFile mockFile0 = new MockFile("--", "-");
      Option option0 = new Option("", true, "-");
      optionGroup0.addOption(option0);
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockFile mockFile2 = new MockFile("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options3 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 9, "0omV{", options3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getArgName();
      helpFormatter0.rtrim("[ option: ");
      helpFormatter1.getArgName();
      int int0 = (-2417);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, (-2417), options2, 74, (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("arg", false, "[ option: ");
      MockFile mockFile0 = new MockFile("--", "-");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockFile mockFile2 = new MockFile("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options2 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 9, "0omV{", options2);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "\n", "DZ1sh5", options1, 1, (-380), "g9\"]ev", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 63, "ngm<(PXU8S~sk{}", "", options0, 63, 1, "", true);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", false, "[ option: ");
      Option option0 = new Option((String) null, "0MiA8AFLxirlP6", false, "usage: ");
      Options options3 = options2.addOption(option0);
      options3.hasOption("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("usage: ");
      helpFormatter1.setOptPrefix("usage: ");
      helpFormatter0.getArgName();
      helpFormatter1.getOptPrefix();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-87), "usage: ", "-", options3, 62, 1, " ", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("arg", false, "[ option: ");
      MockFile mockFile0 = new MockFile("--", "-");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockFile mockFile2 = new MockFile("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "[ option: ");
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 719, options1, 719, 17);
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 9, (-1), "");
      helpFormatter0.renderWrappedText(stringBuffer2, 4362, (-1), "[ option: ");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "usage: ");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", true, "\n");
      helpFormatter0.printHelp("@&JVg1Z;WEOg3c", options2);
      MockFile mockFile0 = new MockFile("arg", "");
      PipedInputStream pipedInputStream0 = new PipedInputStream(74);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 63, "@&JVg1Z;WEOg3c", "", options0, 1452, 2187, "`]uaE.FfXSXNz(k", true);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      MockFile mockFile0 = new MockFile("", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "", options0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("!1");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("!1", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(722);
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getArgName();
      helpFormatter0.getOptPrefix();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", true, "\n");
      Option option0 = new Option("arg", true, "Tg/zw7A@O*iL|");
      Options options3 = options2.addOption(option0);
      Options options4 = options3.addOption("", "\n", true, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "", "N1aI6rP#s#m%rg", options4, 118, (-1), " | ", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      helpFormatter0.renderWrappedText(stringBuffer0, 2405, 2405, " ");
      helpFormatter0.printHelp(2405, " ", " ", options0, " ", false);
      Options options1 = new Options();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, "|?hfk(77+c1jvio", (String) null, options1, "$X3Z", false);
      Options options2 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, ">(5", (String) null, (Options) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("!1");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.findWrapPos("!1", 0, 0);
      StringBuffer stringBuffer0 = new StringBuffer(0);
      Options options0 = new Options();
      helpFormatter0.printHelp("--", "!1", options0, "--", true);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.helpOptions();
      Option option0 = new Option("jy", false, "\n");
      Options options1 = options0.addOptionGroup(optionGroup0);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setSelected(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(9, "jy", "jy", options1, "", true);
      helpFormatter0.getArgName();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getArgName();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, (-490), options0, 64, 31);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) options0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) "";
      char[] charArray0 = new char[5];
      charArray0[0] = 'x';
      charArray0[1] = '@';
      charArray0[2] = '0';
      charArray0[3] = '=';
      charArray0[4] = 'l';
      mockPrintWriter0.print(charArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Options options1 = new Options();
      helpFormatter0.printOptions(mockPrintWriter1, 105, options1, 31, 74);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("jy", false, "\n");
      options0.addOptionGroup(optionGroup0);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 3, options1, 3, 3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) option0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) stringBuffer1;
      objectArray0[3] = (Object) options1;
      objectArray0[4] = (Object) option0;
      objectArray0[5] = (Object) optionGroup1;
      objectArray0[6] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter1, (-2), options0, 9, 9);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "usage: ");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", true, "\n");
      helpFormatter0.printHelp("@&JVg1Z;WjEOg3c", options2);
      MockFile mockFile0 = new MockFile("arg", "");
      MockFile mockFile1 = new MockFile(mockFile0, "arg");
      File file0 = MockFile.createTempFile("usage: ", "", (File) mockFile1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "", options2);
      mockFile0.toPath();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2, "\"7k/>~mB");
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      helpFormatter0.renderWrappedText(stringBuffer0, 2405, 2405, "E");
      helpFormatter0.printHelp(2405, "E", "E", options0, "E", true);
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setNewLine("usage: ");
      helpFormatter1.setOptPrefix((String) null);
      helpFormatter0.getArgName();
      helpFormatter1.getOptPrefix();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "usage: ", " | ", options0, 3, 1819, "&t+gkr]Q)[axp0xnR%O", true);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "t#y-m", options0, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(64, "f<wA(YJ;ngr", "f<wA(YJ;ngr", options0, "E", true);
      helpFormatter0.getArgName();
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 3, 2022);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      helpFormatter0.renderWrappedText(stringBuffer0, 2405, 2405, "E");
      helpFormatter0.printHelp(2405, "E", "E", options0, "E", true);
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("E");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getArgName();
      helpFormatter0.getOptPrefix();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      File file0 = MockFile.createTempFile("3F3>kn2#-([", "lK,gMIXi_uN", (File) mockFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "%RicMfJeJ3", "[ option: ", options1, 1, 3, "", true);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("!1");
      helpFormatter0.rtrim("-");
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.findWrapPos("!1", 0, 0);
      StringBuffer stringBuffer0 = new StringBuffer(0);
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-2795);
      Options options0 = new Options();
      helpFormatter0.printHelp(2260, " ", "\"q", options0, "Q1lY*SIM[mF'G]N[_Ro", false);
      helpFormatter0.getArgName();
      helpFormatter0.getLeftPadding();
      helpFormatter0.findWrapPos("org.apache.commons.cli.OptionValidator", 2022, 2022);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("!1");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.findWrapPos("--", 0, 3394);
      StringBuffer stringBuffer0 = new StringBuffer(74);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-3298), " ] [ long ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("[ARG...]", options1, true);
      helpFormatter0.getArgName();
      helpFormatter0.createPadding(40);
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "arg");
      helpFormatter0.renderWrappedText(stringBuffer0, 1967, 1967, "arg");
      MockFile mockFile0 = new MockFile("arg");
      MockFile mockFile1 = new MockFile(mockFile0, "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter1, 2476, options0, 40, (-393));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "@&JVg1Z;WjEOg3c";
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "usage: ");
      Options options1 = options0.addOption(option0);
      Options options2 = options0.addOption(option0);
      options1.hasOption("zer$Mg)l:_qI MS");
      options2.addOption("", "", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options2, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "!1";
      helpFormatter0.setSyntaxPrefix("!1");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.findWrapPos("!1", 0, 0);
      Options options0 = new Options();
      int int0 = (-2120);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 0, options0, 0, (-2120));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("rkuK2PkPi1S:]J");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 2002, (Options) null, 3295, 13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getWidth();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 74, (Options) null, 27, 63);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = ">;}Rpd%o4";
      Option option0 = new Option("", true, ">;}Rpd%o4");
      options0.addOption(option0);
      String string1 = null;
      Options options1 = options0.addOption("", true, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.findWrapPos("[ option: ", 3, 1);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getDescPadding();
      helpFormatter0.printHelp("[", "[", options1, "rSP(OtZ/DNntq,y");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.findWrapPos("--", 598, 598);
      StringBuffer stringBuffer0 = new StringBuffer(1171);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, (-1), 14, "");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, (-1776), 14, "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      helpFormatter0.renderWrappedText(stringBuffer0, 2405, 2405, " ");
      helpFormatter0.printHelp(2405, " ", " ", options0, " ", true);
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "";
      // Undeclared exception!
      helpFormatter0.printHelp(1, "usage: ", "", options1, "w,[B9(jd Y?4=O3J&F", true);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      helpFormatter0.renderWrappedText(stringBuffer0, 2405, 2405, " ");
      helpFormatter0.printHelp(2405, " ", " ", options0, " ", false);
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, "|?hfk(77+c1jvio", (String) null, options1, "$X3Z", false);
      Options options2 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "", (String) null, (Options) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("arg", false, "[ option: ");
      helpFormatter0.printHelp(1430, "V", "", options1, (String) null, true);
      Options options2 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(107, (String) null, "", options1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, " ", " ", (Options) null, " ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      helpFormatter0.renderWrappedText(stringBuffer0, 2405, 2405, " ");
      helpFormatter0.printHelp(2405, " ", " ", options0, " ", true);
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, "|?hfk(77+c1jvio", (String) null, options1, "$X3Z", false);
      Options options2 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "", (String) null, (Options) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      helpFormatter0.printHelp(2962, "l`T*/", ")", options0, (String) null, true);
      Options options1 = new Options();
      helpFormatter0.printHelp(3, "dty'%s", "dty'%s", options1, "j&(5(plU$s98U@");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = new Option("arg", true, "usage: ");
      options0.addOption(option0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      helpFormatter0.setOptPrefix("   ");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      helpFormatter0.renderWrappedText(stringBuffer0, 2405, 2405, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2405, "", "", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 1, (-1), "t");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("X8", 3, (-1595));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 10;
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-14), "arg", "arg", options0, (String) null, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "usage: ");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", true, "\n");
      helpFormatter0.printHelp("@&JVg1Z;WjEOg3c", options2);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("!1");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.findWrapPos("!1", 0, 0);
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("-", false, "A2S5j,os%O-dfc}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("org.apache.commons.cli.ParseException");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.println((-938.522F));
      mockPrintWriter0.println(false);
      mockFile0.delete();
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.ParseException");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, 74, "arg");
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
      helpFormatter0.createPadding(74);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, 32, "' was specified but an option from this group ");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "MP@N+u8";
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-716), 37, "[");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 10, "[ Options: [ short ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      helpFormatter0.renderWrappedText(stringBuffer0, 2405, 2405, " ");
      helpFormatter0.renderWrappedText(stringBuffer0, 1, (-2), " ");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(" ", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("org.apache.commons.cli.ParseException");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.println((-938.522F));
      mockPrintWriter0.println(false);
      mockFile0.delete();
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.ParseException");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, 74, "[");
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      int int0 = 103;
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 103, "d7j", (String) null, options0, 9, 103, (String) null);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) ".;;BasH";
      objectArray0[5] = (Object) helpFormatter0;
      mockPrintWriter0.format(".;;BasH", objectArray0);
      String string0 = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        options1.addOption("-", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("", (-1016), 0);
      String string0 = ",R+R[@\\'vphsCb{5}";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(",R+R[@'vphsCb{5}", "\n");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", false, "[ option: ");
      Option option0 = new Option((String) null, "0MiA8AFLxirlP6", false, "");
      Options options3 = options2.addOption(option0);
      Options options4 = options3.addOption("", "\n", true, "-");
      helpFormatter0.printHelp("g9\"]ev", options4, false);
      helpFormatter0.setNewLine("");
      String string0 = "arg";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null, "arg");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // arg
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2405;
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      helpFormatter0.renderWrappedText(stringBuffer0, 2405, 2405, " ");
      helpFormatter0.printHelp(2405, " ", " ", options0, " ", true);
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("arg", "-");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // -
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setOptionComparator((Comparator) null);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(3328);
      helpFormatter0.setLeftPadding(74);
      helpFormatter0.getArgName();
      String string0 = "^M[9p6a]^>X=,_#7xjV";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("^M[9p6a]^>X=,_#7xjV", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setLeftPadding(3981);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLeftPadding(1016);
      helpFormatter0.createPadding(0);
      helpFormatter0.setArgName("");
      MockFile mockFile0 = new MockFile("-");
      String string0 = "4U>";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "4U>");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 4U>
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option((String) null, true, "usage: ");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption((String) null, true, "S");
      helpFormatter0.printHelp(2, "S", "S", options3, "", false);
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getSyntaxPrefix();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 941, 941, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-3620));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-455);
      helpFormatter0.rtrim("");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", "-", true, "h~nOM/AF");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1;
      helpFormatter0.setWidth(1);
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getLongOptSeparator();
      String string0 = "";
      MockFile mockFile0 = new MockFile("");
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      helpFormatter0.printHelp(2962, "l`T*/", ")", options0, (String) null, true);
      Options options1 = new Options();
      helpFormatter0.printHelp(44, "dty'%s", "dty'%s", options1, "j&(5(plU$s98U@");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("!1");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.findWrapPos("!1", 0, 0);
      String string0 = "";
      MockFile mockFile0 = new MockFile("!1", "!1");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("-", "", (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 82, options0, 82, 0);
      // Undeclared exception!
      try { 
        MockFile.createTempFile(" ", "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Bo07|=ng|*c:");
      mockPrintWriter0.println((String) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 0, "");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(722);
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "[");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 0, 871, "org.apache.commons.cli.ParseException");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "<RjrQ'q";
      String string1 = " ]";
      Options options0 = null;
      String string2 = "";
      // Undeclared exception!
      helpFormatter0.printHelp(0, "<RjrQ'q", " ]", (Options) null, "");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "ypWc";
      String string1 = "[ARG...]";
      Options options0 = new Options();
      helpFormatter0.defaultLongOptPrefix = "[ARG...]";
      Option option0 = new Option("arg", "[ARG...]", true, "usage: ");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-3329), "ypWc", "[ARG...]", options1, "ypWc");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1238, (-2377), "yL6E!\"bkLnm \"E]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1430;
      helpFormatter0.setDescPadding(1430);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 1430, 1430, "]");
      helpFormatter0.getNewLine();
      String string0 = "}\\t";
      String string1 = "O";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("\n", "}\t", false, "D");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      String string0 = "O*X!Jr96SG?/u";
      String string1 = " ]";
      helpFormatter0.setArgName("O*X!Jr96SG?/u");
      try { 
        MockURI.URI("O*X!Jr96SG?/u", "+0%&uV]Fc8M=NN%8 ", " ]", "\"5':xs.)HUg", "");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: O*X!Jr96SG?/u://+0%25&uV]Fc8%7FM=NN%258%20%20%5D?%225':xs.)HUg#
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 10;
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(21, (String) null, (String) null, options0, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.defaultLongOptPrefix = null;
      int int0 = (-139);
      helpFormatter0.defaultDescPad = (-139);
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-139), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "g<L{!NQ; {hc|N";
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLongOptSeparator("g<L{!NQ; {hc|N");
      assertEquals("g<L{!NQ; {hc|N", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.setNewLine("");
      int int0 = 16;
      helpFormatter0.createPadding(16);
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("--", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      helpFormatter0.setDescPadding(1);
      assertEquals(1, helpFormatter0.defaultDescPad);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "kJXyG>qkV!p";
      String string0 = "0";
      MockFile mockFile0 = new MockFile("0");
      MockFile mockFile1 = new MockFile(mockFile0, "cqAf=|TU'J9CBaY:rB");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      PrintWriter printWriter0 = mockPrintWriter0.append('&');
      int int0 = 2742;
      helpFormatter0.printWrapped(printWriter0, 2742, "kJXyG>qkV!p");
      int int1 = 9;
      helpFormatter0.createPadding(9);
      String string1 = "HSV#h`PJ";
      // Undeclared exception!
      try { 
        MockFile.createTempFile(" ", "HSV#h`PJ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setLongOptPrefix((String) null);
      int int0 = (-1);
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.ParseException";
      String string1 = "";
      Options options0 = new Options();
      String string2 = "";
      Option option0 = new Option("", true, " ");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        options1.addOption("--", "-", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
