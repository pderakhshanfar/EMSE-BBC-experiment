/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 14:48:26 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("APj_N9B<Nl`O");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) "APj_N9B<Nl`O";
      PrintWriter printWriter0 = mockPrintWriter0.printf("--", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 24, "APj_N9B<Nl`O", (String) null, (Options) null, 24, 3, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(1);
      Options options0 = new Options();
      options0.getOptionGroups();
      // Undeclared exception!
      helpFormatter0.printHelp("\n", "\n", options0, "\n");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)64;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 13;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 13, options0, 13, 13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1414, " ", " ", (Options) null, "ynfB)@bHcNi", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "usage: ");
      int int0 = (-1059);
      helpFormatter0.defaultDescPad = (-1059);
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter$1");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "org.apache.commons.cli.AlreadySelectedException";
      objectArray0[2] = (Object) null;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "org.apache.commons.cli.AlreadySelectedException";
      objectArray0[5] = (Object) "org.apache.commons.cli.HelpFormatter$1";
      mockPrintWriter0.format("org.apache.commons.cli.AlreadySelectedException", objectArray0);
      int int1 = 195;
      Options options0 = new Options();
      String string0 = "-&=\"G";
      Option option0 = null;
      try {
        option0 = new Option("--", "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "*!+Y.+";
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("arg", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.addOption(option0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), (String) null, options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      options2.addOption(option0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), "~SJ^):MLvC4'oj", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("W},7");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.printf(locale0, "sViJ76cZ[Kc~?", objectArray0);
      Options options0 = new Options();
      options0.getOptions();
      // Undeclared exception!
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 0, " ", options0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1613), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("--");
      Option option0 = new Option("MC", "MC", false, " (]");
      Options options1 = options0.addOption(option0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), " (]", options1);
      Options options2 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-2), options0, 1112, 5);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Option option0 = new Option("", (String) null, false, "*fZ!NAP;|:K5v~~1K");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      Options options1 = options0.addOption("", " ", true, "usage: ");
      helpFormatter0.printHelp("\n", options1, true);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "\n";
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "A CloneNotSupportedException was thrown: ";
      objectArray0[3] = (Object) "\n";
      objectArray0[4] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("A CloneNotSupportedException was thrown: ", objectArray0);
      helpFormatter0.printOptions(printWriter0, 18, options0, 18, 548);
      options0.addOption((String) null, "-", true, "--");
      helpFormatter0.printHelp("usage: ", options0, true);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, (String) null, false, " ]");
      Option option0 = new Option("", "arg", false, "jj}");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("e5NSx|$@r:9", "", options2, "0[u<o#", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("");
      int int0 = 44;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 44, (Options) null, 44, 324);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "--");
      Options options1 = options0.addOption("", "arg", true, "");
      helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", options0);
      helpFormatter0.getLeftPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("");
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 74, options1, 1, 3);
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer1, 1, options0, 865, 74);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      Options options0 = new Options();
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      String string0 = "YWLI]Fp]iR}\\j6/";
      Options options0 = new Options();
      helpFormatter0.printHelp("YWLI]Fp]iR}j6/", options0, false);
      String string1 = null;
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-340), "YWLI]Fp]iR}j6/", (String) null, options0, (-106), (-106), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-60);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator(" ] [ long ");
      helpFormatter0.setWidth(4);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (int) (byte) (-60), "Qt/I}uU$f9/[#j");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option((String) null, true, "--");
      Options options1 = options0.addOption(option0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("TMoz1\"#}tTv_");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2), (String) null, "?#e2;:p&QqeGzg~a", options1, (-1), (-2), "TMoz1\"#}tTv_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", "-", false, (String) null);
      helpFormatter0.printHelp("h>. K?$", options0, true);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("org.apache.commons.cli.AlreadySelectedException", "--", options0, "dkp{");
      helpFormatter0.getOptPrefix();
      helpFormatter0.findWrapPos("thxRE@SIF2gUXU7;'", 3, 1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-2560), 2, "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Illegal option name '");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter1.append('U');
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "\n", (String) null, options0, 32, 34, (String) null, false);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      options0.helpOptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "G)R";
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) mockPrintWriter1;
      objectArray0[3] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter1.format(locale0, "G)R", objectArray0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(printWriter0, false);
      PrintWriter printWriter1 = mockPrintWriter2.append((CharSequence) "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter1, (-2864), "(SAr-8N|", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("t|y\"]$+3xb#", "r>V*1c8CK>|L^fr{", (Options) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.getOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getDescPadding();
      helpFormatter0.setDescPadding((-933));
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 1, options1, 416, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      int int0 = 13;
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 13, "or%2s2G|Q0;n{M-{p");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "E&e");
      helpFormatter0.rtrim("");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 34, 34);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      options0.addOption((String) null, "-", true, ":#2J01T6\"]");
      helpFormatter0.printHelp("YWLI]Fp]iR}j6/", options0, true);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.renderOptions((StringBuffer) null, 3, options0, 74, 74);
      // Undeclared exception!
      try { 
        helpFormatter2.renderWrappedText((StringBuffer) null, 3, (-3995), "--");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Option option0 = new Option((String) null, false, "--");
      options0.addOption(option0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      PrintWriter printWriter0 = mockPrintWriter1.append('n');
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 9, "org.apache.commons.cli.OptionValidator", "]zf?5Dc!pf~)p=;", options0, (-2053), 32, "org.apache.commons.cli.OptionValidator", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setOptPrefix("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getDescPadding();
      helpFormatter0.setDescPadding((-933));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", options0, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setOptPrefix("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getDescPadding();
      helpFormatter0.setDescPadding((-933));
      Options options0 = new Options();
      options0.addOption("arg", "arg", true, "-");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("org.apache.commons.cli.AlreadySelectedException", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintStream mockPrintStream0 = new MockPrintStream(" ");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) options0;
      objectArray0[4] = (Object) options0;
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) "";
      PrintStream printStream0 = mockPrintStream0.format("", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printStream0, false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, "\n", "vc", options0, 3, 74, "", true);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setOptPrefix("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("\n");
      helpFormatter1.getDescPadding();
      helpFormatter0.setDescPadding((-933));
      Options options0 = new Options();
      Option option0 = new Option("", true, "]zf?5Dc!pf~)p=;");
      options0.addOption(option0);
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) null, 938, 2, "arg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append('K');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 11, (-29), "h:}3$ (+oIv@vD|+7lH");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('P');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "-");
      stringWriter2.append('P');
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.defaultDescPad = 99;
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.printHelp("YWLI]Fp]iR}j6/", options0, false);
      helpFormatter0.printHelp("\n", "", options0, "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("org.apache.commons.cli.HelpFormatter$1", 104, (-494));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(1, "--", "", options0, "", false);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Locale locale0 = new Locale("\n");
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "py_Gk1hCBIRjQ4!", true, "SO(pY{MVfmKh ts;9");
      helpFormatter0.printHelp("YWLI]Fp]iR}j6/", options1, false);
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      Options options0 = new Options();
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(44, (String) null, (String) null, options0, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Locale locale0 = new Locale("");
      Options options0 = new Options();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("usage: ");
      FileSystemHandling.createFolder(evoSuiteFile0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "&)0J_D9&~MPM[>z^Q;_", "&)0J_D9&~MPM[>z^Q;_", options0, 0, 10, "&)0J_D9&~MPM[>z^Q;_", true);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Locale locale0 = new Locale("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("usage: ");
      FileSystemHandling.createFolder(evoSuiteFile0);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptPrefix();
      mockPrintWriter0.print('M');
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 218, " ", " ", options0, 218, 10, "");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(2, "5+o;>", "org.apache.commons.cli.Util", options0, (String) null, false);
      helpFormatter0.printHelp(2954, " ", "J\"Mz:;5qw1K~tz", options0, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("<074#d0$rJ>G'");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      helpFormatter0.setLongOptPrefix("'h4Dt6QJrG!p!\u0004*");
      helpFormatter0.getNewLine();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(")J Dvx|");
      helpFormatter1.renderWrappedText(stringBuffer0, 74, 74, "'h4Dt6QJrG!p!\u0004*");
      Options options0 = new Options();
      helpFormatter0.printHelp(" | ", "org.apache.commons.cli.HelpFormatter$1", options0, "\n", false);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        options0.addOption(" ", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Locale locale0 = new Locale("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("usage: ");
      FileSystemHandling.createFolder(evoSuiteFile0);
      options0.toString();
      options0.addOption("", "py_Gk1hCBIRjQ4!", true, "SO(pY{MVfmKh ts;9");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLeftPadding();
      helpFormatter1.createPadding(2);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "", "line.separator", options0, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      int int0 = 1431;
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1431, "");
      helpFormatter0.getArgName();
      String string0 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      String string1 = ">";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "o");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        options2.addOption(" ", "", false, ">");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      helpFormatter1.renderWrappedText(stringBuffer0, 74, 3, "\n");
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", "org.apache.commons.cli.HelpFormatter", options0, "gE4", false);
      // Undeclared exception!
      try { 
        options0.addOption("9S^ij[J5W\"!XF~", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '9S^ij[J5W\"!XF~' contains an illegal character : '^'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Locale locale0 = new Locale("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.getNewLine();
      String string0 = "";
      String string1 = "org.apache.commons.cli.HelpFormatter";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(32, "usage: ", "FY>eP~Y+I?+2", (Options) null, "usage: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("|^|hmxgjvc3.L3hp8h");
      StringBuffer stringBuffer1 = new StringBuffer("-");
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer1, (-4879), 3, "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      helpFormatter0.getNewLine();
      MockFile mockFile0 = new MockFile("gE4", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      int int0 = 31;
      helpFormatter1.renderWrappedText(stringBuffer0, 31, 0, "");
      Options options0 = new Options();
      helpFormatter1.defaultLongOptPrefix = ">";
      // Undeclared exception!
      helpFormatter0.printHelp(" | ", "org.apache.commons.cli.HelpFormatter", options0, " | ", false);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(74);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      int int0 = (-24);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-24), (Options) null, 74, (-24));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.getOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("\n");
      helpFormatter1.getDescPadding();
      helpFormatter0.setDescPadding((-933));
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "usage: ");
      Options options1 = options0.addOption(option0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, (-933), "fP?8(0[YVhfqvd6?[h!", (String) null, options1, 3, 34, ".[TwaW`iz?", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockFile mockFile0 = new MockFile("gE4", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      helpFormatter1.renderWrappedText(stringBuffer0, 31, 74, "");
      Options options0 = new Options();
      Option option0 = new Option("", ", ", true, "arg");
      Options options1 = options0.addOption(option0);
      options1.hasOption("");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1860, "d:~jJY&[r)ggb)4h@", options1);
      Options options2 = new Options();
      options0.addOption("arg", true, "\n");
      helpFormatter0.printHelp("H9r.O148j>,Qc6I3", "gE4", options0, "");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      Locale locale0 = Locale.FRENCH;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) stringBuffer0;
      objectArray0[1] = (Object) stringBuffer0;
      objectArray0[2] = (Object) stringBuffer0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) " [ARG]";
      objectArray0[5] = (Object) stringBuffer0;
      objectArray0[6] = (Object) stringBuffer0;
      objectArray0[7] = (Object) locale0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, " [ARG]", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "4'O^");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("arg", (String) null, true, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2293), "Z9[{ntINrH#L", options3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("usage: ").when(comparator0).toString();
      doReturn((-295)).when(comparator0).compare(anyString() , anyString());
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      options0.addOption("", true, "arg");
      Option option0 = new Option("", false, "cmdLineSyntax not provided");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("n", false, "");
      options2.getOptionGroups();
      helpFormatter0.printHelp("cmdLineSyntax not provided", options2);
      Options options3 = new Options();
      options2.addOption("", "7}?c", true, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("cmdLineSyntax not provided", options1, true);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      helpFormatter1.renderOptions(stringBuffer0, (-1), options0, 1, 116);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (-1395), "7}?c", "arg", options1, (-1), 117, (String) null, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(2, "5+o;>", "org.apache.commons.cli.Util", options0, (String) null, false);
      helpFormatter0.getArgName();
      MockFile mockFile0 = new MockFile("\n", "");
      MockFile.createTempFile("arg", "5+o;>", (File) mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Hda");
      PrintWriter printWriter0 = mockPrintWriter0.append('@');
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, 5, "arg", "\n", options0, 74, (-1675), "-", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setOptPrefix("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("\n");
      helpFormatter1.getDescPadding();
      helpFormatter0.setDescPadding((-933));
      Options options0 = new Options();
      Option option0 = new Option("", true, "]zf?5Dc!pf~)p=;");
      Options options1 = options0.addOption(option0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter2.printHelp((PrintWriter) null, 1, "line.separator", "", options1, 1, 3, "jxLJ6P+_&pg o", true);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth((-263));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("cB5", (String) null, options0, "cB5");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2);
      helpFormatter0.defaultLeftPad = (-2);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("B\"(v'gWcrU", false, "Ko2+/>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'B\"(v'gWcrU' contains an illegal character : '\"'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("").when(comparator0).toString();
      doReturn(1).when(comparator0).compare(anyString() , anyString());
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      options0.addOption("", true, "arg");
      Option option0 = new Option("", false, "cmdLineSyntax not provided");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("n", false, "");
      helpFormatter0.printHelp("cmdLineSyntax not provided", options2);
      Options options3 = new Options();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getNewLine();
      helpFormatter0.findWrapPos("", 7, (-1));
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = ")ftiA%Uo \"h";
      Options options0 = new Options();
      String string0 = "arg";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-76), "NO_ARGS_ALLOWED", "arg", options0, "NO_ARGS_ALLOWED", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(2, "5+o;>", "org.apache.commons.cli.Util", options0, (String) null, false);
      helpFormatter0.getArgName();
      MockFile mockFile0 = new MockFile("\n", "");
      File file0 = MockFile.createTempFile("arg", "5+o;>", (File) mockFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1227, (String) null, options0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setOptPrefix("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("\n");
      helpFormatter1.getDescPadding();
      helpFormatter0.setDescPadding((-933));
      Options options0 = new Options();
      Option option0 = new Option("", true, "]zf?5Dc!pf~)p=;");
      Options options1 = options0.addOption(option0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) null, 2556, "line.separator", "", options1, 1, 3, "jxLJ6P+_&pg o", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      doReturn(0).when(comparator0).compare(anyString() , anyString());
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "arg");
      String string0 = "";
      boolean boolean0 = false;
      Option option0 = new Option("", false, "cmdLineSyntax not provided");
      Options options2 = options0.addOption(option0);
      Options options3 = options2.addOption("n", false, "");
      helpFormatter0.printHelp("cmdLineSyntax not provided", options3);
      Options options4 = new Options();
      // Undeclared exception!
      try { 
        options1.addOption("-", "-", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 3, "\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("RL", "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      Options options2 = options1.addOptionGroup(optionGroup1);
      Options options3 = options2.addOption(option0);
      helpFormatter1.printHelp(" ", "has already been selected: '", options3, "|2`[KG_YR2bw%{?Xs#");
      helpFormatter0.printHelp(34, "--", "4rfFnhDEW", options0, "");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockFile mockFile0 = new MockFile("gE4", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Options options0 = new Options();
      String string0 = "";
      options0.hasOption("\n");
      Option option0 = new Option("", "-", false, "/=),yp>(yt*MxBY2b");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 182, "/=),yp>(yt*MxBY2b", options1);
      mockPrintWriter0.append('@');
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1623, (String) null, "p@SQoEqY ", options0, 5, 31, "The option '", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-2);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      Option option0 = new Option("e", false, "-");
      Option option1 = new Option("", "--");
      Options options1 = options0.addOption(option1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1), "", "", options1, (-185), 2093, "]", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      String string0 = "--";
      MockFile mockFile0 = new MockFile("gE4", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = 182;
      Options options0 = new Options();
      options0.hasOption("\n");
      StringWriter stringWriter0 = new StringWriter(32);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 32, options0, 31, 13);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, 13, 10, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "Cannot add value, list full.";
      helpFormatter0.setLongOptSeparator("49+rh");
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("--");
      helpFormatter1.setNewLine("Ia[<G+B4f=c2|9[s[~");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getDescPadding();
      helpFormatter1.setDescPadding(3);
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      String string0 = "1}Z^em.8r+";
      Option option0 = null;
      try {
        option0 = new Option("--", true, "xwTMssyj*Ih165;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("--");
      helpFormatter0.getArgName();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getSyntaxPrefix();
      String string0 = " ]";
      String string1 = "";
      MockFile mockFile0 = new MockFile("usage: ", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = 0;
      String string2 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1841), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = "";
      boolean boolean0 = false;
      Options options2 = options1.addOption("", false, "usage: ");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Options options3 = options2.addOption((String) null, "", false, "--");
      helpFormatter0.printHelp("'", "'", options3, "The option '");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 4387, 4387, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setOptPrefix("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("\n");
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("arg", "-", true, "x1ZS");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-242), options3, 74, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "Cannot add value, list full.";
      helpFormatter0.defaultSyntaxPrefix = "Cannot add value, list full.";
      Options options0 = new Options();
      Option option0 = new Option("", false, "6n5=L/F)CX.4#");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("Cannot add value, list full.", options1);
      String string0 = "EAlc";
      Options options2 = new Options();
      // Undeclared exception!
      try { 
        options2.addOption("(9WmwZCK", "--", false, "(9WmwZCK");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '(9WmwZCK' contains an illegal character : '('
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      mockPrintWriter0.print((float) 1);
      Locale locale0 = new Locale("");
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "--", (Object[]) null);
      helpFormatter0.printWrapped(printWriter0, 0, "");
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "py_Gk1hCBIRjQ4!", true, "SO(pY{M\"HmKh ts;9");
      helpFormatter0.printHelp("YWLI]Fp]iR}j6/", options1, false);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      String string0 = "F3N";
      String string1 = "?\"?Ay1$";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption(" ", "-", true, "[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "RfchRry,A$'";
      helpFormatter0.setNewLine("");
      helpFormatter0.getArgName();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getSyntaxPrefix();
      MockFile mockFile0 = new MockFile("", " ]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(3);
      helpFormatter0.getLeftPadding();
      helpFormatter0.defaultLeftPad = 3;
      helpFormatter0.rtrim("j*H=y8tG}+sksef#");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "eNdB,%8'v!-:};;kB$p";
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.close();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-4120), "@c[q?F+Za,i$", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getNewLine();
      String string0 = "J\"Mz:;5qw1K~tz";
      // Undeclared exception!
      helpFormatter0.printHelp(1, "$^E{", "J\"Mz:;5qw1K~tz", (Options) null, " ");
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1350), "t+i$t~O", "t+i$t~O", (Options) null, "org.apache.commons.cli.HelpFormatter");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getWidth();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setOptPrefix("%X&Vu]SpI]");
      Options options0 = new Options();
      options0.getOptions();
      // Undeclared exception!
      helpFormatter0.printHelp(1, "%X&Vu]SpI]", "%X&Vu]SpI]", options0, "%X&Vu]SpI]");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = null;
      helpFormatter0.setWidth(0);
      int int0 = 0;
      String string0 = null;
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator((String) null);
      options0.helpOptions();
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.defaultDescPad = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-5933);
      helpFormatter0.defaultLeftPad = (-5933);
      Options options0 = new Options();
      String string0 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      String string1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", (String) null, options0, "org.apache.commons.cli.HelpFormatter$OptionComparator");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setOptionComparator((Comparator) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "org.apache.commons.cli.HelpFormatter$OptionComparator", (Options) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp("-", "   ", options0, ")ftiA%Uo \"h");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.findWrapPos(")ftiA%Uo \"h", 0, 0);
      Option option0 = null;
      try {
        option0 = new Option("+vs?>5U`-j:^S*Ql", "xs4K@AP~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '+vs?>5U`-j:^S*Ql' contains an illegal character : '+'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockFile mockFile0 = new MockFile("gE4", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      boolean boolean0 = false;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      int int0 = 31;
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 31, 74, "");
      Options options0 = new Options();
      helpFormatter0.printHelp(" | ", "org.apache.commons.cli.HelpFormatter", options0, " | ", false);
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer1, 1, 1657, "usage: ");
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-2);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[ Options: [ short ", "[ Options: [ short ", (Options) null, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockFile mockFile0 = new MockFile("gE4", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Options options0 = new Options();
      options0.hasOption("\n");
      Option option0 = new Option("", "-", false, "/=),yp>(yt*MxBY2b");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 182, "/=),yp>(yt*MxBY2b", options1);
      Options options2 = new Options();
      helpFormatter0.printHelp(" ]", options2);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2), (-1559), "c\"*~cZLjV.(7");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2280);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      mockPrintWriter0.print(true);
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "|St ?oI8FJ[C", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 2280, 0, "|St ?oI8FJ[C");
      helpFormatter0.setDescPadding((-2));
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "8;=7q^NTO");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setLongOptPrefix("");
      PrintWriter printWriter0 = null;
      int int0 = 2743;
      String string1 = helpFormatter0.createPadding(2743);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 2743, string1, (String) null, options0, (-1), 0, string1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setNewLine("-");
      helpFormatter0.getDescPadding();
      helpFormatter0.setDescPadding((-933));
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "1}Z^em.8r+");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3, " [ARG]", "nI7S P8?ssza;9C^D", options1, (-1821), (-2308), "line.separator", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.createPadding(0);
      helpFormatter0.setWidth(0);
      helpFormatter0.getOptPrefix();
      int int0 = (-1);
      String string1 = null;
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("--", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      StringWriter stringWriter0 = new StringWriter();
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter0.write("arg");
      mockPrintWriter1.println("--");
      PrintWriter printWriter0 = mockPrintWriter1.append('j');
      int int0 = 10;
      helpFormatter0.defaultLongOptPrefix = ".^!>B";
      mockPrintWriter0.println(1);
      String string0 = "";
      helpFormatter0.printWrapped(printWriter0, 10, 10, "");
      String string1 = "oKd#GCp1@FXN+a&_";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option(".^!>B", "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '.^!>B' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.rtrim("");
      helpFormatter0.getWidth();
      String string1 = "s*2K3u&;";
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.chars();
      // Undeclared exception!
      try { 
        stringBuffer0.insert(2146, (long) 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2146
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      String string0 = "ui ";
      Options options0 = new Options();
      boolean boolean0 = true;
      options0.addOption("EJ", "org.apache.commons.cli.HelpFormatter$OptionComparator", true, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
      try { 
        optionGroup0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.OptionGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('K');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "h:}3$ (+$oIv@vD+7lH");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1976, "eI?wco2SMewe/fa");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      helpFormatter0.defaultLongOptPrefix = ",g*8>.";
      String string0 = helpFormatter0.getSyntaxPrefix();
      assertEquals("usage: ", string0);
  }
}
