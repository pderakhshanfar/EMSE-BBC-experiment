/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 17:59:07 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-670);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("P", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      Options options0 = new Options();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("gSN", true, "   ");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Option option1 = new Option("", "usage: ");
      optionGroup1.addOption(option1);
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      options0.addOptionGroup(optionGroup2);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "   ", "jUamiT&pyR)<kXlsI", options0, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "H";
      Option option0 = new Option("H", "-", true, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.Util", "'", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      Option option0 = new Option((String) null, true, "?2:iIe'74,hhr:dM");
      options0.addOption(option0);
      Option option1 = new Option("", "", false, ">");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      doReturn(0).when(comparator0).compare(anyString() , anyString());
      helpFormatter0.optionComparator = comparator0;
      Options options1 = options0.addOption(option1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("y,voN?UMB@9");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      helpFormatter0.printHelp(printWriter0, 13, "%2c_ >&}", "arg", options1, 13, 13, "", false);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("PH", false, "usage: ");
      optionGroup0.setSelected(option0);
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp((-1), "PH", "x|>&Fj^l+PPz}v", options0, "", false);
      helpFormatter0.getDescPadding();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "\n");
      Options options1 = options0.addOption("", "", true, "org.apache.commons.cli.HelpFormatter$1");
      helpFormatter0.printHelp("L0UoJK", options1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("H", true, "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(3, " ", "\n", options0, "\n", true);
      helpFormatter0.getDescPadding();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(34);
      helpFormatter0.setLeftPadding((-2170));
      Options options0 = new Options();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 10, 2282, "CF0X\"");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2945), "u(^=?DiRBXtiI}", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('9');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, " ", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "--", false, ".QrP0d0FpJ6`k9S");
      int int0 = 13;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, (-215), options1, 13, (-761));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 10, "zF8Uf");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.defaultDescPad = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "arg", "", options1, "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_WIDTH;
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "");
      Options options2 = options1.addOption("", false, "\n");
      helpFormatter0.printHelp("-", options1);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2581), options2, 21, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "arg", true, "<");
      Options options2 = options1.addOption("", true, "-");
      Option option0 = new Option("EBeIWhB6", "arg");
      Options options3 = options2.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 9, "A CloneNotSupportedException was thrown: ", options3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptionComparator((Comparator) null);
      File file0 = MockFile.createTempFile("arg", "--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(file0);
      Locale locale0 = Locale.ENGLISH;
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 3, "}r$aZ>L:");
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "--", "CpyQv,a<n#q", options0, 3, 74, "org.apache.commons.cli.Util");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.rtrim(">");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.setWidth(1);
      options1.getOptionGroups();
      // Undeclared exception!
      helpFormatter0.printHelp("-", options1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "";
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setDescPadding(0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      StringBuffer stringBuffer1 = new StringBuffer();
      stringBuffer0.append(stringBuffer1);
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      URI uRI0 = MockURI.aFileURI;
      helpFormatter0.defaultWidth = 744;
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setOptionComparator((Comparator) null);
      MockFile mockFile0 = new MockFile("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.US;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("usage: ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 126, "\"", "NxZ>D", options0, 0, 3, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      URI uRI0 = MockURI.aFileURI;
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setOptionComparator((Comparator) null);
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.renderOptions((StringBuffer) null, (-100), options0, 46, 46);
      Locale locale0 = Locale.US;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-2728), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1617);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      mockPrintWriter0.write("TkHC|`e$j7N", 0, 3);
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "TkHC|`e$j7N";
      objectArray0[1] = (Object) mockPrintWriter0;
      mockPrintWriter0.write("arg", 3, 0);
      objectArray0[2] = (Object) "TkHC|`e$j7N";
      objectArray0[3] = (Object) mockPrintWriter0;
      mockPrintWriter0.printf(locale0, "}dx9HYMey!PV", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1617), (-1617), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 3;
      PrintWriter printWriter0 = null;
      String string0 = " :: ";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 0, (-1124), "o|1o?Qb/Z'");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getWidth();
      helpFormatter1.getSyntaxPrefix();
      Options options0 = new Options();
      options0.addOption("arg", false, (String) null);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("yJ;9d)[ZCVi~`I*-", options0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "arg", true, "--");
      options0.addOption(option0);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "dtB", (String) null, options0, "Cannot add value, list full.", true);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "");
      helpFormatter0.printHelp("usage: ", options1);
      options0.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 74, " :: ", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 2501, options0, 2501, 2501);
      boolean boolean0 = true;
      Option option0 = new Option("", true, "");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options1.addOption("usage: ", (String) null, false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      helpFormatter0.setLeftPadding((-2945));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "%%_H`)gj3i", "%%_H`)gj3i", options0, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "' was specified but an option from this group ";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("' was specified but an option from this group ");
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 63, "' was specified but an option from this group ", "(:{{NhR;dqU", options0, 677, 63, (String) null);
      helpFormatter0.setArgName("[GhSJPY*bpqBD+rrl");
      mockPrintWriter0.append('B');
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "' was specified but an option from this group ");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      String string0 = "";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("\n");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptionComparator((Comparator) null);
      File file0 = MockFile.createTempFile("arg", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Locale locale0 = Locale.ENGLISH;
      mockPrintWriter0.printf("--", (Object[]) null);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, "arg", "", options0, 3, 1, "usage: ", false);
      helpFormatter1.printOptions(mockPrintWriter0, (-1515), options0, 1, 13);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(74);
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      URI uRI0 = MockURI.aFileURI;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Option option0 = new Option("arg", true, "]2y>V_BC;'gs83J6L");
      OptionGroup optionGroup0 = new OptionGroup();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) optionGroup0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) option0;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) uRI0;
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) "]2y>V_BC;'gs83J6L";
      objectArray0[8] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 1134, (String) null, "%2c_ >&}", options0, (-1), (-2), "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(74);
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      URI uRI0 = MockURI.aFileURI;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultDescPad = (-1218);
      helpFormatter1.setOptionComparator((Comparator) null);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(" ", "arg", options1, "arg");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      int int0 = (-1);
      Options options1 = new Options();
      String string0 = "";
      options1.addOption("arg", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2494, "LHWZA9W", "", (Options) null, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("P.D}C~AscQ/[4tg^#jP");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      helpFormatter0.setOptionComparator((Comparator) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 0, ">");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 30, 30);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      Option option0 = new Option("", "", false, ">");
      Options options1 = options0.addOption(option0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("y,voN?UMB@9");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      byte[] byteArray0 = new byte[4];
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "Cannot add value, list full.");
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)88;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      helpFormatter0.printHelp(printWriter0, 13, "%2c_ >&}", "arg", options1, 13, 13, "", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-788), "<", (String) null, options1, 4148, (int) (byte)88, "{lo?rE[;hCX-a~:0ZN.");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      Option option0 = new Option("", "usage: ", true, "\n");
      Options options1 = options0.addOption(option0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) options0;
      objectArray0[3] = (Object) options1;
      objectArray0[4] = (Object) option0;
      objectArray0[5] = (Object) option0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.printUsage(printWriter0, 1360, "", options2);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(3);
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.CHINA;
      helpFormatter0.defaultDescPad = 1;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("zo0el[.~^(a@,*g&X@");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "zo0el[.~^(a@,*g&X@";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) options0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      PrintWriter printWriter0 = mockPrintWriter1.printf("usage: ", objectArray0);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 1, "nga~>gqget/cu=U", options0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.getDescPadding();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "");
      helpFormatter0.printHelp("usage: ", options1);
      Options options2 = options1.addOption("arg", ">", true, "--");
      helpFormatter0.printHelp(886, "sGk)-`X4m@T9t{8*]h", "sGk)-`X4m@T9t{8*]h", options2, "");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "");
      optionGroup0.addOption(option0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "--");
      helpFormatter0.getWidth();
      helpFormatter0.createPadding(0);
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.rtrim("");
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      Option option0 = new Option("", "", false, ">");
      Options options1 = options0.addOption(option0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("y,voN?UMB@9");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      helpFormatter0.printHelp(printWriter0, 13, "%2c_ >&}", "arg", options1, 13, 13, "", false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2393, "", options1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLeftPadding(1);
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(34, "krKdNQ:9", "krKdNQ:9", options0, "ZoHhQiw0d ");
      helpFormatter0.findWrapPos("krKdNQ:9", 3727, 3727);
      helpFormatter0.getLongOptSeparator();
      Options options1 = new Options();
      Options options2 = options1.addOption("", true, "krKdNQ:9");
      helpFormatter0.printHelp((-1), " ", "krKdNQ:9", options2, "Iak", true);
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Iak");
      PrintWriter printWriter0 = mockPrintWriter0.append('/');
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1), "[xM5V6;.", " ", options1, (-38), (-1), "\"");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      Options options1 = new Options();
      options0.addOption("", false, "--");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("[z", options1);
      StringBuffer stringBuffer0 = new StringBuffer("");
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 2049, options0, 74, 0);
      // Undeclared exception!
      try { 
        helpFormatter2.renderWrappedText(stringBuffer1, 3, (-1613), "usage: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(3);
      helpFormatter0.setOptPrefix("j");
      Options options0 = new Options();
      boolean boolean0 = true;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.CHINA;
      helpFormatter0.defaultDescPad = 1;
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.printf(locale0, "", objectArray0);
      String string0 = null;
      Options options1 = options0.addOption("arg", (String) null, false, "");
      options1.helpOptions();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2, options0, 1002, 6);
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer1, 3, 74, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      Option option0 = new Option("", "", false, ">");
      Option option1 = new Option("", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      Options options1 = options0.addOptionGroup(optionGroup1);
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2889), "", "", options1, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      int int0 = 64;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 4355, (Options) null, 0, 64);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      Option option0 = new Option("", "", false, ">");
      options0.addOption(option0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("y,voN?UMB@9");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "";
      mockPrintWriter0.printf("", objectArray0);
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 3, "");
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      Option option0 = new Option("", "", false, ">");
      Options options1 = options0.addOption(option0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("y,voN?UMB@9");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintWriter0;
      char[] charArray0 = new char[2];
      charArray0[0] = '>';
      charArray0[1] = '.';
      mockPrintWriter0.write(charArray0);
      objectArray0[1] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      helpFormatter0.printHelp(printWriter0, 13, "%2c_ >&}", "arg", options1, 13, 13, "", false);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.CHINA;
      helpFormatter1.setOptionComparator((Comparator) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      Locale locale1 = Locale.ENGLISH;
      mockPrintWriter1.printf(locale1, "arg", (Object[]) null);
      mockFile0.getCanonicalPath();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 1, " ] [ long ");
      helpFormatter1.printHelp(1866, "usage: ", " ] [ long ", options0, " ");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.CHINA;
      helpFormatter0.defaultDescPad = 1;
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      Options options1 = options0.addOption("arg", (String) null, false, "' was specified but an option from this group ");
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 1, "\n", (String) null, options1, 74, 3, "arg", true);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Ddb}bFjb?}3]L+c;");
      mockPrintWriter0.println(3);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "Ddb}bFjb?}3]L+c;";
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) options0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[3] = (Object) "";
      objectArray0[5] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(" ", objectArray0);
      Options options1 = options0.addOption("", "\"0u]lEZh0ADvvMb<#", false, "arg");
      helpFormatter0.printHelp(printWriter0, 44, "Ddb}bFjb?}3]L+c;", "", options1, 74, 1, "", false);
      helpFormatter0.getWidth();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      helpFormatter1.printHelp(1, "d ;d", "--", options1, "", false);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      Option option0 = new Option("", "", false, ">");
      Options options1 = options0.addOption(option0);
      options0.addOption((String) null, false, " ] [ long ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("jjb/8NRkq_55kw#", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(74, "%%_H`)gj3i", "%%_H`)gj3i", options0, "");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setLongOptSeparator("E-");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("E-", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("--");
      Options options0 = new Options();
      Option option0 = new Option((String) null, "--", false, "-");
      Options options1 = options0.addOption(option0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "--";
      objectArray0[1] = (Object) "y,voN?UMB@9";
      objectArray0[2] = (Object) ">";
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) ">";
      mockPrintWriter0.printf("s-K#.9l", objectArray0);
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "--");
      optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup0);
      helpFormatter1.printHelp("yf;O_", "--", options0, "-", true);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      Options options1 = options0.addOption("arg", (String) null, false, "' was specified but an option from this group ");
      helpFormatter0.printHelp(printWriter0, 44, "\n", (String) null, options1, 74, 3, "arg", true);
      helpFormatter0.getWidth();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      Option option0 = new Option("", "", false, ">");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption((String) null, false, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options2.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1857, "z4+)0N>[{A'OE", ">", options0, 1266, 32, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName(":E;]zN>c1n4%O@");
      StringBuffer stringBuffer0 = new StringBuffer("org.apache.commons.cli.ParseException");
      helpFormatter0.renderWrappedText(stringBuffer0, 13, (-60), "$p'pTh^@x08~");
      helpFormatter0.getWidth();
      MockFile mockFile0 = new MockFile("usage: ");
      MockFile mockFile1 = new MockFile(mockFile0, "$p'pTh^@x08~");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptionComparator((Comparator) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Locale locale0 = Locale.ENGLISH;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", (Object[]) null);
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped(printWriter0, 1, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      Option option0 = new Option("", "", false, ">");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption((String) null, false, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options2.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("$|lJ", "org.apache.commons.cli.HelpFormatter$1", options2, ">", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(1266, "org.apache.commons.cli.HelpFormatter$1", "org.apache.commons.cli.HelpFormatter$1", options1, "{6la1%q8T+de &", false);
      helpFormatter0.setArgName((String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getSyntaxPrefix();
      Options options2 = new Options();
      helpFormatter1.printHelp("usage: ", options0);
      helpFormatter0.createPadding(74);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.getDescPadding();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "");
      helpFormatter0.printHelp("usage: ", options1);
      Options options2 = new Options();
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing(" h3");
      options2.addOption(option0);
      helpFormatter0.printHelp("usage: ", options2, false);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      Option option0 = new Option((String) null, true, "?2:iIe'74,hhr:dM");
      options0.addOption(option0);
      Option option1 = new Option("", "", false, ">");
      Options options1 = options0.addOption(option1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("y,voN?UMB@9");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 13, "%2c_ >&}", "arg", options1, 13, 13, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1703);
      String string0 = "n$UTn7:\\u(";
      helpFormatter0.setOptPrefix(string0);
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "' was specified but an option from this group ";
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) ">";
      objectArray0[4] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, string0, objectArray0);
      options0.addOption("", "0<qw\u0005VmdgL~", true, string0);
      helpFormatter1.printHelp(printWriter0, 3, "'W%+fL+", " ", options0, 3, 3, "", true);
      helpFormatter1.getWidth();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      PrintWriter printWriter0 = null;
      int int0 = 1266;
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = new StringBuffer();
      StringBuffer stringBuffer2 = stringBuffer0.append(stringBuffer1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer2, (-2), (-2406), "V0Q4&3a'J'kZ;");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      Option option0 = new Option((String) null, "usage: ", false, "-");
      options0.addOption(option0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("y,voN?UMB@9");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) ">";
      objectArray0[2] = (Object) null;
      mockPrintWriter0.printf(">", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "y,voN?UMB@9", "", options0, (-1), 44, "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      Option option0 = new Option("", "pE*fD?K0mg8| j,Otm", false, " ");
      options0.addOption(option0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("y,voN?UMB@9");
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.printf("~i!Eb0", objectArray0);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("UWN`0rEG(,1no?", ">", options0, "org.apache.commons.cli.ParseException", true);
      helpFormatter0.findWrapPos("k&azWnrlSX{E#mm%", (-1), 3);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.getDescPadding();
      helpFormatter0.setOptionComparator((Comparator) null);
      MockFile mockFile0 = new MockFile("]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3203, "]");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "ou^b<ycvS", options1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.CHINA;
      mockFile0.setExecutable(false, true);
      Locale locale1 = Locale.ENGLISH;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale1, "usage: ", (Object[]) null);
      Options options0 = new Options();
      options0.addOption("", "-", true, ":{gKz~");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 410, "", "arg", options0, 3, 1538, " ", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName(":E;]zN>c1n4%O@");
      StringBuffer stringBuffer0 = new StringBuffer(":E;]zN>c1n4%O@");
      helpFormatter0.renderWrappedText(stringBuffer0, 13, 13, ":E;]zN>c1n4%O@");
      helpFormatter0.getWidth();
      MockFile mockFile0 = new MockFile(" ]");
      MockFile mockFile1 = new MockFile(mockFile0, " ]");
      helpFormatter0.setOptionComparator((Comparator) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.ENGLISH;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "usage: ", (Object[]) null);
      helpFormatter0.printWrapped(printWriter0, 13, " ]");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultArgName = "";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.rtrim("!fWg.JUkG'^) q");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.rtrim("!fWg.JUkG'^) q");
      helpFormatter0.getArgName();
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile1);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "%%_H`)gj3i";
      Options options0 = new Options();
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "", options0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      Option option0 = new Option("", "", false, ">");
      Options options1 = options0.addOption(option0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("y,voN?UMB@9");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "";
      mockPrintWriter0.printf("", objectArray0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("org.apache.commons.cli.ParseException", "y,voN?UMB@9", options0, "y,voN?UMB@9", true);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setDescPadding(0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.CHINA;
      mockFile0.setExecutable(false, false);
      mockPrintWriter0.printf(locale0, "-", (Object[]) null);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "cmdLineSyntax not provided", true, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-391), "'", "dp<%j", options1, 1, 74, "--", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.getDescPadding();
      helpFormatter0.setOptionComparator((Comparator) null);
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2140, "");
      helpFormatter0.printHelp("o\"w9E:]9#E}%^co", "", options1, "o\"w9E:]9#E}%^co");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      Option option0 = new Option("", "", false, ">");
      options0.addOption(option0);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 31, 44, "");
      helpFormatter0.getWidth();
      MockFile mockFile0 = new MockFile("vGe.op)-T");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      helpFormatter0.setOptionComparator((Comparator) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-834), "aYbjKX!F/RPl:B79ZPq");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(1266, "org.apache.commons.cli.HelpFormatter$1", "org.apache.commons.cli.HelpFormatter$1", options1, "{6la1%q8T+de &", false);
      helpFormatter0.setArgName((String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getSyntaxPrefix();
      Options options2 = new Options();
      helpFormatter1.printHelp("usage: ", options0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 32, (-4660), "bdG_2");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      Option option0 = new Option("", "", false, ">");
      Options options1 = options0.addOption(option0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("y,voN?UMB@9");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      helpFormatter0.printHelp(printWriter0, 13, "%2c_ >&}", "", options1, 13, 13, "", false);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      Option option0 = new Option("", "", true, ">");
      Options options1 = options0.addOption(option0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("y,voN?UMB@9");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      helpFormatter0.printHelp(printWriter0, 13, "%2c_ >&}", "arg", options1, 13, 13, "", true);
      StringWriter stringWriter0 = new StringWriter(2);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      StringWriter stringWriter2 = stringWriter1.append('/');
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 2, options0, (-2), 1021);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      Options options0 = new Options();
      options0.hasShortOption("org.apache.commons.cli.AlreadySelectedException");
      String string1 = "_0yP~";
      helpFormatter0.setLongOptPrefix("_0yP~");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringBuffer0.append((long) 1);
      stringWriter0.append('r');
      stringWriter0.append('\'');
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1, options0, (-204), 3739);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-204);
      Options options0 = new Options();
      boolean boolean0 = true;
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-204), "org.apache.commons.cli.Option", "M07:R4mp{|c", options1, "org.apache.commons.cli.Option");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "' was specified but an option from this group ";
      objectArray0[1] = (Object) ">";
      objectArray0[2] = (Object) uRI0;
      objectArray0[3] = (Object) "--";
      objectArray0[4] = (Object) helpFormatter1;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, ">", objectArray0);
      Options options1 = options0.addOption("", "--", true, "--");
      // Undeclared exception!
      helpFormatter1.printHelp(printWriter0, 1, "dp<%j", "\n", options1, 3, 74, "--", true);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printHelp("23D;r", options0);
      StringBuffer stringBuffer0 = new StringBuffer(3590);
      helpFormatter0.renderWrappedText(stringBuffer0, 1782, (-2170), "Bf:W!W*kFPD;");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", "uDL", false, "usage: ");
      Options options3 = new Options();
      Options options4 = options2.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setDescPadding(0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      StringBuffer stringBuffer1 = new StringBuffer();
      stringBuffer0.append(stringBuffer1);
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 31, "<");
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(911);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      mockPrintWriter0.write("TkHC|`e$j7N", 0, 3);
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "TkHC|`e$j7N";
      objectArray0[1] = (Object) mockPrintWriter0;
      mockPrintWriter0.write("arg", 3, 0);
      objectArray0[2] = (Object) "TkHC|`e$j7N";
      objectArray0[3] = (Object) mockPrintWriter0;
      mockPrintWriter0.printf(locale0, "}dx9HYMey!PV", objectArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 911, 911, "");
      helpFormatter0.defaultDescPad = (-1617);
      helpFormatter0.setSyntaxPrefix(">a[`re)Tzdl");
      helpFormatter0.findWrapPos("org.apache.commons.cli.AlreadySelectedException", (-2), (-2));
      helpFormatter0.getArgName();
      helpFormatter0.setSyntaxPrefix("4qhsu!;W");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-4), ">a[`re)Tzdl");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "uDL", false, "usage: ");
      Option option0 = new Option("arg", "arg", true, "arg");
      optionGroup0.setSelected(option0);
      Option option1 = new Option((String) null, true, "qf`10[");
      Options options3 = options2.addOption(option1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(13, "--", "--", options3, "qf`10[");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2);
      helpFormatter0.setLeftPadding((-2));
      String string0 = "";
      Options options0 = new Options();
      boolean boolean0 = false;
      Option option0 = null;
      try {
        option0 = new Option("usage: ", "", false, "8e~y");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      int int0 = 0;
      String string0 = "No[24u<Bo^\"bOT(";
      String string1 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("usage: ", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("zIu<e{xa$5");
      int int0 = (-2959);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-2959), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "p7~kI1:` 4%XCDx=I";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-204), "p7~kI1:` 4%XCDx=I", (String) null, options0, (String) null, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName(":E;]zN>c1n4%O@");
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp("arg", "usage: ", options0, "arg", true);
      helpFormatter0.getWidth();
      helpFormatter0.rtrim(":E;]zN>c1n4%O@");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1703);
      String string0 = "n$UTn7:\\u(";
      helpFormatter0.setOptPrefix(string0);
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "' was specified but an option from this group ";
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) ">";
      objectArray0[4] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, string0, objectArray0);
      options0.addOption("", "0<qw\u0005VmdgL~", true, string0);
      helpFormatter1.printHelp(printWriter0, 3, "'W%+fL+", " ", options0, 3, 3, "", true);
      helpFormatter1.getWidth();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.printWrapped(printWriter0, 69, "OEIo6~Uoj AOq6$K&\"c");
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 401, "\n", " ", options0, 1678, 31, "");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "%%_H`)gj3i";
      Options options0 = new Options();
      String string1 = "";
      // Undeclared exception!
      helpFormatter0.printHelp(0, "%%_H`)gj3i", "%%_H`)gj3i", options0, "");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-204);
      String string0 = "p7~kI1:` 4%XCDx=I";
      String string1 = null;
      Options options0 = new Options();
      options0.hasShortOption("org.apache.commons.cli.AlreadySelectedException");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-204), "p7~kI1:` 4%XCDx=I", (String) null, options0, (String) null, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      Option option0 = new Option("", "", false, ">");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption((String) null, false, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1266, "", "", options3, (-1958), 32, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-433);
      int int0 = (-1);
      String string0 = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      String string1 = "6Ui";
      helpFormatter0.setWidth((-1));
      Options options0 = new Options();
      String string2 = "";
      Option option0 = new Option("", true, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      helpFormatter0.setLongOptSeparator("");
      options0.getOption("4%.H[Ly#=b8'sK");
      Options options1 = options0.addOption(option0);
      option0.clone();
      Options options2 = options1.addOption("6Ui", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", true, "6Ui");
      options0.getMatchingOptions(" :: ");
      // Undeclared exception!
      try { 
        options2.addOption("#i8zS", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '#i8zS' contains an illegal character : '#'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      
      helpFormatter0.defaultWidth = (-849);
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.getOptionComparator();
      assertEquals(3, helpFormatter0.getDescPadding());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2796));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName(":E;]zN>c1n4%O@");
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      helpFormatter0.printHelp("usage: ", options0);
      assertEquals(":E;]zN>c1n4%O@", helpFormatter0.getArgName());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 218;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("--", 298, (-5506));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.getDescPadding();
      helpFormatter0.setOptionComparator((Comparator) null);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "GjG2g";
      helpFormatter0.setNewLine("fC0q $sK}!+}");
      helpFormatter0.setArgName("GjG2g");
      helpFormatter0.getOptPrefix();
      helpFormatter0.defaultLeftPad = (-2520);
      helpFormatter0.getNewLine();
      helpFormatter0.getOptionComparator();
      helpFormatter0.setSyntaxPrefix("fC0q $sK}!+}");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(44);
      String string0 = "";
      String string1 = "NM|j";
      Options options0 = new Options();
      String string2 = "HdI";
      options0.addOption("", "", true, "HdI");
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option("usage: ", true, "HdI");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
