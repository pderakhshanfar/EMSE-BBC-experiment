/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 04:06:17 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.ObjectOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.net.URI;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      Options options0 = new Options();
      String string0 = "x.ixTDHc";
      StringBuffer stringBuffer0 = new StringBuffer(0);
      int int1 = 1;
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 1);
      int int2 = 0;
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer1, 0, 0, "<");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.getWidth();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(107);
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.AlreadySelectedException");
      helpFormatter0.defaultDescPad = (-94);
      helpFormatter0.getDescPadding();
      helpFormatter0.getSyntaxPrefix();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0);
      int int0 = (-1417);
      String string0 = "6~%=&M@ <E6~M{]J";
      String string1 = null;
      Options options0 = new Options();
      String string2 = null;
      mockFileOutputStream0.release();
      options0.hasLongOption(" ");
      mockFileOutputStream0.flush();
      objectOutputStream0.writeLong(3);
      // Undeclared exception!
      try { 
        options0.addOption("-", (String) null, true, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.printHelp(31, "cmdLineSyntax not provided", "cmdLineSyntax not provided", options0, "org.apache.commons.cli.HelpFormatter");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setDescPadding((-401));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(16, " ", (String) null, options0, " ", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-46);
      Options options0 = new Options();
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("&QZ!JKPGUVN>$7", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(86, "-", "-", options0, "-");
      helpFormatter0.renderOptions((StringBuffer) null, 55, options0, 516, 516);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-1);
      helpFormatter0.getWidth();
      helpFormatter0.rtrim(";^9w9gcee+)2Z6<O$?");
      StringWriter stringWriter0 = new StringWriter();
      int int0 = 12;
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "\n", 74, 12);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(2, ":8", ":8", options0, " &cCBc>KCU;");
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) ":8";
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) "flsz>2,/5";
      objectArray0[4] = (Object) options0;
      objectArray0[5] = (Object) ":8";
      objectArray0[6] = (Object) "flsz>2,/5";
      objectArray0[7] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "flsz>2,/5", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 2, ":8");
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "flsz>2,/5", options0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      Option option0 = new Option("arg", (String) null, true, "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1230), "usage: ", "usage: ", options1, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, true, " :: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption("", true, "");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("arg", options2, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption((String) null, "-", true, "--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(")`9oc/h Ix]nTFY}", options2, true);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options0 = new Options();
      Option option0 = new Option("arg", false, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      option0.setRequired(false);
      options0.addOption(option0);
      int int0 = 3024;
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 1, options0, 1, 3024);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "--", "--", options0, " ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "4}]#@p}{[", false, "<");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter1.printHelp(74, "--", "", options1, "", true);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      PrintWriter printWriter0 = mockPrintWriter1.printf("-", objectArray0);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "'!c+<StT@^Rz");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      helpFormatter0.setLongOptSeparator("--");
      helpFormatter0.renderOptions(stringBuffer0, 784, options0, 2112, 13);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "] [ elog ", (String) null, options0, 10, 135, (String) null, true);
      Options options1 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("R(^d$eF/ckT1_0q", " ", true, "^'Qav9UVF/O");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'R(^d$eF/ckT1_0q' contains an illegal character : '('
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("usage: ");
      helpFormatter0.printHelp("org.apache.commons.cli.ParseException", "org.apache.commons.cli.ParseException", options0, "org.apache.commons.cli.ParseException");
      options0.getMatchingOptions("arg");
      options0.hasShortOption("arg");
      helpFormatter0.printHelp(4492, "<", "<", options0, "arg");
      helpFormatter0.findWrapPos("has aready been seleted: '", 4492, 4492);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 3, "has aready been seleted: '", "] [ elog ", options0, 3, 13, "<", true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 4492, "-q:6", options0);
      Options options1 = new Options();
      Option option0 = new Option("", "Q`4px", false, "^'Qav9UVF/O");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option1 = new Option("arg", (String) null, false, "");
      options2.addOption(option1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), (String) null, options1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("usage: ");
      helpFormatter0.printHelp("-", "-", options0, "-");
      options0.getMatchingOptions("arg");
      String string0 = "arg";
      options0.hasShortOption("arg");
      helpFormatter0.printHelp(4492, "<", "<", options0, "arg");
      helpFormatter0.findWrapPos("has aready been seleted: '", 4492, 4492);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 3, "has aready been seleted: '", "] [ elog ", options0, 3, 13, "<", true);
      Options options1 = new Options();
      helpFormatter0.printHelp(135, "-q:6", "Q`4px", options1, "-q:6");
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "org.apache.commons.cli.Util", "", options0, 4492, (-1), "~j nr,9&fM3");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("usage: ");
      helpFormatter0.printHelp("org.apache.commons.cli.ParseException", "org.apache.commons.cli.ParseException", options0, "org.apache.commons.cli.ParseException");
      options0.getMatchingOptions("arg");
      options0.hasShortOption("arg");
      helpFormatter0.printHelp(4492, "<", "<", options0, "arg");
      helpFormatter0.findWrapPos("has aready been seleted: '", 4492, 4492);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 3, "has aready been seleted: '", "] [ elog ", options0, 3, 13, "<", true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 4492, "-q:6", options0);
      Options options1 = new Options();
      Option option0 = new Option("", "Q`4px", false, "^'Qav9UVF/O");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1214, (String) null, options2);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", "rF=YGs", true, "usage: ");
      Options options1 = options0.addOption("", "\n", true, "--");
      helpFormatter0.printHelp(58, "rF=YGs", "rF=YGs", options1, "1~l|ZMqukn]-", true);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", "&wEq f%", true, (String) null);
      helpFormatter0.printHelp(3, "\n", "--", options0, "'");
      String string0 = helpFormatter0.defaultArgName;
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(2291, " ", "arg", options0, "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
      // Undeclared exception!
      helpFormatter1.printHelp(printWriter0, 1, "usage: ", "usage: ", options0, 74, (-1910), "usage: ", false);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-452), options0, (-452), (-452));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "";
      Options options0 = new Options();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("e?x");
      helpFormatter0.getNewLine();
      helpFormatter0.findWrapPos("e?x", 0, 0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1, (-2349), "t%nO9wwLRK");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption("arg", " {V<:ZL&<}i;Sn", true, "usage: ");
      StringWriter stringWriter0 = new StringWriter(468);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 44, "' contains an illegal character : '", "' contains an illegal character : '", options2, 1640, 39, " ", true);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Q)jf:G";
      String string1 = "";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      helpFormatter0.printHelp(" {V&<:ZL&<}i;Sn", " {V&<:ZL&<}i;Sn", options1, "", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.getMatchingOptions("usage: ");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter0, false);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 3, "arg", "", options0, 1, 44, "-", true);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("arg");
      helpFormatter0.printHelp("org.apache.commons.cli.ParseException", (String) null, options0, (String) null);
      Options options1 = new Options();
      options1.getMatchingOptions("");
      helpFormatter0.printHelp(4525, "N", (String) null, options1, "T");
      helpFormatter0.findWrapPos("L6>l0OByThXCd}&29*", 4525, 4525);
      helpFormatter0.getLongOptSeparator();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter0, true);
      mockPrintWriter0.write("_fd}JLU`7oNxqKSJP", 3, 12);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "Mm^Z6'LVrBw]h=Ft*y", " | ", options1, 93, 3345, "SN", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 3345, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", (String) null, options1, (-1), 93, ":8/fhu,Q=U]AOQ.e)vh", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("Q", "\n$L,,c||<RQ.,");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 1, "\n$L,,c||<RQ.,", "Xf(w?B!1HV", options1, 58, (-1), "i");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("arg");
      options0.hasLongOption("arg");
      helpFormatter0.printHelp("org.apache.commons.cli.ParseException", (String) null, options0, (String) null);
      Options options1 = new Options();
      options1.getMatchingOptions("");
      helpFormatter0.printHelp(4525, "N", (String) null, options1, "_&");
      helpFormatter0.findWrapPos("L6>l0OByThXCd}&29*", 4525, 4525);
      helpFormatter0.getLongOptSeparator();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter0, true);
      stringWriter0.flush();
      mockPrintWriter0.write("_fd}JLU`7oNxqKSJP", 3, 12);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "Mm^Z6'LVrBw]h=Ft*y", " | ", options1, 93, 3345, "SN", true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 3345, "Mm^Z6'LVrBw]h=Ft*y");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("arg");
      helpFormatter0.printHelp("org.apache.commons.cli.ParseException", (String) null, options0, (String) null);
      Options options1 = new Options();
      options1.getMatchingOptions("");
      helpFormatter0.printHelp(4525, "N", (String) null, options1, "_&");
      helpFormatter0.findWrapPos("L6>l0OByThXCd}&29*", 4525, 4525);
      helpFormatter0.getLongOptSeparator();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      mockPrintWriter0.println((long) 3);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter0, true);
      mockPrintWriter0.write("_fd}JLU`7oNxqKSJP", 3, 12);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-1), "", "_&", options1, 1, (-1), (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("usage: ");
      helpFormatter0.printHelp("org.apache.commons.cli.ParseException", "org.apache.commons.cli.ParseException", options0, "org.apache.commons.cli.ParseException");
      options0.getMatchingOptions("arg");
      options0.hasShortOption("arg");
      helpFormatter0.printHelp(4492, "<", "<", options0, "arg");
      helpFormatter0.findWrapPos("has aready been seleted: '", 4492, 4492);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      helpFormatter0.printHelp(31, "arg", "}r|A4iwD", options0, "WKm)cFafBw<");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 4492, "<");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("usage: ");
      helpFormatter0.printHelp("org.apache.commons.cli.ParseException", "org.apache.commons.cli.ParseException", options0, "org.apache.commons.cli.ParseException");
      options0.getMatchingOptions("arg");
      options0.hasShortOption("arg");
      helpFormatter0.printHelp(4492, "<", "<", options0, "arg");
      helpFormatter0.findWrapPos("has aready been seleted: '", 4492, 4492);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 3, "has aready been seleted: '", "] [ elog ", options0, 3, 13, "<", true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 4492, "-q:6", options0);
      Options options1 = new Options();
      Option option0 = new Option("", "Q`4px", false, "^'Qav9UVF/O");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1214, (String) null, options2);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      mockPrintWriter0.checkError();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 35, 2048, "\n");
      mockPrintWriter0.print(" ");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("arg");
      String string0 = null;
      helpFormatter0.printHelp("org.apache.commons.cli.ParseException", (String) null, options0, (String) null);
      Options options1 = new Options();
      options1.getMatchingOptions("");
      String string1 = null;
      helpFormatter0.printHelp(4525, "-", (String) null, options1, "_&");
      helpFormatter0.findWrapPos("L6>l0OByThXCd}&29*", 4525, 4525);
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 4525, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      PrintWriter printWriter0 = mockPrintWriter0.format("\n", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(printWriter0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 34, "Q)jf:G", " ] [ long ", (Options) null, 13, 34, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(" {V&<:ZL&<}i;Sn", " {V&<:ZL&<}i;Sn", options1, "", false);
      optionGroup0.toString();
      helpFormatter0.printHelp(698, "-", "1&O", options1, "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      Options options2 = options1.addOption("arg", false, "--");
      helpFormatter0.printHelp(printWriter0, 698, "-", "", options2, 698, 3, "{7qGvs#m`xCNp~");
      Options options3 = new Options();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getWidth();
      helpFormatter0.getOptPrefix();
      helpFormatter0.rtrim("n Y<>%\"+N;");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2945), "X2GO~", "", options3, 698, 39, "1&O", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      mockPrintWriter0.checkError();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 52, 52, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " {V&<:ZL&<}i;Sn";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = true;
      helpFormatter0.printHelp(" {V&<:ZL&<}i;Sn", " {V&<:ZL&<}i;Sn", options1, "", true);
      optionGroup0.toString();
      helpFormatter0.printHelp(698, "jRg!D8(", "1&O", options1, "jRg!D8(");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      Options options2 = options1.addOption("arg", true, "If");
      int int0 = 9;
      helpFormatter0.printHelp(printWriter0, 698, "jRg!D8(", "", options2, 698, 9, "{7qGvs#m`xCNp~");
      Options options3 = new Options();
      helpFormatter0.setLeftPadding(698);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getWidth();
      helpFormatter0.getOptPrefix();
      helpFormatter0.rtrim("n Y<>%\"+N;");
      String string1 = "4V.H!9n#vY\\&Yw[3l1)";
      int int1 = (-2945);
      helpFormatter0.printOptions(mockPrintWriter0, (-2945), options3, 74, 10);
      // Undeclared exception!
      try { 
        options0.addOption("*I>I)V06`Yh?}jas23", true, "Lu-U*dOPLcC &[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '*I>I)V06`Yh?}jas23' contains an illegal character : '*'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(" {V&<:ZL&<}i;Sn", " {V&<:ZL&<}i;Sn", options1, "", true);
      options0.hasOption("n'q]bzu gr8MfT");
      helpFormatter0.printHelp(13, "jRg!D8(", (String) null, options1, (String) null);
      helpFormatter0.findWrapPos("", 13, 13);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, "U8Iw84l'%Tk^s=D", "-", options1, "-");
      StringBuffer stringBuffer0 = new StringBuffer(64);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, (-1), 13, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer1, 1, (-1), "wWgNie+?h[G=(P1");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(" {V&<:ZL&<}i;Sn", " {V&<:ZL&<}i;Sn", options1, "", true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.printHelp(13, "jRg!D8(", (String) null, options1, (String) null);
      helpFormatter0.findWrapPos("", 13, 13);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options1.hasOption((String) null);
      helpFormatter1.printHelp(3, "U8Iw84l'%Tk^s=D", "-", options1, "-");
      StringBuffer stringBuffer0 = new StringBuffer(74);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.printHelp(2, "k,I&(wI.u9kOth3", "", options0, "-", false);
      helpFormatter2.renderWrappedText(stringBuffer0, 1, 25, "");
      StringBuffer stringBuffer1 = new StringBuffer(74);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 10;
      Options options0 = new Options();
      options0.getMatchingOptions("arg");
      options0.hasShortOption("usage: ");
      helpFormatter0.printHelp(10, "?bs&5=c*G0f~Jx", "?bs&5=c*G0f~Jx", options0, "?bs&5=c*G0f~Jx");
      helpFormatter0.rtrim("(\"~n-MZ$x+zm|G'6");
      int int1 = 61;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 2, (String) null, "}f$&O7_V upR#Y&IU'", options0, 61, 2529, "org.apache.commons.cli.ParseException", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2582), "--", "", options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(" {V&<:ZL&<}i;Sn", " {V&<:ZL&<}i;Sn", options1, "", true);
      optionGroup0.toString();
      helpFormatter0.printHelp(698, "jRg!D8(", "1&O", options1, "jRg!D8(");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      Options options2 = options1.addOption("arg", true, "If");
      helpFormatter0.printHelp(printWriter0, 698, "jRg!D8(", "", options2, 698, 9, "{7qGvs#m`xCNp~");
      Options options3 = new Options();
      helpFormatter0.setLeftPadding(698);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getWidth();
      helpFormatter0.getOptPrefix();
      helpFormatter0.rtrim("n Y<>%\"+N;");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 9, " {V&<:ZL&<}i;Sn", "4V.H!9n#vY&Yw[3l1)", options1, (-2945), (-2945), "}f$&O7_V upR#Y&IU'", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption((String) null, ", ", true, "X,xr@M");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.printHelp("?R~d?efjq2<W", "+fP", options1, (String) null, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.findWrapPos("--", 6, 38);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.getWidth();
      helpFormatter2.getOptPrefix();
      helpFormatter1.getLongOptSeparator();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("arg", "", true, "usage: ");
      helpFormatter0.printHelp(" {V&<:ZL&<}i;SP~n", " {V&<:ZL&<}i;SP~n", options1, "", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.findWrapPos("-", 13, 1698);
      // Undeclared exception!
      helpFormatter0.printHelp(1, " ", "x^c[Dz7x", options0, "EqxoQq%NSW", true);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("usage: ");
      helpFormatter0.printHelp("org.apache.commons.cli.ParseException", "org.apache.commons.cli.ParseException", options0, "org.apache.commons.cli.ParseException");
      Options options1 = new Options();
      options0.getMatchingOptions("arg");
      options0.hasShortOption("arg");
      helpFormatter0.printHelp(4518, "<", "<", options0, "arg");
      helpFormatter0.findWrapPos("has already been selected: '", 4518, 4518);
      helpFormatter0.getLongOptSeparator();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 3345, "has already been selected: '", " ] [ long ", options1, 3345, 13, "<", false);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(" {V&<:ZL&<}i;Sn", " {V&<:ZL&<}i;Sn", options1, "", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(63, "igVb", "arg", options1, "org.apache.commons.cli.HelpFormatter$1");
      helpFormatter0.findWrapPos("B#_bN)/s^Zs.f", 9, 10);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.printHelp(2, "\n", "igVb", options1, "[");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(" {V&<:ZL&<}i;Sn", " {V&<:ZL&<}i;Sn", options1, "", true);
      options0.hasOption("n'q]bzu gr8MfT");
      helpFormatter0.printHelp(13, "jRg!D8(", (String) null, options1, (String) null);
      helpFormatter0.findWrapPos("", 13, 13);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, "U8Iw84l'%Tk^s=D", "-", options1, "-");
      StringBuffer stringBuffer0 = new StringBuffer(25);
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, (-1), 13, "-");
      helpFormatter1.renderWrappedText(stringBuffer1, 74, 32, "-");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1212), " {V&<:ZL&<}i;Sn", "", options0, ":P3", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("arg", "arg", options1, "-", true);
      helpFormatter0.setLeftPadding((-1688));
      helpFormatter0.defaultNewLine = "-HL";
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setNewLine(" ");
      String string0 = "o }; CwW%g}S";
      helpFormatter0.setLongOptPrefix("o }; CwW%g}S");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("o }; CwW%g}S", options1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 34, options0, 34, 34);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(" {V&<:ZL&<}i;Sn", " {V&<:ZL&<}i;Sn", options1, "", true);
      helpFormatter0.printHelp(698, "jRg!D8(", "1&O", options1, "jRg!D8(");
      helpFormatter0.findWrapPos("{7qGvs#m`xCNp~", 0, 13);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, "$3Fv_` \"~oDkeVf`3_;", "[", options0, "arg");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) " ");
      Options options0 = new Options();
      options0.hasLongOption("\"E");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("-", "#)(nYjIV(GAX0m|IK", options0, "#)(nYjIV(GAX0m|IK");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1748), "arg", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(" {V&<:ZL&<}i;Sn", " {V&<:ZL&<}i;Sn", options1, "", true);
      helpFormatter0.printHelp(698, "jRg!D8(", "1&O", options1, "jRg!D8(");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      Options options2 = options1.addOption("arg", true, "If");
      helpFormatter0.printHelp(printWriter0, 698, "jRg!D8(", "", options2, 698, 9, "{7qGvs#m`xCNp~");
      Options options3 = new Options();
      helpFormatter0.setLeftPadding(698);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getWidth();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "k~VJ-1i=A", options1, "%", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      String string0 = "<";
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 4518, "<", options0);
      Options options1 = new Options();
      options1.hasLongOption("\n");
      boolean boolean0 = false;
      Option option0 = null;
      try {
        option0 = new Option("-", "--", false, "<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(63);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      Options options1 = new Options();
      helpFormatter0.setLeftPadding((-1870));
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getWidth();
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("                                                               ", 1, (-1870));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "d", "Q)jf:G", (Options) null, "Q)jf:G", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(31, "RAZ<[xM >_:!YD/u^", (String) null, (Options) null, "4G\"q@a8FM<vs|");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)57;
      byte byte0 = (byte)14;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte) (-54);
      byte byte1 = (byte)44;
      byteArray0[5] = (byte)44;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("C|$/km0F&[,0");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(32);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, 74, (Options) null, 1, 11);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = null;
      String string0 = "org.apache.commons.cli.HelpFormatter$1";
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, (Options) null, 1588, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("arg", "A CloneNotSupportedException was thrown: ", true, "usage: ");
      helpFormatter0.printHelp(" {V&<:ZL&<}i;Sn", " {V&<:ZL&<}i;Sn", options1, "", true);
      int int0 = helpFormatter0.defaultDescPad;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\",j1xWJVYdB}Y");
      helpFormatter0.findWrapPos("Illegal option name '", (-1121), (-2176));
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "KiOfs=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 117;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 117, ",knK|G9\u0005D'7", "b0!J)aA", options0, 417, (-64), "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 18;
      helpFormatter0.setLeftPadding(18);
      int int1 = 25;
      String string0 = "OBk%FT&hiU_UGi";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 25, "OBk%FT&hiU_UGi");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(63);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("Ss", "", true, "`|!u;TvX\"&QC");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption("", "usage: ", true, " ");
      helpFormatter0.printHelp("                                                               ", options3);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "?bs&5=c*G0f~Jx";
      Options options0 = new Options();
      options0.getMatchingOptions("arg");
      options0.hasShortOption("usage: ");
      helpFormatter0.printHelp(10, "?bs&5=c*G0f~Jx", "?bs&5=c*G0f~Jx", options0, "?bs&5=c*G0f~Jx");
      helpFormatter0.findWrapPos("?bs&5=c*G0f~Jx", 10, 10);
      helpFormatter0.defaultLeftPad = (-1290);
      options0.addOption("", "", false, "   ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("   ", options0, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("`U!NnOha LI$C+Cmj5x", " {V&<:ZL&<}i;Sn", options1, "1K\"kPyI&'~E", true);
      helpFormatter0.setLeftPadding((-1688));
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setNewLine("4Mgy%");
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(" {V&<:ZL&<}i;Sn", " {V&<:ZL&<}i;Sn", options0, " {V&<:ZL&<}i;Sn", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(74, "", "-", options0, "jRg!D8(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("xYpiMXz<dK5'o*`");
      mockPrintWriter0.print("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-3378), "xYpiMXz<dK5'o*`");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("arg", "", true, "usage: ");
      helpFormatter0.printHelp(" {V&<:ZL&<}i;Sn", " {V&<:ZL&<}i;Sn", options1, "", true);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("r671/m;Q", 2602, (-4136));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(" {V&<:ZL&<}i;Sn", " {V&<:ZL&<}i;Sn", options1, "", true);
      helpFormatter0.printHelp(698, "jRg!D8(", "1&O", options1, "jRg!D8(");
      helpFormatter0.findWrapPos("{7qGvs#m`xCNp~", 0, 13);
      helpFormatter0.findWrapPos("", 555, 13);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.getOptPrefix();
      helpFormatter1.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "U";
      helpFormatter0.setSyntaxPrefix("U");
      helpFormatter0.getLeftPadding();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      int int0 = (-1633);
      Options options0 = new Options();
      String string1 = "";
      Options options1 = options0.addOption((String) null, ">", true, "");
      options1.getMatchingOptions("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1633), "ToPFcjXK?C", ">", options1, (-1633), (-755), "ToPFcjXK?C");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Locale locale0 = Locale.US;
      Object[] objectArray0 = null;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2284, "", "b0!J)aA", options0, (-3078), 117, ":-3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "`c^5d}8uA} U h";
      options0.hasShortOption("`c^5d}8uA} U h");
      int int0 = 14;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(14, (String) null, "_mXI+)Ac{@;jLA]3", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp(121, "Sio`V@PVh", "?bs&5=c*G0f~Jx", options1, "Sio`V@PVh");
      int int0 = 21;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 21, 2659);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "?bs&5=c*G0f~Jx";
      Options options0 = new Options();
      options0.getMatchingOptions("arg");
      options0.hasShortOption("usage: ");
      helpFormatter0.printHelp(10, "?bs&5=c*G0f~Jx", "?bs&5=c*G0f~Jx", options0, "?bs&5=c*G0f~Jx");
      helpFormatter0.findWrapPos("?bs&5=c*G0f~Jx", 10, 10);
      helpFormatter0.defaultLeftPad = (-1290);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("?bs&5=c*G0f~Jx", 10, (-2176));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "", "Q)jf:G", (Options) null, "Q)jf:G", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(" {V&<:ZL&<}i;Sn", " {V&<:ZL&<}i;Sn", options1, "", true);
      helpFormatter0.printHelp(698, "jRg!D8(", "1&O", options1, "jRg!D8(");
      helpFormatter0.findWrapPos("{7qGvs#m`xCNp~", 0, 13);
      helpFormatter0.findWrapPos("", 555, 13);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getWidth();
      helpFormatter1.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.setLeftPadding((-1688));
      helpFormatter0.defaultNewLine = "-HL";
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setNewLine(" ");
      helpFormatter0.getOptionComparator();
      helpFormatter0.rtrim("-HL");
      helpFormatter0.getOptPrefix();
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "(n3,x`MVHuC0v";
      helpFormatter0.findWrapPos("(n3,x`MVHuC0v", (-1711), 1427);
      helpFormatter0.getOptionComparator();
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", false, "--");
      String string1 = ">%:Yq?.";
      String string2 = "I*%' TYNA-";
      // Undeclared exception!
      try { 
        options2.addOption(">%:Yq?.", "-", false, "I*%' TYNA-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '>%:Yq?.' contains an illegal character : '>'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("arg");
      helpFormatter0.printHelp("org.apache.commons.cli.ParseException", (String) null, options0, (String) null);
      Options options1 = new Options();
      options1.getMatchingOptions("");
      helpFormatter0.printHelp(4518, "-", (String) null, options1, "<");
      helpFormatter0.findWrapPos("L6>l0OByThXCd}&29*", 4518, 4518);
      helpFormatter0.getLongOptSeparator();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter0, true);
      String string0 = " | ";
      StringBuffer stringBuffer0 = new StringBuffer(74);
      int int0 = 1933;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1284), 1933, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(" {V&<:ZL&<}i;Sn", " {V&<:ZL&<}i;Sn", options1, "", true);
      helpFormatter0.setLeftPadding((-1688));
      helpFormatter0.defaultNewLine = "-HL";
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setNewLine(" ");
      helpFormatter0.setLongOptPrefix("o }; CwW%g}S");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.Options");
      helpFormatter0.defaultDescPad = 2034;
      helpFormatter0.setLeftPadding(3766);
      helpFormatter0.createPadding(0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1228;
      String string0 = "hzcDzn\\PRm";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 1228, 2278, "hzcDznPRm");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "?bs&5=c*G0f~Jx";
      helpFormatter0.defaultOptPrefix = "?bs&5=c*G0f~Jx";
      Options options0 = new Options();
      options0.hasShortOption("usage: ");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "?bs&5=c*G0f~Jx", "?bs&5=c*G0f~Jx", options0, "?bs&5=c*G0f~Jx");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("usage: ");
      helpFormatter0.printHelp("org.apache.commons.cli.ParseException", "org.apache.commons.cli.ParseException", options0, "org.apache.commons.cli.ParseException");
      PrintWriter printWriter0 = null;
      int int0 = 4518;
      String string0 = "<";
      String string1 = "--";
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 4518, options0, 311, 14);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) "";
      helpFormatter0.setDescPadding((-181));
      locale0.clone();
      Locale locale1 = Locale.ENGLISH;
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale1, "usage: ", objectArray1);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, 0, (Options) null, 15, (-175));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("^wS_ACU");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[6];
      helpFormatter0.setDescPadding((-175));
      objectArray0[0] = (Object) "<";
      objectArray0[1] = (Object) comparator0;
      objectArray0[2] = (Object) "<";
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      locale0.clone();
      objectArray0[5] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "<", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, 0, (Options) null, 31, 786);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      int int0 = (-1836);
      int int1 = (-720);
      Locale locale0 = Locale.ENGLISH;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "$Foz_m(I>+<`FL#owm";
      objectArray0[1] = (Object) printWriter0;
      objectArray0[2] = (Object) helpFormatter0;
      mockPrintWriter1.println(false);
      objectArray0[3] = (Object) mockPrintWriter1;
      mockPrintWriter1.printf(locale0, "$Foz_m(I>+<`FL#owm", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, (-1836), (-720), "`C{$ow (~v");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("[ARG...]");
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) "";
      mockPrintWriter0.printf(locale0, "", objectArray0);
      mockPrintWriter0.println(true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 10, 10, "");
      helpFormatter0.getSyntaxPrefix();
      String string0 = "*#Aw_XqB1K0";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.ParseException";
      Options options0 = new Options();
      options0.hasLongOption("usage: ");
      helpFormatter0.printHelp("org.apache.commons.cli.ParseException", "org.apache.commons.cli.ParseException", options0, "org.apache.commons.cli.ParseException");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 4518, "<", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      String string0 = "org.apache.commons.cli.OptionValidator";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      int int0 = (-4136);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-4136));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      int int0 = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine((String) null);
      String string0 = null;
      String string1 = "rOM4hbOq1GCOzc";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("-", true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "?bs&5=c*G0f~Jx";
      Options options0 = new Options();
      helpFormatter0.setLeftPadding(3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptionComparator((Comparator) null);
      helpFormatter1.getLongOptSeparator();
      helpFormatter0.setNewLine("-");
      helpFormatter0.setLongOptPrefix("o }; CwW%g}S");
      helpFormatter0.printHelp("/e03{", options0, false);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "The option '";
      String string1 = "R{)H8\\C5!";
      helpFormatter0.setSyntaxPrefix("R{)H8C5!");
      helpFormatter0.setLongOptPrefix("The option '");
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.setLongOptSeparator("");
      String string0 = null;
      int int0 = (-3055);
      String string1 = "N#'b#$`#KJ";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options1.addOption("[", true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "?bs&5=c*G0f~Jx";
      Options options0 = new Options();
      options0.hasShortOption("usage: ");
      helpFormatter0.setOptionComparator((Comparator) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix("org.apache.commons.cli.HelpFormatter$OptionComparator");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setWidth(34);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      String string0 = " | ";
      helpFormatter0.setLongOptSeparator(" | ");
      helpFormatter0.setLongOptSeparator("");
      int int0 = 44;
      String string1 = "iT}Lc9phG";
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "iT}Lc9phG", true, "[ option: ");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options1.addOption("iT}Lc9phG", false, "[ option: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'iT}Lc9phG' contains an illegal character : '}'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.setLongOptSeparator("");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.setWidth(3);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "xYpiMXz<dK5'o*`";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("xYpiMXz<dK5'o*`");
      int int0 = 1;
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, 1, "xYpiMXz<dK5'o*`");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "The option '";
      helpFormatter0.defaultLongOptPrefix = "The option '";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("The option '", " =1v!x", (Options) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.setLeftPadding(74);
      Comparator<Object> comparator0 = null;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("arg", "arg");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // arg
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "usage: ", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(1161, "~bf9G{iTGgnl)[n.%", "~bf9G{iTGgnl)[n.%", options2, "Q)jf:G", false);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", "(X}om$VO] ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // (X}om$VO] 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Locale locale0 = Locale.US;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", (Object[]) null);
      int int0 = (-1290);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-1290), "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("usage: ", "\n");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.setArgName("");
      helpFormatter0.setLongOptPrefix("N!D@%pz|\"PU");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLeftPadding();
      MockFile mockFile0 = new MockFile("-", "arg");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "kiKI(6~M(`B%7\"m2");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // kiKI(6~M(`B%7\"m2
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "G'Q2{#.br;>M\\}_$It";
      helpFormatter0.setArgName("G'Q2{#.br;>M}_$It");
      int int0 = 699;
      String string1 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options1.addOption("\n", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
