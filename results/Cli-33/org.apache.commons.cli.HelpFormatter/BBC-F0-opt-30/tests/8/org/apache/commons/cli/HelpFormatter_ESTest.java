/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 14:48:37 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileDescriptor;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-2800));
      helpFormatter0.getWidth();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      int int0 = 10;
      helpFormatter0.findWrapPos("A CloneNotSupportedException was thrown: ", 10, 13);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "g+[QD[qq", true, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("", true, "");
      helpFormatter0.printHelp(23, "A CloneNotSupportedException was thrown: ", "", options3, "arg");
      String string0 = "Tr$}KmVe}KgQgH";
      MockFile mockFile0 = new MockFile("Tr$}KmVe}KgQgH", "usage: ");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "arg");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // arg
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("9NE`Y4$xg6]X}fYzxPZ");
      Options options0 = new Options();
      Options options1 = options0.addOption("u", "9NE`Y4$xg6]X}fYzxPZ", false, "G-Q&#,X9Q>1");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "9NE`Y4$xg6]X}fYzxPZ", options0);
      helpFormatter0.getDescPadding();
      Options options2 = options1.addOption("", false, "IkWo_l");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 54, "u", options2);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = "org.apache.commons.cli.OptionValidator";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      MockFile mockFile1 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockFile1;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "--", objectArray0);
      Options options2 = options1.addOption("x", "org.apache.commons.cli.OptionGroup", true, "arg");
      // Undeclared exception!
      helpFormatter1.printUsage(printWriter0, 1, "arg", options2);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("gNE``4$xg6]X}fW=xPP");
      helpFormatter0.setWidth(3);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("gNE``4$xg6]X}fW=xPP", 63, (-1810));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("04A");
      StringBuffer stringBuffer1 = stringBuffer0.append((double) 3);
      stringBuffer0.append(stringBuffer1);
      stringBuffer0.trimToSize();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "04A");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "x;_J30hz<vq26=";
      Options options0 = new Options();
      String string1 = "";
      helpFormatter0.defaultDescPad = (-981);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("x;_J30hz<vq26=", "J8KPFI", options0, "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("a.k+SS]{qz(iyUF");
      helpFormatter0.defaultOptPrefix = "a.k+SS]{qz(iyUF";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 31, (-1), "line.separator");
      helpFormatter0.getDescPadding();
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getOptPrefix();
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = 42;
      String string1 = " [ARG]";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "arg";
      objectArray0[1] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format("cL", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, "'");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setDescPadding((-2));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(876, "-", "k83J\"A|Gb?h[RM 5", options0, "75-wT");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-1607);
      helpFormatter0.renderWrappedText(stringBuffer0, 668, (-1607), "");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("org.apache.commons.cli.AlreadySelectedException", false, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.AlreadySelectedException' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName((String) null);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getArgName();
      String string0 = "@N4XWHW(n6T";
      helpFormatter0.rtrim("@N4XWHW(n6T");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getWidth();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptionComparator();
      int int0 = 1874;
      String string1 = "]";
      String string2 = "&!cs*[@7^h(az.Z%<?N";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.defaultOptPrefix = "@N4XWHW(n6T";
      Option option0 = null;
      try {
        option0 = new Option("@N4XWHW(n6T", "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '@N4XWHW(n6T' contains an illegal character : '@'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("arg");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("arg");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, 3, "\n");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("--");
      helpFormatter0.rtrim("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 3, "arg", "usage: ", options0, (-269), (-2), "-dc9");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("arg");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) options1;
      objectArray0[2] = (Object) optionGroup0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) helpFormatter0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      Object object2 = new Object();
      objectArray0[6] = object2;
      Object object3 = new Object();
      objectArray0[7] = object3;
      objectArray0[8] = (Object) helpFormatter0;
      mockPrintWriter0.printf("-", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 173, "' was specified but an option from this group ", "|", options1, 74, 173, "", true);
      helpFormatter0.setLeftPadding(1068);
      helpFormatter0.setLongOptSeparator(";'][8?|Y(HWn(A+");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getArgName();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 58, options0, 58, 58);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("arg");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.getOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      String string0 = "Illegal option name '";
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, (-759), "Illegal option name '");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultLongOptPrefix = "x;_J30hz<vq26=";
      helpFormatter0.printHelp("x;_J30hz<vq26=", "J8KPFI", options0, "", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "arg", "-", options0, 9, 1, (String) null, false);
      // Undeclared exception!
      helpFormatter1.printHelp(1, "7c_6b(x#:cX]U", (String) null, options0, " ");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("arg");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.getOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter1.defaultDescPad = 1;
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, 3, "\n");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 3, "arg", "usage: ", options0, (-269), (-2), "-dc9");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.append((CharSequence) " ");
      int int0 = (-2135);
      helpFormatter0.renderWrappedText(stringBuffer0, 3, (-2135), "");
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2135));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("arg");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.getOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printHelp(1, " ", "]", options0, "--", false);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2);
      String string0 = "sQ7";
      String string1 = "' was specified but an option from this group ";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(">}");
      Options options0 = new Options();
      Option option0 = new Option((String) null, false, "1eEb>vufvb");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", false, "WR_");
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, 14, options2, (-4682), (-1545));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("arg");
      Options options0 = new Options();
      helpFormatter0.createPadding(63);
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.getOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, 3, "\n");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-6261), ">");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("b'[");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) optionGroup0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("NvZ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.renderOptions((StringBuffer) null, 292, options1, 32, 292);
      helpFormatter0.printWrapped(printWriter0, 6, "b'[");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.helpOptions();
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", "A<@", options1, "", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("_m=yFVfJM");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter$1");
      mockPrintWriter1.print((float) 1);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 74, "A<@", (String) null, options1, (-1714), 1, "usage: ", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultLongOptPrefix = "x;_J30hz<vq26=";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      options0.helpOptions();
      helpFormatter0.printHelp("x;_J30hz<vq26=", "J8KPFI", options0, "", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Object object0 = new Object();
      Object object1 = new Object();
      mockPrintWriter0.printf("cmdLineSyntax not provided", (Object[]) null);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, " :: ", "z9J@", options0, 74, 3, "--");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("-").when(comparator0).toString();
      doReturn(0).when(comparator0).compare(anyString() , anyString());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setLongOptSeparator("b'[");
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("NvZ", "org.apache.commons.cli.OptionValidator", true, "t#N@foM`:r");
      options0.hasOption("?;4p40V&Urzc!^");
      Options options3 = options2.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Option option0 = new Option("arg", "NvZ", true, (String) null);
      options2.addOption(option0);
      Options options4 = new Options();
      helpFormatter0.printHelp("$s5eRE,t}WX$", "", options3, "?;4p40V&Urzc!^");
      helpFormatter1.setOptPrefix("--");
      helpFormatter1.setNewLine("[ARG...]");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "x3E9+", false, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("g", false, "usage: ");
      helpFormatter0.printHelp("]", "", options3, "UZ)$PR,|RU");
      helpFormatter0.rtrim("]");
      helpFormatter0.rtrim("org.apache.commons.cli.AlreadySelectedException");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      mockPrintWriter0.println((double) 3);
      helpFormatter0.setWidth(3);
      helpFormatter0.setLeftPadding(13);
      helpFormatter0.setLongOptSeparator("arg");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "", true, (String) null);
      options2.hasOption("usage: ");
      options2.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options3 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", "", options2, "--");
      helpFormatter2.setOptPrefix("");
      helpFormatter1.setNewLine((String) null);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultLongOptPrefix = "x;_J30hz<vq26=";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      options0.helpOptions();
      helpFormatter0.printHelp("x;_J30hz<vq26=", "J8KPFI", options0, "", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Object object0 = new Object();
      Object object1 = new Object();
      mockPrintWriter0.printf("-", (Object[]) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 97, (String) null, "arg", options0, 16, (-1383), "[ option: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultLongOptPrefix = "x;_J30hz<vq26=";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      options0.helpOptions();
      helpFormatter0.printHelp("x;_J30hz<vq26=", "J8KPFI", options0, "", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Object object0 = new Object();
      Object object1 = new Object();
      PrintWriter printWriter0 = mockPrintWriter0.printf("-", (Object[]) null);
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 1, "kgn</x|", "[ option: ", options0, 1, 3, "[ Options: [ short ");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getOptPrefix();
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
      helpFormatter0.printHelp(2625, "hv-`aXGq~_)(", "-", options0, "", false);
      helpFormatter0.printHelp(2625, ">", ")?]T enX.MeE>%:a", options0, "org.apache.commons.cli.Options", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("org.apache.commons.cli.Option");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 2625, (-1), ">");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultLongOptPrefix = "x;_J30hz<vq26=";
      options0.helpOptions();
      helpFormatter0.printHelp("x;_J30hz<vq26=", "J8KPFI", options0, "", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      char[] charArray0 = new char[8];
      charArray0[0] = 'p';
      charArray0[1] = 'v';
      charArray0[2] = '0';
      charArray0[3] = '6';
      charArray0[4] = '4';
      charArray0[5] = 'W';
      charArray0[6] = '2';
      charArray0[7] = ':';
      mockPrintWriter0.write(charArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("OZ>Ft{=;");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 405, "usage: ", "-", options0, 74, 2, "org.apache.commons.cli.ParseException", false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getLongOptPrefix();
      helpFormatter2.findWrapPos("", (-1), 74);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultLongOptPrefix = "x;_J30hz<vq26=";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      options0.helpOptions();
      helpFormatter0.printHelp("x;_J30hz<vq26=", "J8KPFI", options0, "", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Object object0 = new Object();
      Object object1 = new Object();
      options0.getMatchingOptions("'P[g1fz/@qJ#P#:");
      PrintWriter printWriter0 = mockPrintWriter0.printf("\n", (Object[]) null);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, (-297), "x;_J30hz<vq26=", "J8KPFI", options0, (-2711), (-297), "J8KPFI");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp(10, "Cp2A[$A", (String) null, (Options) null, " ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      String string0 = "b'[";
      helpFormatter0.setLongOptSeparator("b'[");
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "org.apache.commons.cli.OptionValidator", "u|bcEowx080.u?T", (Options) null, "[bJ0<fwKN@*fBkp");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-488);
      String string0 = "f,riR3O[:HXq$,7g3";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-478), (-488), "f,riR3O[:HXq$,7g3");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = object1;
      objectArray0[1] = (Object) "]";
      objectArray0[2] = (Object) "]-QF:;{#>ur";
      objectArray0[3] = (Object) "]-QF:;{#>ur";
      objectArray0[4] = (Object) "b'[";
      mockPrintWriter0.printf("67F;(8^9+Xmj'", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-1018), "", "org.apache.commons.cli.Options", options0, 421, 1, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("gNE``4$xg6]X}fW=xPP");
      mockPrintWriter0.println((double) 3);
      helpFormatter0.setWidth(3);
      helpFormatter0.setLongOptSeparator("-");
      helpFormatter0.setLeftPadding(13);
      helpFormatter0.setLongOptSeparator("gNE``4$xg6]X}fW=xPP");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setArgName("gNE``4$xg6]X}fW=xPP");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("gNE``4$xg6]X}fW=xPP");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3494, "\n");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.getWidth();
      HelpFormatter helpFormatter4 = new HelpFormatter();
      helpFormatter4.setArgName("DaS.;u");
      helpFormatter1.setWidth(477);
      helpFormatter1.setOptPrefix((String) null);
      helpFormatter0.getDescPadding();
      helpFormatter4.findWrapPos("--", 74, 3);
      helpFormatter0.getOptionComparator();
      helpFormatter1.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("gNE``4$xg6]X}fW=xPP");
      mockPrintWriter0.println((double) 3);
      helpFormatter0.setWidth(3);
      helpFormatter0.setLongOptSeparator("-");
      helpFormatter0.setLeftPadding(13);
      helpFormatter0.setLongOptSeparator("gNE``4$xg6]X}fW=xPP");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setArgName("gNE``4$xg6]X}fW=xPP");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("gNE``4$xg6]X}fW=xPP");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3494, "\n");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.getWidth();
      HelpFormatter helpFormatter4 = new HelpFormatter();
      helpFormatter4.setArgName("DaS.;u");
      helpFormatter1.setWidth(477);
      helpFormatter1.setOptPrefix((String) null);
      helpFormatter2.setLongOptPrefix("");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 3494, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(303);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Options options0 = new Options();
      int int0 = 249;
      Option option0 = new Option("arg", "has already been selected: '", false, "%E6*PQ&G");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1991, "0YhI%", "]", options1, 303, (-2), "0YhI%", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("gNE``4$xg6]X}fW=xPP");
      mockPrintWriter0.println((double) 3);
      helpFormatter0.setWidth(3);
      helpFormatter0.setLongOptSeparator("-");
      helpFormatter0.setLeftPadding(13);
      helpFormatter0.setLongOptSeparator("gNE``4$xg6]X}fW=xPP");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setArgName("gNE``4$xg6]X}fW=xPP");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("gNE``4$xg6]X}fW=xPP");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3494, "\n");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.getWidth();
      HelpFormatter helpFormatter4 = new HelpFormatter();
      helpFormatter4.setArgName("DaS.;u");
      // Undeclared exception!
      try { 
        helpFormatter4.printHelp("|#S%^=J4DQwP@", "gNE``4$xg6]X}fW=xPP", (Options) null, "--");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setLongOptSeparator("b'[");
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("", false, "NvZ");
      Options options2 = options1.addOption("NvZ", "org.apache.commons.cli.OptionValidator", true, "t#N@foM`:r");
      options0.hasOption("?;4p40V&Urzc!^");
      options2.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options3 = new Options();
      helpFormatter1.setArgName("arg");
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 74, " ", " ", options0, 32, 74, "arg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup1);
      String string0 = "org.apache.commons.cli.OptionValidator";
      Options options2 = options0.addOption("", "org.apache.commons.cli.OptionValidator", false, "NvZ");
      options2.hasOption("t#N@foM`:r");
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options3 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", "", options1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "gNE``4$xg6]X}fW=xPP";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("mpv9k/%");
      mockPrintWriter0.println(2221.9616065673);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-821), "gNE``4$xg6]X}fW=xPP", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      mockPrintWriter0.println((double) 3);
      helpFormatter0.setWidth(3);
      helpFormatter0.setLeftPadding(13);
      helpFormatter0.setLongOptSeparator("arg");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setArgName("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("arg");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3494, "\n");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.getWidth();
      HelpFormatter helpFormatter4 = new HelpFormatter();
      helpFormatter4.setArgName("DaS.;u");
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "p\"Aa$J_^mk*yd<");
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) null, 1424, "arg", "-", options1, 2, 3, "arg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setLongOptSeparator("b'[");
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("NvZ", "org.apache.commons.cli.OptionValidator", true, "t#N@foM`:r");
      options0.hasOption("?;4p40V&Urzc!^");
      options2.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options3 = new Options();
      helpFormatter1.setArgName("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 74, " ", " ", options0, 32, 74, "arg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(1);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      helpFormatter1.setLongOptSeparator((String) null);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.getOptPrefix();
      helpFormatter1.getLongOptSeparator();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.printHelp(74, "arg", "", options0, "-");
      // Undeclared exception!
      try { 
        helpFormatter2.printWrapped((PrintWriter) mockPrintWriter0, (-1666), (-1170), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptSeparator();
      int int0 = (-585);
      options0.addOption((String) null, "-", true, "]");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("usage: ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      // Undeclared exception!
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter1, 1, 1, "--");
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("org.apache.commons.cli.Option");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2), 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("NvZ", "org.apache.commons.cli.OptionValidator", true, "t#N@foM`:r");
      String string0 = "VZ!VUrfm05XBOO";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3, "VZ!VUrfm05XBOO", "t#N@foM`:r", options2, 1, 1077, "]", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "(-3N,uFw");
      options1.helpOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp(3, "p", "", options0, "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.printWrapped((PrintWriter) mockPrintWriter0, 74, 1122, "b;Nsy-u@h/?T~[t");
      helpFormatter2.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("-").when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setLongOptSeparator("b'[");
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("NvZ", "org.apache.commons.cli.OptionValidator", true, "t#N@foM`:r");
      options0.hasOption("?;4p40V&Urzc!^");
      Options options3 = options2.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options4 = new Options();
      helpFormatter0.printHelp("$s5eRE,t}WX$", "", options3, "?;4p40V&Urzc!^");
      helpFormatter1.setOptPrefix("--");
      helpFormatter1.setNewLine("[ARG...]");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("NvZ", "org.apache.commons.cli.OptionValidator", true, "t#N@foM`:r");
      helpFormatter0.printHelp(4, "org.apache.commons.cli.OptionValidator", "", options1, "org.apache.commons.cli.OptionValidator");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(1);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) helpFormatter1;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) mockPrintWriter1;
      mockPrintWriter1.printf("]-QF:;{#>ur", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 34, "]", "", options0, 0, (-1018), "@-lStP|(vqx%lfH", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "gNE``4$xg6]X}fW=xPP";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("gNE``4$xg6]X}fW=xPP");
      mockPrintWriter0.println(0.0);
      int int0 = 24;
      Options options0 = new Options();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 265, "");
      helpFormatter0.rtrim("gNE``4$xg6]X}fW=xPP");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "gNE``4$xg6]X}fW=xPP", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "gNE``4$xg6]X}fW=xPP";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("gNE``4$xg6]X}fW=xPP");
      mockPrintWriter0.println(0.0);
      int int0 = 0;
      Options options0 = new Options();
      helpFormatter0.printOptions(mockPrintWriter0, 31, options0, 0, 0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "gNE``4$xg6]X}fW=xPP", options0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      Options options0 = new Options();
      String string0 = "";
      Options options1 = options0.addOption("", false, "(-3N,uFw");
      options1.helpOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "org.apache.commons.cli.Option", options1, "E:[e1vx?a1Hqs0", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("gNE``4$xg6]X}fW=xPP");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(0);
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-863), "arg", (String) null, options0, " ", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("!(0v\"?UOr{:wU");
      char[] charArray0 = new char[8];
      charArray0[0] = 'F';
      charArray0[1] = 'E';
      charArray0[2] = 'B';
      charArray0[3] = 'W';
      charArray0[4] = '=';
      charArray0[5] = 'u';
      charArray0[6] = '\"';
      charArray0[7] = '3';
      mockPrintWriter0.write(charArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-2704), 2855, "!(0v\"?UOr{:wU");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.defaultWidth = (-1155);
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setLongOptSeparator("b'[");
      helpFormatter0.setOptionComparator((Comparator) null);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(44, "arg", "--", options0, "usage: ");
      String string0 = "usage: ";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("usage: ", "usage: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // usage: 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MockFile mockFile0 = new MockFile("\n", "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.println("org.apache.commons.cli.HelpFormatter");
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) comparator0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "-", objectArray0);
      helpFormatter0.printUsage(printWriter0, 74, "");
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLongOptPrefix("1?(`mmI9t4Dx");
      helpFormatter0.createPadding(74);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      helpFormatter0.setSyntaxPrefix(" ");
      helpFormatter0.setSyntaxPrefix((String) null);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 1, options0, (-27), (-470));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      mockPrintWriter0.println((double) 3);
      helpFormatter0.setWidth(3);
      helpFormatter0.setLeftPadding(13);
      helpFormatter0.setLongOptSeparator("arg");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setArgName("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("arg");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "\n");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      boolean boolean0 = false;
      Options options1 = options0.addOption("", "--", false, "8FcX");
      OptionGroup optionGroup0 = null;
      options1.helpOptions();
      String string1 = "I0q*[Y!";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string2 = "";
      helpFormatter1.printHelp("?fCsNo\"x2QPQuj", "", options1, "QcRhQH-Y[|Yp)", false);
      helpFormatter0.printHelp("?fCsNo\"x2QPQuj", "ng2F.b-", options1, "arg");
      // Undeclared exception!
      try { 
        options0.addOption("-", (String) null, false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setLongOptSeparator("b'[");
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption((String) null, false, "6zxx>Hdr");
      Options options3 = options2.addOption((String) null, "Rpv%eEZo!DIeI.#dl;", false, "^HiP&:J\"4LKh}]H|d7");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("b'[", options3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.setSyntaxPrefix((String) null);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1045), (String) null, "53T^MLRh`F== ", options0, (-1723), (-1045), "6r?_X0qtef", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.getDescPadding();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 758;
      Options options0 = new Options();
      String string0 = "";
      boolean boolean0 = true;
      String string1 = "\\Mcw";
      Options options1 = options0.addOption("", "--", true, "Mcw");
      options1.helpOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string2 = "";
      helpFormatter1.printHelp("?fCsNo\"x2QPQuj", "", options1, "QcRhQH-Y[|Yp)", true);
      // Undeclared exception!
      try { 
        options0.addOption("-", (String) null, true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(" ", (String) null, (String) null).when(comparator0).toString();
      doReturn((-821), 0, 0).when(comparator0).compare(anyString() , anyString());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setLongOptSeparator("b'[");
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption((String) null, false, "6zxx>Hdr");
      options2.hasShortOption("--");
      Options options3 = options2.addOption((String) null, "Rpv%eEZo!DIeI.#dl;", false, "^HiP&:J\"4LKh}]H|d7");
      helpFormatter0.printHelp("b'[", options3);
      helpFormatter0.getLeftPadding();
      helpFormatter0.printHelp(1657, "has already been selected: '", "(pi", options2, "^HiP&:J\"4LKh}]H|d7", true);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption((String) null, "org.apache.commons.cli.Util", true, "Cannot add value, list full.");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1077, "org.apache.commons.cli.OptionValidator", "org.apache.commons.cli.Util", options1, 996, (-2), "NvZ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      boolean boolean0 = false;
      Options options1 = options0.addOption("", "--", false, "Mcw");
      OptionGroup optionGroup0 = null;
      options1.helpOptions();
      String string1 = "I0q*[Y!";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string2 = "";
      helpFormatter1.printHelp("?fCsNo\"x2QPQuj", "", options1, "QcRhQH-Y[|Yp)", false);
      // Undeclared exception!
      try { 
        options0.addOption("-", (String) null, false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultLongOptPrefix = "x;_J30hz<vq26=";
      Options options1 = options0.addOption("", "--", false, "Mcw");
      OptionGroup optionGroup0 = null;
      options1.helpOptions();
      helpFormatter0.printHelp("x;_J30hz<vq26=", "J8KPFI", options0, "", false);
      // Undeclared exception!
      try { 
        options0.addOption("%bg6wS[9AEHw", "-", true, "C&,k4R*}$RQTw<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '%bg6wS[9AEHw' contains an illegal character : '%'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "T";
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "T", "", options0, (String) null);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      helpFormatter0.setSyntaxPrefix((String) null);
      int int0 = 1;
      helpFormatter0.setSyntaxPrefix((String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1, " ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      Options options0 = new Options();
      options0.getOption((String) null);
      options0.hasShortOption("U'0e#m&^XZCix,L");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, (String) null, (String) null, options0, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.setSyntaxPrefix((String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "gNE``4$xg6]X}fW=xPP";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("gNE``4$xg6]X}fW=xPP");
      mockPrintWriter0.println(0.0);
      int int0 = 0;
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "gNE``4$xg6]X}fW=xPP", options0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "^{&Sc~";
      helpFormatter0.setArgName("^{&Sc~");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getWidth();
      String string1 = null;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("-", "arg", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("gNE``4$xg6]X}fW=xPP");
      mockPrintWriter0.println(0.0);
      helpFormatter0.setWidth(3);
      helpFormatter0.setLongOptSeparator("-");
      helpFormatter0.setLeftPadding(13);
      helpFormatter0.setLongOptSeparator("gNE``4$xg6]X}fW=xPP");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setArgName("gNE``4$xg6]X}fW=xPP");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("gNE``4$xg6]X}fW=xPP");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3494, "\n");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.getWidth();
      HelpFormatter helpFormatter4 = new HelpFormatter();
      helpFormatter4.setArgName("DaS.;u");
      helpFormatter1.setWidth(477);
      helpFormatter1.setOptPrefix((String) null);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      String string1 = "x;_J30hz<vq26=";
      Options options0 = new Options();
      String string2 = "";
      boolean boolean0 = false;
      String string3 = "\\Mcw";
      Options options1 = options0.addOption("", "--", false, "Mcw");
      OptionGroup optionGroup0 = null;
      options1.helpOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[", "I0q*[Y!", (Options) null, "[", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(3708);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 3336;
      StringBuffer stringBuffer0 = new StringBuffer("$}CkBS*HIC)rw");
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 3336, options0, 0, 0);
      helpFormatter0.setDescPadding(3336);
      char[] charArray0 = new char[8];
      charArray0[0] = 'a';
      charArray0[1] = 'q';
      charArray0[2] = '-';
      charArray0[3] = '8';
      charArray0[4] = 's';
      charArray0[5] = 'Y';
      charArray0[6] = '~';
      charArray0[7] = 'h';
      // Undeclared exception!
      try { 
        stringBuffer1.insert(0, charArray0, 302, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // offset 302, len 1, str.length 8
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-2586));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "1:7", "' was specified but an option from this group ", (Options) null, "1:7");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 0;
      String string0 = "%D";
      helpFormatter0.setArgName("%D");
      String string1 = "Z4Kc0";
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "Z4Kc0");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1435));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("~cowGrbiSaQOa'H~");
      PrintWriter printWriter0 = mockPrintWriter0.append('h');
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-2064), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine((String) null);
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 13;
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("usage: ", (String) null, true, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "", options0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.hasOption("--");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options1 = options0.addOption((String) null, true, "has already been selected: '");
      options1.getOption("' was specified but an option from this group ");
      helpFormatter1.printHelp(74, "-scbRA", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options1, "O[?[gCULb");
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptionComparator();
      String string0 = helpFormatter0.createPadding(109);
      assertEquals("                                                                                                             ", string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("sQ7", "A CloneNotSupportedException was thrown: ", options0, "[ARG...]");
      helpFormatter0.setOptPrefix(", ");
      helpFormatter0.setNewLine("q; >\f`U'Ozg3n`");
      helpFormatter0.printHelp("[ARG...]", options0, false);
      helpFormatter0.rtrim(", ");
      assertEquals("q; >\f`U'Ozg3n`", helpFormatter0.getNewLine());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      Options options2 = options0.addOption((String) null, false, "]");
      options2.helpOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.getOptPrefix();
      helpFormatter0.printHelp("'", "Zhh2T6", options2, "x;_J30hz<vq26=", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 74, 74, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      doReturn(0).when(comparator0).compare(anyString() , anyString());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setLongOptSeparator("b'[");
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption((String) null, false, "6zxx>Hdr");
      Options options3 = options2.addOption((String) null, "Rpv%eEZo!DIeI.#dl;", false, "^HiP&:J\"4LKh}]H|d7");
      helpFormatter0.printHelp("b'[", options3);
      assertEquals("b'[", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("HWy1ik^NaA ml+]");
      String string0 = "";
      helpFormatter0.setLongOptPrefix("");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.createPadding(0);
      String string0 = "(-3N,uFw";
      Options options0 = new Options();
      boolean boolean0 = false;
      Options options1 = options0.addOption("", false, "(-3N,uFw");
      String string1 = "]";
      options1.helpOptions();
      Options options2 = options1.addOption("arg", "]", false, "]");
      options2.getOptionGroups();
      String string2 = "";
      String string3 = null;
      helpFormatter0.printHelp("org.apache.commons.cli.ParseException", "", options2, (String) null, true);
      String string4 = null;
      String string5 = "ku8J=Bse'D1^5f>S+";
      String string6 = null;
      // Undeclared exception!
      try { 
        options1.addOption("]", "ku8J=Bse'D1^5f>S+", true, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ']'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "[ Options: [ short ";
      helpFormatter0.getDescPadding();
      helpFormatter0.setOptPrefix("org.apache.commons.cli.HelpFormatter$1");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.createPadding(0);
      String string0 = "(-3N,uFw";
      Options options0 = new Options();
      boolean boolean0 = false;
      Options options1 = options0.addOption("", false, "(-3N,uFw");
      options1.helpOptions();
      Options options2 = options1.addOption("arg", "]", false, "]");
      options2.getOptionGroups();
      helpFormatter0.printHelp("org.apache.commons.cli.ParseException", "(-3N,uFw", options2, "fm,]`Onl/ata`l:<,", false);
      String string1 = null;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("usage: ", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setSyntaxPrefix("");
      int int0 = 1481;
      String string1 = "";
      String string2 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options1.addOption("org.apache.commons.cli.OptionGroup", true, ">");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.OptionGroup' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      
      helpFormatter0.setWidth(0);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getSyntaxPrefix();
      assertEquals(0, helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setWidth((-422));
      assertEquals((-422), helpFormatter0.defaultWidth);
  }
}
