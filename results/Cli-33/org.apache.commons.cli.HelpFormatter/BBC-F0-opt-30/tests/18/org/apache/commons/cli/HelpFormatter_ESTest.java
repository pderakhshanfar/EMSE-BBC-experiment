/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 04:09:55 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.FileNotFoundException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" ", "-");
      Option option0 = new Option("", "", true, "--");
      Options options0 = new Options();
      options0.addOption(option0);
      option0.setArgName("");
      helpFormatter0.printHelp("xDq8ExIgU-aw%7Q)Fc", "", options0, "", true);
      StringWriter stringWriter0 = new StringWriter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 32;
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1547), options0, 74, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" ", "-");
      Option option0 = new Option("", "", true, "--");
      Options options0 = new Options();
      Options options1 = options0.addOption(option0);
      option0.setArgName("");
      helpFormatter0.printHelp("xDq8ExIgU-aw%7Q)Fc", "", options0, "", true);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      StringWriter stringWriter2 = stringWriter1.append('q');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-2), options1, (-2), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", " ", true, "usage: ");
      Options options1 = options0.addOption(option0);
      option0.setArgName("");
      helpFormatter0.printHelp("zkdux3nTwFzk/", "", options1, "line.separator", false);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg", true, "usage: ");
      Options options1 = options0.addOption(option0);
      option0.setArgName("usage: ");
      helpFormatter0.printHelp("\n", "arg", options1, "-", true);
      helpFormatter0.getNewLine();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(31);
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 3, 74, "");
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer1, 1, options1, 85, 4798);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "X]);#zFQ6\"BK?/";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("X]);#zFQ6\"BK?/", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getNewLine();
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-1354);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      stringBuffer0.chars();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, (-679), "--");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      int int0 = 478;
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 478, 478, "Illegal option name '");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, 9, (Options) null, 49, 35);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      options0.getOption(";8M[(\"-~lJ0");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      HelpFormatter helpFormatter4 = new HelpFormatter();
      helpFormatter2.printHelp("--", options0);
      helpFormatter1.getArgName();
      helpFormatter4.renderOptions((StringBuffer) null, (-164), options0, 3, 1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      helpFormatter0.getNewLine();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Options options1 = options0.addOption("", "O<F", false, "--");
      Option option0 = new Option("arg", false, "\n");
      option0.setLongOpt("org.apache.commons.cli.HelpFormatter$OptionComparator");
      option0.setArgs(1);
      options1.addOption(option0);
      LinkedList<Option> linkedList0 = new LinkedList<Option>();
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.printHelp("[", options1);
      helpFormatter0.getOptPrefix();
      helpFormatter0.findWrapPos("\n", 74, (-2));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Locale locale0 = new Locale("Y|3zeHaz!Cz5(JT>");
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", (Object[]) null);
      int int0 = 13;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 13, "Y|3zeHaz!Cz5(JT>", "Y|3zeHaz!Cz5(JT>", (Options) null, 13, (-595), "Y|3zeHaz!Cz5(JT>");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "FpmSf_i}?_ios\\";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("FpmSf_i}?_ios", "FpmSf_i}?_ios", (Options) null, "FpmSf_i}?_ios");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      Options options2 = new Options();
      options2.addOptionGroup(optionGroup0);
      helpFormatter0.getSyntaxPrefix();
      options2.getOption("arg");
      helpFormatter0.setLeftPadding((-1));
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      boolean boolean0 = true;
      String string0 = "";
      // Undeclared exception!
      try { 
        options0.addOption(" ", "-", true, "$'nU");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      helpFormatter0.getNewLine();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setLeftPadding((-1380));
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("^hMH.4Bb");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setWidth((-1904));
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.getSyntaxPrefix();
      Options options2 = new Options();
      options2.getOption("");
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLeftPadding(1);
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "usage: ", options1, " ] [ long ", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      StringWriter stringWriter0 = new StringWriter(1210);
      stringWriter0.append('q');
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "");
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "-?.%+!p--e}wN9=");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "FpmSf_i}?_ios");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "-", "my4g?:Q$F 4a", options1, 15, 115, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      helpFormatter0.getNewLine();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "O<F", false, "--");
      Option option0 = new Option("arg", false, "\n");
      option0.setLongOpt("org.apache.commons.cli.HelpFormatter$OptionComparator");
      option0.setArgs(1);
      options1.addOption(option0);
      LinkedList<Option> linkedList0 = new LinkedList<Option>();
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.printHelp("[", options1);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-156), (-156));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      helpFormatter0.defaultDescPad = (-1456);
      PrintWriter printWriter0 = null;
      helpFormatter0.defaultNewLine = "org.apache.commons.cli.AlreadySelectedException";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-650), (-650), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arg");
      helpFormatter0.getNewLine();
      int int0 = helpFormatter0.defaultWidth;
      Options options0 = new Options();
      Options options1 = options0.addOption("", "O<F", false, "--");
      Option option0 = new Option("arg", false, "\n");
      option0.setLongOpt("org.apache.commons.cli.HelpFormatter$OptionComparator");
      option0.setArgs(1);
      options1.addOption(option0);
      helpFormatter0.setWidth((-2));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\n", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "[h)2kQ,Q'GC";
      boolean boolean0 = true;
      options0.helpOptions();
      int int0 = 2185;
      helpFormatter0.setSyntaxPrefix((String) null);
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 623, options0, 1, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", true, "FpmSf_i}?_ios");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.printHelp(1, "-", " ", options0, "usage: ", true);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setWidth(1);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("arg");
      // Undeclared exception!
      helpFormatter0.printHelp("usage: ", "", options0, "[ARG...]", true);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setWidth(1);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Option option0 = new Option("", "usage: ", true, "--");
      option0.setArgs(4);
      options0.addOption(option0);
      LinkedList<Option> linkedList0 = new LinkedList<Option>();
      helpFormatter0.setLongOptSeparator((String) null);
      // Undeclared exception!
      helpFormatter0.printHelp("f3[NPVd$;", options0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Grg9_x";
      helpFormatter0.rtrim("Grg9_x");
      String string1 = "0HSGl3N2!";
      MockFile mockFile0 = new MockFile("0HSGl3N2!", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      int int0 = 4;
      helpFormatter0.printOptions(mockPrintWriter0, 31, options0, 31, 4);
      helpFormatter0.findWrapPos("0HSGl3N2!", 31, 4);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "l8/=z %!<G", options0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("nd(l$sS95VIz<Xp_l", 926, (-3837));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      int int0 = (-2);
      String string0 = "!B6'8;}s[te";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2), (-2), "!B6'8;}s[te");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      helpFormatter0.getNewLine();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setOptPrefix("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1008), (String) null, ":[Nlnjh2i", options0, 4666, (-1008), "\n", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-1937);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-2947);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getWidth();
      String string0 = null;
      Options options0 = new Options();
      Options options1 = options0.addOption("", "O<F", true, "--");
      Option option0 = new Option("arg", true, "\n");
      option0.setLongOpt("org.apache.commons.cli.HelpFormatter$OptionComparator");
      option0.setArgs(1);
      options0.getOptionGroups();
      Options options2 = options1.addOption(option0);
      options2.hasLongOption("-");
      options2.helpOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "v@|E[7(6u", (String) null, options2, (String) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      helpFormatter0.getNewLine();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator("\n");
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, "v@|E[7(6u");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 74, "O<F");
      Options options1 = options0.addOption("", "O<F", false, "--");
      Option option0 = new Option("arg", false, "\n");
      option0.setLongOpt("arg");
      option0.setArgs(1);
      Options options2 = options0.addOption(option0);
      options2.helpOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((-1), "[55K\"Xe<=pse1", "v@|E[7(6u", options1, "arg");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setLongOptSeparator(" ");
      helpFormatter1.printHelp("usage: ", options2);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("6");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setWidth(13);
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("has already been selected: '", "-", options1, (String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLeftPadding();
      helpFormatter0.setLeftPadding(3);
      helpFormatter1.setWidth(1);
      helpFormatter1.setLongOptSeparator((String) null);
      OptionGroup optionGroup1 = new OptionGroup();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      PrintWriter printWriter0 = mockPrintWriter0.append('!');
      helpFormatter0.printHelp(printWriter0, 1431, "6", "-", options1, 1, 1431, "[ Options: [ short ", true);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 1431, options0, 2053, 2101);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("\n");
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getWidth();
      helpFormatter0.getArgName();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter2.setOptPrefix("-");
      // Undeclared exception!
      try { 
        helpFormatter3.printHelp((PrintWriter) mockPrintWriter0, (-2485), "\n", "kEkt,7[+<I)~%", options0, (-2485), 3376, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("IR7hwsBRO");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("c/Rpp~yM,S GST`Z", "--", (Options) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      helpFormatter0.getNewLine();
      helpFormatter0.getWidth();
      String string0 = "v@|E[7(6u";
      Options options0 = new Options();
      String string1 = "";
      options0.addOption("", "O<F", false, "--");
      Option option0 = new Option("arg", false, "\n");
      option0.setLongOpt("org.apache.commons.cli.HelpFormatter$OptionComparator");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("-", options0, false);
      StringWriter stringWriter0 = new StringWriter(3096);
      StringWriter stringWriter1 = new StringWriter();
      String string2 = "org.apache.commons.cli.Option";
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-2525), "-", "", options0, (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "arg", true, "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      option0.setArgName("usage: ");
      options1.hasShortOption("--");
      helpFormatter0.printHelp("\n", "arg", options1, "-", true);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(721);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("OY", true, ", ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("OY", "OY", options0, ", ");
      helpFormatter0.getSyntaxPrefix();
      options1.getOption("usage: ");
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLeftPadding((-5144));
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("-", " ", options1, " ", true);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      helpFormatter0.getNewLine();
      helpFormatter0.getWidth();
      helpFormatter0.defaultNewLine = "\n";
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "\n");
      option0.setLongOpt("org.apache.commons.cli.HelpFormatter$OptionComparator");
      option0.setArgs(1);
      options0.addOption(option0);
      helpFormatter0.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 103, "O<F", "org.apache.commons.cli.Util", options0, 34, 10, "3wMa+n5X3:hRy5$", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      helpFormatter0.getNewLine();
      helpFormatter0.getWidth();
      helpFormatter0.defaultNewLine = "\n";
      Options options0 = new Options();
      Options options1 = options0.addOption("", "O<F", false, "--");
      options1.toString();
      helpFormatter0.setWidth(74);
      Options options2 = new Options();
      options0.toString();
      options1.getOption("");
      helpFormatter0.printHelp("\n", "   ", options2, "*yNeQR.DJ6jH5Wxj\u0002K");
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setLeftPadding((-4350));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(")", " ]", options1, " ]");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      helpFormatter0.getNewLine();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("--");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 1, " | ", "--", options1, 3, 1, "]", false);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getWidth();
      helpFormatter0.getArgName();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.setOptPrefix("usage: ");
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 3, "-", "", options0, 74, 3, "arg", false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 22, " ", options0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("6");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      helpFormatter0.setWidth(13);
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = "omEn<";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-68), "/pDc^27W{4'|vZ", "omEn<", options1, "/pDc^27W{4'|vZ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      Options options0 = new Options();
      String string0 = "1STU4D(YV0!2%x5a*Q";
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.setOptPrefix(")`Ps");
      String string1 = "";
      HelpFormatter helpFormatter4 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter4.printHelp((PrintWriter) mockPrintWriter0, (-1755), "--", "arg", options0, 74, 74, "1STU4D(YV0!2%x5a*Q", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      helpFormatter0.getNewLine();
      helpFormatter0.getWidth();
      helpFormatter0.defaultNewLine = "\n";
      Options options0 = new Options();
      Options options1 = options0.addOption("", "O<F", false, "--");
      Option option0 = new Option("arg", false, "\n");
      option0.setLongOpt("org.apache.commons.cli.HelpFormatter$OptionComparator");
      option0.setArgs(1);
      Options options2 = options1.addOption(option0);
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      StringWriter stringWriter0 = new StringWriter(926);
      StringWriter stringWriter1 = stringWriter0.append('9');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      helpFormatter0.renderOptions(stringBuffer0, (-1), options1, 7, 7);
      helpFormatter0.printHelp("?*Y>Cld<n", "q2 Wkq)S<fR`XG]]25r", options2, "", true);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("\n");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setWidth(3);
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("has already been selected: '", "arg", options1, "arg");
      helpFormatter0.getSyntaxPrefix();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("-", (String) null, options0, (String) null, false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 109, " ", "", options1, 12, 33, " ", true);
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("arg", "~}^U?/HJa4KxTcO#]N", false, "-");
      // Undeclared exception!
      try { 
        helpFormatter1.printOptions(mockPrintWriter0, 3, options3, (-450), (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("\n");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setWidth(3);
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("has already been selected: '", "arg", options1, "arg");
      helpFormatter0.getSyntaxPrefix();
      options0.getOption("Y8f#ab,S+9Gjv):H8~$");
      helpFormatter0.getLeftPadding();
      helpFormatter0.printHelp("has already been selected: '", "has already been selected: '", options0, "dHxrzgg");
      boolean boolean0 = false;
      String string0 = "--";
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 15, "org.apache.commons.cli.HelpFormatter$1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("\n");
      OptionGroup optionGroup0 = new OptionGroup();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      helpFormatter1.setOptPrefix("usage: ");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 703, "org.apache.commons.cli.HelpFormatter", "Z-/m?]tVkx`Uh,6ZE", options0, 3, 14, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", false);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "FpmSf_i}?_ios\\";
      String string1 = "";
      helpFormatter0.setLongOptPrefix("");
      Options options0 = new Options();
      String string2 = "1STU4D(YV0!2%x5a*Q";
      Options options1 = options0.addOption("", true, "FpmSf_i}?_ios");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-4285), "", "", options1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(721);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("OY", false, ", ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      optionGroup1.setRequired(false);
      options1.addOption(option0);
      helpFormatter0.printHelp("OY", "OY", options0, ", ");
      helpFormatter0.getSyntaxPrefix();
      options1.getOption("usage: ");
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLeftPadding((-5144));
      options1.helpOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-458), "[Ot :93f!8/%uD=", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 44, 44, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      helpFormatter0.getNewLine();
      helpFormatter0.getWidth();
      helpFormatter0.defaultNewLine = "\n";
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter1.setOptionComparator(comparator0);
      helpFormatter0.getWidth();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getArgName();
      helpFormatter1.printHelp("arg", "6]1h", options0, " ", false);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'y';
      charArray0[1] = '*';
      charArray0[2] = '!';
      charArray0[3] = '.';
      charArray0[4] = '1';
      charArray0[5] = 'P';
      charArray0[6] = ':';
      charArray0[7] = 'w';
      mockPrintWriter0.write(charArray0);
      // Undeclared exception!
      try { 
        helpFormatter3.printHelp((PrintWriter) mockPrintWriter0, 3174, "-", (String) null, options0, (-1353), 74, "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("<Y)n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2788), "", "[", options0, 74, (-1438), "<Y)n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("[");
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim("\n");
      StringBuffer stringBuffer0 = new StringBuffer(74);
      int int0 = 1;
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = new Option("", "--", true, "");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        options1.addOption("usage: ", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(721);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("OY", true, ", ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("OY", "OY", options0, ", ");
      helpFormatter0.getSyntaxPrefix();
      options1.getOption("usage: ");
      OptionGroup optionGroup2 = new OptionGroup();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-2), ", ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("\n");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = null;
      boolean boolean0 = true;
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(32, "[h]2kQ,Q'C", "", (Options) null, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("\n");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setWidth(3);
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("has already been selected: '", "arg", options1, "arg");
      helpFormatter0.getSyntaxPrefix();
      options0.getOption("Y8f#ab,S+9Gjv):H8~$");
      helpFormatter0.getLeftPadding();
      helpFormatter0.printHelp("has already been selected: '", "has already been selected: '", options0, "dHxrzgg");
      optionGroup0.toString();
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "arg");
      helpFormatter0.printHelp("has already been selected: '", "@", options1, (String) null, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 30, "@", "", options1, (-1), (-1), "R+c_<HQ8", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "FpmSf_i}?_ios\\";
      String string1 = "";
      helpFormatter0.setLongOptPrefix("");
      Options options0 = new Options();
      boolean boolean0 = false;
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(1376, "FpmSf_i}?_ios", "usage: ", options1, "1STU4D(YV0!2%x5a*Q", false);
      Options options2 = new Options();
      Option option1 = null;
      try {
        option1 = new Option("1STU4D(YV0!2%x5a*Q", "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '1STU4D(YV0!2%x5a*Q' contains an illegal character : '('
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("eQxs.q+s Ue($v");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setWidth(31);
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("has already been selected: '", "guNG>jc.6$xLS$", options0, "guNG>jc.6$xLS$");
      helpFormatter0.getSyntaxPrefix();
      options1.getOption("<!fMmP &Gv:N8)c}.");
      helpFormatter0.getLeftPadding();
      helpFormatter0.printHelp("b~6b.d}Sx!9fg`ghr.", "guNG>jc.6$xLS$", options0, "oNp~1I9");
      helpFormatter0.setLeftPadding((-5399));
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter1.setOptionComparator(comparator0);
      helpFormatter1.getWidth();
      helpFormatter0.getArgName();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(18);
      helpFormatter2.renderWrappedText(stringBuffer0, 1, (-5399), "");
      helpFormatter2.printHelp("--", "-", options0, "\n", false);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-3);
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-3), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      MockPrintStream mockPrintStream0 = new MockPrintStream("\n");
      mockPrintStream0.println((-1.0));
      PrintStream printStream0 = mockPrintStream0.append(' ');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      Options options0 = new Options();
      helpFormatter0.printHelp("0{&K| QF#UM %3|;", "0{&K| QF#UM %3|;", options0, "e{kON/8Q=9<**%f");
      helpFormatter0.setLeftPadding(2837);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter1.setOptionComparator(comparator0);
      helpFormatter1.getWidth();
      helpFormatter0.getArgName();
      helpFormatter0.defaultDescPad = 621;
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 422, "--");
      helpFormatter1.defaultLongOptPrefix = "u%mNO0`l6";
      helpFormatter1.printHelp("org.apache.commons.cli.Option", "--", options0, (String) null, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "u%mNO0`l6", "e{kON/8Q=9<**%f", options0, 1, 2837, " ", false);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.getNewLine();
      helpFormatter0.getWidth();
      helpFormatter0.defaultNewLine = "\n";
      String string0 = null;
      Options options0 = new Options();
      Options options1 = options0.addOption("", "\n", false, "--");
      Option option0 = new Option("arg", false, "\n");
      option0.setArgs(1);
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      options2.addOptionGroup(optionGroup0);
      options2.helpOptions();
      helpFormatter0.printHelp(74, "--", (String) null, options2, (String) null);
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), "\n", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      helpFormatter1.printHelp("q", ".oL+Yc#NA-qj%", options0, "org.apache.commons.cli.ParseException");
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter2.setLeftPadding((-304));
      HelpFormatter helpFormatter3 = new HelpFormatter();
      HelpFormatter helpFormatter4 = new HelpFormatter();
      HelpFormatter helpFormatter5 = new HelpFormatter();
      helpFormatter5.defaultLeftPad = (-1339);
      // Undeclared exception!
      try { 
        helpFormatter5.printHelp("arg", "org.apache.commons.cli.HelpFormatter", options1, "YZ=9._'f.-", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("eQxs.q+s Ue($v");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setWidth(31);
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("has already been selected: '", "guNG>jc.6$xLS$", options0, "guNG>jc.6$xLS$");
      helpFormatter0.getSyntaxPrefix();
      options1.getOption("<!fMmP &Gv:N8)c}.");
      helpFormatter0.getLeftPadding();
      helpFormatter0.printHelp("b~6b.d}Sx!9fg`ghr.", "guNG>jc.6$xLS$", options0, "oNp~1I9");
      helpFormatter0.setLeftPadding((-5399));
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter1.setOptionComparator(comparator0);
      helpFormatter1.getWidth();
      helpFormatter0.getArgName();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("--", "-", options0, "\n", false);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("\n");
      mockPrintStream0.println((-1.0));
      PrintStream printStream0 = mockPrintStream0.append('\u000F');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      Options options0 = new Options();
      options0.hasShortOption("`+XGV2)");
      options0.getOption("-");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 34, "[", "<", options0, 1377, 34, "0{&K| QF#UM %3|;");
      helpFormatter0.setOptPrefix("rBP$8A@h2F");
      helpFormatter0.getWidth();
      helpFormatter0.setArgName("rBP$8A@h2F");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printOptions(mockPrintWriter0, (-1), options0, 3082, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      MockPrintStream mockPrintStream0 = new MockPrintStream("\n");
      mockPrintStream0.println((-1.0));
      PrintStream printStream0 = mockPrintStream0.append(' ');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      Options options0 = new Options();
      helpFormatter0.printHelp("0{&K| QF#UM %3|;", "0{&K| QF#UM %3|;", options0, "e{kON/8Q=9<**%f");
      helpFormatter0.setLeftPadding(2837);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter1.setOptionComparator(comparator0);
      helpFormatter1.getWidth();
      helpFormatter0.getArgName();
      helpFormatter1.printHelp("org.apache.commons.cli.Option", "--", options0, (String) null, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "", "e{kON/8Q=9<**%f", options0, 1, 2837, " ", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      Option option0 = new Option("", "");
      option0.setArgs(74);
      options0.addOption(option0);
      LinkedList<Option> linkedList0 = new LinkedList<Option>();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("line.separator", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.getNewLine();
      helpFormatter0.getWidth();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.defaultNewLine = "\n";
      Options options0 = new Options();
      Options options1 = options0.addOption("", "O<F", false, "--");
      Option option0 = new Option("arg", false, "\n");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      options1.hasOption("");
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      helpFormatter0.printHelp("}qL~ou`:,hp2@o1vdP", "v@|E[7(6u", options1, "X&,2 {>7$pf}9>V6<", true);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "--");
      helpFormatter0.setOptPrefix("");
      String string0 = "org.apache.commons.cli.HelpFormatter";
      helpFormatter0.defaultLongOptPrefix = "org.apache.commons.cli.HelpFormatter";
      helpFormatter0.getNewLine();
      helpFormatter0.defaultNewLine = "\n";
      helpFormatter0.defaultSyntaxPrefix = "org.apache.commons.cli.HelpFormatter";
      helpFormatter0.findWrapPos("'", 1, 1);
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      options0.hasOption("6n\u0003j?a1!\"zv^b^Jz");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getWidth();
      helpFormatter0.getArgName();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.setOptPrefix("--");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (-1), "usage: ", "s.<}wz'+1ynw", options0, 74, 3, "arg", false);
      // Undeclared exception!
      helpFormatter3.printUsage((PrintWriter) mockPrintWriter0, 1, "-", options0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setLongOptPrefix("");
      Options options0 = new Options();
      String string1 = "";
      options0.addOption("", false, "FpmSf_i}?_ios");
      helpFormatter0.printHelp("FpmSf_i}?_ios", "", options0, "1STU4D(YV0!2%x5a*Q", false);
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      helpFormatter0.printHelp("org.apache.commons.cli.Options", options0, false);
      StringWriter stringWriter0 = new StringWriter(3);
      stringWriter0.append('z');
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "FpmSf_i}?_ios");
      helpFormatter0.printHelp("FpmSf_i}?_ios", "", options0, "1STU4D(YV0!2%x5a*Q", false);
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      helpFormatter0.printHelp("org.apache.commons.cli.Options", options0, false);
      String string0 = "";
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1544, "line.separator", "T1)W!F@F!Gco]E>", options1, 74, 1544, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("eQxs.q+s Ue($v");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      mockPrintStream0.append(' ');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options1 = new Options();
      Options options2 = options0.addOption("arg", "arg", true, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "0{&K| QF#UM %3|;", options2, "e{kON/8Q=9<**%f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      MockPrintStream mockPrintStream0 = new MockPrintStream("\n");
      mockPrintStream0.println((-1.0));
      PrintStream printStream0 = mockPrintStream0.append(' ');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      String string0 = "0{&K| QF#UM %3|;";
      Options options0 = new Options();
      options0.hasShortOption("usage: ");
      options0.getOption(" ");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, (-672), "0{&K| QF#UM %3|;");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "", (Options) null, "[h)2kQ,Q'C", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      options1.hasShortOption(" ");
      options1.getOption("usage: ");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getWidth();
      helpFormatter0.setArgName("");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-1), (Options) null, 0, (-672));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      options0.getMatchingOptions("arg");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      helpFormatter0.setWidth(44);
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.hasLongOption("usage: ");
      helpFormatter0.printHelp("T/^(lK)y+6/", "!C9L", options1, "");
      options1.toString();
      options1.getOption("T/^(lK)y+6/");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("arg", "", options1, "org.apache.commons.cli.AlreadySelectedException");
      helpFormatter1.setLeftPadding((-1));
      helpFormatter1.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((String) null, "", options0, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("\n");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setWidth(3);
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("has already been selected: '", "arg", options1, "arg");
      helpFormatter0.getSyntaxPrefix();
      options0.getOption("Y8f#ab,S+9Gjv):H8~$");
      helpFormatter0.getLeftPadding();
      helpFormatter0.printHelp("has already been selected: '", "has already been selected: '", options0, "dHxrzgg");
      helpFormatter0.setLeftPadding(0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      helpFormatter0.printHelp("V+&v!IoT|J ", "Ung(r5", options0, "has already been selected: '", true);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Locale locale0 = new Locale("--");
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, " ", (Object[]) null);
      mockPrintWriter0.flush();
      int int0 = 1552;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-1785), 1552, "##T");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.rtrim("--");
      helpFormatter0.getWidth();
      String string0 = "v@|E[7(6u";
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.defaultNewLine = "--";
      String string1 = null;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("-", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2804));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setLongOptPrefix((String) null);
      Options options0 = new Options();
      String string1 = "";
      boolean boolean0 = false;
      Options options1 = options0.addOption("", false, "6(Y)iN,dc#7,&q");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options1, "1STU4D(YV0!2%x5a*Q", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      stringBuffer0.trimToSize();
      stringBuffer0.reverse();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_PREFIX;
      stringBuffer0.trimToSize();
      // Undeclared exception!
      try { 
        stringBuffer0.append((CharSequence) "--", 1, (-1213));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 1, end -1213, s.length() 2
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "";
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      MockPrintStream mockPrintStream0 = new MockPrintStream("\n");
      mockPrintStream0.println((-0.4891152236068993));
      PrintStream printStream0 = mockPrintStream0.append(' ');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      Options options0 = new Options();
      Option option0 = new Option("", " ");
      Options options1 = options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter1.getWidth();
      helpFormatter0.getArgName();
      helpFormatter1.printHelp("org.apache.commons.cli.OptionGroup", "kz!bz_,ciws", options0, "", false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(printStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 1, "", "\n", options1, (-2069), 912, "arg", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("\n");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setWidth(3);
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("has already been selected: '", "arg", options1, "arg");
      helpFormatter0.getSyntaxPrefix();
      options0.getOption("Y8f#ab,S+9Gjv):H8~$");
      String string0 = "dHxrzgg";
      helpFormatter0.printHelp("usage: ", "Y8f#ab,S+9Gjv):H8~$", options0, "org.apache.commons.cli.HelpFormatter$1");
      helpFormatter0.printHelp("]", "has already been selected: '", options0, "i-N", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth((-1));
      helpFormatter1.setLongOptSeparator("Nc");
      // Undeclared exception!
      try { 
        options1.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "`B><fO2");
      String string0 = "[ARG...]";
      helpFormatter0.printHelp("org.apache.commons.cli.OptionValidator", "1STU4D(YV0!2%x5a*Q", options1, "[ARG...]", false);
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      String string1 = "";
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      helpFormatter0.getNewLine();
      helpFormatter0.getWidth();
      helpFormatter0.defaultNewLine = null;
      String string0 = null;
      Options options0 = new Options();
      Options options1 = options0.addOption("", "O<F", false, "--");
      Option option0 = new Option("arg", false, (String) null);
      option0.clearValues();
      option0.setLongOpt("org.apache.commons.cli.HelpFormatter$OptionComparator");
      option0.setArgs(1);
      Options options2 = options1.addOption(option0);
      options2.hasLongOption((String) null);
      options2.toString();
      options2.helpOptions();
      helpFormatter0.printHelp(74, "v@|E[7(6u", (String) null, options2, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), "v@|E[7(6u", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.getNewLine();
      helpFormatter0.getWidth();
      helpFormatter0.defaultNewLine = "\n";
      String string0 = null;
      Options options0 = new Options();
      String string1 = "O<F";
      Options options1 = options0.addOption("", "O<F", false, "--");
      Option option0 = new Option("arg", false, "\n");
      option0.setArgs(1);
      Options options2 = options1.addOption(option0);
      options2.helpOptions();
      helpFormatter0.printHelp(74, "v@|E[7(6u", (String) null, options2, (String) null);
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), "v@|E[7(6u", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getWidth();
      helpFormatter1.getArgName();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.getLeftPadding();
      helpFormatter3.setLeftPadding(36);
      HelpFormatter helpFormatter4 = new HelpFormatter();
      HelpFormatter helpFormatter5 = new HelpFormatter();
      helpFormatter5.setOptPrefix("S9 2n]@;");
      Option option0 = new Option((String) null, "arg");
      Options options1 = options0.addOption(option0);
      helpFormatter1.printHelp("jwG", "-", options1, (String) null, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      helpFormatter3.printUsage(printWriter0, 31, "", options0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      helpFormatter1.renderWrappedText(stringBuffer0, 64, (-707), "usage: ");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption((String) null, true, "has already been selected: '");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = ")In.bCs'SoC}&kp";
      // Undeclared exception!
      helpFormatter1.printHelp(1, " ", ")In.bCs'SoC}&kp", options0, "-", true);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix((String) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      doReturn(0, 0, 0, 0).when(comparator0).compare(any() , any());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setNewLine("");
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      Option option0 = new Option((String) null, (String) null);
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("9", true, "s");
      Options options3 = options2.addOption((String) null, "%T4l_|d7*iJ21", true, "[ARG...]");
      helpFormatter0.printHelp("JZHv", options3, true);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      MockPrintStream mockPrintStream0 = new MockPrintStream("\n");
      mockPrintStream0.println((-1.0));
      PrintStream printStream0 = mockPrintStream0.append(' ');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      String string0 = "0{&K| QF#UM %3|;";
      Options options0 = new Options();
      options0.hasShortOption("usage: ");
      options0.getOption(" ");
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-218), "0{&K| QF#UM %3|;", "0{&K| QF#UM %3|;", options0, (-218), 0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "org.apache.commons.cli.Option";
      helpFormatter0.setLongOptPrefix("org.apache.commons.cli.Option");
      String string1 = null;
      Options options0 = new Options();
      String string2 = "}{qFu\"a]dkA ?6~|QGx";
      helpFormatter0.createPadding(0);
      boolean boolean0 = true;
      helpFormatter0.setDescPadding(0);
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "org.apache.commons.cli.Option");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "--";
      helpFormatter0.setNewLine("--");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      mockPrintWriter0.printf("--", (Object[]) null);
      mockPrintWriter0.append('v');
      int int0 = 425;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", true, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim((String) null);
      String string0 = "";
      MockFile mockFile0 = new MockFile("", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      StringWriter stringWriter2 = stringWriter1.append('M');
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1031), options0, (-1031), (-1031));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.HelpFormatter$1";
      helpFormatter0.setOptPrefix("org.apache.commons.cli.HelpFormatter$1");
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.HelpFormatter$1");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      String string1 = HelpFormatter.DEFAULT_ARG_NAME;
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "arg", 74, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("cmdLineSyntax not provided");
      helpFormatter0.getNewLine();
      int int0 = 0;
      helpFormatter0.createPadding(0);
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "cmdLineSyntax not provided");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("\n");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setWidth(3);
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("has already been selected: '", "arg", options1, "arg");
      helpFormatter0.getSyntaxPrefix();
      options0.getOption("Y8f#ab,S+9Gjv):H8~$");
      helpFormatter0.getLeftPadding();
      options0.hasShortOption("has already been selected: '");
      options0.getOption("-");
      helpFormatter0.setOptPrefix("!Yp>L?3p(2{");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getWidth();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" ", "\n");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockFile0.mkdir();
      mockPrintWriter0.println((-2461.0F));
      int int0 = (-1818);
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1818), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setLongOptPrefix("");
      Options options0 = new Options();
      options0.addOption("", false, "FpmSf_i}?_ios");
      helpFormatter0.printHelp("FpmSf_i}?_ios", "", options0, "1STU4D(YV0!2%x5a*Q", false);
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      helpFormatter0.printHelp("org.apache.commons.cli.Options", options0, false);
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append('z');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      String string1 = "742F'";
      helpFormatter0.setLongOptSeparator("742F'");
      helpFormatter0.printHelp("arg", options0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "", options1, "[ option: ", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1;
      String string0 = "";
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 1, "");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "FpmSf_i}?_ios\\";
      helpFormatter0.setLongOptPrefix("");
      Options options0 = new Options();
      String string1 = "";
      Options options1 = options0.addOption("", false, "FpmSf_i}?_ios");
      helpFormatter0.printHelp("FpmSf_i}?_ios", "", options0, "1STU4D(YV0!2%x5a*Q", false);
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      helpFormatter0.printHelp("org.apache.commons.cli.Options", options0, false);
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append('z');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, 2136, "l;CX@aKv(+-]");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "arg", "arg", options1, "org.apache.commons.cli.Options");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.getNewLine();
      helpFormatter0.getWidth();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.defaultNewLine = "\n";
      Options options0 = new Options();
      Options options1 = options0.addOption("", "O<F", false, "--");
      Option option0 = new Option("arg", false, "\n");
      option0.setLongOpt("org.apache.commons.cli.HelpFormatter$OptionComparator");
      option0.setArgs(1);
      Options options2 = options1.addOption(option0);
      options2.helpOptions();
      helpFormatter0.printHelp(74, "v@|E[7(6u", (String) null, options2, (String) null);
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), "v@|E[7(6u", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("\n");
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = true;
      optionGroup0.setRequired(true);
      helpFormatter0.setWidth(1);
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter0.printHelp("has already been selected: '", "T/^(lK)y+6/", options1, "T/^(lK)y+6/");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "has already been selected: '";
      Options options0 = new Options();
      options0.getMatchingOptions("\n");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      helpFormatter0.setWidth(1);
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter0.printHelp("has already been selected: '", "T/^(lK)y+6/", options1, "T/^(lK)y+6/");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      String string0 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(" ", "arg");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // arg
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.getArgName();
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("arg", string0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "usage: ";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      int int0 = 44;
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 44, "usage: ");
      helpFormatter0.getLongOptPrefix();
      String string1 = " AR{aEf";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("The option '", "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'The option '' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 31;
      helpFormatter0.createPadding(31);
      helpFormatter0.getNewLine();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('p');
      int int0 = 0;
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "--", 0, 31);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      String string0 = "";
      String string1 = "5";
      Options options0 = new Options();
      String string2 = ";{.iJ=~D22-bG]c'";
      // Undeclared exception!
      try { 
        options0.addOption(";{.iJ=~D22-bG]c'", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ';{.iJ=~D22-bG]c'' contains an illegal character : ';'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 445;
      MockFile mockFile0 = new MockFile("usage: ", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) mockPrintWriter0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) mockFile0;
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) "";
      mockPrintWriter0.format("usage: ", objectArray0);
      String string0 = "<QA7n2Y{;!D";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("\n", "--", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
