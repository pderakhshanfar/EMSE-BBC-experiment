/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 14:48:08 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.nio.CharBuffer;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.getSyntaxPrefix();
      int int0 = 41;
      helpFormatter0.defaultLeftPad = 41;
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptSeparator();
      int int1 = (-2);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-2));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "dl@klw2F2)E";
      helpFormatter0.setNewLine("dl@klw2F2)E");
      int int0 = (-16);
      helpFormatter0.setLeftPadding((-16));
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
      helpFormatter0.rtrim("Yfd/7`!'K>skJn~T");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Options options0 = new Options();
      stringBuffer0.append(1.0F);
      Object object0 = new Object();
      stringBuffer0.append(object0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-16), options0, 3, (-837));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.defaultNewLine = null;
      helpFormatter0.getNewLine();
      helpFormatter0.getArgName();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption((String) null, "", true, "");
      options2.getMatchingOptions("usage: ");
      options2.getOptionGroups();
      options1.getOptions();
      Option option0 = new Option("", "3=1x w4S\"c");
      Options options3 = options2.addOption(option0);
      helpFormatter0.printHelp("t5,a4tHhj*mtf84q", options3);
      helpFormatter0.getOptionComparator();
      helpFormatter0.rtrim("s#");
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "-";
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "");
      String string1 = "dI7TlOWon#HEW$'";
      options1.hasOption("dI7TlOWon#HEW$'");
      helpFormatter0.printHelp(13, "-", "-", options1, "-");
      String string2 = "";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(9, "-", "-", (Options) null, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(1883);
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 64, 64, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.setLeftPadding((-1602));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) mockPrintWriter0;
      mockPrintWriter0.format((Locale) null, "-", objectArray0);
      Object object2 = new Object();
      mockPrintWriter0.printf((Locale) null, "-", objectArray0);
      Options options0 = new Options();
      boolean boolean0 = true;
      int int0 = (-1602);
      int int1 = 970;
      String string0 = "";
      String string1 = "wipl4LbELr^Fwk6";
      int int2 = (-1306);
      helpFormatter0.defaultNewLine = "wipl4LbELr^Fwk6";
      helpFormatter0.createPadding(9);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("wipl4LbELr^Fwk6", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("}nLo8QA&;>");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[7];
      mockPrintWriter0.printf((Locale) null, "}nLo8QA&;>", objectArray0);
      Options options0 = new Options();
      helpFormatter0.setWidth(54);
      helpFormatter0.rtrim("f=fD$5x~7c`V");
      helpFormatter0.setLongOptPrefix("k*os(f:");
      helpFormatter0.getOptionComparator();
      helpFormatter0.printHelp("f=fD$5x~7c`V", (String) null, options0, (String) null);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) ")X]yjRn*'dl(@e3";
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) ")X]yjRn*'dl(@e3";
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) null;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, ")X]yjRn*'dl(@e3", objectArray0);
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", "", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      helpFormatter0.printUsage(printWriter0, 39, ")X]yjRn*'dl(@e3", options3);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      helpFormatter0.createPadding(8);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-262));
      helpFormatter0.setDescPadding(9);
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("Y`8qxJfDYW");
      options0.hasShortOption(" ");
      options0.hasLongOption("Ipr-6");
      int int0 = helpFormatter0.defaultLeftPad;
      helpFormatter1.setLongOptPrefix("Y`8qxJfDYW");
      helpFormatter0.getWidth();
      helpFormatter1.setLongOptSeparator("usage: ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.printHelp(3, "NO_ARGS_ALLOWED", "\n", options0, "Cannot add value, list full.");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Option option0 = new Option("arg", true, "lRSFT]wCC%");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter1.printHelp("usage: ", options0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "", options2);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = (-1);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1, (Options) null, 1, 15);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "usage: ");
      helpFormatter0.printHelp(74, " ", "arg", options1, "arg");
      helpFormatter0.printHelp("arg", options1, true);
      String string0 = helpFormatter0.defaultOptPrefix;
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, (-1), (-1), "");
      helpFormatter0.renderWrappedText(stringBuffer1, 1965, (-1), "");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", false, "lRSFT]wCC%");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("*");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Options options1 = options0.addOption(option0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "ieNk%s0}t+T", (String) null, options1, 2, 3, "*", true);
      helpFormatter1.getNewLine();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      Options options1 = options0.addOption("arg", true, "3?&jk)W");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      StringWriter stringWriter2 = stringWriter1.append('g');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 60, "3?&jk)W", "rsJnmTkuz{DJ=ng;", options1, 60, (-5919), "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(63, "[", ",kXg:t", options0, "JA7OKmlc8=5YG;Go");
      helpFormatter0.rtrim(".(QaPLM5`n2O3<wpM&v");
      StringWriter stringWriter0 = new StringWriter(63);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "<", options0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", false, "lRSFT]wCC%");
      optionGroup0.setRequired(true);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter1.printHelp("usage: ", options0, true);
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("Illegal option name '");
      File file0 = MockFile.createTempFile("jF'GCi$Yr]<~O3", "usage: ", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 2, "jF'GCi$Yr]<~O3", "IWMLP0b", options0, 942, 1, (String) null, true);
      helpFormatter0.getNewLine();
      helpFormatter0.getNewLine();
      helpFormatter0.createPadding(86);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp(2, "SbfkJ{:}p@|,hw]", (String) null, options0, "SbfkJ{:}p@|,hw]");
      helpFormatter0.findWrapPos("jl$)|jKP4iqQ)V:", 9, 2);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.hasLongOption("");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("arg", options0, true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer("X=!Jt%nTt");
      helpFormatter0.rtrim("0?i`61AL+[wdSWj)B ,");
      helpFormatter0.printHelp("usage: ", "6ASS1oGUk=tV|5!vJ&", options0, "arg");
      Options options1 = options0.addOption("arg", "J\"e)dgN%Tg9_ya", false, "");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-438), options1, 1, 32);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("U0t#D.qJv^TZe");
      int int0 = 31;
      String string0 = "cNtQb5}}8*";
      String string1 = "]";
      Options options0 = null;
      String string2 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("zdsEdr~", "xXK", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      PrintWriter printWriter0 = mockPrintWriter0.append('5');
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1522), (String) null, ",iv&cME8]xKb-h~", options0, (-1522), (-2), ",iv&cME8]xKb-h~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("C] MnB)sl_A#.K", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      StringBuffer stringBuffer1 = new StringBuffer("usage: ");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "arg", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("Z", false, "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      Options options3 = options2.addOption(option0);
      helpFormatter0.printHelp("-", options3);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("}nLo8QA&;>");
      Object[] objectArray0 = new Object[7];
      Options options0 = new Options();
      Option option0 = new Option("", "");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("arg", true, (String) null);
      Options options3 = options2.addOption("", "", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options4 = options3.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("k*os(f:", options4, true);
      mockPrintWriter0.printf((Locale) null, "}nLo8QA&;>", objectArray0);
      Options options5 = new Options();
      helpFormatter0.rtrim("f=fD$5x~7c`V");
      helpFormatter0.setLongOptPrefix("k*os(f:");
      helpFormatter0.getOptionComparator();
      helpFormatter0.printHelp("f=fD$5x~7c`V", (String) null, options5, (String) null);
      helpFormatter0.printHelp("rg,]J>>wBre}}'V", "f=fD$5x~7c`V", options5, "OPn?kYsx ");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultWidth = 74;
      options0.addOption("", false, "-");
      options0.toString();
      helpFormatter1.printHelp(2803, "--", "--", options0, "arg");
      helpFormatter1.printHelp("usage: ", "-", options0, "3\"L>Zrywh9*q", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Locale locale0 = Locale.FRENCH;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("\n");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 74, "sjTP", "-", options0, 0, 2, "NuPcPe", true);
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      helpFormatter1.getLeftPadding();
      helpFormatter1.createPadding(0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.hasLongOption("Ty&l");
      helpFormatter1.printHelp("lRSFT]wCC%", "", options0, (String) null, false);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "lRSFT]wCC%");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter1.printHelp("usage: ", options0, true);
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      helpFormatter2.getWidth();
      helpFormatter1.renderWrappedText(stringBuffer0, 3078, 74, "org.apache.commons.cli.Util");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 32, (-336), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", "l0>");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "l0>";
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) "O~scF>aA~8G{ ";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "O~scF>aA~8G{ ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-290), "org.apache.commons.cli.Util");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "C] MnB)l_A#.K";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1063), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(9);
      helpFormatter0.setDescPadding(0);
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile((String) null, "@5smjQWf$");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 0, "^", "", options0, (-901), 594, "arg");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-19);
      helpFormatter0.defaultSyntaxPrefix = null;
      Options options0 = new Options();
      EvoSuiteFile evoSuiteFile0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-19), (-19), "Yn~{");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(3, "arg", " ", options0, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-32), (-32));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "-";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("IvZ5", "}<821m", (Options) null, "`", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "", options0, ".6HS:?A,A8%", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Options options0 = new Options();
      int int0 = 3393;
      Options options1 = new Options();
      String string0 = "";
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "SdE@{/`Wm%@]MJbr-]n", options0, "BMW:a:s-+iI[]l~", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(3);
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.toString();
      Options options1 = new Options();
      helpFormatter1.printHelp(2803, "--", "--", options0, "arg");
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Locale locale0 = Locale.JAPANESE;
      helpFormatter1.printHelp("usage: ", options1);
      helpFormatter0.getOptionComparator();
      helpFormatter1.printOptions(mockPrintWriter0, 74, options0, 1, 3);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.setWidth(0);
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp("'", options0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.printHelp(74, " ", " ", options0, "");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "[ option: ");
      options0.addOption((String) null, "", false, (String) null);
      helpFormatter0.printHelp("}fYbBumnY}[J", options1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "[ option: ", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.rtrim((String) null);
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultSyntaxPrefix = ">";
      Option option0 = new Option((String) null, false, " ");
      option0.setLongOpt("\n");
      options0.addOption(option0);
      Options options1 = options0.addOption("", false, "[ option: ");
      helpFormatter0.printHelp("}fYbBumnY}[J", options1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "[ option: ", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 768, "i?\"c/Ppvog");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(9);
      helpFormatter0.setDescPadding(0);
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.hasLongOption("arg");
      Options options1 = options0.addOption("", true, "-");
      helpFormatter0.printHelp(3, "arg", "V", options1, "--");
      helpFormatter0.printHelp("\n", "", options0, "usage: ");
      char[] charArray0 = new char[1];
      charArray0[0] = 'G';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 1, options0, 8, 8);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(20, "org.apache.commons.cli.HelpFormatter$OptionComparator", "qcU>@^f-", options0, "r>(Q.");
      options0.getMatchingOptions("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 32, options0, (-1495), (-1495));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "5NcBsDiPv4*E");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1328), "anpkWB5w|H9bTB.]o", "", options1, (-1328), 16, "anpkWB5w|H9bTB.]o");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.setWidth(0);
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options1 = options0.addOption((String) null, true, "\n");
      options1.getOption("GuC&R=Ba'/");
      helpFormatter0.printHelp(52, "2C>zK88'Q\"{B", (String) null, options0, "\"NL]Pt<&@PE4");
      // Undeclared exception!
      helpFormatter0.printHelp("@Kr", options1, true);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "--", "--", options0, "\n", false);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(3393, " ", " ", options0, "");
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      int int0 = (-3990);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", false, "QZ6e:x|N7hoi:Ce>Q");
      Options options2 = options1.addOption("arg", true, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-3990), "yWnX#v<6iEN43)", "~::h[<pN^(';57", options2, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("[pg'E;(|M");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      options0.getOptions();
      PrintWriter printWriter0 = mockPrintWriter0.append('G');
      mockFile0.setWritable(false, false);
      helpFormatter1.printHelp(printWriter0, 3, "-", "arg", options0, 32, 34, "usage: ", false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.rtrim(")[o");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      Options options1 = options0.addOption("", "VtRK$%Ii/", true, "[pg'E;(|M");
      helpFormatter3.printHelp(34, "usage: ", "JZnh(_`.fX17,}4h`", options1, "usage: ");
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 3;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp(3905, "\n", "-", (Options) null, "--");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(9);
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption("", true, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 34, "-", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-2);
      helpFormatter1.setNewLine((String) null);
      helpFormatter0.printHelp(3, "--", "-", options0, ":)VwO`");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Y^[6tx", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(9);
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption("", true, "-");
      helpFormatter0.printHelp(3, "Fn%zpN\n8go|'79", ")", options1, ">KafU^V.pl+b");
      helpFormatter1.printHelp("\n", options0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      Locale locale0 = Locale.ITALIAN;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) options1;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) byteArrayOutputStream0;
      objectArray0[4] = (Object) ")";
      objectArray0[5] = (Object) ")";
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "olY&x", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      helpFormatter1.printUsage(printWriter0, 89, "arg", options0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.setWidth(0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(115);
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1946), "", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Option option0 = new Option("", "zwqo-N", false, "\n");
      options0.addOption(option0);
      PrintWriter printWriter0 = mockPrintWriter0.append('.');
      MockFile mockFile1 = new MockFile("arg", "org.apache.commons.cli.HelpFormatter$1");
      mockFile0.renameTo(mockFile1);
      helpFormatter1.printHelp(printWriter0, 34, "-", "arg", options0, 32, 1, "usage: ", true);
      helpFormatter0.rtrim((String) null);
      helpFormatter0.setLongOptPrefix("--");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(74, (String) null, (String) null, options0, "zwqo-N");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.hasLongOption("Ty&l");
      helpFormatter1.printHelp("usage: ", options0, true);
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      helpFormatter1.printHelp(74, "-", "--", options0, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 1, options0, 1, 305);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 115, "_/SztP '", "", options0, 31, 31, "-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Option option0 = new Option("", "zwqo-N", false, "\n");
      options0.addOption(option0);
      PrintWriter printWriter0 = mockPrintWriter0.append('.');
      MockFile mockFile1 = new MockFile("arg", "org.apache.commons.cli.HelpFormatter$1");
      mockFile0.renameTo(mockFile1);
      helpFormatter1.printHelp(printWriter0, 34, "-", "arg", options0, 32, 1, "usage: ", false);
      helpFormatter0.rtrim((String) null);
      helpFormatter0.setLongOptPrefix("--");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      Options options0 = new Options();
      options0.hasLongOption("-");
      helpFormatter0.rtrim("");
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getOptionComparator();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.printHelp(">p@#+}iU1|#CH", "/a&\"&+KOUQqz8a?mA", options0, "");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.hasLongOption("Ty&l");
      helpFormatter1.printHelp("lRSFT]wCC%", "", options0, (String) null, false);
      helpFormatter1.printHelp("usage: ", options0, true);
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      helpFormatter2.getWidth();
      helpFormatter1.renderWrappedText(stringBuffer0, 3078, 74, "org.apache.commons.cli.Util");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "yojG";
      int int0 = (-648);
      String string1 = "i)^f5?";
      String string2 = "";
      boolean boolean0 = false;
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 290, "NP4s'2>kkD@q", "", options0, 1, 577, "arg");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 2, "arg", "", options0, 3, 1, "w]");
      // Undeclared exception!
      try { 
        options0.addOption("NP4s'2>kkD@q", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'NP4s'2>kkD@q' contains an illegal character : '''
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.setLeftPadding((-1602));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) mockPrintWriter0;
      mockPrintWriter0.format((Locale) null, "-", objectArray0);
      Object object2 = new Object();
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "-", objectArray0);
      Options options0 = new Options();
      String string0 = "";
      String string1 = "byycM&_4]fno";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 970, "", "byycM&_4]fno", options0, (-1306), (-1602), "byycM&_4]fno", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("}nLo8QA&;>");
      Object[] objectArray0 = new Object[7];
      mockPrintWriter0.printf((Locale) null, "}nLo8QA&;>", objectArray0);
      Options options0 = new Options();
      helpFormatter0.rtrim("f=fD$5x~7c`V");
      helpFormatter0.setLongOptPrefix("k*os(f:");
      helpFormatter0.getOptionComparator();
      helpFormatter0.printHelp("f=fD$5x~7c`V", (String) null, options0, (String) null);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('.');
      helpFormatter1.printHelp(printWriter0, 34, "-", "arg", options0, 32, 1, "usage: ", false);
      helpFormatter0.rtrim((String) null);
      helpFormatter0.setLongOptPrefix("--");
      helpFormatter0.printUsage(printWriter0, 94, "-", options0);
      helpFormatter0.printHelp(" ", options0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("}nLo8QA&;>");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "-";
      mockPrintWriter0.format((Locale) null, " q)RF.VYt", objectArray0);
      objectArray0[1] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "}nLo8QA&;>";
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2, " q)RF.VYt", "", options0, 2, 0, "", true);
      objectArray0[4] = (Object) "k>ios(f:";
      objectArray0[5] = (Object) "}nLo8QA&;>";
      objectArray0[6] = (Object) "k>ios(f:";
      mockPrintWriter0.printf((Locale) null, "usage: ", objectArray0);
      Options options1 = new Options();
      helpFormatter0.printHelp(816, " q)RF.VYt", " q)RF.VYt", options1, " q)RF.VYt");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.setLeftPadding((-1602));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      String string0 = "n2EZ,3lC7?";
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(32, "n2EZ,3lC7?", "", options0, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-262));
      helpFormatter0.setDescPadding(9);
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      String string0 = "Cannot add value, list full.";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string1 = "Y`8qxJfDYW";
      helpFormatter1.setSyntaxPrefix("Y`8qxJfDYW");
      String string2 = " ";
      options0.hasShortOption(" ");
      options0.hasLongOption("Ipr-6");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("SXi=?u", options0, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("usage: ");
      helpFormatter0.printHelp(3393, " ", " ", options0, "");
      File file0 = MockFile.createTempFile("%&(", "j~m$Y");
      options0.hasOption("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3393, (String) null, "%&(", options0, 86, 3393, "%&(", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.setLeftPadding((-1602));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "f";
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) "k*os(f:";
      objectArray0[4] = (Object) "f";
      objectArray0[5] = (Object) " ";
      mockPrintWriter0.printf((Locale) null, "k*os(f:", objectArray0);
      Options options0 = new Options();
      helpFormatter0.rtrim("f");
      helpFormatter0.setLongOptPrefix("f");
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("k*os(f:", (String) null, options0, "/a&\"&+KOUQqz8a?mA");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.getWidth();
      String string0 = "}nLo8QA&;>";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("}nLo8QA&;>");
      String string1 = "k*os(f:";
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "k*os(f:";
      mockPrintWriter0.format((Locale) null, " q)RF.VYt", objectArray0);
      objectArray0[1] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "}nLo8QA&;>";
      objectArray0[4] = (Object) "k*os(f:";
      objectArray0[5] = (Object) "}nLo8QA&;>";
      objectArray0[6] = (Object) "k*os(f:";
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "usage: ", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 816, "%R", "k*os(f:", options0, (-1602), 138, "}nLo8QA&;>", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(".j#77a");
      PrintWriter printWriter0 = mockPrintWriter0.append('$');
      helpFormatter0.printWrapped(printWriter0, 2935, "%d}HoNA");
      helpFormatter0.findWrapPos("[", 0, 0);
      helpFormatter0.getOptPrefix();
      helpFormatter0.setLeftPadding(0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer("2Y[d=#}Us");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      stringBuffer0.insert(0, '$');
      helpFormatter1.renderOptions(stringBuffer0, 74, options1, 2935, 3269);
      helpFormatter1.printHelp("\n", options0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.getWidth();
      String string0 = "f";
      helpFormatter0.setLeftPadding((-1602));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("bxm%4weVeld{S1mY2GF");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "f";
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) "f";
      objectArray0[4] = (Object) "f";
      objectArray0[5] = (Object) "bxm%4weVeld{S1mY2GF";
      objectArray0[6] = (Object) "bxm%4weVeld{S1mY2GF";
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "k*os(f:", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1602), "f", "", options0, (-1602), 0, "f", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "Cannot add value, list full.";
      helpFormatter0.setSyntaxPrefix("Cannot add value, list full.");
      options0.hasShortOption("");
      options0.hasLongOption("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      options0.getOption("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(23, "Vnr0PrHF3y(e*", "", options0, "");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding((-873));
      helpFormatter1.getNewLine();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      options0.hasLongOption((String) null);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("u3tNwLA", options0, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 333, 333, "Fgq!e3G2f]q");
      helpFormatter0.setWidth(0);
      helpFormatter0.setDescPadding(1);
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      String string0 = "Cannot add value, list full.";
      helpFormatter0.setSyntaxPrefix("\n");
      options0.hasShortOption("Cannot add value, list full.");
      options0.hasLongOption("\n");
      // Undeclared exception!
      helpFormatter0.printHelp("\n", options0, true);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Locale locale0 = new Locale("usage: ", "usage: ");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setDescPadding((-538));
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(74, "-", "\n", options0, "--", false);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(3425, "usage: ", "usage: ", options0, "usage: ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("' contains an illegal character : '");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      helpFormatter0.printUsage(printWriter0, 33, "--", options0);
      helpFormatter0.getArgName();
      helpFormatter0.getNewLine();
      helpFormatter0.printHelp("D):yug\"*", options0, true);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(".j#77a");
      PrintWriter printWriter0 = mockPrintWriter0.append('$');
      helpFormatter0.printWrapped(printWriter0, 2935, "%d}HoNA");
      helpFormatter0.findWrapPos("[", 0, 0);
      helpFormatter0.getOptPrefix();
      helpFormatter0.setLeftPadding(0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer("2Y[d=#}Us");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderOptions(stringBuffer0, 74, options1, 2935, 3269);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(74, "-", "usage: ", options0, "usage: ");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.getWidth();
      helpFormatter0.setLeftPadding(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "bxm%4weVeld{S1mY2GF";
      objectArray0[1] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "", objectArray0);
      Options options0 = new Options();
      String string0 = "";
      helpFormatter0.defaultArgName = "";
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "f", "", options0, 74, 0, "k*os(f:", true);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      options0.hasLongOption("T`&uxU1X;1B");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      helpFormatter0.renderOptions(stringBuffer0, 14, options0, 1, 117);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      String string0 = "ja)f~09";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("ja)f~09", "-");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // -
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Locale locale0 = new Locale("usage: ", "usage: ");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2, (String) null, "", (Options) null, ">");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      // Undeclared exception!
      helpFormatter1.printHelp(1, "usage: ", "", options1, "usage: ");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockPrintStream mockPrintStream0 = new MockPrintStream("\n");
      helpFormatter0.setLeftPadding((-1602));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("E8");
      Object object0 = new Object();
      mockPrintWriter0.append('F');
      Options options0 = new Options();
      helpFormatter0.rtrim("");
      helpFormatter0.setLongOptPrefix("E8");
      char[] charArray0 = new char[2];
      charArray0[0] = '\\';
      charArray0[1] = 'u';
      mockPrintWriter0.print(charArray0);
      helpFormatter0.findWrapPos("f", (-1602), 109);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 935, (-1602), "");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(3, "yojG", "-", options0, "org.apache.commons.cli.HelpFormatter");
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.setDescPadding(1);
      helpFormatter0.getNewLine();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLongOptPrefix("\n");
      helpFormatter0.setLongOptSeparator("\n");
      helpFormatter0.setSyntaxPrefix("hA#J/f@h<rr;SS");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.getWidth();
      helpFormatter0.setLeftPadding((-1602));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("bxm%4weVeld{S1mY2GF");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "f";
      objectArray0[1] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "f";
      objectArray0[4] = (Object) "f";
      objectArray0[5] = (Object) "bxm%4weVeld{S1mY2GF";
      objectArray0[6] = (Object) "bxm%4weVeld{S1mY2GF";
      mockPrintWriter0.printf((Locale) null, "k*os(f:", objectArray0);
      helpFormatter0.rtrim("f");
      helpFormatter0.setLongOptPrefix("f");
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, (-1602), options0, 2578, 0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(2321);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      String string0 = "";
      helpFormatter0.renderWrappedText(stringBuffer0, 2321, 2321, "");
      int int0 = 0;
      int int1 = 1;
      helpFormatter0.setWidth(1);
      helpFormatter0.setDescPadding((-809));
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      options0.hasShortOption("-");
      // Undeclared exception!
      try { 
        options0.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("' was specified but an option from this group ");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "' was specified but an option from this group ";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
      helpFormatter0.printUsage(printWriter0, 10, ", ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("");
      helpFormatter1.setArgName(" &g^b'2Kb4");
      helpFormatter0.getDescPadding();
      helpFormatter1.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(15, "arg", " ", options0, (String) null);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "usage: ");
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[5] = (Object) stringWriter0;
      helpFormatter0.setLeftPadding(0);
      Options options0 = new Options();
      options0.addOption("arg", false, "sd#M&zB.3");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", (String) null, options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(2321);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      stringBuffer0.append("");
      Object object0 = new Object();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) stringBuffer0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) "-";
      objectArray0[7] = (Object) "";
      objectArray0[8] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, 74, "arg", "8CsUHGszGpC4;ifl", (Options) null, 74, 2935, "arg", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.setLeftPadding((-1602));
      String string0 = "bxm%4weVeld{S1mY2GF";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("bxm%4weVeld{S1mY2GF");
      Object object0 = new Object();
      Options options0 = new Options();
      helpFormatter0.rtrim("f");
      helpFormatter0.setLongOptPrefix("f");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", 0, (-1602));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(3425, "dX bzO35[.#kZA^b~h<", "dX bzO35[.#kZA^b~h<", options0, "dX bzO35[.#kZA^b~h<");
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, options0, 3425, (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "Fgq!e3G2f]q");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "7?+nMU|](aJ}@@5H.j4";
      Options options0 = new Options();
      int int0 = 31;
      helpFormatter0.setWidth(31);
      OutputStream outputStream0 = null;
      String string1 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("'");
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      int int0 = 5151;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption(" ", "-", true, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(".j#77a");
      PrintWriter printWriter0 = mockPrintWriter0.append('$');
      String string0 = "%d}HoNA";
      helpFormatter0.printWrapped(printWriter0, 2935, "%d}HoNA");
      helpFormatter0.findWrapPos("[", 0, 0);
      helpFormatter0.getOptPrefix();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setLeftPadding(0);
      String string1 = "[ Options: [ short ";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options1.addOption("SNN`?i{x`Sq{Y", " [ARG]", true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'SNN`?i{x`Sq{Y' contains an illegal character : '`'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2321;
      helpFormatter0.setLeftPadding(2321);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      Options options0 = null;
      stringBuffer0.append("");
      String string0 = "--";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      helpFormatter0.setLongOptPrefix("");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "' was specified but an option from this group ", "v)!aum>[6M]<`4?BXc9", options0, "v)!aum>[6M]<`4?BXc9");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      String string0 = "^x~.7Qjcl/ZvNs9";
      int int0 = 2175;
      helpFormatter0.defaultDescPad = 2175;
      helpFormatter0.findWrapPos("^x~.7Qjcl/ZvNs9", 74, 74);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append('o');
      int int1 = (-2);
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) null, (-2), (-1164));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter0.setNewLine("--");
      helpFormatter0.setLeftPadding(1267);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Locale locale0 = new Locale("usage: ", "usage: ");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "usage: ";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
      helpFormatter0.printUsage(printWriter0, 74, "N");
      helpFormatter0.setArgName("=f@ds&9WniIUVGgtlI0");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1364, "7,+j4");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      String string0 = "!P|[!cG;6";
      String string1 = "";
      URI uRI0 = MockURI.URI("arg", "D<JTc!'EdXh", "", "arg", "lis[@?1wJztHeYY");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "U0t#D.qJv^TZe";
      helpFormatter0.setNewLine("U0t#D.qJv^TZe");
      String string1 = "zdsEdr~";
      int int0 = 31;
      String string2 = "The option '";
      Options options0 = new Options();
      String string3 = "cNtQb5}}8*";
      options0.hasOption("Cannot add value, list full.");
      boolean boolean0 = false;
      Options options1 = options0.addOption("", "cNtQb5}}8*", false, "The option '");
      options1.getOptions();
      // Undeclared exception!
      try { 
        options1.addOption("U0t#D.qJv^TZe", true, "U-4\"BMlrn2nlTE1$rG");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'U0t#D.qJv^TZe' contains an illegal character : '#'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "1R\".K7=x";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1179), (-1179), "1R\".K7=x");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) stringWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("\n", objectArray0);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, ")t.$");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockPrintStream mockPrintStream0 = new MockPrintStream("\n");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      Locale locale0 = Locale.ITALY;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "\n";
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) bufferedOutputStream0;
      objectArray0[3] = (Object) bufferedOutputStream0;
      objectArray0[4] = (Object) bufferedOutputStream0;
      objectArray0[5] = (Object) "\n";
      mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      int int0 = 985;
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 985, "\n");
      int int1 = 0;
      String string0 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options1.addOption("-", false, "-&B2b|j<sy3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 0;
      helpFormatter0.setWidth(0);
      helpFormatter0.setDescPadding(1);
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      options0.hasLongOption("usage: ");
      boolean boolean0 = true;
      // Undeclared exception!
      helpFormatter0.printHelp("\n", options0, true);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "NO_ARGS_ALLOWED";
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.defaultSyntaxPrefix = "NO_ARGS_ALLOWED";
      String string1 = "";
      helpFormatter0.rtrim("");
      helpFormatter0.setLongOptSeparator("");
      int int0 = 1760;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 1760, 3269, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "--");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // --
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("FB");
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setArgName("FB");
      helpFormatter0.setOptPrefix("C?GRvX");
      helpFormatter0.setWidth(4458);
      helpFormatter0.setWidth(305);
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      options0.getMatchingOptions("usage: ");
      int int0 = 851;
      helpFormatter0.renderOptions(stringBuffer0, 4458, options0, 851, 305);
      helpFormatter0.setLongOptSeparator("FB");
      helpFormatter0.findWrapPos("FB", 305, 116);
      helpFormatter0.createPadding(40);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("FB", "f");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // f
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.getWidth();
      String string0 = "f";
      helpFormatter0.setLeftPadding((-1602));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("bxm%4weVeld{S1mY2GF");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "f";
      objectArray0[1] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "f";
      objectArray0[4] = (Object) "f";
      objectArray0[5] = (Object) "bxm%4weVeld{S1mY2GF";
      objectArray0[6] = (Object) "bxm%4weVeld{S1mY2GF";
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "k*os(f:", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1602), "f", "", options0, (-1602), 0, "f", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = "org.apache.commons.cli.OptionGroup";
      helpFormatter0.defaultOptPrefix = "org.apache.commons.cli.OptionGroup";
      helpFormatter0.setOptPrefix("r{?zHP1h0\"sox$T4_2B");
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-2879);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2879), (-2879), "r{?zHP1h0\"sox$T4_2B");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
}
