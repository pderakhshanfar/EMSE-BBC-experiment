/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 14:48:07 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      Options options0 = null;
      String string0 = "";
      String string1 = "4E.N";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.defaultNewLine = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 0, (Options) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(7, "\n", "\n", (Options) null, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-12);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "   ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "--");
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-12));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Option option0 = new Option("", (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(74, "arg", "\n", options0, " ");
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-290));
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      options0.addOption("arg", true, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", options0, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter1.renderWrappedText(stringBuffer0, 20, 739, "Y[& ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-872), options1, 1, 108);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", true, "--");
      helpFormatter0.printHelp("--", options0, true);
      PrintWriter printWriter0 = null;
      String string0 = "--";
      int int0 = 755;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 389, "--", "[|*hX }", options0, 389, 755, "[|*hX }");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      int int0 = 32;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 32, (-2), "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringBuffer1.ensureCapacity((-1373));
      // Undeclared exception!
      try { 
        stringBuffer1.delete((-1373), 32);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1373
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(3, "--", "--", options0, "--");
      Options options1 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 677, options1, 677, 677);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 677, 4, "cmdLineSyntax not provided");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.defaultArgName = "";
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.defaultDescPad = (-1);
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "");
      Option option0 = new Option((String) null, "--", true, "-");
      Options options2 = options1.addOption("", (String) null, false, "arg");
      options2.addOption("", "", true, ";Yril'o");
      options2.helpOptions();
      Object object0 = new Object();
      options1.helpOptions();
      option0.setType(object0);
      Options options3 = options2.addOption((String) null, (String) null, true, "-");
      options3.hasShortOption("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("0", "0", options3, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "4)S6?";
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 389, (Options) null, 389, 389);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption((String) null, true, "qtsB+m/pi7;#g<");
      helpFormatter0.printHelp("f?k!z|ZO<", options1, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine(" ");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth((-333));
      Options options1 = options0.addOption("", true, "--");
      helpFormatter0.defaultLongOptPrefix = "";
      String string0 = "-9";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-9", options1, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("--", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "ZV<RX(5=", (String) null, options0, 2, 17, (String) null, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      int int0 = 0;
      int int1 = (-2112);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-2112), "#`yZJP6PtB|+==oUE0");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.printHelp("-9", options1, true);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.rtrim(">");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      MockFile mockFile0 = new MockFile("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      helpFormatter0.renderOptions(stringBuffer0, 31, options0, 4447, 4447);
      helpFormatter0.printHelp("|CLrCb{I3j6.3", (String) null, options0, "", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "", "--", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", true, "--");
      helpFormatter0.defaultWidth = 14;
      helpFormatter0.setLeftPadding((-211));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2, "--", "--", options0, "--");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "a76kF";
      File file0 = MockFile.createTempFile("arg", "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption("a76kF", "h#nvim{4cr,a", true, "");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 265, "a76kF", options2);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "a76kF";
      MockFile.createTempFile("arg", "\n");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "c$#t#BO^%kpBcIFIV");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1628), " ]", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "arg", "-", options0, 74, 192, "ZV<RX(5=", true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.defaultNewLine = "-";
      // Undeclared exception!
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 0, "", options0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(">");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 3909, "--", "f", options0, 3909, 1169, "", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "a76kF";
      MockFile.createTempFile("arg", "\n");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "c$#t#BO^%kpBcIFIV");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "ktDo", (String) null, options2, (-1), 74, "", true);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 5276, "!/VSYTJid YXl5&I%@", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "");
      options0.getMatchingOptions("arg");
      int int0 = (-1);
      String string0 = "";
      String string1 = "D27-dDz61G'y";
      String string2 = "";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2368, options2, 2368, 107);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, 333, 10, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      Options options1 = options0.addOption("$", "$", false, "usage: ");
      options1.hasLongOption("\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("[ option: ", options0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "MBQvV");
      Options options2 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter1.printHelp(3, "\n", "--", options2, "arg");
      helpFormatter1.createPadding(74);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "a76kF";
      File file0 = MockFile.createTempFile("arg", "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, "\n");
      MockFile.createTempFile("arg", "a76kF");
      Options options0 = new Options();
      helpFormatter0.printHelp(74, "a76kF", "", options0, " ]");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "AcQUe9pFc30", "a76kF", options0, 2758, 563, "");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockPrintWriter0.append('r');
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "", false, "r5'#/E ru");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "", false, "r5'#/E ru");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(" ]", options2, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("arg");
      Options options3 = new Options();
      options1.hasLongOption(" ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-82), "%&PGF2", ":hUb_!XHak^~", options0, 1, 248, "1Qs2Rl");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.addOption("arg", false, "--");
      helpFormatter1.defaultSyntaxPrefix = ")e1>/j.8%1s";
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "usage: ", ")e1>/j.8%1s", options0, 1, 4578, (String) null, false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.findWrapPos(">", 3, 1070);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "_N,(#g:";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "_N,(#g:");
      helpFormatter0.defaultSyntaxPrefix = null;
      PrintWriter printWriter0 = null;
      int int0 = 34;
      helpFormatter0.setDescPadding(34);
      int int1 = 2082;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 2082, "org.apache.commons.cli.HelpFormatter");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "+$x";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 31, 31, "+$x");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('r');
      int int0 = 0;
      int int1 = (-842);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-842), "0aWf`Uq])#m*IC");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3911, "]", "T", options0, 3911, 1169, "T", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.findWrapPos("Qn#KyrniA&", 1103, 74);
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (-520), "[", (String) null, options0, 4451, 14, "-", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "a76kF";
      File file0 = MockFile.createTempFile("arg", "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, "\n");
      MockFile.createTempFile("arg", "a76kF");
      Options options0 = new Options();
      helpFormatter0.printHelp(63, "a76kF", "", options0, " ]");
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = new Options();
      MockFile mockFile0 = new MockFile("I,,5%;q|$U[~");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile1 = new MockFile("arg");
      MockFile.createTempFile("WnM(Rp5K`(>hf7rd", "line.separator", (File) mockFile1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2660, "/Xq{>9N?@X:p", ">|", options1, (-407), 9, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1169, "Qn#KyrniA&", "Qn#KyrniA&", options0, 1071, 1071, "w3KCTz}2N tQ%iL*'", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.findWrapPos("[bBqhd`FZYcoo6a", 4451, 14);
      helpFormatter1.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1071, "\n", "qTjw6Kn/[[", options0, (-1648), 4209, "usage: ", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile.createTempFile("#DB;(-):zId|$jZ7", " ", (File) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("zm>trZxgs");
      Options options1 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1593, "Illegal option name '", "M ", options1, 1593, 533, "Illegal option name '");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptSeparator();
      int int0 = 74;
      helpFormatter0.createPadding(74);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", true, "arg");
      Options options3 = options2.addOption((String) null, "                                                                          ", false, " ");
      helpFormatter0.printHelp("arg", options3, true);
      String string0 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setArgName("");
      String string1 = "cmdLineSyntax not provided";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("$");
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "*PYC1su$", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-486), (-486), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("org.apache.commons.cli.HelpFormatter$1");
      helpFormatter0.renderWrappedText(stringBuffer0, 4581, 4581, "org.apache.commons.cli.HelpFormatter$1");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) ";]J^Aj(S+bx";
      objectArray0[1] = (Object) "";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) ";]J^Aj(S+bx";
      Locale locale0 = Locale.FRENCH;
      Option option0 = null;
      try {
        option0 = new Option("yM@+Yqm_5N}x)9[Jg?", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'yM@+Yqm_5N}x)9[Jg?' contains an illegal character : '@'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "usage: ", ")e1>/j.8%1s", options0, 1, 4578, (String) null, false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.findWrapPos(">", 3, 1070);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "a76kF";
      helpFormatter0.defaultLongOptPrefix = "a76kF";
      File file0 = MockFile.createTempFile("arg", "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, "{lVN@8H0\".");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "a76kF", "arg", (Options) null, "arg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = new Options();
      MockFile mockFile0 = new MockFile("Qn#KyrniA&");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 4578, "/Xq{>9N?@X:p", "", options0, 1169, 1169, "Jzly", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.findWrapPos(" ", 4578, 3);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(135, "Qn#KyrniA&", "Qn#KyrniA&", options0, "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 135, 47, ">T2|");
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockFileOutputStream0.close();
      mockPrintWriter0.append('r');
      Object object0 = new Object();
      char[] charArray0 = new char[9];
      charArray0[0] = 'r';
      Object object1 = new Object();
      MockFile mockFile0 = new MockFile("");
      MockFile.createTempFile("usage: ", (String) null, (File) mockFile0);
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2660, (String) null, "", (Options) null, 2660, 11, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setSyntaxPrefix("");
      Options options0 = null;
      boolean boolean0 = true;
      helpFormatter0.defaultArgName = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp("WDhd#*;hcqx", "k0d(pXHXQ1", options0, "p6~[/I{v`ib]T", true);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("yM@+Yqm_5N}x)9[Jg?", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) ";]J^Aj(S+bx";
      objectArray0[1] = (Object) "";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) ";]J^Aj(S+bx";
      PrintStream printStream0 = mockPrintStream0.printf(";]J^Aj(S+bx", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      Locale locale0 = Locale.FRENCH;
      mockPrintWriter0.format(locale0, "}", objectArray0);
      mockPrintWriter0.println(51);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim(" ");
      helpFormatter1.findWrapPos("", 1506, 74);
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, (-1), ";]J^Aj(S+bx");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockFileOutputStream0.getChannel();
      String string0 = "WDhd#*;hcqx";
      Options options0 = new Options();
      boolean boolean0 = true;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printOptions(mockPrintWriter0, 74, options0, 630, (-140));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(12, "{", "", (Options) null, "--", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("Qn#KyrniA&");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 63, "*{DLInQY'(?", "", options0, 4578, (-530), "$>BG", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "");
      Option option0 = new Option((String) null, "--", true, "-");
      Options options2 = options1.addOption(option0);
      options2.addOption("", "", true, ";Yril'o");
      options2.helpOptions();
      Object object0 = new Object();
      options1.helpOptions();
      option0.setType(object0);
      Options options3 = options2.addOption((String) null, (String) null, true, "-");
      options3.hasShortOption("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options3, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1534), "org.apache.commons.cli.HelpFormatter", "AV!X", options0, "org.apache.commons.cli.HelpFormatter", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream(" ");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream1);
      int int0 = 0;
      Locale locale0 = Locale.FRENCH;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintStream1;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) ".B!{zE";
      objectArray0[4] = (Object) mockPrintStream1;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 63, ".B!{zE", ".B!{zE", (Options) null, 0, 0, ".B!{zE", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('Q');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      int int0 = 399;
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "--");
      options1.addOption("", "", true, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-867), "", "cmdLineSyntax not provided", options1, (-867), 63, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Locale locale0 = Locale.FRENCH;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) helpFormatter0;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "~oc&Vt\u0004GAZ/rF", "~oc&Vt\u0004GAZ/rF", options1, "Y0V/Dro", false);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultLeftPad = (-966);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1166, "usage: ", "+q", options0, "usage: ", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", (Options) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("yM@+Yqm_5N}x)9[Jg?", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) ";]J^Aj(S+bx";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) mockFile0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) ";]J^Aj(S+bx";
      PrintStream printStream0 = mockPrintStream0.printf(";]J^Aj(S+bx", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      Locale locale0 = Locale.FRENCH;
      mockPrintWriter0.format(locale0, "}", objectArray0);
      mockPrintWriter0.println(51);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim(" ");
      helpFormatter1.setLongOptSeparator("");
      helpFormatter1.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "ohcH0>=[?R1V7qgpQJ";
      helpFormatter0.setLongOptSeparator("ohcH0>=[?R1V7qgpQJ");
      Options options0 = new Options();
      String string0 = null;
      helpFormatter0.printHelp(1069, "0NJFjF9?6rc,Y*^", (String) null, options0, "ohcH0>=[?R1V7qgpQJ", true);
      String string1 = "";
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 44, "", options0);
      MockPrintWriter mockPrintWriter2 = null;
      try {
        mockPrintWriter2 = new MockPrintWriter("usage: ", "ohcH0>=[?R1V7qgpQJ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // ohcH0>=[?R1V7qgpQJ
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(2455, "WDhd#*;hcqx", "WDhd#*;hcqx", options0, "", true);
      Locale locale0 = Locale.UK;
      Option option0 = null;
      try {
        option0 = new Option("   ", "-", true, "WDhd#*;hcqx");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '   ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      char char0 = 'r';
      mockFileOutputStream0.close();
      Object object0 = new Object();
      char[] charArray0 = new char[9];
      mockPrintWriter0.print((double) 3);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "a76kF";
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.defaultLongOptPrefix = "arg";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "a76kF", "arg", (Options) null, "arg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("Oj |Ts$G}|=", options0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(44, "", "", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("ohcH0>=[?R1V7qgpQJ");
      String string0 = helpFormatter0.createPadding(1166);
      helpFormatter0.findWrapPos("", 399, 54);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption("", string0, true, string0);
      Option option0 = new Option("arg", "\n", true, "ohcH0>=[?R1V7qgpQJ");
      options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = new Options();
      helpFormatter0.printHelp(string0, options2);
      Option option1 = new Option("", "");
      options2.addOption(option1);
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      int int0 = (-2943);
      int int1 = 421;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2943), 421, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(2455, "WDhd#*;hcqx", "WDhd#*;hcqx", options0, "+q", true);
      Locale locale0 = Locale.ROOT;
      Option option0 = new Option("", "-", true, "WDhd#*;hcqx");
      helpFormatter0.getLeftPadding();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "WDhd#*;hcqx");
      helpFormatter0.printUsage(printWriter0, 2455, "");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("ohcH0>=[?R1V7qgpQJ");
      String string0 = helpFormatter0.createPadding(1166);
      helpFormatter0.findWrapPos("", 399, 54);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption("", string0, true, "");
      Option option0 = new Option("arg", "\n", true, "ohcH0>=[?R1V7qgpQJ");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      int int0 = 64;
      helpFormatter0.printOptions(mockPrintWriter0, (-1), options3, 64, 54);
      String string1 = "";
      // Undeclared exception!
      try { 
        options1.addOption("-", "arg", true, "zvej`#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim(" | ");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      Options options1 = options0.addOption("", true, "--");
      options1.addOption("", "", true, "arg");
      int int0 = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-867), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("-", "j{cU", options0, "--");
      helpFormatter1.rtrim("-");
      Locale locale0 = Locale.CANADA;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("}VExGo$?<yyKhix7Y75", 32, (-1780));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "]";
      helpFormatter0.defaultArgName = " [ARG]";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("]", " [ARG]", (Options) null, " [ARG]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("]");
      helpFormatter0.setLongOptSeparator("]");
      helpFormatter0.createPadding(0);
      helpFormatter0.findWrapPos("[ option: ", 0, 3);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("<", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("usage: ");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(11, (String) null, " ", (Options) null, "H(x_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(235);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Locale locale0 = Locale.FRENCH;
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) ".B!{zE";
      objectArray0[2] = (Object) byteArrayOutputStream0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) locale0;
      objectArray0[5] = (Object) locale0;
      mockPrintWriter0.format(locale0, " ", objectArray0);
      String string0 = "\\";
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, (-3966), ".B!{zE");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 10, options0, 2, (-2200));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("]");
      MockFile mockFile0 = new MockFile("--");
      MockFile mockFile1 = new MockFile(mockFile0, "(/=xf!u\t3]iKq5E\"}");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Locale locale0 = Locale.CANADA;
      helpFormatter0.createPadding(31);
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setOptPrefix("3;>");
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 31, options0, (-1620), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "+q";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2455, "", "0NJFjF9?6rc,Y*^", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "a76dF";
      helpFormatter0.setLongOptSeparator("arg");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "a76dF", "arg", (Options) null, "arg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator(">Ek3M?K?K");
      helpFormatter1.setOptPrefix((String) null);
      helpFormatter0.createPadding(74);
      helpFormatter0.findWrapPos("arg", 1, 696);
      helpFormatter1.setOptionComparator((Comparator) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("4dKK#t+ueIxz3%z", "xdEMb52>|uT5");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // xdEMb52>|uT5
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      Locale locale0 = Locale.FRENCH;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) helpFormatter0;
      helpFormatter0.rtrim("");
      helpFormatter0.setLongOptSeparator("YJrl#D^9");
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1978), "\"", "YJrl#D^9", (Options) null, "~oc&Vt\u0004GAZ/rF");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "a76dF";
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.getWidth();
      URI uRI0 = MockURI.aFTPURI;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Locale locale0 = new Locale("3N[)aeR}'$`e;sS.?\")");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "a76dF";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      char[] charArray0 = new char[0];
      mockPrintWriter0.println(charArray0);
      objectArray0[4] = object0;
      objectArray0[6] = (Object) helpFormatter0;
      helpFormatter0.defaultOptPrefix = " ";
      objectArray0[7] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "--", objectArray0);
      mockPrintWriter0.println(0);
      helpFormatter0.printWrapped(printWriter0, 2, "-");
      helpFormatter0.rtrim((String) null);
      helpFormatter0.setLongOptSeparator("},x{3(xE");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream(" ");
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, (String) null, (String) null, options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "a76dF";
      helpFormatter0.setLongOptSeparator((String) null);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "a76dF", (String) null, (Options) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      MockFile mockFile0 = new MockFile("--");
      MockFile mockFile1 = new MockFile(mockFile0, "(/=xf!u\t3]iKq5E\"}");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Locale locale0 = Locale.CANADA;
      String string0 = "";
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) "";
      mockPrintWriter0.format(locale0, "", objectArray0);
      MockPrintWriter mockPrintWriter1 = null;
      try {
        mockPrintWriter1 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultOptPrefix = "";
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string1 = "$ZnVxeq-V-P35hc`F";
      String string2 = "A CloneNotSupportedException was thrown: ";
      helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
      helpFormatter0.createPadding(0);
      helpFormatter0.findWrapPos("$ZnVxeq-V-P35hc`F", 0, 0);
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.setOptionComparator((Comparator) null);
      String string3 = "4dKK#t+ueIxz3%z";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", "4dKK#t+ueIxz3%z");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 4dKK#t+ueIxz3%z
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream(" ");
      boolean boolean0 = false;
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream1);
      helpFormatter0.setOptionComparator((Comparator) null);
      MockPrintWriter mockPrintWriter1 = null;
      try {
        mockPrintWriter1 = new MockPrintWriter("", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("5)ZXp V\f");
      String string0 = "";
      MockFile mockFile0 = new MockFile("", "-");
      mockFile0.setReadOnly();
      String string1 = "2_l]G'sKB8Wnp&>6";
      Options options0 = null;
      mockFile0.getAbsoluteFile();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "2_l]G'sKB8Wnp&>6", "2_l]G'sKB8Wnp&>6", (Options) null, "moHh+aB\"");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getArgName();
      helpFormatter0.findWrapPos("", (-2604), (-2604));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.addOption("", true, "\n");
      helpFormatter1.printHelp(3, "-", "", options0, "");
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter1.renderWrappedText(stringBuffer0, 1, 118, "y(G P]$_6u]G");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = "h+DPG~+|KM\\UEEJlj";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("-", true, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2372);
      helpFormatter0.setDescPadding((-2372));
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      String string0 = "NKCbRp@ZL#F4&zU~";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2372), (-2372), "NKCbRp@ZL#F4&zU~");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(531);
      String string0 = "";
      String string1 = "h2,e.sh9w";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("--", "-", true, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 2366;
      helpFormatter0.setDescPadding((-2827));
      helpFormatter0.getOptPrefix();
      helpFormatter0.getNewLine();
      helpFormatter0.getWidth();
      String string0 = " | ";
      File file0 = MockFile.createTempFile(" | ", "XtcTIhTBW@@p>c");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("--", "-", file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      int int0 = (-867);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('Q');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "--");
      Options options2 = options1.addOption("", "", true, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 399, (String) null, (String) null, options2, 399, 399, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "WDhd#*;hcqx";
      Options options0 = new Options();
      boolean boolean0 = true;
      helpFormatter0.printHelp(2455, "WDhd#*;hcqx", "WDhd#*;hcqx", options0, "+q", true);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("Y}%as<TYGk/03'}'", "@dm+BQ7oXk^{ZA?");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // @dm+BQ7oXk^{ZA?
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1;
      helpFormatter0.createPadding(1);
      helpFormatter0.setSyntaxPrefix("I.O/dG");
      String string0 = "--";
      helpFormatter0.rtrim("--");
      helpFormatter0.getLongOptSeparator();
      String string1 = "";
      helpFormatter0.setArgName("");
      Options options0 = new Options();
      String string2 = "AI!-Hf6mnHll!XI+6";
      // Undeclared exception!
      try { 
        options0.addOption("mV vsmH;A", "xiAT-$k*N1U!1k", false, "Ks%4h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'mV vsmH;A' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 652;
      helpFormatter0.defaultLeftPad = 652;
      String string0 = "<";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getOption("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-2191));
      helpFormatter0.defaultWidth = 3258;
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.findWrapPos("hI0<7%;A", (-280), 31);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "line.separator";
      helpFormatter0.setArgName("");
      helpFormatter0.defaultArgName = "line.separator";
      helpFormatter0.getOptionComparator();
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile("/jx<_n38(I*m=l/}mi", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockFileOutputStream0.close();
      PrintWriter printWriter0 = mockPrintWriter0.append('r');
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "org.apache.commons.cli.ParseException");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      int int0 = 31;
      String string0 = "'";
      Options options0 = new Options();
      String string1 = "P4a5A";
      String string2 = "";
      String string3 = "has already been selected: '";
      options0.addOption("", "-", false, "has already been selected: '");
      String string4 = " :: ";
      Option option0 = null;
      try {
        option0 = new Option("usage: ", "P4a5A", false, " :: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("]");
      MockFile mockFile0 = new MockFile("--");
      String string0 = "(/=xf!u\\t3]iKq5E\"}";
      MockFile mockFile1 = new MockFile(mockFile0, "(/=xf!u\t3]iKq5E\"}");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Locale locale0 = Locale.CANADA;
      String string1 = "";
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockFile1;
      objectArray0[1] = (Object) "]";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      int int0 = 31;
      String string2 = "W";
      helpFormatter0.createPadding(31);
      mockPrintWriter0.format("usage: ", objectArray0);
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option(":'~%K7-/Y", "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ':'~%K7-/Y' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.defaultArgName = "";
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.defaultDescPad = (-1);
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "a76dF";
      helpFormatter0.defaultArgName = "a76dF";
      helpFormatter0.setLongOptSeparator((String) null);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(220, "a76dF", (String) null, (Options) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream(" ");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream1);
      Locale locale0 = Locale.FRENCH;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintStream1;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) ".B!{zE";
      objectArray0[4] = (Object) mockPrintStream1;
      mockPrintWriter0.format(locale0, ".B!{zE", objectArray0);
      mockPrintWriter0.println(74);
      String string0 = "\\";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "");
      String string1 = helpFormatter0.rtrim(string0);
      helpFormatter0.setLongOptSeparator(string1);
      int int0 = helpFormatter0.getDescPadding();
      assertEquals("\\", helpFormatter0.getLongOptSeparator());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "lQ";
      helpFormatter0.setLongOptPrefix("lQ");
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }
}
